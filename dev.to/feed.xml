<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>go-portfinder: Go implementation of npm portfinder</title>
      <author>Prasanna Kumar</author>
      <pubDate>Wed, 14 Apr 2021 13:15:53 +0000</pubDate>
      <link>https://dev.to/pgollangi/go-portfinder-go-implementation-of-npm-portfinder-52jm</link>
      <guid>https://dev.to/pgollangi/go-portfinder-go-implementation-of-npm-portfinder-52jm</guid>
      <description>&lt;p&gt;Go implementation of npm &lt;a href="https://www.npmjs.com/package/portfinder"&gt;portfinder&lt;/a&gt;. A simple tool to find an open port on the current machine.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;go get github.com/pgollang/go-portfinder
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"github.com/pgollang/go-portfinder"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
     &lt;span class="c"&gt;// scans and returns first open port on all network interfaces of current machine.&lt;/span&gt;
     &lt;span class="n"&gt;openPort&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;portfinder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetPort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;PortFinderOptions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="n"&gt;StartPort&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;9090&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="n"&gt;StopPort&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;9099&lt;/span&gt;
     &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Repo: &lt;a href="https://github.com/pgollangi/go-portfinder"&gt;https://github.com/pgollangi/go-portfinder&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>productivity</category>
      <category>go</category>
      <category>programming</category>
    </item>
    <item>
      <title>Boost your online presence with a STRONG personal brand üöÄ</title>
      <author>Amelia Vieira Rosado</author>
      <pubDate>Wed, 14 Apr 2021 13:01:07 +0000</pubDate>
      <link>https://dev.to/technoglot/boost-your-online-presence-with-a-strong-personal-brand-4j8e</link>
      <guid>https://dev.to/technoglot/boost-your-online-presence-with-a-strong-personal-brand-4j8e</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@garrhetsampson?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Garrhet Sampson&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hola amigos! üëãüèª Welcome to another one of my blogs! I'm delighted to have you here! ü§©&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Disclaimer: Who is this post for? Anyone! But especially for anyone looking to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;build an effective personal brand,&lt;/li&gt;
&lt;li&gt;boost their online presence,&lt;/li&gt;
&lt;li&gt;read a fun, light-hearted yet informative post 
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Grab your favorite drink, get comfortable and let us look at how to build a STRONG personal brand! Shall we? ‚òï &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#brief-intro"&gt;
  &lt;/a&gt;
  Brief intro ‚úçüèª
&lt;/h1&gt;

&lt;p&gt;Last week I attended another session of the Hashnode Bootcamp III. As I mentioned in a previous post (which you can find &lt;a href="https://dev.to/technoglot/supercharge-your-blogging-efforts-with-a-solid-system-3jhf"&gt;here&lt;/a&gt;), the goal of said "bootcamp" is to help developers build a strong online presence and personal brand. Awesome, right? &lt;/p&gt;

&lt;p&gt;The third talk was given by &lt;a href="https://twitter.com/colbyfayock"&gt;Colby Fayock&lt;/a&gt;, DevRel and Astrocoder at &lt;a href="https://applitools.com/"&gt;Applitools&lt;/a&gt;. Colby's talk was titled: "Stand Out by Building a Personal Brand". If you'd like to check out the slides for this talk, you can find them &lt;a href="https://slides.com/colbyfayock/stand-out-by-building-a-personal-brand-hashnode-bootcamp-3"&gt;here&lt;/a&gt;. Today, I'd like to share with you what I have learned form Colby's talk.&lt;/p&gt;

&lt;p&gt;So, without further ado, let's dive right into it! ü§ø&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-personal-brand-you-say"&gt;
  &lt;/a&gt;
  A personal brand you say? ü§î
&lt;/h1&gt;

&lt;p&gt;Yep! That's right. Brands are not just for companies and their products; people can have them too. But a personal brand and a product brand, are two different things.&lt;/p&gt;

&lt;p&gt;So, what's a personal brand? According to Colby, a personal brand consists of the following elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;A consistent photo of yourself&lt;/strong&gt;, meaning: have the same profile photo on ALL your socials.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;A consistent message&lt;/strong&gt;: make sure you tell the same story wherever you are, be it Twitter or your personal blog.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;A consistent voice&lt;/strong&gt;: stay true to your style and what characterizes you. In other words, show your personality in a fitting way.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: your personal brand is how you &lt;strong&gt;consistently&lt;/strong&gt; present yourself online to others. Lots of emphasis on &lt;strong&gt;CONSISTENCY&lt;/strong&gt;, which is key in anything you do, really. &lt;/p&gt;

&lt;p&gt;Need a more refined definition? I got you, fam! Check this definition that I found on &lt;a href="https://personalbrand.com/definition/"&gt;Personalbrand.com&lt;/a&gt; üëáüèª (yep, there's a site like that!):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A personal brand is a widely-recognized and largely-uniform perception or impression of an individual based on their experience, expertise, competencies, actions and/or achievements within a community, industry, or the marketplace at large.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, with that stuff out of the way, let us look at what makes consistency.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#consistency-is-key"&gt;
  &lt;/a&gt;
  Consistency is key üîë
&lt;/h1&gt;

&lt;p&gt;But how do you achieve consistency in your personal brand? Here, Colby proceeds to tell the audience how to accomplish this. Note, that what comes next, builds upon what we discussed in the previous section. A consistent personal brand is made off:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#a-photo-of-you"&gt;
  &lt;/a&gt;
  &lt;strong&gt;A photo of YOU&lt;/strong&gt;.
&lt;/h4&gt;

&lt;p&gt;Make sure that: a) you LOVE the photo and b) you are the only person on the photo. We know you love your boo (whoever that may be to you üòä), but your personal brand is about YOU and only YOU. (Unless, well, you and your boo are building a brand together. Otherwise, it's a solo mission). You may consider doing a professional photo shoot for this one (if you can afford one). Else, grab that Insta-famous friend of yours by the hand and beg them to please help you. üòÇ&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#a-high-quality-banner"&gt;
  &lt;/a&gt;
  &lt;strong&gt;A high quality banner&lt;/strong&gt;.
&lt;/h4&gt;

&lt;p&gt;Many social platforms and the like, offer the possibility to add a banner to your profile. That's usually one of the first things that people notice when visiting your profile too. This photo, should also be consistent across platforms. Additionally, you can add your motto or tagline to this image. That makes it more personal and more memorable. And remember, a banner image is better than none at all!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#a-short-bio"&gt;
  &lt;/a&gt;
  &lt;strong&gt;A short bio&lt;/strong&gt;.
&lt;/h4&gt;

&lt;p&gt;You can get wild with this one if you like, but make sure you use a similar (or identical) format across platforms. Here you can state things like where you work, what's your job title, what tech you focus on and the like. You can also add links to your sites and social profiles. Up to you. &lt;strong&gt;PRO tip&lt;/strong&gt; üí°: if you have too many social links that just won't fit in a bio, you can use a service like &lt;a href="https://linktr.ee/"&gt;Linktree&lt;/a&gt; to create a so-called link-in-profile. So, you'll wind up with a single link, that holds all your other links. Pretty neat, right?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Author's note: this is NOT a sponsored post. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With these 3 guidelines, you can go ahead and overhaul your social platforms. Go get em, tiger! üêØ&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-impact-of-personal-brands"&gt;
  &lt;/a&gt;
  The impact of personal brands üéâ
&lt;/h1&gt;

&lt;p&gt;Now, you may be thinking: "This is all nice and dandy, Amelia. But how can a personal brand have any impact?". In his talk, Colby introduced the audience to an acronym he came up with to describe how a personal brand can have impact: &lt;strong&gt;ACE&lt;/strong&gt;. (he thinks the acronym is not so cool, by the way üòÇ). In this context, &lt;strong&gt;ACE&lt;/strong&gt; is what a personal brand enables you to build. &lt;/p&gt;

&lt;p&gt;Let's zoom in a little. ACE stands for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(A)uthority,&lt;/li&gt;
&lt;li&gt;(C)ommunities and&lt;/li&gt;
&lt;li&gt;(E)xpertise&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can build authority by, for example, blogging or creating content around a certain topic. Colby used his boss, &lt;a href="https://twitter.com/techgirl1908"&gt;Angie Jones&lt;/a&gt;, as an example. Angie has been working with Java for a really long time. She's so good at it, that she was even recognized as a Java Champion (yep, that's a thing!). By producing content around Java, Angie was able to build a sense of authority around her personal brand. The good news? You can do the same too! Choose a topic you'd like to be recognized as an authority in, and start creating content around it along side your personal brand. With hard work and consistency, you are guaranteed to succeed!&lt;/p&gt;

&lt;p&gt;You can also build communities around your personal brand. An example given by Colby, is &lt;a href="https://blacktechpipeline.com/"&gt;Black Tech Pipeline&lt;/a&gt;, by &lt;a href="https://twitter.com/ParissAthena"&gt;Pariss Athena&lt;/a&gt;. Pariss launched Black Tech Pipeline to help connect black technologists to great companies. In addition to that, Pariss also kickstarted #BlackTechTwitter. So, in short, through her personal brand, she's come to build a community where black technologists can find a place in tech (where they are usually underrepresented, by the way).&lt;/p&gt;

&lt;p&gt;This brings us to the last point, which is expertise. Similar to authority, expertise is something others can recognize in you. Let's say you have a long record of published mobile applications (Android and iOS) and years of expertise in the area of native mobile development. You may well be seen as an expert in this field (and perhaps even get recognized as an authority), given all the tangible experience you possess.&lt;/p&gt;

&lt;p&gt;That basically sums it up. But, how does one accomplish all this? The answer is simple: by building VALUE. Value, as previously mentioned, can be in the form of content. You could start a YouTube channel and teach others about Cybersecurity. Or you could start a blog about your adventures with Ruby on Rails. Anything counts! As long as your personal brand is cohesive and memorable, the value you bring will not go unnoticed! üòä&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bonus-tips"&gt;
  &lt;/a&gt;
  BONUS tips üí°
&lt;/h1&gt;

&lt;p&gt;Before you go, let me give you a few more tips as a parting gift. üéÅ &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#use-canva-for-making-your-banner"&gt;
  &lt;/a&gt;
  Use Canva for making your banner
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.canva.com/"&gt;Canva&lt;/a&gt; is a online tool that you can create any kind of visuals, such as slides, holiday cards, posters, flyers, logos... you name it! You can also use this to make your banner for your social platforms. Before getting started, however, be sure to check the required dimensions by the platform you are targeting (it would be a shame if you create a design that doesn't fit üò¢). Be mindful of photo quality too and the format of the photo. Some platforms support limited photo formats. Forewarned is forearmed! &lt;/p&gt;

&lt;p&gt;And in case you have no idea how to get started with a banner, just use a template provided by Canva and tweak it to your liking. Have fun! üë©üèª‚Äçüé®üë®üèª‚Äçüé®&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#start-blogging-or-creating-content"&gt;
  &lt;/a&gt;
  Start blogging or creating content
&lt;/h4&gt;

&lt;p&gt;Not because I say so, but because it works! If you are down for it, start a blog wherever you feel comfortable and put your content out there. Don't like writing? Maybe make a YouTube channel. Don't like that either? Maybe start a podcast. When it comes to content creation, I believe there is a medium for everyone. You just gotta go out of your way to find the one that best suits YOU. üòâ &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#engage-with-others"&gt;
  &lt;/a&gt;
  Engage with others
&lt;/h4&gt;

&lt;p&gt;One other super easy way of making yourself more visible is to engage with others. Be it on social media or on their blogs. Leaving meaningful comments wherever you can, will definitely attract some people to your own profile. Who knows, you may be able to make a friend or two while at it! üòÅ&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h1&gt;

&lt;p&gt;That's it for today's post! If you found it helpful, let me know in the comments below. üëáüèª How did you (or how are you) building your personal brand? Any tips you can share? I'd love to hear from you! &lt;/p&gt;

&lt;p&gt;Happy hacking on that personal brand! üë©üèª‚Äçüíªüë®üèª‚Äçüíª See you next time!&lt;/p&gt;

&lt;p&gt;Sources&lt;br&gt;
&lt;a href="https://twitter.com/colbyfayock"&gt;Colby Fayock on Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://slides.com/colbyfayock/stand-out-by-building-a-personal-brand-hashnode-bootcamp-3"&gt;Colby's wonderful slides&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.colbyfayock.com/hashnode-bootcamp-personal-brand"&gt;Some extra resources shared by Colby&lt;/a&gt;&lt;br&gt;
&lt;a href="https://personalbrand.com/definition/"&gt;Definition of personal brand by Personalbrand.com&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/techgirl1908"&gt;Angie Jones on Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/ParissAthena"&gt;Pariss Athena on Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://blacktechpipeline.com/"&gt;Black Tech Pipeline&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tools üî®&lt;br&gt;
&lt;a href="https://linktr.ee/"&gt;Linktree&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.canva.com/"&gt;Canva&lt;/a&gt;&lt;/p&gt;

</description>
      <category>techtalks</category>
      <category>writing</category>
      <category>watercooler</category>
      <category>leadership</category>
    </item>
    <item>
      <title>How to fix the React memory leak warning</title>
      <author>Jonathan Experton</author>
      <pubDate>Wed, 14 Apr 2021 12:52:48 +0000</pubDate>
      <link>https://dev.to/jexperton/how-to-fix-the-react-memory-leak-warning-d4i</link>
      <guid>https://dev.to/jexperton/how-to-fix-the-react-memory-leak-warning-d4i</guid>
      <description>&lt;p&gt;If you've ever worked with React function components and the &lt;a href="https://reactjs.org/docs/hooks-effect.html"&gt;useEffect&lt;/a&gt; hook, it's almost impossible that you've never faced this warning:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Warning: Can't perform a React state update on an unmounted
component. This is a no-op, but it indicates a memory leak in
your application. To fix, cancel all subscriptions and
asynchronous tasks in a useEffect cleanup function.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the warning I'm referring to as &lt;em&gt;the&lt;/em&gt; React memory leak warning because it is very easy to trigger and hard to get rid of if you don't understand what's happening.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#explaining-the-warning"&gt;
  &lt;/a&gt;
  Explaining the warning
&lt;/h2&gt;

&lt;p&gt;There are 4 important concepts here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Can't perform a React state update&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;on an unmounted component.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;To fix, cancel all subscriptions and asynchronous tasks&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;in a useEffect cleanup function.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I won't explain what a memory leak is, instead I'll encourage you to read what is my go-to article about &lt;a href="https://blog.sessionstack.com/how-javascript-works-memory-management-how-to-handle-4-common-memory-leaks-3f28b94cfbec"&gt;memory management in Javascript&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-state-update"&gt;
  &lt;/a&gt;
  What is a &lt;em&gt;state update&lt;/em&gt;?
&lt;/h3&gt;

&lt;p&gt;Given the following state initialization:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isVisible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsVisible&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A state update would be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setIsVisible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-is-an-unmounted-component"&gt;
  &lt;/a&gt;
  What is &lt;em&gt;an unmounted component&lt;/em&gt;?
&lt;/h3&gt;

&lt;p&gt;A component is &lt;a href="https://reactjs.org/docs/react-component.html#unmounting"&gt;unmounted&lt;/a&gt; when it is removed from the DOM. It is the final step of a React component's life cycle.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-subscriptions-and-asynchronous-tasks"&gt;
  &lt;/a&gt;
  What are &lt;em&gt;subscriptions&lt;/em&gt; and &lt;em&gt;asynchronous tasks&lt;/em&gt;?
&lt;/h3&gt;

&lt;p&gt;Asynchronous tasks are callbacks sent to the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#queue"&gt;&lt;em&gt;queue of callbacks&lt;/em&gt;&lt;/a&gt; of the &lt;a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ"&gt;event loop&lt;/a&gt;. They are asynchronous because they won't be executed until some conditions are met.&lt;/p&gt;

&lt;p&gt;Any mechanism that can add a callback to the &lt;em&gt;queue of callbacks&lt;/em&gt;, thereby deferring its execution until the fulfillment of a condition, can be considered as a &lt;em&gt;subscription&lt;/em&gt;: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;Promises&lt;/a&gt; when fulfilled or rejected&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout"&gt;&lt;code&gt;setTimeout&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval"&gt;&lt;code&gt;setInterval&lt;/code&gt;&lt;/a&gt; when a certain time has elapsed &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events"&gt;Events&lt;/a&gt; when the event occurs&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I've skipped &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/setImmediate"&gt;&lt;code&gt;setImmediate&lt;/code&gt;&lt;/a&gt; since it's not a web standard, and I'm simplifying things by referring to a unique &lt;em&gt;queue of callbacks&lt;/em&gt; when there's in fact multiple queues with  different levels of priority.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#case-1-asynchronous-task-in-a-promise-handler"&gt;
  &lt;/a&gt;
  Case 1 - Asynchronous task in a Promise handler
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;someAsyncFunction&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Here is the asynchronous task.&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;someAsyncFunction()&lt;/code&gt; returns a &lt;code&gt;Promise&lt;/code&gt; we can &lt;em&gt;subscribe&lt;/em&gt; to by calling the &lt;code&gt;then()&lt;/code&gt; method with a callback function as the &lt;em&gt;task&lt;/em&gt; to execute when &lt;code&gt;someAsyncFunction()&lt;/code&gt; resolves. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#case-2-asynchronous-task-in-a-raw-settimeout-endraw-handler"&gt;
  &lt;/a&gt;
  Case 2 - Asynchronous task in a &lt;code&gt;setTimeout&lt;/code&gt; handler
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Here is the asynchronous task.&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;setTimeout&lt;/code&gt; is usually called with a delay as a second argument, but &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop#zero_delays"&gt;when left empty&lt;/a&gt;, the event handler will be executed as soon as the event loop starts to process the &lt;em&gt;queue of callbacks&lt;/em&gt;, but it is still asynchronous and has a significant chance to be executed after the component has been unmounted.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#case-3-asynchronous-task-in-an-event-handler"&gt;
  &lt;/a&gt;
  Case 3 - Asynchronous task in an event handler
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Dimensions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Here is the asynchronous task.&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Subscribing to an event is done by adding an event listener and passing a callback function to the listener. &lt;/p&gt;

&lt;p&gt;Until the event listener is removed or the event emitter is destroyed, the callback function will be added to the &lt;em&gt;queue of callbacks&lt;/em&gt; on every event occurrence.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#asynchronous-tasks-are-side-effects"&gt;
  &lt;/a&gt;
  Asynchronous tasks are side effects
&lt;/h3&gt;

&lt;p&gt;In React functional components any side effects such as data fetching or event handling &lt;a href="https://reactjs.org/docs/hooks-overview.html#effect-hook"&gt;should be done inside a useEffect&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;someAsyncFunction&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Here is an asynchronous task.&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;Dimensions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// There is another asynchronous task.&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-is-a-useeffect-cleanup-function"&gt;
  &lt;/a&gt;
  What is a &lt;em&gt;useEffect cleanup function&lt;/em&gt;?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup"&gt;Every effect may return a function that cleans up after it&lt;/a&gt;. This function is called when the component is unmounted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// This is the cleanup function&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-is-wrong"&gt;
  &lt;/a&gt;
  What is wrong?
&lt;/h2&gt;

&lt;p&gt;React is telling us to stop trying to update the state of a component that has been deleted.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#case-1-asynchronous-task-in-a-promise-handler"&gt;
  &lt;/a&gt;
  Case 1 - Asynchronous task in a Promise handler
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;someAsyncFunction&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setIsVisible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because we've subscribed to a Promise, there's a pending callback, waiting for the Promise to settle, regardless of whether it has been fulfilled or rejected. &lt;/p&gt;

&lt;p&gt;If the React component is unmounted before the Promise completion, the pending callback stays in the &lt;em&gt;callback queue&lt;/em&gt; anyway.&lt;/p&gt;

&lt;p&gt;And once the Promise has settled, it will try to update the state of a component that doesn't exist anymore.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#case-2-asynchronous-task-in-a-raw-settimeout-endraw-handler"&gt;
  &lt;/a&gt;
  Case 2 - Asynchronous task in a &lt;code&gt;setTimeout&lt;/code&gt; handler
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setIsVisible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code is close to the previous case except that the condition for the callback to be executed is to wait 5000ms.&lt;/p&gt;

&lt;p&gt;If the React component is unmounted before this amount of time, it will also try to update the state of a component that doesn't exist anymore.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#case-3-asynchronous-task-in-an-event-handler"&gt;
  &lt;/a&gt;
  Case 3 - Asynchronous task in an event handler
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;Dimensions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setDimensions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Attaching handlers to events is different from the previous cases because events can occur multiple times and therefore can trigger the same callback multiple times.&lt;/p&gt;

&lt;p&gt;If the event emitter we've bound an event handler is not destroyed when the React component is unmounted, it still exists and will be executed on every event occurrence.&lt;/p&gt;

&lt;p&gt;In the above example, the event handler is bound to a global variable &lt;code&gt;Dimensions&lt;/code&gt;, the event emitter, which exists outside of the scope of the component. &lt;/p&gt;

&lt;p&gt;Therefore, the event handler is not unbound or garbage collected when the component is unmounted, and the event emitter might trigger the callback in the future even though the component doesn't exist anymore.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fixing-the-problem"&gt;
  &lt;/a&gt;
  Fixing the problem
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#case-1-asynchronous-task-in-a-promise-handler"&gt;
  &lt;/a&gt;
  Case 1 - Asynchronous task in a Promise handler
&lt;/h4&gt;

&lt;p&gt;Since it is not possible to cancel a Promise the solution is to prevent the &lt;code&gt;setIsVisible&lt;/code&gt; function to be called if the component has been unmounted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isVisible&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setIsVisible&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;cancel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;someAsyncFunction&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;setIsVisible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nx"&gt;cancel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By leveraging &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures#lexical_scoping"&gt;lexical scoping&lt;/a&gt;, we can share a variable between the callback function and the cleanup function.&lt;/p&gt;

&lt;p&gt;We use the cleanup function to modify the &lt;code&gt;cancel&lt;/code&gt; variable and trigger an &lt;a href="https://dev.to/jpswade/return-early-12o5"&gt;early return&lt;/a&gt; in the callback function to prevent the state update.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#case-2-asynchronous-task-in-a-raw-settimeout-endraw-handler"&gt;
  &lt;/a&gt;
  Case 2 - Asynchronous task in a &lt;code&gt;setTimeout&lt;/code&gt; handler
&lt;/h4&gt;

&lt;p&gt;To remove a callback bound to a timer, remove the timer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;timer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setIsVisible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;clearTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#case-3-asynchronous-task-in-an-event-handler"&gt;
  &lt;/a&gt;
  Case 3 - Asynchronous task in an event handler
&lt;/h4&gt;

&lt;p&gt;To cancel a subscription to an event, remove the event handler:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setDimensions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;Dimensions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Dimensions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Global variables are never garbage collected so don't forget to remove event handlers manually if the event emitter is stored in a global variable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remove any event handlers bound to event emitters that might not be removed when a component is unmounted.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Promises cannot be cancelled but you can use lexical scoping to change the behavior of the callback from the &lt;code&gt;useEffect&lt;/code&gt; cleanup function by triggering an early return or &lt;a href="https://dev.to/witaylor/short-circuit-conditionals-in-javascript-54i2"&gt;short-circuiting&lt;/a&gt; the state update.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Try to avoid timers, if you can't, be sure to always cancel them with &lt;code&gt;clearTimeout&lt;/code&gt; or &lt;code&gt;clearInterval&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;small&gt;Photo by &lt;a href="https://unsplash.com/@healing_photographer"&gt;Aar√≥n Blanco Tejedor&lt;/a&gt; on &lt;a href="https://unsplash.com"&gt;Unsplash&lt;/a&gt;&lt;br&gt;
  &lt;/small&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Monorepo With Yarn Workspaces</title>
      <author>pyeong.oh5</author>
      <pubDate>Wed, 14 Apr 2021 12:38:25 +0000</pubDate>
      <link>https://dev.to/pyeongoh5/monorepo-with-yarn-workspaces-325m</link>
      <guid>https://dev.to/pyeongoh5/monorepo-with-yarn-workspaces-325m</guid>
      <description>&lt;h1&gt;
  &lt;a href="#1-monorepo"&gt;
  &lt;/a&gt;
  1. Monorepo
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;Monorepo&lt;/code&gt;Îäî &lt;code&gt;Monolithic Repositories&lt;/code&gt;Ïùò ÏïΩÏûêÎ°ú, ÏßÅÏó≠ÌïòÎ©¥ &lt;code&gt;Îã®Îã®Ìûà ÌïòÎÇòÎ°ú ÏßúÏó¨ÏßÑ Ï†ÄÏû•ÏÜå&lt;/code&gt;Î•º ÏùòÎØ∏Ìï©ÎãàÎã§. Îã®Îã®Ìûà ÌïòÎÇòÎ°ú Ïß∑Ïó¨ÏßÑ Ï†ÄÏû•ÏÜåÎùºÎäîÍ≤å Î¨¥Ïä® ÏùòÎØ∏ ÏùºÍπåÏöî? ÏùºÎ∞òÏ†ÅÏúºÎ°ú Î≥¥ÌÜµ ÌïòÎÇòÏùò ÌîÑÎ°úÏ†ùÌä∏Îäî ÌïòÎÇòÏùò Î†àÌè¨ÏßÄÌÜ†Î¶¨ÏôÄ Îß§Ïπ≠Ïù¥ ÎêòÍ≥† Ïù¥Îü∞ ÌòïÌÉúÏùò ÌîÑÎ°úÏ†ùÌä∏ Íµ¨ÏÑ±ÏùÑ &lt;code&gt;Multi-repo&lt;/code&gt;, &lt;code&gt;PolyRepo&lt;/code&gt;ÎùºÍ≥† Ìï©ÎãàÎã§.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;A ÌîÑÎ°úÏ†ùÌä∏ -&amp;gt; A Î†àÌè¨ÏßÄÌÜ†Î¶¨
B ÌîÑÎ°úÏ†ùÌä∏ -&amp;gt; B Î†àÌè¨ÏßÄÌÜ†Î¶¨
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Monorepo&lt;/code&gt;Îäî Ïù¥ÏôÄ Î∞òÎåÄÎ°ú Ïó¨Îü¨ ÌîÑÎ°úÏ†ùÌä∏Í∞Ä ÌïòÎÇòÏùò Î†àÌè¨ÏßÄÌÜ†Î¶¨Ïóê Ï†ÄÏû•ÎêòÎäî ÌòïÌÉúÎ•º ÏÉùÍ∞Å Ìï† Ïàò ÏûàÏäµÎãàÎã§.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;A ÌîÑÎ°úÏ†ùÌä∏ 
B ÌîÑÎ°úÏ†ùÌä∏  -&amp;gt; Mono Î†àÌè¨ÏßÄÌÜ†Î¶¨
C ÌîÑÎ°úÏ†ùÌä∏ 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Í∑∏Î¶ºÏúºÎ°ú ÌëúÌòÑÌï¥Î≥¥Î©¥ ÏïÑÎûòÏôÄ Í∞ôÏùÄ Íµ¨Ï°∞ÏûÖÎãàÎã§.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RSBUf_q9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gdvuh3w34o2l453em5vj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RSBUf_q9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gdvuh3w34o2l453em5vj.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#2-monorepo%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0"&gt;
  &lt;/a&gt;
  2. MonorepoÎ•º ÏÇ¨Ïö©ÌïòÎäî Ïù¥Ïú†
&lt;/h1&gt;

&lt;p&gt;MonorepoÎ•º ÏÇ¨Ïö©ÌïòÎäî Ïù¥Ïú†Îäî ÍµâÏû•Ìûà Îã§ÏñëÌï† Ïàò ÏûàÎäîÎç∞Ïöî, Ïû•Ï†êÏù¥ ÏûàÎäî ÎßåÌÅº Îã®Ï†êÎèÑ ÏûàÏùÑ Ïàò ÏûàÏñ¥ÏÑú, &lt;br&gt;
ÌîÑÎ°úÏ†ùÌä∏ ÌôòÍ≤ΩÏùÑ Í≥†Î†§Ìï¥ Í≤∞Ï†ïÌïòÎ©¥ Ï¢ãÏùÑÍ≤É Í∞ôÏäµÎãàÎã§.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#21-%EC%9E%A5%EC%A0%90"&gt;
  &lt;/a&gt;
  2.1. Ïû•Ï†ê
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;2.1.1. ÌïòÎÇòÏùò Î†àÌè¨ÏßÄÌÜ†Î¶¨Î°ú Ïó¨Îü¨Í∞úÏùò ÌîÑÎ°úÏ†ùÌä∏Î•º Í¥ÄÎ¶¨Ìï† Ïàò ÏûàÎã§.&lt;/strong&gt;&lt;br&gt;
ÌïòÎÇòÏùò Î†àÌè¨ÏßÄÌÜ†Î¶¨Í∞Ä Ïó¨ÎûòÍ∞úÏùò ÌîÑÎ°úÏ†ùÌä∏(Ïó¨Í∏∞ÏÑúÎäî Ìå®ÌÇ§ÏßÄÎùºÍ≥† ÌïòÍ≤†ÏäµÎãàÎã§.)Î•º Ìè¨Ìï®ÌïòÍ≥† ÏûàÎäîÍ≤ÉÏùÄ ÍµâÏû•Ìûà ÌÅ∞ Ìé∏ÏùòÏÑ±ÏùÑ Í∞ÄÏßëÎãàÎã§. ÏΩîÎìúÎ•º ÏßúÎäî ÏûÖÏû•ÏóêÏÑúÎèÑ Ïó¨Îü¨Í∞úÏùò IDEÎ•º Ïó¥Í±∞ÎÇò, IDEÏóêÏÑú ÌîÑÎ°úÏ†ùÌä∏Î•º Ïä§ÏúÑÏπòÌï¥Í∞ÄÎ©∞ Í∞úÎ∞úÌï† ÌïÑÏöîÏóÜÏù¥ ÌïòÎÇòÏùò IDEÏóêÏÑú ÌïòÏúÑÌè¥ÎçîÎ°ú Íµ¨Î∂ÑÎêú Ïó¨Îü¨ Ìå®ÌÇ§ÏßÄÎì§Ïùò ÏΩîÎìúÎ•º ÏûëÏÑ±Ìï† Ïàò ÏûàÏäµÎãàÎã§.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.1.2. Ï§ëÏ≤©ÎêòÎäî ÏΩîÎìúÎ•º Í≥µÌÜµÌôîÌï† Ïàò ÏûàÎã§.&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;A, B, C, D&lt;/code&gt; Ìå®ÌÇ§ÏßÄÎ°ú Íµ¨ÏÑ±Îêú MonorepoÍ∞Ä ÏûàÍ≥†, Ïó¨Îü¨ ÌîÑÎ°úÏ†ùÌä∏Îì§Ïù¥ Í≥µÌÜµÏúºÎ°ú ÏÇ¨Ïö©Ìï¥ÏïºÌïòÎäî Î°úÏßÅÏù¥ ÏûàÏùÑ Îïå, Ïù¥Î•º ÏâΩÍ≤å Ï∂îÍ∞ÄÏ†ÅÏù∏ &lt;code&gt;E&lt;/code&gt; Ìå®ÌÇ§ÏßÄÎ°ú Î∂ÑÎ¶¨ÌïòÍ≥† &lt;code&gt;A~D&lt;/code&gt; Ìå®ÌÇ§ÏßÄÏóêÏÑú &lt;code&gt;import&lt;/code&gt; ÌïòÏó¨ ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.1.3. Ï§ëÏ≤©ÎêòÎäî Î™®ÎìàÏùÄ ÌïòÎÇòÎßå ÏÑ§ÏπòÌïòÏó¨ ÏÇ¨Ïö©Ìï©ÎãàÎã§.&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;A, B, C, D&lt;/code&gt; Ìå®ÌÇ§ÏßÄ Î™®Îëê &lt;code&gt;react 16.11.0&lt;/code&gt; Î≤ÑÏ†ÑÏùÑ ÏÇ¨Ïö©ÌïúÎã§Í≥† Í∞ÄÏ†ïÌïòÎ©¥, Í∞ÅÍ∞ÅÏùò Ìå®ÌÇ§ÏßÄÏóêÏÑú react 16.11.0 Î≤ÑÏ†ÑÏùÑ ÏÑ§ÏπòÌïòÎäîÍ≤ÉÏù¥ ÏïÑÎãå rootÏóê &lt;code&gt;react 16.11.0&lt;/code&gt; Î≤ÑÏ†Ñ ÌïòÎÇòÎ•º ÏÑ§ÏπòÌïòÍ≥† &lt;code&gt;A~D&lt;/code&gt;ÏóêÏÑú ÎÅåÏñ¥Îã§ ÏÇ¨Ïö©Ìï©ÎãàÎã§.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#22-%EB%8B%A8%EC%A0%90"&gt;
  &lt;/a&gt;
  2.2. Îã®Ï†ê
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;2.2.1. ÏùòÏ°¥ÏÑ±Ïùò Ï∂©ÎèåÏù¥ ÏÉùÍ∏∏Í≤ΩÏö∞, Ï†ïÏÉÅÎèôÏûë ÌïòÎçò Ìå®ÌÇ§ÏßÄÎì§ÎèÑ ÎèôÏûëÌïòÏßÄ ÏïäÏùÑ Ïàò ÏûàÎã§.&lt;/strong&gt;&lt;br&gt;
ÌäπÏ†ï Ìå®ÌÇ§ÏßÄÍ∞Ä ÌäπÏ†ï Î≤ÑÏ†ÑÏùò Î™®ÎìàÏùÑ ÌïÑÏöîÎ°ú ÌïòÎäî Í≤ΩÏö∞, Îã§Î•∏ Î≤ÑÏ†ÑÏùò Î™®ÎìàÏùÑ ÏÇ¨Ïö©ÌïòÎäî Ìå®ÌÇ§ÏßÄÏôÄ ÏùòÏ°¥ÏÑ± Ï∂©ÎèåÏù¥ Î∞úÏÉùÌï† Ïàò ÏûàÏäµÎãàÎã§.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.2.2. Ïó¨Îü¨ ÌîÑÎ°úÏ†ùÌä∏Î•º ÌïòÎÇòÏùò Î†àÌè¨ÏßÄÌÜ†Î¶¨Î°ú Í¥ÄÎ¶¨ÌïòÍ∏∞ ÎïåÎ¨∏Ïóê Ïò§ÌûàÎ†§ Í¥ÄÎ¶¨Í∞Ä Ïñ¥Î†§Ïö∏ Ïàò ÏûàÎã§.&lt;/strong&gt;&lt;br&gt;
MonorepoÎ°ú Í¥ÄÎ¶¨ÌïòÎäî Ìå®ÌÇ§ÏßÄÍ∞Ä ÎßéÏßÄ ÏïäÏùÑ Í≤ΩÏö∞ÏóêÎäî Ìï¥ÎãπÎêòÏßÄ ÏïäÏßÄÎßå, Í¥ÄÎ¶¨ÌïòÎäî Ìå®ÌÇ§ÏßÄÍ∞Ä Ï¶ùÍ∞ÄÌï®Ïóê Îî∞Îùº Ïò§ÌûàÎ†§ Í∞ÄÎèÖÏÑ±Ïù¥ÎÇò Ïó¨Îü¨Í∞ÄÏßÄ Ï∏°Î©¥ÏóêÏÑú ÎπÑÌö®Ïú®Ï†ÅÏù¥Í≤å Îê† Ïàò ÏûàÏäµÎãàÎã§.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.2.3. Ï¥àÍ∏∞ ÌîÑÎ°úÏ†ùÌä∏ ÏÑ§Ï†ïÏù¥ Ïò§ÎûòÍ±∏Î¶∞Îã§.&lt;/strong&gt;&lt;br&gt;
MonorepoÎ°ú Ìè¨Ìï®ÎêòÎäî Î™®Îì† ÌîÑÎ°úÏ†ùÌä∏Î•º ÏÇ¨Ïö©ÌïúÎã§Î©¥ ÏÉÅÍ¥ÄÏóÜÏßÄÎßå, Í∑∏ Ï§ë ÏùºÎ∂ÄÎßå ÌïÑÏöîÌïú Í≤ΩÏö∞ÏóêÎèÑ, Ï†ÑÏ≤¥Ï†ÅÏù∏ node_module ÏÑ§ÏπòÍ∞Ä Ïù¥Î£®Ïñ¥ Ï†∏ÏïºÌïúÎã§.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#3-monorepo%EB%A5%BC-%EA%B5%AC%EC%84%B1%ED%95%98%EB%8A%94-%EC%97%AC%EB%9F%AC%EA%B0%80%EC%A7%80-%EB%B0%A9%EB%B2%95"&gt;
  &lt;/a&gt;
  3. MonorepoÎ•º Íµ¨ÏÑ±ÌïòÎäî Ïó¨Îü¨Í∞ÄÏßÄ Î∞©Î≤ï
&lt;/h1&gt;

&lt;p&gt;MonorepoÎ•º Íµ¨ÏÑ±ÌïòÎäî Î∞©Î≤ïÏùÄ ÏïÑÎûòÏôÄ Í∞ôÏù¥ Ïó¨Îü¨Í∞ÄÏßÄ Î∞©Î≤ïÎì§Ïù¥ ÏûàÏúºÎ©∞, Ï†ÄÎäî ÌòÑÏû¨ yarn workspace Í∏∞Îä•ÎßåÏùÑ ÏÇ¨Ïö©ÌïòÍ≥† ÏûàÏäµÎãàÎã§.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#31-yarn-workspace"&gt;
  &lt;/a&gt;
  3.1. yarn workspace
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;node package manager&lt;/code&gt;Ï§ëÏóê ÌïòÎÇòÏù∏ &lt;code&gt;yarn&lt;/code&gt;ÏóêÏÑúÎäî (&lt;code&gt;npm&lt;/code&gt;Ïóî ÏóÜÏùå!!) workspace Í∏∞Îä•ÏùÑ ÌÜµÌï¥ÏÑú monorepoÎ•º Í∞ÄÎä•ÌïòÍ≤å Ìï¥Ï§çÎãàÎã§.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#32-lerna"&gt;
  &lt;/a&gt;
  3.2. &lt;a href="https://github.com/lerna/lerna"&gt;Lerna&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;LernaÎäî node mouduleÎ°ú, yarnÏùò workspaceÏôÄ ÎßàÏ∞¨Í∞ÄÏßÄÎ°ú monorepoÎ•º Í∞ÄÎä•ÌïòÍ≤å Ìï¥Ï£ºÎäî Í∏∞Îä•ÏùÑ Ï†úÍ≥µÌï®Í≥º ÎèôÏãúÏóê, ÏÑ§ÏπòÎêú ÏùòÏ°¥ÏÑ±ÏùÑ Ï†úÍ±∞Ìï¥Ï£ºÎäî &lt;code&gt;clean&lt;/code&gt; Í∏∞Îä•Ïù¥ÎÇò monorepoÎ°ú Íµ¨ÏÑ±Ìïú packageÎ•º npm Î∞∞Ìè¨Ìï† Ïàò ÏûàÎäî Í∏∞Îä•Îì§ÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#33-git-submodule"&gt;
  &lt;/a&gt;
  3.3. git submodule
&lt;/h3&gt;

&lt;p&gt;Í∏∞Ï°¥ multi-repoÎ°ú Í¥ÄÎ¶¨ÎêòÎäî Í≤ÉÎì§ÏùÑ ÌïòÎÇòÎ°ú Ìï©Ï≥êÏÑú, monorepoÎ•º Íµ¨ÏÑ±ÌïòÎ†§Îäî Í≤ΩÏö∞ gitÏùò submoduleÏùÑ ÏÇ¨Ïö©ÌïòÏó¨ Íµ¨ÏÑ± Ìï† Ïàò ÏûàÏäµÎãàÎã§. Îã® git submoduleÏùÄ ÏúÑÏùò Î∞©Î≤ïÎì§Í≥ºÎäî Îã§Î•¥Í≤å Îã§ÏàòÏùò Î†àÌè¨ÏßÄÌÜ†Î¶¨Î•º Í¥ÄÎ¶¨ÌïòÏó¨Ïïº ÌïòÍ≥† submoduleÏù¥ÎùºÎäî Í≤ÉÏùò Í∞úÎÖêÍ≥º ÏÇ¨Ïö©Î∞©Î≤ïÏùÑ ÏùµÌòÄÏïºÌïòÍ∏∞ ÎïåÎ¨∏Ïóê Ïñ¥ÎäêÏ†ïÎèÑ Îü¨Îãù Ïª§Î∏åÍ∞Ä ÏûàÏäµÎãàÎã§.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#4-yarn-workspace%EB%A1%9C-monorepo-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0"&gt;
  &lt;/a&gt;
  4. yarn workspaceÎ°ú Monorepo Íµ¨ÏÑ±ÌïòÍ∏∞
&lt;/h1&gt;

&lt;p&gt;yarnÏùò workspace Í∏∞Îä•ÏùÑ ÌÜµÌï¥ÏÑú monorepoÎ•º Íµ¨ÏÑ±ÌïòÎäî Î∞©ÏãùÏùÄ ÏïÑÏ£º Í∞ÑÎã®Ìï©ÎãàÎã§.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ÏùÑ ÌÜµÌï¥ÏÑú ÌîÑÎ°úÏ†ùÌä∏ Ï¥àÍ∏∞ÌôîÎ•º Ìï¥Ï£ºÍ≥†, package.jsonÏóê ÏïÑÎûòÏôÄ Í∞ôÏù¥ &lt;code&gt;private&lt;/code&gt;Í≥º &lt;code&gt;workspaces&lt;/code&gt; ÌîÑÎ°úÌçºÌã∞Î•º ÏÑ§Ï†ïÌï¥Ï£ºÎ©¥ Îê©ÎãàÎã§.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;package.json&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"private"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"workspaces"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"packages/*"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#41-%EC%9D%98%EC%A1%B4%EC%84%B1-%EA%B4%80%EB%A6%AC-%EB%B0%A9%EC%8B%9D"&gt;
  &lt;/a&gt;
  4.1. ÏùòÏ°¥ÏÑ± Í¥ÄÎ¶¨ Î∞©Ïãù
&lt;/h3&gt;

&lt;p&gt;ÏúÑÏùò Î∞©ÏãùÎåÄÎ°ú ÏÑ§Ï†ïÏùÑ ÎßàÏπòÍ≥†, Ìå®ÌÇ§ÏßÄÎ•º Íµ¨ÏÑ±ÌïúÎí§ ÏùòÏ°¥ÏÑ±ÏùÑ ÏÑ§ÏπòÌïòÍ≤å ÎêòÎ©¥ Ìå®ÌÇ§ÏßÄ Í∞ÅÍ∞ÅÏùò Ìå®ÌÇ§ÏßÄÏóêÏÑú ÏöîÍµ¨ÌïòÎäî Î™®ÎìàÏùò Î≤ÑÏ†ÑÏùÑ ÌôïÏù∏ÌïòÏó¨ Í≥µÌÜµÎêòÎäî Î∂ÄÎ∂ÑÏùÄ rootÏùò node_modulesÌè¥Îçî ÏïàÏóê ÏÑ§ÏπòÎ•º ÌïòÍ≥†, &lt;a href="https://ko.wikipedia.org/wiki/%EC%8B%AC%EB%B3%BC%EB%A6%AD_%EB%A7%81%ED%81%AC"&gt;symlink&lt;/a&gt;Î•º ÌÜµÌï¥ Í∞ÅÍ∞ÅÏùò Ìå®ÌÇ§ÏßÄÎ°ú Ïó∞Í≤∞ÎêòÏñ¥ ÏÇ¨Ïö©Îê©ÎãàÎã§.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UmwQDqxN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vyozch6lxr5vzf6ed0fz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UmwQDqxN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vyozch6lxr5vzf6ed0fz.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-yarn-workspace%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%9D%B4%EC%9C%A0"&gt;
  &lt;/a&gt;
  5. yarn workspaceÎ•º ÏÇ¨Ïö©Ìïú Ïù¥Ïú†
&lt;/h1&gt;

&lt;p&gt;ÏúÑÏóê ÏÑ§Î™ÖÌñàÏóáÎçò Î∞©ÏãùÎì§(yarn workspace, lerna, git submodule)Î°ú ÎπÑÍµêÎ•º Ìï¥Î≥¥ÏûêÎ©¥, lernaÎäî npm Î∞∞Ìè¨ÏôÄ Í¥ÄÎ†®Îêú Ïú†Ïö©Ìïú Ïú†Ìã∏ Í∏∞Îä•Îì§ÏùÑ Ï†úÍ≥µÌï¥Ï£ºÏßÄÎßå Ï†ÄÌù¨Îäî npm Î∞∞Ìè¨Î•º ÌïòÏßÄ ÏïäÏïòÍ∏∞ ÎïåÎ¨∏Ïóê ÏÇ¨Ïö©Ìï† ÌïÑÏöîÍ∞Ä ÏóÜÎã§Í≥† ÌåêÎã®ÌñàÍ≥† git submodule ÎòêÌïú Í∏∞Ï°¥Ïùò multi-repoÎ°ú Í¥ÄÎ¶¨ÎêòÎçò ÌîÑÎ°úÏ†ùÌä∏Î•º monorepoÎ°ú Íµ¨ÏÑ±ÌïòÎäî Í≤ÉÏù¥ ÏïÑÎãå ÏãúÏûëÎ∂ÄÌÑ∞ monorepoÎ°ú ÏãúÏûëÌïòÏòÄÍ∏∞ ÎïåÎ¨∏Ïóê, monorepoÎ•º Íµ¨ÏÑ±ÌïòÎäîÎç∞Îßå ÌïÑÏöîÌïú Í∏∞Îä•Ïù∏ yarnÏùò workspace Í∏∞Îä•ÏùÑ ÏÇ¨Ïö©ÌïòÏòÄÏäµÎãàÎã§.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-trouble-shooting-%EC%82%AC%EB%A1%80"&gt;
  &lt;/a&gt;
  6. Trouble Shooting ÏÇ¨Î°Ä
&lt;/h1&gt;

&lt;p&gt;yarnÏùò workspaceÎäî Ìå®ÌÇ§ÏßÄÎì§ ÏÇ¨Ïù¥ÏóêÏÑú Í∞ôÏùÄ Î≤ÑÏ†ÑÏùÑ ÏÇ¨Ïö©ÌïòÎäî Î≤ÑÏ†ÑÏùÑ Ï∞æÏïÑ rootÏùò  node_modulesÏïàÏóê ÏÑ§ÏπòÌïòÎäîÎç∞, Ïù¥Î†áÍ≤å ÌïúÎ≤à ÏôÑÏÑ±Îêú ÌòïÌÉúÏùò ÏùòÏ°¥ÏÑ± Íµ¨Ï°∞Î•º Í∞ÄÏßÑÏ±ÑÎ°ú, Í∏∞Ï°¥ ÏùòÏ°¥ÏÑ±ÏùÑ Ìï¥ÏπòÎäî ÏÉàÎ°úÏö¥ Ìå®ÌÇ§ÏßÄÍ∞Ä Ï∂îÍ∞ÄÎêòÏóàÏùÑÍ≤ΩÏö∞ Í∏∞Ï°¥ Ïûò ÎèôÏûëÌïòÎçò Ìå®ÌÇ§ÏßÄÍ∞Ä ÎèôÏûëÌïòÏßÄ ÏïäÍ±∞ÎÇò ÌïòÎäî ÏÇ¨Ïù¥Îìú Ïù¥ÌéôÌä∏Í∞Ä Î∞úÏÉù Ìï† Ïàò ÏûàÏäµÎãàÎã§.&lt;/p&gt;

&lt;p&gt;ÌïòÎÇòÏùò ÏòàÏãúÎ°ú, monorepoÎ°ú Í¥ÄÎ¶¨ÌïòÎäî Í≥µÌÜµ &lt;code&gt;components&lt;/code&gt;Î•º Îã¥ÎãπÌïòÎäî Ìå®ÌÇ§ÏßÄÏóêÏÑú, storybookÏùò Ïª§Ïä§ÌÖÄ ÏõπÌå© ÏÑ∏ÌåÖÏùÑ ÏúÑÌï¥ÏÑú &lt;code&gt;babel-loader 8.22.0&lt;/code&gt; Î≤ÑÏ†ÑÏùÑ ÏÑ§ÏπòÌï¥ ÏÇ¨Ïö©ÌïòÍ≥† ÏûàÏóàÍ≥†, Ïù¥ÌõÑ Ï∂îÍ∞ÄÎ°ú &lt;code&gt;create-react-app&lt;/code&gt;ÏùÑ ÌÜµÌï¥ÏÑú ÏÉàÎ°úÏö¥ Ìå®ÌÇ§ÏßÄÎ•º Ï∂îÍ∞ÄÌïòÏòÄÎäîÎç∞, craÎ•º ÌÜµÌï¥ ÏÉùÏÑ±Îêú Ìå®ÌÇ§ÏßÄÎäî &lt;code&gt;babel-loader 8.1.0&lt;/code&gt;ÏùÑ ÏÇ¨Ïö©Ìï¥ÏïºÌïòÎäî Ï†úÏïΩÏÇ¨Ìï≠Ïù¥ ÏûàÏóàÎçò Î¨∏Ï†úÎ°ú Ïù∏Ìï¥ Ïã§ÌñâÏù¥ ÎêòÏßÄ ÏïäÏùÄ Î¨∏Ï†úÍ∞Ä ÏûàÏóàÏäµÎãàÎã§.&lt;br&gt;
ÏúÑ Î¨∏Ï†úÎ•º Ìï¥Í≤∞ÌïòÍ∏∞ ÏúÑÌï¥ÏÑú &lt;code&gt;components&lt;/code&gt; Ìå®ÌÇ§ÏßÄÏùò &lt;code&gt;babel-loader&lt;/code&gt; Î≤ÑÏ†ÑÏùÑ &lt;code&gt;8.1.0&lt;/code&gt;ÏúºÎ°ú &lt;code&gt;Îã§Ïö¥Í∑∏Î†àÏù¥Îìú&lt;/code&gt; ÌïòÏó¨ Ìï¥Í≤∞ Ìï† Ïàò ÏûàÏóàÏäµÎãàÎã§.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Write your first test in Cypress</title>
      <author>Automation Bro</author>
      <pubDate>Wed, 14 Apr 2021 12:31:36 +0000</pubDate>
      <link>https://dev.to/automationbro/write-your-first-test-in-cypress-30gi</link>
      <guid>https://dev.to/automationbro/write-your-first-test-in-cypress-30gi</guid>
      <description>&lt;p&gt;In this tutorial, we will cover how to write your first test in Cypress. We will go over the basic Cypress syntax and run our tests using the Cypress Test Runner.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-your-cypress-test"&gt;
  &lt;/a&gt;
  Creating your Cypress Test
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--90dZ6HzP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v3chq74yhdu5gx3w5o1s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--90dZ6HzP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v3chq74yhdu5gx3w5o1s.png" alt="Cypress Test"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;to go to any URL, you can use the &lt;code&gt;cy.visit()&lt;/code&gt; command&lt;/li&gt;
&lt;li&gt;Cypress also provides various types of page assertions such as &lt;code&gt;cy.url()&lt;/code&gt; and &lt;code&gt;cy.title()&lt;/code&gt; to assert the URL as well as the title of the page&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#running-your-cypress-test-in-the-cypress-test-runner"&gt;
  &lt;/a&gt;
  Running your Cypress Test in the Cypress Test Runner
&lt;/h3&gt;

&lt;p&gt;To open the Cypress Test Runner, you can execute the following command below:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx cypress open&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once the Cypress Test Runner opens up, you can execute your test which will show results similar to this below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can see all the Cypress commands listed below such as visit, URL &amp;amp; title&lt;/li&gt;
&lt;li&gt;All your successful assertions will show in Green and failed assertions in Red&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4E-UCreg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://automationbro.com/wp-content/uploads/2021/04/Screen-Shot-2021-04-14-at-3.34.32-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4E-UCreg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://automationbro.com/wp-content/uploads/2021/04/Screen-Shot-2021-04-14-at-3.34.32-AM.png" alt="Cypress Test Runner"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#check-out-the-video-below-to-see-how-to-create-your-first-test-in-cypress"&gt;
  &lt;/a&gt;
  Check out the video below to see how to create your first test in Cypress:
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1bLPnmZhwKs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;üìß Subscribe to my &lt;a href="https://automationbro.com/mailing-list"&gt;mailing list&lt;/a&gt; to get access to more content like this &lt;/p&gt;

&lt;p&gt;üëç Follow &lt;a href="https://twitter.com/automationbro"&gt;automationbro&lt;/a&gt; on Twitter for the latest updates&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;I love coffees! And, if this post helped you out and you would like to support my work, you can do that by clicking on the button below and buying me a cup of coffee -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/automationbro"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lUHFj71T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4aw2ub3f4qkyjk0ivwt4.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also support me by liking and sharing this content.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>testing</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Run machine-learning workflows to transform data and build AI-powered text indices with txtai</title>
      <author>David Mezzetti</author>
      <pubDate>Wed, 14 Apr 2021 12:29:54 +0000</pubDate>
      <link>https://dev.to/neuml/run-machine-learning-workflows-to-transform-data-and-build-ai-powered-text-indices-with-txtai-14o</link>
      <guid>https://dev.to/neuml/run-machine-learning-workflows-to-transform-data-and-build-ai-powered-text-indices-with-txtai-14o</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tztbzit2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/5914/0%2APdAHsQ3Zd7xEpQ8h" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tztbzit2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/5914/0%2APdAHsQ3Zd7xEpQ8h" alt="Photo by [Omar Flores](https://unsplash.com/@omarg247) on [Unsplash](https://unsplash.com)"&gt;&lt;/a&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@omarg247"&gt;Omar Flores&lt;/a&gt; on &lt;a href="https://unsplash.com"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/neuml/txtai"&gt;txtai&lt;/a&gt; executes machine-learning workflows to transform data and build AI-powered text indices to perform similarity search. txtai supports indexing text snippets, documents, audio and images. Pipelines and workflows enable transforming data with machine-learning models. An introduction to txtai is available in the article below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/neuml/introducing-txtai-an-ai-powered-search-engine-built-on-transformers-mpf"&gt;Introducing txtai, an AI-powered search engine built on Transformers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since the initial release of txtai back in August 2020, txtai has grown considerably. In addition to building embedding indices, txtai now supports transformations to prepare data for indexing through pipelines, workflows to join pipelines together, API bindings for JavaScript/Java/Rust/Go and the ability to scale out processing. This article will cover methods to vectorize data, machine-learning pipelines and workflows.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vectorize-data"&gt;
  &lt;/a&gt;
  Vectorize data
&lt;/h2&gt;

&lt;p&gt;txtai initially supported building indices over sections of text. txtai now supports documents, audio and images. Documents and audio will be shown below in the pipelines sections. This section will show how to vectorize images and run a similarity search.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xIDgVsDZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AZPG_RvrRNTX89qjTpKZ_kA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xIDgVsDZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AZPG_RvrRNTX89qjTpKZ_kA.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/UKPLab/sentence-transformers/tree/master/examples/applications/image-search"&gt;sentence-transformers&lt;/a&gt; recently added support for the &lt;a href="https://github.com/openai/CLIP"&gt;OpenAI CLIP model&lt;/a&gt;. This model embeds text and images into the same space, enabling image similarity search. txtai can directly utilize these models.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The &lt;a href="https://github.com/neuml/txtai/blob/master/examples/images.py"&gt;code&lt;/a&gt; above builds a similarity index of a directory of images and searches using a query. Run it against your own images and explore the results!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pipelines"&gt;
  &lt;/a&gt;
  Pipelines
&lt;/h2&gt;

&lt;p&gt;txtai has a growing list of models available through it‚Äôs pipeline framework. Pipelines wrap a machine learning model and transform data. Currently, pipelines can wrap Hugging Face Transformers models, Hugging Face Transformers pipelines or PyTorch models (support for TensorFlow is in the backlog).&lt;/p&gt;

&lt;p&gt;The following is a list of the currently implemented pipelines.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Questions&lt;/strong&gt; - Answer questions using a text context&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Labels&lt;/strong&gt; - Apply labels to text using a zero-shot classification model. Also supports similarity comparisons.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt; - Abstractive text summarization&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Textractor&lt;/strong&gt; - Extract text from documents&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Transcription&lt;/strong&gt; - Transcribe audio to text&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Translation&lt;/strong&gt; - Machine translation&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pipelines take input data, apply NLP transformations and return results. The following notebooks go through examples of each of the pipelines above.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#abstractive-summarization"&gt;
  &lt;/a&gt;
  Abstractive Summarization
&lt;/h3&gt;

&lt;p&gt;Abstractive summarization uses Natural Language Processing (NLP) models to build transformative summaries of text. This is similar to having a human read an article and asking what was it about. A human wouldn't just give a verbose reading of the text. Let‚Äôs look at an example.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The section above prints:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Search is the foundation of the internet
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;A full example can be found in the notebook linked below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://colab.research.google.com/github/neuml/txtai/blob/master/examples/09_Building_abstractive_text_summaries.ipynb"&gt;Build abstractive text summaries&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#text-extraction"&gt;
  &lt;/a&gt;
  Text Extraction
&lt;/h3&gt;

&lt;p&gt;This section shows how documents can have text extracted to best support similarity search.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;The section above prints:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Introducing txtai, an AI-powered search engine built on Transformers Add Natural Language Understanding to any application Search is the base of many applications. Once data starts to pile up, users want to be able to find it. It‚Äôs the foundation.....
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;A full example can be found in the notebook linked below. This example shows how text can be split/segmented to assist with building sections of text to index.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://colab.research.google.com/github/neuml/txtai/blob/master/examples/10_Extract_text_from_documents.ipynb"&gt;Extract text from documents&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#audio-transcription"&gt;
  &lt;/a&gt;
  Audio Transcription
&lt;/h3&gt;

&lt;p&gt;Hugging Face Transformers provides a number of models that can perform audio transcription (audio to text).&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;The section above prints:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Make huge profits without working make up to one hundred thousand dollars a day
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;A full example can be found in the notebook linked below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://colab.research.google.com/github/neuml/txtai/blob/master/examples/11_Transcribe_audio_to_text.ipynb"&gt;Transcribe audio to text&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#translate-text-between-languages"&gt;
  &lt;/a&gt;
  Translate text between languages
&lt;/h3&gt;

&lt;p&gt;This section covers machine translation backed by Hugging Face Transformer models. The quality of machine translation via cloud services has come a very long way and produces high quality results. The following shows how local models can give developers a reasonable alternative.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;The section above prints:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Esta es una traducci√≥n de prueba al espa√±ol
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;A full example can be found in the notebook linked below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://colab.research.google.com/github/neuml/txtai/blob/master/examples/12_Translate_text_between_languages.ipynb"&gt;Transcribe text between languages&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#workflows"&gt;
  &lt;/a&gt;
  Workflows
&lt;/h2&gt;

&lt;p&gt;Pipelines are great and make using a variety of machine learning models easier. But what if we want to glue the results of different pipelines together? For example, extract text, summarize it, translate it to English and load it into an Embedding index. That would require code to join those operations together in an efficient manner.&lt;/p&gt;

&lt;p&gt;Enter workflows. Workflows are a simple yet powerful construct that takes a callable and returns elements. Workflows don‚Äôt know they are working with pipelines but enable efficient processing of pipeline data. Workflows are streaming by nature and work on data in batches, allowing large volumes of data to be processed efficiently.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;The example above transcribes audio to text then translates the text to French.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;["Les cas de virus U sont en t√™te d'un million",
 "La derni√®re plate-forme de glace enti√®rement intacte du Canada s'est soudainement effondr√©e en formant un berge de glace de taille manhatten",
 "Bagage mobilise les embarcations d'invasion le long des c√¥tes √† mesure que les tensions tiwaniennes s'intensifient",
 "Le service des parcs nationaux met en garde contre le sacrifice d'amis plus lents dans une attaque nue",
 "L'homme principal gagne du billet de loterie",
 "Faire d'√©normes profits sans travailler faire jusqu'√† cent mille dollars par jour"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This example and additional examples including a complex workflow that summarizes text, translates the text to French and then builds an Embedding index can be found in the notebook below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://colab.research.google.com/github/neuml/txtai/blob/master/examples/14_Run_pipeline_workflows.ipynb"&gt;Run pipeline workflows&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;All of the functionality discussed is now available in the main branch on GitHub and will be in the upcoming v3.0 release. txtai continues to rapidly evolve and there will be a continued focus on adding new pipelines. The ability to horizontally scale out at the pipeline and workflow level is also a continuing area of development.&lt;/p&gt;

&lt;p&gt;The goal for txtai is to be simple enough to work on a laptop but able to scale out to clustered/cloud systems.&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>nlp</category>
      <category>python</category>
      <category>showdev</category>
    </item>
    <item>
      <title>What Code Editor Are You Using?</title>
      <author>CristoferK</author>
      <pubDate>Wed, 14 Apr 2021 12:25:13 +0000</pubDate>
      <link>https://dev.to/cristoferk/what-code-editor-are-you-using-b6d</link>
      <guid>https://dev.to/cristoferk/what-code-editor-are-you-using-b6d</guid>
      <description>&lt;p&gt;What code editor are you using?&lt;br&gt;
Why?&lt;/p&gt;

&lt;p&gt;Also here are the best 3 code editors: &lt;a href="https://www.youtube.com/watch?v=eC8mO6iqUCk&amp;amp;t"&gt;https://www.youtube.com/watch?v=eC8mO6iqUCk&amp;amp;t&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don't forget to subscribe to my YouTube channel for weekly programming tutorials &lt;a href="https://www.youtube.com/channel/UCFzeA3xC-_i4ZT-XwcwsJxQ"&gt;https://www.youtube.com/channel/UCFzeA3xC-_i4ZT-XwcwsJxQ&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>code</category>
      <category>discuss</category>
      <category>css</category>
    </item>
    <item>
      <title>REST API with Rust + Warp 5: Beyond test utilities</title>
      <author>Roger Torres</author>
      <pubDate>Wed, 14 Apr 2021 12:21:44 +0000</pubDate>
      <link>https://dev.to/rogertorres/rest-api-with-rust-warp-5-beyond-test-utilities-15jo</link>
      <guid>https://dev.to/rogertorres/rest-api-with-rust-warp-5-beyond-test-utilities-15jo</guid>
      <description>&lt;p&gt;Last part, folks!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#time-to-say-goodbye-warp-5"&gt;
  &lt;/a&gt;
  Time to say goodbye. Warp 5.
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The code for this part is available &lt;a href="https://github.com/rogertorres/dev.to/tree/main/warp/warp5"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Warp's test utilities are great, but I didn't want to end this series without actually being able to serve what has been built and to &lt;code&gt;curl&lt;/code&gt; against it.&lt;/p&gt;

&lt;p&gt;To do so, I first created a &lt;code&gt;/src/bin/main.rs&lt;/code&gt; file. Then, I changed &lt;code&gt;Cargo.toml&lt;/code&gt; to add this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[[bin]]&lt;/span&gt;
&lt;span class="py"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"holodeck"&lt;/span&gt;
&lt;span class="py"&gt;path&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"src/bin/main.rs"&lt;/span&gt;

&lt;span class="nn"&gt;[lib]&lt;/span&gt;
&lt;span class="py"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"holodeck"&lt;/span&gt;
&lt;span class="py"&gt;path&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"src/lib.rs"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As I mentioned at the beginning, it is easier to find examples of code serving and consuming the API than testing it using the test utilities; so I'm gonna fly over it.&lt;/p&gt;

&lt;p&gt;My &lt;code&gt;main.rs&lt;/code&gt; ended up like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// I made "models" and "filters" public in lib.rs&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;holodeck&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filters&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;#[tokio::main]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;models&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new_db&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;list_sims&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="nf"&gt;.or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;post_sim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
        &lt;span class="nf"&gt;.or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;update_sim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
        &lt;span class="nf"&gt;.or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;delete_sim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;serve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.run&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;3030&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's all! I just had to put the filters together using &lt;code&gt;or&lt;/code&gt; and serve. The clones work because we're cloning an &lt;code&gt;Arc&lt;/code&gt;, which doesn't create a new copy, just a new reference to our Mutex.&lt;/p&gt;

&lt;p&gt;Below you will find some some &lt;code&gt;curl&lt;/code&gt;s I made.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;POST&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl --location --request POST 'localhost:3030/holodeck' \
--header 'Content-Type: application/json' \
--header 'Content-Type: text/plain' \
--data-raw '{
    "id": 1,
    "name": "The Big Goodbye"
}'

curl --location --request POST 'localhost:3030/holodeck' \
--header 'Content-Type: application/json' \
--header 'Content-Type: text/plain' \
--data-raw '{
    "id": 2,
    "name": "Bride Of Chaotica!"
}'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;PUT&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl --location --request PUT 'localhost:3030/holodeck/3' \
--header 'Content-Type: application/json' \
--header 'Content-Type: text/plain' \
--data-raw '{
    "name": "A Fistful Of Datas"
}'

curl --location --request PUT 'localhost:3030/holodeck/3' \
--header 'Content-Type: application/json' \
--header 'Content-Type: text/plain' \
--data-raw '{
    "name": "A Fistful Of La Forges"
}'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;GET&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl --location --request GET 'localhost:3030/holodeck'

curl --location --request GET 'localhost:3030/holodeck/2'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;DELETE&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl --location --request DELETE 'localhost:3030/holodeck/1' 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The good thing about using warp's test utilities is that when the time comes to serve what you built, there's no extra effort; no refactoring. So if you are using the tests, I strongly advise you to try some &lt;code&gt;curl&lt;/code&gt;s as well. Here are some problems that I just found when doing it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;At some point, I deleted the &lt;code&gt;warp::get()&lt;/code&gt; from my &lt;code&gt;list_sims()&lt;/code&gt; and as a result answering every request I made;&lt;/li&gt;
&lt;li&gt;The serialization/deserialization in &lt;code&gt;PUT&lt;/code&gt; wasn't working properly. As this didn't appear in the tests, I assumed &lt;code&gt;serde&lt;/code&gt; was being so good at its job the ended up hiding a mistake I made in the code.&lt;/li&gt;
&lt;li&gt;Delete reply had the right Status, but the wrong written message.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The End
&lt;/h2&gt;

&lt;p&gt;What a journey! I really hope it ends up being useful to someone else.&lt;/p&gt;

&lt;p&gt;Before letting you go, I would like to write a small &lt;em&gt;mea culpa&lt;/em&gt;, to warn you about the things that are not ok regarding what was built here.&lt;/p&gt;

&lt;p&gt;My main goal was to show the &lt;strong&gt;process&lt;/strong&gt;, not the result; I didn't want to post a finished code and write a text explaining it. Although I am happy with this choice, it has some drawbacks. To make things clearer, I avoided creating and using too many functions that would compel the reader to check the previous code to make sense of it. So be aware that these things are not ok (even though some of them are not huge problems):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Code repetition is problem number one. Tests are creating the same Simulations, there are repeated &lt;code&gt;use&lt;/code&gt; keywords everywhere and so on;&lt;/li&gt;
&lt;li&gt;I forced the HashMap, so it never felt "natural". I don't regret it because it gave me a chance to show you the trait implementation, but oftentimes it was a bit of a hassle.&lt;/li&gt;
&lt;li&gt;Warp providing building blocks, which means that there is more than one way of doing the same things, and naturally, some are better than others. I didn't stress this much, often going with the easiest way&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And I think that's enough. Really! Thank you for spending the time.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Live long and prosper!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;üññ&lt;/p&gt;

</description>
      <category>rust</category>
      <category>warp</category>
      <category>rest</category>
      <category>api</category>
    </item>
    <item>
      <title>REST API with Rust + Warp 4: PUT &amp; DELETE</title>
      <author>Roger Torres</author>
      <pubDate>Wed, 14 Apr 2021 12:21:26 +0000</pubDate>
      <link>https://dev.to/rogertorres/rest-api-with-rust-warp-4-put-delete-3905</link>
      <guid>https://dev.to/rogertorres/rest-api-with-rust-warp-4-put-delete-3905</guid>
      <description>&lt;p&gt;That's it, the last methods. In the beginning, I thought it would be the end of the series, but then I realized it needed an additional post, regarding how to manually test it using &lt;code&gt;curl&lt;/code&gt;. However, before that, there are still two more methods to be coded. But don't worry, both combined are probably easier than the single ones we handled so far.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#warp-4-mr-sulu"&gt;
  &lt;/a&gt;
  Warp 4, Mr. Sulu.
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The code for this part is available &lt;a href="https://github.com/rogertorres/dev.to/tree/main/warp/warp4"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;PUT&lt;/code&gt; method is a mix between insert and change: it creates an entry when the data is not there and updates it when it is.&lt;/p&gt;

&lt;p&gt;This behavior is already met by our HashSet; this is exactly how the &lt;code&gt;insert()&lt;/code&gt; function works. However, we got to know if we are inserting or changing because the status that is returned got to be different:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Code 201 when it is created&lt;/li&gt;
&lt;li&gt;Code 200 when it is updated&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Where did I get this from? It is written &lt;a href="https://tools.ietf.org/html/rfc7231#section-4.3.4"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With that in mind, I wrote this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[tokio::test]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;try_update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;models&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new_db&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;update_sim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;request&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;.method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"PUT"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;.path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/holodeck/1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;.json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nn"&gt;models&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;new_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The Big Goodbye"&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;
        &lt;span class="nf"&gt;.reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="nf"&gt;.status&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nn"&gt;StatusCode&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;CREATED&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;request&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;.method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"PUT"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;.path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/holodeck/1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;.json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nn"&gt;models&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;new_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The Short Hello"&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;
        &lt;span class="nf"&gt;.reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="nf"&gt;.status&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nn"&gt;StatusCode&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;OK&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How did I knew that 201 was &lt;code&gt;StatusCode::CREATED&lt;/code&gt; and 200 was &lt;code&gt;StatusCode::OK&lt;/code&gt;? &lt;a href="https://tools.ietf.org/html/rfc7231#section-8.2.3"&gt;Here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As you can see, the &lt;code&gt;request&lt;/code&gt; is made by sending the parameter &lt;code&gt;id&lt;/code&gt; ("1", in this case). Different from &lt;code&gt;GET&lt;/code&gt;, this parameter is mandatory. And because the &lt;code&gt;id&lt;/code&gt; is already being sent in the URI, the body only contains the &lt;code&gt;name&lt;/code&gt;. The reasoning behind this is also in the aforementioned &lt;a href="https://tools.ietf.org/html/rfc7231#section-4.3.4"&gt;rfc&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Because of this, I implemented a new struct and a new function to get the JSON body.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[derive(Debug,&lt;/span&gt; &lt;span class="nd"&gt;Deserialize,&lt;/span&gt; &lt;span class="nd"&gt;Serialize)]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;NewName&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// This code is inside the mod "filters"&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;json_body_put&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Extract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;models&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;NewName&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Rejection&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Clone&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;body&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;content_length_limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;body&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is certainly a suboptimal way of doing this. But let's move on anyway; I am saving the excuses about the poor execution of things to the last part.&lt;/p&gt;

&lt;p&gt;Now, the filter and the handler.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// This is inside the mod "filters"&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;update_sim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;models&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Extract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Rejection&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Clone&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;db_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;any&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;.map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

    &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;path!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"holodeck"&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;u64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;.and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;put&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="nf"&gt;.and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;json_body_put&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="nf"&gt;.and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;.and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;handlers&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;handle_update_sim&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;handle_update_sim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;models&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;NewName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;models&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Infallible&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Replaced entry&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nf"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="nf"&gt;.lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="nf"&gt;.replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Simulation&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="py"&gt;.name&lt;/span&gt;&lt;span class="p"&gt;}){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;with_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nd"&gt;format!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Simulation #{} was updated.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
            &lt;span class="nn"&gt;StatusCode&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;OK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// Create entry&lt;/span&gt;
    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;with_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nd"&gt;format!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Simulation #{} was inserted.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
        &lt;span class="nn"&gt;StatusCode&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;CREATED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#red-alert"&gt;
  &lt;/a&gt;
  Red alert
&lt;/h2&gt;

&lt;p&gt;To &lt;del&gt;warp&lt;/del&gt; wrap things up, the &lt;code&gt;DELETE&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;As usual, the request is quite simple: it sends the &lt;code&gt;id&lt;/code&gt; as a parameter and no body. As a response, we expect code 200 (OK) including a &lt;a href="https://tools.ietf.org/html/rfc7231#section-4.3.5"&gt;"representation describing the status"&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[tokio::test]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;try_delete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;simulation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;models&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Simulation&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The Big Goodbye!"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;models&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new_db&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="nf"&gt;.lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="nf"&gt;.insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;simulation&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;delete_sim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;request&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;.method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"DELETE"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;.path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/holodeck/1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;.reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="nf"&gt;.status&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nn"&gt;StatusCode&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;OK&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hopefully, nothing about the filter implementation seems strange to you:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;models&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Extract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Rejection&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Clone&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;db_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;any&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;.map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

    &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;path!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"holodeck"&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;u64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;.and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="nf"&gt;.and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;.and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;handlers&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;handle_delete_sim&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since it is the first time we're deleting data, the handler has a unique behavior, but also nothing very different from what has been done so far.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;handle_delete_sim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;models&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Infallible&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="nf"&gt;.lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="nf"&gt;.remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Simulation&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(),}){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;with_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nd"&gt;format!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Simulation #{} was deleted"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
            &lt;span class="nn"&gt;StatusCode&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;OK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;with_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nd"&gt;format!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"No data was deleted."&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nn"&gt;StatusCode&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;OK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That should do...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cargo test

running 5 tests
test tests::try_delete ... ok
test tests::try_create ... ok
test tests::try_list ... ok
test tests::try_create_duplicates ... ok
test tests::try_update ... ok

test result: ok. 5 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And it did!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#in-the-next-episode-of-engaging-warp"&gt;
  &lt;/a&gt;
  In the next episode of &lt;em&gt;&lt;strong&gt;Engaging Warp&lt;/strong&gt;&lt;/em&gt;...
&lt;/h2&gt;

&lt;p&gt;Finally, the last part. We will serve what has been built and &lt;code&gt;curl&lt;/code&gt; against it.&lt;/p&gt;

&lt;p&gt;üññ&lt;/p&gt;

</description>
      <category>rust</category>
      <category>warp</category>
      <category>rest</category>
      <category>api</category>
    </item>
    <item>
      <title>REST API with Rust + Warp 3: GET</title>
      <author>Roger Torres</author>
      <pubDate>Wed, 14 Apr 2021 12:21:15 +0000</pubDate>
      <link>https://dev.to/rogertorres/rest-api-with-rust-warp-3-get-4nll</link>
      <guid>https://dev.to/rogertorres/rest-api-with-rust-warp-3-get-4nll</guid>
      <description>&lt;p&gt;Welcome back! Last time we saw each other I wrote:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Next in line is the &lt;code&gt;GET&lt;/code&gt; method, which means we'll see parameter handling and (finally) deal with this HashSet thing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, &lt;em&gt;"let us not waste our time in idle discourse!"&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#warp-3-make-it-so"&gt;
  &lt;/a&gt;
  Warp 3, make it so!
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The code for this part is available &lt;a href="https://github.com/rogertorres/dev.to/tree/main/warp/warp3"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First, I needed another dependency to help me deserialize the &lt;code&gt;GET&lt;/code&gt; return, so I changed the &lt;code&gt;Cargo.toml&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="py"&gt;serde_json&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"1.0"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, the time came to change &lt;code&gt;try_list()&lt;/code&gt;. As of our last encounter, this test had only a &lt;code&gt;request()&lt;/code&gt; and the &lt;code&gt;assert_eq!&lt;/code&gt;. I added two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Before the request, I manually inserted two entries into the HashSet (I could've called &lt;code&gt;POST&lt;/code&gt;, but since it is already being tested elsewhere, it is ok to take this shortcut);&lt;/li&gt;
&lt;li&gt;After the request, I deserialized the HTML body and compared its content to the data I had previously inserted.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There's a chance that a few things will appear weird, but don't worry, I will go through each one of them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;collections&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;HashSet&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;#[tokio::test]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;try_list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="n"&gt;serde_json&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;simulation1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;models&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Simulation&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The Big Goodbye"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;


    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;simulation2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;models&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Simulation&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Bride Of Chaotica!"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;models&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new_db&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="nf"&gt;.lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="nf"&gt;.insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;simulation1&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="nf"&gt;.lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="nf"&gt;.insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;simulation2&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;list_sims&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;request&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;.method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"GET"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;.path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/holodeck"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;.reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;u8&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="nf"&gt;.into_body&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.into_iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;str&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from_utf8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HashSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nn"&gt;models&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Simulation&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;serde_json&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;models&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get_simulation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;simulation1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;models&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get_simulation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;simulation2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;request&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;.method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"GET"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;.path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/holodeck/2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;.reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;u8&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="nf"&gt;.into_body&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.into_iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.collect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;str&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from_utf8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;HashSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nn"&gt;models&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Simulation&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;serde_json&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="nf"&gt;.len&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;models&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get_simulation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;simulation2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first thing I take as deserving an explanation is the &lt;code&gt;db.lock().await.insert()&lt;/code&gt;. The &lt;code&gt;lock()&lt;/code&gt; gives you what's inside the Arc, and in this case, it returns a &lt;a href="https://cfsamson.github.io/books-futures-explained/1_futures_in_rust.html"&gt;Future&lt;/a&gt;. Why? Because we are not using &lt;code&gt;std::sync::Mutex&lt;/code&gt;, but &lt;code&gt;tokio::sync::Mutex&lt;/code&gt;, which is an Async implementation of the former. That's why we don't &lt;code&gt;unwrap()&lt;/code&gt;, but instead &lt;code&gt;await&lt;/code&gt;, as we need to &lt;a href="https://doc.rust-lang.org/std/keyword.await.html"&gt;suspend execution until the result of the Future is ready&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Moving on, &lt;code&gt;filters::list_sims()&lt;/code&gt; is now getting a parameter, which is the data it will return (which, in a real execution, would come from the HTTP body).&lt;/p&gt;

&lt;p&gt;After the request‚Äîthat remains the same‚Äîthere are three lines of Bytes-handling-jibber-jabber.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.rs/bytes/1.0.1/bytes/struct.Bytes.html"&gt;Bytes&lt;/a&gt; is the format with which &lt;em&gt;warp&lt;/em&gt;'s &lt;a href="https://docs.rs/warp/0.3.1/warp/test/struct.RequestBuilder.html"&gt;RequestBuilder&lt;/a&gt; handles the HTML body content. It &lt;em&gt;looks like&lt;/em&gt; a [u8] (that is, an array of the primitive u8], but it is a little bit more painful to handle. What I did with it, however, is simple. I:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mapped its content to a Vector of u8&lt;/li&gt;
&lt;li&gt;Moved the Vector's content to the slice&lt;/li&gt;
&lt;li&gt;Used &lt;code&gt;serde_json::from_str()&lt;/code&gt; function to map it to the Simulation struct inside the HashSet.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And this is one of the reasons I wanted a HashSet. As far as I know, standard Rust doesn't allow you to create a HashMap referring to a struct of two fields; that is, you cannot do that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="err"&gt;\\&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="nd"&gt;project!&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Impossible&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Example&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And without using a struct as I did with the HashMap (as well as the cool kids did with Vector &lt;a href=""&gt;here&lt;/a&gt; at line 205), using &lt;code&gt;serde&lt;/code&gt; gets... &lt;em&gt;complicated&lt;/em&gt; (which means I have no idea how to do it).&lt;/p&gt;

&lt;p&gt;Nonetheless, there is another reason why I wanted to stick the struct within the HashSet: it gave me the chance to implement some traits for my type.&lt;/p&gt;

&lt;p&gt;Before diving into the traits, I would like to explain the last part of the test (which should be a different test, but the example is already too big). &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;GET&lt;/code&gt; method can be used in three different ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fetch all the entries: &lt;code&gt;/holodeck&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Fetch a single entry: &lt;code&gt;/holodeck/:id&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Fetch filtered entries: &lt;code&gt;/holodeck/?search=query&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This last &lt;code&gt;request()&lt;/code&gt; using path &lt;code&gt;/holodeck/2&lt;/code&gt; was written to cover the second case. I did not (and will not) develop the third one.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#boldly-implementing-traits"&gt;
  &lt;/a&gt;
  Boldly implementing traits
&lt;/h2&gt;

&lt;p&gt;If you compare the HashSet element with another, it will compare everything. That's no good if you have a key-value-pair struct. As I didn't want to use HashMap because of the aforementioned reasons, the way to go is to change this behavior, making comparisons only care about the id.&lt;/p&gt;

&lt;p&gt;First, I brought &lt;code&gt;Hash&lt;/code&gt; and &lt;code&gt;Hasher&lt;/code&gt;, then I removed the &lt;code&gt;Eq&lt;/code&gt;, &lt;code&gt;PartialEq&lt;/code&gt; and &lt;code&gt;Hash&lt;/code&gt;, so I could implement them myself. And the implementation was this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Hasher&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nd"&gt;#[derive(Clone,&lt;/span&gt; &lt;span class="nd"&gt;Debug,&lt;/span&gt; &lt;span class="nd"&gt;Deserialize,&lt;/span&gt; &lt;span class="nd"&gt;Serialize)]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Simulation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;PartialEq&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Simulation&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="py"&gt;.id&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="nb"&gt;Eq&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Simulation&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Hash&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Simulation&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Hasher&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.id&lt;/span&gt;&lt;span class="nf"&gt;.hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How did I know how to do it? I just followed the documentation where it says &lt;a href="https://doc.rust-lang.org/std/cmp/trait.Eq.html#how-can-i-implement-eq"&gt;"How can I implement Eq?"&lt;/a&gt;. Yes, Rust docs are that good.&lt;/p&gt;

&lt;p&gt;And what about Hash? Same thing. But it is interesting to note why I did it. HashSet requires the &lt;a href="https://doc.rust-lang.org/std/hash/trait.Hash.html"&gt;Hash&lt;/a&gt; trait, and the Hash trait demands this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;k1 == k2 -&amp;gt; hash(k1) == hash(k2)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That means, if the values you're comparing are equal, their hashes also have to be equal, which would not hold after the implementation of &lt;code&gt;PartialEq&lt;/code&gt; and &lt;code&gt;Eq&lt;/code&gt; because both values were being hashed and compared, while the direct comparison only cared about &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;99% chance that I am wrong, but I think it should not be an implication (‚Üí), but a biconditional (‚Üî), because the way it stands if &lt;code&gt;k1 == k2&lt;/code&gt; is false and &lt;code&gt;hash(k1) == hash(k2)&lt;/code&gt; is true, the implication's result is still true. But I am not a trained computer scientist and I am not sure this uses first-order logic notation. Let me know in the comments if you do.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One last addition I made below the Hash implementation was this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="n"&gt;get_simulation&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sims&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;'a&lt;/span&gt; &lt;span class="n"&gt;HashSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Simulation&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;'a&lt;/span&gt; &lt;span class="n"&gt;Simulation&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;sims&lt;/span&gt;&lt;span class="nf"&gt;.get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;Simulation&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even though the only relevant field for comparisons is &lt;code&gt;id&lt;/code&gt; when using methods such as &lt;code&gt;get()&lt;/code&gt; we have to pass the entire struct, so I created &lt;code&gt;get_simulation()&lt;/code&gt; to replace it.&lt;/p&gt;

&lt;p&gt;Ok, back to the &lt;code&gt;GET&lt;/code&gt; method.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#getting-away-with-it"&gt;
  &lt;/a&gt;
  Getting away with it
&lt;/h2&gt;

&lt;p&gt;The functions dealing with the &lt;code&gt;GET&lt;/code&gt; method now have to deal with two additional information, the HashSet from where it will fetch the result and the parameter that might be used.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;list_sims&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;models&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Extract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Rejection&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Clone&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;db_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;any&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;.map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;path&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;param&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;u64&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;.map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;.or_else&lt;/span&gt;&lt;span class="p"&gt;(|&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="c"&gt;// Ok(None) &lt;/span&gt;
            &lt;span class="nn"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;u64&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Infallible&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;path!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"holodeck"&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;.and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;.and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;path&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;end&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="nf"&gt;.and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;.and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;handlers&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;handle_list_sims&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;opt&lt;/code&gt; represents the optional parameter that can be sent. It gets a param, map it as an &lt;code&gt;Option&lt;/code&gt; (i.e., &lt;code&gt;Some&lt;/code&gt;). If it was not provided, the &lt;code&gt;or_else()&lt;/code&gt; returns a &lt;code&gt;None&lt;/code&gt;. The reason why there's and &lt;code&gt;async&lt;/code&gt; there is because &lt;code&gt;or_else()&lt;/code&gt; &lt;a href="https://docs.rs/warp/0.3.1/warp/trait.Filter.html#method.or_else"&gt;returns a TryFuture&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;path&lt;/code&gt; we are actually returning includes this &lt;code&gt;opt&lt;/code&gt; the same way we included the &lt;code&gt;db_bap&lt;/code&gt;. the &lt;code&gt;/ ..&lt;/code&gt; at the and of &lt;code&gt;path!&lt;/code&gt; is there to tell the macro to not add the &lt;code&gt;end()&lt;/code&gt; so I could add the &lt;code&gt;opt&lt;/code&gt;. That's why there's a manual &lt;code&gt;end()&lt;/code&gt; there soon after.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I didn't found this solution in the docs or in the examples. Actually, for some reason, most tutorials omit &lt;code&gt;GET&lt;/code&gt; parameters. They either just list everything or use query. I found one tutorial that implemented this, but they did so by creating two filters and two handlers. It didn't felt ok, and I knew there should be a solution and that the problem was probably my searching skills; so I asked for help in warp's discord channel, and the nice gentleman &lt;strong&gt;jxs&lt;/strong&gt; &lt;a href="https://github.com/seanmonstar/warp/issues/586"&gt;pointed me to the solution you saw above&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The next step was to fix the handler:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;handle_list_sims&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;models&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Infallible&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="nf"&gt;.lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="nf"&gt;.retain&lt;/span&gt;&lt;span class="p"&gt;(|&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="py"&gt;.id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;param&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is no longer a &lt;em&gt;Matthew McConaughey handler&lt;/em&gt;, but still very simple. I am using &lt;code&gt;retain&lt;/code&gt; instead of a &lt;code&gt;get_simulation()&lt;/code&gt; because it returns a HashSet (and get would give me a &lt;code&gt;models::Simulation&lt;/code&gt;), which is exactly what the handler must return.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cargo test

running 3 tests
test tests::try_create ... ok
test tests::try_create_duplicates ... ok
test tests::try_list ... ok

test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#in-the-next-episode-of-engaging-warp"&gt;
  &lt;/a&gt;
  In the next episode of &lt;em&gt;&lt;strong&gt;Engaging Warp&lt;/strong&gt;&lt;/em&gt;...
&lt;/h2&gt;

&lt;p&gt;We will finish the implementation by implementing the &lt;code&gt;PUT&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; methods. &lt;/p&gt;

&lt;p&gt;üññ&lt;/p&gt;

</description>
      <category>rust</category>
      <category>warp</category>
      <category>rest</category>
      <category>api</category>
    </item>
    <item>
      <title>REST API with Rust + Warp 2: POST</title>
      <author>Roger Torres</author>
      <pubDate>Wed, 14 Apr 2021 12:20:58 +0000</pubDate>
      <link>https://dev.to/rogertorres/rest-api-with-rust-warp-2-post-3527</link>
      <guid>https://dev.to/rogertorres/rest-api-with-rust-warp-2-post-3527</guid>
      <description>&lt;p&gt;Glad to see you back! In this second part, we'll build the first functional method of our API: &lt;code&gt;POST&lt;/code&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#warp-2-engage"&gt;
  &lt;/a&gt;
  Warp 2. Engage!
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The code for this part is available &lt;a href="https://github.com/rogertorres/dev.to/tree/main/warp/warp2"&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;POST&lt;/code&gt; sends a request to the server to insert some data. This data is sent in JSON. This program's job is then to parse (deserialize) the JSON and store this information (in memory only‚ÄîI will not deal with ORM in this series; maybe in another one).&lt;/p&gt;

&lt;p&gt;The holodeck produces simulations (ignore this statement if you're not into Star Trek). With that in mind, I followed the &lt;a href="https://en.wikipedia.org/wiki/KISS_principle"&gt;KISS&lt;/a&gt; principle and made it a key-value pair of "simulation id" and "simulation name".&lt;/p&gt;

&lt;p&gt;First, once I knew &lt;em&gt;what&lt;/em&gt; I was supposed to be listing, I renamed the previous &lt;code&gt;list()&lt;/code&gt; to &lt;code&gt;list_sims()&lt;/code&gt; and &lt;code&gt;handle_list()&lt;/code&gt; to &lt;code&gt;handle_list_sims()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, I created a &lt;code&gt;try_create()&lt;/code&gt; test function, pretty similar to the previous test: it sends the method  (&lt;code&gt;POST&lt;/code&gt; this time) to the same&lt;code&gt;/holodeck&lt;/code&gt; path, using a new (still-to-be-coded) filter and expects a good answer (because &lt;a href="https://screenrant.com/star-trek-holodeck-accidents-malfunction-every/"&gt;what could go wrong in the holodeck?&lt;/a&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// Add "models" in the already existing line "use super::filters;":&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;super&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;


&lt;span class="nd"&gt;#[tokio::test]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;try_create&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;models&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new_db&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;post_sim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;request&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;.method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;.path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/holodeck"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;.json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nn"&gt;models&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Simulation&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The Big Goodbye"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="nf"&gt;.reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="nf"&gt;.status&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nn"&gt;StatusCode&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;CREATED&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What can go wrong (among other things) is conflict due to duplicated entries; so I created a test for that as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[tokio::test]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;try_create_duplicates&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;models&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new_db&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;post_sim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;request&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;.method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;.path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/holodeck"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;.json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nn"&gt;models&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Simulation&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Bride Of Chaotica!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="nf"&gt;.reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="nf"&gt;.status&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nn"&gt;StatusCode&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;CREATED&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;request&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;.method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;.path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/holodeck"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;.json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nn"&gt;models&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Simulation&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Bride Of Chaotica!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="nf"&gt;.reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="nf"&gt;.status&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nn"&gt;StatusCode&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;BAD_REQUEST&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Simulation&lt;/code&gt; struct that's being passed as JSON is still to be defined (which will require a &lt;code&gt;use super::models&lt;/code&gt; here in the tests mod‚Äîbe aware of these &lt;code&gt;use&lt;/code&gt; statements; hopefully I haven't forgotten to mention any).&lt;/p&gt;

&lt;p&gt;Before coding &lt;code&gt;post_sim()&lt;/code&gt;, I needed three things: [1] types to handle and persist the data (just in memory), [2] a JSON body, and [3] a way to bundle it all up.&lt;/p&gt;

&lt;p&gt;Starting with [1]: I first needed the &lt;code&gt;serde&lt;/code&gt; crate to handle (de)serialization, so I added this line under &lt;code&gt;[dependencies]&lt;/code&gt; in &lt;code&gt;Cargo.toml&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;serde&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="py"&gt;features&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;["derive"]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that settled I went back to &lt;code&gt;lib.rs&lt;/code&gt; and created a &lt;code&gt;mod&lt;/code&gt; with a &lt;code&gt;type&lt;/code&gt; and a &lt;code&gt;struct&lt;/code&gt; that can &lt;em&gt;automagically&lt;/em&gt; (de)serialize the data that will come as JSON, thanks to the serde macros. Ah, and there's also the omnipresent &lt;code&gt;new()&lt;/code&gt; function (which is not inside an implementation as the manuals usually tell you to do because I used &lt;code&gt;type&lt;/code&gt; for &lt;code&gt;Db&lt;/code&gt;, as I didn't want to nest it within a &lt;code&gt;struct&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;serde&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;Deserialize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Serialize&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;collections&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;HashSet&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;tokio&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Mutex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;#[derive(Clone,&lt;/span&gt; &lt;span class="nd"&gt;Debug,&lt;/span&gt; &lt;span class="nd"&gt;Hash,&lt;/span&gt; &lt;span class="nd"&gt;PartialEq,&lt;/span&gt; &lt;span class="nd"&gt;Eq,&lt;/span&gt; &lt;span class="nd"&gt;Deserialize,&lt;/span&gt; &lt;span class="nd"&gt;Serialize)]&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Simulation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Arc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Mutex&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HashSet&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Simulation&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;new_db&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Db&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nn"&gt;Arc&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Mutex&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;HashSet&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, why did I chose these smart pointers? &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Short answer: because the &lt;a href="https://github.com/seanmonstar/warp/blob/master/examples/todos.rs"&gt;cool kids&lt;/a&gt; did so.&lt;/li&gt;
&lt;li&gt;Smart answer: I don't think I had a good alternative for &lt;code&gt;Arc&lt;/code&gt;, as I needed a thread-safe reference to the HashSet; regarding &lt;code&gt;Mutex&lt;/code&gt;, I could have used &lt;code&gt;RwLock&lt;/code&gt; instead, to allow concurrent reads (Mutex make you hold the lock for both read and write alike), but it didn't seem necessary given the context.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But what about what is inside the Mutex? "Why a HashSet?", you ask. Well, I agree that a HashMap feels like the obvious choice, and I also agree that a Vector would be the easier one to implement, but I chose HashSet because it allowed me to gain an important benefit from HashMap alongside some of the Vector advantages; but the actual explanation is something that I'm keeping for the second part of this series, so you'll have to trust me on this one.&lt;/p&gt;

&lt;p&gt;[2]: The JSON body function was just copied from the aforementioned cool kids' example and placed inside the &lt;code&gt;filters&lt;/code&gt; mod. It accepts any JSON body, insofar it ain't too big.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// This line already exists; I just added "models"&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;super&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;handlers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt; 

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;json_body&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Extract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;models&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Simulation&lt;/span&gt;&lt;span class="p"&gt;,),&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Rejection&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Clone&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;body&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;content_length_limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;body&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To bundle it all up [3], we need another new function under &lt;code&gt;filters&lt;/code&gt;. This function, &lt;code&gt;post_sim()&lt;/code&gt;, will receive a JSON body and a Db (our Arc&amp;lt;Mutex&amp;lt;HashSet&amp;gt;&amp;gt;), and then send both to the handler &lt;code&gt;handle_create_sim()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;post_sim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;models&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Extract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Rejection&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Clone&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;db_map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;any&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;.map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;move&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

    &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;path!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"holodeck"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;.and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;post&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="nf"&gt;.and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;json_body&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="nf"&gt;.and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;.and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;handlers&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;handle_create_sim&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The line that might be harder to grasp here is the &lt;code&gt;let db_map&lt;/code&gt; one. The &lt;code&gt;warp::any&lt;/code&gt; is a &lt;a href="https://docs.rs/warp/0.3.1/warp/filters/any/fn.any.html"&gt;catch all&lt;/a&gt;; that is, it is a filter that filters nothing. So all we are doing here is making sure our Db is "wrapped" in a Filter, so we can stick it into the &lt;code&gt;.and(db_map)&lt;/code&gt; you see up there.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;handle_create_sim()&lt;/code&gt; that is triggered by the &lt;em&gt;and_then&lt;/em&gt; goes inside the &lt;code&gt;handlers&lt;/code&gt; mod looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// Add this "use" below the others&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;super&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;handle_create_sim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sim&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;models&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Simulation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nn"&gt;models&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Infallible&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="nf"&gt;.lock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nf"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="nf"&gt;.get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;sim&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;with_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nd"&gt;format!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Simulation #{} already exists under the name {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="py"&gt;.id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="py"&gt;.name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
            &lt;span class="nn"&gt;StatusCode&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;BAD_REQUEST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="nf"&gt;.insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sim&lt;/span&gt;&lt;span class="nf"&gt;.clone&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;with_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;format!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Simulation #{} created"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sim&lt;/span&gt;&lt;span class="py"&gt;.id&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nn"&gt;StatusCode&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;CREATED&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It takes the JSON (&lt;em&gt;sim: Simulation&lt;/em&gt;) and the HashSet (&lt;em&gt;db: Db&lt;/em&gt;), returns an error if the entry is already there, or inserts the JSON data into the HashSet and return success otherwise.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Here having a HashMap would clearly be the better solution, as it would allow us to compare keys. We'll solve this in part 2.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I could've just used &lt;code&gt;Ok(StatusCode::CREATED)&lt;/code&gt; and &lt;code&gt;Ok(StatusCode::BAD_REQUEST)&lt;/code&gt; instead of wrapping it inside a &lt;code&gt;warp::reply::with_status&lt;/code&gt;, but since I am not going to handle the errors, I thought it was the least I could do.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cargo test

running 3 tests
test tests::try_create ... ok
test tests::try_create_duplicates ... ok
test tests::try_list ... ok

test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Alright, alright, alright.&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#in-the-next-episode-of-engaging-warp"&gt;
  &lt;/a&gt;
  In the next episode of &lt;strong&gt;&lt;em&gt;Engaging Warp&lt;/em&gt;&lt;/strong&gt;...
&lt;/h2&gt;

&lt;p&gt;Next in line is the &lt;code&gt;GET&lt;/code&gt; method, which means we'll see parameter handling and (finally) deal with this HashSet thing.&lt;/p&gt;

&lt;p&gt;üññ&lt;/p&gt;

</description>
      <category>rust</category>
      <category>warp</category>
      <category>rest</category>
      <category>api</category>
    </item>
    <item>
      <title>REST API with Rust + Warp 1: Introduction</title>
      <author>Roger Torres</author>
      <pubDate>Wed, 14 Apr 2021 12:20:40 +0000</pubDate>
      <link>https://dev.to/rogertorres/rest-api-with-rust-warp-1-introduction-342e</link>
      <guid>https://dev.to/rogertorres/rest-api-with-rust-warp-1-introduction-342e</guid>
      <description>&lt;p&gt;There are a few good web framework options for Rust: &lt;strong&gt;actix&lt;/strong&gt;, &lt;strong&gt;rocket&lt;/strong&gt;, &lt;strong&gt;tide&lt;/strong&gt;, &lt;strong&gt;warp&lt;/strong&gt;... And they all offer some sort of trade-off; but instead of carefully analyzing these intricate aspects (as Luca did &lt;a href="https://www.lpalmieri.com/posts/2020-07-04-choosing-a-rust-web-framework-2020-edition/"&gt;here&lt;/a&gt;), you simply decided to go with the one that has an explicit reference to &lt;em&gt;Start Trek&lt;/em&gt;, right? Not ideal, mafriend, not ideal... Will I blame you? No. You will get nothing but support from me.&lt;/p&gt;

&lt;p&gt;And since you're already down this path, I think it might be a good idea for me to show you how I used &lt;a href="https://github.com/seanmonstar/warp"&gt;&lt;em&gt;warp&lt;/em&gt;&lt;/a&gt; myself to create a REST API (for learning purposes, just like a holodeck battle). &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Please note&lt;/strong&gt; that this is not a tutorial; this is me sharing a &lt;em&gt;process&lt;/em&gt; in the hopes that it can help you. Imagine you ask a friend to help you build something. This friend can either point you to the guides she someday used or show you how she actually went about it, not only sharing the code but explaining the &lt;em&gt;whys&lt;/em&gt; and &lt;em&gt;hows&lt;/em&gt;. This text is a simulation of the latter. In other words, if examples like &lt;a href="https://github.com/seanmonstar/warp/tree/master/examples"&gt;these&lt;/a&gt; are enough to get you going, considering using them instead of reading this somewhat long text (unless you are easily amused by Star Trek references and puns, then stay).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Still up for the ride? Great! Grab your Earl Gray tea (&lt;em&gt;hot!&lt;/em&gt;) and let's &lt;strong&gt;make it so!&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;p&gt;First, the playground.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cargo new --lib holodeck
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, there are (&lt;em&gt;at least&lt;/em&gt;) two ways to go about it. The first is to serve the API and test it via &lt;em&gt;curl&lt;/em&gt;, as Bastian did &lt;a href="https://blog.logrocket.com/creating-a-rest-api-in-rust-with-warp/"&gt;here&lt;/a&gt;; and for this, I would use a binary crate. The other way is to use &lt;em&gt;warp&lt;/em&gt;'s built-in test functionalities, for which I think it is best to get a library. As one of my main goals was to actually try &lt;em&gt;warp&lt;/em&gt;'s test module, I chose the second path.&lt;/p&gt;

&lt;p&gt;I started by editing the &lt;code&gt;Cargo.toml&lt;/code&gt; file and adding two &lt;a href="https://doc.rust-lang.org/rust-by-example/cargo/deps.html"&gt;dependencies&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[dependencies]&lt;/span&gt;
&lt;span class="nn"&gt;tokio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="py"&gt;features&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;["full"]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="py"&gt;warp&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.3"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then I wrote a very simple test case. I chose to test a dull &lt;code&gt;GET&lt;/code&gt; method. By dull I mean that it will not actually return any data, it will only [1] assume that there will be a mod called &lt;code&gt;filters&lt;/code&gt; where the filters will be added (filters are the dorsal spine of &lt;em&gt;warp&lt;/em&gt; usage, as shown &lt;a href="https://docs.rs/warp/0.3.1/warp/trait.Filter.html"&gt;here&lt;/a&gt;); [2]; use the request to make make a &lt;code&gt;GET&lt;/code&gt; on the path &lt;code&gt;/holodeck&lt;/code&gt; using the assumed filters; [3] and finally compare the answer with the enum &lt;code&gt;StatusCode::ACCEPTED&lt;/code&gt;. And because the whole thing is going to be asynchronous, the &lt;code&gt;#[tokio::test]&lt;/code&gt; is needed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[cfg(test)]&lt;/span&gt;
&lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;http&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;StatusCode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;test&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;super&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;#[tokio::test]&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;try_list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;request&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="nf"&gt;.method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"GET"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nf"&gt;.path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/holodeck"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nf"&gt;.reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;.await&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="nf"&gt;.status&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nn"&gt;StatusCode&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ACCEPTED&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;You will notice that I chose not to write &lt;code&gt;use super::filters::*&lt;/code&gt; with the &lt;strong&gt;*&lt;/strong&gt;, which would allow me to write things like &lt;code&gt;list()&lt;/code&gt; instead of &lt;code&gt;filters::list()&lt;/code&gt;; I did so because it makes it easier for me (and for you) to know &lt;em&gt;what&lt;/em&gt; is coming from &lt;em&gt;where&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then, I created the missing filter, which is designed to expect nothing but an empty &lt;code&gt;GET&lt;/code&gt; and handle it over to what I call a &lt;em&gt;"Matthew McConaughey handler"&lt;/em&gt;, because all it has to do is to say &lt;em&gt;&lt;a href="https://youtu.be/Dvi8P-lhJmE?t=6"&gt;alright, alright, alright&lt;/a&gt;&lt;/em&gt; (a.k.a. &lt;code&gt;StatusCode::ACCEPTED&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="n"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;super&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;handlers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt;  &lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Filter&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Extract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Rejection&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Clone&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;path!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"holodeck"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nf"&gt;.and&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="nf"&gt;.and_then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;handlers&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;handle_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="n"&gt;handlers&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;http&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;StatusCode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Infallible&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;handle_list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="nn"&gt;warp&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Infallible&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// "Alright, alright, alright", Matthew said.&lt;/span&gt;
        &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;StatusCode&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ACCEPTED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why &lt;code&gt;Infallible&lt;/code&gt; in the handler's Result? Because if something goes wrong (that's not coded yet), the problem will also be sent as Ok (e.g. &lt;code&gt;Ok(StatusCode::BAD_GATEWAY)&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;It might seem like a lot of wasted time, but let me tell you the benefits of doing this (and I'm not even going to get fancy with &lt;a href="http://carol-nichols.com/2015/03/28/tdd-example-in-rust/"&gt;TDD&lt;/a&gt;). For starters, sometimes (maybe &lt;em&gt;every time&lt;/em&gt;) it is easier to know &lt;em&gt;what&lt;/em&gt; we wanna do than &lt;em&gt;how&lt;/em&gt; we're &lt;em&gt;supposed&lt;/em&gt; to do it, and tests are a good way to force you to answer this &lt;em&gt;"what"&lt;/em&gt; before jumping into the myriad of possible answers to the &lt;em&gt;"how"&lt;/em&gt; question. Besides that, these baby steps allowed me to have a clear picture of which function was responsible for which task, who got to be async and who didn't, and so on.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cargo test

running 1 test
test tests::try_list ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It worked; not much happened but worked nonetheless. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#in-the-next-episode-of-engaging-warp"&gt;
  &lt;/a&gt;
  In the next episode of &lt;strong&gt;&lt;em&gt;Engaging Warp&lt;/em&gt;&lt;/strong&gt;...
&lt;/h2&gt;

&lt;p&gt;The next step is to build the &lt;code&gt;POST&lt;/code&gt; method. That will require proper coding of both filters and handlers, as well as deserializing the JSON and storing it somewhere.&lt;/p&gt;

&lt;p&gt;Anyway, that's all for now. If I said something wrong or made things more complicated than they should be, let me know in the comments.&lt;/p&gt;

&lt;p&gt;üññ&lt;/p&gt;

</description>
      <category>rust</category>
      <category>warp</category>
      <category>rest</category>
      <category>api</category>
    </item>
  </channel>
</rss>
