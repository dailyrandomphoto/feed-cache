<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Testing a Mui Date Picker Adaptor Component Integrated with React Hook Form</title>
      <author>Rex</author>
      <pubDate>Fri, 21 Jan 2022 22:01:35 +0000</pubDate>
      <link>https://dev.to/rexebin/testing-a-mui-date-picker-adaptor-component-integrated-with-react-hook-form-4pa4</link>
      <guid>https://dev.to/rexebin/testing-a-mui-date-picker-adaptor-component-integrated-with-react-hook-form-4pa4</guid>
      <description>&lt;h3&gt;
  &lt;a href="#subject-under-test"&gt;
  &lt;/a&gt;
  Subject Under Test
&lt;/h3&gt;

&lt;p&gt;A date picker component integrating mui's date picker with React Hook Form's form context. It uses the &lt;code&gt;Controller&lt;/code&gt; component from React Hook Form(RHF) and configures mui's  &lt;code&gt;DatePicker&lt;/code&gt; to handle validations and more. I use this component instead of &lt;code&gt;mui&lt;/code&gt;'s &lt;code&gt;DatePicker&lt;/code&gt; in all my forms. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#behaviours"&gt;
  &lt;/a&gt;
  Behaviours
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; It inherits all the behaviours from &lt;code&gt;DatePicker&lt;/code&gt; of &lt;code&gt;mui&lt;/code&gt; and accepts all &lt;code&gt;DatePicker&lt;/code&gt; props as-is.&lt;/li&gt;
&lt;li&gt; It takes &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;formContext&lt;/code&gt; and &lt;code&gt;defaultValue&lt;/code&gt; required props and registers the &lt;code&gt;DatePicker&lt;/code&gt; to the form context of RHF&lt;/li&gt;
&lt;li&gt; It has two modes: edit mode and read-only mode. In read-only mode, it is disabled, has no date picker icon button and is rendered as a standard(underline) &lt;code&gt;TextField&lt;/code&gt;. In edit mode, it is rendered as outlined &lt;code&gt;TextField&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt; It builds in the &lt;code&gt;required&lt;/code&gt; validation rule and takes a &lt;code&gt;required&lt;/code&gt; prop.&lt;/li&gt;
&lt;li&gt;It builds in a validation rule for invalid date input&lt;/li&gt;
&lt;li&gt; It accepts validation rules and enforces them.&lt;/li&gt;
&lt;li&gt; It takes an optional &lt;code&gt;onChange&lt;/code&gt; prop. It will update the value and trigger the given &lt;code&gt;onChange&lt;/code&gt; method on change.&lt;/li&gt;
&lt;li&gt;It has a default mask and date format and can be changed with props.&lt;/li&gt;
&lt;li&gt; It defaults to size small, full width and shrink label.&lt;/li&gt;
&lt;li&gt;It set time to end of the day.&lt;/li&gt;
&lt;li&gt;It takes a &lt;code&gt;style&lt;/code&gt; prop for styling the underlying &lt;code&gt;TextField&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;matchMedia&lt;/code&gt; is mocked so that the date picker can be rendered in desktop mode with the date picker icon button&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;TestComponent&lt;/code&gt; sets up a React Hook Form environment and shows how the SUT can be used.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;FormForTesting&lt;/code&gt; is a testing utility component for testing React Hook Form form components.&lt;/li&gt;
&lt;li&gt;The tests are grouped into three categories: appearance, behaviours and validations.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>reacthookform</category>
      <category>react</category>
      <category>testing</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Adding Postgres Search to a Node REST API</title>
      <author>James Villarrubia</author>
      <pubDate>Fri, 21 Jan 2022 21:36:37 +0000</pubDate>
      <link>https://dev.to/james_mtc/adding-postgres-search-to-a-node-rest-api-39hd</link>
      <guid>https://dev.to/james_mtc/adding-postgres-search-to-a-node-rest-api-39hd</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;a href="#1-part-1---we-build-a-restful-service"&gt;1. PART 1 - We build a RESTful service&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#11-search-in-your-service"&gt;1.1. Search in your Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#12-getting-started-with-feathers"&gt;1.2. Getting Started with Feathers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#13-adding-a-test-service"&gt;1.3. Adding a test service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#14-adding-fields-to-our-service"&gt;1.4. Adding fields to our Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#15-adding-a-db"&gt;1.5. Adding a DB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#16-confirm-your-db-structure"&gt;1.6. Confirm your DB Structure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#2-part-2---creating-the-search-vector"&gt;2. PART 2 - Creating the search vector&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#21-testing-the-vector-creation-hook"&gt;2.1. Testing the Vector Creation Hook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#3-part-3---exposing-the-field-to-search"&gt;3. PART 3 - Exposing the field to search&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#31-adding-better-data"&gt;3.1. Adding better data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#32-whitelisting-our-query-parameter"&gt;3.2. Whitelisting our query parameter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#33-creating-our-hook"&gt;3.3. Creating our hook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#34-cleaning-up-the-search-parameter"&gt;3.4. Cleaning up the Search parameter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#35-overriding-feathers-sequelize"&gt;3.5. Overriding Feathers-Sequelize&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#36-adding-a-rank"&gt;3.6. Adding a rank&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#37-sorting-by-rank"&gt;3.7. Sorting by rank&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#adding-postgres-search-to-a-node-rest-api"&gt;
  &lt;/a&gt;
  Adding Postgres Search to a Node REST API
&lt;/h1&gt;

&lt;h4&gt;
  &lt;a href="#why-this"&gt;
  &lt;/a&gt;
  Why this?
&lt;/h4&gt;

&lt;p&gt;Throughout my 15 years as a web developer, I have built countless services with less than ideal search options. In the early days of WordPress and Drupal, we used LIKE statements and mashed together strings. And while tools like Mongo have some search capabilities, ranked search results were still hard to deploy.  As the web (and my skills) grew, we offloaded ranked search to tools like &lt;a href="https://dev.to/search?q=solr"&gt;Solr&lt;/a&gt; and &lt;a href="https://dev.to/search?q=elastic"&gt;Elastic&lt;/a&gt;.  But each of these solutions requires an independent service - new servers, new stateful storage, new costs.  Finally, search as a service was exposed with wonderful companies like &lt;a href="https://www.algolia.com/"&gt;Algolia&lt;/a&gt;, &lt;a href="https://www.meilisearch.com/"&gt;MeiliSearch&lt;/a&gt;, and &lt;a href="https://bonsai.io/"&gt;Bonsai&lt;/a&gt;.  Each of these platforms has tradeoffs.  While they avoid some maintenance costs, they also required that your data leave your systems.  In regulated data spaces (fintech, edtech, healthtech), the minimum spend for extra security may be too high for you. Worse, as your data grows, so does the cost because they are "double-hosting" data in your stack.  Eventually, these tools can become quite pricey, particularly if you just want a simple ranked search on one or two tables.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3diE2vbIarCXWXaN15/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3diE2vbIarCXWXaN15/giphy.gif" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#something-good-enough"&gt;
  &lt;/a&gt;
  Something good "enough"
&lt;/h4&gt;

&lt;p&gt;In many growth-stage startups, data is often more complex than a simple LIKE mashing can deal with, but the service is not so complex or profitable that it requires managed or deployed service.  What do you do?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;em&gt;PostgreSQL search to the rescue!&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you happen to be building a SQL-based DB, then selecting PostgreSQL is a great choice because it offers a variety of innate search functionalities that can cover that gap between LIKE and Elastic.  &lt;a href="https://towardsdatascience.com/postgresql-rank-function-introduction-c8ac008506dd"&gt;Many&lt;/a&gt;, &lt;a href="https://rob.conery.io/2019/10/29/fine-tuning-full-text-search-with-postgresql-12/"&gt;many&lt;/a&gt; &lt;a href="https://thoughtbot.com/blog/optimizing-full-text-search-with-postgres-tsvector-columns-and-triggers"&gt;articles&lt;/a&gt; have talked about setting up these queries or materialized views. &lt;a href="http://rachbelaid.com/postgres-full-text-search-is-good-enough/"&gt;My favorite is written by Rachel Belaid&lt;/a&gt;. But very few offer examples on how to deploy those capabilities in a true service.&lt;/p&gt;

&lt;p&gt;That's what we're doing in this series.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-part-1-we-build-a-restful-service"&gt;
  &lt;/a&gt;
  1. PART 1 - We build a RESTful service
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#11-search-in-your-service"&gt;
  &lt;/a&gt;
  1.1. Search in your Service
&lt;/h3&gt;

&lt;p&gt;There are two major ways to deploy search internally that this tutorial will cover.  &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;em&gt;Add a simple search vector to a single table.&lt;/em&gt; Enable better search on a single table by combining multiple fields into a searchable text vector.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Add a complex search vector that combines multiple tables.&lt;/em&gt;  Enable better search on a complex set of JOINs by leveraging an auto-updating materialized view and search vector.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This tutorial will start with the first option.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#tooling-opinions"&gt;
  &lt;/a&gt;
  Tooling Opinions
&lt;/h3&gt;

&lt;p&gt;I've built a lot of RESTful services over the last decade.  In the corporate transition from on-prem to cloud and microservice architectures, three recurring patterns have emerged. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First, "I/O wait" is everywhere.  This is why Node and Go have grown so quickly, while &lt;a href="https://insights.stackoverflow.com/survey/2020#most-popular-technologies"&gt;Ruby and PHP have tapered&lt;/a&gt;. That's not to say they aren't used still, but they aren't the go-to for RESTful APIs and microservices. Even if I/O wait wasn't such an issue, so much investment has been made in Node that it is &lt;a href="https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/ruby-node.html"&gt;now faster than many multi-threaded alternatives&lt;/a&gt;, even with CPU-bound actions like encryption.&lt;/li&gt;
&lt;li&gt;Second, RESTful patterns are all 90% the same.  Rarely is HATEOAS implemented, but almost everything else is &lt;a href="https://swagger.io/specification/"&gt;becoming standardized&lt;/a&gt;. &lt;/li&gt;
&lt;li&gt;And thirdly, databases shouldn't matter to the REST endpoint.  I'm giving and getting JSON.  I shouldn't care how it's stored.  That's for the architect to decide based on query and access patterns.  Being able to touch multiple DB types has significant advantages.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For these three reasons, I fell in love with a NodeJS framework called &lt;a href="https://feathersjs.com/"&gt;FeathersJS&lt;/a&gt;.   It is a lightweight framework on top of ExpressJS that provides a universal data model across multiple DB backends, repeatable and reusable REST patterns, and almost no additional overhead from Express.  Unlike frameworks like Sails or Nest, Feathers services operate with microservice REST as a default pattern, eschewing the cruft of typical MVC and replacing it with predictable middleware chains. Feathers makes it easy to answer the following questions by default:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Did the request come in correctly?&lt;/em&gt; &lt;/li&gt;
&lt;li&gt;&lt;em&gt;Do we manipulate the query before hitting the DB?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Great the DB sent us something back, do we manipulate it before returning it?&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most importantly, Feathers makes it &lt;em&gt;hard&lt;/em&gt; to overcomplicate your code with implicit patterns, decorators, and overly-coupled inheritance.  You can still write bad code, but the code smell is more obvious and explicit.  &lt;/p&gt;

&lt;p&gt;For this tutorial, we're going to use FeathersJS for our core library.  We'll also dabble a bit in Sequelize and KnexJS.  If you'd prefer raw Express, you can adapt the feathers hooks into Express middleware pretty easily, should you choose to do so.&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__7598"&gt;
  
    .ltag__tag__id__7598 .follow-action-button{
      background-color:  !important;
      color:  !important;
      border-color:  !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/feathersjs" class="ltag__tag__link"&gt;feathersjs&lt;/a&gt; Follow
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#12-getting-started-with-feathers"&gt;
  &lt;/a&gt;
  1.2. Getting Started with Feathers
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Make sure you have &lt;a href="https://nodejs.org/"&gt;NodeJS&lt;/a&gt; and &lt;a href="https://www.npmjs.com/"&gt;npm&lt;/a&gt; installed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install your dependencies&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight make"&gt;&lt;code&gt;&lt;span class="err"&gt;npm&lt;/span&gt; &lt;span class="err"&gt;install&lt;/span&gt; &lt;span class="err"&gt;@feathersjs/cli&lt;/span&gt; &lt;span class="err"&gt;-g&lt;/span&gt;
&lt;span class="err"&gt;mkdir&lt;/span&gt; &lt;span class="err"&gt;search-test&lt;/span&gt;
&lt;span class="err"&gt;cd&lt;/span&gt; &lt;span class="err"&gt;search-test&lt;/span&gt;
&lt;span class="err"&gt;feathers&lt;/span&gt; &lt;span class="err"&gt;generate&lt;/span&gt; &lt;span class="err"&gt;app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select the following&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight make"&gt;&lt;code&gt;&lt;span class="nl"&gt;$ Do you want to use JavaScript or TypeScript&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="nf"&gt;TypeScript&lt;/span&gt;
&lt;span class="nl"&gt;$ Project name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;search-test&lt;/span&gt;
&lt;span class="nl"&gt;$ Description&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;Testing Search in Postgres&lt;/span&gt;
&lt;span class="nl"&gt;$ What folder should the source files live in&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;src&lt;/span&gt;
&lt;span class="nl"&gt;$ Which package manager are you using (has to be installed globally)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;npm&lt;/span&gt;
&lt;span class="nl"&gt;$ What type of API are you making&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;REST&lt;/span&gt;
&lt;span class="nl"&gt;$ Which testing framework do you prefer&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;Mocha + assert&lt;/span&gt;
&lt;span class="nl"&gt;$ This app uses authentication&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;No&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start your app&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;What you should see at this point is:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight make"&gt;&lt;code&gt;&lt;span class="nl"&gt;info&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;Feathers application started on http://localhost:3030&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;And if you go to &lt;a href="http://localhost:3030"&gt;http://localhost:3030&lt;/a&gt;, you'll see the feathers logo.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#13-adding-a-test-service"&gt;
  &lt;/a&gt;
  1.3. Adding a test service
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Add the "books" RESTful service&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;feathers generate service
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;NOTE: What we've asked feathers to do here is to create a "service." Feathers defines services as objects/classes that implement methods and usually map to a particular RESTful entity and a particular DB table or collection.  Service methods are pre-defined CRUD methods.  This is what gives Feathers its power - universal CRUD across all DB types or custom data sources.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select the following&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight make"&gt;&lt;code&gt;&lt;span class="nl"&gt;$ What kind of service is it?&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;Sequelize&lt;/span&gt;
&lt;span class="nl"&gt;$ What is the name of the service?&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;books&lt;/span&gt;
&lt;span class="nl"&gt;$ Which path should the service be registered on?&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;/books&lt;/span&gt;
&lt;span class="nl"&gt;$ Which database are you connecting to?&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;PostgreSQL&lt;/span&gt;
&lt;span class="nl"&gt;$ What is the database connection string?&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;postgres://postgres:@localhost:5432/feathers_postgresql_search&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#14-adding-fields-to-our-service"&gt;
  &lt;/a&gt;
  1.4. Adding fields to our Service
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Open the &lt;code&gt;/src/models/books.model.ts&lt;/code&gt; and modify it as such.&lt;/p&gt;

&lt;p&gt;First, pull out the Books Model object as&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BooksModel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DataTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;STRING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DataTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;STRING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DataTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;isbn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DataTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nl"&gt;published&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DataTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DATEONLY&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sequelizeClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;books&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;BooksModel&lt;/span&gt;&lt;span class="p"&gt;,...)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Now we can access the schema from other files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add a search vector field.  &lt;/p&gt;

&lt;p&gt;This is where we add a singular column in our eventual DB table that will provide the vector and index for our search.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BooksModel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="na"&gt;search_vector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tsvector&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;This will create a TSVECTOR column in your Postgres DB.  Note that the type in this column appears as a string.  This is because Sequelize, while supporting tsvectors, doesn't provide the TypeScript types for it just yet.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#15-adding-a-db"&gt;
  &lt;/a&gt;
  1.5. Adding a DB
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Make sure your Postgres connection is correct in &lt;code&gt;/config/default.json&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If you want to run Postgres locally via Docker, add the following to a &lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3.8'&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

&lt;span class="c1"&gt;# # This is the postgres docker DB available at port 5432&lt;/span&gt;
&lt;span class="c1"&gt;# #   - This only for local usage and has no bearing on CloudSQL&lt;/span&gt;
&lt;span class="c1"&gt;# #   - When referencing the db from a compose container, use database:5432&lt;/span&gt;
&lt;span class="na"&gt;database&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;postgres:10.16"&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_USER=unicorn_user&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_PASSWORD=magical_password&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;POSTGRES_DB=rainbow_database&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;database-data:/var/lib/postgresql/data/&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;5432:5432"&lt;/span&gt;

&lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="na"&gt;database-data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;From your terminal, run &lt;code&gt;docker-compose up --force-recreate --build&lt;/code&gt; and you'll get a fresh feathers app and Postgres DB every time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If using the docker container, then the connection string will be something like &lt;code&gt;postgres://unicorn_user:magical_password@localhost:5432/rainbow_database&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Confirm the system will boot by running &lt;code&gt;npm start&lt;/code&gt; or &lt;code&gt;npm run dev&lt;/code&gt; in a new tab (after starting Docker or Postgres).&lt;/p&gt;

&lt;p&gt;If your system is running correctly, you should see &lt;code&gt;info: Feathers application started on http://localhost:3030&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If your DB connection is up, you can hit &lt;code&gt;http://localhost:3030/books&lt;/code&gt; and see the following JSON:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;"total"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nl"&gt;"limit"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nl"&gt;"skip"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nl"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;:[]}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#16-confirm-your-db-structure"&gt;
  &lt;/a&gt;
  1.6. Confirm your DB Structure
&lt;/h3&gt;

&lt;p&gt;Feathers Sequelize will automatically sync the DB structure to a new table on boot.  But we can confirm that our fields are there with a simple curl request against our REST API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;--location&lt;/span&gt; &lt;span class="nt"&gt;--request&lt;/span&gt; POST &lt;span class="s1"&gt;'http://localhost:3030/books'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--header&lt;/span&gt; &lt;span class="s1"&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--data-raw&lt;/span&gt; &lt;span class="s1"&gt;'{
    "title":"How I Built My House",
    "author":"Bob Vila",
    "description": "This book is a great book about building houses and family homes.",
    "isbn": "12345678",
    "published": "2021-12-15T20:28:03.578Z"
}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you hit &lt;code&gt;http://localhost:3030/books&lt;/code&gt; again, it should display the following JSON:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"total"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"limit"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"skip"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"How I Built My House"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Bob Vila"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"This book is a great book about building houses and family homes."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"isbn"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"12345678"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"published"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2021-12-15"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"search_vector"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"createdAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-07T03:41:58.933Z"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"updatedAt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-07T03:41:58.933Z"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have an error in the early steps, and a field is missing, try deleting the whole table and letting Feathers rebuild from scratch.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-part-2-creating-the-search-vector"&gt;
  &lt;/a&gt;
  2. PART 2 - Creating the search vector
&lt;/h2&gt;

&lt;p&gt;As mentioned, there are many articles outlining the particulars of creating a Postgres tsvector for ranked search.  See &lt;a href="https://www.compose.com/articles/mastering-postgresql-tools-full-text-search-and-phrase-search/"&gt;here&lt;/a&gt; for an example.  What we want to do is run an &lt;code&gt;UPDATE&lt;/code&gt; statement after the modification of any given row in our &lt;code&gt;/books&lt;/code&gt; service. That means any POST, PUT, or PATCH should rebuild the vector for that row.  Sequelize does offer transaction hooks, but they can be tricky with batch writes.  In the feathers context, it is best to build a trigger in SQL directly, or leave the logic to a Feathers &lt;code&gt;hook&lt;/code&gt;.  Sequelize is an ugly middle-ground that tightly couples our search to the ORM and not to the API or the DB table.  &lt;/p&gt;

&lt;p&gt;Postgres triggers are more complicated, so we will use a Feathers &lt;code&gt;hook&lt;/code&gt;.  Hooks are specific, asynchronous, middleware functions that are mapped to each Express method and path.  For example, in &lt;code&gt;/src/services/books/books.hooks.ts&lt;/code&gt; you could add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;     &lt;span class="nx"&gt;before&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="p"&gt;...&lt;/span&gt;
         &lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is the /books context object:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
         &lt;span class="p"&gt;...&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For every find request (i.e. GET request to &lt;code&gt;/books/{id}&lt;/code&gt; where id is null or empty), we will trigger the hook function that passes the feathers context (a modified Express Request object) and log it to the console.  Because it's in the &lt;code&gt;before&lt;/code&gt; array, it will trigger before the middleware calls Sequelize and hits the DB.  Before hooks are great for modifying data to fit a DB schema or authenticating headers and users.  After hooks are great for removing extraneous or sensitive fields from the outgoing response.&lt;/p&gt;

&lt;p&gt;Here's our hook, which you can place in a &lt;code&gt;src/services/books/tsquery-and-search.hook.ts&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;HookContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@feathersjs/feathers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;GeneralError&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@feathersjs/errors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateTheTSVector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;HookContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// prevent a developer from using this hook without a named column to search&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;searchColumn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;GeneralError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;TSVector hook cannot function without a searchColumn parameter.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;// gets the shared sequelize client&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sequelize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sequelizeClient&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;// creates a list of all of the fields we want to search based on the inclusion of a "level" field in our Model.  &lt;/span&gt;
        &lt;span class="c1"&gt;// ts_rank allows us to set importance on four levels: A &amp;gt; B &amp;gt; C &amp;gt; D.&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fieldList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;level&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;D&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;level&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="c1"&gt;// Our query is an update statement that maps each appropriate field to a vector and then merges all the vectors for storage&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
            UPDATE "&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;" SET "&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;searchColumn&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;" = (`&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;
            &lt;span class="nx"&gt;fieldList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`setweight(to_tsvector($&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;), '&lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;level&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;')`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; || &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;`) WHERE "id"=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; RETURNING &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;searchColumn&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
            `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// we now await the query update and do a SQL-safe injection through the bind option in sequelize.  This replaces the $1 and $2 etc. in the UPDATE statement with the values from our input data.&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sequelize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fieldList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
                &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;QueryTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;UPDATE&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;r&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// because we want see the vector in our result(not normal), we modify the outbound data by appending the updated search_vector field.&lt;/span&gt;
                &lt;span class="c1"&gt;// set the result to the context object so we can share it with the user or hide it&lt;/span&gt;
                &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;searchColumn&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;searchColumn&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="c1"&gt;// since the data has already been mutated/deleted, we shouldn't throw an error to the end user, but log it for internal tracking&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we will add it to the following after hooks in the &lt;code&gt;books.hooks.ts&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="c1"&gt;// add the Model so we can reference it in the hook&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BooksModel&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../models/books.model&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;after&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
        &lt;span class="na"&gt;find&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
        &lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
        &lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;updateTheTSVector&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;BooksModel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;searchColumn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;search_vector&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})],&lt;/span&gt;
        &lt;span class="na"&gt;update&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;updateTheTSVector&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;BooksModel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;searchColumn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;search_vector&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})],&lt;/span&gt;
        &lt;span class="na"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;updateTheTSVector&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;BooksModel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;searchColumn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;search_vector&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})],&lt;/span&gt;
        &lt;span class="na"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;NOTE: we've given ourselves a hook options field called &lt;code&gt;searchColumn&lt;/code&gt; which allows us to reuse this hook elsewhere and we reference the Model directly, so nothing about the hook is &lt;code&gt;books&lt;/code&gt;-specific.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#21-testing-the-vector-creation-hook"&gt;
  &lt;/a&gt;
  2.1. Testing the Vector Creation Hook
&lt;/h3&gt;

&lt;p&gt;Let's give our hook a spin.  First we need to add the ranking fields to the Model object.  Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DataTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;STRING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DataTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;STRING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DataTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TEXT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That means that the relative strength for ranking results looks at &lt;code&gt;title &amp;gt; description &amp;gt; author&lt;/code&gt;. To be clear, &lt;code&gt;level&lt;/code&gt; is not an official Sequelize field parameter, but we use it in our hook to determine which fields to include in our vector and which to ignore.&lt;/p&gt;

&lt;p&gt;Now let's run that curl again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight matlab"&gt;&lt;code&gt;&lt;span class="nb"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="n"&gt;POST&lt;/span&gt; &lt;span class="s1"&gt;'http://localhost:3030/books'&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="s1"&gt;'Co application/json'&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"How I Built My House"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Bob Vila"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"This book is a great book about building houses and family homes."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"isbn"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"12345678"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"published"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"2021-12-15T20:28:03.578Z"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now see that the most recent row has the following vector: &lt;code&gt;'bob':6C 'book':9B,13B 'build':15B 'built':3A 'famili':18B 'great':12B 'home':19B 'hous':5A,16B 'vila':7C&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Congrats, we are now automatically updating our search vector!  You can confirm it with PUT and PATCH request as well. &lt;/p&gt;

&lt;p&gt;In the next article, we will add the ability to leverage this vector from an HTTP request.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-part-3-exposing-the-field-to-search"&gt;
  &lt;/a&gt;
  3. PART 3 - Exposing the field to search
&lt;/h2&gt;

&lt;p&gt;This tutorial is part 3 of our series in adding Postgres search to RESTful API without bruteforce LIKE statements or external tooling.  The previous part covered adding a search vector to our DB.  But adding a search vector doesn't do much unless we enable search on it as a consumer of the API.  Because of the way Sequelize creates queries, this can get a little tricky.  We're going to solve that through a new hook.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#31-adding-better-data"&gt;
  &lt;/a&gt;
  3.1. Adding better data
&lt;/h3&gt;

&lt;p&gt;If you fiddled with the code in Part 1, you probably seeded your DB with lots of test requests and simple book objects.  Let's add some better data for our testing scenarios.  Delete any remaining rows from your Postgres DB or drop the table and restart feathers.&lt;/p&gt;

&lt;p&gt;Now, run the following three curl requests:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight matlab"&gt;&lt;code&gt;&lt;span class="nb"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="n"&gt;POST&lt;/span&gt; &lt;span class="s1"&gt;'http://localhost:3030/books'&lt;/span&gt; &lt;span class="p"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="s1"&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class="p"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Space: A Novel"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"James A. Michener "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Already a renowned chronicler of the epic events of world history, James A. Michener tackles the most ambitious subject of his career: space, the last great frontier. This astounding novel brings to life the dreams and daring of countless men and women - people like Stanley Mott, the engineer whose irrepressible drive for knowledge places him at the center of the American exploration effort; Norman Grant, the war hero and US senator who takes his personal battle not only to a nation but to the heavens; Dieter Kolff, a German rocket scientist who once worked for the Nazis; Randy Claggett, the astronaut who meets his destiny on a mission to the far side of the moon; and Cynthia Rhee, the reporter whose determined crusade brings their story to a breathless world."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"isbn"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"0812986768"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"published"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"2015-07-07T00:00:00.000Z"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="n"&gt;POST&lt;/span&gt; &lt;span class="s1"&gt;'http://localhost:3030/books'&lt;/span&gt; &lt;span class="p"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="s1"&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class="p"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"A Concise History of the Netherlands"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"James Kennedy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"The Netherlands is known among foreigners today for its cheese and its windmills, its Golden Age paintings and its experimentation in social policies such as cannabis and euthanasia. Yet the historical background for any of these quintessentially Dutch achievements is often unfamiliar to outsiders. This Concise History offers an overview of this surprisingly little-known but fascinating country. Beginning with the first humanoid settlers, the book follows the most important contours of Dutch history, from Roman times through to the Habsburgs, the Dutch Republic and the Golden Age. The author, a modernist, pays particularly close attention to recent developments, including the signature features of contemporary Dutch society. In addition to being a political history, this overview also gives systematic attention to social and economic developments, as well as in religion, the arts and the Dutch struggle against the water. The Dutch Caribbean is also included in the narrative."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"isbn"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"0521875889"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"published"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"2017-08-24T00:00:00.000Z"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nb"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="n"&gt;POST&lt;/span&gt; &lt;span class="s1"&gt;'http://localhost:3030/books'&lt;/span&gt; &lt;span class="p"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="s1"&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class="p"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Exploring Kennedy Space Center (Travel America\'s Landmarks)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"Emma Huddleston"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Gives readers a close-up look at the history and importance of Kennedy Space Center. With colorful spreads featuring fun facts, sidebars, a labeled map, and a Thats Amazing! special feature, this book provides an engaging overview of this amazing landmark."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"isbn"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"1641858540"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;"published"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"2019-08-01T00:00:00.000Z"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will add 3 real books to our database.  We will search for all three in a variety of ways to validate our new search capability.  If you open up the DB, you can see that the search_vector column has significantly larger vectors to work with.  For Emma Huddleston's book, we get &lt;code&gt;'amaz':40B,51B 'america':6A 'book':44B 'center':4A,26B 'close':15B 'close-up':14B 'color':28B 'emma':9C 'engag':47B 'explor':1A 'fact':32B 'featur':30B,42B 'fun':31B 'give':11B 'histori':20B 'huddleston':10C 'import':22B 'kennedi':2A,24B 'label':35B 'landmark':8A,52B 'look':17B 'map':36B 'overview':48B 'provid':45B 'reader':12B 'sidebar':33B 'space':3A,25B 'special':41B 'spread':29B 'that':39B 'travel':5A&lt;/code&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#32-whitelisting-our-query-parameter"&gt;
  &lt;/a&gt;
  3.2. Whitelisting our query parameter
&lt;/h3&gt;

&lt;p&gt;Feathers will disallow certain query parameters that aren't whitelisted and aren't fields in the service's model.  We want to be able to filter with normal matching like &lt;code&gt;publication &amp;gt; 2018&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To do that our eventual REST query would look like &lt;code&gt;http://localhost:3030/books?published[$gt]=2016&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you hit that query, you should only see 2 results, excluding &lt;code&gt;Space: A Novel&lt;/code&gt;.  This is the power of Feathers' default CRUD operations and query translation.  &lt;/p&gt;

&lt;p&gt;But we also filter by search keywords &lt;code&gt;!Johnson &amp;amp; Kennedy &amp;amp; (space | history)&lt;/code&gt; which is equivalent to &lt;code&gt;-Johnson and Kennedy and ( space or history )&lt;/code&gt; if you prefer search words.  This is close to google's syntax but not exact.  &lt;/p&gt;

&lt;p&gt;To enable search, we're going to add a new query option, &lt;code&gt;$search&lt;/code&gt;, making our query &lt;code&gt;http://localhost:3030/books?published[$gt]=2016&amp;amp;$search=!Johnson &amp;amp; Kennedy &amp;amp; (space | history)&lt;/code&gt;.  But remember that URLs don't like spaces and parentheses, so let's urlencode it to &lt;code&gt;%21Johnson%26Kennedy%26%28space%7Chistory%29&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now our search request looks like: &lt;code&gt;http://localhost:3030/books?published[$gt]=2016&amp;amp;$search=%21Johnson%26Kennedy%26%28space%7Chistory%29&lt;/code&gt;.  &lt;/p&gt;

&lt;p&gt;If you hit that endpoint now, you'll see &lt;code&gt;Invalid query parameter $search&lt;/code&gt;.  To fix this, go to &lt;code&gt;src/services/books/books.service.ts&lt;/code&gt; and add the &lt;code&gt;whitelist&lt;/code&gt; array like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;createModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;paginate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;paginate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;whitelist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$search&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now try again!  You should see &lt;code&gt;column books.$search does not exist&lt;/code&gt;.  That's good... that means our $search parameter is allowed through and we can clean it up in our hook.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#33-creating-our-hook"&gt;
  &lt;/a&gt;
  3.3. Creating our hook
&lt;/h3&gt;

&lt;p&gt;Because the only HTTP verb and path combination that we want to support $search on is &lt;code&gt;FIND&lt;/code&gt;, that's where our hooks going to go.  And because it's only a &lt;code&gt;before&lt;/code&gt; hook, put the following in your &lt;code&gt;books.hooks.ts&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;before&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
            &lt;span class="c1"&gt;//...&lt;/span&gt;
            &lt;span class="na"&gt;find&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;modifyQueryForSearch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;searchColumn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;search_vector&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
            &lt;span class="c1"&gt;//...&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that we are using the same &lt;code&gt;searchColumn&lt;/code&gt; name as before.  &lt;/p&gt;

&lt;p&gt;But that function doesn't exist.  Let's add the import and placeholder now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="c1"&gt;// books.hooks.ts&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;modifyQueryForSearch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateTheTSVector&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./tsquery-and-search.hook&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="c1"&gt;// tsquery-and-search.hook.ts&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;modifyQueryForSearch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;HookContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have a hook that does nothing but is in the right place.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#34-cleaning-up-the-search-parameter"&gt;
  &lt;/a&gt;
  3.4. Cleaning up the Search parameter
&lt;/h3&gt;

&lt;p&gt;Because our DB doesn't have a column called &lt;code&gt;$search&lt;/code&gt;, we want to remove that parameter from our query and store it for later.  That way sequelize doesn't try to look for &lt;code&gt;search&lt;/code&gt; column on the &lt;code&gt;books&lt;/code&gt; table.  Add the following to the function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;modifyQueryForSearch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;HookContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// NOTE: make sure to add whitelist: ['$search'] to the service options.&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;$search&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// early exit if $search isn't a queryparameter so we can use normal sort and filter.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// removes that parameter so we don't interfere with normal querying&lt;/span&gt;
        &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;$search&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great, now if we hit &lt;code&gt;http://localhost:3030/books?published[$gt]=2016&amp;amp;$search=%21Johnson%26Kennedy%26%28space%7Chistory%29&lt;/code&gt; again we should see our 2 results again.  Search isn't working, but it isn't breaking the request.  &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#35-overriding-featherssequelize"&gt;
  &lt;/a&gt;
  3.5. Overriding Feathers-Sequelize
&lt;/h3&gt;

&lt;p&gt;Feathers-sequelize typically takes our &lt;code&gt;params.query&lt;/code&gt; and converts it into a sequelize friendly structure.  We want to modify that structure so our SQL &lt;code&gt;WHERE&lt;/code&gt; statement includes our search parameters.  If you examine the &lt;code&gt;_find&lt;/code&gt; function in &lt;code&gt;node_modules/feathers-sequelize/lib/index.js&lt;/code&gt; you can see what it's doing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;_find&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;where&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;paginate&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filterQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$sort&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="nx"&gt;where&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$limit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$skip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;distinct&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sequelize&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$select&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$select&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// etc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we can override the &lt;code&gt;where&lt;/code&gt; options with &lt;code&gt;params.sequelize&lt;/code&gt;, but it is not a deep-merge.  That's not helpful.  But since we know how the &lt;code&gt;where&lt;/code&gt; object is formed, we can replicate it wholesale!  Modify the hook as so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;modifyQueryForSearch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;HookContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;//... params stuff&lt;/span&gt;

        &lt;span class="c1"&gt;// build the where overrides ourselves&lt;/span&gt;
        &lt;span class="c1"&gt;// this replicates how the _find function in Feathers-Sequelize works, so we can override because we can't merge the 'where' statements&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;where&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;service&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;filterQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// pass them into the sequelize parameter, which overrides Feathers, but we account for defaults above&lt;/span&gt;
        &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sequelize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
                &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;where&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="c1"&gt;//... MODIFIACTIONS GO HERE&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run the query request again, the results should be the same.  &lt;/p&gt;

&lt;p&gt;So what do we add to the &lt;code&gt;where&lt;/code&gt; object?  To get our filter, we want to add an additional criteria. Our eventual SQL statement needs to look like:&lt;br&gt;
&lt;code&gt;SELECT * FROM "books" AS "books" WHERE (books.search_vector @@ to_tsquery("!Johnson&amp;amp;Kennedy&amp;amp;(space|history)")) AND "books"."published" &amp;gt; '2016-01-01'&lt;/code&gt;;&lt;/p&gt;

&lt;p&gt;Note the addition of the &lt;code&gt;search_vector&lt;/code&gt; and the &lt;code&gt;to_tsquery&lt;/code&gt; part.&lt;/p&gt;

&lt;p&gt;So let's start with the Sequelize &lt;code&gt;Op.and&lt;/code&gt; to enable an &lt;code&gt;AND&lt;/code&gt; composite in the &lt;code&gt;WHERE&lt;/code&gt; clause.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;where&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Op&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;and&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="c1"&gt;//... MODIFIACTIONS GO HERE&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we know we have a &lt;code&gt;to_tsquery&lt;/code&gt; function with an input, so let's make that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;where&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Op&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;and&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;Sequelize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;`books.search_vector @@ to_tsquery`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;!Johnson&amp;amp;Kennedy&amp;amp;(space|history)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;//... MODIFIACTIONS GO HERE&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Obviously, we don't want to hardcode the query, so let's pull that out as a replacement.  Sequelize requires that we reference it as a literal so it doesn't get parsed incorrectly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sequelize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
            &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;where&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Op&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;and&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;Sequelize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;`books.search_vector @@ to_tsquery`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Sequelize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;literal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="c1"&gt;// replaces the string query from the parameters with a postgres safe string&lt;/span&gt;
        &lt;span class="na"&gt;replacements&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;!Johnson&amp;amp;Kennedy&amp;amp;(space|history)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But we also don't want this hook to be hardcoded to &lt;code&gt;books&lt;/code&gt; or &lt;code&gt;search_vector&lt;/code&gt;.  Let's replace those:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sequelize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
            &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;where&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Op&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;and&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;Sequelize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;searchColumn&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; @@ to_tsquery`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;Sequelize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;literal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="c1"&gt;// replaces the string query from the parameters with a postgres safe string&lt;/span&gt;
        &lt;span class="na"&gt;replacements&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;!Johnson&amp;amp;Kennedy&amp;amp;(space|history)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's deal with the query string.  Again, we don't want to hardcode it, but we also don't want to expect the user to be perfect with their search query.  Thankfully there is an npm plugin that converts more typical search statements into Postgres tsquery statements.  From your terminal, run &lt;code&gt;npm i --save pg-tsquery&lt;/code&gt;;&lt;/p&gt;

&lt;p&gt;Import the library with &lt;code&gt;import queryConverter from 'pg-tsquery';&lt;/code&gt; at the top of the file.  &lt;/p&gt;

&lt;p&gt;Because we want to give optionality to the converter's settings, we can make that a hook option.  Modify your hook to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;modifyQueryForSearch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;HookContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// set defaults&lt;/span&gt;
        &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="na"&gt;conversionOptions&lt;/span&gt;&lt;span class="p"&gt;:{},&lt;/span&gt; 
            &lt;span class="na"&gt;searchColumn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;search_vector&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// NOTE: make sure to add whitelist: ['$search'] to the service options.&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;$search&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// early exit if $search isn't a query parameter so we can use normal sort and filter.&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// removes that parameter so we don't interfere with normal querying&lt;/span&gt;
        &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;$search&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// build the where overrides ourselves&lt;/span&gt;
        &lt;span class="c1"&gt;// this replicates how the _find function in Feathers-Sequelize works, so we can override because we can't merge the 'where' statements&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;where&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;service&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;filterQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// pass them into the sequelize parameter, which overrides Feathers, but we account for defaults above&lt;/span&gt;
        &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sequelize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
            &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
                &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;where&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="c1"&gt;// adds the search filter so it only includes matching responses&lt;/span&gt;
                &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Op&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;and&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;Sequelize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;searchColumn&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; @@ to_tsquery`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nx"&gt;Sequelize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;literal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="c1"&gt;// replaces the string query from the parameters with a postgres safe string&lt;/span&gt;
            &lt;span class="na"&gt;replacements&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;queryConverter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;conversionOptions&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can test this by hitting a different query: &lt;code&gt;http://localhost:3030/books?published[$gt]=2016&amp;amp;$search=Dutch&lt;/code&gt; which should only return one book because only one book description references the Dutch.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#36-adding-a-rank"&gt;
  &lt;/a&gt;
  3.6. Adding a rank
&lt;/h3&gt;

&lt;p&gt;Search filtering on ts_vector is still very powerful, but we want to be able to rank our results in a repeatable fashion.  To do that, we need two things: a column computing the rank and an &lt;code&gt;ORDER BY&lt;/code&gt; statement in our SQL.  &lt;/p&gt;

&lt;p&gt;Our end SQL should be something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; 
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;ts_rank&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search_vector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'!Johnson&amp;amp;Kennedy&amp;amp;(space|history)'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="nv"&gt;"rank"&lt;/span&gt; 
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="nv"&gt;"books"&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="nv"&gt;"books"&lt;/span&gt; 
&lt;span class="k"&gt;WHERE&lt;/span&gt; 
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search_vector&lt;/span&gt; &lt;span class="o"&gt;@@&lt;/span&gt; &lt;span class="n"&gt;to_tsquery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'!Johnson&amp;amp;Kennedy&amp;amp;(space|history)'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
    &lt;span class="k"&gt;AND&lt;/span&gt; 
    &lt;span class="nv"&gt;"books"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;"published"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'2016-01-01'&lt;/span&gt; 
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;rank&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To get that additional &lt;code&gt;ts_rank&lt;/code&gt; column we need another Sequelize parameter: &lt;code&gt;attributes&lt;/code&gt;.  Attributes are the columns that get selected by Sequelize for return.  By default, all the fields are included.  Feathers-sequelize supports the &lt;code&gt;$select&lt;/code&gt; query parameter, so we need to protect that while appending our rank code.&lt;/p&gt;

&lt;p&gt;Add the following logic to your hook:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
  &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sequelize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//... from above example&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;//only bother with this if $select is used and has rank or no select at all (so rank is included by default)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$select&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rank&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;// remove the select so we can read it later as an attribute array&lt;/span&gt;
    &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;$select&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// then re-add it as a Sequelize column&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rankFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;Sequelize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s2"&gt;`ts_rank(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;searchColumn&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, to_tsquery`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;Sequelize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;literal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;:query)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rank&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sequelize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attributes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;selected&lt;/span&gt;
      &lt;span class="c1"&gt;// if there are selected fields in the query, use the array structure and add our rank column,&lt;/span&gt;
      &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;col&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;col&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rank&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;rankFunc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="c1"&gt;// if there are no selected fields, use the object structure that defaults to include all and then add our rank column&lt;/span&gt;
      &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;include&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rankFunc&lt;/span&gt;&lt;span class="p"&gt;]};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just like the rank modification, we are now modifying the &lt;code&gt;attribute&lt;/code&gt; field of &lt;code&gt;params.sequelize&lt;/code&gt;, telling Feathers to acknowledge any &lt;code&gt;$select&lt;/code&gt; options used as well as adding &lt;code&gt;$rank&lt;/code&gt; if need be.  &lt;code&gt;rank&lt;/code&gt; is also added as a default field if there are no &lt;code&gt;$select&lt;/code&gt; options.&lt;/p&gt;

&lt;p&gt;If you hit &lt;code&gt;http://localhost:3030/books?published[$gt]=2016&amp;amp;$search=%21Johnson%26Kennedy%26%28space%7Chistory%29&amp;amp;$select[0]=id&amp;amp;$select[1]=title&amp;amp;$select[2]=rank&lt;/code&gt; you can see that we can select fields including rank.  &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#37-sorting-by-rank"&gt;
  &lt;/a&gt;
  3.7. Sorting by rank
&lt;/h3&gt;

&lt;p&gt;Now that we have a rank column that doesn't interfere with our &lt;code&gt;$select&lt;/code&gt; options, we need to be able to sort by rank if we want.  In Feathers, the &lt;code&gt;$sort&lt;/code&gt; parameter is used to designate &lt;code&gt;DESC&lt;/code&gt; and &lt;code&gt;ASC&lt;/code&gt; by columns.  For example &lt;code&gt;?$sort[rank]=1&lt;/code&gt; will sort by ascending rank (least related).  Whereas &lt;code&gt;$sort[rank][]=-1&amp;amp;$sort[title][]=1&lt;/code&gt; will sort by rank, and if the ranks are the same, then alphabetically by title.&lt;/p&gt;

&lt;p&gt;Obviously, since our rank column is an injected column, it isn't automatically added to our &lt;code&gt;$sort&lt;/code&gt; options.  Let's fix that now.  Inside the &lt;code&gt;if(selected &amp;amp;&amp;amp; selected.includes('rank') || !selected){&lt;/code&gt; if statement, but below &lt;code&gt;: {include: [rankFunc]};&lt;/code&gt; add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rank&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

    &lt;span class="c1"&gt;//... the column selection stuff from above&lt;/span&gt;



    &lt;span class="c1"&gt;// ************* &lt;/span&gt;
    &lt;span class="c1"&gt;//only bother with adjusting the sort if rank was used as a column.&lt;/span&gt;
    &lt;span class="c1"&gt;// if no sort exists &amp;amp; rank is added as a column, use rank as default sort as opposed to ID or created_at&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$sort&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sequelize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Sequelize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;literal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rank DESC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// if there is a $sort present, then convert the rank column to sequelize literal.  This avoids an issue where ORDER by is expecting "books"."rank" instead of just "rank"&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$sort&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sequelize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;col&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;col&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rank&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Sequelize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;literal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`rank &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;col&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;col&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// ************* &lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What you can see is that the logic is very similar for the &lt;code&gt;order&lt;/code&gt; parameter of sequelize as for the &lt;code&gt;attributes&lt;/code&gt;.  But instead of an array of strings like &lt;code&gt;attributes&lt;/code&gt; uses, &lt;code&gt;order&lt;/code&gt; is an array of arrays like &lt;code&gt;[ [ 'rank', 'DESC' ], ['title', 'ASC'] ]&lt;/code&gt;.  And we only want to use the order when the rank column exists, otherwise, it'll throw an error.&lt;/p&gt;

&lt;p&gt;Now that the code is running, hit &lt;code&gt;http://localhost:3030/books?published[$gt]=2016&amp;amp;$search=%21Johnson%26Kennedy%26%28space%7Chistory%29&amp;amp;$select[0]=id&amp;amp;$select[1]=title&amp;amp;$select[2]=rank&amp;amp;$sort[rank][]=1&amp;amp;$sort[title][]=-1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And you should see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"total"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"limit"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"skip"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"A Concise History of the Netherlands"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"rank"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.409156&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Exploring Kennedy Space Center (Travel America's Landmarks)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"rank"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.997993&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We now have a functioning hook so we can search, sort, select against our &lt;code&gt;search_vector&lt;/code&gt; column!&lt;/p&gt;

&lt;p&gt;Congrats!&lt;/p&gt;

&lt;p&gt;If you have any questions or corrections, please comment below.  The code for this tutorial is available at &lt;a href="https://github.com/jamesvillarrubia/feathers-postgresql-search"&gt;https://github.com/jamesvillarrubia/feathers-postgresql-search&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>feathersjs</category>
      <category>node</category>
      <category>postgres</category>
    </item>
    <item>
      <title>What is Module?</title>
      <author>Umme Abira Azmary</author>
      <pubDate>Fri, 21 Jan 2022 21:19:35 +0000</pubDate>
      <link>https://dev.to/mouly22/what-is-module-3bab</link>
      <guid>https://dev.to/mouly22/what-is-module-3bab</guid>
      <description>&lt;p&gt;A module is a file containing Python definitions and statements which we can use in other Python programs.&lt;br&gt;
A module is simply a “Python file” which contains code(functions, classes,lists etc)  we can reuse in multiple Python programs. &lt;/p&gt;

&lt;p&gt;Modules in Python can be of two types:&lt;/p&gt;

&lt;p&gt;Built-in Modules.&lt;br&gt;
User-defined Modules.&lt;/p&gt;

&lt;p&gt;Modules allows us to use the functionality we need when we need it, and it keeps our code cleaner.&lt;/p&gt;

&lt;p&gt;The functions we import as part of a module stays in their own namespace.(A namespace is simply a space within which all names are different from each other). The same name can be reused in different namespaces but two objects can’t have the same name within a single namespace.&lt;/p&gt;

&lt;p&gt;For example, Many cities have a street called “Main Street”,&lt;br&gt;
It is okay if 'different' cities have that 'same' street name but it’s very confusing if two streets in the same city have that same name!&lt;/p&gt;

&lt;p&gt;Another example is the folder organization of file systems. One can have a file called "todo" in her work folder as well as her personal folder, but she knows which is which because of the folder it’s in; each folder has its own namespace for files.&lt;/p&gt;

&lt;p&gt;One important note, human names are not part of a namespace that applies uniqueness; that’s why governments have invented unique identifiers to assign to people, like passport numbers.&lt;/p&gt;

&lt;p&gt;In order to use Python modules, we have to import them into a Python program.&lt;/p&gt;

&lt;p&gt;1)If we import morecode in a code, that imports everything in morecode.py. To invoke a function f1 that is defined in morecode.py, we can write morecode.f1().&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;morecode.f1&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Note that we have to explicitly mention morecode again, to specify that we want the f1 function from the morecode namespace.If we just write f1(), python will look for an f1 that was defined in the current file, rather than in morecode.py.&lt;/p&gt;

&lt;p&gt;2)We can also give the imported module an alias (a different name, just for when we use it in our program). For example, after executing import morecode as mc, &lt;br&gt;
we would invoke f1 as mc.f1(). We have now given the morecode module the alias mc. Programmers often do this to make code easier to type.&lt;/p&gt;

&lt;p&gt;3)A third possibility for importing occurs when we only want to import SOME of the functionality from a module and we want to make those objects be part of the current module’s namespace. &lt;br&gt;
For example, we could write from morecode import f1. Then we could invoke f1 without referencing morecode again: f1().&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Freezed Kullanarak Flutter'da JSON Nasıl Ayrıştırılır?  💫 🌌 ✨</title>
      <author>Gülsen 🦋</author>
      <pubDate>Fri, 21 Jan 2022 21:10:08 +0000</pubDate>
      <link>https://dev.to/gulsenkeskin/freezed-kullanarak-flutterda-json-nasil-ayristirilir-10m6</link>
      <guid>https://dev.to/gulsenkeskin/freezed-kullanarak-flutterda-json-nasil-ayristirilir-10m6</guid>
      <description>&lt;p&gt;Bir önceki &lt;a href="https://dev.to/gulsenkeskin/dartflutter-da-json-ayristirma-104b"&gt;makalede&lt;/a&gt;, Dart'ta JSON'ı type-safe model sınıflarına nasıl ayrıştıracağımızı öğrendik.&lt;/p&gt;

&lt;p&gt;Ancak, çok sayıda model sınıfımız varsa, tüm JSON ayrıştırma kodunu elle yazmak zaman alıcı ve hataya açık hale gelir. Neyse ki, süreci otomatikleştirmek için &lt;a href="https://pub.dev/packages/json_serializable"&gt;json_serializable&lt;/a&gt; ve &lt;a href="https://pub.dev/packages/freezed"&gt;Freezed &lt;/a&gt; gibi kod oluşturma araçlarını kullanabiliriz .&lt;/p&gt;

&lt;p&gt;Bu yazıda, Freezed paketini kullanarak kod oluşturma (code generation) ile JSON verilerinin nasıl ayrıştırılacağını öğreneceğiz . &lt;/p&gt;

&lt;p&gt;Öncelikle pubspec.yaml dosyasına aşağıdaki bağımlılıkları eklememiz gerekiyor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dependencies:
  flutter:
    sdk: flutter
  freezed_annotation: ^1.1.0
  json_annotation: ^4.4.0

dev_dependencies:
  build_runner: ^2.1.7
  freezed: ^1.1.1
  json_serializable: ^6.1.4

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;json_serializable&lt;/code&gt;: Dart sınıflarına açıklama ekleyerek JSON'a ve JSON'dan dönüştürme için otomatik olarak kod oluşturun&lt;/p&gt;

&lt;p&gt;&lt;code&gt;json_annotation&lt;/code&gt;: "json_serializable" paketi aracılığıyla JSON kodu oluşturmayı destekleyen sınıflar ve yardımcı işlevler sağlar.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;freezed&lt;/code&gt;: basit bir API ile karmaşık kullanım durumlarını işleyebilen güçlü bir kod oluşturucu.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;freezed_annotation&lt;/code&gt;: freezed tarafından kullanılan açıklamaları tanımlar.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;build_runner&lt;/code&gt;: Dart dosyaları oluşturabilen bağımsız bir derleme paketidir.&lt;/p&gt;

&lt;p&gt;JSON ayrıştırma kodunu yalnızca json_serializable ile (freezed kullanmadan) oluşturabilirsiniz. Ancak, freezed daha güçlüdür ve basit bir API ile karmaşık kullanım durumlarının üstesinden gelebilir.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%C3%B6rnek-bir-json-belgesi"&gt;
  &lt;/a&gt;
  Örnek bir JSON belgesi
&lt;/h2&gt;

&lt;p&gt;İşleri önceki makaleyle uyumlu tutmak için aynı JSON örneğini yeniden kullanacağız:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "name": "Pizza da Mario",
  "cuisine": "Italian",
  "year_opened": 1990,
  "reviews": [
    {
      "score": 4.5,
      "review": "The pizza was amazing!"
    },
    {
      "score": 5.0,
      "review": "Very friendly staff, excellent service!"
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Daha önce yazdığımız Restaurant ve Review model sınıfları şunlardır:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Restaurant {
  Restaurant({
    required this.name,
    required this.cuisine,
    this.yearOpened,
    required this.reviews,
  });
  final String name;
  final String cuisine;
  final int? yearOpened;
  final List&amp;lt;Review&amp;gt; reviews;

  factory Restaurant.fromMap(Map&amp;lt;String, dynamic&amp;gt; data) {
    final name = data['name'] as String;
    final cuisine = data['cuisine'] as String;
    final yearOpened = data['year_opened'] as int?;
    final reviewsData = data['reviews'] as List&amp;lt;dynamic&amp;gt;?;
    final reviews = reviewsData != null
        ? reviewsData.map((reviewData) =&amp;gt; Review.fromMap(reviewData)).toList()
        : &amp;lt;Review&amp;gt;[];
    return Restaurant(
      name: name,
      cuisine: cuisine,
      yearOpened: yearOpened,
      reviews: reviews,
    );
  }

  Map&amp;lt;String, dynamic&amp;gt; toMap() {
    return {
      'name': name,
      'cuisine': cuisine,
      if (yearOpened != null) 'year_opened': yearOpened,
      'reviews': reviews.map((review) =&amp;gt; review.toMap()).toList(),
    };
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Review {
  Review({required this.score, this.review});
  final double score;
  // nullable - assuming the review may be missing
  final String? review;

  factory Review.fromMap(Map&amp;lt;String, dynamic&amp;gt; data) {
    final score = data['score'] as double;
    final review = data['review'] as String?;
    return Review(score: score, review: review);
  }

  Map&amp;lt;String, dynamic&amp;gt; toMap() {
    return {
      'score': score,
      if (review != null) 'review': review,
    };
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Görüldüğü gibi çok fazla kod var ve birçok faklı modelimiz varsa bu yaklaşım ölçeklenemez.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#freezed-ile-model-s%C4%B1n%C4%B1flar%C4%B1"&gt;
  &lt;/a&gt;
  Freezed ile Model Sınıfları
&lt;/h2&gt;

&lt;p&gt;Hayatımızı kolaylaştırmak için, Restaurant ve Review model sınıflarımızı tanımlamak için Freezed'i kullanalım.&lt;/p&gt;

&lt;p&gt;Restaurant Review modeline bağlı olduğundan, Review sınıfıyla başlayalım:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// review.dart
// 1. import freezed_annotation
import 'package:freezed_annotation/freezed_annotation.dart';

// 2. 'part' dosyalarını ekle
part 'review.freezed.dart';
part 'review.g.dart';

// 3. @freezed annotation ekle
@freezed
// 4. mixin ile bir sınıf tanımlayın
class Review with _$Review {
  // 5. bir factory constructor tanımlayın
  factory Review({
    // 6. tüm argümanları/özellikleri listele
    required double score,
    String? review,
  }) = _Review;

  // 7. json'dan ayrıştırılacak başka bir factory constructor tanımlayın
  factory Review.fromJson(Map&amp;lt;String, dynamic&amp;gt; json) =&amp;gt; _$ReviewFromJson(json);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Aynısını Restaurant sınıfı için de yapalım:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// restaurant.dart
import 'package:freezed_annotation/freezed_annotation.dart';
// bağımlı olduğumuz diğer modelleri içe aktarın
import 'review.dart';

part 'restaurant.freezed.dart';
part 'restaurant.g.dart';

@freezed
class Restaurant with _$Restaurant {
  factory Restaurant({
    required String name,
    required String cuisine,

    @JsonKey(name: 'year_opened') int? yearOpened,
    // not: varsayılan değer olarak boş bir liste kullanmak
    @Default([]) List&amp;lt;Review&amp;gt; reviews,
  }) = _Restaurant;

  factory Restaurant.fromJson(Map&amp;lt;String, dynamic&amp;gt; json) =&amp;gt;
      _$RestaurantFromJson(json);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hem Restaurant hem de Review sınıflarının, ihtiyacımız olan tüm argümanları listeleyen bir factory constructor'a sahip olduğuna dikkat edin, ancak ilgili özellikleri bildirmedik.&lt;/p&gt;

&lt;p&gt;Aslında kodumuz eksik ve aşağıdaki gibi hatalar üretecek:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Target of URI doesn't exist: 'restaurant.freezed.dart'.
Try creating the file referenced by the URI, or Try using a URI for a file that does exist.

The name '_Restaurant' isn't a type and can't be used in a redirected constructor.
Try redirecting to a different constructor.

The method '_$RestaurantFromJson' isn't defined for the type 'Restaurant'.
Try correcting the name to the name of an existing method, or defining a method named '_$RestaurantFromJson'.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#kod-olu%C5%9Fturucuyu-%C3%A7al%C4%B1%C5%9Ft%C4%B1rma"&gt;
  &lt;/a&gt;
  Kod oluşturucuyu çalıştırma
&lt;/h2&gt;

&lt;p&gt;Eksik kodu oluşturmak için bunu konsolda çalıştırabiliriz:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;flutter pub run build_runner build --delete-conflicting-outputs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bu, aşağıdaki çıktıyı üretecektir:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[INFO] Generating build script...
[INFO] Generating build script completed, took 419ms

[INFO] Initializing inputs
[INFO] Reading cached asset graph...
[INFO] Reading cached asset graph completed, took 55ms

[INFO] Checking for updates since last build...
[INFO] Checking for updates since last build completed, took 428ms

[INFO] Running build...
[INFO] 1.3s elapsed, 0/2 actions completed.
[INFO] Running build completed, took 2.1s

[INFO] Caching finalized dependency graph...
[INFO] Caching finalized dependency graph completed, took 27ms

[INFO] Succeeded after 2.1s with 5 outputs (5 actions)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Proje gezginine bakarsak, bazı yeni dosyalar bulabiliriz:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;restaurant.dart
restaurant.freezed.dart
restaurant.g.dart
review.dart
review.freezed.dart
review.g.dart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Her model sınıfı için kod oluşturucu şunları ekler:&lt;/p&gt;

&lt;p&gt;• toString() yöntemi&lt;br&gt;
• == operatörü&lt;br&gt;
• hashCode getter değişkeni&lt;br&gt;
• copyWith() yöntemi&lt;br&gt;
• toJson() yöntemi&lt;/p&gt;

&lt;p&gt;Ve eğer model sınıflarımızdaki özelliklerden herhangi birini değiştirmemiz gerekirse, onların factory constructor'larını güncellememiz yeterlidir:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@freezed
class Review with _$Review {
  factory Review({
    // update any properties as needed
    required double score,
    String? review,
  }) = _Review;

  factory Review.fromJson(Map&amp;lt;String, dynamic&amp;gt; json) =&amp;gt; _$ReviewFromJson(json);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@freezed
class Restaurant with _$Restaurant {
  factory Restaurant({
    // update any properties as needed
    required String name,
    required String cuisine,
    @JsonKey(name: 'year_opened') int? yearOpened,
    @Default([]) List&amp;lt;Review&amp;gt; reviews,
  }) = _Restaurant;

  factory Restaurant.fromJson(Map&amp;lt;String, dynamic&amp;gt; json) =&amp;gt;
      _$RestaurantFromJson(json);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ardından kod oluşturucuyu tekrar çalıştırabiliriz ve gerisini Freezed halleder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;flutter pub run build_runner build --delete-conflicting-outputs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Artık birkaç satırlık kodda güvenli , değişmez model sınıfları tanımlayabilir ve tek bir komut çalıştırarak tüm JSON serileştirme kodunu oluşturabiliriz.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#json-ek-a%C3%A7%C4%B1klamalar%C4%B1"&gt;
  &lt;/a&gt;
  JSON ek açıklamaları
&lt;/h2&gt;

&lt;p&gt;Freezed , kod oluşturucunun modellerimizi nasıl işlediğini özelleştirmemize izin veren birçok ek açıklamayı destekler .&lt;/p&gt;

&lt;p&gt;En kullanışlı olanlar &lt;code&gt;@JsonKey&lt;/code&gt; ve &lt;code&gt;@Default&lt;/code&gt; dır&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@freezed
class TMDBMovieBasic with _$TMDBMovieBasic {
  factory TMDBMovieBasic({
    @JsonKey(name: 'vote_count') int? voteCount,
    required int id,
    @Default(false) bool video,
    @JsonKey(name: 'vote_average') double? voteAverage,
    required String title,
    double? popularity,
    @JsonKey(name: 'poster_path') required String posterPath,
    @JsonKey(name: 'original_language') String? originalLanguage,
    @JsonKey(name: 'original_title') String? originalTitle,
    @JsonKey(name: 'genre_ids') List&amp;lt;int&amp;gt;? genreIds,
    @JsonKey(name: 'backdrop_path') String? backdropPath,
    bool? adult,
    String? overview,
    @JsonKey(name: 'release_date') String? releaseDate,
  }) = _TMDBMovieBasic;

  factory TMDBMovieBasic.fromJson(Map&amp;lt;String, dynamic&amp;gt; json) =&amp;gt;
      _$TMDBMovieBasicFromJson(json);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Freezed'e hangi anahtarların hangi özelliklerle eşlendiğini söylemek için &lt;code&gt;@JsonKey&lt;/code&gt; ek açıklamasını kullanabiliriz.&lt;/p&gt;

&lt;p&gt;Null yapılamayan belirli bir özellik için varsayılan bir değer belirtmek istiyorsak &lt;code&gt;@Default&lt;/code&gt; ek açıklamasını kullanabiliriz.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#kod-olu%C5%9Fturma-code-generation-dezavantajlar%C4%B1"&gt;
  &lt;/a&gt;
  Kod Oluşturma (Code Generation) Dezavantajları
&lt;/h2&gt;

&lt;p&gt;Kod oluşturmanın bazı açık faydaları vardır ve çok sayıda model sınıfınız varsa, gitmeniz gereken yol budur.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ama bazı dezavantajları da vardır:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bir sürü ekstra kod&lt;/strong&gt;&lt;br&gt;
Restaurant ve Review model sınıflarımız çok basittir, ancak oluşturulan kod 450 satır yer kaplar. Bu, çok sayıda model sınıfınız varsa hızla eklenir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kod oluşturma yavaştır&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Dart'ta kod oluşturma oldukça yavaştır.&lt;/p&gt;

&lt;p&gt;Bunu azaltmanın yolları olsa da, codegen (code generation) büyük projelerde geliştirme iş akışınızı önemli ölçüde yavaşlatabilir.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#olu%C5%9Fturulan-dosyalar-gite-eklenmeli-mi"&gt;
  &lt;/a&gt;
  Oluşturulan dosyalar git'e eklenmeli mi?
&lt;/h2&gt;

&lt;p&gt;Bir ekipte çalışıyorsanız ve oluşturulan dosyaları git'e bağlıyorsanız, çekme isteklerini gözden geçirmek zorlaşır.&lt;/p&gt;

&lt;p&gt;Ancak bunu yapmazsanız, proje varsayılan olarak çalıştırılabilir durumda değildir ve:&lt;/p&gt;

&lt;p&gt;her ekip üyesinin codegen adımını çalıştırmayı hatırlaması gerekir (potansiyel olarak tutarsızlıklara yol açar)&lt;br&gt;
uygulamayı oluşturmak için özel bir CI oluşturma adımı gereklidir&lt;br&gt;
Ve oluşturulan dosyaların git'e eklenip eklenmeyeceği konusunda henüz bir fikir birliği yoktur.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sonu%C3%A7"&gt;
  &lt;/a&gt;
  Sonuç
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;JSON serileştirme için çeşitli seçenekleri araştırdık.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;En iyi yaklaşımı seçmenize yardımcı olacak bazı yönergeler şunlardır:&lt;/p&gt;

&lt;p&gt;Birkaç küçük model sınıfınız varsa, JSON ayrıştırma kodunu elle yazabilirsiniz.&lt;br&gt;
Birçok model sınıfınız varsa, Freezed sizin için heavy-lifting yapabilir.&lt;br&gt;
işleri daha da hızlandırmak için, VS Code için Json to Dart Model uzantısını da kullanabilirsiniz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codewithandrea.com/articles/parse-json-dart-codegen-freezed/#running-the-code-generator"&gt;resource&lt;/a&gt;&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
      <category>codegeneration</category>
      <category>json</category>
    </item>
    <item>
      <title>10 Commandments for Programmers</title>
      <author>𝗗𝗲𝗿𝗶𝗰𝗸 𝗔𝗹𝗮𝗻𝗴𝗶 ⚡️</author>
      <pubDate>Fri, 21 Jan 2022 20:30:46 +0000</pubDate>
      <link>https://dev.to/xsavitar/10-commandments-for-programmers-1h9n</link>
      <guid>https://dev.to/xsavitar/10-commandments-for-programmers-1h9n</guid>
      <description>&lt;p&gt;Do your best to follow these 10 commandments 👇🏽&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Make Googling a habit or thou shall make very little progress in programming.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If it works, do not touch it unless you know what you are doing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript might be well spoken of but it is not your friend.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Never debug in production.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Argue not about programming languages on Twitter.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do not claim you know CSS. It is a lie, we all know.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Eat in the morning before you start programming. Otherwise you may not eat again.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No matter how sure you are, always clear your browser cache and try again.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is easier to stay up till 6:00 AM than to wake up at 6:00 AM. Be discipline with your sleep cycle.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Always hide your wifi network SSID. There are others who are more dangerous than you think.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Did you enjoy these commandments? Do you want to write yours up or contribute to these ones, feel free &amp;amp; hit me up on Twitter: &lt;a href="https://twitter.com/xSavitar"&gt;@xSavitar&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>productivity</category>
      <category>opensource</category>
    </item>
    <item>
      <title>My Personal Website</title>
      <author>Corey</author>
      <pubDate>Fri, 21 Jan 2022 20:18:20 +0000</pubDate>
      <link>https://dev.to/coreystevens/my-personal-website-ip3</link>
      <guid>https://dev.to/coreystevens/my-personal-website-ip3</guid>
      <description>&lt;p&gt;Yooo,&lt;/p&gt;

&lt;p&gt;Not my usual post, but check out my personal website which shows past projects and blogs/tutorials! I'll always be adding to it!&lt;/p&gt;

&lt;p&gt;Im always happy to hear feedback on it!!(good or bad)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#coreystevensxyz"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="//coreystevens.xyz"&gt;coreystevens.xyz&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>career</category>
      <category>programming</category>
    </item>
    <item>
      <title>Django REST Framework - WebSocket</title>
      <author>Burak Yılmaz</author>
      <pubDate>Fri, 21 Jan 2022 19:47:53 +0000</pubDate>
      <link>https://dev.to/buurak/django-rest-framework-websocket-3pb6</link>
      <guid>https://dev.to/buurak/django-rest-framework-websocket-3pb6</guid>
      <description>&lt;p&gt;In this article we will build an application which uses JWT Authentication that communicates to websocket with Django REST Framework. The main focus of this article is send data to websocket from out of consumer.&lt;/p&gt;

&lt;p&gt;Before we start you can find the source code &lt;a href="https://github.com/buurak/django_websocket"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have two requests to same endpoint GET and POST, whenever a request comes to endpoint we will send messages to websocket.&lt;/p&gt;

&lt;p&gt;This is our &lt;code&gt;models.py&lt;/code&gt;, our Message model looks like down below which is very simple.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_user_model&lt;/span&gt;

&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_user_model&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSONField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CASCADE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configurations"&gt;
  &lt;/a&gt;
  Configurations
&lt;/h2&gt;

&lt;p&gt;We need a &lt;code&gt;routing.py&lt;/code&gt; file which includes url's of related app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;re_path&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;consumers&lt;/span&gt;

&lt;span class="n"&gt;websocket_urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;re_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;'msg/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consumers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ChatConsumer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_asgi&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we need another &lt;code&gt;routing.py&lt;/code&gt; file into project's core directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;websocket.middlewares&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WebSocketJWTAuthMiddleware&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;channels.routing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ProtocolTypeRouter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;URLRouter&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.asgi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_asgi_application&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;websocket&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;routing&lt;/span&gt;

&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"DJANGO_SETTINGS_MODULE"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"django_ws.settings"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ProtocolTypeRouter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"http"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;get_asgi_application&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="s"&gt;"websocket"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;WebSocketJWTAuthMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;URLRouter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;routing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;websocket_urlpatterns&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see here a middleware is used, what this middleware does is control the authentication process, if you follow this &lt;a href="https://channels.readthedocs.io/en/stable/topics/authentication.html#authentication"&gt;link&lt;/a&gt; you will see that Django have support for standard Django authentication, since we are using JWT Authentication a custom middleware is needed. In this project &lt;a href="https://django-rest-framework-simplejwt.readthedocs.io/en/latest/"&gt;Rest Framework SimpleJWT&lt;/a&gt; was used, when create a connection we are sending token with a query-string which is NOT so secure. We set user to scope as down below. &lt;br&gt;
&lt;code&gt;middlewares.py&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urllib.parse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;parse_qs&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;channels.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;database_sync_to_async&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_user_model&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AnonymousUser&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework_simplejwt.tokens&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AccessToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TokenError&lt;/span&gt;

&lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_user_model&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;database_sync_to_async&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoesNotExist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;AnonymousUser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WebSocketJWTAuthMiddleware&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;parsed_query_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_qs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"query_string"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parsed_query_string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s"&gt;"token"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;access_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AccessToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"user"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;get_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;access_token&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"user_id"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;TokenError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"user"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AnonymousUser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Last but not least settings.py file, we are using Redis as channel layer therefore we need to start a Redis server, we can do that with docker&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker run -p 6379:6379 -d redis:5&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;settings.py&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;ASGI_APPLICATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'django_ws.routing.application'&lt;/span&gt;

&lt;span class="n"&gt;CHANNEL_LAYERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"BACKEND"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"channels_redis.core.RedisChannelLayer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"CONFIG"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"hosts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;'0.0.0.0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6379&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#consumers"&gt;
  &lt;/a&gt;
  Consumers
&lt;/h2&gt;

&lt;p&gt;Here is our &lt;code&gt;consumer.py&lt;/code&gt; file, since ChatConsumer is asynchronous when a database access is needed, related method needs a &lt;code&gt;database_sync_to_async&lt;/code&gt; decorator.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;websocket/consumer.py&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;channels.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;database_sync_to_async&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;channels.generic.websocket&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AsyncWebsocketConsumer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AnonymousUser&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;websocket.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ChatConsumer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AsyncWebsocketConsumer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;groups&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"general"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"user"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;AnonymousUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"user"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;
            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel_layer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;-message"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;channel_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_info_to_user_group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text_data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_last_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;last_msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_last_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;last_msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"status"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text_data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;last_msg&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;database_sync_to_async&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_last_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#views"&gt;
  &lt;/a&gt;
  Views
&lt;/h2&gt;

&lt;p&gt;As I mentioned at previous step our consumer is asynchronous we need to convert methods from async to sync just like the name of the function&lt;/p&gt;

&lt;p&gt;&lt;code&gt;views.py&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;asgiref.sync&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;async_to_sync&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;channels.layers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_channel_layer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.permissions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;IsAuthenticated&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.response&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;APIView&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MessageSendAPIView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;APIView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;permission_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IsAuthenticated&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;channel_layer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_channel_layer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;async_to_sync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;channel_layer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group_send&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;
            &lt;span class="s"&gt;"general"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"send_info_to_user_group"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"status"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"done"&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;"status"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTP_200_OK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                                     &lt;span class="s"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;
        &lt;span class="n"&gt;socket_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Message with id &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; was created!"&lt;/span&gt;
        &lt;span class="n"&gt;channel_layer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_channel_layer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;async_to_sync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;channel_layer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group_send&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;
            &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;-message"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"send_last_message"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                           &lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;socket_message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;"status"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTP_201_CREATED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this view's GET request we are sending message to channel's "general" group so everyone on this group will receive that message, if you check the &lt;code&gt;consumers.py&lt;/code&gt; you will see that our default group is "general", on the other hand in POST request we are sending our message to a specified group in an other saying this message is only sent to a group with related user's id which means only this user receives the message.&lt;/p&gt;

&lt;p&gt;Up to this point everything seems fine but we can't find out if it actually works fine until we try, so let's do it. I am using a Chrome &lt;a href="https://chrome.google.com/webstore/detail/websocket-test-client/fgponpodhbmadfljofbimhhlengambbn"&gt;extension&lt;/a&gt; to connect websocket.&lt;/p&gt;

&lt;p&gt;Result of GET request&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uE-wFCOE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kwp06wnlza2ielb6pcbx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uE-wFCOE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kwp06wnlza2ielb6pcbx.png" alt="Result of GET request" width="880" height="349"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;POST request&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lJ8GFo1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ryzw0dt8klz67uckdrcs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lJ8GFo1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ryzw0dt8klz67uckdrcs.png" alt="POST request" width="880" height="349"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;NOTE: Python3.10.0 have compatibility issue with asyncio be sure not using this version.&lt;/p&gt;

</description>
      <category>python</category>
      <category>django</category>
      <category>websocket</category>
    </item>
    <item>
      <title>Fun with Git aliases</title>
      <author>Vishal Raj</author>
      <pubDate>Fri, 21 Jan 2022 19:40:31 +0000</pubDate>
      <link>https://dev.to/vishalraj82/fun-with-git-aliases-4o48</link>
      <guid>https://dev.to/vishalraj82/fun-with-git-aliases-4o48</guid>
      <description>&lt;p&gt;Git is one of the most popular VCS (version control system). In this post we will discuss about git aliases and how to use them to their benefits.&lt;/p&gt;

&lt;p&gt;So what are git aliases ? In simple words, aliases are custom shortcuts for executing regular git commands. These shortcuts are specified in the file &lt;code&gt;$HOME/.gitconfig&lt;/code&gt;. Lets start with some examples.&lt;/p&gt;

&lt;p&gt;In order to see the current status, the command would be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git status
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alternatively we can create an alias&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; alias.st status
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now, to see the git status we can run the command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git st
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similarly, more and more aliases can be added for easier and quick execution of commonly used git commands. Lets add some more aliases.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; alias.br branch
git config &lt;span class="nt"&gt;--global&lt;/span&gt; alias.ci commit
git config &lt;span class="nt"&gt;--global&lt;/span&gt; alias.co checkout
git cofnig &lt;span class="nt"&gt;--global&lt;/span&gt; alias.pr pull &lt;span class="nt"&gt;--rebase&lt;/span&gt;
git config &lt;span class="nt"&gt;--global&lt;/span&gt; alias.pf push &lt;span class="nt"&gt;--force&lt;/span&gt;
git config &lt;span class="nt"&gt;--global&lt;/span&gt; alias.rsh reset &lt;span class="nt"&gt;--hard&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well, until now we have seen creating aliases for simple git commands. But what if you want to run multiple git commands in single alias. Functions to the rescue. &lt;/p&gt;

&lt;p&gt;Lets see an example situation. Let say you need to switch branch, but you also have staged changes. So you want to stash the changes  before switching to new branch, and pull the latest changes as well. But for this, we will edit the file &lt;code&gt;$HOME/.gitconfig&lt;/code&gt; and add new entry under the tab &lt;code&gt;[alias]&lt;/code&gt;. I am a &lt;code&gt;vim&lt;/code&gt; guy, but you can use any editor of your choice.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    st &lt;span class="o"&gt;=&lt;/span&gt; status
    br &lt;span class="o"&gt;=&lt;/span&gt; branch
    co &lt;span class="o"&gt;=&lt;/span&gt; checkout
    &lt;span class="nb"&gt;pr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; pull &lt;span class="nt"&gt;--rebase&lt;/span&gt;
    pf &lt;span class="o"&gt;=&lt;/span&gt; push &lt;span class="nt"&gt;--force&lt;/span&gt;
    rsh &lt;span class="o"&gt;=&lt;/span&gt; reset &lt;span class="nt"&gt;--hard&lt;/span&gt;
    cop &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"!f() { br=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;git br &lt;span class="nt"&gt;--show-current&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="s2"&gt;; git stash save &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Stash from branch &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;br&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;; git fetch; git co &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;};  f"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The shortcut &lt;code&gt;cop&lt;/code&gt; can also be extended. Lets extend the above case with situation that when you switch branch, you also want to delete the current branch. But why would you want so ? Lets say that you branched out from &lt;code&gt;master&lt;/code&gt; for a minor bug fix. After you push the &lt;code&gt;bug-fix&lt;/code&gt; branch to remote and submit it for review, you want to purge it from local, after switching back to &lt;code&gt;master&lt;/code&gt; branch. Lets see&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
    copd &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"!f() { br=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;git br &lt;span class="nt"&gt;--show-current&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="s2"&gt;; git stash save &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Stash from branch &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;br&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;; git fetch; git co &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;; git br -d &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;br&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;; };  f"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And how to use it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;vishalr@ubuntu &lt;span class="o"&gt;(&lt;/span&gt;bug-fix-branch&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; git br
&lt;span class="k"&gt;*&lt;/span&gt; bug-fix-branch
master
vishalr@ubuntu &lt;span class="o"&gt;(&lt;/span&gt;bug-fix-branch&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; git copd master
vishalr@ubuntu &lt;span class="o"&gt;(&lt;/span&gt;master&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt; git br
&lt;span class="k"&gt;*&lt;/span&gt; master
vishalr@ubunt &lt;span class="o"&gt;(&lt;/span&gt;master&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;$&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that you have learnt, go ahead and create git aliases of your choice and have fun.&lt;/p&gt;

</description>
      <category>git</category>
      <category>development</category>
      <category>hacks</category>
      <category>guide</category>
    </item>
    <item>
      <title>Why developers need to know about Vim</title>
      <author>petronijevicm</author>
      <pubDate>Fri, 21 Jan 2022 19:13:04 +0000</pubDate>
      <link>https://dev.to/petronijevicm/why-developers-need-to-know-about-vim-5hkd</link>
      <guid>https://dev.to/petronijevicm/why-developers-need-to-know-about-vim-5hkd</guid>
      <description>&lt;p&gt;Vim is a text editor that has been developed for more than 20 years now. It was designed to be used with a keyboard, and it is highly configurable.&lt;/p&gt;

&lt;p&gt;Vim is an extremely powerful text editor that can be used for many purposes. It's an old-school editor, but it's still one of the most popular editors among developers. Vim can be used as a simple notepad, or as an advanced software development kit (SDK). It can be installed as extention for Vscode fans such as myself, as well as most other popular text editors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fair Warining.&lt;/strong&gt; Vim has a &lt;em&gt;steep&lt;/em&gt; learning curve and it takes some time to get accustomed to its interface. However, once you learn how to use it properly, you will find out that Vim is one of the most reliable editors in existence today.&lt;br&gt;
&lt;u&gt;&lt;br&gt;
My story with vim.&lt;br&gt;
&lt;/u&gt;&lt;br&gt;
I was talking with a friend and he mentioned this tool called Vim. I had never heard about it before so I asked him to tell me more. He told me that it's a text editor and it can help you edit code faster. It's available for Windows, Linux and Mac.&lt;/p&gt;

&lt;p&gt;I downloaded and tried it out on my laptop to see if it would be useful for me. As a productivity junkie, I always like to try new shiny tools as they come out as they might be helpful in my work! Well, Vim wasn't as easy as I thought but after some time of using the tool, I got the hang of it and now i feel obliged to share it!&lt;/p&gt;

&lt;p&gt;Now, why did i say that developers need to know about vim? Productivity! It is &lt;em&gt;insane&lt;/em&gt; how much more you can get done using it and altho hard to learn, every moment you spend getting to know it better will pay it`s dividents in forseeable future. In my personal experience, i am able to type approximately 30% faster! &lt;br&gt;
Just imagine how much faster you would be able to ship your code. In conjunction i would also recommend using ai autocomplete assistant like tabnine.&lt;/p&gt;

&lt;p&gt;If you are open minded and would like to try it out, &lt;a href="https://vim.org"&gt;click me&lt;/a&gt; for more information! Cheers.&lt;/p&gt;

</description>
      <category>vim</category>
      <category>vscode</category>
      <category>productivity</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Blockchain Native-Game Engines</title>
      <author>Arefin</author>
      <pubDate>Fri, 21 Jan 2022 19:10:13 +0000</pubDate>
      <link>https://dev.to/arefin12345/blockchain-native-game-engines-3n7i</link>
      <guid>https://dev.to/arefin12345/blockchain-native-game-engines-3n7i</guid>
      <description>&lt;p&gt;Traditional game engines are amazing tools which are used by game developers, artists, designers, storytellers and programmers to create beautiful, fun interactive worlds where you can spend hours entertaining yourselves. Most of us have spent so much of our childhood immersed into this worlds and created memories and experiences which will last for a lifetime. But things are about to change. As with everything else that crypto touches, it's going to revolutionize the way we build and play games and completely disrupt this industry. Let me show you how.&lt;br&gt;
In the early days of video game development, games were created by programming the hardware. We had arcade machines which were constructed to run one and only one game at a time. Then personal computing and general computing hardware seperated software and hardware. Many softwares can now run on same hardware. Game studios started building softwares games that would run on specific hardwares. Then as game studios started being commercially successful and had plans to make a lot of games, it became obvious that building a game engine was a necessity. Game engine allows for developers to quickly prototype and collaborate with artists and designers to create levels and worlds which can be easily modified before deploying a final build for anyone to play. Many game studios eventually created really sophisticated game engines, which gave their games a distinct look and feel. Fans also anticipated games from a particular game engine, because they knew what will be coming out of this engines will be nothing short of extraordinary. So this game engines made this studios lots of money, gave them a moat over competitors which incentivized them to be closed-sourced. After that it was pretty much given, that if you are building your own gaming studio, you must first build the game engine. Studios would put millions and years building out this game engines, before they even started working on any game. Soon after, this companies started licensing out their built-out game engines to other smaller gaming studios, so they don't have to worry about building it out themselves, and just focus on building games.&lt;br&gt;
Then in 2005, Unity was launched. Unity was released as an open-source game engine meant to democratize access and disrupt the license raj of previous incumbents. It was also the first game engine I used to learn making video games along with so many others like me. This new indie and student developer focussed engines, made game development much much easier for better or worse. It also made indie game development a pathway for many aspiring game developers who wanted to pave their own way instead of just joining another AAA game studio. For the past decade, there are so many game engines, graphics creation tools, animation tools, marketplaces of game assets, etc. All of this umbrella of options for game developers has made the gaming industry the biggest industry out there in entertainment.&lt;br&gt;
So now we had closed-sourced game engines, to open/licensed game engines to open source game engines. But now we have a unique opportunity to create the 4th paradigm in the gaming industry. A crypto-native game engine.&lt;br&gt;
What will be different about a crypto-native game engine?&lt;br&gt;
Crypto-native game engines are the critical infrastructure that will build different metaverses. Every major tech company and gaming studio like Facebook, Epic, Microsoft have announced they are venturing into metaverse. A metaverse is a difficult term to define, but eventually it will encompass everything, from play to work to leisure to travel. And every aspect of it will be hand-built by builders from all over the world. But ofcourse you cannot expect the traditional companies venturing into this space to get or build what the cypherpunks have been dreaming of. It's a gold rush and everyone wants a piece of the metaverse, but if we want to build this correctly it has to be built from the ground up. This is where game engines which abide by and facilitate the tenets of crypto will win over everything else. And it is inevitable that crypto-native game engines will win, because they are just superior for every rational actor getting into this space. It's not a zero-sum game. That is why DeFi (Decentralized Finance) is winning over traditional finance, Bitcoin is winning over nation states. It'e because this game engines will be open-source, they will be owned by game developers across the world, forked and expanded upon by them. This game engines will have the crypto economic layer as their base, and builders across different domains will collaborate and pay each other using this base layer, which will be Ethereum or some other blockchain. It will allow for interoperability amongst different fields and domains, tools for efficient collaboration and coordination, permissionless, ownership-first mentality, persistence using a decentralized ledger with very strong sybil resistance built-in and the most critical feature about them will be modular composability. Due to all of this features, even big players in the space have to follow this principles, otherwise it's hard for them to participate in the crypto market and make any profits. Anyone trying to create walled gardens will lose out. This is not to say that walled gardens won't have any place in the metaverse, there will be lots of them, but they will be community first with an easy exit option to anyone playing in this gardens, which is really difficult thing to do in today's tech and gaming ecosystem.&lt;br&gt;
There are 3 important entities in this blockchain-based system that makes the system whole: Builder, Player and Speculator. Builders are programmers, designers and artists who will build game worlds and components, Players will play the games built by them and Speculators are the investors and gamblers who will stake their wealth on builders based on players who are the ultimate judge/signals of which builders are successful and good. In the old way, the builders worked for investors/speculators, building them worlds which were designed in a way to exploit players out of their dollars. In the new way, the role of speculators although important will be to just observe and not try to control the narrative to gain advantage.&lt;br&gt;
Here's a tiny example of a game that explains the stark differences between the old and new system clearly. I am a game developer who wants to build a game where a knight fights a dragon with a sword. There are 3 main components in this scene, the knight, dragon and sword. The game devs and artist will create the assets, program the behaviour and the designer and author of game will integrate them in the game world and make the game playable and fun. In the old way, I will hire artists to create the assets which will be my game's IP. The code of the game will be closed and for allowing modding for external devs will require additional effort. I will have to follow the rules set by the centralized marketplaces like Steam. I will not be able to use code/assets since there's no standardized way of accessing other assets to make the game development process faster and simpler. So basically creating a game today breaks all the important principles that crypto follows. But if I choose to follow the cyperpunk principles, it will not only make my building process more efficient, it will set my game up for future expansion, give players and artists proper ownership into my IP but also give everyone involved a way to participate in my journey of game development from the beginning if they desire so. But to set all of this up currently would take lots of engineering effort. To make this process easier for every new builder, there's an opportunity and need to create a game engine which facilitates all the process and bakes in the principles in everything we build. This kind of game engine is the new paradigm, the most critical infrastructure for the future of a good metaverse and an important public good which should be made available for all.&lt;br&gt;
Composability - Crypto game engines allow devs to create blockchain-based smart contracts which represent independant parts of a game composed together just like lego pieces. This pieces will be of various forms and will be interoperable to fit with other pieces to form a whole game. Currently the way games are developed, they are siloed worlds that are confined within themselves. Players have to go in the world, play and learn skills, but there isn't a way to transfer the elements/skills inside the game to another game. This gives open world games like GTA strong moats, as gamers need to dedicate their entire time, undivided attention and money inside a single game. There's no doubt the absolutely massive world build by Rockstar is really entertaining. But imagine if this world was built using independant components by different builders all over the world instead of the few hundred that work at the studio. Composable smart contracts allow all of this game components needed in a game to be extracted out and remain an independent entity on the blockchain. This components can then be utilized by a particular game contract.&lt;br&gt;
One important thing to consider when creating this separable, independant components is how interoperable they are with each other. By default I think every component should have some dimensions about it that can communicate with the others because they are on blockchain. But in order for every feature of the component to be operated, they should abide by some standards set by the community so game devs have easier time integrating them and don't confuse the players owning or interacting with this components. In-game components should feel consistent with each other no matter which game they belong to.&lt;br&gt;
In our game example, the "knight" will use the player contract which has a global state owned by the player itself. This means, that the player can use it's global state which is independant of the game and also the game itself will modify the player state. The player can use his personal wallet in which he owns certain components which are useful in the game. In our example, the game accepts swords as weapon to fight the dragon, so the player can either use a sword he already owns (maybe won from another game) or he can use the sword provided by the game itself. What makes this interesting for the builders is that, if the builder wants he can skip the step of building sword assets, and only allow players who already own swords to fight this dragon. This brings so many possibilities for the game, and also makes the process of game development really modular and composable. Another aspect to this is an artist who is really well-known for making amazing sword assets can now make his work available to lots of different game developers and his work could be valued according to how much those assets are in demand in the world. This makes the valuation of in game assets completely detached from the game itself, and the games narrative, character and gameplay only enhance the asset. Actually all the aspects of a game can be detached and modularized in a similar way in theory, but the implementation might make things a little complicated especially when it comes to storytelling, as it is usually very tightly coupled with a game. But it might be possible to fork game play mechanics create by certain devs, and tell different stories in different worlds using those. This opens up a really different way of coordination and collaboration in game development and designers will have to shed their old ways of thinking how to go about designing a game.&lt;br&gt;
Persistence - Blockchain records every transaction made by users of a smart contract. That means that if a player plays a game using a smart contract, all the interactions player does on the chain is recorded and so a player state is maintained for that particular game. This state can then be used by the player and other game developers in really interesting ways. For example, our game contract in the example above mints a loot item, when the player finally defeats the dragon. The author of this particular game contract has made this particular loot item as an NFT, an independant component which the player now owns, and can do what he wants with it. He can keep this treasure as a display in his collections box. He can sell it on the open markets for real money. Or he can just use this NFT in another game contract in the metaverse. The player now goes to a warriors battleground, which is a PVP arena, and he can choose to use the sword he just won defeating the dragon to fight his friends in a battle arena. This is just one scenario of so many things which will be made possible because of the state of the object which has a whole another life outside of it's game level it was generated. This layer of persistence will also be used on the player itself. The skills he learned in this game, can be used by other games, to give him special access to their games. We can create a reputation layer for the player, which can be monetized by the player in various ways. There's even a persistance layer in the gaming world itself, and a talented game developer can use this to make the experience of living in their gaming world a really memorable and unique experience, where players past action affect their community, their own state and also state of NPCs residing in the game. Imagine using AI for NPCs to have dynamically changing reactions to player actions based on how they behave in the game or other games. Or changing a whole city in an open world game based on actions performed and decisions made by a faction of players.&lt;br&gt;
Saving all the previous state on a blockchain also means, a player can come back and replay a particular state of a particular game again and again without ever needing to store it somewhere seperately, or the game server not maintained by the original game company. Anyone can fork this game and run it on their own and carry over all the previous state. They can keep the game exactly the same or make their own modifications either cosmetic or in game. All of this is only possible if there's a single chain storing all the state data.&lt;br&gt;
Permisionless - One of the main tenets of crypto is that it is permissionless. You don't need permission to sell something you build from the central marketplaces and platforms. The same thing will apply to game engine components too. Any smart contract developer can create a new game, by forking the original game contract, transferring over all the capabilities of the original game. Any frontend developer can create new UI and 3d asset to mod the game to their liking, selling this mods to players and other devs. Even the assets used in a game can simply be picked up by game devs from artists who will mint it as NFTs (attaching rules and royalty fee for usage). This makes working on games a really individualistic and asynchronous process if one likes to work that way. But a squad with diverse backgrounds can collaborate to fork a game, and make improvements of their own to it too. In the above example, I as a dev will opensource my design for the dragon fight. Then another dev can extend my work, by adding a different dragon with different capabilities but reusing the players actions that I have already programmed in. An environment artist can create a different level for the game to be played. And a curator can pick and choose between all this different composable components to create a very specific experience. And all of this will be done permisionlessly while all the revenue collected during this process will be distributed by a distribution contract set by the individual component creators. Gone will be the days when Nintendo sues a fan for remaking an old level, or Bethesda only allowing certain mods for their games to be monetizable. This kind of selfish tactics to benefit the parent company will be seen as undesirable and foolish.&lt;br&gt;
Ownership - game developers can create certain assets which the player can own. Some of this assets are something they sell, which maybe vital to what they are building in order to raise funds. Once you own an asset, you can sell it on open markets. Use it in other games made by the same or other developers. The engine allows game contracts to make exclusive contracts with the player owned assets, which means that when the player uses the game assets in a game it will permanently change some aspects of the owned assets. You may even lose the asset you own. Some changes will be permanent, some only when you play the game. Some will be purely cosmetic, others will enhance/deflate the abilities of the asset you own.&lt;br&gt;
Eg. Let's say you win a rare sword in a battle game by defeating another player in combat. Now that sword is permanently yours to own. Now you can go and play a game which allows you to upgrade that sword. It's a fantasy magical game, so your sword now has magical abilities. Then you go and play a game with dragons. But this game has known risk that the sword maybe permanently damaged, losing all the magical abilities you gain playing the other game. Is that risk worth the rewards this game is offering? Game developers will be making all sorts of risk/rewards balance for different assets, in order to attract players, and the game engine will be there all along to make this process easier.&lt;br&gt;
Tokenomics - crypto allows for a open and transparent financial system which acts as the base layer of the metaverse. Tokenomics or token economics lets you create a playground for experimenting with your own economics which can still interoperate with the global economic marketplace. A thriving metaverse needs well compensated builders who are paid fairly for the value they bring to the ecosystem. As we saw above in a composable system, every individual can build permisionless and plug in to the verse. Everyone is the owner in this economy and there are minimum rent seekers. A trustless base economic layer with a smart contract game engine where every artist and builder can assign royalty fees for the assets they build, used by game devs and compensated by players/investors means everyone can build without worrying about business. Builders can seperate art from business and just build. Players can participate to make sure the right builders are compensated fairly by signalling their happiness and also earn from this. Players can themselves earn from playing the game in certain play2earn game models. While the speculators and investors can stake their tokens to keep the ecosystem growing and healthy. The artist who is good at developing swords in the above example can be commissioned by a game dev for his particular game or he can make his asset available for anyone to use, which are then bought by either a player or a game world, because they think the utility or signalling of owning this sword is beneficial for them for particular games or in general in the external world. I have seen certain critics say that if you insert money making in a game, it removes enjoyment from actually playing the game and it becomes a grind. People don't play game to earn, but just to relax and have fun. I get this criticism, but I think there will always be games built where you can just use your NFTs to play fun games without worrying about the earning potential or grinding to earn more money. But the critics are failing to understand that this system is giving economic freedom to the builders themselves, allowing players to own and earn from the games they enjoy playing and providing some real benefits in exchange for their time and experience. This may not be for everyone, but I predict that most artists and game devs will eventually find that this model works much better for them than what they have been doing in the old way, and so the best games will be built in this new system. This is the way.&lt;br&gt;
Basic Game Engine in Development&lt;br&gt;
We have started work on a game engine that will be build with all the features I talked above in mind. This will be a bottoms-up approach, with the game engine being built specifically for a game we are developing called Spaceborn. Spaceborn is a Loot Project inspired game, where players get to own unique and randomly-generated sci-fi gears NFT by defeating Aliens in combat. Players can only earn this NFTs by playing the game. The players can equip some of the gears which they have won previously or bought from the secondary market in order to get better odds in battle. The twist is that if you loose in combat, the player may lose the equipped NFTs. The plan is to open source all the contracts created for this game so that other game developers can fork them, use the sci-fi gears won by players in this game in their own games and also let the games use the player and it's global state in other games.&lt;br&gt;
Every important component of the game which might benefit from having crypto-native features described above will be a ERC-721 NFT component type and the Game Manager will be the central contract that interacts with all the components registered with it. Every component has it's own attributes, which can be either global (changed by the owner) or game-specific, changes when owner of the component interacts with the game.&lt;br&gt;
Following are the important components for the first game:&lt;br&gt;
Player Contract: Player has a configurable global state. A player accepts to attach itself to a game contract, and agrees to getting the global state modified as it interacts with the game. Currently the only global state a game can change is the experience points. This experience points will give the player reputation in the metaverse. A player can also modify certain global attributes which are then made use by the game. One attribute is attaching a NFT PFP the player owns as it's profile picture. Now based on which NFT the player attaches, the game can give special boost to them inside the game.&lt;br&gt;
Game Contract: Game contract is the main game manager that maintains state for the game world and all the players interacting with the game. This game manager has several mappings which are upgradable by both players playing the game and the game owners (game masters). In the Spaceborn game, this game contract accepts players gated by specific PFP NFTs they own.&lt;br&gt;
Gears NFT: Gears NFT are minted by the game contract and are transferred to the wallet of the player upon completion of some objective in the game (Defeating alien enemy). This NFT are dropped by the alien contract upon defeat. This NFTs can also be equipped by the player during combat, which reduces the probability of alien winning in the battle, depending on the attributes of the gear and the attributes of aliens. The attributes and the calculation is also something that can be upgraded by the game contract owner once it's deployed.&lt;br&gt;
Alien Contract: Aliens are enemies generated by the game contract which have a base probability of winning in a battle. This probability is increased or decreased depending on the player it's facing and the gears the player has equipped.&lt;br&gt;
The contracts and web3 framework uses scaffold-eth which is a great tool for quick prototyping web3 concepts. The future roadmap for the game engine is as follows:&lt;br&gt;
Create a UI for anyone to generate game contracts or fork someone else's deployed game.&lt;br&gt;
Easy deployment of games to different L2 networks or sidechains like Arbitrum and Matic.&lt;br&gt;
Create a standard for in game items so that interoperability between different games is like a breeze.&lt;br&gt;
Create a token which will compensate builders, incentivize game developers to allow the players to play their games.&lt;br&gt;
Create a DAO for making this game engine a public good and properly decentralized.&lt;br&gt;
Create a 2D combat game which will reuse the NFTs already minted from the text-based version.&lt;br&gt;
Integration with existing game engines such as unity and unreal.&lt;br&gt;
Library for artists and developers to publish their assets, different ways for them to get compensated for the work and a marketplace for players and games.&lt;/p&gt;

&lt;p&gt;There's a lot more that will be needed, but this are what I think the core features for an alpha game engine. If any of this interests you please do get in touch with us on telegram. We are a group of devs from Moonshot Collective (GitcoinDAO) and OPGames. All of us are really excited for the future of crypto &amp;amp; web 3 and passionate about video games. What lies ahead of us is monumental and mind-blowing and we want to be at the cutting edge of it and leading the way. So be there with us as we go all in on this new adventure together.&lt;br&gt;
Here's the Spaceborn website: spaceborn.gg&lt;br&gt;
Join this telegram group for updates and connecting with us:&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Vue.js - Get up and Running</title>
      <author>Dileep Reddy</author>
      <pubDate>Fri, 21 Jan 2022 18:54:16 +0000</pubDate>
      <link>https://dev.to/dileepreddyaella/vuejs-get-up-and-running-146d</link>
      <guid>https://dev.to/dileepreddyaella/vuejs-get-up-and-running-146d</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@afgprogrammer?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Mohammad Rahmani&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/vue.js?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#who-is-this-for"&gt;
  &lt;/a&gt;
  Who is this for?
&lt;/h3&gt;

&lt;p&gt;For developers who are already familiar with frameworks like React, Angular, etc. and want to learn minimum amount of Vue.js features to get their engines running.&lt;/p&gt;

&lt;p&gt;I want to give a quick intro of what we need to know if we intend work on a project built with Vue.js. We are gonna start with the important one...&lt;strong&gt;the component structure&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#component-structure"&gt;
  &lt;/a&gt;
  Component Structure
&lt;/h2&gt;

&lt;p&gt;The component structure in Vue is pretty straight forward. &lt;br&gt;
We can divide it into 3 sections.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The HTML or (template)&lt;/li&gt;
&lt;li&gt;The JavaScript or (script)&lt;/li&gt;
&lt;li&gt;The CSS or (style)
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;!-- html goes here --&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
// import other components or libraries using js import
export default {
  data () {
    return {
// define state here
    }
  },
  methods: {
// define functions here
  }
}
&amp;lt;/script&amp;gt;

&amp;lt;style&amp;gt;
/* define styles here */
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#component-state"&gt;
  &lt;/a&gt;
  Component State
&lt;/h2&gt;

&lt;p&gt;In the above code block inside script tags, there is a comment saying &lt;em&gt;define state here&lt;/em&gt;. It's just that simple.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
export default {
  data () {
    return {
      name: 'Jane',
      age: 32,
      books: ['the dip', 'Norwegian wood'],
      person: {name: 'Jan', gender: 'female'}
    }
  }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To &lt;strong&gt;&lt;em&gt;access the state variables inside the script tags&lt;/em&gt;&lt;/strong&gt; you need to use it as &lt;strong&gt;&lt;em&gt;&lt;code&gt;this.name&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;. Here the &lt;strong&gt;&lt;em&gt;this&lt;/em&gt;&lt;/strong&gt; keyword refers to the instance which holds the data.&lt;/p&gt;

&lt;p&gt;But to &lt;strong&gt;&lt;em&gt;access it inside template tags&lt;/em&gt;&lt;/strong&gt;. You can use the &lt;em&gt;mustache syntax&lt;/em&gt;. It goes like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
   &amp;lt;p&amp;gt;{{name}}&amp;lt;/p&amp;gt;
   &amp;lt;p&amp;gt;{{age + 10}}&amp;lt;/p&amp;gt;
   &amp;lt;p&amp;gt;{{person.gender}} {{books[0]}}&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can perform all JS actions inside the braces including function calls. But it isn't preferred unless necessary.&lt;/p&gt;

&lt;p&gt;If you want to change value of state variable. You can do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;this.name = 'New name'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;inside any function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#template-syntax-using-raw-v-endraw-directives"&gt;
  &lt;/a&gt;
  Template syntax using &lt;code&gt;v-&lt;/code&gt; directives
&lt;/h2&gt;

&lt;p&gt;Vue uses something called directives which allow us to link JS in script tags with our HTML. So that you can perform JS operations inside the template.&lt;br&gt;
Let's talk about the directives that i found useful and used regularly.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-raw-vif-velseif-velse-endraw-"&gt;
  &lt;/a&gt;
  1. &lt;code&gt;v-if, v-else-if, v-else&lt;/code&gt; -
&lt;/h3&gt;

&lt;p&gt;As the name suggests these provide a way to conditionally render required HTML.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  &amp;lt;p v-if="showIf"&amp;gt;Will be rendered if showIf is true&amp;lt;/p&amp;gt;
  &amp;lt;p v-else-if="showElsIf"&amp;gt;Will be rendered if showElsIf is true&amp;lt;/p&amp;gt;
  &amp;lt;p v-else&amp;gt;Will be rendered if above two are false&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-raw-vshow-endraw-"&gt;
  &lt;/a&gt;
  2. &lt;code&gt;v-show&lt;/code&gt; -
&lt;/h3&gt;

&lt;p&gt;This is similar to the &lt;code&gt;v-if&lt;/code&gt;. The difference is &lt;code&gt;v-if&lt;/code&gt; doesn't render to the DOM if the applied condition fails. Whereas &lt;code&gt;v-show&lt;/code&gt; renders the element to the DOM initially and then hides the element using css display properties if the condition fails.&lt;/p&gt;

&lt;p&gt;As we are talking about DOM. I would like to mention that Vue also uses Virtual DOM. You can read more about it in this &lt;a href="https://blog.logrocket.com/how-the-virtual-dom-works-in-vue-js/"&gt;blog&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  &amp;lt;p v-show="age === 20"&amp;gt;Show Me&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-raw-vbind-endraw-"&gt;
  &lt;/a&gt;
  3. &lt;code&gt;v-bind&lt;/code&gt; -
&lt;/h3&gt;

&lt;p&gt;I find this to be the most used directive. As the name suggests this is used to bind something, and here that something refers to binding HTML attributes with JS attributes.&lt;br&gt;
Let's see how it works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  &amp;lt;button v-bind:disabled="isDisabled"&amp;gt;Button&amp;lt;/button&amp;gt;
  &amp;lt;div v-bind:class="selected &amp;amp;&amp;amp; 'text-blue-500'"&amp;gt;
    Blue text
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will disable the button if &lt;code&gt;isDisabled = true&lt;/code&gt;&lt;br&gt;
The Blue text will be blue if &lt;code&gt;selected = true&lt;/code&gt;. The class name used is a tailwind class. &lt;/p&gt;

&lt;p&gt;Instead of typing the whole &lt;code&gt;v-bind:disabled&lt;/code&gt; we can write it as &lt;code&gt;:disabled&lt;/code&gt;. Both are equal. This is called the &lt;strong&gt;&lt;em&gt;v-bind shorthand&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;v-bind is also used to pass props to a child component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  &amp;lt;child :property="newProperty"&amp;gt;&amp;lt;/child&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;newProperty&lt;/code&gt; is a variable defined in &lt;code&gt;parent component&lt;/code&gt; that is being passed down to &lt;code&gt;child component&lt;/code&gt; as &lt;code&gt;property&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-raw-von-endraw-"&gt;
  &lt;/a&gt;
  4. &lt;code&gt;v-on&lt;/code&gt; -
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;v-on&lt;/code&gt; directive is used to add event listeners like onClick, onHover, onFocus, etc. to an element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  &amp;lt;button v-on:click="buttonClicked()"&amp;gt;Click me!&amp;lt;/button&amp;gt;
  &amp;lt;button @click="buttonClicked()"&amp;gt;Click me!&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here buttonClicked() is a function that gets called when we click the button.&lt;br&gt;
The first and second lines both work the same way. &lt;code&gt;v-on:click&lt;/code&gt; is same as &lt;code&gt;@click&lt;/code&gt;&lt;br&gt;
The second one(&lt;code&gt;@click&lt;/code&gt;) is called v-on shorthand similar to the v-bind shorthand.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#5-raw-vfor-endraw-"&gt;
  &lt;/a&gt;
  5. &lt;code&gt;v-for&lt;/code&gt; -
&lt;/h3&gt;

&lt;p&gt;Used to loop through an array and render elements dynamically.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div v-for="item in list"&amp;gt;
  &amp;lt;p :key="item"&amp;gt;{{item}}&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;

list = ['item1', 'item2', 'item3']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget to add the &lt;code&gt;:key&lt;/code&gt; to differentiate the elements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-raw-vhtml-endraw-"&gt;
  &lt;/a&gt;
  6.&lt;code&gt;v-html&lt;/code&gt; -
&lt;/h3&gt;

&lt;p&gt;To render real HTML in the template. Say we have a state variable called newHtml.&lt;br&gt;
&lt;code&gt;newHtml = "&amp;lt;span&amp;gt;Hello Vue!&amp;lt;/span&amp;gt;"&lt;/code&gt; &lt;br&gt;
This can be used in the template as,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;div v-html="newHtml"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;{{newHtml}}&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

The rendered HTML in browser will be

Hello Vue!
&amp;lt;span&amp;gt;Hello Vue!&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#7-raw-vmodel-endraw-"&gt;
  &lt;/a&gt;
  7. &lt;code&gt;v-model&lt;/code&gt; -
&lt;/h3&gt;

&lt;p&gt;v-model is used to add two way data binding. This is useful to update the value passed to the input or textarea elements as we type. Let's see an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  &amp;lt;input v-model="message"&amp;gt;
  &amp;lt;p&amp;gt;{{message}}&amp;lt;/p&amp;gt;
&amp;lt;div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The magic of v-model is that it automatically updates the value of message as you enter text in the input box.&lt;/p&gt;

&lt;p&gt;This &lt;a href="https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwiVv-afvcP1AhW1RWwGHSMzDz4QFnoECCcQAQ&amp;amp;url=https%3A%2F%2Flearnvue.co%2F2021%2F01%2Feverything-you-need-to-know-about-vue-v-model%2F&amp;amp;usg=AOvVaw2ReHth6eRshDj3rzXus7zg"&gt;blog&lt;/a&gt; will give you a better understanding of how v-model works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defining-functions"&gt;
  &lt;/a&gt;
  Defining functions
&lt;/h2&gt;

&lt;p&gt;We should define functions in the methods function inside script tag. There are also other ways but they don't fall in the current scope of our discussion.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export default {
  methods:{
    greet(){
      console.log('Greeting')
    },
    onClick(){
      console.log('Button Clicked')
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#receive-props"&gt;
  &lt;/a&gt;
  Receive props
&lt;/h2&gt;

&lt;p&gt;We previously saw how to pass props through v-binding. Now let's see how to receive them in the child. &lt;br&gt;
When props are passed down to the child component we have two ways of receiving them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PARENT: 
&amp;lt;div&amp;gt;
 &amp;lt;child :name="'Jan'" :age="24"&amp;gt;&amp;lt;/child&amp;gt;
&amp;lt;div&amp;gt;

CHILD:
1st way -&amp;gt;
export default {
  props: ['name', 'age']
  methods:{
  }
}
2nd way -&amp;gt;
export default {
  props: {
    name: String,
    age: Number
  }
  methods:{
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the second way we define the types of props that we are going to receive. This will help us a lot to identify any errors that might be caused due to unexpected prop value.&lt;/p&gt;

&lt;p&gt;This has been a long post I Know!!!. &lt;/p&gt;

&lt;p&gt;Lets end with the final thing "styling".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-styles"&gt;
  &lt;/a&gt;
  Adding Styles
&lt;/h2&gt;

&lt;p&gt;Styles are defined inside the style tags. It works same as normal CSS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class="summary"&amp;gt;name&amp;lt;/div&amp;gt;
  &amp;lt;p id="id-name"&amp;gt;TEXT&amp;lt;/p&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;style scoped&amp;gt;
  .summary {
    font-size: 14px;
  }
  #id-name {
    color: blue
  }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we need to add &lt;code&gt;scoped&lt;/code&gt; so that the styles we added will be applied only to the current component. If we remove it, the styles will be applied globally to all components.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The things we covered will help you in understanding the flow of a project built with Vue. This is by no means full coverage of all the features.&lt;br&gt;
There are many important topics that we should know to be a better Vue developer.&lt;br&gt;
Topics like - &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#computed-properties"&gt;
  &lt;/a&gt;
  Computed properties
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#getters-and-setters"&gt;
  &lt;/a&gt;
  Getters and Setters
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#watchers"&gt;
  &lt;/a&gt;
  Watchers
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#mixins"&gt;
  &lt;/a&gt;
  Mixins
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#vuex"&gt;
  &lt;/a&gt;
  Vuex
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#life-cycle-methods"&gt;
  &lt;/a&gt;
  Life cycle methods
&lt;/h4&gt;

&lt;p&gt;The &lt;a href="https://v3.vuejs.org/guide/introduction.html"&gt;official documentation&lt;/a&gt; will help you the most in understanding all the concepts.&lt;/p&gt;

&lt;p&gt;Please leave comments to add any suggestion or if you find any mistake. Thanks!!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources-to-learn"&gt;
  &lt;/a&gt;
  Resources to Learn
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://scrimba.com/learn/learnvue/welcome-to-vuejs-cK8RnSd"&gt;https://scrimba.com/learn/learnvue/welcome-to-vuejs-cK8RnSd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vueschool.io/articles/category/vuejs-tutorials/"&gt;https://vueschool.io/articles/category/vuejs-tutorials/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrimba.com/learn/learnvue/welcome-to-vuejs-cK8RnSd"&gt;https://scrimba.com/learn/learnvue/welcome-to-vuejs-cK8RnSd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading this far. This is my first post on Dev.to.&lt;br&gt;
All the best in your learning journey.&lt;/p&gt;

&lt;p&gt;You can reach out to me on &lt;a href="https://www.linkedin.com/in/sai-dileep-reddy-aella/"&gt;linkedin&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Tutorial - JWT + NodeJs + MongoDB + Vue (Back-End - Parte II)</title>
      <author>Glaucia Lemos</author>
      <pubDate>Fri, 21 Jan 2022 18:36:55 +0000</pubDate>
      <link>https://dev.to/glaucia86/tutorial-jwt-nodejs-mongodb-vue-back-end-parte-ii-1m4</link>
      <guid>https://dev.to/glaucia86/tutorial-jwt-nodejs-mongodb-vue-back-end-parte-ii-1m4</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xOBQdfsJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/23athau5qk5zigthj2av.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xOBQdfsJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/23athau5qk5zigthj2av.png" alt="Alt Text" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fala Coders! Tudo certo? Enfim concluímos o primeiro projeto da série do meu &lt;strong&gt;&lt;a href="https://t.co/31N8vJHVoW?amp=1"&gt;Canal do Youtube&lt;/a&gt;&lt;/strong&gt; chamado: &lt;em&gt;Coding Stuff!&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;O objetivo dessa série é ensinar inúmeros tutoriais e projetos direto ao ponto no meu &lt;strong&gt;&lt;a href="https://bit.ly/youtube-canal-glaucialemos"&gt;Canal do Youtube&lt;/a&gt;&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Nesse primeiro projeto da série do &lt;strong&gt;Coding Stuff!&lt;/strong&gt; desenvolvemos uma aplicação de autenticação usando o JWT com Node.js. Assim sendo, desenvolvemos uma aplicação E2E (desde o Back-End ao Front) de login e senha, a qual usamos o JWT e persistindo no MongoDb.&lt;br&gt;
Após isso, fizemos o lado do client usando o Vue.Js.&lt;/p&gt;

&lt;p&gt;Terminamos o projeto. Porém, estaremos hospedando a aplicação no &lt;strong&gt;&lt;a href="https://azure.microsoft.com/?WT.mc_id=javascript-12243-gllemos"&gt;Azure&lt;/a&gt;&lt;/strong&gt; tanto no lado do server e client-side!&lt;/p&gt;

&lt;p&gt;Abaixo segue o repositório com todo o projeto pronto!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/glaucia86"&gt;
        glaucia86
      &lt;/a&gt; / &lt;a href="https://github.com/glaucia86/jwt-node-vue"&gt;
        jwt-node-vue
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Repositório responsável pelo primeiro projeto da série de vídeos: Coding Stuff.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Série de Vídeos - Coding Stuff: Projeto #01 - Desenvolvendo Aplicação JWT com Node + MongoDB + Vue &amp;amp; Azure&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://postimg.cc/WdCFPTmw" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/beb8d585cc86dd3c5bdc904df69c078087af042d8695c8e980de6b8ffa51aaae/68747470733a2f2f692e706f7374696d672e63632f434b4c6a6b4b7a582f432d7069612d64652d5475746f7269616c2d4e6f64652d6a732d457870726573732d636f6d2d446f636b65722d312e706e67" alt="C-pia-de-Tutorial-Node-js-Express-com-Docker-1.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Repositório responsável pelo primeiro projeto da série de vídeos: &lt;strong&gt;Coding Stuff&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;O objetivo da série é ensinar inúmeros tutoriais e projetos direto ao ponto no meu &lt;strong&gt;&lt;a href="https://bit.ly/youtube-canal-glaucialemos" rel="nofollow"&gt;Canal do Youtube&lt;/a&gt;&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;Nesse primeiro projeto da série do &lt;strong&gt;Coding Stuff!&lt;/strong&gt; vamos aprender um pouco sobre como podemos criar aplicações de autenticação usando o JWT com Node.js. Assim sendo, estaremos desenvolvendo uma aplicação E2E (desde o Back-End ao Front) de login e senha, a qual faremos uso do JWT e persistindo no MongoDb
Após isso, faremos o lado do client usando o Vue.Js.&lt;/p&gt;
&lt;p&gt;Ao término do projeto local, estaremos hospedando a aplicação no &lt;strong&gt;&lt;a href="https://azure.microsoft.com/?WT.mc_id=javascript-12243-gllemos" rel="nofollow"&gt;Azure&lt;/a&gt;&lt;/strong&gt; tanto no lado do server e client-side!&lt;/p&gt;
&lt;h2&gt;
☕ Apoie e Ajude esse Projeto!&lt;/h2&gt;
&lt;p&gt;Se você curte ou curtiu os vídeos feitos desse curso e deseja apoiar com um…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/glaucia86/jwt-node-vue"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#desenvolvimento-completo-frontend-v%C3%ADdeo-tutoriais"&gt;
  &lt;/a&gt;
  Desenvolvimento completo Front-End (Vídeo Tutoriais)
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#v%C3%ADdeo-09-estrutura%C3%A7%C3%A3o-do-projeto"&gt;
  &lt;/a&gt;
  Vídeo 09 - Estruturação do Projeto
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/PH-kSpoEpYI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#v%C3%ADdeo-10-estrutura%C3%A7%C3%A3o-do-projeto"&gt;
  &lt;/a&gt;
  Vídeo 10 - Estruturação do Projeto
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/oLXCKIvOPK4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#v%C3%ADdeo-11-estrutura%C3%A7%C3%A3o-do-projeto"&gt;
  &lt;/a&gt;
  Vídeo 11 - Estruturação do Projeto
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/5VSzUFIAh1U"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#v%C3%ADdeo-12-estrutura%C3%A7%C3%A3o-do-projeto"&gt;
  &lt;/a&gt;
  Vídeo 12 - Estruturação do Projeto
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/LtSeR3jy28Y"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#v%C3%ADdeo-13-estrutura%C3%A7%C3%A3o-do-projeto"&gt;
  &lt;/a&gt;
  Vídeo 13 - Estruturação do Projeto
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8gG1OwMIDts"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#v%C3%ADdeo-14-estrutura%C3%A7%C3%A3o-do-projeto"&gt;
  &lt;/a&gt;
  Vídeo 14 - Estruturação do Projeto
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/UcKm1ADpWlQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#v%C3%ADdeo-15-estrutura%C3%A7%C3%A3o-do-projeto"&gt;
  &lt;/a&gt;
  Vídeo 15 - Estruturação do Projeto
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/cQxoBu2rexE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#v%C3%ADdeo-16-estrutura%C3%A7%C3%A3o-do-projeto"&gt;
  &lt;/a&gt;
  Vídeo 16 - Estruturação do Projeto
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/hQaDG-oZQ_g"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#v%C3%ADdeo-17-estrutura%C3%A7%C3%A3o-do-projeto"&gt;
  &lt;/a&gt;
  Vídeo 17 - Estruturação do Projeto
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/XykcWilTg68"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#v%C3%ADdeo-18-estrutura%C3%A7%C3%A3o-do-projeto"&gt;
  &lt;/a&gt;
  Vídeo 18 - Estruturação do Projeto
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/TmGnuRhX_hI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%EF%B8%8F-links-amp-recursos-importantes"&gt;
  &lt;/a&gt;
  ❗️ Links &amp;amp; Recursos Importantes
&lt;/h2&gt;

&lt;p&gt;Como dito durante as live codings, sempre estaremos citando links e recursos importantes que direcionarão para: documentações, cursos gratuitos, livros e conteúdos relacionados a Node.js &amp;amp; PostgreSQL. Abaixo, segue uma lista desses recursos, que são considerados leituras, cursos ou livros recomendados:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;✅ &lt;strong&gt;&lt;a href="http://bit.ly/2JN0874"&gt;Curso Grátis de Criando Aplicações JavaScript com Node.js&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;✅ &lt;strong&gt;&lt;a href="http://bit.ly/2LlgLHa"&gt;Curso Grátis Azure Functions com Node&lt;/a&gt;&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;✅ &lt;strong&gt;&lt;a href="http://bit.ly/3nd3nT0"&gt;Curso Grátis CosmosDB com Node&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;✅ &lt;strong&gt;&lt;a href="http://bit.ly/3odzNxL"&gt;Curso de Deploy Automático com SWA + GitHub Actions&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;✅ &lt;strong&gt;&lt;a href="https://docs.microsoft.com/javascript/azure/?WT.mc_id=javascript-12243-gllemos&amp;amp;view=azure-node-latest"&gt;Azure para devs JavaScript &amp;amp; Node.js&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;✅ &lt;strong&gt;&lt;a href="http://bit.ly/354hrYH"&gt;Documentação do Node.js usando o Vs Code&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;✅ &lt;strong&gt;&lt;a href="https://code.visualstudio.com/docs/nodejs/nodejs-debugging?WT.mc_id=javascript-12243-gllemos"&gt;Depurando Aplicações Node com Vs Code&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;✅ &lt;strong&gt;&lt;a href="http://bit.ly/2MtXYtT"&gt;Documentação do Vs Code com Vue&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;✅ &lt;strong&gt;&lt;a href="https://jwt.io/"&gt;Documentação Oficial do JWT&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;✅ &lt;strong&gt;&lt;a href="https://expressjs.com/pt-br/"&gt;Documentação Oficial do ExpressJs&lt;/a&gt;&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#palavras-finais"&gt;
  &lt;/a&gt;
  Palavras Finais
&lt;/h2&gt;

&lt;p&gt;Espero que essa série &lt;em&gt;Coding Stuff de JWT com Node &amp;amp; VueJs&lt;/em&gt; seja de ajuda para todas as pessoas da Comunidade Técnica Brasileira. Estou procurando dar o meu melhor e o gerando/criando o melhor conteúdo de qualidade para todos(as) vocês!&lt;/p&gt;

&lt;p&gt;Ah! Já ia esquecer de falar aqui! Não deixem de se inscrever no meu Canal do Youtube! Estou criando inúmeras séries incríveis para esse ano de 2022! &lt;/p&gt;

&lt;p&gt;Só como spoiler, teremos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;😃 &lt;strong&gt;Microsoft Learn Live Sessions&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;😃 &lt;strong&gt;Curso Gratuito de TypeScript&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;😃 &lt;strong&gt;Tutoriais semanais de Node.js, TypeScript &amp;amp; JavaScript&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;😃 &lt;strong&gt;E muitos Live Codings&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Se são conteúdos que você curte, então não deixa de se inscrever e ative o sininho para ficar sabendo quando teremos vídeo novo! Essa semana já teremos uma série nova incrível lá no Canal do Youtube.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/youtube-canal-glaucialemos"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJTWdv_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/pr3TL4Pd/Screen-Shot-12-31-20-at-01-06-AM.png" alt="Screen-Shot-12-31-20-at-01-06-AM.png" width="880" height="150"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;E para ficarem por dentro de várias outras novidades, não deixem de me seguir lá no twitter!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/glaucia_lemos86"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8TRF6AJa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://code4coders.files.wordpress.com/2019/05/image-12.png" alt="Twitter" width="880" height="213"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>node</category>
    </item>
  </channel>
</rss>
