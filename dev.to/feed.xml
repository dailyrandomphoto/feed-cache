<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>6 Nifty Python Language Features You Might Not Know About</title>
      <author>Bikramjeet Singh</author>
      <pubDate>Sun, 07 Feb 2021 17:58:58 +0000</pubDate>
      <link>https://dev.to/bikramjeetsingh/6-nifty-python-language-features-you-might-not-know-about-6mi</link>
      <guid>https://dev.to/bikramjeetsingh/6-nifty-python-language-features-you-might-not-know-about-6mi</guid>
      <description>&lt;p&gt;One of the strengths of the Python programming language is that it is both easy for beginners to learn and, at the same time, immensely rewarding for advanced users.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#data-classes" class="anchor"&gt;
  &lt;/a&gt;
  Data classes
&lt;/h1&gt;

&lt;p&gt;Data classes are classes with the sole purpose of acting as containers of data. They usually do not contain any business logic inside them.&lt;/p&gt;

&lt;p&gt;Python provides the &lt;code&gt;@dataclass&lt;/code&gt; decorator which, when added to a class, automatically generates several useful methods so you don't have to write them out by hand. These include the &lt;code&gt;__init__&lt;/code&gt; method for generating a constructor, &lt;code&gt;__str__&lt;/code&gt; and &lt;code&gt;__repr__&lt;/code&gt; for generating string representations and &lt;code&gt;__eq__&lt;/code&gt; for checking instances of the class for equality.&lt;/p&gt;

&lt;p&gt;Defining a data class is simple.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dataclass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;published_on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
    &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Optionally, you can also set default values for variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dataclass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"John Doe"&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Unknown"&lt;/span&gt;
    &lt;span class="n"&gt;published_on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;likes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For the full list of automatically generated methods, you can check out the &lt;a href="https://docs.python.org/3/library/dataclasses.html"&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#any-amp-all" class="anchor"&gt;
  &lt;/a&gt;
  Any &amp;amp; All
&lt;/h1&gt;

&lt;p&gt;Sometimes you need to have a check on multiple conditions before performing an action, such as in an &lt;code&gt;if&lt;/code&gt; statement. Python provides the boolean &lt;code&gt;and&lt;/code&gt; and &lt;code&gt;or&lt;/code&gt; operators for evaluating such logical expressions. However, when there are a very large number of conditions in play, your statement might begin to look a bit unwieldy.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;any()&lt;/code&gt; and &lt;code&gt;all()&lt;/code&gt; methods, are simply a shorter and more readable way of evaluating a large number of boolean expressions at once. &lt;code&gt;any()&lt;/code&gt; is equivalent to a series of &lt;code&gt;or&lt;/code&gt; operations, while &lt;code&gt;all()&lt;/code&gt; is equivalent to a series of &lt;code&gt;and&lt;/code&gt; operations.&lt;/p&gt;

&lt;p&gt;Suppose you are given a list of the marks a certain student scored ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;marks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;67&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;passing_marks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;... and you want to check if the student qualifies to be promoted to the next year. One way to do this would be to simply join each comparison with the &lt;code&gt;and&lt;/code&gt; operator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;passing_marks&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;passing_marks&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;passing_marks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;promoted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;promoted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can make this code slightly more readable by using the &lt;code&gt;all()&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;passing_marks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;passing_marks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;passing_marks&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="n"&gt;promoted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;promoted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Finally, you can combine it with a list comprehension to get a sweet, concise solution:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;subject_marks&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;passing_marks&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;subject_marks&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;marks&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="n"&gt;promoted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;promoted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The capabilities of these two functions can further be extended by combining them with the &lt;code&gt;not&lt;/code&gt; operator.&lt;/p&gt;

&lt;p&gt;Below is a quick summary of these methods.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;any()&lt;/code&gt;: Returns &lt;code&gt;True&lt;/code&gt; if at least one of the arguments evaluates to True&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;all()&lt;/code&gt;: Returns &lt;code&gt;True&lt;/code&gt; if all of the arguments evaluate to True&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;not any()&lt;/code&gt;: Returns &lt;code&gt;True&lt;/code&gt; if none of the arguments evaluate to True&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;not all()&lt;/code&gt;: Returns &lt;code&gt;True&lt;/code&gt; if at least one of the arguments evaluates to False&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#advanced-slice-operator" class="anchor"&gt;
  &lt;/a&gt;
  Advanced Slice Operator
&lt;/h1&gt;

&lt;p&gt;The slice operator is commonly used to access certain parts of a list or string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Python is awesome!"&lt;/span&gt;
&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# 'h'
&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# 'on '
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It has many more advanced usages as well. For example, negative indexes can be used to slice from the end instead of the beginning.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# 'e'
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can also specify a 'step' to skip over a certain number of elements while slicing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# 'to s'
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The step value can be negative. This causes the list/string to be sliced in reverse.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# ' inh'
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;A common shortcut to reverse an array or list is to slice it with &lt;code&gt;[::-1]&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# '!emosewa si nohtyP'
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#argument-unpacking" class="anchor"&gt;
  &lt;/a&gt;
  Argument Unpacking
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;*&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt; are special operators that allow multiple items to be packed into (or unpacked from) a single variable.&lt;/p&gt;

&lt;p&gt;You might have seen the words &lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt; present in the definitions of functions.  When present in the context of a function definition, the &lt;code&gt;*&lt;/code&gt; operator combines multiple arguments into a single tuple, while the &lt;code&gt;**&lt;/code&gt; operator combines multiple keyword arguments into a dictionary.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;

&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;print_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;firstname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Bikramjeet"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lastname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Singh"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;On the other had, when present in the context of a function &lt;em&gt;call&lt;/em&gt;, they do the opposite - the &lt;code&gt;*&lt;/code&gt; operator spreads the contents of a list/tuple into individual arguments, while the &lt;code&gt;**&lt;/code&gt; operator spreads the contents of a dictionary into individual keyword arguments.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;list_of_nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;list_of_nums&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"firstname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Bikramjeet"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"lastname"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Singh"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;print_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In functions that have a large number of parameters, it is often convenient to collect them into a dictionary before passing them to the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg4&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'arg1'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;...}&lt;/span&gt;
&lt;span class="n"&gt;my_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Another use of these operators is to combine lists and dictionaries.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;combined_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;l2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;combined_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;d2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#functools" class="anchor"&gt;
  &lt;/a&gt;
  Functools
&lt;/h1&gt;

&lt;p&gt;Python supports &lt;a href="https://composingprograms.com/pages/16-higher-order-functions.html"&gt;higher order functions&lt;/a&gt; - functions that can take and return other functions. The concept of higher order functions is central to several other Python features, such as decorators.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://docs.python.org/3/library/functools.html"&gt;functools&lt;/a&gt; package provides useful helper functions for when you're working with higher order functions. Let's take a look at some of them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#partial" class="anchor"&gt;
  &lt;/a&gt;
  partial
&lt;/h2&gt;

&lt;p&gt;There are cases where you might want to create a 'specialized' version of an existing, more generalized function. This is done by 'freezing' the values of some of the base functions parameters.&lt;/p&gt;

&lt;p&gt;Consider a simple function that calculates the nth power of a number:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;

&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# returns 8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The operation of squaring a number is common enough that it is worth it to create a dedicated function for it, simply so we don't have to pass 2 as an argument each time. However, instead of rewriting our &lt;code&gt;pow&lt;/code&gt; function, we can simply reuse it with the &lt;code&gt;functools.partial&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;square&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# returns 16, equivalent to pow(4, 2)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Similarly, we can also create a cube function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;cube&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# returns 125, equivalent to pow(5, 3)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#cachedproperty" class="anchor"&gt;
  &lt;/a&gt;
  cached_property
&lt;/h2&gt;

&lt;p&gt;This is a decorator that allows you to cache the return values of potentially expensive methods. For example, database calls tend to be relatively long-running operations, so it's a good idea to cache them if you don't anticipate their values to change very often.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cached_property&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_expensive_method&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The method is evaluated in full the first time it is called, and its return value cached. The next time the same method is called, its result can simply be fetched from the cache.&lt;/p&gt;

&lt;p&gt;Note that the &lt;code&gt;cached_property&lt;/code&gt; decorator is only available from Python 3.8 onwards. For lower versions of Python, there are &lt;a href="https://pypi.org/project/cached-property/"&gt;separate packages&lt;/a&gt; available.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#totalordering" class="anchor"&gt;
  &lt;/a&gt;
  total_ordering
&lt;/h2&gt;

&lt;p&gt;When you define a custom class, especially one that is a container for numeric data of some sort, it is useful to define comparison methods &lt;code&gt;__eq__&lt;/code&gt; (equals), &lt;code&gt;__gt__&lt;/code&gt; (greater than), &lt;code&gt;__ge__&lt;/code&gt; (greater than or equal to), &lt;code&gt;__lt__&lt;/code&gt; (less than) &amp;amp; &lt;code&gt;__le__&lt;/code&gt; (less than or equal to) to make comparing objects of those classes easier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Distance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;km&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="c1"&gt;# Kilometers
&lt;/span&gt;    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="c1"&gt;# Meters
&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;km&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;km&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;km&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__eq__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;km&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;km&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__gt__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;km&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;km&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;km&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;km&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;However, defining all of these methods can be cumbersome and result in a large amount of boilerplate code, especially since there are 5 of them. Luckily you don't have to! Given the logic of &lt;code&gt;__eq__&lt;/code&gt; and any one of &lt;code&gt;__gt__&lt;/code&gt;, &lt;code&gt;__ge__&lt;/code&gt;, &lt;code&gt;__lt__&lt;/code&gt; or &lt;code&gt;__le__&lt;/code&gt;, all the other comparison methods can be derived.&lt;/p&gt;

&lt;p&gt;For example, in the example above, the &lt;code&gt;__le__&lt;/code&gt; method can be derived as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__le__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is what the &lt;code&gt;@total_ordering&lt;/code&gt; decorator does. When applied onto a class that defines at least the &lt;code&gt;__eq__&lt;/code&gt; and one other comparison method, it derives all the others for you.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_ordering&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Distance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#dundermagic-methods" class="anchor"&gt;
  &lt;/a&gt;
  Dunder/Magic Methods
&lt;/h1&gt;

&lt;p&gt;Dunder (double underscore) methods are special methods that allow you to make use of Python's built-in operators and keywords, such as &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;len&lt;/code&gt;, etc in user-defined classes. This is very useful in making code more concise and readable. You can read more about dunder methods in my previous article, &lt;a href="https://dev.to/bikramjeetsingh/how-to-write-better-python-classes-using-magic-methods-4166"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>python</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Build a Dogecoin Price Ticker using React</title>
      <author>Nitin Ranganath</author>
      <pubDate>Sun, 07 Feb 2021 17:49:25 +0000</pubDate>
      <link>https://dev.to/itsnitinr/build-a-dogecoin-price-ticker-using-react-54o0</link>
      <guid>https://dev.to/itsnitinr/build-a-dogecoin-price-ticker-using-react-54o0</guid>
      <description>&lt;p&gt;Projects. We all love them. Especially the ones that really help us to nail down the fundamentals and learn something new. Dogecoin has been trending since the past week so why don't we build something related to it. &lt;/p&gt;

&lt;p&gt;In this project, we will be building a simple Dogecoin price ticker, a web app which will fetch the lowest price of the day, the highest price of the day and the last traded price via an API and will be updated every 10 seconds. Throughout the project, you will learn about setting up a React project, building components, props, state and the most used React hooks such as &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;useEffect&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XwCU5rdX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/7KYp1to.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XwCU5rdX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/7KYp1to.png" alt="Dogecoin Price Ticker Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I've broken down the project into small sections and if you face any issues in following along, you can check the GitHub repo commits to look at the changes I've made.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Live Demo:&lt;/strong&gt; &lt;a href="https://dogecoin-ticker.netlify.app/"&gt;https://dogecoin-ticker.netlify.app/&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Source Code:&lt;/strong&gt; &lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/itsnitinr"&gt;
        itsnitinr
      &lt;/a&gt; / &lt;a href="https://github.com/itsnitinr/dogecoin-ticker"&gt;
        dogecoin-ticker
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A live Dogecoin price ticker built using React
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#creating-a-react-project" class="anchor"&gt;
  &lt;/a&gt;
  Creating a React Project
&lt;/h2&gt;

&lt;p&gt;The first step is to create ourselves a React project. For this purpose, we'll be using &lt;a href="https://create-react-app.dev/"&gt;Create React App&lt;/a&gt; which will help us to focus on our code and not worry about setting up the build tools. The prerequisites are that you'll need NodeJS v8.10 or above and NPM version v5.6 or above.&lt;/p&gt;

&lt;p&gt;Open up your terminal and run the following command in your preferred directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app dogecoin-ticker
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;npx&lt;/code&gt; is a package runner tool that comes with npm. The above command might take 5-10 minutes to complete so grab a cup of coffee and relax!&lt;/p&gt;

&lt;p&gt;Once done, let's hop on to the project directory. For that, you could either use the file explorer or use the following terminal command: &lt;code&gt;cd dogecoin-ticker&lt;/code&gt;. Now, open up the project folder using your favourite text editor and we'll get started with the initial setup in the next section. To start the development server, run &lt;code&gt;npm start&lt;/code&gt; on your terminal in the project folder.&lt;/p&gt;

&lt;p&gt;If you got stuck in any of the steps, check &lt;a href="https://github.com/itsnitinr/dogecoin-ticker/commit/b518292156a8d0cba699c7f495800bf4474c0bbf"&gt;this commit&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initial-setup" class="anchor"&gt;
  &lt;/a&gt;
  Initial Setup
&lt;/h2&gt;

&lt;p&gt;Once we start our development server using &lt;code&gt;npm start&lt;/code&gt;, go to &lt;code&gt;localhost:3000&lt;/code&gt; on your browser and you'll be greeted with a screen like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3zZ9vbCT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.digitalocean.com/articles/66983/React_Dark_BG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3zZ9vbCT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.digitalocean.com/articles/66983/React_Dark_BG.png" alt="CRA Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the default homepage that Create React App has generated for us. Since we don't need anything similar to this, let's start by deleting unwanted files and setting up the project as per our requirements.&lt;/p&gt;

&lt;p&gt;The folder structure at this moment looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dogecoin-ticker
- public
    - index.html
    - favicon.ico
    - logo192.png
    - logo512.png
    - manifest.json
    - robots.txt
- src
    - App.css
    - App.js
    - App.test.js
    - index.css
    - index.js
    - logo.svg
    - reportWebVitals.js
    - setupTests.js
- node_modules
- .gitignore
- package.json 
- package-lock.json (or yarn.lock if using yarn)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The public folder consists consists of our &lt;code&gt;index.html&lt;/code&gt; file which will be rendered by our browser. Open it up and start by removing the unwanted comments and modifying the title of the webpage. You can also additionally edit the meta tag for description and add your own. Here's how your &lt;code&gt;index.html&lt;/code&gt; should look like once you're done:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"%PUBLIC_URL%/favicon.ico"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"theme-color"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"#000000"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt;
      &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt;
      &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Live dogecoin price ticker built using React"&lt;/span&gt;
    &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"apple-touch-icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"%PUBLIC_URL%/logo192.png"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"manifest"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"%PUBLIC_URL%/manifest.json"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Dogecoin Ticker&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;noscript&amp;gt;&lt;/span&gt;You need to enable JavaScript to run this app.&lt;span class="nt"&gt;&amp;lt;/noscript&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"root"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To give a more personal touch to our website, I have also changed the favicon and logo images which you can download from &lt;a href="https://gofile.io/d/LZIVD4"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's move on to the &lt;code&gt;src&lt;/code&gt; folder. We can get rid of most of the files here such as &lt;code&gt;App.test.js&lt;/code&gt;, &lt;code&gt;logo.svg&lt;/code&gt;, &lt;code&gt;reportWebVitals.js&lt;/code&gt; and &lt;code&gt;setupTests.js&lt;/code&gt;. On saving, you might have noticed that our development server throws an error that it failed to compile. Since we deleted the above files, we need to fix the imports as well. Checkout &lt;a href="https://github.com/itsnitinr/dogecoin-ticker/commit/7d3a7dc558217cea3b3ce58566543d97bd4c0669"&gt;this&lt;/a&gt; commit to see the additions and deletions in detail. Our final result will look like this:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;App.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Dogecoin Ticker&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We removed all the existing content generated by Create React App and replaced it with a &lt;code&gt;div&lt;/code&gt; containing an &lt;code&gt;h1&lt;/code&gt; with the text 'Dogecoin Ticker'. I've also changed the function to an arrow function but that's not mandatory. This function returns some JSX which is rendered by React. It can be used in multiple places in our project and is known as a component.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./index.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;StrictMode&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here, we've removed the import for &lt;code&gt;reportWebVitals&lt;/code&gt; since we deleted it as it was not necessary. We import the React and ReactDOM libraries which allow us to render a React component onto the DOM. The React component that we're rendering here is the &lt;code&gt;App&lt;/code&gt; component from &lt;code&gt;App.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;App.css &amp;amp; index.css&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In these files, we just remove all the preexisting styles that were generated. Essentially, these are just empty CSS files for now but we'll add some custom styles soon.&lt;/p&gt;

&lt;p&gt;At the end of this section, our website looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OUsTco5a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/eCZRzCA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OUsTco5a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/eCZRzCA.png" alt="Section 2 Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-it-look-pretty" class="anchor"&gt;
  &lt;/a&gt;
  Making It Look Pretty
&lt;/h2&gt;

&lt;p&gt;Since we're just rendering a &lt;code&gt;div&lt;/code&gt; and an &lt;code&gt;h1&lt;/code&gt; currently through the &lt;code&gt;App&lt;/code&gt; component currently, our design looks plain. To spice it up, let's add a logo (which you can download from  &lt;a href="https://gofile.io/d/Ki7rFD"&gt;here&lt;/a&gt;) and some styles. Move the &lt;code&gt;logo.png&lt;/code&gt; to the &lt;code&gt;src&lt;/code&gt; folder once downloaded. &lt;/p&gt;

&lt;p&gt;Begin with importing our logo into our &lt;code&gt;App.js&lt;/code&gt; file like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;logo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./logo.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, let's add more content to our &lt;code&gt;App&lt;/code&gt; component such as a title and a subtitle. You can use HTML elements like &lt;code&gt;h1&lt;/code&gt; and &lt;code&gt;h5&lt;/code&gt; for this purpose. To use our imported logo as the source for the &lt;code&gt;img&lt;/code&gt; tag, we use &lt;code&gt;{logo}&lt;/code&gt;. We can use simple JavaScript expressions and variables inside the &lt;code&gt;{}&lt;/code&gt; to render dynamic content. &lt;/p&gt;

&lt;p&gt;For the purpose of styling, we can add &lt;code&gt;classNames&lt;/code&gt; to the HTML entity. We do not use &lt;code&gt;class&lt;/code&gt; since it  can be misinterpreted as a JavaScript class (OOP concept). We can target these classes in our &lt;code&gt;App.css&lt;/code&gt; file to style them. Here's how my &lt;code&gt;App.js&lt;/code&gt; and &lt;code&gt;App.css&lt;/code&gt; files look like:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;App.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;logo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./logo.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Dogecoin Logo"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Live Dogecoin Price&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h5&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"subtitle"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Dogecoin To The Moon 🚀🌕&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h5&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;App.css&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.App&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff3b2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("data:image/svg+xml,%3Csvg width='180' height='180' viewBox='0 0 180 180' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M81.28 88H68.413l19.298 19.298L81.28 88zm2.107 0h13.226L90 107.838 83.387 88zm15.334 0h12.866l-19.298 19.298L98.72 88zm-32.927-2.207L73.586 78h32.827l.5.5 7.294 7.293L115.414 87l-24.707 24.707-.707.707L64.586 87l1.207-1.207zm2.62.207L74 80.414 79.586 86H68.414zm16 0L90 80.414 95.586 86H84.414zm16 0L106 80.414 111.586 86h-11.172zm-8-6h11.173L98 85.586 92.414 80zM82 85.586L87.586 80H76.414L82 85.586zM17.414 0L.707 16.707 0 17.414V0h17.414zM4.28 0L0 12.838V0h4.28zm10.306 0L2.288 12.298 6.388 0h8.198zM180 17.414L162.586 0H180v17.414zM165.414 0l12.298 12.298L173.612 0h-8.198zM180 12.838L175.72 0H180v12.838zM0 163h16.413l.5.5 7.294 7.293L25.414 172l-8 8H0v-17zm0 10h6.613l-2.334 7H0v-7zm14.586 7l7-7H8.72l-2.333 7h8.2zM0 165.414L5.586 171H0v-5.586zM10.414 171L16 165.414 21.586 171H10.414zm-8-6h11.172L8 170.586 2.414 165zM180 163h-16.413l-7.794 7.793-1.207 1.207 8 8H180v-17zm-14.586 17l-7-7h12.865l2.333 7h-8.2zM180 173h-6.613l2.334 7H180v-7zm-21.586-2l5.586-5.586 5.586 5.586h-11.172zM180 165.414L174.414 171H180v-5.586zm-8 5.172l5.586-5.586h-11.172l5.586 5.586zM152.933 25.653l1.414 1.414-33.94 33.942-1.416-1.416 33.943-33.94zm1.414 127.28l-1.414 1.414-33.942-33.94 1.416-1.416 33.94 33.943zm-127.28 1.414l-1.414-1.414 33.94-33.942 1.416 1.416-33.943 33.94zm-1.414-127.28l1.414-1.414 33.942 33.94-1.416 1.416-33.94-33.943zM0 85c2.21 0 4 1.79 4 4s-1.79 4-4 4v-8zm180 0c-2.21 0-4 1.79-4 4s1.79 4 4 4v-8zM94 0c0 2.21-1.79 4-4 4s-4-1.79-4-4h8zm0 180c0-2.21-1.79-4-4-4s-4 1.79-4 4h8z' fill='%23676659' fill-opacity='0.13' fill-rule='evenodd'/%3E%3C/svg%3E")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#222831&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.subtitle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#393e46&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For styling, I kept the minimum height as 100vh so that the whole screen is utilised. On top of that, I've added a pale yellow color as background. The background-image property generates a diamond shaped pattern whose code I got from &lt;a href="https://www.heropatterns.com/"&gt;https://www.heropatterns.com/&lt;/a&gt;. Lastly, I've gave the &lt;code&gt;div&lt;/code&gt; the display property of flex and aligned the content to be horizontally and vertically centered. Feel free to copy paste the CSS code.&lt;/p&gt;

&lt;p&gt;I also imported the Raleway font from Google Fonts and applied some basic style reset to the &lt;code&gt;index.css&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.css&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url('https://fonts.googleapis.com/css2?family=Raleway:wght@400;700&amp;amp;display=swap')&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;*,&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Raleway&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Here's how our website looks like now:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qMPges9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/B6n4qvu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qMPges9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/B6n4qvu.png" alt="Post Design Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We're getting there! If you found any difficulty, refer &lt;a href="https://github.com/itsnitinr/dogecoin-ticker/commit/ce3ac5cbfa77587b8c84ad896c5e05a4a20e35dd"&gt;this commit&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-price-card-component" class="anchor"&gt;
  &lt;/a&gt;
  Building Price Card Component
&lt;/h2&gt;

&lt;p&gt;To display the prices of Dogecoin, you might have noticed that I've used a card-like component. This is a custom React component and in this section, we'll be building just that. Components are highly useful when we want the same layout but with with different content. Instead of writing the HTML code for each card, I can build a component which can take the price as a prop and render the content dynamically. Time to show it in action.&lt;/p&gt;

&lt;p&gt;While component file can be created in the &lt;code&gt;src&lt;/code&gt; folder itself, it is common practice to create a new folder inside &lt;code&gt;src&lt;/code&gt; called &lt;code&gt;components&lt;/code&gt; so that all our React components are at the same place and our &lt;code&gt;src&lt;/code&gt; folder doesn't become too crowded. So, create a &lt;code&gt;components&lt;/code&gt; folder inside the &lt;code&gt;src&lt;/code&gt; folder. Inside the newly created &lt;code&gt;components&lt;/code&gt; folder, let's create a new file called &lt;code&gt;PriceCard.jsx&lt;/code&gt; for our custom component.&lt;/p&gt;

&lt;p&gt;We can use either &lt;code&gt;js&lt;/code&gt; or &lt;code&gt;jsx&lt;/code&gt; extension for components. Both would work perfectly fine and hence, I'm going to use the &lt;code&gt;.jsx&lt;/code&gt; extension this time. The price card component is just a styled &lt;code&gt;div&lt;/code&gt; which takes consists of the type of price (highest of the day, lowest of the day or last traded price) and the price itself as props. Since the price and price type will be different for each card, we can leverage props to make our price card dynamic.&lt;/p&gt;

&lt;p&gt;Here's how I did it:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PriceCard.jsx&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PriceCard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;border&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;high&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;8px solid #f44336&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;low&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;8px solid #4caf50&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;current&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;8px solid #3f51b5&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"price-card"&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;borderBottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;border&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"price-type"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;$ &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;PriceCard&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Firstly, we destructure the &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;price&lt;/code&gt; props which will be used to make the content of price card dynamic. For styling the bottom border dynamically (red border for highest of the day, green border for the lowest of the day and blue border for last traded price), I have a created an object with 3 keys: high, low and current. The &lt;code&gt;type&lt;/code&gt; prop will also be one of these values. By adding the &lt;code&gt;style&lt;/code&gt; attribute to the &lt;code&gt;div&lt;/code&gt;, the bottom border style has been made dynamic.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{{borderBottom: border[type]}}&lt;/code&gt; will evaluate to either &lt;code&gt;borderBottom: 8px solid #f44336&lt;/code&gt; , &lt;code&gt;borderBottom: 8px solid #4caf50&lt;/code&gt; or &lt;code&gt;borderBottom: 8px solid #3f51b5&lt;/code&gt;. Notice that we camel case instead of the usual kebab case. For outputting dynamic content in our JSX, we wrap it with &lt;code&gt;{}&lt;/code&gt; such as &lt;code&gt;{price}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that we have built and exported our custom &lt;code&gt;PriceCard&lt;/code&gt; component, let's import it into our &lt;code&gt;App&lt;/code&gt; component and use it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;App.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PriceCard&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/PriceCard&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;logo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./logo.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dogecoin Logo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Live Dogecoin Price&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h5&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"subtitle"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Dogecoin To The Moon 🚀🌕&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h5&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"prices-container"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PriceCard&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"low"&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PriceCard&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"high"&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PriceCard&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"current"&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Since we don't have the prices retrieved from the API yet, I have set some random price to the price attribute. I've also wrapped all the &lt;code&gt;PriceCard&lt;/code&gt; components in a &lt;code&gt;div&lt;/code&gt; which we'll be using for styling.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Append the following styles to App.css:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.prices-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-evenly&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.price-card&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fbf6f0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.price-type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;letter-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#393e46&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.price&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#222831&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once you have completed the above steps, you will be able to see something like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qAw2d1V9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/dHeuJp0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qAw2d1V9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/dHeuJp0.png" alt="Price Card Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's the &lt;a href="https://github.com/itsnitinr/dogecoin-ticker/commit/9541ab763464d02109185cf5923775d008ccc3c9"&gt;commit for above changes&lt;/a&gt; in case you faced any issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-dogecoin-price-from-api" class="anchor"&gt;
  &lt;/a&gt;
  Getting Dogecoin Price From API
&lt;/h2&gt;

&lt;p&gt;Onto the final part of this project, which is to fetch the highest price of the day, lowest price of the day and last traded price from an API. This is also a great time to introduce you to React Hooks. We'll be using the &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;useEffect&lt;/code&gt; hook in this section. &lt;/p&gt;

&lt;p&gt;The API that we'll be using is the &lt;a href="https://github.com/WazirX/wazirx-api"&gt;WazirX API&lt;/a&gt;, which is a free API that allows us to get the price of lots of cryptocurrencies. The endpoint for fetching the price of Dogecoin compared to US Dollar is &lt;a href="https://api.wazirx.com/api/v2/tickers/dogeusdt"&gt;https://api.wazirx.com/api/v2/tickers/dogeusdt&lt;/a&gt;. This returns a JSON with all the data we need. However, to avoid issues due to CORS, use this endpoint: &lt;a href="https://nitinr-cors.herokuapp.com/https://api.wazirx.com/api/v2/tickers/dogeusdt"&gt;https://nitinr-cors.herokuapp.com/https://api.wazirx.com/api/v2/tickers/dogeusdt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The response from looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"at"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1612629617&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"ticker"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"buy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.05"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"sell"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.05001"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"low"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.0447283"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"high"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.0517549"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"last"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.05"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"vol"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"19364432.0"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Also, we will be using &lt;code&gt;axios&lt;/code&gt; to make a GET request to the above endpoint. We need to install &lt;code&gt;axios&lt;/code&gt; before we can begin to use it. So, stop the React development server by pressing Ctrl + C. Now type &lt;code&gt;npm install axios&lt;/code&gt; and run the command. Once done, start the server back using &lt;code&gt;npm start&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Since the price of Dogecoin is subject to change every time we make an API call, we can keep it in the state using the &lt;code&gt;useState&lt;/code&gt; hook. Whenever the API is called, we can set the state to the newly fetched data so that our application can re-render accordingly. &lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;useEffect&lt;/code&gt; hook, we can make a call to our API as soon as our component is mounted. With the help of &lt;code&gt;setInterval&lt;/code&gt; function, we can call a function, which in turn calls our API every 10 seconds. Here's the complete &lt;code&gt;App.js&lt;/code&gt; component followed by the explanation:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;App.js:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PriceCard&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/PriceCard&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;logo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./logo.png&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ticker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTicker&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;low&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;high&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getDogecoinPrice&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://nitinr-cors.herokuapp.com/https://api.wazirx.com/api/v2/tickers/dogeusdt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setTicker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ticker&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;getDogecoinPrice&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;getDogecoinPrice&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;logo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Dogecoin Logo"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Live Dogecoin Price&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h5&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"subtitle"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Dogecoin To The Moon 🚀🌕&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h5&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"prices-container"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PriceCard&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"low"&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ticker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;low&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PriceCard&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"high"&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ticker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;high&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PriceCard&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"current"&lt;/span&gt; &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ticker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;last&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Dogecoin price updated every 10 seconds seconds from&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://wazirx.com/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;WazirX API&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We import the &lt;code&gt;useState&lt;/code&gt; and &lt;code&gt;useEffect&lt;/code&gt; hooks from &lt;code&gt;react&lt;/code&gt; library as named exports and &lt;code&gt;axios&lt;/code&gt; from the &lt;code&gt;axios&lt;/code&gt; package as a default export. The &lt;code&gt;useState&lt;/code&gt; hooks takes in the initial value which we have set to an object having values of 0 for high, low and last. It returns us a variable which holds the current state and a function to set the new state. In our case, these are the &lt;code&gt;ticker&lt;/code&gt; and &lt;code&gt;setTicker&lt;/code&gt; respectively.&lt;/p&gt;

&lt;p&gt;Inside the &lt;code&gt;useEffect&lt;/code&gt; hook, we define an asynchronous function (since API calls are asynchronous in nature) named as &lt;code&gt;getDogecoinPrice&lt;/code&gt; in which we make a request to our API endpoint using &lt;code&gt;axios&lt;/code&gt;. We destructure the data from the response and set the state of ticker to &lt;code&gt;data.ticker&lt;/code&gt; since we need only the ticker data from response. After the function definition, we call this function once followed by a &lt;code&gt;setInterval&lt;/code&gt; with a delay of 10000ms (10 seconds) which will run our function and call our API every 10 seconds to get the updated price.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;useEffect&lt;/code&gt; hooks also take an array of dependencies as a second argument but since we need to run the &lt;code&gt;setInterval&lt;/code&gt; only once, when the component is mounted, we can keep it as an empty array.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;price&lt;/code&gt; attribute of &lt;code&gt;PriceCard&lt;/code&gt; component can be set to &lt;code&gt;ticker.low&lt;/code&gt;, &lt;code&gt;ticker.high&lt;/code&gt; and &lt;code&gt;ticker.last&lt;/code&gt; respectively to get the lowest, highest and last traded value. Since &lt;code&gt;ticker&lt;/code&gt; is a state variable, React will automatically re-render the UI every time its value changes. &lt;/p&gt;

&lt;p&gt;Finally, here's what we have built:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mdGnPBY4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/INVQRd2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mdGnPBY4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/INVQRd2.png" alt="Final Output"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Congratulations! You have built yourself a nice and simple web application using React to stay updated with Dogecoin. If you faced any difficulties during building it, please have a look at the GitHub repo or post a comment down below and I'll be more than happy to help you out. That's all, folks!  &lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Optimize tests with Setup &amp; Teardown methods</title>
      <author>Automation Bro</author>
      <pubDate>Sun, 07 Feb 2021 15:52:21 +0000</pubDate>
      <link>https://dev.to/automationbro/optimize-tests-with-setup-teardown-methods-415</link>
      <guid>https://dev.to/automationbro/optimize-tests-with-setup-teardown-methods-415</guid>
      <description>&lt;p&gt;In this post, we will learn how we can use SeleniumBase Setup &amp;amp; Teardown methods to optimize our tests even further. If you are not familiar with setup &amp;amp; teardown concepts, essentially, it allows you to run certain steps before and after your actual test.&lt;/p&gt;

&lt;p&gt;So, when you run the Setup method, it will trigger the steps BEFORE your test will run and the TearDown will run the steps AFTER your test has finished.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup-method" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Setup Method&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The setup method will run the steps before each of your tests. Let’s take a look at the sample code below –&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZlEUM_5J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pij3uh1euhu465n4qrua.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZlEUM_5J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pij3uh1euhu465n4qrua.png" alt="setup code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Typically, you would use your setup method for any repetitive code between your tests such as opening the page, test data creation, or log in.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#teardown-method" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;TearDown method&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The tearDown method will run the steps after each of your tests has finished running. Let’s take a look at the sample code below –&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bncYyikh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k8j7mtrrjua0hfycyod1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bncYyikh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/k8j7mtrrjua0hfycyod1.png" alt="teardown code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Typically, you would use the tearDown method for actions such as taking screenshots after the test has finished running, logging some data, or for Logout.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#check-out-the-video-below-to-learn-more-about-the-setup-amp-teardown-methods-using-selenium-python-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Check out the video below to learn more about the Setup &amp;amp; TearDown methods using Selenium Python –&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/uZ-sgPTM0eM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;📧 Subscribe to my &lt;a href="https://automationbro.com/mailing-list"&gt;mailing list&lt;/a&gt; to get access to more content like this &lt;/p&gt;

&lt;p&gt;👍 Follow &lt;a href="https://twitter.com/automationbro"&gt;automationbro&lt;/a&gt; on Twitter for the latest updates&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;This post was written with the help of a high amount of caffeine. And, if this post helped you out and you would like to support my work, you can do that by clicking on the button below and continue supporting my caffeine love :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/automationbro"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lUHFj71T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4aw2ub3f4qkyjk0ivwt4.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also support me by liking and sharing this content.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>python</category>
      <category>testing</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>If you were the new CEO of Amazon Web Services what would be your first executive order?</title>
      <author>Andrew Brown 🇨🇦</author>
      <pubDate>Sun, 07 Feb 2021 15:35:10 +0000</pubDate>
      <link>https://dev.to/andrewbrown/if-you-were-the-new-ceo-of-amazon-web-services-what-would-be-your-first-executive-order-1ik7</link>
      <guid>https://dev.to/andrewbrown/if-you-were-the-new-ceo-of-amazon-web-services-what-would-be-your-first-executive-order-1ik7</guid>
      <description>&lt;p&gt;Andy Jassy who is the current CEO of Amazon Web Services (AWS) is going to be the new CEO of Amazon. It's uncertain who will be next to the CEO of AWS. &lt;/p&gt;

&lt;p&gt;If you could have full control of AWS what would you decree?&lt;/p&gt;

&lt;p&gt;I would add a Dark Theme to the AWS Console.&lt;/p&gt;

</description>
      <category>aws</category>
    </item>
    <item>
      <title>Filtering, sorting, and pagination in lists with vue-dataset</title>
      <author>Giannis Koutsaftakis</author>
      <pubDate>Sun, 07 Feb 2021 14:49:19 +0000</pubDate>
      <link>https://dev.to/kouts/filtering-sorting-and-pagination-in-lists-with-vue-dataset-1kh3</link>
      <guid>https://dev.to/kouts/filtering-sorting-and-pagination-in-lists-with-vue-dataset-1kh3</guid>
      <description>&lt;p&gt;Displaying a collection of items is probably the most common thing we implement in our day to day work as frontend developers. We display collections as tables, list groups, cards, paragraphs, or anything really.&lt;/p&gt;

&lt;p&gt;Often times -even in the simpler of cases- we need to have features like filtering, sorting and pagination for our lists. But implementing the same functionalities over and over again is not the way to go. We want to keep our codebase &lt;code&gt;DRY&lt;/code&gt; and  &lt;strong&gt;reuse&lt;/strong&gt; stuff, but without being restricted by the HTML layout.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vuedataset-to-the-rescue" class="anchor"&gt;
  &lt;/a&gt;
  vue-dataset to the rescue
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/kouts/vue-dataset"&gt;vue-dataset&lt;/a&gt; is a set of Vue.js components that consists of a main provider (wrapper) component: &lt;code&gt;dataset&lt;/code&gt;, an item component: &lt;code&gt;dataset-item&lt;/code&gt; and additional components for handling searching and pagination. Combining these, you can create virtually any layout for displaying your lists while still reusing the same functionality.&lt;/p&gt;

&lt;p&gt;Since all data and methods are provided by the &lt;code&gt;dataset&lt;/code&gt; component to its wrapped children, it's also super easy to create your own additional components to replace the defaults for pagination, items per page, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#components" class="anchor"&gt;
  &lt;/a&gt;
  Components
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;vue-dataset&lt;/code&gt; contains 6 components&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Component&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;dataset&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Responsible for distributing data/methods to children (wrapper/data provider)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;dataset-item&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Renders the dataset items&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;dataset-info&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Renders the paging information&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;dataset-pager&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Renders the paging buttons&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;dataset-search&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Renders the search input field&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;dataset-show&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Renders the "items per page" dropdown select&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#features-at-a-glance" class="anchor"&gt;
  &lt;/a&gt;
  Features at a glance
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#highly-customizable-dom-structure" class="anchor"&gt;
  &lt;/a&gt;
  Highly customizable DOM structure
&lt;/h4&gt;

&lt;p&gt;You can use any HTML structure to present your data. The &lt;code&gt;dataset-item&lt;/code&gt; component used to display the item rows of the dataset, leverages a dynamic component so that it can take the form of any tag like div, li, tr, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#custom-filtering-based-on-the-row-values-from-all-or-specific-data-keys" class="anchor"&gt;
  &lt;/a&gt;
  Custom filtering based on the row values from all or specific data keys
&lt;/h4&gt;

&lt;p&gt;You can define "external" filters for your data (i.e how certain properties of the data will be filtered).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#search-as-feature-allows-for-searching-using-a-custom-search-method" class="anchor"&gt;
  &lt;/a&gt;
  "Search as" feature allows for searching using a custom search method
&lt;/h4&gt;

&lt;p&gt;Useful in situations when you have e.g dates in YYYY-mm-dd format inside your dataset but you are displaying the formatted value (e.g in dd.mm.YYYY format). In that case, you want the user to be able to search the dates with the same format as it appears on-screen. This feature also allows searching the data using an external library such as e.g &lt;a href="https://fusejs.io/"&gt;fuse.js&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#multi-column-searching-search-data-keys-are-configurable" class="anchor"&gt;
  &lt;/a&gt;
  Multi "column" searching, search data keys are configurable
&lt;/h4&gt;

&lt;p&gt;The "Search in" feature allows the definition of which properties of the data should be searchable. Useful when sometimes you want to restrict searching only to properties that get displayed on the screen.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#sort-as-feature-allows-for-sorting-using-a-custom-sorting-method" class="anchor"&gt;
  &lt;/a&gt;
  "Sort as" feature allows for sorting using a custom sorting method
&lt;/h4&gt;

&lt;p&gt;Useful in situations when you have values that can't be sorted natively such as currency or dates in certain formats.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#multi-column-sorting-sortable-data-keys-are-configurable" class="anchor"&gt;
  &lt;/a&gt;
  Multi "column" sorting, sortable data keys are configurable
&lt;/h4&gt;

&lt;p&gt;Sort the dataset by multiple attributes simultaneously.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#pagination" class="anchor"&gt;
  &lt;/a&gt;
  Pagination
&lt;/h4&gt;

&lt;p&gt;The dataset data is paginated by default, &lt;code&gt;vue-dataset&lt;/code&gt; comes with "items per page", "pagination", and "pagination information" components.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#global-search-with-debounce-setting" class="anchor"&gt;
  &lt;/a&gt;
  Global search with debounce setting
&lt;/h4&gt;

&lt;p&gt;The default &lt;code&gt;dataset-search&lt;/code&gt; component comes with &lt;code&gt;debounce&lt;/code&gt; capability with a customizable timeout time. Useful you have a lot of items and you want to wait until the user stops typing before executing the filter logic.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4&gt;
  &lt;a href="#easy-to-extend-with-custom-components" class="anchor"&gt;
  &lt;/a&gt;
  Easy to extend with custom components
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://github.com/kouts/vue-dataset"&gt;vue-dataset&lt;/a&gt; main wrapper &lt;code&gt;dataset&lt;/code&gt; component uses &lt;a href="https://vuejs.org/v2/api/#provide-inject"&gt;provide/inject&lt;/a&gt; and also &lt;a href="https://vuejs.org/v2/guide/components-slots.html#Scoped-Slots"&gt;scoped slots&lt;/a&gt; to distribute data and methods to its children. Whichever method you choose, it's very easy to create totally custom versions of &lt;code&gt;vue-dataset's&lt;/code&gt; built-in components.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#checkout-vuedataset" class="anchor"&gt;
  &lt;/a&gt;
  Checkout &lt;a href="https://github.com/kouts/vue-dataset"&gt;vue-dataset&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;You can view demos and read the documentation of vue-dataset &lt;a href="https://vue-dataset-demo.netlify.app/"&gt;here&lt;/a&gt;.&lt;br&gt;
Have fun creating lists!&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>datatable</category>
      <category>webdev</category>
    </item>
    <item>
      <title>React ColorPicker</title>
      <author>PrimeTek</author>
      <pubDate>Sun, 07 Feb 2021 14:49:07 +0000</pubDate>
      <link>https://dev.to/primetek/react-colorpicker-15d0</link>
      <guid>https://dev.to/primetek/react-colorpicker-15d0</guid>
      <description>&lt;p&gt;React ColorPicker is an input component to select a color.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup" class="anchor"&gt;
  &lt;/a&gt;
  Setup
&lt;/h3&gt;

&lt;p&gt;Refer to PrimeReact &lt;a href="https://primefaces.org/primereact/showcase/#/setup"&gt;setup documentation&lt;/a&gt; for download and installation steps for your environment.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#import" class="anchor"&gt;
  &lt;/a&gt;
  Import
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ColorPicker&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;primereact/colorpicker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#getting-started" class="anchor"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h3&gt;

&lt;p&gt;ColorPicker is used as a controlled input component with &lt;strong&gt;value&lt;/strong&gt; and &lt;strong&gt;onChange&lt;/strong&gt; properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ColorPicker&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;{color}&lt;/span&gt; &lt;span class="na"&gt;onChange=&lt;/span&gt;&lt;span class="s"&gt;{(e)&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; setColor(e.value)} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#formats" class="anchor"&gt;
  &lt;/a&gt;
  Formats
&lt;/h3&gt;

&lt;p&gt;Default color format to use in value binding is "hex" and other possible values are "rgb" and "hsb". Example below has 3 colorpickers having default values with different formats.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ColorPicker&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;{color1}&lt;/span&gt; &lt;span class="na"&gt;onChange=&lt;/span&gt;&lt;span class="s"&gt;{(e)&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; setColor1(e.value)} /&amp;gt;

&lt;span class="nt"&gt;&amp;lt;ColorPicker&lt;/span&gt; &lt;span class="na"&gt;format=&lt;/span&gt;&lt;span class="s"&gt;"rgb"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;{color2}&lt;/span&gt; &lt;span class="na"&gt;onChange=&lt;/span&gt;&lt;span class="s"&gt;{(e)&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; setColor2(e.value)} /&amp;gt;

&lt;span class="nt"&gt;&amp;lt;ColorPicker&lt;/span&gt; &lt;span class="na"&gt;format=&lt;/span&gt;&lt;span class="s"&gt;"hsb"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;{color3}&lt;/span&gt; &lt;span class="na"&gt;onChange=&lt;/span&gt;&lt;span class="s"&gt;{(e)&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; setColor3(e.value)}/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#theming" class="anchor"&gt;
  &lt;/a&gt;
  Theming
&lt;/h3&gt;

&lt;p&gt;ColorPicker supports various themes featuring Material, Bootstrap, Fluent as well as your own custom themes via the &lt;a href="https://primefaces.org/primereact/showcase/#/theming"&gt;Designer&lt;/a&gt; tool.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources" class="anchor"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;p&gt;Visit the PrimeReact &lt;a href="https://primefaces.org/primereact/showcase/#/colorpicker"&gt;ColorPicker&lt;/a&gt; showcase for demos and documentation.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 CV don'ts for software engineers</title>
      <author>A. S. Zaghloul</author>
      <pubDate>Sun, 07 Feb 2021 13:46:01 +0000</pubDate>
      <link>https://dev.to/medsaad/5-cv-don-ts-for-software-engineers-19p0</link>
      <guid>https://dev.to/medsaad/5-cv-don-ts-for-software-engineers-19p0</guid>
      <description>&lt;p&gt;In this video, you will be introduced to some bad practices that many software engineers do when they are writing or designing their CV.&lt;/p&gt;

&lt;p&gt;Notice that many of this practices could be needed or critical for other job positions. However, it's not favorable for software engineers.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/sms7KjdvI7Y"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Check out previous bash tutorials:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/-JY9DDLHaD8"&gt;Bash commands for beginners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/UXM8KNTC3aY"&gt;Bash commands chaining, redirecting and nesting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/H_bU7u2dvT8"&gt;Bash shell file walk-through&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/BdU5SflFHKk"&gt;Bash scripting: If conditions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>discuss</category>
      <category>tutorial</category>
      <category>career</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Boost your CSS animations with Intersection Observer API</title>
      <author>Rui Sousa</author>
      <pubDate>Sun, 07 Feb 2021 13:15:47 +0000</pubDate>
      <link>https://dev.to/itzami/boost-your-css-animations-with-intersection-observer-api-k3m</link>
      <guid>https://dev.to/itzami/boost-your-css-animations-with-intersection-observer-api-k3m</guid>
      <description>&lt;p&gt;CSS animations can be a pain in the 🍑, and what's even worst is to trigger them at the exact moment. For that exact reason, &lt;em&gt;and if I may be perfectly honest with you&lt;/em&gt;, I opt for not using them most of the time. However...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#presenting-intersection-observer-api" class="anchor"&gt;
  &lt;/a&gt;
  Presenting: Intersection Observer API
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Before starting, if you need a refresher on what's an API, &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Introduction"&gt;this&lt;/a&gt; is a good place to get info on it&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You may think that I'm out of my mind for suggesting that you should use an API for animating CSS but hear me out... &lt;a href="https://github.blog/2021-01-29-making-githubs-new-homepage-fast-and-performant/"&gt;GitHub&lt;/a&gt; uses it to make their homepage more performant and faster so you know it must be good!&lt;/p&gt;

&lt;p&gt;When we usually want to check an element's position in the window we might end up using stuff like &lt;code&gt;elem.clientTop&lt;/code&gt;, &lt;code&gt;elem.offsetTop&lt;/code&gt; or even &lt;code&gt;elem.getBoundingClientRect()&lt;/code&gt; but the truth is that these properties/methods will trigger the browser to calculate the required style and layout (check the whole list of properties that target this and a further explanation &lt;a href="https://gist.github.com/paulirish/5d52fb081b3570c81e3a"&gt;here&lt;/a&gt;) which creates a performance bottleneck.&lt;/p&gt;

&lt;p&gt;A way to circumvent this is by using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"&gt;Intersection Observer API&lt;/a&gt;, which, according to the MDN documentation, 'provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's viewport.'. So, basically, we'll just monitor if an element will enter/exit another element/the viewport and that's way easier for the browser to process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-how-do-you-do-it" class="anchor"&gt;
  &lt;/a&gt;
  So... How do you do it?
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver"&gt;IntersectionObserver interface&lt;/a&gt; can be created very easily and all you have to do is to pass a callback to it and some options. The &lt;strong&gt;callback&lt;/strong&gt; is what decides what will happen to the list of &lt;em&gt;IntersectionObserverEntry&lt;/em&gt; objects and the &lt;strong&gt;options&lt;/strong&gt; allow you to control the circumstances in which the &lt;em&gt;callback&lt;/em&gt; will be called (please refer to the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"&gt;MDN documentation&lt;/a&gt; for full details on this).&lt;/p&gt;

&lt;p&gt;For example purposes only, we'll not define our &lt;strong&gt;options&lt;/strong&gt; (which will make them adopt some default values) and we'll simply work with our &lt;strong&gt;callback&lt;/strong&gt;, so our initial setup would be something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;expansionObserver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;intersectionRatio&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// something here&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// something here&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now that we have our &lt;em&gt;expansionObserver&lt;/em&gt;, we need to grab the elements that we want to animate. For this we'll use &lt;code&gt;document.querySelectorAll()&lt;/code&gt; and we'll get all the elements with the class &lt;code&gt;.expand&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, on our HTML it would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"section-one"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"section-two"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"expand"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hello&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And our JavaScript would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;elementsToExpand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.expand&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After this, we need to tell the &lt;code&gt;IntersectionObserver&lt;/code&gt; that we want to &lt;code&gt;observe&lt;/code&gt; these elements, and since we're using &lt;code&gt;querySelectorAll()&lt;/code&gt; we need to loop over &lt;code&gt;elementsToExpand&lt;/code&gt; and we'll use a &lt;code&gt;forEach()&lt;/code&gt; for it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;elementsToExpand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;expansionObserver&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To finish our JavaScript part, we need to fill the &lt;code&gt;if/else&lt;/code&gt; statement we wrote on our callback. Here we'll want to style our &lt;code&gt;elementsToExpand&lt;/code&gt; with the animation that they should have like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;expansionObserver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;intersectionRatio&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;animation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`expansion 2s ease-in-out`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;animation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So, this is the whole behaviour that you have to recreate and now all we have to do is to define in our CSS this &lt;code&gt;expansion&lt;/code&gt; animation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;expansion&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;from&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scaleY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And we're done! You can now check the full example preview and play around with it on &lt;a href="https://codesandbox.io/s/billowing-paper-lm0ij?file=/index.html:310-352"&gt;CodeSandbox&lt;/a&gt;! I've added an extra element with a different animation so you could get a full grip of what's happening! 😄&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-thats-it" class="anchor"&gt;
  &lt;/a&gt;
  And that's it!
&lt;/h2&gt;

&lt;p&gt;What did you think about the &lt;code&gt;Intersection Observer API&lt;/code&gt;? Will you give it a try on your next project?&lt;br&gt;
Let me know what you thought about this post and feel free to follow me on &lt;a href="https://twitter.com/HeyItzaMi"&gt;Twitter&lt;/a&gt; 🤘&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to learn web accessibility</title>
      <author>Spyros Argalias</author>
      <pubDate>Sun, 07 Feb 2021 12:05:44 +0000</pubDate>
      <link>https://dev.to/sargalias/how-to-learn-web-accessibility-1d9k</link>
      <guid>https://dev.to/sargalias/how-to-learn-web-accessibility-1d9k</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/5LIf_VqxUyA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For everything you need to know about accessibility, check out &lt;a href="https://programmingduck.com/articles/accessibility"&gt;Web accessibility - Everything you need to know, on Programming Duck&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer: I'm not a lawyer. This article only represents my personal opinion and current understanding. It is not legal advice. Please consult a lawyer for information on the legal aspects of accessibility.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So you've decided to learn web accessibility? This article will show you how to learn it from complete beginner to advanced.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites-semantic-html" class="anchor"&gt;
  &lt;/a&gt;
  Prerequisites - Semantic HTML
&lt;/h2&gt;

&lt;p&gt;The most important thing you can do for web accessibility is to use semantic HTML. HTML elements already have built-in accessibility semantics. As long as you use the correct elements and attributes, you're already doing 80% of what you need to do for accessibility.&lt;/p&gt;

&lt;p&gt;If you work on the front end, this is something that you should already know how to do. However, it's always good to refresh your knowledge.&lt;/p&gt;

&lt;p&gt;If you need a refresher, have a look at the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element"&gt;HTML element reference on MDN&lt;/a&gt;. It's a page that you can scan over in a few minutes, or read fully in about 20 minutes. It lists all of the HTML elements and what they should be used for.&lt;/p&gt;

&lt;p&gt;If you need additional information on a particular element, you can visit the reference page for that element. For example, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body"&gt;here is the MDN reference page for the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Otherwise, if you're a beginner developer and you don't know semantic HTML yet, I recommend starting with some beginner web development resources instead. Then, you can continue learning accessibility afterwards.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-and-practice" class="anchor"&gt;
  &lt;/a&gt;
  Testing and practice
&lt;/h2&gt;

&lt;p&gt;When learning anything, practice is essential.&lt;/p&gt;

&lt;p&gt;When it comes to accessibility, you practice by using the website as a person with disabilities would. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using only the keyboard for navigation&lt;/li&gt;
&lt;li&gt;Using only a screen reader to experience the content of a web page (without using sight)&lt;/li&gt;
&lt;li&gt;Using vision deficiency simulation tools on your website&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First-hand experience can't be beaten, so it's really good to do these things. You don't have to do all of them every time, but the more you practice the better.&lt;/p&gt;

&lt;p&gt;Additionally, as with anything, you need to test your work. These are the kinds of things you will be testing when you're doing accessibility work professionally. Therefore, it's good to get used to it early.&lt;/p&gt;

&lt;p&gt;If you're not sure on how to do these things, the learning resources below will help you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rI-UryKO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e914zahhnryi7uv2zodc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rI-UryKO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e914zahhnryi7uv2zodc.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources-for-learning-web-accessibility" class="anchor"&gt;
  &lt;/a&gt;
  Resources for learning web accessibility
&lt;/h2&gt;

&lt;p&gt;After semantic HTML, which is essential, you need to actually learn about accessibility. There are many good resources for doing so. Here are some that I've personally tried and recommend.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introductory-video-courses" class="anchor"&gt;
  &lt;/a&gt;
  Introductory video courses
&lt;/h3&gt;

&lt;p&gt;I've personally watched two introductory video courses which I highly recommend:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://frontendmasters.com/courses/web-accessibility/"&gt;Website accessibility by Jon Kuperman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://frontendmasters.com/courses/javascript-accessibility/"&gt;Accessibility in JavaScript applications by Marcy Sutton&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition to those courses, I imagine that there are many other accessibility courses which are quite good. If you find a different course that you want to watch, then by all means do so.&lt;/p&gt;

&lt;p&gt;These are introductory courses. However, they cover a lot. I suspect that if you just watch these two courses, you'll know more about accessibility than most front end developers. Then, as long as you refer to a few important resources as you work, you'll probably be able to do most, if not all, of the required accessibility work.&lt;/p&gt;

&lt;p&gt;However, if you stop here, you won't get as much insight into accessibility as you would if you studied from some of the more thorough resources.&lt;/p&gt;

&lt;p&gt;If you only want to watch one of them, I would suggest &lt;a href="https://frontendmasters.com/courses/web-accessibility/"&gt;website accessibility by Jon Kuperman&lt;/a&gt;. They're both great courses, but this one covers the basics a bit more broadly. The other one is a bit more advanced and more suitable for JavaScript applications specifically.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mdn-and-webdev" class="anchor"&gt;
  &lt;/a&gt;
  MDN and web.dev
&lt;/h3&gt;

&lt;p&gt;Here's the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility"&gt;MDN page on accessibility&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here's the &lt;a href="https://web.dev/accessible/"&gt;web.dev page on accessibility&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These websites are staples for front end developers.&lt;/p&gt;

&lt;p&gt;In particular, MDN is very thorough with its accessibility information. If you want to learn accessibility quite well as a front end developer, I highly recommend reading through MDN's resources. They cover:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Semantic HTML&lt;/li&gt;
&lt;li&gt;Different disabilities and assistive technologies&lt;/li&gt;
&lt;li&gt;Creating custom widgets&lt;/li&gt;
&lt;li&gt;WAI-ARIA&lt;/li&gt;
&lt;li&gt;And more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The web.dev information is great as well, but less thorough. I consider it introductory level, but perhaps slightly more thorough than the video courses mentioned earlier.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#webaim-articles" class="anchor"&gt;
  &lt;/a&gt;
  WebAIM articles
&lt;/h3&gt;

&lt;p&gt;The WebAIM articles are even more thorough than MDN.&lt;/p&gt;

&lt;p&gt;They are great for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Understanding a lot about the motivation for accessibility.&lt;/li&gt;
&lt;li&gt;Understanding a lot about different kinds of disabilities and how people with those disabilities use websites.&lt;/li&gt;
&lt;li&gt;Learning accessibility very thoroughly.&lt;/li&gt;
&lt;li&gt;Providing recommendations on specific topics about accessibility. For example, they have a &lt;a href="https://webaim.org/techniques/alttext/"&gt;detailed article specifically about alt text for images&lt;/a&gt;. I haven't seen anything comparable elsewhere.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The only potential downside is that the WebAIM articles don't have many code examples. If you prefer code examples, MDN may be more suitable for you. However, if you're confident with HTML and JavaScript, you may be able to implement the concepts you learn without code examples. In that case, the WebAIM articles should be fine.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#alternative-learning-resources" class="anchor"&gt;
  &lt;/a&gt;
  Alternative learning resources
&lt;/h3&gt;

&lt;p&gt;Some people prefer learning from books. If that's you, then please feel free to use a book instead. Unfortunately I can't recommend one since I haven't read any books on this topic. If someone from the comments would like to offer any suggestions, please do so.&lt;/p&gt;

&lt;p&gt;Also, please feel free to use any other good resource that's not mentioned here.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5XJ4SBxC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hdljje2g1pudf4ajatx7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5XJ4SBxC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hdljje2g1pudf4ajatx7.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#additional-recommended-learning" class="anchor"&gt;
  &lt;/a&gt;
  Additional recommended learning
&lt;/h2&gt;

&lt;p&gt;There are some additional things to learn that may not be sufficiently covered in other resources.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accessibility-statements" class="anchor"&gt;
  &lt;/a&gt;
  Accessibility statements
&lt;/h3&gt;

&lt;p&gt;Some countries (such as the UK) require accessibility statements. Even if they don't, &lt;a href="https://www.w3.org/WAI/planning/statements/"&gt;WCAG mentions that there are many good reasons to have one&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please see the &lt;a href="https://www.w3.org/WAI/planning/statements/"&gt;WCAG page on accessibility statements&lt;/a&gt; to learn about them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#waiaria" class="anchor"&gt;
  &lt;/a&gt;
  WAI-ARIA
&lt;/h3&gt;

&lt;p&gt;Another thing that you should learn properly is &lt;a href="https://www.w3.org/WAI/standards-guidelines/aria/"&gt;WAI-ARIA&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;WAI-ARIA has many documents. The one you want is the &lt;a href="https://www.w3.org/TR/wai-aria-practices-1.2/"&gt;WAI-ARIA authoring practices document&lt;/a&gt;. It provides explanations and recommendations for how to apply ARIA correctly. Also, it's intended for developers, so it's not too difficult to read.&lt;/p&gt;

&lt;p&gt;Also, you can primarily use it as a reference. This means that you don't have to read it from start to finish. You can just read some of it so you're aware of what it contains. Then, you can refer to it if something relevant comes up in your work.&lt;/p&gt;

&lt;p&gt;Overall, it's probably sufficient to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Read the introductory section.&lt;/li&gt;
&lt;li&gt;Read about some of the design patterns and widgets. Just a few will do. This will give you an idea of what you're expected to do if you create custom widgets in the future.&lt;/li&gt;
&lt;li&gt;Scan through the rest.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then, refer to it in the future as necessary.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-learning" class="anchor"&gt;
  &lt;/a&gt;
  Further learning
&lt;/h2&gt;

&lt;p&gt;If you want even more knowledge than that, here are a few things you can do.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#follow-web-accessibility-experts" class="anchor"&gt;
  &lt;/a&gt;
  Follow web accessibility experts
&lt;/h3&gt;

&lt;p&gt;Web accessibility experts do the latest research and constantly improve the field of web accessibility.&lt;/p&gt;

&lt;p&gt;By following them (following them on Twitter, reading their blogs, etc.), you'll be able to learn things from them that aren't in the official specification yet.&lt;/p&gt;

&lt;p&gt;Additionally, they may recommend useful techniques that may never be incorporated in the specification.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#look-at-the-wcag-documents" class="anchor"&gt;
  &lt;/a&gt;
  Look at the WCAG documents
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://www.w3.org/WAI/standards-guidelines/wcag/docs/"&gt;WCAG documents&lt;/a&gt; include the official specification, a large list of accessibility techniques and the "Understanding WCAG" document.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#search-for-more-information-on-specific-topics" class="anchor"&gt;
  &lt;/a&gt;
  Search for more information on specific topics
&lt;/h3&gt;

&lt;p&gt;If you're interested in a specific topic, the fastest way to learn more about it is probably to search about the topic using a search engine.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IsaNewoM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q96ijyp8t5if7k236ffw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IsaNewoM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q96ijyp8t5if7k236ffw.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learning-plan" class="anchor"&gt;
  &lt;/a&gt;
  Learning plan
&lt;/h2&gt;

&lt;p&gt;That's a lot of resources. What should you actually do and which resources should you learn from? It depends on how much you want to learn, how much time you have and your preferred way of learning.&lt;/p&gt;

&lt;p&gt;If you want a good introduction to the topic, I recommend watching one (or both) of the video courses. It's possible to stop there. At that point, you'll know much more about accessibility than most developers. It's also possible to skip this step if you're not interested in introductory courses.&lt;/p&gt;

&lt;p&gt;If you want to learn accessibility even better, go through the MDN resources. They're very thorough. Again, you can skip this step if you don't want to do it.&lt;/p&gt;

&lt;p&gt;If you want something even more thorough than that, then read all of the WebAIM articles.&lt;/p&gt;

&lt;p&gt;Personally, I studied from all of those resources in that order and I found them very useful. However, in your case, you can pick and choose the ones you like.&lt;/p&gt;

&lt;p&gt;Also, it's fine to go through some resources, stop and resume your learning in the future.&lt;/p&gt;

&lt;p&gt;Alternatively, you can use a completely different plan and different resources. It's all up to you.&lt;/p&gt;

&lt;p&gt;Finally, spend some time to learn about accessibility statements and WAI-ARIA specifically.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-notes" class="anchor"&gt;
  &lt;/a&gt;
  Final notes
&lt;/h2&gt;

&lt;p&gt;That's it for this article.&lt;/p&gt;

&lt;p&gt;If you have any feedback, or even counter-arguments, please let me know in the comments.&lt;/p&gt;

&lt;p&gt;Next, if you want to know more about accessibility, as well as how to apply it while you work, please see the article &lt;a href="https://programmingduck.com/articles/accessibility"&gt;Web accessibility - Everything you need to know&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>webdev</category>
      <category>programming</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Sorting algorithms: JavaScript - Merge Sort 🚀</title>
      <author>Codespresso</author>
      <pubDate>Sun, 07 Feb 2021 11:39:24 +0000</pubDate>
      <link>https://dev.to/codespresso/sorting-algorithms-javascript-merge-sort-34d3</link>
      <guid>https://dev.to/codespresso/sorting-algorithms-javascript-merge-sort-34d3</guid>
      <description>&lt;p&gt;Table Of Contents&lt;br&gt;
        * 🤓 &lt;a href="#intro"&gt;INTRODUCTION&lt;/a&gt;&lt;br&gt;
        * 👉🏻 &lt;a href="#merge"&gt;ABOUT MERGE SORT ALGORITHM&lt;/a&gt;&lt;br&gt;
        * 👨🏻‍🏫 &lt;a href="#explain"&gt;EXPLANATION&lt;/a&gt;&lt;br&gt;
        * 👀 &lt;a href="#visual"&gt;VISUAL EXAMPLE&lt;/a&gt;&lt;br&gt;
        * 🛠 &lt;a href="#implement"&gt;IMPLEMENTATION&lt;/a&gt;&lt;br&gt;
        * 👩🏻‍💻 &lt;a href="#code"&gt;CODE&lt;/a&gt;&lt;br&gt;
        * 🤔 &lt;a href="#complex"&gt;COMPLEXITY&lt;/a&gt;&lt;br&gt;
        * 🙏 &lt;a href="#thank-you"&gt;THANK YOU&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  🤓 INTRODUCTION &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Welcome, hackers! I hope you are all having a great weekend.🚀Before we start another work week tomorrow, let's learn something new. In this blog article, we are going to explain and implement the Merge Sort algorithm.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#about-merge-sort-algorithm" class="anchor"&gt;
  &lt;/a&gt;
  👉🏻 ABOUT MERGE SORT ALGORITHM &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Merge sort algorithm is another divide-and-conquer algorithm based on the idea of breaking down a list into several sub-lists until each sublist consists of a single element and merging those sublists in a manner that results in a sorted list.&lt;/p&gt;

&lt;p&gt;Let's take a generic array that starts at index p and going through index r. It will be convenient to have a notation for a subarray, array[p..r]; In terms of our notation, for an array of n elements, we can say that the original problem is to sort an array A[0..n-1];&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#explanation" class="anchor"&gt;
  &lt;/a&gt;
  👨🏻‍🏫 EXPLANATION &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Here is how merge sort uses divide-and-conquer:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Divide&lt;/strong&gt; - by finding the number q of the position midway between p and r. Do this step the same way we found the midpoint in binary search: add p and r, divide by 2, and round down.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conquer&lt;/strong&gt; - by recursively sorting the subarray in each of the two subproblems created by the divide step. That is, recursively sort the subarray array[p..q] and recursively sort the subarray array[q+1..r];&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Combine&lt;/strong&gt; - by merging the two sorted subarrays back into the single sorted subarray array[p..r];&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#visual-example" class="anchor"&gt;
  &lt;/a&gt;
  👀 VISUAL EXAMPLE &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1k7g40Ta--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kywm45m0riiq1z55cwzq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1k7g40Ta--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kywm45m0riiq1z55cwzq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#steps" class="anchor"&gt;
  &lt;/a&gt;
  Steps:
&lt;/h3&gt;

&lt;p&gt;0: Array [14, 7, 3, 12, 9, 11, 6, 2] is unsorted&lt;br&gt;
1: Find q (q = (p+r)/2) q=3 in our case&lt;br&gt;
2: We divide into two subarrays [14, 7, 3, 12] - up to the index of q - And [9, 11, 6, 2]&lt;br&gt;
3: Find q again in this case for each of the subarray&lt;br&gt;
   The first subarray q index is 1 and for the second q=5&lt;br&gt;
4: We divide into the following subarrays:&lt;br&gt;
   [14, 7] and [3, 12] for the first subarray and [9, 11] and &lt;br&gt;
   [6,2] for the second subarray.&lt;br&gt;
...Repeating these steps until we have only single values as an array member. We have to make two recursive calls in the conquer step.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#%F0%9F%9B%A0-implementation" class="anchor"&gt;
  &lt;/a&gt;
  🛠 IMPLEMENTATION&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oCVQ3zOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9eugb2kvg6l3ci4u484f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oCVQ3zOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9eugb2kvg6l3ci4u484f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#code" class="anchor"&gt;
  &lt;/a&gt;
  👨🏻‍💻 CODE &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Play with the code!&lt;br&gt;
&lt;iframe src="https://jsfiddle.net/codespresso/tmzpqux1/10//embedded/js,result,html,css//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#complexity" class="anchor"&gt;
  &lt;/a&gt;
  🤔 COMPLEXITY &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The complexity of the Merge sort algorithm is in the very best case Big O of nlog2n, in the worst case, the merge sort is staying consistent with the complexity of Big O of nlog2n.&lt;br&gt;
The &lt;strong&gt;bad&lt;/strong&gt; thing about the Merge sort algorithm is that requires an extra memory space the same size as the vector that is being sorted.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thank-you-for-reading" class="anchor"&gt;
  &lt;/a&gt;
  🙏 THANK YOU FOR READING!&lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;References:&lt;br&gt;
School notes...&lt;br&gt;
School books...&lt;br&gt;
&lt;a href="https://www.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort"&gt;Khan Academy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please leave a comment, tell me about you, about your work, comment your thoughts, connect with me! &lt;/p&gt;

&lt;p&gt;☕ SUPPORT ME AND KEEP ME FOCUSED!&lt;br&gt;
&lt;a href="https://ko-fi.com/Z8Z33D1HJ"&gt;&lt;img height="36" src="https://res.cloudinary.com/practicaldev/image/fetch/s--IT81Gxvw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.ko-fi.com/cdn/kofi4.png%3Fv%3D2" alt="Buy Me a Coffee at ko-fi.com"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have a nice time hacking! 😊&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>CSS: How to make a website responsive</title>
      <author>DevLorenz0</author>
      <pubDate>Sun, 07 Feb 2021 10:57:40 +0000</pubDate>
      <link>https://dev.to/devlorenzo/css-how-to-make-a-website-responsive-19kg</link>
      <guid>https://dev.to/devlorenzo/css-how-to-make-a-website-responsive-19kg</guid>
      <description>&lt;p&gt;&lt;code&gt;Hello World!&lt;/code&gt; The third episode of the series  - A CSS/JS trick in 5 minutes - &lt;a href="https://dev.to/devlorenzo/css-how-to-make-a-gradient-animation-3a63"&gt;Last Article&lt;/a&gt; was about a CSS trick (How to make a gradient animation). &lt;br&gt;
This time I want to show you another CSS trick: How to make a website responsive (or how media queries work).&lt;/p&gt;



&lt;p&gt;It's not very difficult, I just want to underline some important things. First, when you want to do something responsive always use Google device toolbar while having this in mind:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3_WmGQSo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n78axuwm0fm8c6puw2ir.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3_WmGQSo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n78axuwm0fm8c6puw2ir.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then you add a media query for these 5 different screen sizes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@media only screen and (max-width: 1200px) {
  body {
    // Change design here 
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I recommend you start copying your 5 media queries and then editing one at once. Remember to check frequently your website to be sure of what you're doing. &lt;/p&gt;




&lt;p&gt;You can also use media queries to check screen resolution (in dpi) and orientation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@media (orientation: landscape / portrait) {
  body {
    // Change design here 
  }
}

@media (resolution: 150dpi) {
  body {
    // Change design here 
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;I created for example a responsive title here:&lt;br&gt;
&lt;a href="https://codepen.io/DevLorenzo/pen/LYRJbVw"&gt;Click Me&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/DevLorenzo/embed/LYRJbVw?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Hope this helped and thanks for reading!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please smash that like button to make me understand that you want the series to continue :)&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Formik VS React Hook Form Part I</title>
      <author>Doaa Shafik </author>
      <pubDate>Sun, 07 Feb 2021 10:29:56 +0000</pubDate>
      <link>https://dev.to/doaashafik/formik-vs-react-hook-form-aei</link>
      <guid>https://dev.to/doaashafik/formik-vs-react-hook-form-aei</guid>
      <description>&lt;p&gt;Front End Engineers work a lot with forms and with the complexity of apps we need powered forms to help us managing the form state, form validation with nested levels, form verbosity.&lt;br&gt;
&lt;a href="https://formik.org/"&gt;Formik&lt;/a&gt; comes to solve all these problems.&lt;br&gt;
Now we have a new library &lt;a href="https://react-hook-form.com/"&gt;React Hook Form&lt;/a&gt; &lt;span&gt;was released to compete.&lt;/span&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;Module Composition&lt;/h3&gt; 

&lt;p&gt;&lt;a href="https://bundlephobia.com/result?p=formik@1.5.8"&gt;Formik has nine dependencies&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_hnsEFqT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/blog.logrocket.com/wp-content/uploads/2019/10/formik-dependencies.png%3Fresize%3D730%252C155%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_hnsEFqT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/blog.logrocket.com/wp-content/uploads/2019/10/formik-dependencies.png%3Fresize%3D730%252C155%26ssl%3D1" alt="formik composition"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bundlephobia.com/result?p=react-hook-form@3.24.0"&gt;React Hook Form has no dependencies&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--idEmsfM1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/blog.logrocket.com/wp-content/uploads/2019/10/react-hook-form-dependencies.png%3Fw%3D730%26ssl%3D1%2520730w%2C%2520https://i2.wp.com/blog.logrocket.com/wp-content/uploads/2019/10/react-hook-form-dependencies.png%3Fresize%3D300%252C34%26ssl%3D1%2520300w" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--idEmsfM1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/blog.logrocket.com/wp-content/uploads/2019/10/react-hook-form-dependencies.png%3Fw%3D730%26ssl%3D1%2520730w%2C%2520https://i2.wp.com/blog.logrocket.com/wp-content/uploads/2019/10/react-hook-form-dependencies.png%3Fresize%3D300%252C34%26ssl%3D1%2520300w" alt="React Hook Form bundle"&gt;&lt;/a&gt;&lt;br&gt;
&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Controlled &amp;amp; UnControlled Component&lt;/h3&gt;

&lt;p&gt;Formik support Only Controlled Component but React-hook-form support both of them.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#controlled-component" class="anchor"&gt;
  &lt;/a&gt;
  Controlled Component
&lt;/h6&gt;

&lt;p&gt;is one that takes its current value through props and notifies changes through callbacks like onChange. A parent component "controls" it by handling the callback and managing its own state and passing the new values as props to the controlled component.&lt;br&gt;
&lt;a href="https://react-hook-form.com/api#Controller"&gt;Controlled Component with RHF&lt;/a&gt;&lt;br&gt;
&lt;a href="https://formik.org/docs/api/field"&gt;Controlled Component with Formik&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#uncontrolled-component" class="anchor"&gt;
  &lt;/a&gt;
  Uncontrolled Component
&lt;/h6&gt;

&lt;p&gt;is one that stores its own state internally, and you query the DOM using a ref to find its current value when you need it.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;feature&lt;/th&gt;
      &lt;th&gt;uncontrolled&lt;/th&gt;
      &lt;th&gt;controlled&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;one-time value retrieval (e.g. on submit)&lt;/td&gt;
      &lt;td&gt;✅&lt;/td&gt;
      &lt;td&gt;✅&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;validating on submit&lt;/td&gt;
      &lt;td&gt;✅&lt;/td&gt;
      &lt;td&gt;✅&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;conditionally disabling submit button&lt;/td&gt;
      &lt;td&gt;❌&lt;/td&gt;
      &lt;td&gt;✅&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;several inputs for one piece of data&lt;/td&gt;
      &lt;td&gt;❌&lt;/td&gt;
      &lt;td&gt;✅&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;dynamic inputs&lt;/td&gt;
      &lt;td&gt;❌&lt;/td&gt;
      &lt;td&gt;✅&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;Re-Rendering&lt;/h3&gt;

&lt;p&gt;We want to avoid unnecessary re-render cycles as much as possible, as this could lead to major performance issues as an app grows.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i-oIVSK6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/z8GNRbz/68747470733a2f2f692e737461636b2e696d6775722e636f6d2f664232704a2e706e67.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i-oIVSK6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/z8GNRbz/68747470733a2f2f692e737461636b2e696d6775722e636f6d2f664232704a2e706e67.png" alt="image-rerender-formik &amp;amp; react-hook-form"&gt;&lt;/a&gt;&lt;br&gt;
&lt;span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;Dependent Fields&lt;/h3&gt;

&lt;p&gt;With React Hook Form &lt;a href="https://react-hook-form.com/api#watch"&gt;watch Function&lt;/a&gt; help you to watch specified inputs and return their values to  determine what to render. &lt;/p&gt;

&lt;p&gt;With Formik watching all fields enabled by default so you can remove or add fields depend on values prop.&lt;br&gt;
&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;Events&lt;/h3&gt;

&lt;p&gt;With React Hook Form &lt;a href="https://react-hook-form.com/api#getValues"&gt;Read Form Values&lt;/a&gt; inside events.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#note-getvalues-will-not-trigger-rerenders-or-subscribe-to-input-changes" class="anchor"&gt;
  &lt;/a&gt;
  note: getValues() will not trigger re-renders or subscribe to input changes.
&lt;/h6&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;
With Formik you can read form values with values prop.&lt;br&gt;
&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;Summarize&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;feature&lt;/th&gt;
            &lt;th&gt;formik&lt;/th&gt;
            &lt;th&gt;react-hook-form&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Size&lt;/td&gt;
            &lt;td&gt;12.6kB&lt;/td&gt;
            &lt;td&gt;5.2kB&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Weekly Downloads&lt;/td&gt;
            &lt;td&gt;1,314,511&lt;/td&gt;
            &lt;td&gt;638,419&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Dependencies&lt;/td&gt;
            &lt;td&gt;9&lt;/td&gt;
            &lt;td&gt;0&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Open Issues&lt;/td&gt;
            &lt;td&gt;498&lt;/td&gt;
            &lt;td&gt;6&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;React Native&lt;/td&gt;
            &lt;td&gt;✅&lt;/td&gt;
            &lt;td&gt;✅&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;TypeScript&lt;/td&gt;
            &lt;td&gt;✅&lt;/td&gt;
            &lt;td&gt;✅&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Class components&lt;/td&gt;
            &lt;td&gt;✅&lt;/td&gt;
            &lt;td&gt;❌&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Clear documentation&lt;/td&gt;
            &lt;td&gt;✅&lt;/td&gt;
            &lt;td&gt;✅&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Yup integration&lt;/td&gt;
            &lt;td&gt;✅&lt;/td&gt;
            &lt;td&gt;✅&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;
Compare Both with Examples, See &lt;a href="https://dev.to/doaashafik/formik-vs-react-hook-form-cases-part-ii-4omi-temp-slug-5264081?preview=e42653392509226354193f68854f7627a98ae96e623513580c189866db12b7ce03c9b7205e1d83b0254124ae37f2ea476b0a0f1a560c9d7da54188e6"&gt;Formik VS React Hook Form Part II&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>html</category>
      <category>formik</category>
      <category>reacthookform</category>
    </item>
  </channel>
</rss>
