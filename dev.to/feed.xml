<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to create an awesome slack approval workflow</title>
      <author>Kartik Grewal</author>
      <pubDate>Sat, 18 Dec 2021 23:29:44 +0000</pubDate>
      <link>https://dev.to/canonic/how-to-create-an-awesome-slack-approval-workflow-1gdg</link>
      <guid>https://dev.to/canonic/how-to-create-an-awesome-slack-approval-workflow-1gdg</guid>
      <description>&lt;p&gt;Slack is a very popular workplace place, to a point where now it’s become a verb — “&lt;strong&gt;Slack me if you need something!&lt;/strong&gt;” — and there’s good reason for it. During these pandemic times, it’s so much more than just a chat app. &lt;/p&gt;

&lt;p&gt;Today, we’ll explore how we can do even more with &lt;strong&gt;Slack Approvals&lt;/strong&gt;. We’ll bring in &lt;a href="https://canonic.dev/?utm_source=dev.to&amp;amp;utm_medium=organic_article&amp;amp;utm_campaign=30daysofcanonic_uc_3&amp;amp;utm_term=header_canonic&amp;amp;utm_content=day_20"&gt;Canonic&lt;/a&gt; and use the power of slack approvals to approve or disapprove our message. We want the ability that whenever a message is added to the database, its respective slack approval message is sent, based on the response, the same gets updated in the database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-dive-in"&gt;
  &lt;/a&gt;
  Let’s dive in! 🚀
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Create necessary slack app &amp;amp; generate tokens&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s start with getting all the slack requirements in place. We have to &lt;a href="https://api.slack.com/apps"&gt;create an app with Slack&lt;/a&gt; and generate its respective tokens.&lt;/p&gt;

&lt;p&gt;For this step, we’ll follow the slack guides linked with the respective text as they’ll be the best source to get all these requirements.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uRkory45--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7tv7zmwvc1el1cne1gg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uRkory45--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w7tv7zmwvc1el1cne1gg.png" alt="Step 1" width="880" height="336"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Starting with a slack integration workflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jump to Canonic and clone this &lt;a href="https://app.canonic.dev/projects/61be5cc3b6586d0026b16023/graph?utm_source=dev.to&amp;amp;utm_medium=organic_article&amp;amp;utm_campaign=30daysofcanonic_uc_3&amp;amp;utm_term=step2_sample&amp;amp;utm_content=day_20"&gt;sample project&lt;/a&gt; which already has slack integration added, or create one for yourself and move to the API section to manually add the slack integration for your &lt;code&gt;createMessage&lt;/code&gt; API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9FAPbHR7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqrouqqxq3s06axdz6kv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9FAPbHR7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqrouqqxq3s06axdz6kv.png" alt="Step 2" width="880" height="260"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will be asked to authenticate and add in a token (the one that we got in step 1) Once authorized you should have a green tick to reflect that.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--44_aV6Qz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfu9p11rex8cq23yqpaj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--44_aV6Qz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfu9p11rex8cq23yqpaj.png" alt="Step 2" width="784" height="940"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Slack payload creation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that we have our integration set up complete and attached to our &lt;code&gt;createMessage&lt;/code&gt; API. Whenever we trigger this API, an approval message with the trigger message should be sent to slack. &lt;/p&gt;

&lt;p&gt;For this, we need to &lt;strong&gt;add our payload to slack&lt;/strong&gt;. For using this feature, we’ll use a slightly different payload than we usually do for a simple chat message. Our payload should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"New approval request"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"blocks"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"header"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"plain_text"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"New request"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"emoji"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"section"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"fields"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"mrkdwn"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"actions"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"elements"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"button"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"plain_text"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"emoji"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Approve"&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"style"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"primary"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"click_me_123"&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"button"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"plain_text"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"emoji"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                        &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Reject"&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"style"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"danger"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"click_me_123"&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, in place of &lt;code&gt;click_me_123&lt;/code&gt;, we’ll add the URL for the respective API to get triggered when someone approves or disapproves it. For that, we’ll need to build a custom API. Let’s do that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4: Create custom API for approving/disapproving messages&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We now create a custom API in Canonic to look for the query parameters and update the respective record. Create a new API by clicking on the &lt;code&gt;+&lt;/code&gt; icon against the &lt;code&gt;Endpoints&lt;/code&gt; tab.&lt;/p&gt;

&lt;p&gt;Next, add details regarding the API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yfn7YJ-l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2cjkmbsxvod6uba3wn4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yfn7YJ-l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2cjkmbsxvod6uba3wn4.png" alt="Step 4" width="828" height="386"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go to the Code tab and add the following code to find the id for the message and add in the approval or disapproval in the database. We use query parameters to fetch the details then do the processing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;approved&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOneAndUpdate&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;$set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;approved&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;approved&lt;/span&gt; &lt;span class="p"&gt;}},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;upsert&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 5: Update back the message&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We deploy this project to get the API URL. Click on the top right corner saying &lt;code&gt;deploy&lt;/code&gt;, then go to the docs to get its URL.&lt;/p&gt;

&lt;p&gt;We replace &lt;code&gt;**click_me_123**&lt;/code&gt; to*&lt;em&gt;&lt;code&gt;https://messages.can.canonic.dev/api/messages/approvalornot?id=1234&amp;amp;approved=false&lt;/code&gt;&lt;/em&gt;*  in the danger button and replace the same with &lt;strong&gt;&lt;code&gt;https://messages.can.canonic.dev/api/messages/approvalornot?id=1234&amp;amp;approved=true&lt;/code&gt;.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Now whenever a user will approve or disapprove, the following URL will get triggered saving the approval of the message in the database. This can be used in place of any Micro-service which is built is to handle slack integration or become a slack server for that business.&lt;/p&gt;

&lt;p&gt;Hope this guide helps you make your day a little bit more productive!&lt;br&gt;
Check out the sample project &lt;a href="https://app.canonic.dev/projects/61be5cc3b6586d0026b16023/graph?utm_source=dev.to&amp;amp;utm_medium=organic_article&amp;amp;utm_campaign=30daysofcanonic_uc_3&amp;amp;utm_term=step5_here&amp;amp;utm_content=day_20"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Thank you for reading this guide. If you happen to create any of these integrations, please remember to mention us on social media or drop us a line on our discord channel.&lt;/p&gt;

&lt;p&gt;You can also check out our other guides &lt;a href="https://dev.to/canonic/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Join us on &lt;a href="https://discord.gg/9dyytsM"&gt;Discord&lt;/a&gt; to discuss or share with our community. Write to us for any support requests at &lt;a href="https://support@canonic.dev/"&gt;support@canonic.dev&lt;/a&gt;. Check out our &lt;a href="https://www.canonic.dev/30-days-of-canonic/?utm_source=dev.to&amp;amp;utm_medium=organic_article&amp;amp;utm_campaign=30daysofcanonic_uc_3&amp;amp;utm_term=conclusion_website&amp;amp;utm_content=day_20"&gt;website&lt;/a&gt; to know more about Canonic.&lt;/p&gt;

</description>
      <category>slack</category>
      <category>frontend</category>
      <category>tutorial</category>
      <category>productivity</category>
    </item>
    <item>
      <title>100 Languages Speedrun: Episode 28: TeX</title>
      <author>Tomasz Wegrzanowski</author>
      <pubDate>Sat, 18 Dec 2021 23:15:56 +0000</pubDate>
      <link>https://dev.to/taw/100-languages-speedrun-episode-28-tex-b1j</link>
      <guid>https://dev.to/taw/100-languages-speedrun-episode-28-tex-b1j</guid>
      <description>&lt;p&gt;TeX (pronounced like "tech") is a typesetting system, which is still used for writing research papers in Mathematics, Computer Science, Physics, and related disciplines, and pretty much nothing else. Everyone else moved on to either WYSIWYG editors like Word, or to HTML, or maybe Markdown or something like that. But it still survives in its niche.&lt;/p&gt;

&lt;p&gt;Like every typesetting system, it comes with its own embedded programming language, and that's what we're going to use.&lt;/p&gt;

&lt;p&gt;Technically TeX is just the original system, and we'll also be using a lot of *TeX things (MacTeX, LaTeX, pdftex etc.), but that's meaningless distinction, so I won't mention it anymore.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello, World!
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tex"&gt;&lt;code&gt;&lt;span class="k"&gt;\documentclass&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;minimal&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;\newcommand\hello&lt;/span&gt;&lt;span class="na"&gt;[1]&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;Hello, #1!&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;\begin{document}&lt;/span&gt;
&lt;span class="k"&gt;\hello&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;World&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;\end{document}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which with &lt;code&gt;pdflatex hello.tex&lt;/code&gt; generates a PDF page with the text "Hello, World!" (only relevant part shown):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y83B-_9f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ytdimkqih32jwjupmi7h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y83B-_9f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ytdimkqih32jwjupmi7h.png" alt="Hello" width="296" height="116"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What's going on here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;\documentclass{minimal}&lt;/code&gt; defines the kind of document we're making - as we're not really interested in any typesetting, we can just use &lt;code&gt;minimal&lt;/code&gt;. The most common type for actual documents would be &lt;code&gt;article&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;then follows basically equivalent of HTML &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; part&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\begin{document} ... \end{document}&lt;/code&gt; is like HTML &lt;code&gt;&amp;lt;body&amp;gt; ... &amp;lt;/body&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;We define &lt;code&gt;\hello&lt;/code&gt; command with &lt;code&gt;\newcommand\hello[1]{Hello, #1!}&lt;/code&gt; - the &lt;code&gt;[1]&lt;/code&gt; says it takes one argument, then in the function body &lt;code&gt;#1&lt;/code&gt; refers to that argument.&lt;/li&gt;
&lt;li&gt;We call the function with &lt;code&gt;\hello{World}&lt;/code&gt; - there are no parentheses here, we defined explicitly it takes exactly one argument.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#loop"&gt;
  &lt;/a&gt;
  Loop
&lt;/h3&gt;

&lt;p&gt;Let's try to setup a loop from 11 to 20. Obviously the system comes with lists already (numbered with &lt;code&gt;\begin{enumerate} \item A \item B \end{enumerate}&lt;/code&gt;, bulleted with &lt;code&gt;\begin{itemize} \item A \item B \end{itemize}&lt;/code&gt;, and all the other usual kinds), but we'll be doing a FizzBuzz shortly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tex"&gt;&lt;code&gt;&lt;span class="k"&gt;\documentclass&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;minimal&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\setlength&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\parindent&lt;/span&gt;&lt;span class="p"&gt;}{&lt;/span&gt;0pt&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;ifthen&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;% \numberloop{A}{B} prints all numbers from A to B&lt;/span&gt;
&lt;span class="k"&gt;\newcommand\numberloop&lt;/span&gt;&lt;span class="na"&gt;[2]&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;\newcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\setcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}{&lt;/span&gt;#1&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\whiledo&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\not&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\value&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}&lt;/span&gt;&amp;gt;#2&lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;\thei&lt;/span&gt;
      &lt;span class="k"&gt;\ifthenelse&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\equal&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;#2&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\thei&lt;/span&gt;&lt;span class="p"&gt;}}{&lt;/span&gt;.&lt;span class="p"&gt;}{&lt;/span&gt;,&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;\stepcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;\begin{document}&lt;/span&gt;
&lt;span class="k"&gt;\numberloop&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;10&lt;span class="p"&gt;}{&lt;/span&gt;100&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;\end{document}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which generates this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CDLhGJ2l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ra56r78r6m709lflqngi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CDLhGJ2l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ra56r78r6m709lflqngi.png" alt="Loop" width="880" height="131"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What's going on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TeX has annoying default of having paragraph indent, we need to get rid of it with &lt;code&gt;\setlength{\parindent}{0pt}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;we import a package called &lt;code&gt;ifthen&lt;/code&gt; with &lt;code&gt;\usepackage{ifthen}&lt;/code&gt; - it contains some control structures &lt;code&gt;\ifthenelse&lt;/code&gt; and &lt;code&gt;\whiledo&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;%&lt;/code&gt; indicates line comments&lt;/li&gt;
&lt;li&gt;we define command &lt;code&gt;\numberloop&lt;/code&gt; that takes two arguments&lt;/li&gt;
&lt;li&gt;inside it we define integer variable ("counter") &lt;code&gt;i&lt;/code&gt; and set it to &lt;code&gt;#1&lt;/code&gt; (first passed argument)&lt;/li&gt;
&lt;li&gt;there's nothing like &lt;code&gt;... &amp;lt;= ...&lt;/code&gt; in a loop, so loop condition must be &lt;code&gt;\not{... &amp;gt; ...}&lt;/code&gt; (or +1 one of the sides)&lt;/li&gt;
&lt;li&gt;inside the loop body, &lt;code&gt;\thei&lt;/code&gt; means "current value of &lt;code&gt;i&lt;/code&gt; counter"&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\ifthenelse{\equal{#2}{\thei}}{.}{,}&lt;/code&gt; prints appropriate separator - &lt;code&gt;,&lt;/code&gt; normally, but &lt;code&gt;.&lt;/code&gt; in the final iteration.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\stepcounter{i}&lt;/code&gt; increases counter &lt;code&gt;i&lt;/code&gt; by &lt;code&gt;1&lt;/code&gt; each time&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#fizzbuzz"&gt;
  &lt;/a&gt;
  FizzBuzz
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tex"&gt;&lt;code&gt;&lt;span class="k"&gt;\documentclass&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;minimal&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\setlength&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\parindent&lt;/span&gt;&lt;span class="p"&gt;}{&lt;/span&gt;0pt&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;ifthen&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;intcalc&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;multicol&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;% \fizzbuzz{N} prints Fizz, Buzz, FizzBuzz, or N, according to the usual rules&lt;/span&gt;
&lt;span class="k"&gt;\newcommand\fizzbuzz&lt;/span&gt;&lt;span class="na"&gt;[1]&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;\ifthenelse&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\equal&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\intcalcMod&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;#1&lt;span class="p"&gt;}{&lt;/span&gt;15&lt;span class="p"&gt;}}{&lt;/span&gt;0&lt;span class="p"&gt;}}{&lt;/span&gt;FizzBuzz&lt;span class="p"&gt;}{&lt;/span&gt;
    &lt;span class="k"&gt;\ifthenelse&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\equal&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\intcalcMod&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;#1&lt;span class="p"&gt;}{&lt;/span&gt;5&lt;span class="p"&gt;}}{&lt;/span&gt;0&lt;span class="p"&gt;}}{&lt;/span&gt;Buzz&lt;span class="p"&gt;}{&lt;/span&gt;
      &lt;span class="k"&gt;\ifthenelse&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\equal&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\intcalcMod&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;#1&lt;span class="p"&gt;}{&lt;/span&gt;3&lt;span class="p"&gt;}}{&lt;/span&gt;0&lt;span class="p"&gt;}}{&lt;/span&gt;Fizz&lt;span class="p"&gt;}{&lt;/span&gt;#1&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;% \fizzbuzzloop{A}{B} prints all FizzBuzz entries from A to B&lt;/span&gt;
&lt;span class="k"&gt;\newcommand\fizzbuzzloop&lt;/span&gt;&lt;span class="na"&gt;[2]&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;\newcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\setcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}{&lt;/span&gt;#1&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\whiledo&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\not&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\value&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}&lt;/span&gt;&amp;gt;#2&lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;\fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\thei&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;\linebreak&lt;/span&gt;
      &lt;span class="k"&gt;\stepcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;\begin{document}&lt;/span&gt;
&lt;span class="nt"&gt;\begin{multicols}&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;4&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\fizzbuzzloop&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;1&lt;span class="p"&gt;}{&lt;/span&gt;100&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;\end{multicols}&lt;/span&gt;
&lt;span class="nt"&gt;\end{document}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which generates this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mid7uFm1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/83eerdqg7iwoxyzgucdg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mid7uFm1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/83eerdqg7iwoxyzgucdg.png" alt="FizzBuzz" width="880" height="700"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A few things are going on here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we import package for integer math &lt;code&gt;\usepackage{intcalc}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;we import package for multi-column layout &lt;code&gt;\usepackage{multicol}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\fizzbuzz{N}&lt;/code&gt; does the FizzBuzz for one number&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\fizzbuzzloop{A}{B}&lt;/code&gt; does the FizzBuzz for all numbers from A to B, with line breaks in between&lt;/li&gt;
&lt;li&gt;we wrap it all in a 4-column layout so the screenshot looks better&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#fibonacci"&gt;
  &lt;/a&gt;
  Fibonacci
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tex"&gt;&lt;code&gt;&lt;span class="k"&gt;\documentclass&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;minimal&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\setlength&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\parindent&lt;/span&gt;&lt;span class="p"&gt;}{&lt;/span&gt;0pt&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;ifthen&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;intcalc&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;% \fib{N} returns the Nth Fibonacci number&lt;/span&gt;
&lt;span class="k"&gt;\newcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;j&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\newcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;fiba&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\newcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;fibb&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\newcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;fibc&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\newcommand\fib&lt;/span&gt;&lt;span class="na"&gt;[1]&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;\setcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;j&lt;span class="p"&gt;}{&lt;/span&gt;1&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\setcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;fiba&lt;span class="p"&gt;}{&lt;/span&gt;1&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\setcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;fibb&lt;span class="p"&gt;}{&lt;/span&gt;1&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\whiledo&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\value&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;j&lt;span class="p"&gt;}&lt;/span&gt; &amp;lt; #1&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;\setcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;fibc&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\intcalcAdd&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\thefiba&lt;/span&gt;&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\thefibb&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="k"&gt;\setcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;fiba&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\thefibb&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;\setcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;fibb&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="k"&gt;\thefibc&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;\stepcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;j&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\thefiba&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;% \fibloop{A}{B} prints all Fibonacci numbers from A to B&lt;/span&gt;
&lt;span class="k"&gt;\newcommand\fibloop&lt;/span&gt;&lt;span class="na"&gt;[2]&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;\newcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\setcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}{&lt;/span&gt;#1&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\whiledo&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\not&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\value&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}&lt;/span&gt;&amp;gt;#2&lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;\fib&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\thei&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;\linebreak&lt;/span&gt;
      &lt;span class="k"&gt;\stepcounter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;i&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;\begin{document}&lt;/span&gt;
&lt;span class="k"&gt;\raggedright&lt;/span&gt;
&lt;span class="k"&gt;\fibloop&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;1&lt;span class="p"&gt;}{&lt;/span&gt;20&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;\end{document}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which generates this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KW63RnVf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7imy1idwofui7ktblhs2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KW63RnVf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7imy1idwofui7ktblhs2.png" alt="Fib" width="130" height="914"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TeX has serious problems with recursion, so we do a loop calculation instead. Oh and while previous code might have implied that &lt;code&gt;\newcounter&lt;/code&gt; variables are local - they are all completely global, except for &lt;code&gt;#1&lt;/code&gt; etc. arguments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#should-you-use-tex"&gt;
  &lt;/a&gt;
  Should you use TeX?
&lt;/h3&gt;

&lt;p&gt;Only if you're forced to by your journal. Otherwise no, it's completely obsolete.&lt;/p&gt;

&lt;p&gt;Historically its primary strength was math. In particular, supporting made-up mathematical notation each researcher would come up with (the normal notation was supported by everything anyway). But nowadays, other systems can do that too. For everything else, TeX was never good.&lt;/p&gt;

&lt;p&gt;TeX also seems to largely abandoning its existing programming language and &lt;a href="https://dev.to/taw/100-languages-speedrun-episode-04-lua-1ofm"&gt;embedding much saner Lua instead&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Even as an esoteric programming language, TeX's programming language doesn't really do anything too interesting. If you want a fun challenge, &lt;a href="https://dev.to/taw/100-languages-speedrun-episode-24-postscript-4i2k"&gt;writing Postscript is likely to provide a lot better one&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun"&gt;All code examples for the series will be in this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun/tree/master/episode-28-tex"&gt;Code for the TeX episode is available here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>tex</category>
      <category>latex</category>
    </item>
    <item>
      <title>Creating a WordPress blog using AWS Lightsail and Cloudflare</title>
      <author>Oksana Horlock</author>
      <pubDate>Sat, 18 Dec 2021 22:10:59 +0000</pubDate>
      <link>https://dev.to/aws-builders/creating-a-wordpress-blog-using-aws-lightsail-and-cloudflare-22mk</link>
      <guid>https://dev.to/aws-builders/creating-a-wordpress-blog-using-aws-lightsail-and-cloudflare-22mk</guid>
      <description>&lt;p&gt;I started my own blog a little more than one year ago. I  had wanted to have my own blog for a while and had a lot of ideas about how I wanted to create it and experiment with different tools and services. However, since having a child, the time I have for learning and exploring has become a really precious commodity. So I knew that the sooner I launched the website, the better. The final little nudge was reading Steve Gordon’s post about blogging which you can find &lt;a href="https://www.stevejgordon.co.uk/become-a-better-developer-through-blogging-part-1"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;This post describes how I set up a simple site for my blog. Time constraint has been the main reason why I chose using WordPress and AWS Lightsail. I was quite surprised by how easy and quick it was to set everything up. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; AWS account&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating a server&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I followed this blog post up to part 6: &lt;a href="https://aws.amazon.com/getting-started/hands-on/launch-a-wordpress-website/"&gt;https://aws.amazon.com/getting-started/hands-on/launch-a-wordpress-website/&lt;/a&gt;. to create a WordPress instance and attach a static IP to it. It is very easy and clear. FYI, Bitnami is an application stack that lets you host a WordPress website. So when you select the WordPress blueprint in AWS Lightsail, you are installing all the applications necessary to run WordPress on your server.&lt;/p&gt;

&lt;p&gt;I had bought a template to use, so after logging in to WordPress admin dashboard, I navigated to Appearance-&amp;gt;Themes-&amp;gt;Add new -&amp;gt;Upload, and uploaded my theme. The website was up on the internet and could be navigated to on the Internet by using its IP address! Wasn’t it supereasy?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Registering a domain name/creating DNS records&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I didn’t have a domain name, so I registered oxiehorlock.com using AWS Route 53, which is a Domain Name Service. Before you register a domain, you should check the pricing here: &lt;a href="https://d32ze2gidvkk54.cloudfront.net/Amazon_Route_53_Domain_Registration_Pricing_20140731.pdf"&gt;https://d32ze2gidvkk54.cloudfront.net/Amazon_Route_53_Domain_Registration_Pricing_20140731.pdf&lt;/a&gt;.  It varies depending on the top-level domain (the last part of the url, for example, .com or .org.uk). When registering a domain, a public hosted zone is created for you. This hosted zone has records about routing Internet traffic for your domain/subdomains. Two records will be created by default:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;type NS record – a nameserver record; it tells the Internet where to go to find out a domain’s IP address. There are several NS values – this is to ensure that if one name server is not available, the queries can go to another one.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;type SOA – a Start of Authority record; it contains some DNS information about the hosted zone, such as name name server that created the record, a serial number that you change when you can increment when you update the zone, retry interval and so on (info on record types AWS supports is &lt;a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/ResourceRecordTypes.html"&gt;here&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following that I created an A record in my hosted zone. An A record is the most fundamental record and it routes traffic to a resource such as a web server. I mapped my brand spanking new domain name to the static IP of my WordPress instance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zvtVeci1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nyxon2x0cucldzh27bh9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zvtVeci1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nyxon2x0cucldzh27bh9.png" alt="Image description" width="880" height="605"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that oxiehorlock.com was navigable on the Internet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Making the site secure&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First of all, I restricted access for port 22 to my own IP address (so that nobody else could SSH into the instance). I also didn’t want anyone to be able to access the empty blog so I restricted HTTP/HTTPS access to my own IP address too. These rules can be changed using the Networking tab of the Lightsail Console:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zAhx5v0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kuyrs6f7lxjej24tgy07.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zAhx5v0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kuyrs6f7lxjej24tgy07.png" alt="Image description" width="880" height="509"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I followed these tutorials to create an SSL certificate, firewall rules and securing the site using Cloudflare:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-using-lets-encrypt-certificates-with-wordpress#link-the-lets-encrypt-certificate-files-in-the-apache-directory-wordpress"&gt;https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-using-lets-encrypt-certificates-with-wordpress#link-the-lets-encrypt-certificate-files-in-the-apache-directory-wordpress&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dannys.cloud/hardening-a-wordpress-website-on-aws-lightsail"&gt;https://dannys.cloud/hardening-a-wordpress-website-on-aws-lightsail&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Useful tip:&lt;/em&gt; since the instance runs on Linux, I had to use CLI. Since I didn't have a lot of experience with it at the point I was doing the setup, it was slightly tricky to edit and save files. The easiest way for me was to run &lt;em&gt;sudo nano path/to/file&lt;/em&gt; command, edit the file, type &lt;em&gt;Ctrl+X&lt;/em&gt;, and then Y or N, or &lt;em&gt;Ctrl+C&lt;/em&gt; to Cancel.&lt;/p&gt;

&lt;p&gt;I also removed Bitnami banner from the bottom right hand corner of the site pages by following the steps from this guide: &lt;a href="https://docs.bitnami.com/aws/how-to/bitnami-remove-banner/"&gt;https://docs.bitnami.com/aws/how-to/bitnami-remove-banner/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although there is no need to change your DNS from Route53 to Cloudflare, after some time I did it for the sake of experiment, since I had not had much experience with anything to do with DNS before. &lt;br&gt;
To be able to use Cloudflare for DNS management, AWS name servers for the NS record in your hosted zone need to be changed to Cloudflare name servers. You would think that you would just go to the hosted zone, select the NS record from the list, and edit it, right? However, after waiting for a couple of days for the record to be updated, I started investigating what was wrong. It turned out the records needed to be changed from the Registered domains page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4BPFpo5W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlg3v85n1ejgpzki0az5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4BPFpo5W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlg3v85n1ejgpzki0az5.png" alt="Image description" width="880" height="274"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From the moment you change your DNS provider, you will need to put all the DNS records there.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Costs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The pricing for deploying a WordPress on AWS Lightsail in the way that I did comprises:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;domain registration cost ($12)&lt;/li&gt;
&lt;li&gt;a monthly instance plan ($3.50)&lt;/li&gt;
&lt;li&gt;half a dollar per hosted zone per month&lt;/li&gt;
&lt;li&gt;DNS queries less than half a dollar per 1 000 000 000 queries (this will also include you using the site, for example amending the theme).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I sincerely hope my experience will help somebody out there to make deploying a WordPress website on AWS Lightsail a plan sailing.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>awscommunity</category>
      <category>lightsail</category>
    </item>
    <item>
      <title>Tips For Taking Your Product Photography On A White Background</title>
      <author>Sonam Singh</author>
      <pubDate>Sat, 18 Dec 2021 22:04:44 +0000</pubDate>
      <link>https://dev.to/sonamsingh/tips-for-taking-your-product-photography-on-a-white-background-1g91</link>
      <guid>https://dev.to/sonamsingh/tips-for-taking-your-product-photography-on-a-white-background-1g91</guid>
      <description>&lt;p&gt;The best way to make your products look great and create a sense of value is through high-quality visual presentation. This includes having professional photos that show off every detail, but it can be hard for small store owners without access or funds like this option since they need the proper tools in order to do so themselves. Here we will learn the tips for taking product photography with white background.&lt;/p&gt;

&lt;p&gt;When you need a spot to highlight your company or product, adding white background photography can make all the difference. It helps to highlight the essential features of the product, which will eventually help grab the attention of the viewers out there.&lt;br&gt;
You can turn a mediocre product photo into something that will make people want to buy your products with just one click. All you need are some white walls and an idea of what it is they’re selling.&lt;/p&gt;

&lt;p&gt;Here are some tips to help you capture photos on a white background:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Required Peripherals&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It will not be possible for you to turn a product, idea, or anything into something noticeable without having the right peripherals. Make sure you have these peripherals before you start another photoshoot.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Camera&lt;/strong&gt;&lt;br&gt;
It really matters that the photographer understands the requirements of the photoshoot. It really depends upon the requirements about the type of camera to be used. Full-frame DSLR cameras are too big to lug around and set up. You can start with whatever you’ve got handy, experiment on a new camera over time until the style speaks for itself without investing in an expensive system right away!&lt;/p&gt;

&lt;p&gt;However, if you have decided to invest in basic DSLR cameras, you can start from Nikon D3500 or Fujifilm X-T200. It will help you in grasping the ideas of photography in the beginning.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tripod&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mounting your camera to a tripod is an essential step in the photography process. Once you have it secured, there are some things that will remain fixed and keep everything else from moving around while capturing images of varying modes like high dynamic range imaging or focus stacking which require several shots taken at different points on whatever subject matter interests you most today.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;White Bounce Cards&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Window light has a bright side where the sun hits it, and shadows on either side. To make things more interesting for &lt;a href="https://www.amzonestep.com/services/amazon-product-photography"&gt;Amazon Product Photography&lt;/a&gt;, make use of white bounce cards ( made out of foam boards ) that put an extra bit of illumination into those dark areas so they can be relieved in their product shots. It is an excellent choice because it’s rigid and can also be easily cleaned if needed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A smooth surface is required for your product to stay stable throughout the photoshoot. Consider getting a table with one that is wide but also long enough. The ideal size would be somewhere between 24 and 27 inches in width so it’s not too small nor too big for your needs!`&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ideal Room&lt;/strong&gt;&lt;br&gt;
The perfect room for product photography is a window that’s next to a wall. The larger the better as you’ll get more light from strong naturalistic shadows, and being closer will create softer overall tones with darker backgrounds while farther away will result in an even brighter illumination where the shadows are sharper yet lighter in detail.&lt;/p&gt;

&lt;p&gt;Capturing Professional Photos On A White Background&lt;br&gt;
When it comes to selling your products, more than 90% of consumers say that visual appearance is an important factor in buying decisions. Let’s into some professional tips you should follow to capture your next masterpiece:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setting up the Table&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that you gathered all the required materials, it’s time to shoot! The first thing you need to do is place the table close to the window without intersecting any shadows from these windowsills. Next, make sure that your setup goes right or left of this window at 90 degrees angle, depending on which direction light will be hitting the subject.&lt;/p&gt;

&lt;p&gt;With natural light, the best way to get a different mood is by rotating your window. You can try putting it at an angle of 45 degrees or even straight onto the set with no obstruction for that clean and fresh feel!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adjusting the Camera&lt;/strong&gt;&lt;br&gt;
Every camera is a little different. For some, the default setting will work just fine, and they don’t need to adjust any settings on their own. However, if you’re looking for more control over what gets captured or want an idea of how your photos are coming out then the following tweaks to your setting might help out:&lt;/p&gt;

&lt;p&gt;Set your white balance (WB) to Automatic. This will allow you more control of colors and lighting for a better end result.&lt;/p&gt;

&lt;p&gt;Turn Off your flash setting. This will stop any potential glare on the camera lens and ensure that you get intense exposure to whatever is in front.&lt;/p&gt;

&lt;p&gt;Raw files are the largest a camera can shoot, and when edited in software such as Photoshop or Aperture will give you maximum image quality. If your point-and-shoot has this setting, use it!&lt;/p&gt;

&lt;p&gt;You can set your ISO to 100 which will result in less noise. The higher the numbers are, the more sensitive they become and thus pick up on any light that might be present.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setting up the Product&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are many little details that can trip you up when setting your product. One of the most important is making sure to center yourself in front of all reflective surfaces, such as bottles with labels on them and mirrors above head height.&lt;/p&gt;

&lt;p&gt;This can be difficult because there are often many tiny movements needed for each element, but it will go much smoother if done correctly from day one.&lt;/p&gt;

&lt;p&gt;If your product positioning is perfect then you can try using white cards as a light modifier too. You will be blown away by the way this simple white card lights up your product. The light bounces off of it and fills in all shadows, so experiment with different angles for maximum effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Capturing and Evaluating the Photo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A picture is worth a thousand words, but it’s even more than just that. Once you take the photo and look at what has been created with your camera; this will allow for the experience of both education in which skills can be improved through experimentation on various ways to make an image better over time.&lt;/p&gt;

&lt;p&gt;After conducting several trials and errors, you might have finalized some of the photos for your product. For a better idea of how your images look, upload them onto the computer. The back of the camera sometimes misses details that are important for photography and can give unclear pictures, so I suggest using Adobe Lightroom, which provides many editing options to help fix this problem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Taking product photos on a white background can help you create more professional images for your products. Whether it is in an advertisement, website, or social media post, putting the product on a white background will make them stand out and appear clean&lt;br&gt;
If you are looking forward to seeking professional Product photography for amazon, social media, or E-Commerce stores, contact Amz One Step today as they provide one of the most professional services in the marketplace.&lt;/p&gt;

</description>
      <category>management</category>
    </item>
    <item>
      <title>How I passed the AWS Certified Solutions Architect — Associate (SAA-C02) Exam?</title>
      <author>Abhishek Upadhyaya</author>
      <pubDate>Sat, 18 Dec 2021 20:50:04 +0000</pubDate>
      <link>https://dev.to/abhishekupd/how-did-i-pass-the-aws-certified-solutions-architect-associate-saa-c02-exam-2me5</link>
      <guid>https://dev.to/abhishekupd/how-did-i-pass-the-aws-certified-solutions-architect-associate-saa-c02-exam-2me5</guid>
      <description>&lt;p&gt;&lt;strong&gt;AWS Solutions Architect — Associate&lt;/strong&gt; certification is a sought after certification in the industry. In this article, I share my experience of preparing for the exam, and some helpful tips.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_eYyK6tC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5jfneuvk2tz45fyyuik4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_eYyK6tC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5jfneuvk2tz45fyyuik4.png" alt="AWS Solutions Architect Associate (image source: https://aws.amazon.com/certification/certified-solutions-architect-associate/)" width="512" height="512"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#my-experience"&gt;
  &lt;/a&gt;
  My Experience
&lt;/h3&gt;

&lt;p&gt;I passed the exam in &lt;a href="https://www.credly.com/earner/earned/badge/b2a9f3fa-04fd-425e-9148-2b014b7197b2"&gt;November 2021&lt;/a&gt;. Here is what I felt about the exam:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The exam seems to be heavily focused on &lt;strong&gt;VPC&lt;/strong&gt; and &lt;strong&gt;EC2&lt;/strong&gt; components of AWS. You may have seen this mentioned in almost all online posts or threads that you’ve read about exam preparation. It is absolutely &lt;strong&gt;true&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I found that the exam questions are mostly focused on situations about transitioning from on-premise architecture to cloud architecture. That’s also the reason why there are more questions about EC2 and VPC architecture. So, while going through AWS services, think about scenarios where each of the services could be a replacement for services used in different types of on-premises architectures.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I think having a high level understanding of where each AWS services fit within different categories makes it easier to tackle exam questions. For example: as I already had an experience using AWS services for a few years before I took the exam, I classified the services in four main domains - &lt;strong&gt;Storage&lt;/strong&gt;, &lt;strong&gt;Compute&lt;/strong&gt;, &lt;strong&gt;Identity&lt;/strong&gt;, &lt;strong&gt;Security&lt;/strong&gt;. By doing so, I didn’t have to memorize each and every detail of all the services.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#exam-tips"&gt;
  &lt;/a&gt;
  Exam Tips
&lt;/h3&gt;

&lt;p&gt;In general, prepare for this exam just like you would prepare for any other exam, but also consider following tips:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;It is helpful to review some topics everyday. Since the &lt;strong&gt;Associate Certificate&lt;/strong&gt; exam is not heavily focused on scenario based questions as compared to the &lt;strong&gt;Professional Certificate&lt;/strong&gt; exam, you want to be familiar with all the AWS topics mentioned in &lt;a href="https://d1.awsstatic.com/training-and-certification/docs-sa-assoc/AWS-Certified-Solutions-Architect-Associate_Exam-Guide.pdf"&gt;the exam guide&lt;/a&gt;. So, it is an excellent idea to go over &lt;a href="https://aws.amazon.com/faqs/"&gt;AWS FAQs&lt;/a&gt;. Remember, your certification won’t be worth much if you do not have hands-on experience with using the AWS services. So, while going through the topics, make sure to try them out in AWS console or the CLI.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go through practice tests a few times before the exam. I used the practice tests available on &lt;a href="https://www.oreilly.com/library/view/aws-certified-solutions/9781119558439/"&gt;O’Reilly Learning&lt;/a&gt;. You could find similar tests on some other sites. Even though the following book is related to SAA-C01 Exam, it still has relevant content for SAA-C02.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Focus on &lt;strong&gt;VPC&lt;/strong&gt;, &lt;strong&gt;EC2&lt;/strong&gt;, and &lt;strong&gt;resilient architecture&lt;/strong&gt;. As of November, 2021, the &lt;strong&gt;Design Resilient Architectures&lt;/strong&gt; domain was worth 30% of the exam. Questions related to VPC, and EC2 components come up in the &lt;strong&gt;Design High-Performing Architectures&lt;/strong&gt; domain as well. In general, it's critical to understand the VPC architecture, and how some application on the internet can communicate with your application within the VPC and vice-versa.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;blockquote&gt;
&lt;p&gt;Overall, if you have been using AWS services for at least a year, you should be able to pass the exam by reviewing the topics and preparing for about a month. It is crucial that you focus on the topics related to the services that you don’t have hands-on experience with.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;em&gt;Note: This article was first published on &lt;a href="https://abhishekupd.medium.com/how-i-passed-aws-certified-solutions-architect-associate-exam-d1679c19365c"&gt;my Medium blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>certifications</category>
      <category>cloudservices</category>
      <category>devops</category>
    </item>
    <item>
      <title>5 Considerations for Maximizing Your Enjoyment as a JavaScript Developer  </title>
      <author>Michael Mangialardi</author>
      <pubDate>Sat, 18 Dec 2021 20:17:18 +0000</pubDate>
      <link>https://dev.to/michaelmangial1/5-considerations-for-maximizing-your-enjoyment-as-a-javascript-developer-3lkg</link>
      <guid>https://dev.to/michaelmangial1/5-considerations-for-maximizing-your-enjoyment-as-a-javascript-developer-3lkg</guid>
      <description>&lt;p&gt;What makes you satisfied with a job?&lt;/p&gt;

&lt;p&gt;Don't overthink the question. The answer is simple.&lt;/p&gt;

&lt;p&gt;You are satisfied with a job when you thoroughly enjoy it.&lt;/p&gt;

&lt;p&gt;So, what are the enjoyable aspects of being a software developer?&lt;/p&gt;

&lt;p&gt;Without getting too much into the weeds, I will provide 5 aspects to consider that make a software development job enjoyable.&lt;/p&gt;

&lt;p&gt;All of these aspects should be present in an ideal role. However, some aspects are more appealing to some than others.&lt;/p&gt;

&lt;p&gt;You should consider which of these 5 aspects really makes you tick. This will help you either bring out the most of your current role (where you have influence) or step into a more ideal role.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-enjoyment-of-creating-a-product"&gt;
  &lt;/a&gt;
  1) Enjoyment of Creating a Product
&lt;/h2&gt;

&lt;p&gt;What makes software development so exciting is the ability to create.&lt;/p&gt;

&lt;p&gt;By learning the skills required to develop software, you are able to create solutions to improve the lives of other humans via a product.&lt;/p&gt;

&lt;p&gt;All products intend to solve a common problem for a niche of other humans.&lt;/p&gt;

&lt;p&gt;Each team that creates a product ought to strive together to make their product the best it can be for their end users.&lt;/p&gt;

&lt;p&gt;Part of the satisfaction of being a software developer is to create something that improves the lives of others and seeing the reaction of those lives that are improved.&lt;/p&gt;

&lt;p&gt;A team that wants to incentivize developers should emphasize:&lt;/p&gt;

&lt;p&gt;1) The purpose of the product being developed&lt;br&gt;
2) The uniqueness of the product being developed&lt;br&gt;
3) The impact of the product being developed&lt;br&gt;
4) The reactions of the delivered product&lt;/p&gt;

&lt;p&gt;A good team will not only make developers feel that they are on a good and grand mission but validate the success of their mission (via surfacing customer reactions/testimonials).&lt;/p&gt;

&lt;p&gt;Additionally, a good team will make developers an active part of the product-making progress, allowing them to influence the direction of the product.&lt;/p&gt;

&lt;p&gt;Developers can leverage their technical expertise to suggest ideas that product-exclusive team members and customers may not realize as a possibility.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-enjoyment-of-crafting-your-trade"&gt;
  &lt;/a&gt;
  2) Enjoyment of Crafting Your Trade
&lt;/h2&gt;

&lt;p&gt;Software development is a trade, and like all trades, there is satisfaction in becoming as technically sound in your trade as possible.&lt;/p&gt;

&lt;p&gt;This complements other enjoyments of software development. For example, the better skilled you are, the better you can help create a product that solves the needs of others.&lt;/p&gt;

&lt;p&gt;However, crafting your trade is something that is satisfying in and of itself.&lt;/p&gt;

&lt;p&gt;Developers should be encouraged that their enjoyment of crafting their trade is taken seriously and accounted for.&lt;/p&gt;

&lt;p&gt;Here are some ways teams can allow developers in crafting their trade:&lt;/p&gt;

&lt;p&gt;1) Allocating time for writing high quality code (instead of forcing scrappy code due to ambitious deadlines)&lt;br&gt;
2) Prioritizing times for addressing tech debt&lt;br&gt;
3) Encouraging technical conversations/knowledge transfer between developers in informal and formal ways&lt;br&gt;
4) Allow developers to craft technical skills in other areas besides the product they work on (i.e. open source software, side projects, blogging, contributing to a specialized, technical team)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-enjoyment-of-compensation"&gt;
  &lt;/a&gt;
  3) Enjoyment of Compensation
&lt;/h2&gt;

&lt;p&gt;Poor compensation will exasperate gaps in satisfying the needs of developers. Good compensation provides peace of mind and a greater ability to be patient through periods of adjustment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-enjoyment-of-culture"&gt;
  &lt;/a&gt;
  4) Enjoyment of Culture
&lt;/h2&gt;

&lt;p&gt;Developers are often in the grind of coding. Of course, there is a certain enjoyment that developers can find in that.&lt;/p&gt;

&lt;p&gt;But, humans are human, and it is only human to enjoy rich and fun interactions with other humans.&lt;/p&gt;

&lt;p&gt;That means that developers should be stimulated with opportunities to be casual with other co-workers, get to know each other better, have fun together, collaborate together, etc.&lt;/p&gt;

&lt;p&gt;A rich culture in a team can really make work more enjoyable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-enjoyment-of-career-development"&gt;
  &lt;/a&gt;
  5) Enjoyment of Career Development
&lt;/h2&gt;

&lt;p&gt;This is similar to allowing developers to craft their trade, however, developers also need outside influence to be guided towards an enjoyable career.&lt;/p&gt;

&lt;p&gt;A good team will be comprised of leaders who can recognize what satisfies a developer and try to maximize the enjoyment in the role (or a future role) for said developer.&lt;/p&gt;

&lt;p&gt;These leaders come in the form of technical leads and managers.&lt;/p&gt;

&lt;p&gt;Technical leads and manages can help train less-experienced developers how to craft their trade. They can "go to bat" for developers to make sure that their priorities and needs are accounted for. They can serve as mentors that can be talked to in times of adversity, whether in work or life.&lt;/p&gt;

&lt;p&gt;A system of support through technical leads and managers is incredibly satisfying.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Now that you have these various aspects to consider, you should prioritize these aspects and do all that you can to make your role the most satisfying. This will always require a tricky-but-achievable balance of taking initiative to fill in gaps yourself, bring up suggestions to others, or look for better fits.&lt;/p&gt;

</description>
      <category>career</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Living in the Shell #19; df (Report Disk Free Space)</title>
      <author>Babak K. Shandiz</author>
      <pubDate>Sat, 18 Dec 2021 19:55:20 +0000</pubDate>
      <link>https://dev.to/babakks/living-in-the-shell-19-df-report-disk-free-space-544p</link>
      <guid>https://dev.to/babakks/living-in-the-shell-19-df-report-disk-free-space-544p</guid>
      <description>&lt;h2&gt;
  &lt;a href="#-raw-df-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;df&lt;/code&gt; 💾
&lt;/h2&gt;

&lt;p&gt;Reports disk free space.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#see-disk-free-space"&gt;
  &lt;/a&gt;
  See disk free space
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;df&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Filesystem     1K-blocks      Used Available Use% Mounted on
tmpfs            1603540      2068   1601472   1% /run
/dev/nvme0n1p3 471738592 268747932 178957944  61% /
tmpfs            8017688    327492   7690196   5% /dev/shm
tmpfs               5120         4      5116   1% /run/lock
tmpfs               4096         0      4096   0% /sys/fs/cgroup
/dev/nvme0n1p1    244988      5304    239684   3% /boot/efi
tmpfs            1603536       120   1603416   1% /run/user/1000
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Note that the values are in kilobytes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#humanreadable-size-values-raw-h-endraw-"&gt;
  &lt;/a&gt;
  Human-readable size values &lt;code&gt;-h&lt;/code&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;df&lt;/span&gt; &lt;span class="nt"&gt;-h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Filesystem      Size  Used Avail Use% Mounted on
tmpfs           1.6G  2.1M  1.6G   1% /run
/dev/nvme0n1p3  450G  257G  171G  61% /
tmpfs           7.7G  313M  7.4G   4% /dev/shm
tmpfs           5.0M  4.0K  5.0M   1% /run/lock
tmpfs           4.0M     0  4.0M   0% /sys/fs/cgroup
/dev/nvme0n1p1  240M  5.2M  235M   3% /boot/efi
tmpfs           1.6G  120K  1.6G   1% /run/user/1000
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#include-filesystem-type-raw-t-endraw-"&gt;
  &lt;/a&gt;
  Include file-system type &lt;code&gt;-T&lt;/code&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;df&lt;/span&gt; &lt;span class="nt"&gt;-hT&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Filesystem     Type   Size  Used Avail Use% Mounted on
tmpfs          tmpfs  1.6G  2.1M  1.6G   1% /run
/dev/nvme0n1p3 ext4   450G  257G  171G  61% /
tmpfs          tmpfs  7.7G  296M  7.4G   4% /dev/shm
tmpfs          tmpfs  5.0M  4.0K  5.0M   1% /run/lock
tmpfs          tmpfs  4.0M     0  4.0M   0% /sys/fs/cgroup
/dev/nvme0n1p1 vfat   240M  5.2M  235M   3% /boot/efi
tmpfs          tmpfs  1.6G  120K  1.6G   1% /run/user/1000
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#produce-a-grand-total-raw-total-endraw-"&gt;
  &lt;/a&gt;
  Produce a grand total &lt;code&gt;--total&lt;/code&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;df&lt;/span&gt; &lt;span class="nt"&gt;-h&lt;/span&gt; &lt;span class="nt"&gt;--total&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;

&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Filesystem      Size  Used Avail Use% Mounted on
...
total           461G  257G  182G  59% -
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

</description>
      <category>productivity</category>
      <category>linux</category>
      <category>bash</category>
      <category>devops</category>
    </item>
    <item>
      <title>Part 1: How do custom Caret(cursor)</title>
      <author>vladimirschneider</author>
      <pubDate>Sat, 18 Dec 2021 19:26:44 +0000</pubDate>
      <link>https://dev.to/vladimirschneider/part-1-custom-caret-hook-347d</link>
      <guid>https://dev.to/vladimirschneider/part-1-custom-caret-hook-347d</guid>
      <description>&lt;p&gt;Hi there 👋🏼&lt;/p&gt;

&lt;p&gt;If you wanna see this right now: &lt;a href="https://native-castom-caret-2o9cjtggk-vladimirschneider.vercel.app"&gt;DEMO&lt;/a&gt; and &lt;a href="https://github.com/vladimirschneider/native-castom-caret"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I work on a startup about managing To-Do lists and now my task is to create a custom caret for editing some text content of To-Do items.&lt;/p&gt;

&lt;p&gt;This is my first try (spoiler: not successful).&lt;/p&gt;

&lt;p&gt;I did not find articles about how to create custom caret and I hope that this article and my thinkings will be helpful for you.&lt;/p&gt;

&lt;p&gt;I wanna say now that this is not yet a solved problem. This is for fun only.&lt;/p&gt;

&lt;p&gt;So. Let's write a silly component before starting to write logic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-ltcaret-gt-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;Caret /&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;This is a very simple component.&lt;/p&gt;

&lt;p&gt;I use &lt;code&gt;createPortal&lt;/code&gt; for position caret on a page.&lt;/p&gt;

&lt;p&gt;The component has coords props and height of caret.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Coordinate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;CaretProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Coordinate&lt;/span&gt;
    &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Coordinate&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So If &lt;code&gt;coords&lt;/code&gt; or &lt;code&gt;height&lt;/code&gt; props equal &lt;code&gt;null&lt;/code&gt; I return &lt;code&gt;null&lt;/code&gt; and caret is not visible. In the end, the component look like that&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Caret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;height&lt;/span&gt;
&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;CaretProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;createPortal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
      &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;cx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;caret&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
        &lt;span class="na"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`translate3d(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px, 0px)`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;var(--color-system-blue-light)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;,
&lt;/span&gt;    &lt;span class="c1"&gt;// @ts-ignore&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;caret&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-lttext-gt-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;Text /&amp;gt;&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;This component calls our hook when I going to write later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;handleBlur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;currentText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCaret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;refNode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The props of hook I pass to &lt;code&gt;&amp;lt;div /&amp;gt;&lt;/code&gt; when containing &lt;code&gt;currentText&lt;/code&gt; and the &lt;code&gt;&amp;lt;Caret /&amp;gt;&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;To do &lt;code&gt;&amp;lt;div /&amp;gt;&lt;/code&gt; editable I use &lt;code&gt;contentEditable&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;But by default, I have a placeholder and I should not have the ability to edit a placeholder, so &lt;code&gt;contentEditable&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;currentText&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;. But I should catch a focus in the field, so I set another attribute &lt;code&gt;tabIndex={0}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So the component look like that&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Placeholder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;cx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;placeholder&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;Enter&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;To&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Do&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TextListsWidget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;TextListsWidgetProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;refNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLDivElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;handleBlur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;currentText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCaret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;refNode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;cx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wrapper&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
        &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;refNode&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;cx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;onBlur&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleBlur&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;onKeyDown&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;tabIndex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;contentEditable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;currentText&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;suppressContentEditableWarning&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;currentText&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Placeholder&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Caret&lt;/span&gt;
          &lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
            &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;
          &lt;span class="p"&gt;}}&lt;/span&gt;
          &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-usecaret-endraw-hook"&gt;
  &lt;/a&gt;
  &lt;code&gt;useCaret&lt;/code&gt; hook
&lt;/h2&gt;

&lt;p&gt;So, first I write constants with keys and for keys as ignore, backspace, and arrows keys&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;IGNORE_KEYS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Shift&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Control&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Alt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Meta&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Escape&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tab&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;CapsLock&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="c1"&gt;// Arrows&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ArrowUp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ArrowDown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Enter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BACKSPACE_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Backspace&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ARROW_LEFT_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ArrowLeft&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ARROW_RIGHT_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ArrowRight&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The hook has two props: text &lt;code&gt;node&lt;/code&gt; and &lt;code&gt;text&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I going to follow some values: &lt;code&gt;caretPosition&lt;/code&gt;, &lt;code&gt;currentText&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and caret &lt;code&gt;height&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I did useState hooks for this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;caretPosition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCaretPosition&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CaretPosition&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;currentText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCurrentText&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setX&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Coordinate&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Coordinate&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setHeight&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, I going to write handlers and start with &lt;code&gt;handleClick&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First I need the function to get coords and height of caret when the user does click.&lt;/p&gt;

&lt;p&gt;For this I use &lt;code&gt;window.getSelection()&lt;/code&gt;. Next I get first node with &lt;code&gt;getRangeAt(0)&lt;/code&gt; and next I get &lt;code&gt;x, y and height&lt;/code&gt; with getBoundingClientRect to selected node.&lt;/p&gt;

&lt;p&gt;I should remember about the user scroll. Content could be very long and users can have the scroll. I get only y scroll because I can not have &lt;code&gt;y&lt;/code&gt; scroll.&lt;/p&gt;

&lt;p&gt;So If the text does not exist I should have x equal offsetLift of the node.&lt;/p&gt;

&lt;p&gt;So, getCoords function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getCoords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RefObject&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLDivElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scrollTopSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollTop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSelection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;selection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;selection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getRangeAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;offsetLeft&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;scrollTopSize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;height&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;scrollTopSize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's write a first handler 🙌🏼&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-handleclick-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;handleClick&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;By click, I should get coords and set our states x, y, height and set &lt;code&gt;caretPosition&lt;/code&gt; for  component. If the text does not exist I set &lt;code&gt;caretPosition&lt;/code&gt; to zero.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSelection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;selection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;coords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getCoords&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;setX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;setY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;setHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentText&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;currentText&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCaretPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getRangeAt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;startOffset&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCaretPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentText&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-handleblur-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;handleBlur&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;This is the very simple handler. I should reset our states&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleBlur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;setY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;setHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-handlechange-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;handleChange&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;This is the very important handler and I think It may be not simple for you.&lt;/p&gt;

&lt;p&gt;First I check If the pressed key is IGNORE KEY and if it is I do return.&lt;/p&gt;

&lt;p&gt;If the pressed key arrow left or right I set caretPosition to &lt;code&gt;caretPosition - 1&lt;/code&gt; or &lt;code&gt;caretPosition + 1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next If pressed key is backspace I get left by &lt;code&gt;caretPosition substring - 1&lt;/code&gt; and right substring and do &lt;code&gt;setCurrentText(left + right)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If I do not find pressed key in my keys constant I calc left and right substrings and do &lt;code&gt;left + e.key + right&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Full handler look like that&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;coords&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getCoords&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;setX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;setY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;setHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;IGNORE_KEYS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ARROW_LEFT_KEY&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;caretPosition&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;caretPosition&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setCaretPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;caretPosition&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ARROW_RIGHT_KEY&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;caretPosition&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;currentText&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;currentText&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;caretPosition&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;currentText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setCaretPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;caretPosition&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BACKSPACE_KEY&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentText&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;currentText&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;caretPosition&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;caretPosition&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;caretPosition&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;caretPosition&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;setCurrentText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;caretPosition&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;caretPosition&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setCaretPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;caretPosition&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setCaretPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;caretPosition&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentText&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;currentText&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCurrentText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setCaretPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;caretPosition&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;caretPosition&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;setCurrentText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;setCaretPosition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;caretPosition&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;caretPosition&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So each time when I change the caret position I should update x, y, and height on correct values. So I use the &lt;code&gt;useEffect&lt;/code&gt; hook for this and a native Range class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;range&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Range&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSelection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selection&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;selection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focusNode&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;caretPosition&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setStart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focusNode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;caretPosition&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collapse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;selection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeAllRanges&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;selection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addRange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getCoords&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;setX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;setHeight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;caretPosition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the end, I just return handlers and values to the user in the out.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;handleBlur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;currentText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;coords&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I wrote a &lt;a href="https://native-castom-caret-2o9cjtggk-vladimirschneider.vercel.app"&gt;simple example&lt;/a&gt; for you. Welcome to the GitHub page and thank you.&lt;/p&gt;

&lt;p&gt;In the next week, I going to write the second part about how you can do this very simple and more boilerplate.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
      <category>showdev</category>
    </item>
    <item>
      <title>10x Sprint Master: a technical and social experiment</title>
      <author>Eduardo Pinho</author>
      <pubDate>Sat, 18 Dec 2021 18:49:31 +0000</pubDate>
      <link>https://dev.to/e_net4/10x-sprint-master-a-technical-and-social-experiment-ahp</link>
      <guid>https://dev.to/e_net4/10x-sprint-master-a-technical-and-social-experiment-ahp</guid>
      <description>&lt;p&gt;I recently wrote a game for the &lt;a href="https://itch.io/jam/game-off-2021"&gt;GitHub GameOff&lt;/a&gt; jam, which has been a fairly common practice of mine for. &lt;a href="https://e-net4.itch.io/10x-sprint-master"&gt;&lt;strong&gt;10x Sprint Master&lt;/strong&gt;&lt;/a&gt; is about software development, team coordination, quality assurance, bug fixing, workplaces, and taking breaks for coffee every once in a while. In other words, this game is about work. The tech work that so many developers out there have, except that it's intended to be fun.&lt;/p&gt;

&lt;p&gt;The next section of this post is a description of the game. Afterwards, there will be a more technical section, in which I will cover the technologies that were used, as well as personal notes and expectations about their use. Finally, the third section makes an introspection into the social aspects that give the game a personality of its own.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  Description
&lt;/h2&gt;

&lt;p&gt;The game puts &lt;em&gt;You&lt;/em&gt; in the shoes of a &lt;strong&gt;development lead engineer&lt;/strong&gt;, who has just arrived into a fictional company, and will soon become responsible for creating tasks to perform, specifying what each task entails, and assigning them to members of the team, while managing the life cycle of each task.&lt;/p&gt;

&lt;p&gt;You don't have a name (the caption "You" appears below your avatar), but you are given the opportunity to name the product or project to whatever you want (even though the company is nameless). And oddly enough, all your team members have actual names.&lt;/p&gt;

&lt;p&gt;The entirety of the game takes place in front of a &lt;em&gt;project workboard&lt;/em&gt;, consisting of 5 columns, each representing a stage:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;em&gt;Backlog&lt;/em&gt; stage is where new tickets arrive.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;Sprint Candidate&lt;/em&gt; stage turns stub tickets into well specified tasks.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;In Progress&lt;/em&gt; stage is where the actual coding takes place to fulfill the task's acceptance criteria.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;Under Review&lt;/em&gt; stage is where tasks are checked for bugs. If bugs are found, moving them back to In Progress allows you to fix them.&lt;/li&gt;
&lt;li&gt;Once ready to go upstream, tasks are moved into the &lt;em&gt;Done&lt;/em&gt; stage, and can no longer be interacted with.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you start the game, and if you kept the &lt;em&gt;Onboarding&lt;/em&gt; option checked, you will meet with the former lead engineer, who will explain you how to do things. But that mentor will also leave you at the end of the month, and so you will be forced to inherit the entire knowledge and workload during that time! To the player though, it amounts to knowing how to drag and drop tickets around with the mouse.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cfV1rNUo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqa3zwrt8vxjfx3m7kz1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cfV1rNUo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqa3zwrt8vxjfx3m7kz1.png" alt="In-game screenshot: Month 3, two developers" width="860" height="744"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You start the game severely understaffed: only you as the developer. A few months in and new hires arrive. However, they will not have the same experience as you, so they will work slower until they get better over time. And speaking of time, some tasks have a deadline, and sometimes you are given some final hour feature requests.&lt;/p&gt;

&lt;p&gt;Every while that a developer writes code under a task, they may be introducing bugs. 🐛 The review stage is the place where they are hopefully found. 👀 ...that is, before it is too late and they are merged. Irrespective of that, each contribution brought upstream increases the complexity of the software, which can be mitigated with chore tasks. As time passes, the tasks to fulfill become more and more demanding.&lt;/p&gt;

&lt;p&gt;Occasionally, you will receive random messages from your peers for the full workplace experience. They will complain during their coffee breaks ☕ about the excessive number of meetings. You will receive reminders to pick the toppings for your pizza lunch. 🍕 You may also be asked to help the DevOps team, which is almost always in trouble. &lt;/p&gt;

&lt;p&gt;And yet, the game actually does not mention how much these developers get paid. There is no salary negotiation, no distribution of dividends, not even a worthy mention of how well received your product is.&lt;/p&gt;

&lt;p&gt;What exactly drives the player to continue going, then? Well, there is a score. Merge tasks, and it goes up. Mistreat your software with too many bugs and technical debt, and it will slowly linger over time. Make it too difficult to work on your projects, and your team members will give up and leave, only making things worse. Ultimately, optimizing for score requires you to strike a balance between feature delivery, bug fixing, and technical debt mitigation.&lt;/p&gt;

&lt;p&gt;Do this well enough and you will receive a special call from the CEO! Well, this might not actually be possible though. Please let me know if you ever manage to achieve this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-technical-experiment"&gt;
  &lt;/a&gt;
  A technical experiment
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#primary-tooling"&gt;
  &lt;/a&gt;
  Primary tooling
&lt;/h3&gt;

&lt;p&gt;I decided to write this game in HTML, CSS, and... that's right, Rust via WebAssembly.&lt;/p&gt;

&lt;p&gt;It was never a matter of whether these were the right tools for the job. It was about gaining experience in a field which I only had minimal grasp of, and about understanding how far one could go in frontend development for the Web using Rust, a programming language which I enjoy and am already well fared in outside web front-end development.&lt;/p&gt;

&lt;p&gt;In the process, I picked Yew as the Web framework. There wasn't too much thought put on this decision, but I felt that it was the most mature Rust solution for dynamic web applications. Trunk was used for building the project, which is apparently a common choice here. It is far from being as complete as Webpack or Parcel, but it did the job as intended:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;trunk serve&lt;/code&gt; would continuously build and refresh open pages on any source changes;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;trunk build&lt;/code&gt; would do the process once.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Combine that with additional options and Cargo tweaks, and that would give me all resources, optimized, hashed and ready to be published.&lt;/p&gt;

&lt;p&gt;There was only one &lt;strong&gt;relevant tweak&lt;/strong&gt; I had to make in the distributed index HTML file in order to make it work on itch.io: the paths to the various assets had to be modified to be &lt;em&gt;relative paths instead of absolute paths&lt;/em&gt;. This is because itch.io provides the games' assets in a cross origin which will not sit in the root path.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#graphics-and-design"&gt;
  &lt;/a&gt;
  Graphics and design
&lt;/h3&gt;

&lt;p&gt;I have also been taking &lt;a href="https://css-for-js.dev"&gt;Josh Comeau's CSS for JavaScript developers course&lt;/a&gt;, and I took this jam as an opportunity to apply my new skills. Even though I have only completed the first few modules, it has so far enabled me to have a much better grasp of CSS, instead of just blindly messing around with properties until I got what I wanted. If you are interested in knowing how to write modern CSS, there is no other course I could recommend but this one.&lt;/p&gt;

&lt;p&gt;As such, the game's design was primarily driven by CSS, with some emojis to serve as memorable icons. Even the characters and the cute little bug presented in the tickets were made with a bunch of styled &lt;code&gt;div&lt;/code&gt;s. Keeping that part of the application away from Rust felt ideal, so as to reduce DOM manipulations to the minimum necessary. Even the animations in the onboarding phase demonstrating how to move tasks around were completely devoid of JavaScript or WebAssembly to function. I liked them pretty much.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qIfbRgwo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lzmq7c635sywtqudmurl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qIfbRgwo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lzmq7c635sywtqudmurl.gif" alt="In-game screenshot depicting one of the messages during the on-boarding phase." width="880" height="771"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There's even an easter egg: stay in the main menu for a while to see something cute. All in pure CSS. 😬&lt;/p&gt;

&lt;p&gt;I added PostCSS so that I could use &lt;code&gt;@import&lt;/code&gt; statements and incorporate automatic prefixing. One of the minor nuisances that I could not resolve was to join PostCSS and Trunk together when serving the application locally. I ended up creating an npm project with multiple scripts to run all the necessary steps, and I would just run a CSS watcher alongside &lt;code&gt;trunk serve&lt;/code&gt; in another terminal.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-rust"&gt;
  &lt;/a&gt;
  Using Rust
&lt;/h3&gt;

&lt;p&gt;But to speak of nicer things now. Thanks to the use of Rust, working on certain features was a breeze.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#game-state"&gt;
  &lt;/a&gt;
  Game state
&lt;/h4&gt;

&lt;p&gt;The game's state was serialised and deserialised back using &lt;code&gt;serde&lt;/code&gt;, achieved with little more than a few automatically derived trait implementations. With the use of a textual representation, it was possible to rely on the standard Web &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage"&gt;local storage&lt;/a&gt; to save the game. It wouldn't always work when hosted on itch.io, unfortunately. Browsers are finicky when you depend on storage for a cross-origin resource, and might block it completely. I had to tell players to disable their browser shields in order to save their progress.&lt;/p&gt;

&lt;p&gt;There were a few other pieces of information which were passed around in a serialised form through the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API"&gt;Drag and Drop API&lt;/a&gt;. This in particular felt like a great achievement, as I had to include a custom helper abstraction for access to data transfer properties. This is what made dragging and dropping work. Alas, this API required a lot of work in order to support touch events and other forms of feedback that I was hoping to obtain but we're not possible through data transfer alone.&lt;br&gt;
The constraints caused by this were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The game does not work on mobile devices, although this support would have been wonderful to have.&lt;/li&gt;
&lt;li&gt;Feedback about an operation would only appear after the fact: instead of the workboard stage column appear with a different style when hovering a task over it, I added a message in red at the top of the workboard whenever the player tried to make an invalid move for a task , such as from &lt;em&gt;Backlog&lt;/em&gt; directly to &lt;em&gt;Done&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#random-stuff"&gt;
  &lt;/a&gt;
  Random stuff
&lt;/h4&gt;

&lt;p&gt;Random events of various sorts were triggered with the help of &lt;code&gt;rand&lt;/code&gt;. I found &lt;code&gt;rand_pcg&lt;/code&gt; to be nice and fast for the purpose. The ugly story here is that the odds of something happening at a game update tick (be it whether a bug is introduced, a new task should appear, etc.) was achieved with a mishmash of formulae combining a variety of in-game parameters in a very creative way. This came with the problem that they were quite hard to tune, 🔧 which in a way contributed to the game's notably high difficulty. Note to self: create better abstractions for random events next time.&lt;/p&gt;

&lt;p&gt;With these events and other game entities generated, the elegance of Rust enabled me to manipulate the game's task in ways which I was already well versed in. Iterators were employed throughout when transforming tasks and updating state based on them.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#yew"&gt;
  &lt;/a&gt;
  Yew
&lt;/h4&gt;

&lt;p&gt;Last but definitely not least, I will talk about Yew. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It required me to perform many more &lt;code&gt;.clone()&lt;/code&gt;s than the ones I would usually do. This is mostly because component properties had to be owned by each instantiation, although I did not get into whether they this was &lt;em&gt;always&lt;/em&gt; necessary. In any case, there were a significant bunch of clones.&lt;/li&gt;
&lt;li&gt;The macro based syntax for declaring virtual DOM nodes did the job, but it was quite verbose and a bit tricky to get the hang of. It was annoying that all hardcoded text strings inside had to be enclosed in quotes &lt;em&gt;as well as&lt;/em&gt; an expression block (e.g. &lt;code&gt;&amp;lt;div&amp;gt;{"Something"}&amp;lt;\div&amp;gt;&lt;/code&gt;), although this may have to do with a limitation of the macro system. As part of a macro, syntax highlighting was constantly broken.&lt;/li&gt;
&lt;li&gt;It further reinforced my idea that &lt;em&gt;working with callbacks in Rust is a mess&lt;/em&gt;. It is already a paradigm which I strive to avoid, but there is no way to avoid it here. Closures had to capture context in a special way, and interfacing with the JavaScript environment required a bunch of conversions to make things work. There were helper methods to create callbacks interfacing with Yew, but it was still a bit surprising when the program failed to compile once I tried to use some component state without cloning it beforehand. That pattern became clearer, but it still put me to the test of how much I knew about ownership, borrowing, and non-lexical lifetimes.&lt;/li&gt;
&lt;li&gt;It was not always clear how one is expected to manage the game's state and trigger changes from user interactions down the tree of elements. I ended up implementing a global event dispatcher that the main game component would listen and handle immediately (e.g. for pop-up messages) or pass on to a game update routine. It was a weird piece, and the primary game component was much more complex than the other ones because of it, but it did just what I was looking for.&lt;/li&gt;
&lt;li&gt;It was fast enough. It would have been nice for me to say that it was blazing fast, but I don't have a point of comparison. That would require me to rewrite the whole thing in JavaScript. 🤢 Still, even though the DOM had to be updated around once every 50 ms, this was &lt;em&gt;far&lt;/em&gt; from becoming a problem. Most updates would take less than 3 ms each (compiled in release mode) in my personal laptop, 9 ms in debug mode worst case.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href="https://github.com/Enet4/10xSprintMaster"&gt;source code&lt;/a&gt; is available on GitHub, as is typical in GitHub GameOff. Enjoy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-social-experiment"&gt;
  &lt;/a&gt;
  A social experiment
&lt;/h2&gt;

&lt;p&gt;The idea of making such a nerdy strategy game that puts you in the role of a software engineer wasn't very new. I had kept a similar idea for the right time to work on it, but 10x Sprint Master, albeit just as nerdy an idea as I could come up with, was on a whole different subject: treating the project workboard as the center of all attention in software engineering.&lt;/p&gt;

&lt;p&gt;It is worth noting that this game was never meant to make an accurate portrayal of any well known agile methodology, such as Scrum. There may indeed be similarities, but ultimately, this is not Scrum, and I definitely wouldn't depict this game as educational. For all intents and purposes, it was just some method what the fictional company decided to stick to.&lt;/p&gt;

&lt;p&gt;Most importantly, this game subjects the player to the encumbering of technical debt in a way which could never happen in real life. Time goes fast, and once you reach unbearable levels of complexity, you are submerged in a pool of deadlines impossible to meet. There is no actual losing condition, but I find it perfectly normal for anyone to give up and exit the game at that point, thus emulating a losing condition all the same.&lt;/p&gt;

&lt;p&gt;It is a bit brutal, even if not on purpose. All with the primary goal of accumulating points which don't translate to promotions, raises, or any other kind of advancement or compensation. In retrospective, this game feels like a prank on myself. A self satire of engineering endeavours under the narrow mindset of testing a software project as the means to further work on the same project, where the goal is to optimize for more features, more quality, and less technical debt, all under the guise of a seemingly familiar daily routine.&lt;/p&gt;

&lt;p&gt;Maybe next time I'll just build a platformer or something. 😐&lt;/p&gt;




&lt;p&gt;You can play 10x Sprint Master on a modern web browser &lt;a href="https://e-net4.itch.io/10x-sprint-master"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>webassembly</category>
      <category>rust</category>
      <category>css</category>
    </item>
    <item>
      <title>Designing as a crafty dev</title>
      <author>Katie Hughes (she/her)</author>
      <pubDate>Sat, 18 Dec 2021 18:36:49 +0000</pubDate>
      <link>https://dev.to/glitteringkatie/designing-as-a-crafty-dev-2f0p</link>
      <guid>https://dev.to/glitteringkatie/designing-as-a-crafty-dev-2f0p</guid>
      <description>&lt;p&gt;If you've been here before, you know I'm a frontend developer! If not, welcome to &lt;a href="https://glitteringkatie.com"&gt;my blog&lt;/a&gt;! Like any dev, it's hard to resist that well-known itch to re-do my personal website. So here we are. I've given my website a facelift for two reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I want to support more blog post topics than just tech.&lt;/li&gt;
&lt;li&gt;I want to use &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt; because that's what I've been using at work.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I've always been a crafty person with an eye for design. I designed all previous iterations of this website! But I'm by no means a graphic/web/frontend designer, so it is &lt;em&gt;super&lt;/em&gt; easy to get overwhelmed when planning out a new design.&lt;/p&gt;

&lt;p&gt;Why is it so hard to get started? Well, frontend design is honestly blank canvas/page syndrome to the max. When painting, you at least have a limited color palette; or when decorating a room, you have a budget.&lt;/p&gt;

&lt;p&gt;When designing a website, it is easy to be overwhelmed because you have virtually every color and font and every way of configuring that content that you can imagine.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-some-inspo"&gt;
  &lt;/a&gt;
  Get some inspo
&lt;/h2&gt;

&lt;p&gt;Taking inspiration from how I approach planning a room, my first step was &lt;a href="https://www.pinterest.com/glitteringkatie/blog-mood-board/"&gt;creating a Pinterest board&lt;/a&gt; and pinning anything I liked. Fonts, layouts, colors, etc. This helped me see everything I was drawn to all in one space, identifying the patterns that emerged.&lt;/p&gt;

&lt;p&gt;Looking in my closet and around my apartment, I obviously love greens and creams together. So obvious, in fact, that one day in a 1-1, I realized I was on a dark teal couch with a dark green sweatshirt with my pale complexion holding a mug with a dark teal/green dipped bottom and creamy top. When you start paying attention, you'll see patterns pop out.&lt;/p&gt;

&lt;p&gt;Mood board resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.pinterest.com/"&gt;Pinterest&lt;/a&gt; (benefit of having content in it already)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://milanote.com/product/moodboarding"&gt;Milanote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://unsplash.com/collections/a36sckpBj1U/blog-photos"&gt;Make an Unsplash collection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Your photo editor of choice&lt;/li&gt;
&lt;li&gt;Old fashioned magazine + glue&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#narrow-it-down"&gt;
  &lt;/a&gt;
  Narrow it down
&lt;/h2&gt;

&lt;p&gt;We've gone from staring at a blank screen to staring at pictures and colors and fonts that we like. So let's key into our patterns!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#colors"&gt;
  &lt;/a&gt;
  Colors
&lt;/h3&gt;

&lt;p&gt;We just made mood boards with colors, so start with the color combos that pop out to you there, whether you saved actual color palettes or just images. We're going to aim for 5 starter colors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Background color (Usually white or off white)&lt;/li&gt;
&lt;li&gt;Text color (Usually black or off black)&lt;/li&gt;
&lt;li&gt;Main color (Pick your favorite color!)&lt;/li&gt;
&lt;li&gt;2 Accent colors (You can choose more if you want, but 2 is very doable. These should make your main color look its best!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And then, let me introduce you to your new best friend: &lt;a href="http://coolors.co/"&gt;Coolors.co&lt;/a&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coolorsco"&gt;
  &lt;/a&gt;
  &lt;a href="http://coolors.co/"&gt;Coolors.co&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;First, go to &lt;a href="http://coolors.co/generate"&gt;coolors.co/generate&lt;/a&gt;. If you have any colors for which you know the &lt;em&gt;exact hex&lt;/em&gt;, go ahead and input those and lock them in. Then have at it with the space bar to auto-generate color palettes! It looks like coolors does a good job of giving you a mix of complementary, contrasting, and triadic color schemes. If you're not set on the &lt;em&gt;exact&lt;/em&gt; hex code, play around with the colors you started with. You never know what you'll find!&lt;/p&gt;

&lt;p&gt;When playing around with the hues and tones, I suggest using HSL. This is a color code based on Hue, Saturation, and Luminance. HSL is much closer to how we think of color mixing, thanks to elementary school, than something like RGB.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-accessibility-note"&gt;
  &lt;/a&gt;
  Quick accessibility note
&lt;/h3&gt;

&lt;p&gt;Now that you've found some colors you like, let's refine them while thinking about accessibility. Here are your steps&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to &lt;a href="https://webaim.org/resources/contrastchecker/"&gt;https://webaim.org/resources/contrastchecker/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Test 1: your text color on your background color, make either darker or lighter as needed&lt;/li&gt;
&lt;li&gt;Test 2: your main color on your background color, again adjusting &amp;amp; checking test 1 if you change your background color&lt;/li&gt;
&lt;li&gt;Test 3: either your dark-ish or black-ish color on your main color as a background, think CTA buttons needing text&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#fonts"&gt;
  &lt;/a&gt;
  Fonts
&lt;/h3&gt;

&lt;p&gt;First, look at your mood board and notice what fonts you saved have in common. Are they serifed (have feet)? Are the sans-serif (no feet!)? Are they more blocky? Handwritten? We're going to choose 3 fonts here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Logo font&lt;/li&gt;
&lt;li&gt;Header font&lt;/li&gt;
&lt;li&gt;Base (paragraph) font&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I didn't use the same font in my logo as I did in my header because I read a blog post saying that you need to keep your logo distinct. But that's up to you!&lt;/p&gt;

&lt;p&gt;In a book, paragraph fonts are usually serifed. The feet of the serif drag your eyes across. They provide movement. Sans-serif fonts tend to be a little crisper on a screen because a consistent stroke is easier to render than a tapering edge. Do you want people to stop and take notice? Or sit and read?&lt;/p&gt;

&lt;p&gt;You can find fonts anywhere, but I'd recommend skimming through &lt;a href="https://fonts.google.com/"&gt;Google Fonts&lt;/a&gt;. Their fonts are free and open source and are super easy to include in your website. They are also pretty widely available in other systems, like &lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt;! If you want help narrowing down options, &lt;a href="https://www.typewolf.com/google-fonts"&gt;Typewolf has a great guide on Google Fonts&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#logo"&gt;
  &lt;/a&gt;
  Logo
&lt;/h3&gt;

&lt;p&gt;My "brand name" lends itself easily to an emoji. I actually had the emoji in mind when brainstorming a consistent handle across platforms. So I've always used ✨ as part of my branding.&lt;/p&gt;

&lt;p&gt;I used &lt;a href="https://www.canva.com/logos/"&gt;Canva's logo templates&lt;/a&gt; to play around easily and see what I liked. I keyed in on a design, but with Canva, you don't own your logo. So I keyed into the design I liked the most and used it as inspiration in &lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In Figma, I developed a logo icon and a logo with my name in it. The icon lends itself to favicon use, and the full logo lends itself to the header. I then made heavy use of Figma allowing you to right-click and copy as SVG to save my designs!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#swatch-it-all-together"&gt;
  &lt;/a&gt;
  Swatch it all together
&lt;/h3&gt;

&lt;p&gt;Using Figma still, I put my logo icon, my full logo, and a swatch of my colors and fonts together. I want to pause here and say I never really used Figma before this project, so I don't know all of the ins and outs, just kind of futzed with it until I had something that looked reasonable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6KDrc1kS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://glitteringkatie.com/assets/blog/designing-as-a-crafty-dev/swatch.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6KDrc1kS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://glitteringkatie.com/assets/blog/designing-as-a-crafty-dev/swatch.png" alt="unorganized screenshot of my logos &amp;amp; font/color swatch" width="880" height="197"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#layout"&gt;
  &lt;/a&gt;
  Layout
&lt;/h2&gt;

&lt;p&gt;Alright! We have colors! Fonts! A LOGO! We're ready to go now, right? I really want to plead with you, developer, that you should spend the time actually laying out your pages in Figma or on a sheet of paper or whatever. Creating a layout isn't as easy as it seems when you have no plan. Again, we're dealing with the ultimate blank canvas syndrome.&lt;/p&gt;

&lt;p&gt;Did you save any layouts on your mood board? If you didn't, surf around the 'net now and find similar websites to yours. Go on some website template services and see how they layout content. Don't copy directly but take inspiration.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#real-content"&gt;
  &lt;/a&gt;
  Real content
&lt;/h3&gt;

&lt;p&gt;You know how when you were a kid, and you drew a speech balloon and tried to fit text inside of it only to find out you didn't leave enough room? That's going to be you now if you don't take the time to think through your real copy.&lt;/p&gt;

&lt;p&gt;Real talk? Step all the way away from your design editor. Just do this in a document using bullet points to represent different sections, side-by-side sections, or links to other pages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#all-together-now"&gt;
  &lt;/a&gt;
  All together now
&lt;/h3&gt;

&lt;p&gt;Once we have realistic content and have decided on colors, fonts, and logos, it's time to put this puzzle together! Make a layout for every page you intend on having, no matter how simple that page will be. I promise taking the time to do all of this planning &lt;em&gt;will&lt;/em&gt; lead to a better thought-out website, and it &lt;em&gt;will&lt;/em&gt; make your coding process more straightforward.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QeOcB0wc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://glitteringkatie.com/assets/blog/designing-as-a-crafty-dev/layouts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QeOcB0wc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://glitteringkatie.com/assets/blog/designing-as-a-crafty-dev/layouts.png" alt="screenshot of all of my layouts planned in figma" width="880" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-got-this"&gt;
  &lt;/a&gt;
  You got this
&lt;/h2&gt;

&lt;p&gt;This whole thing takes time. But once you have a solid design plan, it will be worth executing it and making it live. For me, it took around 25 days to go from nothing to deploying on &lt;a href="http://glitteringkatie.com/"&gt;glitteringkatie.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When I decided to redesign, I was ready to immediately get coding. But I made myself take the time to really think through my design. Honestly, once I had a design, I didn't even want to code at that point. Ultimately the motivating factor for me wasn't, "Wow, I'll have an even nicer tech blog!" Instead, it was, "Wow, when I'm done, I'll have better functionality to support posts about furniture flipping and random crafts!" If you’re putting in this hard work, know &lt;em&gt;why&lt;/em&gt; you are doing all of this work!&lt;/p&gt;

&lt;p&gt;I hope something in this blog post helped you! And stay tuned for some non-tech content in the future!&lt;/p&gt;

</description>
      <category>ux</category>
      <category>design</category>
      <category>nextjs</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>Different possible methods for generating a colour randomly in JS</title>
      <author>Prakhar Tandon</author>
      <pubDate>Sat, 18 Dec 2021 18:17:43 +0000</pubDate>
      <link>https://dev.to/prakhart111/different-possible-methods-for-generating-a-colour-randomly-in-js-3l1</link>
      <guid>https://dev.to/prakhart111/different-possible-methods-for-generating-a-colour-randomly-in-js-3l1</guid>
      <description>&lt;p&gt;In this post, I will be summarising several possible methods for generating a colour randomly in JavaScript.&lt;br&gt;
So, Save this article !&lt;br&gt;
As you might be aware of how colours are represented, i.e, Hexadecimal code with a '#' prefix --&amp;gt; &lt;code&gt;#RRGGBB&lt;/code&gt;&lt;br&gt;
The code for Black --&amp;gt; &lt;code&gt;#000000&lt;/code&gt;&lt;br&gt;
and for white --&amp;gt; &lt;code&gt;#ffffff&lt;/code&gt;&lt;br&gt;
Hence higher the values, more the colour will be lighter and vice-versa.&lt;br&gt;
Here's the different methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Method 1&lt;/strong&gt; 
In this approach, simply take a string of all possible hexadecimal characters, then choose from it randomly and concatenate them to form a 6 digit hex code.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0123456789ABCDEF&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getRandomColor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// generates number between 0-15&lt;/span&gt;
       &lt;span class="nx"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;col&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;col&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;for generating lighter/Darker colours only, we can use sLight or sDark respectively.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sLight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;789ABCDEF&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sDark&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;01234567&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Method 2&lt;/strong&gt;
Similar to the first one but here instead of predefined string, we can use &lt;code&gt;toString(16)&lt;/code&gt; to convert to HexaDecimal.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getRandomColor&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Method 3&lt;/strong&gt;
We can use the following ES6 approach :
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getRandomHex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getRangedRandomColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="s2"&gt;`#&lt;/span&gt;&lt;span class="p"&gt;${[...&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getRandomHex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getRandomColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getRangedRandomColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mh"&gt;0xf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getRandomColorLight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getRangedRandomColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x7&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mh"&gt;0xf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getRandomColorDark&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getRangedRandomColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x0&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="mh"&gt;0x7&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks to &lt;a class="mentioned-user" href="https://dev.to/lukeshiru"&gt;@lukeshiru&lt;/a&gt; for this one, and you can find the detailed explaination for this in the comments section of my previous article &lt;a href=""&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Method 4&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getRandomColor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;hex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hex&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// pad with zero&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;substr(-2) means take last two characters of the string.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Method 5&lt;/strong&gt;
This one is a great one liner for the same I found on StackOverflow.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getRandomColor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;00000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well these were some of my picks, if you want to dive in more, you can have a look at &lt;a href=""&gt;this thread&lt;/a&gt; on StackOverFlow.&lt;/p&gt;

&lt;p&gt;You can save this article for future references and comment down your opinions as well !&lt;/p&gt;

&lt;p&gt;You can follow me on:&lt;br&gt;
&lt;a href=""&gt;Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href=""&gt;GitHub&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>css</category>
    </item>
    <item>
      <title>Neon - 404 Page Not Found</title>
      <author>Abod Micheal (he/him)</author>
      <pubDate>Sat, 18 Dec 2021 18:05:16 +0000</pubDate>
      <link>https://dev.to/abodmicheal/neon-404-page-not-found-2b55</link>
      <guid>https://dev.to/abodmicheal/neon-404-page-not-found-2b55</guid>
      <description>&lt;p&gt;Might come out handy &lt;iframe height="600" src="https://codepen.io/Tibixx/embed/GRKmppz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
  </channel>
</rss>
