<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Easy local tunnel with docker environment</title>
      <author>Kirill Bobykin</author>
      <pubDate>Thu, 26 Aug 2021 16:58:24 +0000</pubDate>
      <link>https://dev.to/qelphybox/easy-local-tunnel-with-docker-environment-1oc0</link>
      <guid>https://dev.to/qelphybox/easy-local-tunnel-with-docker-environment-1oc0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You can provide demo for your web application from development environment&lt;/li&gt;
&lt;li&gt;You can use domain and https connection for test purposes&lt;/li&gt;
&lt;li&gt;It is pretty easy to setup&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How?
&lt;/h2&gt;

&lt;p&gt;Try to use tunnel services like &lt;a href="https://ngrok.com/"&gt;ngrok&lt;/a&gt;, &lt;a href="https://localtunnel.me/"&gt;localtunnel&lt;/a&gt;, etc...&lt;/p&gt;

&lt;p&gt;You can check it with docker-compose. Setup &lt;code&gt;docker-compose.yml&lt;/code&gt;, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# docker-compose.yml&lt;/span&gt;
&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3.8'&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;server&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginxdemos/hello&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;

  &lt;span class="na"&gt;localtunnel&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;efrecon/localtunnel&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;on-failure&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="s"&gt;--local-host server --port 80 --subdomain $SUBDOMAIN&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;SUBDOMAIN=my_unique_subdomain&lt;/span&gt;
    &lt;span class="na"&gt;links&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;server&lt;/span&gt;
    &lt;span class="na"&gt;depends_on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;server&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run this config with &lt;code&gt;docker-compose up -d&lt;/code&gt;&lt;br&gt;
Then check &lt;a href="https://megauniquedomain.loca.lt/"&gt;https://megauniquedomain.loca.lt/&lt;/a&gt; you will meet your server root page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h2&gt;

&lt;p&gt;I found &lt;a href="https://stackoverflow.com/a/53180742/4636729"&gt;great answer on stackoverflow&lt;/a&gt; for you!&lt;/p&gt;

</description>
      <category>localtunnel</category>
      <category>devenv</category>
      <category>docker</category>
    </item>
    <item>
      <title>GSoC Coding Phase 2: Challenge Is an Understatement</title>
      <author>Rohan Lekhwani</author>
      <pubDate>Thu, 26 Aug 2021 16:54:12 +0000</pubDate>
      <link>https://dev.to/rohanlekhwani/gsoc-coding-phase-2-challenge-is-an-understatement-bji</link>
      <guid>https://dev.to/rohanlekhwani/gsoc-coding-phase-2-challenge-is-an-understatement-bji</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;It was all going smooth. And then this happened.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://summerofcode.withgoogle.com/"&gt;Google Summer of Code&lt;/a&gt;&lt;/strong&gt; is a 10 week global open-source program for students.&lt;/p&gt;

&lt;p&gt;It has been in the running for 16 years! In case you're new here, I recommend checking out my first blog in this series.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/rohanlekhwani/how-i-got-selected-into-google-summer-of-code-27"&gt;How I Got Selected into Google Summer of Code&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I'm revamping the &lt;strong&gt;&lt;a href="https://rocket.chat/blog/product/top-8-the-most-popular-rocket-chat-apps/"&gt;most downloaded app&lt;/a&gt;&lt;/strong&gt; on Rocket.Chat - the &lt;strong&gt;&lt;a href="https://github.com/RocketChat/rocket.chat.app-poll"&gt;Poll App&lt;/a&gt;&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bonus:&lt;/strong&gt; While it's been a smooth ride, there's one thing that happened that made all of us scratch our heads. Hang tight!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;p&gt;Here’s a recap of the features I built in &lt;strong&gt;&lt;a href="https://dev.to/rohanlekhwani/commit-push-merge-gsoc-coding-phase-1-51i0"&gt;Coding Phase 1&lt;/a&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Improved Response Visualizations:&lt;/strong&gt; Previously the Poll App displayed simple grayscale reponses. This was dull and boring. Moreover, there wasn’t a way to distinguish winners and total votes cast. &lt;strong&gt;&lt;a href="https://github.com/RocketChat/rocket.chat.app-poll/pull/2"&gt;Here’s&lt;/a&gt;&lt;/strong&gt; how we changed this.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Mixed Visibility Mode:&lt;/strong&gt; The Poll App allowed only two modes — open where voter identities were visible and closed where they were not. What about something in the middle? Introducing &lt;strong&gt;&lt;a href="https://github.com/RocketChat/rocket.chat.app-poll/pull/5"&gt;Mixed Visibility Mode&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Word Clouds:&lt;/strong&gt; Bar graphs are simple. Bar graphs do the job. And bar graphs are just &lt;em&gt;“okay”&lt;/em&gt;. Word Clouds are lit! Visualize responses in word clouds &lt;strong&gt;&lt;a href="https://github.com/RocketChat/rocket.chat.app-poll/pull/6"&gt;here&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-did-i-add-to-the-poll-app"&gt;
  &lt;/a&gt;
  What Did I Add to the Poll App?
&lt;/h2&gt;

&lt;p&gt;While planning my timeline within my GSoC proposal, my strategy was to take up easier features at the start. This would allow me to have more time to explore the &lt;strong&gt;&lt;a href="https://rocketchat.github.io/Rocket.Chat.Apps-engine/"&gt;Rocket.Chat Apps Engine&lt;/a&gt;&lt;/strong&gt; while still shipping out features consistently.&lt;/p&gt;

&lt;p&gt;Coding Phase 1 was a success. It was time to bring out the &lt;strong&gt;big guns&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#userdefined-options"&gt;
  &lt;/a&gt;
  User-defined Options
&lt;/h3&gt;

&lt;p&gt;Until now the Poll App only allowed the Poll Creator to add options. Once they posted the poll no changes to the options could be made. &lt;strong&gt;What if users have an idea not covered within the options?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now if you’ve ever used Facebook polls within groups you might’ve noticed a subtle feature. All group members can add options after the poll is posted. Allowing group members to vote not only involves the community better but also evokes ideas and opinions from the entire group, not just limited to the poll creator.&lt;/p&gt;

&lt;p&gt;We decided to give the Poll Creator an option — allow or disallow users from adding choices. Here’s how the poll message looks when the poll creator allowed users to add options.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TfAwxQUQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8t99e9zogzfw03tnpjl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TfAwxQUQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8t99e9zogzfw03tnpjl.png" alt="Allow Users to Add Options After Poll Creation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See that Add option button? That becomes available to all the users within the room. Let’s click on it and see what happens.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gsrfJHqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chgq3b6crsj46s5ej3hk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gsrfJHqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chgq3b6crsj46s5ej3hk.png" alt="Adding German as a new option. I don’t speak German. (yet :P)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It opens up a modal that allows users to add an option. On clicking Add the option gets added to the existing Poll message with both vote quantity and voters set to 0.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lGCJraCY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygbsm3u1v8vpw9q54463.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lGCJraCY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygbsm3u1v8vpw9q54463.png" alt="Germans in the house!"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Poll message updates for everyone within the room with the new option. Yay!&lt;/p&gt;

&lt;p&gt;The PR for this feature along with a video demo can be found here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-poll-modes"&gt;
  &lt;/a&gt;
  Additional Poll Modes
&lt;/h3&gt;

&lt;p&gt;Adding options to Poll was kind of repetitive. Especially if you’re doing a 1 to 10 poll typing 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 was what you had to do (&lt;em&gt;okay I just did that&lt;/em&gt;). I thought:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--68C4gHf3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdz8qcgoasq9ghulpaih.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--68C4gHf3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdz8qcgoasq9ghulpaih.png" alt="Why not?"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Poll App only had two modes — Mutliple Choice and Single Choice. That. Is. It. &lt;strong&gt;What if I could add more modes that would auto-fill all the options?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Over the next few days (and nights) I added the following modes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Overrated/Underrated Polls&lt;/strong&gt; (Options: Overrated, Appropriately Rated, Never Tried, Underrated)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;1-to-5 Polls&lt;/strong&gt; (Options: 1–5)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;1-to-10 Polls&lt;/strong&gt; (Options: 1–10)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Agree/Disagree Polls&lt;/strong&gt; (Options: Agree/Disagree)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Emoji Rank Polls&lt;/strong&gt; (Options: Watch the demo! 🚀)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ieOwIyo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2AsPhvVXxvC7wogIUc869mZg.gif" class="article-body-image-wrapper"&gt;&lt;img alt="Emoji Rank Polls in Action!" src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ieOwIyo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2AsPhvVXxvC7wogIUc869mZg.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The best part is that the modal is completely interactive. This means that as soon as you select one of the additional poll modes the Options fields automatically disappear. Not to mention that Additional Poll modes support Mixed Visibility. How cool is that?&lt;/p&gt;

&lt;p&gt;To view other additional poll modes, checkout the &lt;strong&gt;&lt;a href="https://github.com/RocketChat/rocket.chat.app-poll/pull/11"&gt;PR&lt;/a&gt;&lt;/strong&gt; for Additional Poll Modes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#live-polls"&gt;
  &lt;/a&gt;
  Live Polls
&lt;/h3&gt;

&lt;p&gt;If you’ve attempted an online quiz before. Well this it!&lt;/p&gt;

&lt;p&gt;Introducing Live Polls. To be honest about it, the effort and thought that went into this feature qualifies it as a &lt;strong&gt;mini-GSoC project&lt;/strong&gt; itself.&lt;/p&gt;

&lt;p&gt;Live Polls are an array of regular Polls with additional functionality of having a time limit to vote upon after which the current Poll ends and the next one is posted. Poll creators can also click on a new “Next Poll” button to trigger a pre-scheduled finish of the current Poll.&lt;/p&gt;

&lt;p&gt;The scheduling magic happens using the &lt;strong&gt;&lt;a href="https://developer.rocket.chat/apps-development/fundamentals-of-apps/scheduler-api"&gt;Scheduler API&lt;/a&gt;&lt;/strong&gt;. Every time a Poll within a Live Poll is posted, a processor is scheduled to end it after the user-specified time to vote.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kkcp9IRm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r6s865itd4d0ji4vezg3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kkcp9IRm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r6s865itd4d0ji4vezg3.png" alt="Time to vote on the Poll along with a “Next Poll” button."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Live Polls are triggered using the command &lt;code&gt;/poll live &amp;lt;number of polls&amp;gt;&lt;/code&gt;.&lt;br&gt;
An excellent use-case for the Live Poll are stand-up and retro meetings. An additional use case is by teachers wanting to conduct &lt;strong&gt;timed quizzes&lt;/strong&gt; on Rocket.Chat.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Late Retrieval&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My mentor suggested that in addition to having the Polls timed, the user should also be able to create a Live Poll at a time and retrieve or play it at a later time.&lt;/p&gt;

&lt;p&gt;I created a subcommand &lt;code&gt;/poll live save &amp;lt;number of polls&amp;gt;&lt;/code&gt;. It saves all the Poll states in the Poll App’s persistent storage. A unique &lt;strong&gt;Live Poll ID&lt;/strong&gt; is provided to the user.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MjUdEnQ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/puw7nh6isld1w95ixc76.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MjUdEnQ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/puw7nh6isld1w95ixc76.png" alt="Live Poll ID generated after saving Live Poll within persistent storage.&amp;lt;br&amp;gt;
"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The created Live Poll can be subsequently retrieved using the &lt;code&gt;/poll live load &amp;lt;Live Poll ID&amp;gt;&lt;/code&gt;. In case the user enters a wrong or non-existent Live Poll ID they’re shown a notification. On executing the above command with a correct Poll ID the Live Poll can be retrieved at any time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GT_vKtm5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2AvA5bEwLTDGNTnMBS7LL_fQ.gif" class="article-body-image-wrapper"&gt;&lt;img alt="Retrieving a pre-created Live Poll." src="https://res.cloudinary.com/practicaldev/image/fetch/s--GT_vKtm5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/700/1%2AvA5bEwLTDGNTnMBS7LL_fQ.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Speaking of teachers using Rocket.Chat for exams, the Live Poll Late Retrieval features proves an excellent tool for teachers to create quizzes even weeks before and then schedule the quiz on D-day with ease. All this while having control over the time limit to answer each question.&lt;/p&gt;

&lt;p&gt;The PR for Live Poll and Live Poll Late Retrieval features can be found &lt;strong&gt;&lt;a href="https://github.com/RocketChat/rocket.chat.app-poll/pull/13"&gt;here&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus-an-unexpected-problem"&gt;
  &lt;/a&gt;
  Bonus: An Unexpected Problem!
&lt;/h3&gt;

&lt;p&gt;If you’ve been through my &lt;strong&gt;&lt;a href="https://dev.to/rohanlekhwani/commit-push-merge-gsoc-coding-phase-1-51i0"&gt;Coding Phase 1 article&lt;/a&gt;&lt;/strong&gt; you would remember us using the &lt;strong&gt;&lt;a href="http://quickchart.io/documentation/word-cloud-api/"&gt;Quickchart Wordcloud API&lt;/a&gt;&lt;/strong&gt; to generate wordclouds.&lt;/p&gt;

&lt;p&gt;While this API works well when your Rocket.Chat server is connected to the Internet, a lot of organizations (my mentors org Credit Suisse, US Defence) use Rocket.Chat in an isolated environment. That means no Internet access. What then?&lt;/p&gt;

&lt;p&gt;We thought why not host Quickchart locally using their &lt;strong&gt;&lt;a href="https://github.com/typpo/quickchart"&gt;open-sourced codebase&lt;/a&gt;&lt;/strong&gt;? But…Wait-for-it. Quickchart has all APIs &lt;strong&gt;except&lt;/strong&gt; wordcloud open-sourced. Ha!&lt;/p&gt;

&lt;p&gt;Another problem was rate-limits. Quickchart has a rate-limit of &lt;code&gt;60 requests per minute per IP&lt;/code&gt; on their free tier. This means it is totally unsuitable for rooms with more than 60 members. My mentor Murtaza shared a perfect explaination. Quoting him from the &lt;strong&gt;&lt;a href="https://github.com/RocketChat/rocket.chat.app-poll/pull/6"&gt;PR&lt;/a&gt;&lt;/strong&gt; comment:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;if all the users are accessing the room from a different network then the limit is fair enough, however if all the users are on a private network behind a (Router + NAT) then although each of them will have a different local IP, but the same public IP — In that case if there is a single room with more than 60 users, they all would be identified as a single entity/IP and the rate limit will come into picture.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;I thought, why can’t I build my own API and remove Quickchart out of the equation altogether? And:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FCWUEzOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/349/1%2APHq45ZJJ4ibMrl8yI2e0zQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FCWUEzOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/349/1%2APHq45ZJJ4ibMrl8yI2e0zQ.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Within a few days I had our own in-house developed Wordcloud API. The best thing about it? It offered &lt;strong&gt;more&lt;/strong&gt; customizations than Quickchart Enterprise, worked without an Internet connection, had practically no rate-limits and was free.&lt;/p&gt;

&lt;p&gt;I have open-sourced the word-cloud API &lt;strong&gt;&lt;a href="https://github.com/RonLek/wordcloud-api"&gt;here&lt;/a&gt;&lt;/strong&gt;. Feel free to use it in your own projects or raise a PR for further customizations.&lt;/p&gt;

&lt;p&gt;My API also factors in the number of votes cast per option. For example, if English received twice as many votes as Hindi on a Poll then “English” would appear twice as big as “Hindi” within the word-cloud.&lt;/p&gt;

&lt;p&gt;I provided the repository link within the Poll App settings page for users to self-host the API. This solved our Wordcloud frenzy forever.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Have you faced an unexpected problem while coding a project? How did you solve it? Could you find a solution or did you just leave it for the future? Let me know in the comments section below!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I write biweekly about my GSoC journey at Rocket.Chat and this was the fifth blog in this series. Follow my voyage on &lt;a href="https://dev.to/rohanlekhwani"&gt;DEV&lt;/a&gt; and &lt;a href="https://rohanlekhwani.medium.com/about"&gt;Medium&lt;/a&gt; ⭐️&lt;/p&gt;

&lt;p&gt;In case you haven’t checked out my previous blog about GSoC First Evaluations, go check it out now —it covers in detail how a GSoC student is evaluated.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/rohanlekhwani/gsoc-first-evaluations-all-you-need-to-know-2pjf"&gt;GSoC First Evaluations: All You Need to Know&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;Like what I do? Help me pull my next all-nighter. Consider &lt;a href="https://www.buymeacoffee.com/rohanlekhwani"&gt;buying me a coffee&lt;/a&gt;.🥤&lt;/p&gt;

&lt;p&gt;Rohan Lekhwani is an open source contributor and enthusiast. You can connect with him on &lt;a href="https://www.linkedin.com/in/rohanlekhwani/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="http://github.com/RonLek"&gt;GitHub&lt;/a&gt;, &lt;a href="https://twitter.com/Rohanlekhwani"&gt;Twitter&lt;/a&gt;, and his &lt;a href="https://ronlek.github.io/"&gt;website&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Brief History Of Bootstrap</title>
      <author>prosperyong</author>
      <pubDate>Thu, 26 Aug 2021 16:53:54 +0000</pubDate>
      <link>https://dev.to/yongdev/brief-history-of-bootstrap-3gi6</link>
      <guid>https://dev.to/yongdev/brief-history-of-bootstrap-3gi6</guid>
      <description>&lt;p&gt;Free and open source, Bootstrap is a framework for creating websites and online applications. It is designed on CSS and JavaScript (JS) to make it easier to create responsive, mobile-first websites and apps using the Bootstrap framework. As a result of responsive design, a website or app can recognise the size and orientation of a visitor's screen and dynamically adjust its presentation appropriately. Employers rely on mobile applications as their primary means of completing tasks, therefore it's important that designers take into account the technology's requirements.&lt;/p&gt;

&lt;p&gt;In addition to the framework, Bootstrap contains user interface components, layouts and JS tools. Source code and precompiled applications are also available. Bootstrap was created in mid-2010 by Mark Otto and Jacob Thornton at Twitter to improve the uniformity of tools used on the site and reduce maintenance costs for the site. Previous versions of the programme were referred to as Twitter Blueprint and Twitter Bootstrap.&lt;/p&gt;

&lt;p&gt;After a few months of development, Twitter conducted its inaugural Hack Week, and the project expanded as developers of various skill levels stepped in without any external supervision from the company. As of today, it still serves as a style guide for internal tool development.&lt;br&gt;
There have been almost twenty releases since the first on August 19, 2011, including two significant rewrites with v2 and 3. To make the entire framework more responsive, we included a responsive stylesheet in Bootstrap 2. By using Bootstrap 3, we made it responsive by default, with a mobile-first focus.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#share-your-thoughts-below"&gt;
  &lt;/a&gt;
  Share Your Thoughts Below
&lt;/h3&gt;

</description>
      <category>bootstrap</category>
      <category>history</category>
      <category>css</category>
      <category>framework</category>
    </item>
    <item>
      <title>Calculator</title>
      <author>Al Siam</author>
      <pubDate>Thu, 26 Aug 2021 16:21:01 +0000</pubDate>
      <link>https://dev.to/alsiamworld/calculator-epd</link>
      <guid>https://dev.to/alsiamworld/calculator-epd</guid>
      <description>&lt;h1&gt;
  &lt;a href="#100daysofcode-day-13"&gt;
  &lt;/a&gt;
  100daysofcode [Day - 13]
&lt;/h1&gt;

&lt;p&gt;Hello everyone, today I created a simple calculator using js.&lt;/p&gt;

&lt;p&gt;Live preview: &lt;a href="https://smart-js-calculator.netlify.app"&gt;https://smart-js-calculator.netlify.app&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WQsiIaPN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rfh0klfbpshzffft8ur.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WQsiIaPN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rfh0klfbpshzffft8ur.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Bite-Sized CSS: Pseudo Classes vs. Pseudo Elements</title>
      <author>Albert Chang</author>
      <pubDate>Thu, 26 Aug 2021 15:54:11 +0000</pubDate>
      <link>https://dev.to/a89529294/bite-sized-css-pseudo-classes-vs-pseudo-elements-1fmf</link>
      <guid>https://dev.to/a89529294/bite-sized-css-pseudo-classes-vs-pseudo-elements-1fmf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#pseudo-classes"&gt;
  &lt;/a&gt;
  Pseudo Classes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Starts with one colon.&lt;/li&gt;
&lt;li&gt;Deals with states, such as button:hover, button:focus.&lt;/li&gt;
&lt;li&gt;Selects the whole element.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes"&gt;MDN Pseudo Classes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pseudo-elements"&gt;
  &lt;/a&gt;
  Pseudo Elements
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Starts with double colons, ::before, ::first-letter, etc.&lt;/li&gt;
&lt;li&gt;Selects part of the element.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements"&gt;MDN Pseudo Elements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>beginners</category>
      <category>html</category>
    </item>
    <item>
      <title>Using Fixtures In Testing Symfony Application</title>
      <author>Jarek</author>
      <pubDate>Thu, 26 Aug 2021 15:47:12 +0000</pubDate>
      <link>https://dev.to/jszutkowski/using-fixtures-in-testing-symfony-application-47n2</link>
      <guid>https://dev.to/jszutkowski/using-fixtures-in-testing-symfony-application-47n2</guid>
      <description>&lt;p&gt;Recently I was creating a Symfony application. I used Doctrine as the ORM. I also wrote tests in which I used a database to check that the components were properly interacting with each other and that the data was fetched correctly. I needed a tool which would populate the database with sample data so that I didn't have to create them every time and that they would be the same in all tests.&lt;/p&gt;

&lt;p&gt;DoctrineFixturesBundle turned out to be an excellent tool for this purpose. It enables the creation of sample data that can later be used in tests. Data can be created in one file or divided, e.g. by entity. The bundle supports many databases such as MySQL, PostgreSQL or SQLite. What is more, fixtures can be used not only in tests - they can, for example, be used to fill the development database with sample data.&lt;/p&gt;

&lt;p&gt;I also used the LiipTestFixturesBundle. This tool includes services which would load fixtures into the test database. It allows writing functional tests as well. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#installing-dependencies"&gt;
  &lt;/a&gt;
  Installing Dependencies
&lt;/h1&gt;

&lt;p&gt;Assuming we start our project from scratch, we will add a few packages. First, let's install Doctrine. We do this with the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require symfony/orm-pack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Additionally, we will need a SymfonyMakerBundle that allows you to generate predefined test classes, controllers, migrations, etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require &lt;span class="nt"&gt;--dev&lt;/span&gt; symfony/maker-bundle
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;DoctrineFixturesBundle installation is done by running the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require orm-fixtures &lt;span class="nt"&gt;--dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also need PHPUnit to write tests:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require &lt;span class="nt"&gt;--dev&lt;/span&gt; phpunit/phpunit symfony/test-pack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we install the Liip Test Fixtures Bundle:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require liip/test-fixtures-bundle &lt;span class="nt"&gt;--dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#example-entities"&gt;
  &lt;/a&gt;
  Example Entities
&lt;/h1&gt;

&lt;p&gt;In such an application, let's create example entities that we will use in tests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strict_types&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Entity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Doctrine\ORM\Mapping&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="no"&gt;ORM&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="c1"&gt;#[ORM\Entity]&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;#[ORM\Id]&lt;/span&gt;
    &lt;span class="c1"&gt;#[ORM\GeneratedValue(strategy: 'AUTO')]&lt;/span&gt;
    &lt;span class="c1"&gt;#[ORM\Column(type: 'integer')]&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;?int&lt;/span&gt; &lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;#[ORM\Column(type: 'string', nullable: false)]&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;#[ORM\Column(type: 'integer', nullable: false)]&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$price&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;#[ORM\ManyToOne(targetEntity: Category::class)]&lt;/span&gt;
    &lt;span class="c1"&gt;#[ORM\JoinColumn(name: 'category_id', referencedColumnName: 'id')]&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;Category&lt;/span&gt; &lt;span class="nv"&gt;$category&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Category&lt;/span&gt; &lt;span class="nv"&gt;$category&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$price&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$category&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strict_types&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Entity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Doctrine\ORM\Mapping&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="no"&gt;ORM&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="c1"&gt;#[ORM\Entity]&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Category&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;#[ORM\Id]&lt;/span&gt;
    &lt;span class="c1"&gt;#[ORM\GeneratedValue(strategy: 'AUTO')]&lt;/span&gt;
    &lt;span class="c1"&gt;#[ORM\Column(type: 'integer')]&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;?int&lt;/span&gt; &lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;#[ORM\Column(type: 'string', nullable: false)]&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#creating-fixtures"&gt;
  &lt;/a&gt;
  Creating Fixtures
&lt;/h1&gt;

&lt;p&gt;We create fixtures in classes which extend the Fixture class. We can add sample entities here and save them using EntityManager.&lt;br&gt;
We can also add references to such created entities - then we can use them in other fixtures classes.&lt;br&gt;
Moreover, if our class implements the DependentFixtureInterface interface, we will be able to specify which fixtures it depends on.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\DataFixtures&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Entity\Category&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Doctrine\Bundle\FixturesBundle\Fixture&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Doctrine\Common\DataFixtures\DependentFixtureInterface&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Doctrine\Persistence\ObjectManager&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CategoryFixtures&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Fixture&lt;/span&gt; &lt;span class="c1"&gt;//implements DependentFixtureInterface&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;ObjectManager&lt;/span&gt; &lt;span class="nv"&gt;$manager&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$categories&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Books'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Sport'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$categories&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$categoryName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$categoryName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nv"&gt;$manager&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;persist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$category&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nv"&gt;$manager&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;addReference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'category-%s'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$categoryName&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nv"&gt;$category&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//    public function getDependencies(): array&lt;/span&gt;
&lt;span class="c1"&gt;//    {&lt;/span&gt;
&lt;span class="c1"&gt;//        return [OtherFixtures::class];&lt;/span&gt;
&lt;span class="c1"&gt;//    }&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h1&gt;

&lt;p&gt;Tests should extend the KernelTestCase class. This will allow us to use database in them. Adding fixtures is now very easy. We can just call the loadFixtures method on the DatabaseToolCollection service, which takes an array of class names as an argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strict_types&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Tests&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\DataFixtures\CategoryFixtures&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Entity\Category&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Entity\Product&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Doctrine\ORM\EntityManagerInterface&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Liip\TestFixturesBundle\Services\DatabaseToolCollection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Liip\TestFixturesBundle\Services\DatabaseTools\AbstractDatabaseTool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Symfony\Bundle\FrameworkBundle\Test\KernelTestCase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductTest&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;KernelTestCase&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;AbstractDatabaseTool&lt;/span&gt; &lt;span class="nv"&gt;$databaseTool&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;EntityManagerInterface&lt;/span&gt; &lt;span class="nv"&gt;$entityManager&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;databaseTool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;getContainer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;DatabaseToolCollection&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;entityManager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;getContainer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;EntityManagerInterface&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;testChangeProductPrice&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;databaseTool&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;loadFixtures&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
            &lt;span class="nc"&gt;CategoryFixtures&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;
        &lt;span class="p"&gt;]);&lt;/span&gt;

        &lt;span class="nv"&gt;$category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;entityManager&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRepository&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;findOneBy&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Books'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;


        &lt;span class="nv"&gt;$product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Title'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$category&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;entityManager&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;persist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;entityManager&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;entityManager&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="nv"&gt;$products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;entityManager&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRepository&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;assertCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="cd"&gt;/** @var $product Product */&lt;/span&gt;
        &lt;span class="nv"&gt;$product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;array_shift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$products&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getPrice&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Title'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Books'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$product&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getCategory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>php</category>
      <category>symfony</category>
      <category>tutorial</category>
      <category>phpunit</category>
    </item>
    <item>
      <title>React Native Image Resource Generator</title>
      <author>Sergei Butko</author>
      <pubDate>Thu, 26 Aug 2021 15:40:36 +0000</pubDate>
      <link>https://dev.to/svbutko/react-native-image-resource-generator-m14</link>
      <guid>https://dev.to/svbutko/react-native-image-resource-generator-m14</guid>
      <description>&lt;p&gt;Nearly every single react-native application uses images and icons to make them look more appealing to the end user or help them use it by providing additional information.&lt;/p&gt;

&lt;p&gt;Since react-native became publicly available the process of adding these images to apps didn't change much and while working with different people and apps there've been issues, problems and mild inconveniences about which I'd like to present here and most importantly give a solution to them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#issues-problems-and-motivation"&gt;
  &lt;/a&gt;
  Issues, problems and motivation
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#file-existence"&gt;
  &lt;/a&gt;
  File existence
&lt;/h4&gt;

&lt;p&gt;In order to use images and icons in code they first have to be imported. The most common way is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./my-icon.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;By using &lt;em&gt;require&lt;/em&gt; we are manually setting the path to our file with little IDE support. And without any 3rd party plugins IDE can't guarantee whether the file exists or not, there won't be any error or at least warning to indicate that file doesn't exist. Like the file can be deleted, or you accidentally added some symbol into the require path. You will never know about it until you launch the app and open the screen where this icon is used.&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#manual-typing"&gt;
  &lt;/a&gt;
  Manual typing
&lt;/h4&gt;

&lt;p&gt;As mentioned before:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;By using &lt;em&gt;require&lt;/em&gt; we are &lt;strong&gt;manually&lt;/strong&gt; setting the path to our file...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If it's 1-5 icons it might be fine but if there are more than 10 or 50 or even 100 (there are lots of different cases). And always manually typing paths is tedious and takes your valuable time.&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#icon-replacementremoval"&gt;
  &lt;/a&gt;
  Icon replacement/removal
&lt;/h4&gt;

&lt;p&gt;Possibly a single icon can be used in different components/screens and for some reasons we have to remove it and replace it with a new one. In this case we have to search for every usage of this icon in our application and replace it with a new one, although with search-and-replacement it's a bit easier but still takes time.&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#icon-names"&gt;
  &lt;/a&gt;
  Icon names
&lt;/h4&gt;

&lt;p&gt;Not everybody create icons and UI itself, most of the time a designer does this job and while drawing and finishing icons they receive names and sometimes a person can write things like:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bell icon.png
$.png
icon,t.png
icon's.png
icon".png
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;or there might be even non-Latin alphabet letters:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;звонок.png
zurück.png
鐘.png
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Not everybody do things like this but it's still possible and after seeing this one can only introduce coding/naming conventions to a designer and politely ask him to change this or in case if it's impossible to manually change it by yourself.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/svbutko/react-native-image-resource-generator"&gt;&lt;strong&gt;react-native-image-resource-generator&lt;/strong&gt;&lt;/a&gt; was developed to overcome all of these problems, add structure, save time and nerves.&lt;/p&gt;

&lt;p&gt;It's a simple CLI tool which generates code-friendly image URI source constants to use in projects.&lt;/p&gt;

&lt;p&gt;Create a folder and put all of your images there (&lt;em&gt;sub-folders are supported too&lt;/em&gt;), e.g.:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;project
│   package.json
│   src  
│
└───resources
│   │   fonts
│   │   settings
│   │
│   └───images
│       │   arrow_down.png
│       │   arrow_down@2x.png
│       │   arrow_down@3x.png
│       │   arrow_up.png
│       │   ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Add script to your &lt;code&gt;package.json&lt;/code&gt; scripts or type into terminal:&lt;/p&gt;

&lt;p&gt;JavaScript&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;img-res-gen --dir=resources/images --out=src/common/ImageResources.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;TypeScript&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;img-res-gen --dir=resources/images --out=src/common/ImageResources.g.ts --ts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The result of the command will create a file with static image URI sources, which will look something similar to this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* eslint-disable */&lt;/span&gt;
&lt;span class="cm"&gt;/* tslint:disable */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ImageURISource&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ImageResources&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ImageURISource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../resources/images/account.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;arrow_down&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ImageURISource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../resources/images/arrow_down.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;arrow_up&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ImageURISource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../resources/images/arrow_up.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;avatar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ImageURISource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../resources/images/avatar.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;back&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ImageURISource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../resources/images/back.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;bank&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ImageURISource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../resources/images/bank.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;bell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ImageURISource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../resources/images/bell.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After this use it anywhere you need:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Image&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ImageResources&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You don't need to manually write requires anymore and stop worrying about file existence and path names.&lt;/p&gt;

&lt;p&gt;If you added or removed images, simply re-run the script to regenerate the file. IDE will give you a list of errors of used constants which don't exist anymore and you can simply replace them.&lt;/p&gt;

&lt;p&gt;As mentioned before it works with JavaScript and with TypeScript.&lt;/p&gt;

&lt;p&gt;To handle non-Latin letters and other symbols and follow naming conventions, the tool uses &lt;a href="https://github.com/dzcpy/transliteration"&gt;transliteration&lt;/a&gt; under the hood and transliterates file names.&lt;/p&gt;



&lt;p&gt;Hope you will use it in your projects and it will serve you well. And if you see any issues or would like to propose changes, feel free to create PRs!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/svbutko"&gt;
        svbutko
      &lt;/a&gt; / &lt;a href="https://github.com/svbutko/react-native-image-resource-generator"&gt;
        react-native-image-resource-generator
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>reactnative</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Building a Node.js API with Hapi.js and MongoDB</title>
      <author>Claradev32</author>
      <pubDate>Thu, 26 Aug 2021 15:33:33 +0000</pubDate>
      <link>https://dev.to/claradev32/building-a-node-js-api-with-hapi-js-and-mongodb-454c</link>
      <guid>https://dev.to/claradev32/building-a-node-js-api-with-hapi-js-and-mongodb-454c</guid>
      <description>&lt;p&gt;As our web applications scale, there is a need to reduce the development time by the use of a more reliable, and salable, tool, which gets the job done much faster.&lt;br&gt;
In this tutorial, we will build a Book Store API with Hapi.js and MongoDB. We will set up MongoDB, Hapi.js and build a RESTful API.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Prerequisites&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;This tutorial will be a hands-on demonstration, you can find the source code on &lt;a href="https://github.com/Claradev32/BookStore.git"&gt;Gitbub&lt;/a&gt;. If you'd like to follow along, be sure you have the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://www.mongodb.com/cloud/atlas"&gt;MongoDB&lt;/a&gt; Database - This tutorial uses MongoDB.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nodejs.dev/"&gt;Node.js&lt;/a&gt; - This tutorial uses Nodjs and NPM &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.postman.com/downloads/"&gt;Postman&lt;/a&gt; - This tutorial uses Postman to test the API&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-is-hapjs"&gt;
  &lt;/a&gt;
  What is Hap.js
&lt;/h2&gt;

&lt;p&gt;Hapi.js is a Nodejs framework used to build powerful, scalable applications, with minimal overhead and full out-of-the-box functionality. Hapi.js was originally developed to handle Walmart’s Black Friday scale, hapi continues to be the proven choice for enterprise-grade backend needs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-started"&gt;
  &lt;/a&gt;
  Get started
&lt;/h2&gt;

&lt;p&gt;To get started to create a folder for your project and access it from your terminal. Open the folder in Visual Studio Code or any other IDE you prefer.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir BookApp //create a folder for the project
cd \BookApp // change directory to the app folder
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Then initialize NPM, which will create a package.json file in our app root directory where we store our dependencies.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Next, we need to install some packages for our project.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install @hapi/Hapi mongoose dotenv morgan --save 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Next, let's take a look at our project structure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U_Q7V5KI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0FEADB409A157CAA8DD14F2CA9AC086842E68BDBD81AF897CA3A753F47922E22_1629990892959_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U_Q7V5KI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_0FEADB409A157CAA8DD14F2CA9AC086842E68BDBD81AF897CA3A753F47922E22_1629990892959_image.png" alt="Project Structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Controllers - is where we handle the application logic&lt;/li&gt;
&lt;li&gt;Model - is where we handle our database collection
## Setting Up Hapi.js Server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will start by creating a &lt;strong&gt;server.js&lt;/strong&gt; and *&lt;strong&gt;*file. Which is our application entry point.&lt;br&gt;
In your project root directory create and **server.js&lt;/strong&gt; file, then import the Hapi package we installed in the previous section, create an instance of the Hapi server, specify the &lt;strong&gt;port&lt;/strong&gt; you want the server to listen to, and &lt;strong&gt;host&lt;/strong&gt; address*&lt;em&gt;.&lt;/em&gt;* &lt;br&gt;
Next, we will create the root route, of our application with a GET request and create a &lt;strong&gt;handler.&lt;/strong&gt; For now, we will be sending a simple text to the client. &lt;br&gt;
Finally, we start the Hapi.js server with the &lt;strong&gt;start&lt;/strong&gt; method and display a message to the console.&lt;/p&gt;

&lt;p&gt;Add this code to your &lt;strong&gt;server.js&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Hapi = require('@hapi/hapi');

const server = Hapi.server({
  port: 4000,
  host: '127.0.0.1'
});

server.route({
  method: 'GET',
  path: '/',
  handler: (req, h) =&amp;gt; {

    return 'Hello I am Hapi!&amp;lt;';
  }
});

server.start();
console.log(`Server running on port ${server.info.uri}`);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;It's to start our server. run this command on your command line to start the server.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Next, open your web browser, navigate to &lt;strong&gt;localhost:4000.&lt;/strong&gt; The server will respond with &lt;strong&gt;Hello I am Hapi!.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-mongodb-database"&gt;
  &lt;/a&gt;
  Creating a MongoDB Database
&lt;/h2&gt;

&lt;p&gt;Now that you have learned how to create a Hapi server, let's go ahead and set up MongoDB for our project.&lt;br&gt;
We will be using &lt;a href="https://mongoosejs.com/"&gt;Mongoose&lt;/a&gt; to communicate with the MongoDB database.&lt;br&gt;
Run this command to install Mongoose:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install mongoose
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Next, let’s connect MongoDB to our application using Mongoose. We will require mongoose, create a connection using the mongoose connect method and pass in our local server address to the server.&lt;br&gt;
If the database is up, you should see “DB started” on the console.&lt;br&gt;
Add this code to your server.js:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mongoose = require("mongoose");
mongoose
 .connect("mongodb://localhost:27017/BookStore")
 .then(() =&amp;gt; {
  console.log("db started!");
 })
 .catch((e) =&amp;gt; {
  console.log(e);
 });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#creating-book-schema"&gt;
  &lt;/a&gt;
  Creating Book Schema
&lt;/h2&gt;

&lt;p&gt;We now have our database up and running, let’s go ahead and create a book &lt;a href="https://mongoosejs.com/docs/guide.html"&gt;schema&lt;/a&gt;. Each book in our store will have a &lt;strong&gt;name&lt;/strong&gt;, &lt;strong&gt;author,&lt;/strong&gt; &lt;strong&gt;price&lt;/strong&gt;, &lt;strong&gt;supplier&lt;/strong&gt;, and &lt;strong&gt;createdAt.&lt;/strong&gt; &lt;br&gt;
Next, we define the type of data the documents should accept, then we validate the data from the users, to make sure they don’t submit empty records.&lt;br&gt;
Add this code to &lt;strong&gt;model/BookModel:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const mongoose = require("mongoose");
const BookSchema = new mongoose.Schema({
 name: {
  type: String,
  required: [true, "Book price is required"],
 },
 author: {
  type: String,
  required: [true, "Authors name is required"],
 },
 price: { type: Number, required: [true, "Book price is required"] },
 ISBN: {
  type: String,
  required: [true, "Book ISBN is required"],
 },
 supplier :{
  type: String,
  required: [true, "Suppliers name is required"],
 },
 createdAt: {
  type: Date,
  default: Date.now(),
 },
});
module.exports = mongoose.model("Books", BookSchema);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#creating-books"&gt;
  &lt;/a&gt;
  Creating Books
&lt;/h2&gt;

&lt;p&gt;Now that we have defined our database schema. let’s go ahead and add a handler to add books to the store.&lt;br&gt;
First, we require the Books model, then create and export our handler function.&lt;/p&gt;

&lt;p&gt;Next, we create an object from the book model and add a record of the collection using the &lt;strong&gt;create&lt;/strong&gt; method. The data from the form is stored in the &lt;strong&gt;payload&lt;/strong&gt; as &lt;a href="https://www.w3schools.com/whatis/whatis_json.asp#:~:text=JSON%20stands%20for%20JavaScript%20Object,server%20to%20a%20web%20page"&gt;JSON&lt;/a&gt;, so we need to convert it to an object using the JSON parse method.&lt;br&gt;
Lastly, we return the created document as a response to the users.&lt;/p&gt;

&lt;p&gt;Add this code to &lt;strong&gt;controller/BookControllers.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exports.createBook = async (req, h) =&amp;gt; {
 const data = await Books.create(JSON.parse(req.payload));
 return status;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now lets go ahead and create a route for this handler function.&lt;br&gt;
add this code to your server.js&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;server.route({
 method: "GET",
 path: "/api/store",
 handler: controllers.getAllBooks,
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#getting-all-books"&gt;
  &lt;/a&gt;
  Getting All Books
&lt;/h2&gt;

&lt;p&gt;Now that we can now add books to our database, let’s get the books stored in the database.&lt;br&gt;
First, we get the books from the form, which is stored as &lt;a href="https://www.w3schools.com/whatis/whatis_json.asp#:~:text=JSON%20stands%20for%20JavaScript%20Object,server%20to%20a%20web%20page"&gt;JSON&lt;/a&gt; in the payload. Then we need to convert the data to an object since we store data as objects to our collection.&lt;/p&gt;

&lt;p&gt;Add this code to &lt;strong&gt;controller/BookController:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exports.getAllBooks = async (req, h) =&amp;gt; {
 const books = await Books.find();
 return books;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now let's go ahead and create a route for this handler function.&lt;br&gt;
Add this code to &lt;strong&gt;server.js.&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;server.route({
 method: "POST",
 path: "/api/store",
 handler: controllers.createBook,
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#getting-a-book"&gt;
  &lt;/a&gt;
  Getting a Book
&lt;/h2&gt;

&lt;p&gt;Let's go now get a book by its id. &lt;br&gt;
First, we need the &lt;strong&gt;id&lt;/strong&gt; of the Book selected, then we use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"&gt;object destructing&lt;/a&gt; to the id from the &lt;strong&gt;params&lt;/strong&gt; object.&lt;br&gt;
Next, we query the book collection to get a book by its id, using the &lt;strong&gt;findById&lt;/strong&gt; method. Then now return the book to the client.&lt;/p&gt;

&lt;p&gt;Add this code to &lt;strong&gt;controller/BookController:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exports.getBook = async(req, h) =&amp;gt; {
 const {id} = req.params
 const book = await Books.findById({_id:id});
 return book;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Next, let’s go ahead and create the &lt;strong&gt;getBook&lt;/strong&gt; route with a patch request with an id parameter.&lt;/p&gt;

&lt;p&gt;Add this code to &lt;strong&gt;server.js:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;server.route({
 method: "GET",
 path: "/api/store/{id}",
 handler: controllers.getBook,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#updating-a-book"&gt;
  &lt;/a&gt;
  Updating a Book
&lt;/h2&gt;

&lt;p&gt;Now, let create a handler function to update the book in our collection.&lt;br&gt;
First, we need to get the book id from the params object, also get the update data from the request payload. &lt;br&gt;
Next, we create an object from the books model and use the findByIdAndUpdate method to update the book whose id is specified in the request parameters. Then convert the payload to an object and pass it as the new value of the document.&lt;/p&gt;

&lt;p&gt;Next, we return the updated document with the &lt;strong&gt;new&lt;/strong&gt; option set to true and send the document to the client.&lt;/p&gt;

&lt;p&gt;Add this code to &lt;strong&gt;controller/BookController:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exports.updateBook = async (req, h) =&amp;gt; {
 const { id } = req.params;
 const data = JSON.parse(req.payload);
 const modifiedBook = await Books.findByIdAndUpdate({ _id: id }, data, {
  new:true,
 });
 return modified book;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Next, let’s go ahead and create the update route with a patch request and an id parameter.&lt;br&gt;
Add this code to &lt;strong&gt;server.js:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;server.route({
 method: "PATCH",
 path: "/api/store/{id}",
 handler: controllers.updateBook,
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#deleting-a-book"&gt;
  &lt;/a&gt;
  Deleting a Book
&lt;/h2&gt;

&lt;p&gt;Let's go ahead and create our delete handler. &lt;br&gt;
First, we need to get the book id from the params object, then delete the book from the collection from the id.&lt;br&gt;
Next, we return null to the client, since the record no longer exists.&lt;/p&gt;

&lt;p&gt;Add this code to &lt;strong&gt;controller/BookController.js:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exports.deleteBook = async (req, h) =&amp;gt; {
 const { id } = req.params;
 await Books.findByIdAndDelete({ _id: id });
 return "null";
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Next, let’s go ahead and create the delete route, which will listen to a delete request, then we pass an id as a parameter.&lt;/p&gt;

&lt;p&gt;Add this code to &lt;strong&gt;server.js:&lt;/strong&gt;&lt;/p&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;server.route({&lt;br&gt;
 method: "DELETE",&lt;br&gt;
 path: "/api/store/{id}",&lt;br&gt;
 handler: controllers.deleteBook,&lt;br&gt;
})&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
&lt;br&gt;
  &lt;a href="#testing-our-api"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  Testing our API&lt;br&gt;
&lt;/h2&gt;

&lt;p&gt;Now that we have implemented our RESTful API, let us go ahead and test them.&lt;br&gt;
Open Postman, test the with these endpoints.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://localhost:3000/api/store/"&gt;http://localhost:3000/api/store/&lt;/a&gt; - GET request&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://localhost:3000/api/store"&gt;http://localhost:3000/api/store&lt;/a&gt; - POST request with this request body&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;{&lt;br&gt;
      "name": "Advanced Javacript",&lt;br&gt;
      "price": 2000,&lt;br&gt;
      "ISBN" : "AD90976",&lt;br&gt;
      "supplier": "mark James",&lt;br&gt;
      "author": "james"&lt;br&gt;
  }&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://localhost:3000/api/store/"&gt;http://localhost:3000/api/store/&lt;/a&gt;{id} - GET request&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://localhost:3000/api/store/"&gt;http://localhost:3000/api/store/&lt;/a&gt;{id} - PATCH request&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://localhost:3000/api/store/"&gt;http://localhost:3000/api/store/&lt;/a&gt;{id} - DELETE request&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Throughout this tutorial, you've learned how to create a RESTful API using Hapi.js. You've also experienced setting up MongoDB and testing API using Postman.&lt;br&gt;
Now, how would you use Hapi in your next project to create APIs?&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to Loop JS Object Values
</title>
      <author>Asela</author>
      <pubDate>Thu, 26 Aug 2021 15:13:26 +0000</pubDate>
      <link>https://dev.to/zaselalk/how-to-loop-js-object-values-422p</link>
      <guid>https://dev.to/zaselalk/how-to-loop-js-object-values-422p</guid>
      <description>&lt;p&gt;So, How to Loop JavaScript Object Values ?&lt;/p&gt;

&lt;p&gt;Here It's&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const myJSON = '{"name":"John", "age":30, "car":null}';
const myObj = JSON.parse(myJSON);

let text = "";
for (let x in myObj) {
  text = += myObj[x] + ", ";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So Simple, Isn't it? Have a Nice day and Don't forget to follow.&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>EsNext features in TypeScript with Babel</title>
      <author>Franciszek Krasnowski</author>
      <pubDate>Thu, 26 Aug 2021 15:11:00 +0000</pubDate>
      <link>https://dev.to/fkrasnowski/esnext-features-in-typescript-with-babel-36io</link>
      <guid>https://dev.to/fkrasnowski/esnext-features-in-typescript-with-babel-36io</guid>
      <description>&lt;p&gt;&lt;em&gt;TypeScript&lt;/em&gt; is a statically typed language built on top of &lt;em&gt;JavaScript&lt;/em&gt;. It works basically like a type layer for JS - it does not introduce new features to the JS language besides types itself and implementing few syntax proposals. But what if we could extend it further? Would you like to add some custom syntax to the &lt;em&gt;TypeScript&lt;/em&gt;? I do. &lt;em&gt;Babel&lt;/em&gt; already allows us to spice up &lt;em&gt;JavaScript&lt;/em&gt; with syntax plugins. Let's try to do the same with TypeScript&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-do-some-tests"&gt;
  &lt;/a&gt;
  Let's do some tests
&lt;/h2&gt;

&lt;p&gt;After reading &lt;a href="https://devblogs.microsoft.com/typescript/typescript-and-babel-7/"&gt;this&lt;/a&gt; post or cloning &lt;a href="https://github.com/microsoft/TypeScript-Babel-Starter"&gt;this&lt;/a&gt; repo and setting our &lt;em&gt;Babel/TypeScript&lt;/em&gt; environment I'll install &lt;code&gt;@babel/plugin-proposal-pipeline-operator&lt;/code&gt; plugin:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;--save-dev&lt;/span&gt; @babel/plugin-proposal-pipeline-operator
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and add it to &lt;code&gt;.babelrc&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"presets"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"@babel/env"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"@babel/preset-typescript"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"plugins"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"@babel/proposal-class-properties"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"@babel/proposal-object-rest-spread"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;plugin:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"@babel/plugin-proposal-pipeline-operator"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;"proposal"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"minimal"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we are ready to write some &lt;em&gt;TypeScript&lt;/em&gt; code with our fresh &lt;code&gt;pipeline operator&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;triple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;kebabify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addQuotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`"&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;makeDelicous&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;triple&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;kebabify&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;addQuotes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The compilation with &lt;em&gt;Babel&lt;/em&gt; goes successfully 🥳; however, &lt;em&gt;TypeScript&lt;/em&gt; got a couple of errors:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight r"&gt;&lt;code&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;index.ts&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;59&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TS1109&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Expression&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;expected.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-holy-moly"&gt;
  &lt;/a&gt;
  The holy moly
&lt;/h2&gt;

&lt;p&gt;So what? Cannot we use the syntax plugin along with type checking goodness and emitting declaration files?...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#begin-again"&gt;
  &lt;/a&gt;
  Begin again
&lt;/h2&gt;

&lt;p&gt;The key to solving this issue is to change the approach. Instead of compiling source files with &lt;em&gt;Babel&lt;/em&gt; down to the desired &lt;em&gt;ES&lt;/em&gt; version. We'll use syntax-only plugins:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;--save-dev&lt;/span&gt; @babel/plugin-syntax-class-properties @babel/plugin-syntax-object-rest-spread @babel/plugin-syntax-typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Those plugins do not &lt;code&gt;compile&lt;/code&gt; the syntax. They just &lt;code&gt;parse&lt;/code&gt; it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Add the following command to &lt;code&gt;scripts&lt;/code&gt; in &lt;code&gt;.package.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"build:babel"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"babel ./src --out-dir lib --extensions &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;.ts,.tsx&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and type in terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run build:babel
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this struggle, output &lt;code&gt;lib/index.js&lt;/code&gt; looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;triple&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;kebabify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addQuotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`"&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"`&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;makeDelicous&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_ref2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_str&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_ref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;_ref2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;triple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_str&lt;/span&gt;&lt;span class="p"&gt;))),&lt;/span&gt; &lt;span class="nx"&gt;kebabify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_ref2&lt;/span&gt;&lt;span class="p"&gt;))),&lt;/span&gt;
    &lt;span class="nx"&gt;addQuotes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_ref&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes, it's perfectly valid &lt;em&gt;TypeScript&lt;/em&gt;!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As of the time of writing this post &lt;em&gt;TypeScript&lt;/em&gt; compiler does not support compilation of &lt;code&gt;.js&lt;/code&gt; files so we'll need a little hack&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#little-hack"&gt;
  &lt;/a&gt;
  Little hack
&lt;/h2&gt;

&lt;p&gt;To allow &lt;em&gt;TypeScript&lt;/em&gt; to do what it meant to. We need to change the extension of our output files from &lt;code&gt;.js&lt;/code&gt; to &lt;code&gt;.ts&lt;/code&gt;. So we'll write a simple &lt;em&gt;Node&lt;/em&gt; script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// An argument passed when calling script&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;No directory specified!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dirPath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dirPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;
  &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dirPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Matches filenames ending with '.js'&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/.*&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;js$/&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;ts`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Renamed &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save it as &lt;code&gt;rename.js&lt;/code&gt; then run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node rename lib
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see file extension of &lt;code&gt;/lib/index.js&lt;/code&gt; changed to &lt;code&gt;.ts&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#time-for-typescript-to-rock"&gt;
  &lt;/a&gt;
  Time for TypeScript to rock!
&lt;/h2&gt;

&lt;p&gt;Change your &lt;code&gt;tsconfing.json&lt;/code&gt; to match this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"target"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"es5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"lib"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"ESNext"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Search&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;under&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;node_modules&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;non-relative&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;imports.&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"moduleResolution"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;strictest&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;settings&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;like&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;strictNullChecks&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;noImplicitAny.&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"strict"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Disallow&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;features&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;require&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;cross-file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;information&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;emit.&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"esModuleInterop"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Specify&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;directory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/dist&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"outDir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dist"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"declaration"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Process&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;files&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;/lib&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"include"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"lib"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;tsc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;TypeScript&lt;/em&gt; processed file successfully!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linting"&gt;
  &lt;/a&gt;
  Linting
&lt;/h2&gt;

&lt;p&gt;You can use &lt;em&gt;ESlint&lt;/em&gt; to &lt;strong&gt;lint&lt;/strong&gt; &lt;code&gt;ts&lt;/code&gt; files. Install &lt;code&gt;eslint&lt;/code&gt;, &lt;code&gt;babel-eslint&lt;/code&gt; and &lt;code&gt;@babel/eslint-plugin&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;--save-dev&lt;/span&gt; eslint babel-eslint @babel/eslint-plugin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a simple &lt;code&gt;.eslintrc&lt;/code&gt; file in the project root directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"parser"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"babel-eslint"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Additionaly you can install &lt;code&gt;@typescript-eslint/eslint-plugin&lt;/code&gt; for &lt;em&gt;TypeScript&lt;/em&gt; specifc rules:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;--save-dev&lt;/span&gt; @typescript-eslint/eslint-plugin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And update &lt;code&gt;.eslintrc&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"parser"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"babel-eslint"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"plugins"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"@babel"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"extends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"plugin:@typescript-eslint/recommended"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eslint:recommended"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#putting-it-all-together"&gt;
  &lt;/a&gt;
  Putting it all together
&lt;/h2&gt;

&lt;p&gt;Make sure to have &lt;code&gt;script&lt;/code&gt; for everything in &lt;code&gt;package.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Error: no test specified&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &amp;amp;&amp;amp; exit 1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"lint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"eslint --ext .ts,.js src/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build:babel"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"babel ./src --out-dir lib --extensions &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;.ts,.tsx&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build:ts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"tsc"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run lint &amp;amp; npm run build:babel &amp;amp;&amp;amp; node rename lib &amp;amp;&amp;amp; npm run build:ts"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#editor-support"&gt;
  &lt;/a&gt;
  Editor support
&lt;/h2&gt;

&lt;p&gt;That's clear that editor support for such a quirk is poor out of the box. If you're using &lt;em&gt;VSCode&lt;/em&gt; and wanna get rid of typescript errors; create &lt;code&gt;.vscode&lt;/code&gt; directory on the top of your project and put &lt;code&gt;settings.json&lt;/code&gt; file in with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;makes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;ts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;files&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;recognized&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;javascript&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;ones:&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"files.associations"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"*.ts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"javascript"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"javascript.validate.enable"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use &lt;em&gt;ESlint&lt;/em&gt; plugin To highlight linting errors. For formatting, I use &lt;em&gt;Prettier&lt;/em&gt; plugin. &lt;em&gt;Prettier&lt;/em&gt; needs a little configuration to work properly in this circumstance. That is the &lt;code&gt;.prettierrc&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"overrides"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"files"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"*.ts"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"options"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"parser"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"babel"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now &lt;em&gt;Prettier&lt;/em&gt; will know how to parse our insane &lt;code&gt;ts&lt;/code&gt; files. Time to enjoy:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8V5nqHGY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r8nsy3ooxf0ugaar7zha.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8V5nqHGY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/r8nsy3ooxf0ugaar7zha.gif" alt="Editor Support"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#caveats-and-sum-up"&gt;
  &lt;/a&gt;
  Caveats and sum up
&lt;/h2&gt;

&lt;p&gt;I don't find it really useful; therefore, there's such a strange, almost exotic feeling about this. It's like breaking some laws in exchange for little dirty pleasure. The &lt;em&gt;type-check&lt;/em&gt; errors ain't pretty neat, cause they show us code snippets pre-compiled with &lt;em&gt;Babel&lt;/em&gt; for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight r"&gt;&lt;code&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;index.ts&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;TS2322&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'string'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;assignable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'number'&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;_&lt;/span&gt;&lt;span class="n"&gt;ref&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;_&lt;/span&gt;&lt;span class="n"&gt;ref2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;_&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;triple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;_&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kebabify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;_&lt;/span&gt;&lt;span class="n"&gt;ref2&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;addQuotes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;_&lt;/span&gt;&lt;span class="n"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;but that's only for &lt;em&gt;non-typescript&lt;/em&gt; syntax. &lt;/p&gt;

&lt;p&gt;What other features do you miss in &lt;em&gt;JavaScript/TypeScript&lt;/em&gt;?&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>babel</category>
      <category>esnext</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Engineering Metrics: 3 Levels of Visibility </title>
      <author>Nick Hodges</author>
      <pubDate>Thu, 26 Aug 2021 15:08:35 +0000</pubDate>
      <link>https://dev.to/linearb/engineering-metrics-3-levels-of-visibility-5ba9</link>
      <guid>https://dev.to/linearb/engineering-metrics-3-levels-of-visibility-5ba9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;LinearB has all sorts of engineering metrics for your software development pipeline. We can slice and dice those metrics from all kinds of angles and all sorts of ways. Your CTO will want to see very different views of LinearB data than will your developer leads. Whether you are trying to see into the health of your delivery pipeline, seeking out bottlenecks in your system, or worried about making sure only LinearB can help you gain those insights.&lt;/p&gt;

&lt;p&gt;Since the presentation of data is critical to its effectiveness, LinearB allows you to create views into your data for different levels of your organization and your code. The three most interesting views into your data are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Organization Level Engineering Metrics&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Team Level Engineering Metrics&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Repository Level Engineering Metrics&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#organization-level-engineering-metrics"&gt;
  &lt;/a&gt;
  Organization Level Engineering Metrics
&lt;/h2&gt;

&lt;p&gt;The highest level view of your company’s engineering metrics is at the organizational level. This is the view that rolls up everything that every developer on all your teams does into one single view.&lt;/p&gt;

&lt;p&gt;An organization-level view helps you align business priorities by visualizing your project investment at the 50,000-foot view. As an executive, you plot the course and fly the airliner. You need to make sure your team’s efforts are aligned with business goals and that you are doing everything in your power to ensure the success of crucial projects. By viewing things from the top, you will be able to get the proper glimpse into what and how your development team is doing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-look-at-the-organizationlevel-engineering-metrics"&gt;
  &lt;/a&gt;
  Why look at the organization-level engineering metrics?
&lt;/h2&gt;

&lt;p&gt;The organization-level engineering metrics view is usually most valuable for the CTO or VP of Software Engineering. It provides a complete, high-level look at everything happening in the software development realm. CTOs and VPs can get an executive summary of things like Cycle Time, Work Breakdown, and your Investment Profile.&lt;/p&gt;

&lt;p&gt;They can get a high-level view answers questions like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What is the team working on?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How fast are we delivering that value?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Where is our investment going?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What do my &lt;a href="https://linearb.io/blog/dora-engineering-metrics/"&gt;DORA metrics&lt;/a&gt; look like?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s take a look at how LinearB can answer these questions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-team-working-on"&gt;
  &lt;/a&gt;
  What is the team working on?
&lt;/h2&gt;

&lt;p&gt;The Project View can show you exactly what projects your team is working on and the high-level status of each of those projects:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k-Zbx7tr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AksQ0226tGIzjhQzo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k-Zbx7tr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AksQ0226tGIzjhQzo.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-fast-are-we-delivering-value"&gt;
  &lt;/a&gt;
  How fast are we delivering value?
&lt;/h2&gt;

&lt;p&gt;Organization-level &lt;a href="https://linearb.io/cycle-time/"&gt;Cycle Time&lt;/a&gt; can tell you how well the team is delivering value. A lower cycle time means more value is arriving in the customer’s hands sooner. It also means that you are breaking your work into smaller, more manageable chunks, thus encouraging good Code Review practices. For instance, if you identify that your Coding Time is a problem (as below) then &lt;a href="https://linearb.io/blog/reducing-coding-time/"&gt;you can take action to correct it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qTOa81pd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AHHUgX1qtyQr82zDI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qTOa81pd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AHHUgX1qtyQr82zDI.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-is-our-investment-going"&gt;
  &lt;/a&gt;
  Where is our investment going?
&lt;/h2&gt;

&lt;p&gt;You can see what the team is working on via the Investment Profile View. This view tells you the type of work and what percentage of each type is being done by the team. Perhaps you might notice that bug fixing is climbing. Perhaps that is on purpose. Perhaps not. Either way, you can see it happening and take action.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BM4FK_ap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AJUZSzJKGk9r_yVqk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BM4FK_ap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/0%2AJUZSzJKGk9r_yVqk.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-my-dora-metrics-look-like"&gt;
  &lt;/a&gt;
  What do my DORA metrics look like?
&lt;/h2&gt;

&lt;p&gt;DORA Metrics are easy to track in LinearB, again, via a custom dashboard:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w3bWFcaM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2A5JUdsM_WOzKOw3-C.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w3bWFcaM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2A5JUdsM_WOzKOw3-C.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#team-level-engineering-metrics"&gt;
  &lt;/a&gt;
  Team Level Engineering Metrics
&lt;/h2&gt;

&lt;p&gt;Just as executives need a view into their software development team’s engineering metrics, so, too, do Dev Managers and Dev Leads. They are interested in more day-to-day metrics that track how things are progressing with their specific development pipelines. Dev Leads and Dev Managers want to remove workflow blockers, set goals for workflow optimization, and keep code — and thus value — working its way through the development pipeline.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-look-at-teamlevel-engineering-metrics"&gt;
  &lt;/a&gt;
  Why look at team-level engineering metrics?
&lt;/h2&gt;

&lt;p&gt;Dev Leads and Dev Managers want to know the answers to questions like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Where are my bottlenecks?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Are my developers aligned to business priorities?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Is the team effectively working together?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#where-are-my-bottlenecks"&gt;
  &lt;/a&gt;
  Where are my bottlenecks?
&lt;/h2&gt;

&lt;p&gt;Bottlenecks can be easily spotted by drilling down into Cycle Time:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q5c3ytHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AVaP2gr1iaEAbmz-g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q5c3ytHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AVaP2gr1iaEAbmz-g.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It couldn’t be easier — anything that isn’t green is a bottleneck for the team. If you need to, you can drill down into the team and project level to see what is causing the bottlenecks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#are-my-developers-aligned-to-business-priorities"&gt;
  &lt;/a&gt;
  Are my developers aligned to business priorities?
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://linearb.io/blog/linearb-pulse-view-release/"&gt;Pulse View&lt;/a&gt; can tell a Dev Lead exactly what her team is working on. The Pulse View melds information from your git repository and your Project Management tool to provide valuable insights into what each team and team member is doing.&lt;/p&gt;

&lt;p&gt;Below you can see four of the twenty issues that the entire team is currently working on. The view shows active, merged, and shipped work for each project. More and bigger dots mean more activity on a given issue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cxQtB7vj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2APgPZraeqdXdoORQl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cxQtB7vj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2APgPZraeqdXdoORQl.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-the-team-effectively-working-together"&gt;
  &lt;/a&gt;
  Is the team effectively working together?
&lt;/h2&gt;

&lt;p&gt;Ensuring that the team is working together and all rowing in the same direction is a large part of a Development Manager’s job. Out of the box, LinearB provides three team-level dashboards — they are called Quality, Delivery, and ThroughPut — that provide insights into the team-level engineering metrics that are useful for Development Managers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DMKNv9aY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AtPt2J0Mk0XPtl2YA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DMKNv9aY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AtPt2J0Mk0XPtl2YA.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A large part of the teamwork on a software development team is ensuring the smooth, steady flow of Pull Requests. Keeping an eye on Pull Requests and their corresponding Code Reviews is as easy as setting up a &lt;a href="https://linearb.io/blog/custom-metrics-dashboards/"&gt;custom dashboard&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GJoykNdh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AmE6ykRRIe8qdrRTT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GJoykNdh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AmE6ykRRIe8qdrRTT.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you can see things like how long it takes for a Pull Request to be picked up and a review started, how much time is being spent on reviews, the depth of those reviews, and more. All of this information can be used to find bottlenecks in your coding pipeline.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#repo-level-engineering-metrics"&gt;
  &lt;/a&gt;
  Repo Level Engineering Metrics
&lt;/h2&gt;

&lt;p&gt;LinearB’s newest view is the &lt;a href="https://linearb.helpdocs.io/article/v0a3cpxc8q-repository-level-metrics"&gt;Repository Level view&lt;/a&gt; into your codebase. This is best seen via pre-built and custom dashboards. You can create a specific dashboard and then choose to look at it with either the “People” or “Repository” view. This enables you to quickly and easily peer into a specific repository from any dashboard.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-look-at-the-repo-level-metrics"&gt;
  &lt;/a&gt;
  Why look at the Repo level metrics?
&lt;/h2&gt;

&lt;p&gt;It is quite common for a larger project to be broken down into multiple repositories. While a view into what a team is doing, sometimes multiple teams are working together on a repository and the status of that repository can become a concern.&lt;/p&gt;

&lt;p&gt;Or perhaps your project is based on the microservices model, and you have a repository for each service. With the Repository Level View, you can see what is going on inside the repository for any of the services that may need your attention&lt;/p&gt;

&lt;p&gt;Now, with LinearB’s new Repository Level View, you can easily check the health of a given repository.&lt;/p&gt;

&lt;p&gt;Here’s a thorough example of a dashboard that will give you insight into a repository as opposed to what your team or organization is up to.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pIiQmzss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2Ao4W4saBq7ybFpzyW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pIiQmzss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2Ao4W4saBq7ybFpzyW.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This view has been broken down into three areas of interest by the row of the dashboard:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Quality metrics in Orange&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Review success in Purple&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Code throughput in Green&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The three quality metrics are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Code Rework&lt;/strong&gt; — This measures the amount of committed code that are changes to existing code created less than 21 days ago. LinearB recommends that you keep Code Rework to under 3% for any given repository. If you see it going above that, you will know that you have code quality issues or that requirements are changing or not well defined.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;PRS Merged without Review&lt;/strong&gt; — This number should be zero — a flat line across the bottom. There should never be a merge (above a configurable minimum size) that isn’t reviewed. A lack of code review could mean low-quality code has been merged into the repository.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;PR Size&lt;/strong&gt; — Large Pull Requests cause all kinds of problems, including low Pickup Time, Long Reviews, and Pull Requests with low Review Depth. Pull requests should be small and easily digestible. LinearB recommends that Pull Requests average less than one hundred changes. We also recommend that if they get above two hundred changes, then it could indicate problems discussed above.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The three review success metrics are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://linearb.io/blog/pull-request-pickup-time/"&gt;Pull Request Pickup Time&lt;/a&gt;&lt;/strong&gt; — PR Pickup TIme is the amount of time between the Pull Request being submitted and the first comment is made on the Pull Request. LinearB recommends that you keep this to less than one day so changes are fresh in everyone’s mind. If the Pull Request Pickup Time starts rising, it likely indicates that other developers are hesitant to start reviewing code, perhaps because they are too busy with Work in Progress or because the Pull Request is large and complex.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://linearb.io/blog/reducing-pr-review-time/"&gt;Review Time&lt;/a&gt;&lt;/strong&gt; — This is the amount of time spent reviewing the code. If it is too little, say less than a day, it could indicate that reviews are superficial. If it is too high, more than four or five days, it likely means that the code is complex and difficult to understand, and thus difficult to approve.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Review Depth&lt;/strong&gt; — This is the average number of comments per review. If it is below two, it indicates superficial reviews. More than five, it could indicate complex or hard to understand code needing attention from leadership as the pipeline might be slowed down.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The two code throughput metrics are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pull Requests Merged&lt;/strong&gt; — Here, there is no prescriptive measure. Rather, it is a trend that should be monitored. If it starts lowering, perhaps the development team is stuck or has too big of a project. If it starts rising, that is generally considered a good thing, as Pull Requests are likely small and easy to process.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Deployment Frequency&lt;/strong&gt; — This is a &lt;a href="https://linearb.io/blog/dora-engineering-metrics/"&gt;DORA Metric&lt;/a&gt; (which are usually tracked at the executive level) but the measure can also be useful at the repository level. If a repository is being released less weekly, then it indicates features building up that increase the feedback loop for the development team. It also indicates that deployments can get large, and failures become harder to track.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A dashboard such as this one provides a clear look into an individual repository, allowing you to ensure that the code therein is of high quality, being properly reviewed, and moving along quickly into the hands of customers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#leveling-up-your-development-pipeline"&gt;
  &lt;/a&gt;
  Leveling Up Your Development Pipeline
&lt;/h2&gt;

&lt;p&gt;Whether you are a Development Lead or a CTO/VP of Engineering, or if you are concerned with high-level, team-level, or repo-level metrics, LinearB can provide you with the information and insight you need to make sound decisions about your software development process.&lt;/p&gt;

&lt;p&gt;Our tool lets you recognize that there is a problem, dig in to find where the problem originates, and take the necessary steps to correct things. If you are not already using LinearB and want to do things like see exactly what is going on in your organization, team, or repository, &lt;a href="https://linearb.io/demo"&gt;sign up for a free demo of the product today&lt;/a&gt;! Our produce is free to use for teams of eight or less, so get started with a demo today!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://linearb.io/blog/engineering-metrics-3-levels-of-visibility/"&gt;https://linearb.io&lt;/a&gt; on August 9, 2021.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>showdev</category>
      <category>productivity</category>
      <category>analytics</category>
    </item>
    <item>
      <title>Wisdom of the DEV crowd 🗣</title>
      <author>Jean-Michel Fayard 🇫🇷🇩🇪🇬🇧🇪🇸🇨🇴</author>
      <pubDate>Thu, 26 Aug 2021 14:56:52 +0000</pubDate>
      <link>https://dev.to/jmfayard/wisdom-of-the-dev-crowd-2kho</link>
      <guid>https://dev.to/jmfayard/wisdom-of-the-dev-crowd-2kho</guid>
      <description>&lt;p&gt;Unearth incredibly good content with this crazy simple trick!&lt;/p&gt;

&lt;p&gt;It sounds like clickbait, I know... but it's true, I swear!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-unearth-incredibly-good-content"&gt;
  &lt;/a&gt;
  How to unearth incredibly good content
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Take a topic you are unfamiliar with but curious about, for example &lt;strong&gt;Kotlin&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Find its tag, for example &lt;a href="https://dev.to/t/kotlin/"&gt;https://dev.to/t/kotlin/&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Crucial step: select the top articles from the &lt;strong&gt;Infinity&lt;/strong&gt; tab.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IlaHMVJX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/130982102-c9d0a031-36b7-472d-906c-11205593ad91.png" class="article-body-image-wrapper"&gt;&lt;img alt="Screenshot_26_08_2021_16_32" src="https://res.cloudinary.com/practicaldev/image/fetch/s--IlaHMVJX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/130982102-c9d0a031-36b7-472d-906c-11205593ad91.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select the &lt;strong&gt;3 articles&lt;/strong&gt; that looks most interesting to you and bookmark them.&lt;/li&gt;
&lt;li&gt;Open &lt;a href="https://dev.to/readinglist"&gt;https://dev.to/readinglist&lt;/a&gt; and prepare yourself to learn a lot quickly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#benefits"&gt;
  &lt;/a&gt;
  Benefits
&lt;/h2&gt;

&lt;p&gt;As you can see the feature is not really hidden, but still the DEV interface is focused on what is new in the feed, and it can be easy to miss the good things that have been written before.&lt;/p&gt;

&lt;p&gt;Every time I have followed those steps, I have been really happy about the results.&lt;/p&gt;

&lt;p&gt;Most recently I was unsure about working remotely and how to avoid its pitfalls. &lt;/p&gt;

&lt;p&gt;Sure enough &lt;a href="https://dev.to/t/remote/top/infinity"&gt;https://dev.to/t/remote/top/infinity&lt;/a&gt; was filled with really helpful content:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/ivancrneto/what-i-have-learned-from-eight-years-of-being-a-remote-developer-3eob"&gt;What I have learned from eight years of being a remote developer - DEV Community 👩‍💻👨‍💻&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/walrusai/how-to-work-remotely-without-going-insane-28l6"&gt;How to Work Remotely Without Going Insane - DEV Community 👩‍💻👨‍💻&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/mpermar/10-years-of-remote-working-this-is-what-i-have-learned-so-far-21l9"&gt;10 years of remote working. This is what I have learned so far. - DEV Community 👩‍💻👨‍💻&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#try-it-out"&gt;
  &lt;/a&gt;
  Try it out!
&lt;/h2&gt;

&lt;p&gt;Select a topic you are not familiar but curious about and start bookmarking the articles that looks interesting.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Non tech: &lt;a href="https://dev.to/t/career/top/infinity"&gt;#career&lt;/a&gt;
&lt;a href="https://dev.to/t/writing/top/infinity"&gt;#writing&lt;/a&gt;
&lt;a href="https://dev.to/t/agile/top/infinity"&gt;#agile&lt;/a&gt; &lt;a href="https://dev.to/t/discuss/top/infinity"&gt;#discuss&lt;/a&gt; &lt;a href="https://dev.to/t/watercooler/top/infinity"&gt;#watercooler&lt;/a&gt; &lt;a href="https://dev.to/t/meta/top/infinity"&gt;#meta&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Webdev: &lt;a href="https://dev.to/t/javascript/top/infinity"&gt;#javascript&lt;/a&gt;
&lt;a href="https://dev.to/t/react/top/infinity"&gt;#react&lt;/a&gt;
&lt;a href="https://dev.to/t/reactnative/top/infinity"&gt;#reactnative&lt;/a&gt;
&lt;a href="https://dev.to/t/angular/top/infinity"&gt;#angular&lt;/a&gt;
&lt;a href="https://dev.to/t/node/top/infinity"&gt;#node&lt;/a&gt;
&lt;a href="https://dev.to/t/vue/top/infinity"&gt;#vue&lt;/a&gt;
&lt;a href="https://dev.to/t/css/top/infinity"&gt;#css&lt;/a&gt;
&lt;a href="https://dev.to/t/html/top/infinity"&gt;#html&lt;/a&gt;
&lt;a href="https://dev.to/t/typescript/top/infinity"&gt;#typescript&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Programming langugaes: &lt;a href="https://dev.to/t/python/top/infinity"&gt;#python&lt;/a&gt;
&lt;a href="https://dev.to/t/php/top/infinity"&gt;#php&lt;/a&gt;
&lt;a href="https://dev.to/t/java/top/infinity"&gt;#java&lt;/a&gt;
&lt;a href="https://dev.to/t/android/top/infinity"&gt;#android&lt;/a&gt;
&lt;a href="https://dev.to/t/go/top/infinity"&gt;#go&lt;/a&gt;
&lt;a href="https://dev.to/t/ruby/top/infinity"&gt;#ruby&lt;/a&gt;
&lt;a href="https://dev.to/t/csharp/top/infinity"&gt;#csharp&lt;/a&gt;
&lt;a href="https://dev.to/t/rails/top/infinity"&gt;#rails&lt;/a&gt;
&lt;a href="https://dev.to/t/swift/top/infinity"&gt;#swift&lt;/a&gt;
&lt;a href="https://dev.to/t/dart/top/infinity"&gt;#dart&lt;/a&gt;
&lt;a href="https://dev.to/t/cpp/top/infinity"&gt;#cpp&lt;/a&gt;
&lt;a href="https://dev.to/t/rust/top/infinity"&gt;#rust&lt;/a&gt;
&lt;a href="https://dev.to/t/c/top/infinity"&gt;#c&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Topics:
&lt;a href="https://dev.to/t/git/top/infinity"&gt;#git&lt;/a&gt;
&lt;a href="https://dev.to/t/ux/top/infinity"&gt;#ux&lt;/a&gt;
&lt;a href="https://dev.to/t/learning/top/infinity"&gt;#learning&lt;/a&gt;
&lt;a href="https://dev.to/t/database/top/infinity"&gt;#database&lt;/a&gt;
&lt;a href="https://dev.to/t/sql/top/infinity"&gt;#sql&lt;/a&gt;
&lt;a href="https://dev.to/t/devops/top/infinity"&gt;#devops&lt;/a&gt;
&lt;a href="https://dev.to/t/aws/top/infinity"&gt;#aws&lt;/a&gt;
&lt;a href="https://dev.to/t/security/top/infinity"&gt;#security&lt;/a&gt;
&lt;a href="https://dev.to/t/testing/top/infinity"&gt;#testing&lt;/a&gt;
&lt;a href="https://dev.to/t/docker/top/infinity"&gt;#docker&lt;/a&gt;
&lt;a href="https://dev.to/t/linux/top/infinity"&gt;#linux&lt;/a&gt;
&lt;a href="https://dev.to/t/cloud/top/infinity"&gt;#cloud&lt;/a&gt;
&lt;a href="https://dev.to/t/serverless/top/infinity"&gt;#serverless&lt;/a&gt;
&lt;a href="https://dev.to/t/datascience/top/infinity"&gt;#datascience&lt;/a&gt;
&lt;a href="https://dev.to/t/machinelearning/top/infinity"&gt;#machinelearning&lt;/a&gt;
&lt;a href="https://dev.to/t/kubernetes/top/infinity"&gt;#kubernetes&lt;/a&gt;
&lt;a href="https://dev.to/t/blockchain/top/infinity"&gt;#blockchain&lt;/a&gt;
&lt;a href="https://dev.to/t/architecture/top/infinity"&gt;#architecture&lt;/a&gt;
&lt;a href="https://dev.to/t/algorithms/top/infinity"&gt;#algorithms&lt;/a&gt;
&lt;a href="https://dev.to/t/ai/top/infinity"&gt;#ai&lt;/a&gt;
&lt;a href="https://dev.to/t/bash/top/infinity"&gt;#bash&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I would be surprised if you don't find 3 excellent articles!&lt;/p&gt;

</description>
      <category>learning</category>
      <category>bestofdev</category>
      <category>meta</category>
      <category>watercooler</category>
    </item>
  </channel>
</rss>
