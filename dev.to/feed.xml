<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>70+ JavaScript library, frameworks, tools, and plugins</title>
      <author>chinedu | ddevguys</author>
      <pubDate>Tue, 05 Jan 2021 21:19:38 +0000</pubDate>
      <link>https://dev.to/chinedu/70-javascript-library-frameworks-tools-and-plugins-18g1</link>
      <guid>https://dev.to/chinedu/70-javascript-library-frameworks-tools-and-plugins-18g1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#" class="anchor"&gt;
  &lt;/a&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u2N7-gdC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609880051327/-CWQEXQF5.png" alt="stacks post HEADING (1).png"&gt;
&lt;/h2&gt;

&lt;p&gt;Hey and welcome to today's article 😊. &lt;/p&gt;

&lt;p&gt;I decided to put together some JavaScript library, frameworks, tools and plugins.&lt;/p&gt;

&lt;p&gt;Some which I use in my projects. &lt;/p&gt;

&lt;p&gt;If you find them intriguing share it and save it for later.&lt;/p&gt;

&lt;p&gt;Let's go…💃🕺💃🕺💃&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d1ZIRB4E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609880068955/HvfpzAePJ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d1ZIRB4E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609880068955/HvfpzAePJ.gif" alt="giphy (1).gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LIBRARY AND FRAMEWORK'S&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NodeJs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Node.js is an open-source, cross-platform, back-end, JavaScript runtime environment that executes JavaScript code outside a web browser.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ReactJs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;React is an open-source, front end, JavaScript library for building user interfaces or UI components. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VueJs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Vue.js is an open-source model–view–ViewModel front end JavaScript framework for building user interfaces and single-page applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NextJs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Next.js is an open-source React front-end development web framework that enables functionality such as server-side rendering and generating static websites for React-based web applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Angular&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Angular is a TypeScript-based open-source web application framework&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Svelte&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Svelte is a free and open-source front end JavaScript framework&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redux&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Redux is an open-source JavaScript library for managing application state.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Meteor&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Meteor, or MeteorJS, is a free and open-source isomorphic JavaScript web framework written using Node.js.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Backbone.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Backbone.js is a JavaScript library with a RESTful JSON interface and is based on the model–view–controller application design paradigm.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ember.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ember.js is an open-source JavaScript web framework, utilizing a component-service pattern.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;VISUALIZATION&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Three.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Three.js is a cross-browser JavaScript library and application programming interface used to create and display animated 3D computer graphics in a web browser using WebGL.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;D3.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;D3.js is a JavaScript library for producing dynamic, interactive data visualizations in web browsers. It makes use of Scalable Vector Graphics, HTML5, and Cascading Style Sheets standards.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Victory.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A JavaScript 2D vector maths library for Node.js and the browser.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Chart.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Simple, clean, and engaging HTML5 based JavaScript charts. Chart.js is an easy way to include animated, interactive graphs on your website for free.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;React-vis&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;React-vis is a React visualization library.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trading Vuejs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;TradingVue.js is a hackable charting lib for traders. You can draw literally ANYTHING on top of candlestick charts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flexmonster&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A pivot table component for web reporting, claims to be the most powerful JavaScript tool for visualizing your business data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ApexCharts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ApexCharts is a modern charting library that helps developers to create beautiful and interactive visualizations for web pages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Echarts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A Declarative Framework for Rapid Construction of Web-based Visualization.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Google Charts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Google Charts is an interactive Web service that creates graphical charts from user-supplied information.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;amCharts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A go-to library for data visualization. When you don't have time to learn new technologies. When you need a simple yet powerful and flexible drop-in data visualization solution. Includes all basic and advanced chart types, as well as is extendable by additional plugins like Maps and TimeLine.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;ANIMATION LIBRARY&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Anime.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Anime.js is a lightweight JavaScript animation library with a simple, yet powerful API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aos&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Animate On Scroll library using CSS3.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Velocity&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Velocity is a cross-platform JavaScript library designed to simplify the client-side scripting of website animation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mo.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mo.js is a javascript motion graphics library that is fast, retina-ready, modular and open source.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Popmotion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The animator's JavaScript toolbox. Powerful Support for keyframes, spring, and inertia animations on numbers, colors, and complex strings.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ScrollReveal&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JavaScript library to animate elements as they scroll into view.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GreenSockJS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GSAP is an industry-standard JavaScript animation library from GreenSock that lets you craft high-performance animations that work in every major browser.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Skrollr&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;skrollr is a parallax scrolling library used to transform, scale, skew, and rotate any element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AniJS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AniJS, Declarative handling library for CSS animations. very beginner-friendly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Typed.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Typed.js is a library that types.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lottie&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Easily add high-quality animation to any native app. Lottie is an iOS, Android, and React Native library that renders After Effects animations in real-time, allowing apps to use animations as easily as they use static images.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;VIDEO LIBRARY&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Video.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Video JS is a free and open-source HTML5 video player built with JavaScript and CSS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Plyr&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Plyr is a simple, lightweight, accessible, and customizable HTML5, YouTube, and Vimeo media player that supports modern browsers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jplayer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;jPlayer is a free and open-source JavaScript library developed as a jQuery plugin that facilitates the embedding of web-based media, notably HTML5 audio and video in addition to Adobe Flash-based media.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fit vid.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A lightweight, easy-to-use jQuery plugin for fluid width video embeds.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;indigo-player&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Highly extensible, modern, JavaScript video player. Handles MPEG-Dash / HLS / MPEG-4 and is built on top of the HTML5 video element.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flowplayer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Flowplayer is an online video platform for broadcasters, publishers, and media houses. It gives you top ranking ad fill rates and the best-of-breed live streaming.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Popcorn Js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Popcorn.js is an open-source JavaScript library for HTML5 media developers, freely available under the MIT License.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Xgplayer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a web video player library. It has designed a separate, detachable UI component based on the principle that everything is componentized. More importantly, it is not only flexible in the UI layer, but also bold in its functionality: it gets rid of video loading, buffering, and format support for video dependence.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;AUDIO&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Howler.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Howler.js is a JavaScript library that works with Web Audio API by default and falls back to HTML5 Audio when not supported.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tone.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tone.js packs in features for different virtual instruments, sequencers, effects, and more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wavesurfer.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;wavesurfer.js is an HTML 5 audio player and waveform visualizer, made with JavaScript and Web Audio.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pizzicato.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pizzicato.js is another well-rounded library that provides a feature-packed set of tools to create everything from compositions made up of sample groups to precisely synthesized sounds.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sound Manager 2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sound Manager 2 is a JavaScript Sound API supporting MP3, MPEG4 and HTML5 audio. Makes it easy to play audio using JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amplitudejs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AmplitudeJS lets you build a fully customizable web audio player Stop being limited by the web browser's audio player design.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Vexflow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Vexflow is a JavaScript library for rendering standard music notation and guitar tablature.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sound js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SoundJS abstracts HTML5 sound implementation, making adding consistent cross-browser sound to your games or rich experiences much easier.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ejecta&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ejecta is like a Browser without the Browser. It's specially crafted for Games and Animations. It has no DIVs, no Tables, no Forms - only Canvas and Audio elements. This focus makes it fast.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;GAMES&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MelonJS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;MelonJS is yet another 2D focused game engine. By including the library into your code, you gain access to all kinds of features required for any game worth its money, such as physics support, collisions, sprites, and more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pixi.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Superfast HTML 5 2D rendering engine that uses webGL with canvas fallback.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Phaser&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Phaser is a 2D game framework used for making HTML5 games for desktop and mobile. It is free software and developed by Photon Storm. Phaser uses both a Canvas and WebGL renderer internally and can automatically swap between them based on browser support.s&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Babylon.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Babylon.js is a real time 3D engine using a JavaScript library for displaying 3D graphics in a web browser via HTML5. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Matter.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Matter.js is a 2D physics engine for the web.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Egret core&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Egret is a brand new open mobile game and application engine which allows you to quickly build mobile games and apps on Android,iOS and Windows.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Melon.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;MelonJS is a lightweight yet powerful HTML5 framework designed from the ground up to provide a true plugin-free 'write-once, run-everywhere' gaming platform. melonJS is an open-source project and supported by a community of enthusiasts. See our Gallery for a few examples of games powered by melonJS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Crafty&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Crafty is a JavaScript game library that can help you create games in a structured way.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;FORMS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quill&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Module for simple form and input field bindings. Automatically creates hidden input fields for a form and adds submit handling and submit by key. You may also specify your own custom input fields. It creates fields for text, html and delta.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cleave.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Cleave.js has a simple purpose: to help you format input text content automatically.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;jQuery Validation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This jQuery plugin makes simple clientside form validation easy, whilst still offering plenty of customization options. It makes a good choice if you're building something new from scratch, but also when you're trying to integrate something into an existing application with lots of existing markup. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Selectize.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Selectize is the hybrid of a textbox and  box. It's jQuery-based and it's useful for tagging, contact lists, country selectors, and so on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parsley.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Parsley, the ultimate JavaScript form validation library&lt;br&gt;
Validating forms for with this tool for frontend have never been so powerful and easy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fine Uploader&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;FineUploader is also simple to use. In the simplest case, you only need to include one JavaScript file. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pickadate.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The mobile-friendly, responsive, and lightweight jQuery date &amp;amp; time input picker.&lt;/p&gt;




&lt;p&gt;Thanks for reading! &lt;/p&gt;

&lt;p&gt;My hope is that after finishing this article you would have tools for creating awesome features with JavaScript in the browser. &lt;/p&gt;

&lt;p&gt;Reach out on  &lt;a href="https://twitter.com/chineduvictor7?s=09"&gt;Twitter&lt;/a&gt;  with some of your personal favorite libraries/frameworks and tools to use. Love you❤️❤️❤️🤓🤓🤓&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>vue</category>
      <category>angular</category>
    </item>
    <item>
      <title>Every developer is self taught</title>
      <author>Sarah 🦄</author>
      <pubDate>Tue, 05 Jan 2021 18:42:42 +0000</pubDate>
      <link>https://dev.to/sarahob/every-developer-is-self-taught-1oal</link>
      <guid>https://dev.to/sarahob/every-developer-is-self-taught-1oal</guid>
      <description>&lt;p&gt;I know this might be a "hot take" (or whatever the kids call it) but hear me out. I see a lot in the tech community about college vs. self-taught. This got me thinking. Reflecting on my own path it's not as straight forward as one or the other.&lt;/p&gt;

&lt;p&gt;I have a degree in Business Information Systems. My degree gave me a broad range of skills and exposure to different areas of IT. In my final year I was able to focus on programming and took all the programming related modules. When I graduated I took a graduate Java Software Engineer role. That was in 2012.&lt;/p&gt;

&lt;p&gt;Today I'm a JavaScript engineer. I build interactive web apps, and love CSS and web animations. How did I get to this point? I taught myself*.&lt;/p&gt;

&lt;p&gt;I knew very little about the web even after my four year degree. I took one web development module in first year and after four years it was pretty outdated. At this role I became fascinated with the web. A colleague who shared my interest inspired me to try it out for myself. Once I got started I realised this was it for me. This was the path I wanted to follow.  By day, I wrote Java code but I spent my spare time learning everything I could about web development. I created small projects, read books and watched videos.&lt;/p&gt;

&lt;p&gt;After about 7 months I decided to take a leap. I applied for a Web engineer role in another company. The role asked for someone proficient in JavaScript. I remember feeling nervous before the interview. I didn't &lt;em&gt;know&lt;/em&gt; JavaScript did I? I was never taught it so I couldn't &lt;em&gt;know&lt;/em&gt; it. I went for it anyway. To my delight (and surprise) I passed the assessment and got the job.&lt;/p&gt;

&lt;p&gt;Once I was in the door I faced a new challenge. A UI framework called ExtJS, which at the time to me was a complete unknown. Up to this point I had only been playing with vanilla Javascript and a little jQuery. I felt out of my depth but also very excited. I read the documentation page by page. I made practice projects, I experimented with the app and tried to use concepts I had learned. A couple months into the role a new Senior Web developer joined the team. He was a talented engineer and very proficient in JavaScript. I reached out and he became my mentor. We paired a lot and he helped me understand different concepts and all the JavaScript quirks. From there my confidence started to grow, as well as my skills.&lt;/p&gt;

&lt;p&gt;Every year since then I've had to learn something new, D3.js, Angular.js, Angular 2, React and so on. And not only different libraries but also different concepts. MVC, MVVM, Components. Tech is always changing. The web is always changing. We have to keep learning to keep up with it. At times it can be overwhelming. It's also (&lt;em&gt;at least for me&lt;/em&gt;) what keeps it interesting and one of the things I love about the web.&lt;/p&gt;

&lt;p&gt;So at this point being self taught or having a degree doesn't matter. Yes having a degree helps you get in the door. It's not right but that's the way it is at most places. But things are changing. Companies are realising it's not about the paper it's about the practice. It's about the commitment you put into it.&lt;/p&gt;

&lt;p&gt;Choosing college or not is a very personal decision. College offers a lot more than just the paper at the end. It's an experience and it's not for everyone. The main thing is to keep learning and keep building, get yourself a mentor, and put yourself out there. Because in the end we are all self taught developers.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I taught myself but could not have done it without the help of many others. Mentors and other colleagues and especially the amazing content available online.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>motivation</category>
      <category>beginners</category>
      <category>career</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Setting career goals</title>
      <author>Ananya Neogi</author>
      <pubDate>Tue, 05 Jan 2021 17:09:09 +0000</pubDate>
      <link>https://dev.to/ananyaneogi/setting-career-goals-1f5n</link>
      <guid>https://dev.to/ananyaneogi/setting-career-goals-1f5n</guid>
      <description>&lt;p&gt;When I ask people about their career goals, I mostly get answers like “I just go with the flow”. While this might work fine for some people but it generally doesn’t bode well in the long run. If you talk to successful people, you would quickly realize that most of them had been intentional with all their career-oriented decisions and those deliberate decisions have led to the place they are now.&lt;/p&gt;

&lt;p&gt;Intentionally crafting your career is essential. It is, however, easier said than done as we have myriad of options to choose from at our disposal. Also, it doesn’t help that we have so many distractions especially when every other day people are creating hype around some new technology or some new trend on Twitter. So that makes it more important to be intentional about the things we want to do in our career and not let ourselves fall into the trap of trends. Though I agree, sometimes, it pays off to jump on that hype train but make sure you are doing it for the right reasons and that you have done your research.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;An aside thought:&lt;/strong&gt; I like to think of my career goals as an engineering problem for which I would carefully craft a solution that would help me achieve a particular outcome, similar to how I would do if it were an actual engineering problem. It might seem like an oversimplification because life doesn’t work that way, and there will be unknown bumps on the road, and we might even change course in the middle. But at its core, I think this analogy holds well. Thinking about my career goals in this sense allows me to be more analytical about my decisions!&lt;/p&gt;

&lt;p&gt;Coming back to the topic of setting intentional career goals – I have some questions you can ask yourself which will guide you to be intentional when setting your career goals for this year and beyond.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-do-my-values-and-work-align-with-each-other" class="anchor"&gt;
  &lt;/a&gt;
  1. Do my values and work align with each other?
&lt;/h3&gt;

&lt;p&gt;Not a lot of people think about their values. But investing time and effort to think about what values matter the most to you and then aligning your career decisions to that will ensure you are on your best path forward. It will also ensure that the work you’re doing will truly make you feel fulfilled at the end of the day.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-how-do-you-want-to-spend-most-of-your-workdays" class="anchor"&gt;
  &lt;/a&gt;
  2. How do you want to spend most of your workdays?
&lt;/h3&gt;

&lt;p&gt;I think this is the most important thing to consider because each day’s work will eventually make up your whole career. Intentionally selecting the kind of work to focus on each day means you are ultimately creating an intentional career path for yourself.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-a-few-years-from-now-how-would-you-like-to-be-introduced-to-someone-else" class="anchor"&gt;
  &lt;/a&gt;
  3. A few years from now, how would you like to be introduced to someone else?
&lt;/h3&gt;

&lt;p&gt;Would you like to be called an author of a book or a paper? Maybe the creator of x? The first person to live on Mars? I’m joking about the last one, but the point is this can be a fun exercise and will help you dig deep into your dreams and aspirations.&lt;/p&gt;

&lt;p&gt;Now every time you have to make a career decision, you will have your answers as guiding principles. It is worth mentioning that the answers to these questions might change in a few years, but that’s OK because our goals can evolve as we evolve in our lives. Being true to yourself and what you want – however clichéd that might sound – will serve you well in the long run. Remember, we’re here for the marathon, not a sprint.&lt;/p&gt;

</description>
      <category>career</category>
    </item>
    <item>
      <title>Enough JavaScript to get you Started : #0 intro</title>
      <author>Adarsh Pandya</author>
      <pubDate>Tue, 05 Jan 2021 15:36:36 +0000</pubDate>
      <link>https://dev.to/whoadarshpandya/enough-javascript-to-get-you-started-0-intro-46m2</link>
      <guid>https://dev.to/whoadarshpandya/enough-javascript-to-get-you-started-0-intro-46m2</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Any application that can be written in JavaScript, will eventually be written in JavaScript.&lt;br&gt;&lt;br&gt;
-Jeff atwood (Coding Horror)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#series-introduction" class="anchor"&gt;
  &lt;/a&gt;
  Series Introduction
&lt;/h3&gt;

&lt;p&gt;Hey , Hope you're having an amazing day and a curious mind (obviously! that's why you're here :p ). in this series we'll cover basics of JavaScript from &lt;br&gt;
level 0, as the title suggests if you're new to world of JavaScript this will help you to grow as developer from the ground level. we'll cover everything which can be helpful at base level&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#who-should-be-reading-this" class="anchor"&gt;
  &lt;/a&gt;
  Who Should Be Reading This?
&lt;/h4&gt;

&lt;p&gt;👉 Any developer who is interested in learning JavaScript from beginning &lt;br&gt;&lt;br&gt;
👉 Anyone who is migrating from non-coding background &lt;br&gt;&lt;br&gt;
👉 Anyone who learns by reading blogs instead of watching 1 or 2 hr videos&lt;br&gt;&lt;br&gt;
👉 Want to Start in Web development , but don't know where to begin with...&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#javascript-language-of-gods" class="anchor"&gt;
  &lt;/a&gt;
  JavaScript : Language of gods
&lt;/h4&gt;

&lt;p&gt;You might have heard that JavaScript is becoming popular language among devs because of the flexibility and flavors provided by JavaScript.&lt;br&gt;
JavaScript became so popular that giant conglomerates are migrating to JS.&lt;/p&gt;

&lt;p&gt;       Corporate is paying shit ton of money for frontend devs. one of the reason why JS is so popular is because of &lt;strong&gt;node&lt;/strong&gt; (experiment of  &lt;a href="https://github.com/ry"&gt;ryan dahl&lt;/a&gt;). People started to realize that JS is more than just a language which can be used in frontend. nowadays JS is everywhere be it frontend , backend , desktop apps , PWAs , smart watches and even SpaceX uses JS as a interface of communication 😂&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#why-js-" class="anchor"&gt;
  &lt;/a&gt;
  Why JS ?
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Stackoverflow Developer survey : 2020 (most popular languages)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vUVrSF9h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609858532119/JgHUG5snq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vUVrSF9h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609858532119/JgHUG5snq.png" alt="js.PNG"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#reasons-to-learn-js" class="anchor"&gt;
  &lt;/a&gt;
  Reasons to learn JS
&lt;/h6&gt;

&lt;p&gt;👉 Easy to learn &lt;br&gt;&lt;br&gt;
👉 Can be used in frontend &lt;br&gt;&lt;br&gt;
👉 Can be used in backend &lt;br&gt;&lt;br&gt;
👉 Can be used in developing mobile/desktop apps as well &lt;br&gt;&lt;br&gt;
👉 Most Importantly : tons of jobs in web development &lt;br&gt;&lt;br&gt;
👉 Getting Ready to use frameworks like &lt;code&gt;React&lt;/code&gt; ,&lt;code&gt;Angular&lt;/code&gt; , &lt;code&gt;Vue&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#enough-of-teasing-what-is-js" class="anchor"&gt;
  &lt;/a&gt;
  Enough of Teasing! What is JS?
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;JavaScript can be defined as a language which is dynamically (loosely) typed, interpreted and Object Oriented language&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;this doesn't make any sense right?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This definition may not make sense as of now , but it will as an when we start learning more about it , for the sake of understanding remember that JavaScript can be used for making your website interactive.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Example: &lt;/b&gt; let's say you're making a dating web app , so now there are 3 mechanisms comes in picture &lt;br&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;structure or skeleton of website : HTML&lt;/li&gt;
&lt;li&gt;styling or look and feel of website : CSS&lt;/li&gt;
&lt;li&gt;Interaction or events occured in website : &lt;strong&gt;JS&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;
  &lt;a href="#what-well-be-covering-" class="anchor"&gt;
  &lt;/a&gt;
  What we'll be covering ?
&lt;/h4&gt;

&lt;p&gt;We'll be covering basic topics like : &lt;br&gt;&lt;/p&gt;

&lt;p&gt;👉 Writing your first program &lt;br&gt;&lt;br&gt;
👉 How JS and Programming in general works?&lt;br&gt;&lt;br&gt;
👉 Evolution of JS as a language &lt;br&gt;&lt;br&gt;
👉 Variables &lt;br&gt;&lt;br&gt;
👉 Data Types &lt;br&gt;&lt;br&gt;
👉 Operators &lt;br&gt;&lt;br&gt;
👉 Conditions &lt;br&gt;&lt;br&gt;
👉 Loops &lt;br&gt;&lt;br&gt;
👉 Arrays &amp;amp; Objects &lt;br&gt;&lt;br&gt;
👉 Functions &lt;br&gt;&lt;br&gt;
👉 Object Oriented JavaScript &lt;br&gt;&lt;/p&gt;

&lt;p&gt;Let me know in comment section if you have any doubt or feedback. it's always worth to give time to thriving developer community :) &lt;br&gt;
&lt;br&gt;
Keep Coding ❤
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>100daysofcode</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Web Vitals Optimizations: Advanced Dynamic Import Patterns</title>
      <author>Ido Shamun</author>
      <pubDate>Tue, 05 Jan 2021 15:36:00 +0000</pubDate>
      <link>https://dev.to/dailydotdev/web-vitals-optimizations-advanced-dynamic-import-patterns-1hg5</link>
      <guid>https://dev.to/dailydotdev/web-vitals-optimizations-advanced-dynamic-import-patterns-1hg5</guid>
      <description>&lt;p&gt;Web performance is a crucial part of the user experience of our web application. It has a direct impact on the conversion rate. Walmart found that for every 1-second improvement in page load time, conversions increased by 2% (&lt;a href="https://www.cloudflare.com/learning/performance/more/website-performance-conversion-rates/"&gt;see source&lt;/a&gt;). And if that's not enough, search engines favor fast websites. They rank them higher than slow websites. So improving your web application's performance can increase both the conversion rate and the organic customer acquisition rate. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#web-vitals" class="anchor"&gt;
  &lt;/a&gt;
  Web Vitals
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://web.dev/learn-web-vitals/"&gt;Web Vitals&lt;/a&gt; (coined by the Chrome team) are a set of metrics to measure the performance of a website. Optimizing for these metrics ensures your visitors will enjoy a much better experience.&lt;br&gt;
Core Web Vitals are a subset of the aforementioned Web Vitals that is relevant to any web page. The subset focuses on three performance aspects, loading, interactivity, and visual stability. In this article, we will focus on improving two of them, loading and interactivity. They're represented by these two metrics, Largest Contentful Paint (LCP) and First Input Delay (FID). There are many strategies to improve these metrics, but we'll focus on reducing the bundle size. &lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#bundle-size" class="anchor"&gt;
  &lt;/a&gt;
  Bundle size
&lt;/h1&gt;

&lt;p&gt;The page bundle size significantly affects both LCP and FID. Both server-side-rendered applications and single-page-applications can end-up with bloated JavaScript bundles. The bigger the bundle, the more time it takes to download the bundle, parse the code into actionable machine commands, and eventually evaluate it. As long as the main thread is focused on any of these, it cannot do anything else, which increases LCP and FID. Addy Osmani wrote an extensive article about &lt;a href="https://v8.dev/blog/cost-of-javascript-2019"&gt;the cost of JavaScript&lt;/a&gt; if you fancy going deeper.&lt;br&gt;
Even if we apply best practices such as tree shaking and code splitting in our project, the bundle can become huge. So what should we do? Dynamic import and loading prioritization!&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#dynamic-import" class="anchor"&gt;
  &lt;/a&gt;
  Dynamic import
&lt;/h1&gt;

&lt;p&gt;Not many know, but there are two forms of import we can use, static and dynamic. A static import is a well-known form and is our default choice. It looks like &lt;code&gt;import defaultExport from "module-name";&lt;/code&gt; and it tells the bundler (e.g., Webpack) that this module is mandatory to run our code. The bundler will bundle the module code with our code into a single JavaScript file. The more modules we statically import, the bigger the bundle will be. But obviously, not all imports are the same. Some are required to run our code immediately, and some can be lazy-loaded until a certain event occurs. So why do we have to load all this JavaScript at once? We don't. We can use dynamic import. Dynamic import looks like a regular function call and returns a promise that resolves to the imported module, &lt;code&gt;import("module-name").then((module) =&amp;gt; ...);&lt;/code&gt;. Using dynamic import, we tell the bundler to create a separate bundle for this module and load it in runtime. This makes sure the imported module will not be bundled in our main bundle, keeping the main bundle small and efficient. &lt;a href="https://reactjs.org/docs/code-splitting.html"&gt;React lazy&lt;/a&gt; and &lt;a href="https://nextjs.org/docs/advanced-features/dynamic-import"&gt;Next.js dynamic&lt;/a&gt; utilize dynamic import to lazy-load React components easily. They are both a function that receives a function as an argument and returns a React component. The function argument must return a promise that resolves into a React component by itself. Here's an example: &lt;code&gt;const DynamicComponent = dynamic(() =&amp;gt; import('./component'))&lt;/code&gt;. Of course, both React lazy and Next.js dynamic provide you a way to handle errors and show a fallback element while the component is loading (out of scope). So now we have two levels of import. The first is a static import, which bundles the module into our bundle. The second is a dynamic import, which imports the module as soon as requested as a separate bundle. This should boost our performance, but we can take it even further and load some JavaScript bundles only after the page is completely loaded.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#import-after-page-load" class="anchor"&gt;
  &lt;/a&gt;
  Import after page load
&lt;/h1&gt;

&lt;p&gt;In this section, we will see how we can use React lazy and Next.js dynamic to create a new function that imports a component only after the page is loaded. For simplicity's sake, I'll show how to implement it with Next.js, but the same concept can be easily applied to React lazy or even other frameworks such as Vue.&lt;/p&gt;

&lt;p&gt;Let's first create a function that returns a promise that resolves once the page is loaded. A page loading process consists of three phases, loading, interactive, and completed. The function receives an argument that states at what phase we should load the resource. We use the &lt;code&gt;readystatechange&lt;/code&gt; event to listen to changes in the loading process.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;onPageLoad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;readyState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DocumentReadyState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;interactive&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readyState&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;readyState&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readyState&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;complete&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ProgressEvent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Document&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readyState&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;readyState&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readyState&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;complete&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;readystatechange&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;readystatechange&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Our &lt;code&gt;onPageLoad&lt;/code&gt; function first returns a promise as planned. In the promise, we check for the current ready state of the document. It's an important edge case that we have to deal with; otherwise, the promise might never resolve. If the page is already loaded, we resolve the promise. Second, we create a callback function for the event listener and subscribe to the &lt;code&gt;readystatechange&lt;/code&gt; event. In the callback, we check the new ready state of the document. If it equals the requested state or if the document is completely loaded, we can resolve the promise and unsubscribe.&lt;/p&gt;

&lt;p&gt;This was the heavy lifting, and now the only thing that remained to do is to create our new dynamic function that will load the component on page load.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;dynamic&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/dynamic&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;onPageLoad&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./onPageLoad&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;dynamicPageLoad&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;LoaderComponent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;readyState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DocumentReadyState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;interactive&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ComponentType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;P&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;onPageLoad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;readyState&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;ssr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Like Next.js dynamic function, we receive a loader function that returns a promise with a React component and an optional ready state to prioritize the loading. In the function, we use the good-old dynamic function, but before providing the loader function, we chain it to the &lt;code&gt;onPageLoad&lt;/code&gt; function that we created earlier. This makes sure the import statement will not be called before the page is loaded. The second parameter to the dynamic function disabled evaluating this expression in the server. This is required because we use the document object, which is available only to the client.&lt;/p&gt;

&lt;p&gt;We can use our function to make sure our components will be imported after the page load as follows:&lt;br&gt;
&lt;code&gt;const DynamicComponent = dynamicPageLoad(() =&amp;gt; import('./component'))&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, a lot of JavaScript code can be downloaded, parsed, and evaluated only after our page is loaded. It makes sure the main thread will have more time for critical resources, thus improving our LCP and FID metrics.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Good web performance can improve our conversion rate and SEO. One of the ways to improve performance is to reduce the initial bundle size. By utilizing dynamic import, we can lazy-load JavaScript modules, which shrinks the initial bundle size. We also learned how to prioritize dynamic imports by loading some of the modules only after the page is loaded using our custom dynamic function.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;&lt;a href="https://api.daily.dev/get?r=devto"&gt;daily.dev&lt;/a&gt; delivers the best programming news every new tab. We will rank hundreds of qualified sources for you so that you can hack the future.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://api.daily.dev/get?r=devto"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GnRWXIbg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/b996k4sm4efhietrzups.png" alt="Daily Poster"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>webdev</category>
      <category>react</category>
      <category>performance</category>
    </item>
    <item>
      <title>Server Rendering in JavaScript: Why SSR?</title>
      <author>Ryan Carniato</author>
      <pubDate>Tue, 05 Jan 2021 15:34:32 +0000</pubDate>
      <link>https://dev.to/ryansolid/server-rendering-in-javascript-why-ssr-3i94</link>
      <guid>https://dev.to/ryansolid/server-rendering-in-javascript-why-ssr-3i94</guid>
      <description>&lt;p&gt;Server-Side Rendering is all the talk with the JavaScript framework world right now. There are obvious examples like Vercel's Next.js which made the news with getting $40M in new funding. Next, Nuxt, Gatsby, Sapper have all been really popular the last few years along with the rise of JAMStack which promotes the use of Static Site Generation.&lt;/p&gt;

&lt;p&gt;But the thing you probably should be paying attention to is that the frameworks themselves have been investing heavily into this area for the past 2 years. There is a reason why we've been waiting for Suspense in React, or we see blog stories about &lt;a href="https://jasonformat.com/islands-architecture/"&gt;Island's Architecture&lt;/a&gt;. Why &lt;a href="https://svelte.dev/blog/whats-the-deal-with-sveltekit"&gt;Svelte&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=xXrhg26VCSc"&gt;Vue&lt;/a&gt; have been pulling meta-framework type projects under their core's umbrella. This is the thing everyone is chasing after.&lt;/p&gt;

&lt;p&gt;So I want to take some time today to fill in the gaps, talk about the underlying technology, and overall paint a better picture of what is going on.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-server-rendering" class="anchor"&gt;
  &lt;/a&gt;
  Why Server Rendering?
&lt;/h1&gt;

&lt;p&gt;Why server render at all? For some of you, this might be obvious. But it wasn't for me.&lt;/p&gt;

&lt;p&gt;I mean there are plenty of ways to mitigate the initial performance costs of JavaScript. I had even made it my personal mission to show people that a well-tuned client only Single Page App(SPA) could outperform a typical Server Rendered SPA in pretty much every metric (even First Paint). And crawlers now can crawl dynamic JavaScript pages for SEO. So what's the point?&lt;/p&gt;

&lt;p&gt;Well even with crawlers now being fully capable to crawl these JavaScript-heavy sites, they do get bumped to a second-tier that takes them longer to be indexed. This might not be a deal-breaker for everyone but it is a consideration. And meta tags rendered on the page are often used for social sharing links. These scrapers are often not as sophisticated, so you only get the tags initially present which would be the same on every page losing the ability to provide more specific content.&lt;/p&gt;

&lt;p&gt;But these are not new. So, let's take a look at what I believe are the bigger motivators for the current conversation.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dont-go-chasing-waterfalls" class="anchor"&gt;
  &lt;/a&gt;
  Don't Go Chasing Waterfalls
&lt;/h1&gt;

&lt;p&gt;JavaScript bundle sizes have grown, and grown, and well, grown some more. Not every network connection is made equal. Under slow networks, SSR will be faster to show something to the user on the initial load. So if you need the absolute fastest page load there this no contest.&lt;/p&gt;

&lt;p&gt;It all boils down to the fact that nothing happens in the browser until it receives the HTML page back. It is only after starting to receive the HTML that other assets are requested.&lt;/p&gt;

&lt;p&gt;For dynamic client JavaScript pages like a SPA or even the dynamic parts of a static generated site, as you might create with a Gatsby or Next, often this means at least 3 cascading round trips before the page is settled.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4ls4RZDK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zogroqy57pv0606eti4a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ls4RZDK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zogroqy57pv0606eti4a.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The thing to note is this isn't only a network bottleneck. Everything here is on the critical path from parsing the various assets, to executing the JavaScript to make the async data request. None of this gets to be parallelized.&lt;/p&gt;

&lt;p&gt;Here is the rub. This is further compounded by the desire to keep the bundle size small. Code splitting is incredibly powerful and easy to do on route boundaries, but a naive implementation ends up like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nVE6sX18--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tqaalnzbp5vuppaig5a1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nVE6sX18--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tqaalnzbp5vuppaig5a1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Four consecutive round trips! The main bundle doesn't know what page chunk to request until it executes, and it takes loading and executing that chunk before it knows what async data to request.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-server-rendering-address-this" class="anchor"&gt;
  &lt;/a&gt;
  How does Server Rendering address this?
&lt;/h3&gt;

&lt;p&gt;Knowing the route you are on lets the server render right into the page the assets you will need even if code split. You can add &lt;code&gt;&amp;lt;link rel="modulepreload" /&amp;gt;&lt;/code&gt; tags or headers that will start loading your modules before the initial bundle even parses and executes.&lt;/p&gt;

&lt;p&gt;Additionally, it can start the async data loading immediately on receiving the request on the server and serialize the data back into the page. So while we can't completely remove the browser waterfalls we can reduce them to 1. However, a naive approach here actually delays the initial response of the HTML page. So it isn't a clean victory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NXqfEbcg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/upmut6at8h93g3rc3etm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NXqfEbcg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/upmut6at8h93g3rc3etm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In fact there is a lot more we can do here that I will cover in a follow-up article.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#after-initial-load" class="anchor"&gt;
  &lt;/a&gt;
  After Initial Load
&lt;/h3&gt;

&lt;p&gt;This equation completely changes after the first load. Assets can be preloaded/cached with a service worker. JavaScript is even stored as bytecode so there is no parsing cost. Everything except the async data request is static and can already be present in the browser. There are no waterfalls, which is even better than the best case from server rendering.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ismFsxWs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gtrtlirbgd4oor75wton.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ismFsxWs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gtrtlirbgd4oor75wton.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But invalidating out of date service workers and cached assets can be a whole other sort of issue. Stale while re-validating can go a long way for certain types of applications. Sites that need to be up to date might not opt for this and use caches they have more control over.&lt;/p&gt;

&lt;p&gt;So the takeaway on this whole topic of performance/size is that the client alone has many techniques to mitigate most things other than that first load of fresh content. That will always be constrained by the speed of the network. But as our applications scale, without due consideration, it is easy for our SPA performance to degrade and a naive application of best practices only introduces other potential performance bottlenecks.&lt;/p&gt;

&lt;p&gt;Server rendering can relieve a couple of the important ones if the initial load is important to our sites and applications.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#modern-tools-for-everyone" class="anchor"&gt;
  &lt;/a&gt;
  Modern Tools for Everyone
&lt;/h1&gt;

&lt;p&gt;We need to step back out a bit to put this in perspective. There are a lot more websites than web applications. This has always been the case but the mindshare around modern JavaScript frameworks has changed.&lt;/p&gt;

&lt;p&gt;When client JavaScript frameworks were first being developed there was a simple goal in mind. Find a way to do all the things in the browser that needlessly had us going back to the server. We were building ever more complex user interfaces and full-page reloads were just not acceptable in a world where people were getting used to native app experiences.&lt;/p&gt;

&lt;p&gt;These tools may have been developed with interactive web applications in mind, but there is a much larger set of potential users to tap into that appear to actively be looking to these frameworks for their simpler sites.&lt;/p&gt;

&lt;p&gt;This is a really compelling problem. Especially when you consider that the coordination between Client and Server can be really complicated to do efficiently manually. Whenever something is used outside of its original parameters it takes some special consideration.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#js-frameworks-vs-server-frameworks" class="anchor"&gt;
  &lt;/a&gt;
  JS Frameworks vs Server Frameworks
&lt;/h3&gt;

&lt;p&gt;This struggle isn't limited to JavaScript frameworks. Adding largely dynamic JavaScript to something rendered in Rails or any classic backend has this complexity. It's just JavaScript frameworks see this as a unique opportunity to create a completely isomorphic experience. One where with a single codebase you can create a site. Sort of like the old days, but also not at all like them.&lt;/p&gt;

&lt;p&gt;The fundamental thing client-side libraries have been solving is state management. It's the whole reason MVC architectures have not been the right match for the client. Something needs to be maintaining the state. MVC with its singleton controllers is wonderful for stateless things like RESTful APIs but needs special mechanisms to handle the persistence of non-model data. Stateful clients and stateless servers mean reloading the page is not acceptable.&lt;/p&gt;

&lt;p&gt;The challenge for server frameworks is even with mechanisms like &lt;a href="https://hotwire.dev/"&gt;Hotwire&lt;/a&gt; for partial updates, it alone doesn't make the client part of the equation any less complicated. You can ignore it is a thing, and if your needs are meager this can suffice. Otherwise, you end up doing a lot of the same work anyway. This leads to essentially maintaining two applications.&lt;/p&gt;

&lt;p&gt;This is why the JavaScript frameworks are uniquely positioned to provide this single universal experience. And why it is so attractive to framework authors.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-next" class="anchor"&gt;
  &lt;/a&gt;
  What's Next?
&lt;/h1&gt;

&lt;p&gt;Well, be prepared to hear about this a lot more. This has been going on for about 2 years now, but these projects are finally starting to emerge to a point people feel comfortable talking about it. This has taken time because it's a fundamental shift. While there are Next's and Nuxt's of the world the core libraries haven't been optimized for these cases.&lt;/p&gt;

&lt;p&gt;Short of really eBay's &lt;a href="https://markojs.com/"&gt;Marko&lt;/a&gt; we haven't seen to date the sort of sophistication you'd expect from these sort of solutions. But that is all changing. &lt;a href="https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html"&gt;React Server Components&lt;/a&gt; are one example. You better believe Vue, Preact, Svelte, etc... have all been working on their own solutions in this space.&lt;/p&gt;

&lt;p&gt;Server rendering in JavaScript is the next big race for these frameworks. But it's still up to you whether you choose to use it.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>webperf</category>
    </item>
    <item>
      <title>The &lt;progress&gt; HTML Tag</title>
      <author>Braydon Coyer</author>
      <pubDate>Tue, 05 Jan 2021 14:23:27 +0000</pubDate>
      <link>https://dev.to/braydoncoyer/the-progress-html-tag-2pk0</link>
      <guid>https://dev.to/braydoncoyer/the-progress-html-tag-2pk0</guid>
      <description>&lt;p&gt;Welcome to the first article in the  &lt;a href="https://hashnode.com/series/uncommon-html-tags-ckjiqctar042xzgs1bei2e9a3"&gt;Uncommon HTML Tags&lt;/a&gt;  series! &lt;br&gt;
With each article in this series, I will introduce a widely unknown HTML tag, discuss compatibility across browsers and cover some real-world use cases with the element. &lt;/p&gt;

&lt;p&gt;My hope is that each article broadens your understanding of HTML and helps you discover new tags.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-lt-progress-gt-tag" class="anchor"&gt;
  &lt;/a&gt;
  The &amp;lt; progress &amp;gt; Tag
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;progress&amp;gt;&amp;lt;/progress&amp;gt;&lt;/code&gt; tag will create a progress bar and allow you to visualize the completion of a task. This could be handy for showing the progress completion of a multi-page feedback survey, for example! &lt;/p&gt;

&lt;p&gt;Let's take a look at how it's used!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;label for="progress"&amp;gt;Article Progress:&amp;lt;/label&amp;gt;

&amp;lt;progress id="progress" max="100" value="50"&amp;gt; 50% &amp;lt;/progress&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bhYmmYHj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609775753781/mburlbLBM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bhYmmYHj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609775753781/mburlbLBM.png" alt="Screen Shot 2021-01-04 at 9.55.45 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As seen in the example above, there are two attributes you can use on the element. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;max&lt;/code&gt; - this attribute, if used, is a floating point number and must have a value greater than &lt;code&gt;0&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;value&lt;/code&gt; - this optional attribute is used to determine the completion of a task and must be a floating point number between &lt;code&gt;0&lt;/code&gt; and the number set in the &lt;code&gt;max&lt;/code&gt; attribute. If the &lt;code&gt;value&lt;/code&gt; attribute is omitted, the progress bar is set to an indeterminate state. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is an example of an indeterminate progress bar:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;label for="progress"&amp;gt;Article Progress:&amp;lt;/label&amp;gt;

&amp;lt;progress id="progress" max="100"&amp;gt;&amp;lt;/progress&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://i.giphy.com/media/AtInr1byEBtnARfLmT/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/AtInr1byEBtnARfLmT/giphy.gif" alt="Indeterminate Progress Bar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to play around with the tag, feel free to fork the pen below!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/braydoncoyer/embed/mdrLdRZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#compatibility" class="anchor"&gt;
  &lt;/a&gt;
  Compatibility
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;progress&amp;gt;&amp;lt;/progress&amp;gt;&lt;/code&gt; tag is part of the HTML5 Standard and is supported on all major web browsers. No need to worry about compatibility issues! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JqSDXt6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609775615556/lW9E7cNN3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JqSDXt6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609775615556/lW9E7cNN3.png" alt="Screen Shot 2021-01-04 at 9.53.29 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Thanks for reading! Have you ever used the &lt;code&gt;&amp;lt;progress&amp;gt;&amp;lt;/progress&amp;gt;&lt;/code&gt; tag in a project? Let me know in the comments below!&lt;/p&gt;

&lt;p&gt;If you liked this article and want more content like this, read some of my &lt;a href="https://blog.braydoncoyer.dev/"&gt;other articles&lt;/a&gt; , subscribe to my newsletter and make sure to follow me on &lt;a href="https://twitter.com/BraydonCoyer"&gt;Twitter&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to use Google Apps Script to automate processes in your company at no cost</title>
      <author>Iván García</author>
      <pubDate>Tue, 05 Jan 2021 13:47:59 +0000</pubDate>
      <link>https://dev.to/reboot-studio/how-to-use-google-apps-script-to-automate-processes-in-your-company-at-no-cost-3c88</link>
      <guid>https://dev.to/reboot-studio/how-to-use-google-apps-script-to-automate-processes-in-your-company-at-no-cost-3c88</guid>
      <description>&lt;p&gt;Within the collection of tools and services that we use both in the Studio and in some of our own products, Google App Scripts is one of our favorites. This tool allows us &lt;strong&gt;to automate recurring tasks and processes for free&lt;/strong&gt; by interacting with Google services such as Google Sheets, Docs, Drive etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started-with-google-app-scripts" class="anchor"&gt;
  &lt;/a&gt;
  Getting started with Google App Scripts
&lt;/h2&gt;

&lt;p&gt;To create our first script we can do it by accessing the &lt;a href="https://script.google.com/home"&gt;Google Apps Script page&lt;/a&gt;. This is the main page of the tool where we will see all the scripts created, the logs of the executions and the associated triggers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m-rvLSd7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s23mmt7k4l8wswvurq5l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m-rvLSd7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s23mmt7k4l8wswvurq5l.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can also &lt;strong&gt;create a script directly from the Google tool to which we want to associate it&lt;/strong&gt;, in the case of Sheets we can do it by clicking on Tools → Script editor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Qpec6qw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jt8gx0oez0fc1np08yja.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Qpec6qw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jt8gx0oez0fc1np08yja.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will open a development environment in the cloud where the script code can be written and executed directly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JhmHc6Uz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ei1j7k7djncy3fidu7xe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JhmHc6Uz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ei1j7k7djncy3fidu7xe.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we know how to create a script, we are going to learn through two examples the basic functionalities that will allow us to start creating automatic processes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#script-to-update-currencies-in-billbot" class="anchor"&gt;
  &lt;/a&gt;
  Script to update currencies in Billbot
&lt;/h2&gt;

&lt;p&gt;The first example that we are going to cover is a script that we use &lt;strong&gt;to obtain and format the list of currencies&lt;/strong&gt; that we use in &lt;a href="https://billbot.app/"&gt;Billbot app&lt;/a&gt; that we created in the Studio.&lt;/p&gt;

&lt;p&gt;The first thing we have to solve is &lt;strong&gt;how to make a request to an API from the script&lt;/strong&gt;. For this it will be necessary to use the class &lt;a href="https://developers.google.com/apps-script/reference/url-fetch/url-fetch-app"&gt;UrlFetchApp&lt;/a&gt; that will allow us to do it and it's one of the most useful methods that AppScripts have.&lt;/p&gt;

&lt;p&gt;In our case, we not only need to make one request, but multiple ones, given the structure of the data that the API returns. For this we will use the &lt;code&gt;fetchAll&lt;/code&gt; method that allows us to make multiple requests at the same time.&lt;/p&gt;

&lt;p&gt;Here is how the code looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;API_URL&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;EUR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=EUR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;USD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=USD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;GBP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=GBP&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;CAD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=CAD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;AUD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=AUD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;CHF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=CHF&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;MXN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=MXN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;RUB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=RUB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;INR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=INR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;BRL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=BRL&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;DKK&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=DKK&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;SEK&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=SEK&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;NOK&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=NOK&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;HRK&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=HRK&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;NZD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=NZD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;CZK&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=CZK&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;JPY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=JPY&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;PLN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=PLN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;RON&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=RON&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;THB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=THB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;AED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=AED&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;HKD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=HKD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;HUF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=HUF&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ILS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=ILS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;SGD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=SGD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;TRY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=TRY&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ZAR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=ZAR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;SAR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=SAR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;BGN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=BGN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;QAR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=QAR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ISK&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=ISK&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;MAD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=MAD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;RSD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=RSD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ARS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=ARS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;BHD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=BHD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;BOB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=BOB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;CLP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=CLP&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;CNY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=CNY&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;COP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=COP&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;EGP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=EGP&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;IDR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=IDR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;KRW&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=KRW&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;PEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=PEN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;PHP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=PHP&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;UAH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=UAH&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;UYU&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=UYU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;GTQ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=GTQ&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;PYG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;base=PYG&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;UrlFetchApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetchAll&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="nx"&gt;EUR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;USD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;GBP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;CAD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;AUD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;CHF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;MXN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;RUB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;INR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;BRL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;DKK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;SEK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;NOK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;HRK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;NZD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;CZK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;JPY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;PLN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;RON&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;THB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;AED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;HKD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;HUF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;ILS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;SGD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;TRY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;ZAR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;SAR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;BGN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;QAR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;ISK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;MAD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;RSD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;ARS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;BHD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;BOB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;CLP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;CNY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;COP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;EGP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;IDR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;KRW&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;PEN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;PHP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;UAH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;UYU&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;GTQ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;PYG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="nx"&gt;Logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In order to see the results of the request we can use &lt;code&gt;Logger.log&lt;/code&gt;. This would be the equivalent of the JavaScript &lt;code&gt;console.log&lt;/code&gt; but it will allow us &lt;strong&gt;to see the results in the App Scripts debugger&lt;/strong&gt;. To see the records we can press ctrl + Enter on the keyboard or cmd if you are on Mac.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SNXItaa0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/daut23vd9l4t1w0onq1u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SNXItaa0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/daut23vd9l4t1w0onq1u.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once we have the data fetched, the next step is to format it as we want. For this we will simply use a JavaScript &lt;em&gt;reduce&lt;/em&gt; and we will convert the result of it into a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;previous&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;currentJson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;currencyData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentJson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rates&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;currency&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentJson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;base&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;currencyDataWithBase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;currencyData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;previous&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;currencyDataWithBase&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;dataParsed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once the data is formatted we need &lt;strong&gt;to store it in the spreadsheet&lt;/strong&gt;. This can be done using the &lt;a href="https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet-app"&gt;SpreadSheetApp&lt;/a&gt; class. The essential methods of this class are &lt;code&gt;getActive()&lt;/code&gt;, which allows us to take the reference of the file to which the script is associated, and &lt;code&gt;getSheetByName()&lt;/code&gt;, which allow us to establish the reference of the specific sheet of the associated file.&lt;/p&gt;

&lt;p&gt;Once we have the reference of the sheet in a variable, we can use it &lt;strong&gt;to read and store data within its rows and columns&lt;/strong&gt;. With the &lt;code&gt;getRange&lt;/code&gt; and &lt;code&gt;setValue&lt;/code&gt; methods we can write inside the cell, and with the &lt;code&gt;getValue&lt;/code&gt; method we will obtain the value found in it.&lt;/p&gt;

&lt;p&gt;Specifically, in our script we want to store all the data obtained in the first cell of the spreadsheet, so we can achieve this with these four lines of code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ratesSpreadSheet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;SpreadsheetApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getActive&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;dbSheet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ratesSpreadSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSheetByName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;db&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;dbSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getRange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dataParsed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;SpreadsheetApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once the script is executed we will find the output on the cell 1,1 of our spreadsheet. We can see that is filled with the data obtained from the API and formatted with our needs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c11puJcF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wxj7y02j3czr9d1h1wuc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c11puJcF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wxj7y02j3czr9d1h1wuc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Only by making use of the &lt;code&gt;Logger&lt;/code&gt;, &lt;code&gt;SpreadSheetApp&lt;/code&gt; and &lt;code&gt;UrlFetchApp&lt;/code&gt; classes that we have just seen, we can create very powerful scripts with some knowledge of JavaScript and some creativity. The following example is a clear case of this: with the use of these three APIs we built &lt;strong&gt;a system for creating automatic invoices&lt;/strong&gt; for our startup.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cravy-partners-billing-system" class="anchor"&gt;
  &lt;/a&gt;
  Cravy Partners billing system
&lt;/h2&gt;

&lt;p&gt;In &lt;a href="https://cravy.co/"&gt;Cravy&lt;/a&gt; every week we had &lt;strong&gt;to create invoices for the restaurants that were partners of our platform&lt;/strong&gt;. Initially we started creating them manually with a Google spreadsheet that we converted to pdf. When we had more than 10 restaurants, the process was quite tedious and could take a whole day of work.&lt;/p&gt;

&lt;p&gt;Each restaurant had two documents: the invoice with the commission for our service and a receipt with all the orders associated with that commission.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b5aLzR_0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/82nmn9xoaad7auzdoxi6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b5aLzR_0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/82nmn9xoaad7auzdoxi6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SNBNtc0I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0phw7n3be9ajeek69kgh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SNBNtc0I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/0phw7n3be9ajeek69kgh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Taking advantage of the fact that we already had the invoice template and total control over the database and the backend of the project, &lt;strong&gt;we decided to create an App Script that would do the following&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a folder with the current date to store documents in Google Drive in an organized way.&lt;/li&gt;
&lt;li&gt;Obtain orders information for each restaurant by making a request to the backend.&lt;/li&gt;
&lt;li&gt;Create a copy of the Google Sheets templates for each restaurant and fill them with the information obtained from the API.&lt;/li&gt;
&lt;li&gt;Store the created copies in the corresponding folder and create a PDF version of the file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this article we are going to focus on showing the most interesting options that the API provides us and we will not go into detail about the logic of the script itself, but &lt;strong&gt;if you want to see the complete script&lt;/strong&gt; &lt;a href="https://github.com/reboot-studio-code/apps-script-examples"&gt;it can be found on Github&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#creation-of-the-folder-in-google-drive" class="anchor"&gt;
  &lt;/a&gt;
  Creation of the folder in Google Drive
&lt;/h3&gt;

&lt;p&gt;One of the classes that we have not seen yet is &lt;a href="https://developers.google.com/apps-script/reference/drive/drive-app"&gt;DriveApp&lt;/a&gt;, which allows us to perform operations on Google Drive folders and files.&lt;/p&gt;

&lt;p&gt;In our case we want &lt;strong&gt;to create a new folder&lt;/strong&gt; with the date as the name within a specific Google Drive folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;billDay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Creating the day folder to save the bills&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;folderId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;DriveApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFolderById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;FOLDER-ID&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createFolder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;billDay&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getId&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;em&gt;FOLDER-ID&lt;/em&gt; can be found at the end of the url slug when we are inside the folder as we can see in the image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yPeZa_Vd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dhio3uo9pmqs2ds6zz4j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yPeZa_Vd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dhio3uo9pmqs2ds6zz4j.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-copy-of-the-google-sheets-templates-for-each-restaurant" class="anchor"&gt;
  &lt;/a&gt;
  Create a copy of the Google Sheets templates for each restaurant
&lt;/h3&gt;

&lt;p&gt;In order &lt;strong&gt;to create a spreadsheet for each restaurant&lt;/strong&gt;, what we do is to execute the function for each of the restaurants that we have. We can do this through a simple &lt;em&gt;for&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;restaurantsData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fillSheetWithBillingData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;restaurantsData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="nx"&gt;billDay&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;firstDay&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;lastDay&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;folderId&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once the function is executed, it requests the restaurant information from the backend using the &lt;code&gt;UrlFetchApp&lt;/code&gt; class as we have seen in the Billbot example, and we do the necessary operations in JavaScript to obtain the data in the format we want.&lt;/p&gt;

&lt;p&gt;Once we have this data we proceed to create the new spreadsheet using the following lines of code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Setting the reference to the original sheets&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;billSheet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;originalSpreadsheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSheetByName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bill&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ordersBillSheet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;originalSpreadsheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSheetByName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;OrdersBill&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Create new restaurant sheet&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;newBillSheet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;SpreadsheetApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Factura-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;restaurantName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;billDay&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;newOrdersBillSheet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;SpreadsheetApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Annnexo-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;restaurantName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;billDay&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Copy the parent sheet content to the new created sheets&lt;/span&gt;
&lt;span class="nx"&gt;billSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;copyTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newBillSheet&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;ordersBillSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;copyTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newOrdersBillSheet&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Using the &lt;code&gt;create()&lt;/code&gt; and &lt;code&gt;copyTo()&lt;/code&gt; functions we create two new empty spreadsheets and then &lt;strong&gt;copy the content of the spreadsheet&lt;/strong&gt; that serves as a template. Keep in mind that this will create the files in the root folder of our Google Drive, so in the final step we will have to move these files to the corresponding folder and remove them from the root.&lt;/p&gt;

&lt;p&gt;The next step of the script is &lt;strong&gt;to fill the spreadsheets we just created&lt;/strong&gt; with the information obtained from the API using the &lt;code&gt;getRange()&lt;/code&gt; and &lt;code&gt;setValue()&lt;/code&gt; methods of the SpreadsheetApp class that we have seen in the previous example.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#store-the-copies-created-in-the-corresponding-folder-and-create-a-pdf-version-of-the-file" class="anchor"&gt;
  &lt;/a&gt;
  Store the copies created in the corresponding folder and create a PDF version of the file
&lt;/h3&gt;

&lt;p&gt;Finally, the last step is to store the two spreadsheets created and export them as PDF. To do this we only need a small function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;exportSomeSheets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;restaurantName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;folderId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;newBillSheet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;newOrdersBillSheet&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Save the files in to the correspondent folder&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;folder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;DriveApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFolderById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;folderId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;createFolder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;restaurantName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;copyNewBillSheet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;DriveApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFileById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newBillSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getId&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;copyNewOrdersBillSheet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;DriveApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFileById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newOrdersBillSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getId&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

  &lt;span class="nx"&gt;folder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;copyNewBillSheet&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;folder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;copyNewOrdersBillSheet&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;folder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;copyNewBillSheet&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;folder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;copyNewOrdersBillSheet&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;DriveApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getRootFolder&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;removeFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;copyNewBillSheet&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;DriveApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getRootFolder&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;removeFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;copyNewOrdersBillSheet&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The steps that this function performs are the following: first create a folder with the name of the restaurant inside the date folder generated in the previous step.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xkQ8NrhM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8d18j90owthqw5wq8fz7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xkQ8NrhM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8d18j90owthqw5wq8fz7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then paste the spreadsheets from the second step into the folder with the name of the restaurant with the &lt;code&gt;addFile()&lt;/code&gt; function. Last, it creates the pdf version with the &lt;code&gt;createFile()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Finally we delete the files from the root folder to avoid accumulating them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2TrQZGm---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ia16uhsa5mcqptilmtz1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2TrQZGm---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ia16uhsa5mcqptilmtz1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusions" class="anchor"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;As we can see, with the App Script and our creativity we can do very powerful things that help us in the day to day of our company and &lt;strong&gt;save us hundreds of hours at the end of the month&lt;/strong&gt;. These are just a couple of examples that we have implemented to automate certain parts of our operations, but the same can be applied to many more cases.&lt;/p&gt;

&lt;p&gt;In addition, another advantage of using App Script is that &lt;strong&gt;it is a completely free service&lt;/strong&gt; within the limits of the platform, so we can have cron jobs and other automatic processes at no cost.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>googlecloud</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Writing Your Own useFetch Hook in React</title>
      <author>Nick Scialli (he/him)</author>
      <pubDate>Tue, 05 Jan 2021 12:40:58 +0000</pubDate>
      <link>https://dev.to/nas5w/writing-your-own-usefetch-hook-in-react-2i3g</link>
      <guid>https://dev.to/nas5w/writing-your-own-usefetch-hook-in-react-2i3g</guid>
      <description>&lt;p&gt;React Hooks have been all the rage for a little over a year. Let's see how we can roll our own &lt;code&gt;useFetch&lt;/code&gt; hook to abstract fetch request logic out of our components.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is for academic purposes only. You &lt;em&gt;could&lt;/em&gt; roll your own &lt;code&gt;useFetch&lt;/code&gt; hook and use it in production, but I would highly recommend using an established library like &lt;a href="https://use-http.com"&gt;use-http&lt;/a&gt; to do the heavy lifting for you!&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#if-you-enjoy-this-post-please-give-it-a-or-and-consider-signing-up-for-my-free-weekly-dev-newsletter" class="anchor"&gt;
  &lt;/a&gt;
  If you enjoy this post, please give it a 💓, 🦄, or 🔖 and consider signing up for 📬 &lt;a href="https://buttondown.email/devtuts?hooks_dev"&gt;my free weekly dev newsletter&lt;/a&gt;
&lt;/h3&gt;



&lt;h1&gt;
  &lt;a href="#our-usefetch-function-signature" class="anchor"&gt;
  &lt;/a&gt;
  Our useFetch Function Signature
&lt;/h1&gt;

&lt;p&gt;To determine our &lt;code&gt;useFetch&lt;/code&gt; function signature, we should consider the information we might need from the end user to actually execute our fetch request. In this case, we'll say that we need the resource &lt;code&gt;url&lt;/code&gt; and we need the &lt;code&gt;options&lt;/code&gt; that might go along with the request (e.g., request method).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialOptions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Hook here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In a more full-featured solution, we might give the user a way ot abort the request, but we're happy with our two arguments for now!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#maintaining-state-in-our-hook" class="anchor"&gt;
  &lt;/a&gt;
  Maintaining State in Our Hook
&lt;/h1&gt;

&lt;p&gt;Our hook is going to need to maintain some state. We will &lt;em&gt;at least&lt;/em&gt; need to maintain &lt;code&gt;url&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; in state (as we'll need to give our user a way to &lt;code&gt;setUrl&lt;/code&gt; and &lt;code&gt;setOptions&lt;/code&gt;). There are some other stateful variable's we'll want as well!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data (the data returned from our request)&lt;/li&gt;
&lt;li&gt;error (any error if our request fails)&lt;/li&gt;
&lt;li&gt;loading (a boolean indicating whether we are actively fetching)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's create a bunch of stateful variables using the built-in &lt;code&gt;useState&lt;/code&gt; hook. also, we're going to want to give our users the chance to do the following things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;set the url&lt;/li&gt;
&lt;li&gt;set options&lt;/li&gt;
&lt;li&gt;see the retrieved data&lt;/li&gt;
&lt;li&gt;see any errors&lt;/li&gt;
&lt;li&gt;see the loading status&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore, we must make sure to return those two state setting functions and three data from our hook!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;React&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialOptions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUrl&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setOptions&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialOptions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Some magic happens here&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setOptions&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Importantly, we default our &lt;code&gt;url&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; to the &lt;code&gt;initialUrl&lt;/code&gt; and &lt;code&gt;initialOptions&lt;/code&gt; provided when the hook is first called. Also, you might be thinking that these are a lot of different variables and you'd like to maintain them all in the same object, or a few objects—and that would be totally fine!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#running-an-effect-when-our-url-or-options-change" class="anchor"&gt;
  &lt;/a&gt;
  Running an Effect When our URL or Options Change
&lt;/h1&gt;

&lt;p&gt;This is a pretty important part! We are going to want to execute a &lt;code&gt;fetch&lt;/code&gt; request every time the &lt;code&gt;url&lt;/code&gt; or &lt;code&gt;options&lt;/code&gt; variables change. What better way to do that than the built-in &lt;code&gt;useEffect&lt;/code&gt; hook?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;React&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialOptions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUrl&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setOptions&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialOptions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Fetch here&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setOptions&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#calling-fetch-with-async-await" class="anchor"&gt;
  &lt;/a&gt;
  Calling Fetch with Async Await
&lt;/h1&gt;

&lt;p&gt;I like async/await syntax over Promise syntax, so let's use the former! This, of course, works just as well using &lt;code&gt;then&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt;, and &lt;code&gt;finally&lt;/code&gt; rather than async/await.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;React&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialOptions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUrl&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setOptions&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initialOptions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setOptions&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;That was a lot! Let's break it down a bit. When we run our effect, we know that we're starting to fetch data. Therefore we set our &lt;code&gt;loading&lt;/code&gt; variable to &lt;code&gt;true&lt;/code&gt; and we clear our any errors that may have previously existed.&lt;/p&gt;

&lt;p&gt;In our async function, we wrap our &lt;code&gt;fetch&lt;/code&gt; request code with a &lt;code&gt;try/catch&lt;/code&gt; block. Any errors we get we want to report to the user, so in our &lt;code&gt;catch&lt;/code&gt; block we &lt;code&gt;setError&lt;/code&gt; to whatever error is reported.&lt;/p&gt;

&lt;p&gt;In our &lt;code&gt;try&lt;/code&gt; block, we do a fairly standard &lt;code&gt;fetch&lt;/code&gt; request. We &lt;em&gt;assume&lt;/em&gt; our data being returned is &lt;code&gt;json&lt;/code&gt; because I'm lazy, but if we were trying to make this the most versatile hook we would probably give our users a way to configure the expected response type. Finally, assuming all is successful, we set our &lt;code&gt;data&lt;/code&gt; variable to our returned JSON!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#using-the-hook" class="anchor"&gt;
  &lt;/a&gt;
  Using The Hook
&lt;/h1&gt;

&lt;p&gt;Believe it or not, that's all there is to creating our custom hook! Now we just need to bring it into a sample app and hope that it works.&lt;/p&gt;

&lt;p&gt;In the following example, I have an app that loads any github user's basic github profile data. This app flexes almost all the features we designed for our hook, with the exception of setting &lt;code&gt;fetch&lt;/code&gt; options. We can see that, while the fetch request is being loaded, we can display a "Loading" indicator. When the fetch is finished, we either display a resulting error or a stringified version of the result.&lt;/p&gt;

&lt;p&gt;We offer our users a way to enter a different github username to perform a new fetch. Once they submit, we use the &lt;code&gt;setUrl&lt;/code&gt; function exported from our &lt;code&gt;useFetch&lt;/code&gt; hook, which causes the effect to run and a new request to be made. We soon have our new data!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;makeUserUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`https://api.github.com/users/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUrl&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;makeUserUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nas5w&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt; &lt;span class="na"&gt;htmlFor&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"user"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Find user:&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;label&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;
        &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="nx"&gt;setUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;makeUserUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
          &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
          &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"user"&lt;/span&gt;
          &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Find&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Loading...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Feel free to check out the &lt;code&gt;useFetch&lt;/code&gt; hook and sample application &lt;a href="https://codesandbox.io/s/use-fetch-hook-k2xke"&gt;on codesandbox here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#concluding-thoughts" class="anchor"&gt;
  &lt;/a&gt;
  Concluding Thoughts
&lt;/h1&gt;

&lt;p&gt;Writing a custom React hook can be a fun endeavor. It's sometimes a bit tricky at first, but once you get the hang of it it's quite fun, and can result in really shortening and reducing redundancy in your component code.&lt;/p&gt;

&lt;p&gt;If you have any questions about this hook, React, or JS in general, don't hesitate to &lt;a href="https://twitter.com/nas5w"&gt;reach out to me on Twitter&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Create Pagination component from scratch in ReactJS</title>
      <author>CodeBucks</author>
      <pubDate>Tue, 05 Jan 2021 10:46:18 +0000</pubDate>
      <link>https://dev.to/codebucks/create-pagination-component-from-scratch-in-reactjs-45j5</link>
      <guid>https://dev.to/codebucks/create-pagination-component-from-scratch-in-reactjs-45j5</guid>
      <description>&lt;p&gt;Hey Everyone,&lt;/p&gt;

&lt;p&gt;Hope you all doing great.&lt;/p&gt;

&lt;p&gt;In this post we're building pagination component from scratch in ReactJS. We're not going to use any library here.&lt;/p&gt;

&lt;p&gt;If you prefer to watch video then you can go through below video else keep reading...😄&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/6DtBw3PaeHs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let's start by creating our react-app,&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx create-react-app react-pagination-component&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create separate file like PaginationComponent.js.&lt;/p&gt;

&lt;p&gt;Here, I'm using &lt;a href="https://jsonplaceholder.typicode.com/guide/"&gt;jsonplaceholder API&lt;/a&gt; to get data and use pagination on that data.&lt;/p&gt;

&lt;p&gt;This API will return us a list of todos. Now to store this data create one state and initialize it with an empty array.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const [data, setData] = useState([]);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now let's use useEffect to set this state with our data which comes from API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  useEffect(() =&amp;gt; {
    fetch("https://jsonplaceholder.typicode.com/todos")
      .then((response) =&amp;gt; response.json())
      .then((json) =&amp;gt; setData(json));
  }, []);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;if you want to see what type of data this api is providing then just go to this url: &lt;a href="https://jsonplaceholder.typicode.com/todos"&gt;https://jsonplaceholder.typicode.com/todos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also if you don't know how to fetch api in ReactJS you can watch my video on How to fetch API: &lt;a href="https://youtu.be/27f3B1qndW8"&gt;https://youtu.be/27f3B1qndW8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;let's create small renderData component outside of our main component to render todo list.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;line no 4 to 12:&lt;/strong&gt; here I have mapped title of to-dos from data &lt;br&gt;
                  state.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;line no 26 :&lt;/strong&gt; Render renderData(data) with data state.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;let's create pagination from here&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To do that we need two states,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [currentPage, setcurrentPage] = useState(1);
const [itemsPerPage, setitemsPerPage] = useState(5);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;currentPage&lt;/strong&gt; :- stores current page number, initially 0.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;itemsPerPage&lt;/strong&gt; :- stores no of items we want to display in &lt;br&gt;
                    single page. Initially it is 5.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  const pages = [];
  for (let i = 1; i &amp;lt;= Math.ceil(data.length / itemsPerPage); i++) {
    pages.push(i);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;In above code,&lt;br&gt;
pages array contains total number of pages like 1,2,3..upto &lt;em&gt;(total data / itemsPerPage)&lt;/em&gt;*.&lt;/p&gt;

&lt;p&gt;If you have 20 items and you want to display 5 items per page then you will need 20/5 = 4 pages.&lt;/p&gt;

&lt;p&gt;Let's create render page number component which will display page numbers.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;line no 24 to 36 :&lt;/strong&gt;&lt;br&gt;
I have mapped this pages array which will return an &lt;code&gt;li&lt;/code&gt; tag which display page numbers. This &lt;code&gt;li&lt;/code&gt; tag contains key, id, onClick method and className.&lt;br&gt;
Here className becomes active when you are on the same page as currentPage state.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;line no 23:&lt;/strong&gt;&lt;br&gt;
This haneleClick method runs when we click on any page number and set currentPage state to selected page number.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;line 47:&lt;/strong&gt;&lt;br&gt;
Rendered renderPageNumbers component by wrapping it with ul tag and className as pageNumbers.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: For styling, you can refer &lt;a href="https://github.com/codebucks27/react-pagination-component/blob/main/src/components/style.css"&gt;this&lt;/a&gt; css file. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you have observed, This page numbers are all over whole page and now we need to set limit to display this page numbers.&lt;/p&gt;

&lt;p&gt;TO do that we need to define 3 more react states.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  const [pageNumberLimit, setpageNumberLimit] = useState(5);
  const [maxPageNumberLimit, setmaxPageNumberLimit] = useState(5);
  const [minPageNumberLimit, setminPageNumberLimit] = useState(0);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;pageNumberLimit&lt;/strong&gt; is to store how many page numbers you want to display. Here I want to display only 5.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;maxPageNumberLimit&lt;/strong&gt; is to store max page bound limit.&lt;br&gt;
&lt;strong&gt;minPageNumberLimit&lt;/strong&gt; is to store min page bound limit.&lt;/p&gt;

&lt;p&gt;Now modify renderPageNumbers component by putting if condition like given below,&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  const renderPageNumbers = pages.map((number) =&amp;gt; {
    if (number &amp;lt; maxPageNumberLimit + 1 &amp;amp;&amp;amp; number &amp;gt; minPageNumberLimit) {
      return (
        &amp;lt;li
          key={number}
          id={number}
          onClick={handleClick}
          className={currentPage == number ? "active" : null}
        &amp;gt;
          {number}
        &amp;lt;/li&amp;gt;
      );
    } else {
      return null;
    }
  });
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;This if condition means that if current number is greater then maxPageNumberLimit+1 and less then minPageNumberLimit then render it else render nothing.&lt;/p&gt;

&lt;p&gt;As you run your code, you will see that there are only 5 page numbers displayed.&lt;/p&gt;

&lt;p&gt;Next we need next and previous buttons.&lt;br&gt;
Create those buttons around the {renderPageNumbers} component.&lt;br&gt;
Just like below,&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;line no 66-73 and 75-81:&lt;/strong&gt;&lt;br&gt;
There are two buttons prev and next.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;line 41:&lt;/strong&gt;&lt;br&gt;
handleNextbtn method for next button. In this method whenever user clicks on next button, it will set the current page state to plus 1. and check the condition if current page has not crossed maximum page number limit or not. If yes then it will reset this max and min page number limit with new limit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;line 50:&lt;/strong&gt; method for previous button. Only change is in the sign and in if condition. Suppose you are at page 6 and you want to go back to 5 then this condition will check that 6-1=5%5==0 so it will become true and it will reset max and min page number limits.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;line 69:&lt;/strong&gt; we will disable prev button when user is at 1st page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;line 78:&lt;/strong&gt; we will disable next button when user is at last page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now our Pagination component is Almost completed one thing left is to add those three dots which indicates that there are more pages then displayed&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's create them.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Above is the full code for this Tutorial.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;line no 59 and 64:&lt;/strong&gt;&lt;br&gt;
Here I have created two buttons with hellip; which is unicode for …. &lt;br&gt;
There are two buttons pageIncrementBtn will render when page length is &amp;gt; maxPageNumberLimit.&lt;br&gt;
while pageDecrementBtn will render when minPageNumberLimit &amp;gt;= 1.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;line no 84 and 86:&lt;/strong&gt;&lt;br&gt;
render both of this ... buttons below and after the &lt;em&gt;renderPageNumbers&lt;/em&gt; component.&lt;/p&gt;

&lt;p&gt;Now your whole Pagination component is completed.&lt;/p&gt;

&lt;p&gt;Watch above given video to know about one more pagination component which loads items vertically.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading-and-supporting" class="anchor"&gt;
  &lt;/a&gt;
  Thanks For Reading and Supporting.😄
&lt;/h3&gt;

&lt;p&gt;Feel free to visit my youtube channel: &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#codebucks" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/channel/UCeYt6blRBKuNrEg_-282fSA"&gt;@CodeBucks&lt;/a&gt;
&lt;/h4&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What is CI/CD? Introduction to CI/CD for newbies</title>
      <author>RealToughCandy.io</author>
      <pubDate>Tue, 05 Jan 2021 09:17:01 +0000</pubDate>
      <link>https://dev.to/realtoughcandy/what-is-ci-cd-introduction-to-ci-cd-for-newbies-1l0f</link>
      <guid>https://dev.to/realtoughcandy/what-is-ci-cd-introduction-to-ci-cd-for-newbies-1l0f</guid>
      <description>&lt;h2&gt;
  &lt;a href="#cicd" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;CI/CD.&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;You may have heard this weird little acronym floating around the web.&lt;/p&gt;

&lt;p&gt;But what the heck is it?&lt;/p&gt;

&lt;p&gt;And should you use it as a software developer?&lt;/p&gt;

&lt;p&gt;Read on to find out!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-cicd" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is CI/CD?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;CI/CD is an acronym for &lt;strong&gt;continuous integration/continuous deployment.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But it can also mean &lt;strong&gt;continuous integration/continuous delivery&lt;/strong&gt; (more on the differences below).&lt;/p&gt;

&lt;p&gt;Basically, CI/CD automates:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;your builds&lt;/li&gt;
&lt;li&gt;your tests&lt;/li&gt;
&lt;li&gt;your deployments&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And like all good pieces of software, a good CI/CD workflow is going to save you time.&lt;/p&gt;

&lt;p&gt;This gives the boss a happy face!&lt;/p&gt;

&lt;p&gt;It also prevents you, the developer, from flipping your desk over in an epic rage quit. Woot!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-benefits-of-cicd" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What are the benefits of CI/CD?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;A few of the benefits of CI/CD include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reduced production &amp;amp; staging errors&lt;/li&gt;
&lt;li&gt;Makes bugs easier to find &amp;amp; remove&lt;/li&gt;
&lt;li&gt;Easy rollbacks since changes are small &amp;amp; incremental&lt;/li&gt;
&lt;li&gt;Increase in team productivity&lt;/li&gt;
&lt;li&gt;Rapid feedback including automated code analysis &amp;amp; code health report&lt;/li&gt;
&lt;li&gt;Competitive advantage: you can get feedback from customers faster&lt;/li&gt;
&lt;li&gt;No more manual FTP deployment&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-continuous-integration" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is Continuous Integration?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Continuous integration isn’t necessarily a particular tool.&lt;/p&gt;

&lt;p&gt;Think of it more as a workflow or setup. And the CI tool(s) you choose lets you execute that workflow.&lt;/p&gt;

&lt;p&gt;For example, there’s a CI tool called Jenkins.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gSksdkba--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://realtoughcandy.com/wp-content/webp-express/webp-images/uploads/2020/12/jenkins-ci-logo-217x300.png.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gSksdkba--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://realtoughcandy.com/wp-content/webp-express/webp-images/uploads/2020/12/jenkins-ci-logo-217x300.png.webp" alt="jenkins ci logo butler with towel and suit and tie"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here’s what a CI process might look like if you were using Jenkins:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Developers push code to a repo frequently. This could include patches, updates, and new functionalities.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once pushed, a Jenkins build server tests that code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jenkins shows developers if their code has passed or failed.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If code fails: Fix code and repeat steps 1-3.&lt;/p&gt;

&lt;p&gt;If code passes: Send to deployment environment.&lt;/p&gt;

&lt;p&gt;In this flow, broken builds become a priority before building the next feature.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-continuous-deployment" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is Continuous Deployment?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Continuous deployment is the second part of the “CI/CD” equation.&lt;/p&gt;

&lt;p&gt;And it ensures your software can be released on demand. Deployments are fast and frequent.&lt;/p&gt;

&lt;p&gt;Remember the process from the CI section above?&lt;/p&gt;

&lt;p&gt;Once the code passes the tests, it’s pushed to its final phase: the deployment environment.&lt;/p&gt;

&lt;p&gt;This whole process has a name. It’s called a deployment pipeline. Further, all code changes you make go through this pipeline.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-a-deployment-pipeline" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What’s a deployment pipeline?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hOvO7N6H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2019/08/29115129/CICD-pipeline-1024x354.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hOvO7N6H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2019/08/29115129/CICD-pipeline-1024x354.png" alt="CICD pipeline"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A deployment pipeline (or CI/CD pipeline) a series of validations your code flows through before it’s released to production.&lt;/p&gt;

&lt;p&gt;For example, a simple pipeline could consist of these phases:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DhS7wGKx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wpblog.semaphoreci.com/wp-content/uploads/2019/03/cicd-pipeline-introduction.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DhS7wGKx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wpblog.semaphoreci.com/wp-content/uploads/2019/03/cicd-pipeline-introduction.png" alt="simple ci/cd pipeline illustration"&gt;&lt;/a&gt;&lt;br&gt;
Image via &lt;a href="https://wpblog.semaphoreci.com/wp-content/uploads/2019/03/cicd-pipeline-introduction.png"&gt;semaphoreci.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here’s a theoretical pipeline for a Go project:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O61A8tpz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wpblog.semaphoreci.com/wp-content/uploads/2019/03/golang-ci-pipeline.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O61A8tpz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wpblog.semaphoreci.com/wp-content/uploads/2019/03/golang-ci-pipeline.png" alt="CI/CD pipeline featuring Go programming language"&gt;&lt;/a&gt;&lt;br&gt;
Image via &lt;a href="https://wpblog.semaphoreci.com/wp-content/uploads/2019/03/golang-ci-pipeline.png"&gt;semaphoreci.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These example pipelines may look relatively straightforward. However, they can get complex quickly:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XAvein0r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AN8pCkc2f7fzxsBZOEpgkDQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XAvein0r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AN8pCkc2f7fzxsBZOEpgkDQ.png" alt="complete illustration of ci/cd pipeline with jenkins"&gt;&lt;/a&gt;&lt;br&gt;
Image via &lt;a href="https://cdn-images-1.medium.com/max/2000/1*N8pCkc2f7fzxsBZOEpgkDQ.png"&gt;Medium&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do remember that pipelines vary from company to company, project to project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-difference-between-continuous-deployment-and-continuous-delivery" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is the difference between continuous deployment and continuous delivery?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Continuous deployment simply means all changes go through a pipeline. They’re automatically deployed into production.&lt;/p&gt;

&lt;p&gt;On the other hand, continuous delivery means means developers must manually approve the deployment.&lt;/p&gt;

&lt;p&gt;Then once approved, the pipeline continues its automation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XbeYj_iT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.crisp.se/wp-content/uploads/2013/02/continuous-delivery-deployment-sm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XbeYj_iT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.crisp.se/wp-content/uploads/2013/02/continuous-delivery-deployment-sm.jpg" alt="ci/cd pipeline illustration"&gt;&lt;/a&gt;&lt;br&gt;
Image via &lt;a href="https://blog.crisp.se/wp-content/uploads/2013/02/continuous-delivery-deployment-sm.jpg"&gt;crisp.se&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To illustrate another way:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MG663a_T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.redhat.com/cms/managed-files/styles/wysiwyg_full_width/s3/ci-cd-flow-desktop_0.png%3Fitok%3DQgBYmjA2" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MG663a_T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.redhat.com/cms/managed-files/styles/wysiwyg_full_width/s3/ci-cd-flow-desktop_0.png%3Fitok%3DQgBYmjA2" alt="ci/cd pipeline illustration"&gt;&lt;/a&gt;&lt;br&gt;
Image via &lt;a href="//www.redhat.com/cms/managed-files/styles/wysiwyg_full_width/s3/ci-cd-flow-desktop_0.png?itok=QgBYmjA2"&gt;RedHat&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-some-popular-cicd-tools" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What are some popular CI/CD tools?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Some popular CI/CD tools include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Travis CI&lt;/li&gt;
&lt;li&gt;Jenkins&lt;/li&gt;
&lt;li&gt;CircleCI&lt;/li&gt;
&lt;li&gt;GitLab&lt;/li&gt;
&lt;li&gt;Spinnaker&lt;/li&gt;
&lt;li&gt;BuildKite&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#do-cicd-tools-cost-money" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Do CI/CD tools cost money?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;It depends.&lt;/p&gt;

&lt;p&gt;While some CI/CD tools are totally free, some are freemium and some are paid tier only.&lt;/p&gt;

&lt;p&gt;Additionally, many are available as part of the GitHub student developer pack. This includes Travis CI.&lt;/p&gt;

&lt;p&gt;So if you’re a student, &lt;a href="https://education.github.com/discount_requests/student_application"&gt;read this GitHub post&lt;/a&gt; to check your eligibility.&lt;/p&gt;

&lt;p&gt;Also, GitHub announced in 2019 that GitHub actions now supports CI/CD. This is a free feature available to public repos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#should-i-use-cicd-as-a-software-developer" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Should I use CI/CD as a software developer?&lt;/strong&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#for-complete-code-newbies" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;For complete code newbies:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Not recommended.&lt;/p&gt;

&lt;p&gt;Is CI/CD is an incredibly powerful mechanism for your workflow? Yes.&lt;/p&gt;

&lt;p&gt;But learning the basics of programming and workflow management 101 (i.e. Git workflow) is more important as an aspiring developer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-advaced-beginners" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;For advaced beginners:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Give it a try!&lt;/p&gt;

&lt;p&gt;Because if you plan on working in the industry as a software developer, there’s a good chance you’ll be using some sort of automation.&lt;/p&gt;

&lt;p&gt;Thus, getting familiar with continuous integration &amp;amp; continuous deployment/delivery, even as a solo dev, is good practice.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-those-in-the-industry" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;For those in the industry:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Absolutely. If you have a DevOps team, there’s a good chance they’ve implemented (or plan on implementing) a CI/CD workflow.&lt;/p&gt;

&lt;p&gt;But if you don’t have a DevOps team, you can still get up and running with CI/CD.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-what-is-cicd" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion: What is CI/CD?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In summary, CI/CD is a way to automate your builds, tests and deployments.&lt;/p&gt;

&lt;p&gt;There are lots of open source tools available.&lt;/p&gt;

&lt;p&gt;But there are also paid options if you need the upgrade.&lt;/p&gt;

&lt;p&gt;At the end of the day, continuous integration and continuous deployment/delivery can save time and money. &lt;/p&gt;

&lt;p&gt;Lastly, if you’re on a dev team, it’s something you should seriously consider using.&lt;/p&gt;

&lt;p&gt;Are you using CI/CD? If so, what tools do you prefer? &lt;/p&gt;

</description>
      <category>devops</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>cicd</category>
    </item>
    <item>
      <title>Exceptions and Streams</title>
      <author>Victor Rentea</author>
      <pubDate>Tue, 05 Jan 2021 08:45:11 +0000</pubDate>
      <link>https://dev.to/victorrentea/exceptions-and-streams-3m5i</link>
      <guid>https://dev.to/victorrentea/exceptions-and-streams-3m5i</guid>
      <description>&lt;p&gt;&lt;em&gt;About the Author: Victor is a Java Champion and an experienced Independent Trainer, Speaker, and founder of a huge developer community. More on &lt;a href="https://victorrentea.ro"&gt;victorrentea.ro&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article was first published at &lt;a href="https://victorrentea.ro/blog/exceptions-and-streams/"&gt;Victor's blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Java 8 gave us &lt;code&gt;Optional&lt;/code&gt;, a mighty weapon against the most frequent Exception in Java: &lt;code&gt;NullPointerException&lt;/code&gt;. Unfortunately, Java 8 also brought new headaches regarding exceptions, as the default functional interfaces in Java 8 don’t declare throwing any checked exceptions. So every time you get a checked exception within a lambda, you have to fix that somehow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#converting-checked-into-runtime-exceptions" class="anchor"&gt;
  &lt;/a&gt;
  Converting Checked into Runtime Exceptions
&lt;/h2&gt;

&lt;p&gt;The default suggestion offered by most IDEs to auto-fix this issue will produce code like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
List&amp;lt;String&amp;gt; dateList = asList("2020-10-11", "2020-nov-12", "2020-12-01");
List&amp;lt;Date&amp;gt; dates = dateList.stream().map(s -&amp;gt; {
   try {
      return format.parse(s);
   } catch (ParseException e) {
      throw new RuntimeException(e);
   }
}).collect(toList());
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Horrible code.&lt;/p&gt;

&lt;p&gt;We could create a dedicated function doing just &lt;code&gt;.parse&lt;/code&gt; and then cast a spell on it with &lt;code&gt;@SneakyThrows&lt;/code&gt;, as we've discussed in &lt;a href="https://dev.tohide-checked-exceptions-with-sneakythrows"&gt;a previous article&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   List&amp;lt;Date&amp;gt; dates = dateList.stream()
        .map(s -&amp;gt; uglyParse(format, s))
        .collect(toList());
   ...
}

@SneakyThrows
private static Date uglyParse(SimpleDateFormat format, String s) {
   return format.parse(s);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But creating this new method just to hack it with Lombok feels wrong. Indeed, we created it for a purely technical reason: to hide the annoying checked exception which doesn't fit with the &lt;code&gt;java.util.Function&lt;/code&gt; interface, which doesn't declare to throw anything.&lt;/p&gt;

&lt;p&gt;Let's play a bit and create a &lt;code&gt;ThrowingFunction&lt;/code&gt; interface declaring to throw any checked exception:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;interface ThrowingFunction&amp;lt;T,R&amp;gt; {
    R apply(T t) throws Exception;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then, our &lt;code&gt;s-&amp;gt;format.parse(s)&lt;/code&gt; expression could be &lt;a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html#target-typing"&gt;target-typed&lt;/a&gt; to this new interface, so the following line compiles:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ThrowingFunction&amp;lt;String, Date&amp;gt; p = s -&amp;gt; format.parse(s);
// or
ThrowingFunction&amp;lt;String, Date&amp;gt; p = format::parse;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Unfortunately, the &lt;code&gt;Stream.map()&lt;/code&gt; operation takes a &lt;code&gt;java.util.Function&lt;/code&gt;, you can't change that. But let's imagine we had a function that would take a &lt;code&gt;ThrowingFunction&lt;/code&gt; and return back a 'classic' &lt;code&gt;Function&lt;/code&gt;  that doesn't throw any checked exception anymore.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Function&amp;lt;String, Date&amp;gt; f = wrapAsRuntime(p);
List&amp;lt;Date&amp;gt; dates = dateList.stream().map(f).collect(toList());
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And here's the strange &lt;code&gt;wrapAsRuntime&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;private static &amp;lt;T,R&amp;gt; Function&amp;lt;T, R&amp;gt; wrapAsRuntime(ThrowingFunction&amp;lt;T, R&amp;gt; p) {
    return t -&amp;gt; {
        try {
            return p.apply(t);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If that's complete nonsense for your, then I would advice that you try to type it yourself. It helps a lot!&lt;/p&gt;

&lt;p&gt;Notice that we’ve used generics to make it highly reusable. That's quite a good idea, isnt'it? It's so good that of course others had it it many years ago... :) &lt;/p&gt;

&lt;p&gt;Introducing the &lt;code&gt;Unchecked.function()&lt;/code&gt; from the &lt;a href="https://github.com/jOOQ/jOOL"&gt;jool library&lt;/a&gt; that does EXACTLY what we did above. Using it, the final code looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;List&amp;lt;Date&amp;gt; dates = dateList.stream().map(Unchecked.function(format::parse)).collect(toList());
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you've been using Java 8 for many years, then this library is a must-have.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Best-practice&lt;/strong&gt;: Whenever checked exceptions are annoying you in lambdas &lt;code&gt;-&amp;gt;&lt;/code&gt; or method references &lt;code&gt;::&lt;/code&gt;, use &lt;code&gt;Unchecked.*&lt;/code&gt; to rethrow it as a &lt;code&gt;RuntimeException&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This doesn't involve any hack in the bytecode (&lt;a href="https://dev.tohide-checked-exceptions-with-sneakythrows"&gt;as @SneakyThrows does&lt;/a&gt;), but only plain java code. Passing a function as a parameter to another function is a very useful practice that I will be blogging about soon, but functions that both take and return functions - those I don't like. It's one of the most complex, hard to read, and especially hard to debug in Java. But since it's a library doing it, and the purpose is obvious, I never hesitated to use it many of my projects.&lt;/p&gt;

&lt;p&gt;Now let's shift a bit the perspective. No matter how you twist it, the processing of the entire stream stops when the first exception is thrown. But what if we don't want to crash but instead collect all the errors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-try-monad" class="anchor"&gt;
  &lt;/a&gt;
  The Try Monad
&lt;/h2&gt;

&lt;p&gt;Let’s change the requirements a bit: we now want to parse all the &lt;strong&gt;valid&lt;/strong&gt; dates and return them IF at least half of them are parseable, otherwise we should throw an exception. This time we can’t let an exception terminate the execution of our stream. Instead, we want to go through all of the items and collect both parsed dates and exceptions. For example, if we are given 3 correctly-formatted dates and 2 invalid ones, we should return the 3 ones that we were able to parse correctly.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Whenever you want to &lt;strong&gt;collect the exceptions&lt;/strong&gt; happening in items, consider using the vavr &lt;code&gt;Try&lt;/code&gt; monad.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;Try&amp;lt;&amp;gt;&lt;/code&gt; class from the &lt;a href="https://www.vavr.io/"&gt;vavr library&lt;/a&gt; is a specialization of the &lt;code&gt;Either&amp;lt;&amp;gt;&lt;/code&gt; concept present in many functional programming languages. An instance can store either the result or the occurred exception (if any).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;List&amp;lt;Try&amp;lt;Date&amp;gt;&amp;gt; tries = dateList.stream()
    .map(s -&amp;gt; Try.of(
        () -&amp;gt; format.parse(s) // throwing code
    ))
    .collect(toList());
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If the &lt;em&gt;throwing code&lt;/em&gt; crashes with an exception, the surrounding &lt;code&gt;Try.of&lt;/code&gt; function will catch that exception and return a &lt;strong&gt;failed Try&lt;/strong&gt;. Therefore, in the &lt;code&gt;tries&lt;/code&gt; list above, there can be items with &lt;code&gt;isSuccess()&lt;/code&gt; either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. To count the success ratio, the shortest (geekest) form is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;double successRatio = tries.stream()
    .mapToInt(t -&amp;gt; t.isSuccess() ? 1 : 0)
    .average()
    .orElse(0);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (successRatio &amp;gt; .5) {
    return tries.stream()
        .filter(Try::isSuccess)
        .map(Try::get)
        .collect(toList());
} else {
    throw new IllegalArgumentException("Too many invalid dates");
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Problem solved.&lt;/p&gt;

&lt;p&gt;To better understand the code, we can extract a function from it, that returns a &lt;code&gt;Try&amp;lt;&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;private static Try&amp;lt;Date&amp;gt; tryParse(SimpleDateFormat format, String s) {
    return Try.of(() -&amp;gt; format.parse(s));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This resembles the style of handling exceptions in other languages like Go and Haskell, which return the exception to their callers.&lt;/p&gt;

&lt;p&gt;By the way, if you think a bit, you could solve the problem without the &lt;code&gt;Try&lt;/code&gt;, by sweeping the data twice: first to count the parseable dates, and then to actually parse them. Or even a single pass using a combination of a &lt;code&gt;.map&lt;/code&gt; returning a &lt;code&gt;null&lt;/code&gt;/&lt;code&gt;Optional.empty&lt;/code&gt; for errors, followed by a &lt;code&gt;.filter&lt;/code&gt;. That could work too, but the &lt;code&gt;Try&lt;/code&gt; approach might be more readable.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: Consider &lt;code&gt;*vavr.Try&amp;lt;&amp;gt;&lt;/code&gt; when you want to collect both results and exceptions in a single pass through data.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By the way, if you keep thinking at the "Monad" word, here’s a nice article to get you past that: &lt;a href="https://dzone.com/articles/functor-and-monad-examples-in-plain-java"&gt;Monads for Java developers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: avoid streaming a large number of items in batch processing. Instead, stick with the industry default: process the data in chunks, and consider introducing Spring Batch for state-of-the-art batches.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusions" class="anchor"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Checked exceptions don't play nice with the Java Stream API.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;@SneakyThrows&lt;/code&gt; (&lt;a href="https://projectlombok.org/features/SneakyThrows"&gt;Lombok&lt;/a&gt;) or &lt;code&gt;Unchecked&lt;/code&gt; (&lt;a href="http://www.jooq.org/products/jOO%CE%BB/javadoc/0.9.5/org/jooq/lambda/Unchecked.html"&gt;jOOL&lt;/a&gt;) to get rid of checked exceptions with Streams&lt;/li&gt;
&lt;li&gt;Consider &lt;code&gt;Try&lt;/code&gt; (&lt;a href="https://www.javadoc.io/doc/io.vavr/vavr/0.10.0/io/vavr/control/Try.html"&gt;vavr&lt;/a&gt;) whenever you want to collect the errors occurring for an element instead of terminating the Stream.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>java</category>
      <category>functional</category>
      <category>cleancode</category>
    </item>
  </channel>
</rss>
