<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Baloonza IT newsletters weekly digest #18</title>
      <author>Dmitry Magunov</author>
      <pubDate>Mon, 03 Jan 2022 17:30:52 +0000</pubDate>
      <link>https://dev.to/dimamagunov/baloonza-it-newsletters-weekly-digest-18-1ib</link>
      <guid>https://dev.to/dimamagunov/baloonza-it-newsletters-weekly-digest-18-1ib</guid>
      <description>&lt;p&gt;Happy New Year!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-design"&gt;
  &lt;/a&gt;
  CSS, design
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://app.baloonza.com/issues/11021?baloon_issue_id=18"&gt;CSS Animation Weekly #281&lt;/a&gt; &lt;br&gt;
Some scroll animations, explore daylight cycles and lots of other inspiration.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://app.baloonza.com/issues/11039?baloon_issue_id=18"&gt;üìù¬†[CSS-Tricks] 283: Happy Holidays!&lt;/a&gt;&lt;br&gt;
:has() is :here(), cool things you can do with CSS and text,  new spelling and grammatical tools.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#product-hunt-daily"&gt;
  &lt;/a&gt;
  Product Hunt Daily
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://app.baloonza.com/issues/11028?baloon_issue_id=18"&gt;Most upvoted&lt;/a&gt;&lt;br&gt;
2021‚Äôs most upvoted products, Volume I&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://app.baloonza.com/issues/11055?baloon_issue_id=18"&gt;Killing it&lt;/a&gt;&lt;br&gt;
2021‚Äôs most upvoted products, Volume II&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://app.baloonza.com/issues/11081?baloon_issue_id=18"&gt;Up and away&lt;/a&gt;&lt;br&gt;
2021‚Äôs most upvoted products, Volume III&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://app.baloonza.com/issues/11116?baloon_issue_id=18"&gt;Top 10&lt;/a&gt;&lt;br&gt;
2021‚Äôs most upvoted products, Volume IV&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://app.baloonza.com/issues/11164?baloon_issue_id=18"&gt;5,4,3,2,1&lt;/a&gt;&lt;br&gt;
The 5 most upvoted products of 2021&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#hacker-newsletter"&gt;
  &lt;/a&gt;
  Hacker Newsletter
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://app.baloonza.com/issues/11155?baloon_issue_id=18"&gt;Hacker Newsletter #584&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#frontend-javascript-react"&gt;
  &lt;/a&gt;
  Frontend, javascript, React
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://app.baloonza.com/issues/11085?baloon_issue_id=18"&gt;Frontend Weekly - Issue 286&lt;/a&gt;&lt;br&gt;
6 hidden JavaScript gems that you probably miss, top 30 Git Command, React Chat Tutorial and other&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Awesome Javascript Newsletter&lt;/code&gt; &lt;a href="https://app.baloonza.com/issues/11139?baloon_issue_id=18"&gt;üíª Issue 293 - PrinceJS: Prince of Persia&lt;/a&gt;&lt;br&gt;
New in Node.js: "node:" protocol imports, Auto-Currying In TypeScript, Lessons Learned Achieving 100% Test Coverage&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Awesome React Newsletter&lt;/code&gt; &lt;a href="https://app.baloonza.com/issues/11142?baloon_issue_id=18"&gt;üíª Issue 211 - 5 Best Online Courses to learn React.js with Hooks in 2022&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#data-science-weekly-newsletter"&gt;
  &lt;/a&gt;
  Data Science Weekly Newsletter
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://app.baloonza.com/issues/11150?baloon_issue_id=18"&gt;Data Science Weekly - Issue 423&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




</description>
      <category>javascript</category>
      <category>react</category>
      <category>startup</category>
      <category>css</category>
    </item>
    <item>
      <title>5 Articles every WebDev should read this week (#01)</title>
      <author>martin krause</author>
      <pubDate>Mon, 03 Jan 2022 16:55:36 +0000</pubDate>
      <link>https://dev.to/martinkr/5-articles-every-webdev-should-read-this-week-01-29bi</link>
      <guid>https://dev.to/martinkr/5-articles-every-webdev-should-read-this-week-01-29bi</guid>
      <description>&lt;p&gt;A curated list of the top five web development must-reads from last week. Don't miss out on the latest web development stories and insights. Read all about the cutting edge in web development, working in tech and the new tools and frameworks while learning a few new tricks.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#full-accessibility-tree-in-chrome-devtools"&gt;
  &lt;/a&gt;
  Full accessibility tree in Chrome DevTools
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Chrome DevTools is launching a full accessibility tree making it easier for developers to get an overview of the whole tree. In this post find out how this tree is created and how to use it in your work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://developer.chrome.com/blog/full-accessibility-tree/"&gt;https://developer.chrome.com/blog/full-accessibility-tree/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#add-a-service-worker-to-your-site"&gt;
  &lt;/a&gt;
  Add a Service Worker to Your Site
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;One of the best things you can do for your website in 2022 is add a service worker, if you don‚Äôt have one in place already. Service workers give your website super powers. Today, I want to show you some of the amazing things that they can do, and give you a paint-by-numbers boilerplate that you can use to start using them on your site right away.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/add-a-service-worker-to-your-site/"&gt;https://css-tricks.com/add-a-service-worker-to-your-site/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#responsive-css-border-radius-with-the-fab-four-technique"&gt;
  &lt;/a&gt;
  Responsive CSS border radius with the Fab Four technique
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;You are probably already familiar with media-queries, which apply styling based on the browser viewport or the screen resolution, but sometimes we might need container-queries, which are still only available under feature flags for some browsers.&lt;br&gt;
Today we will implement the Fab Four technique to apply a border-radius to an element depending on its container dimension, rather than the screen width.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://blog.logrocket.com/responsive-css-border-radius-fab-four-technique/"&gt;https://blog.logrocket.com/responsive-css-border-radius-fab-four-technique/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-price-projects-and-manage-scope-creep"&gt;
  &lt;/a&gt;
  How To Price Projects And Manage Scope Creep
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Scoping, estimating, and running digital projects can often feel like an exercise in futility. In this article, Paul Boag explains why you need to start breaking your projects down into manageable phases and why that‚Äôs the best way to achieve significant benefits.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.smashingmagazine.com/2021/12/how-price-projects-manage-scope-screep/"&gt;https://www.smashingmagazine.com/2021/12/how-price-projects-manage-scope-screep/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thats-not-my-burnout"&gt;
  &lt;/a&gt;
  That‚Äôs Not My Burnout
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;If, like many folks during the pandemic, you‚Äôve begun confusing burnout for achievement, Donna Bungard will show you how to recognize that you‚Äôre low on fuel and give you a map of rest stops where you can refill your tank.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://alistapart.com/article/thats-not-my-burnout/"&gt;https://alistapart.com/article/thats-not-my-burnout/&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Follow me on &lt;a href="http://twitter.com/_martinkr"&gt;Twitter: @martinkr&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@burntime"&gt;Alex Kulikov&lt;/a&gt; on &lt;a href="https://unsplash.com"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://modernfrontend.dev/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cH97ToOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://modernfrontend.dev/banner/banner_583-111.png" alt="Subscribe to the weekly modern frontend development newsletter" width="583" height="111"&gt;&lt;/a&gt;&lt;/p&gt;




</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>A Brief Introduction to Hotwire</title>
      <author>Akshay Khot</author>
      <pubDate>Mon, 03 Jan 2022 16:53:38 +0000</pubDate>
      <link>https://dev.to/software_writer/a-brief-introduction-to-hotwire-5fja</link>
      <guid>https://dev.to/software_writer/a-brief-introduction-to-hotwire-5fja</guid>
      <description>&lt;p&gt;This post introduces &lt;a href="https://hotwired.dev/"&gt;Hotwire&lt;/a&gt;, the suite of front-end frameworks shipped with Rails 7. It starts with a brief overview of the existing approaches to building web applications, introduces Hotwire, and wraps up with a short description of the different sub-frameworks that make Hotwire. We'll also see how these frameworks fit together to provide a cohesive solution for the front-end ecosystem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#traditional-web-architecture"&gt;
  &lt;/a&gt;
  Traditional Web Architecture
&lt;/h3&gt;

&lt;p&gt;To understand Hotwire, we first need to know how a typical request-response cycle works when a browser requests a web page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LdMwrQqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6b0dpnuw924do8rmb71.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LdMwrQqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6b0dpnuw924do8rmb71.png" alt="original web architecture" width="767" height="330"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you go to a website in the browser or click a link on a page, it makes a GET request to the server, which sends an HTML response to the requesting browser. The browser then parses the HTML text and displays the web page.&lt;/p&gt;

&lt;p&gt;The advantage of this simple architecture is that most of the application logic stays on the back-end, where you're free to choose any language you like, including JavaScript. When you need some client-side interactivity, you use some JavaScript to get the job done. The page loads faster, as the browser only renders an HTML response without loading and parsing big JavaScript files.&lt;/p&gt;

&lt;p&gt;However, a disadvantage of traditional web applications is that the browser reloads the whole page when you click a link, throwing away the existing HTML. It also fetches the assets listed in the HTML, such as JavaScript, CSS, and images again.&lt;/p&gt;

&lt;p&gt;Now, these assets are cached on the browser most of the time, which makes this process relatively fast, but the basic idea remains the same. The browser has to parse and interpret the whole HTML again. So the web application doesn't get a native application-like feeling. It still feels like a website.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#single-page-applications"&gt;
  &lt;/a&gt;
  Single Page Applications
&lt;/h3&gt;

&lt;p&gt;This was the original web architecture (that made the web popular and successful), and many web applications still work that way. However, a new category of web applications became popular in the last ten years, known as Single-Page Applications, or SPAs for short. These applications make heavy use of JavaScript, using frameworks like React, Vue, or Ember.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The original page that first loads contains all the JavaScript to make the application work, and it behaves like a desktop application. Hence these websites are called Single-Page Applications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Instead of fetching an HTML response from the server, these JavaScript frameworks ask for the JSON data, interpreting and rendering the JSON on the front-end. The browser doesn't have to reload the whole page; JavaScript does all the work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ab3yV4re--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9zy7yukjzcs4d4gpp58.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ab3yV4re--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9zy7yukjzcs4d4gpp58.png" alt="Single-Page Applications" width="725" height="312"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An example is the &lt;a href="https://discuss.rubyonrails.org/"&gt;Rails forum&lt;/a&gt; powered by &lt;a href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt;, a Single Page Application. When you click on a message on the forum, the browser doesn't reload the whole page, unlike a link on the MDN documentation &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML"&gt;page&lt;/a&gt;.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Single Page Applications get a lot of their speed and responsiveness from not constantly reloading the browser, tearing down the application process, only to reinitialize it on the very next page.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages of SPAs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SPAs have a few disadvantages, such as when you first load the application, it is slow, as you have to load a big JavaScript bundle. To solve that, you have to compress and link together all JavaScript using a bundling tool like Webpack, which is not easy.&lt;/p&gt;

&lt;p&gt;Also, you might have to duplicate the view templates both on the front-end and back-end. Managing and sharing links also becomes tricky, as you are always on the same page. SPAs are also not very SEO - friendly. As Barry Adams explains in his &lt;a href="https://medium.com/@badams/another-very-late-response-youre-confusing-googlebot-the-crawler-with-caffeine-google-s-b9ef24d81524"&gt;post&lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What happens when you use React without server-side rendering is that the crawler halts on the very first page because it can‚Äôt see any hyperlinks to follow. It sends the page to the indexer, which then has to render the page and extracts the hyperlinks, which will then be added to the crawler‚Äôs queue. Then the crawler will eventually crawl the next set of pages, and again will stop there because all the links are invisible until the JavaScript is rendered. So it has to wait for the indexer to come back with a new set of URLs to crawl. Etc.&lt;/p&gt;

&lt;p&gt;It makes the crawl process incredibly slow and inefficient.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In my experience, most of these "modern" apps are fragile, poorly implemented, have terrible first-load times, don't work well with the browser's back and forward buttons, and cause a bad user experience.&lt;/p&gt;

&lt;p&gt;To be fair, Single Page Applications do try to address these concerns using various techniques, but that's a big topic in itself. Some SPAs are even a pleasure to use, especially if implemented well. A good example is &lt;a href="https://www.discourse.org/"&gt;Discourse&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To be honest, many web applications just don't need the SPA technology, with big, honking JavaScript frameworks and specialized teams. They'd work just as well, if not better, using plain, boring, old web architecture. As Stefan Tilkov explains in his 2016 post &lt;a href="https://www.freecodecamp.org/news/why-i-hate-your-single-page-app-f08bb4ff9134/"&gt;Why I hate your Single Page App&lt;/a&gt;, &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Maybe your single page app is different, but the ones that I know break most of my browser‚Äôs features, such as the back and forward buttons, page refresh, bookmarking, sending a link, or opening a link in a new window or tab. They offer no way to link to something that I look at. (Oh, I know there are exceptions to this rule, but they typically require effort ‚Äî a lot more than many developers are prepared to invest). They are bloated and slow to load, even though the actual information they display and the interaction they offer is very simple.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After working with and using many poorly implemented SPAs, I couldn't agree more. I was so frustrated with the front-end and the onslaught of JavaScript frameworks over the past decade, I almost gave up on JavaScript and tried to stick to the back-end until I came across Hotwire.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introducing-hotwire"&gt;
  &lt;/a&gt;
  Introducing Hotwire
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://hotwired.dev/"&gt;Hotwire&lt;/a&gt; stands for &lt;em&gt;HTML over the wire&lt;/em&gt;. It is a collection of techniques that tries to get the best of both worlds, keeping the original, simple web architecture of sending HTML over the wire, while not losing the performance benefits of Single Page Applications.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9NWT699k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8kh07z5xu01ivgr25by.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9NWT699k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8kh07z5xu01ivgr25by.png" alt="Hotwire" width="880" height="596"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now I've been playing with Hotwire for the past few days, and working on a Hotwire application is just fun. There's no complexity associated with setting up the framework like React or having to configure Webpack, which I never enjoyed. &lt;/p&gt;

&lt;p&gt;You write Ruby and as little JavaScript as possible, and your application just works. It's also much simpler and easier to reason about and understand the whole application instead of maintaining separate front-end and back-end teams.&lt;/p&gt;

&lt;p&gt;Hotwire is not a single framework; it's a suite of different frameworks. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Turbo&lt;/strong&gt; uses different techniques to reduce the amount of JavaScript most web applications have to write. This is the most important framework of Hotwire.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Stimulus&lt;/strong&gt;, a JavaScript framework when you absolutely need to use JavaScript.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Strada&lt;/strong&gt; (not yet released) works with native applications, making it easy to progressively level-up web interactions with native replacements.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Turbo uses the following techniques to provide a SPA-like experience, while still keeping the simplicity of traditional web applications, i.e. sending HTML over the wire. We will learn about them in the following posts in this series.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Turbo Drive&lt;/strong&gt; accelerates links and form submissions. It listens for link clicks or form submissions, performs them in the background, and updates the page without a full reload.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Turbo Frames&lt;/strong&gt; divides pages into independent contexts called frames (not &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe"&gt;iframe&lt;/a&gt;). Turbo captures link clicks and form submissions inside a frame, automatically updating the frame contents after receiving a response.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Turbo Streams&lt;/strong&gt; delivers page changes over WebSocket, SSE, or in response to form submissions using just HTML and a set of CRUD-like actions.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If all these different frameworks and techniques are already sounding confusing, &lt;strong&gt;don't worry&lt;/strong&gt;. You won't be using all of them equally, all the time. Here's a diagram that might help you understand how it all fits together.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eDqVEDMD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdgmp7x6pc087nhj9ucz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eDqVEDMD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdgmp7x6pc087nhj9ucz.png" alt="Hotwire stack" width="771" height="646"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Turbo makes the majority of Hotwire.&lt;/strong&gt; When you need to work with some JavaScript, you use &lt;strong&gt;Stimulus&lt;/strong&gt;, and you only need &lt;strong&gt;Strada&lt;/strong&gt; when your application needs to have native apps on Android and iOS.&lt;/p&gt;

&lt;p&gt;Inside Turbo, &lt;strong&gt;Turbo Drive&lt;/strong&gt; will satisfy most of your needs of fast performance. When you need additional responsiveness, you use &lt;strong&gt;Turbo Frames&lt;/strong&gt;, and finally, a few cases where you need to bring your application alive, such as sending live updates from the server, you will use &lt;strong&gt;Turbo Streams&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We will learn about all these techniques in future posts (as I learn them myself üòÖ ). For now, I hope this brief introduction helped you get a big-picture overview of Hotwire and understand how different parts of it fit together to provide a cohesive solution for the front-end ecosystem. &lt;/p&gt;

&lt;p&gt;Let me know what you think in the comments. I look forward to your feedback. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>rails</category>
      <category>hotwire</category>
    </item>
    <item>
      <title>Testing Stubbed Functionality in Code</title>
      <author>bob.ts</author>
      <pubDate>Mon, 03 Jan 2022 16:48:56 +0000</pubDate>
      <link>https://dev.to/rfornal/testing-stubbed-functionality-in-code-15bj</link>
      <guid>https://dev.to/rfornal/testing-stubbed-functionality-in-code-15bj</guid>
      <description>&lt;p&gt;One of the first things I do when writing Unit Tests is to stub out &lt;code&gt;console.debug&lt;/code&gt; and &lt;code&gt;console.log&lt;/code&gt;. I do this on the off chance that I leave one in the code. This way, there aren't extraneous console's showing in the terminal when the tests are run.&lt;/p&gt;

&lt;p&gt;Don't get me wrong. I do not do this to be lazy. I take good care of my code and generally do not leave &lt;code&gt;console.log&lt;/code&gt; all over the place. I use this code to keep things clean in the display, pure and simple.&lt;/p&gt;

&lt;p&gt;Pure and simple that is until I realized that I had a new case for a slightly improved form of my stubbed-code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#original-code"&gt;
  &lt;/a&gt;
  Original Code
&lt;/h2&gt;

&lt;p&gt;Here is the original code in the &lt;code&gt;helper.ts&lt;/code&gt; file ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;beforeAll&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;spyOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;debug&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;and&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stub&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;spyOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;log&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;and&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stub&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see there is nothing more done here than stubbing out the two console options.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;karma.conf.js&lt;/code&gt;, this is included ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="na"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src/app/shared/_spec-tools/helper.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#handling-code"&gt;
  &lt;/a&gt;
  Handling Code
&lt;/h2&gt;

&lt;p&gt;I mentioned in the title, handling console while testing and the code below is a simple endpoint for code I intend to write as this function gets fully fleshed out (it's a stub, conceptually ... not a Unit Test sub). I am generating the visuals that will eventually be used, but there is no backend to connect to at this point in time.&lt;/p&gt;

&lt;p&gt;I am using &lt;code&gt;console.log&lt;/code&gt; in this case to ensure I understand the values passed in and available that I intend to use some time in the future.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;handleFunctionality&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At the same time ...&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I don't want this code displaying a &lt;code&gt;console.log&lt;/code&gt; every time tests are run.&lt;/li&gt;
&lt;li&gt;I do want a Unit Test against this function so that when I do change the code, this test will fail "spectacularly" as Test Driven Development says it should.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#improved-code"&gt;
  &lt;/a&gt;
  Improved Code
&lt;/h2&gt;

&lt;p&gt;So, here's the code that ensures the stubs are in place AND calls are reset after each test is run.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;consoleDebug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;consoleLog&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;beforeAll&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;consoleDebug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;spyOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;debug&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;consoleDebug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;and&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stub&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;consoleLog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;spyOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;log&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;consoleLog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;and&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stub&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;afterEach&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;consoleDebug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;consoleLog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;calls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;I've always blocked &lt;code&gt;console.log&lt;/code&gt; when my Unit Tests run.&lt;/li&gt;
&lt;li&gt;This scenario showed me that the Unit Tests can be used to ensure the "stubbed" code will break the tests when the real functionality gets put in place.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>testing</category>
      <category>frontend</category>
      <category>typescript</category>
      <category>angular</category>
    </item>
    <item>
      <title>DevObserver - App You Should Have!</title>
      <author>Eduard Pochtar üë®‚Äçüíª</author>
      <pubDate>Mon, 03 Jan 2022 16:05:59 +0000</pubDate>
      <link>https://dev.to/iamfrntdv/devobserver-app-you-should-have-this-app-3df0</link>
      <guid>https://dev.to/iamfrntdv/devobserver-app-you-should-have-this-app-3df0</guid>
      <description>&lt;p&gt;DevObserver is the app I was working on for a while and finally it has been released on the AppStore. &lt;/p&gt;

&lt;p&gt;DevObserver is a mobile app for developers where anyone can stay tuned with the latest news, articles, tutorial, etc. Currently it's available on the iPhone, but iPad and Android version are also coming.&lt;/p&gt;

&lt;p&gt;I also plan to share my experience of developing mobile app and it's backend. So a lot of interesting is yet to come.&lt;/p&gt;

&lt;p&gt;Download it today, it's free! &lt;a href="https://apps.apple.com/us/app/devobserver/id1575198748"&gt;AppStore&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;P.S. enjoy!&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Dkb7RYxAy9s"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>ios</category>
      <category>showdev</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>STI and multi attributes models in Rails</title>
      <author>Vladislav Kopylov</author>
      <pubDate>Mon, 03 Jan 2022 15:48:54 +0000</pubDate>
      <link>https://dev.to/kopylov_vlad/sti-and-multi-attributes-models-in-rails-12ce</link>
      <guid>https://dev.to/kopylov_vlad/sti-and-multi-attributes-models-in-rails-12ce</guid>
      <description>&lt;p&gt;Once I had a task to collect data from different landing pages to a database. The task is challenging because each web form from a landing page has different inputs and data. I figured out how to write an elegant solution in a Rails application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preparation"&gt;
  &lt;/a&gt;
  Preparation
&lt;/h2&gt;

&lt;p&gt;First, we have to create a migration to store data in DB.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CreateLandingForms&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Migration&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change&lt;/span&gt;
    &lt;span class="n"&gt;create_table&lt;/span&gt; &lt;span class="ss"&gt;:landing_forms&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt; &lt;span class="ss"&gt;:type&lt;/span&gt;
      &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;jsonb&lt;/span&gt; &lt;span class="ss"&gt;:data&lt;/span&gt;
      &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;timestamps&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The ‚Äútype‚Äù is an important attribute for STI (single table inheritance) because we will have a few models (one model for each landing page) which use the same table in DB. Rails will  automatically keep class name to the attribute.&lt;/p&gt;

&lt;p&gt;The ‚Äúdata‚Äù is an attribute with JSONB data type. Each model has a unique amount of fields. We will store the information in the attribute as JSON.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#models"&gt;
  &lt;/a&gt;
  Models
&lt;/h2&gt;

&lt;p&gt;The main model looks like that. There is nothing special. Other models will be inherited from the main model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/models/landing_form.rb&lt;/span&gt;
&lt;span class="c1"&gt;# == Schema Information&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Table name: landing_forms&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;#  id         :bigint           not null, primary key&lt;/span&gt;
&lt;span class="c1"&gt;#  data       :jsonb&lt;/span&gt;
&lt;span class="c1"&gt;#  type       :string&lt;/span&gt;
&lt;span class="c1"&gt;#  created_at :datetime         not null&lt;/span&gt;
&lt;span class="c1"&gt;#  updated_at :datetime         not null&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LandingForm&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let‚Äôs create models to collect data from different web forms. For instance, from 2 landing pages: Christmas‚Äôs landing page and Black Friday‚Äôs landing page.&lt;/p&gt;

&lt;p&gt;Here is a model for Christmas‚Äôs landing page. Attributes are full name, phone number, city, state, address and a gift you would like to receive from Santa. :-) Method &lt;code&gt;store_accessor&lt;/code&gt; helps us to collect data to the ‚Äúdata‚Äù field and work with it such typical ActiveRecord attributes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/models/landing_forms/christmas.rb&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;LandingForms&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Christmas&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;LandingForm&lt;/span&gt;
    &lt;span class="n"&gt;store_accessor&lt;/span&gt; &lt;span class="ss"&gt;:data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:full_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:phone_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:city&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:gift&lt;/span&gt;

    &lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:full_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;presence: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:phone_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;presence: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:city&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;presence: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;presence: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;presence: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:gift&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;presence: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;permitted_params&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:full_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:phone_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:city&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:address&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:gift&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next model - is a model for Black Friday‚Äôs landing page. Attributes are first name, second name and email. If there is a requirement that email must be unique, we can add custom validation for email.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/models/landing_forms/black_friday.rb&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;LandingForms&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BlackFriday&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;LandingForm&lt;/span&gt;
    &lt;span class="n"&gt;store_accessor&lt;/span&gt; &lt;span class="ss"&gt;:data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:last_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;

    &lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="ss"&gt;:by_email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;"data-&amp;gt;&amp;gt;'email' IN (?)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;presence: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:last_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;presence: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;validates&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;presence: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;

    &lt;span class="n"&gt;validate&lt;/span&gt; &lt;span class="ss"&gt;:unique_email&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;permitted_params&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:last_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="kp"&gt;private&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;unique_email&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;positive?&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;type: &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;by_email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;where&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;not&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;zero?&lt;/span&gt;

      &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;I18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'landing_forms.email_already_taken'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You see there is nothing difficult to describe behaviour. In order to prove that the validation works we will write test cases. Fortunately &lt;code&gt;store_accessor&lt;/code&gt; works best with &lt;code&gt;FactoryBot&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# spec/factories/landing_form_factory.rb&lt;/span&gt;
&lt;span class="no"&gt;FactoryBot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;# factory for one model&lt;/span&gt;
  &lt;span class="n"&gt;factory&lt;/span&gt; &lt;span class="ss"&gt;:black_friday_form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="no"&gt;LandingForms&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;BlackFriday&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;Faker&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first_name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;last_name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;Faker&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;last_name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;Faker&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Internet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;email&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# factory for another model&lt;/span&gt;
  &lt;span class="n"&gt;factory&lt;/span&gt; &lt;span class="ss"&gt;:christmas_form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="no"&gt;LandingForms&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Christmas&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;full_name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;Faker&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name_with_middle&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;phone_number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;Faker&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;PhoneNumber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;phone_number&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;city&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;Faker&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;city&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;Faker&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;state&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;Faker&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;full_address&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;gift&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;Faker&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Hipster&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sentence&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here are unit tests.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# spec/models/landing_form_spec.rb&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rails_helper'&lt;/span&gt;

&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;LandingForms&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Christmas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;type: :model&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:christmas_form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'works'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;LandingForms&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;BlackFriday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;type: :model&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:black_friday_form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'works'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'unique email validation'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;let!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:item1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:black_friday_form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s1"&gt;'email is not the same'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:item2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:black_friday_form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'is valid'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;valid?&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s1"&gt;'email is the same'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:item2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:black_friday_form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;email: &lt;/span&gt;&lt;span class="n"&gt;item1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'is not valid'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;valid?&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;attribute_names&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="kp"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:email&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="kp"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;I18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'landing_forms.email_already_taken'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#controllers"&gt;
  &lt;/a&gt;
  Controllers
&lt;/h2&gt;

&lt;p&gt;In order to receive data from a client, we write endpoints in rails-router, one endpoint for each controller.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;draw&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="ss"&gt;:api&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="ss"&gt;:v1&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="ss"&gt;:landing_forms&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="ss"&gt;:black_friday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="s1"&gt;'black_friday#create'&lt;/span&gt;
        &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="ss"&gt;:christmas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="s1"&gt;'christmas#create'&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A controller looks like that. Just one public method &lt;code&gt;create&lt;/code&gt;. We don‚Äôt need anything more.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/api/v1/landing_forms/black_friday_controller.rb&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Api&lt;/span&gt;
  &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;V1&lt;/span&gt;
    &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;LandingForms&lt;/span&gt;
      &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BlackFridayController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;
          &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;valid?&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;
            &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;json: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;success: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;json: &lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;status: :unprocessable_entity&lt;/span&gt;
          &lt;span class="k"&gt;end&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;

        &lt;span class="kp"&gt;private&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;model_params&lt;/span&gt;
          &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;permit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;model_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;permitted_params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;model_class&lt;/span&gt;
          &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;LandingForms&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;BlackFriday&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's write request test cases for the controller to prove that it works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# spec/requests/api/v1/landing_forms/black_friday_spec.rb&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'rails_helper'&lt;/span&gt;

&lt;span class="no"&gt;RSpec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;Api&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;V1&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;SubscriptionsController&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;type: :request&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s1"&gt;'#create'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;subject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="s1"&gt;'/api/v1/landing_forms/black_friday'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;params: &lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;as: :json&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s1"&gt;'email validation'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;let!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:item1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:black_friday_form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s1"&gt;'email is unique'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;first_name: &lt;/span&gt;&lt;span class="no"&gt;Faker&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;last_name: &lt;/span&gt;&lt;span class="no"&gt;Faker&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;email: &lt;/span&gt;&lt;span class="no"&gt;Faker&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Internet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;email&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;

        &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'renders success'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
          &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_http_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s1"&gt;'success'&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s1"&gt;'email is the same'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;let&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;first_name: &lt;/span&gt;&lt;span class="no"&gt;Faker&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;last_name: &lt;/span&gt;&lt;span class="no"&gt;Faker&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;email: &lt;/span&gt;&lt;span class="n"&gt;item1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;email&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;

        &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s1"&gt;'returns errors'&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
          &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;have_http_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:unprocessable_entity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
          &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="kp"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;I18n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'landing_forms.email_already_taken'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voil√†! It works. Now it‚Äôs super easy to collect data from one more web form. We need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new model and describe all attributes and validations&lt;/li&gt;
&lt;li&gt;Create a new endpoint in the route and a controller&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>json</category>
    </item>
    <item>
      <title>Learn Javascript __Array</title>
      <author>Zahab Kakar</author>
      <pubDate>Mon, 03 Jan 2022 15:45:44 +0000</pubDate>
      <link>https://dev.to/zahab/learn-javascript-array-1a1</link>
      <guid>https://dev.to/zahab/learn-javascript-array-1a1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#array"&gt;
  &lt;/a&gt;
  Array
&lt;/h2&gt;

&lt;p&gt;You may know that a variable can store only a value at a time, for example,&lt;br&gt;&lt;br&gt;
(  var student = "jack", )this is totally fine and we may use it many times while building a project, however, sometimes it is required to collect many values in a single variable like a list of students' names, this is where we can use the Array concept. &lt;/p&gt;

&lt;p&gt;The array is a single variable that stores a list of values and each element is specified by a single index.&lt;br&gt;
The array syntaxt is &lt;strong&gt;const array_name = [item1, item2, ...];&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Zahab&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ada Lovelace&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;everthing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also create an array using &lt;strong&gt;new&lt;/strong&gt; keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Zahab&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ada Lovelace&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;everthing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The recommended method for creating Array is the first one and in most of the programs you see the array is created using the first syntax.&lt;/p&gt;

&lt;p&gt;Now we know how to create an array, let's discuss how to access the elements inside the array. I have mentioned that each element in an array has an index, the index for the first element is always zero and the index for the last element is (array size-1);&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Zahab&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ada Lovelace&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="c1"&gt;//accessing the first elemnt of the array&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//  Output:  Zahab&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find the length of an array using &lt;strong&gt;length&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Zahab&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ada Lovelace&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;//array length&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//  Output:  3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's learn some array methods&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#array-methods"&gt;
  &lt;/a&gt;
  Array Methods
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pop()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The pop() method removes the last element of an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;students&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;James&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Robert&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;students&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="nx"&gt;students&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;students&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Output: 
[ 'Jack', 'James', 'Robert', 'John' ]
[ 'Jack', 'James', 'Robert' ]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;shift()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The shift() method removes the first element from an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
 &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;students&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;James&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Robert&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;students&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;students&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;students&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Output:
[ 'Jack', 'James', 'Robert', 'John' ]
[ 'James', 'Robert', 'John' ]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;push()&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The push() method adds one or more elements to the end of an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;students&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;James&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Robert&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;students&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;students&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Zahab&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Kakar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;students&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Output: 
[ 'Jack', 'James', 'Robert', 'John' ]
[ 'Jack', 'James', 'Robert', 'John', 'Zahab', 'Kakar' ]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;** unshift()**&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The unshift method adds one or more elements to the beginning of an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;students&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;James&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Robert&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;students&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;students&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unshift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Zahab&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Kakar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;students&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Output:
[ 'Jack', 'James', 'Robert', 'John' ]
[ 'Zahab', 'Kakar', 'Jack', 'James', 'Robert', 'John' ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;length&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The length returns the number of elements in an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;students&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;James&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Robert&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;students&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;students&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[ 'Jack', 'James', 'Robert', 'John' ]
4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;splice()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The splice() method is used to add new elements to an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;students&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;James&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Robert&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;students&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;students&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Zahab&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Kakar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;students&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Output:
[ 'Jack', 'James', 'Robert', 'John' ]
[ 'Jack', 'James', 'Zahab', 'Kakar', 'John' ]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we said before, this method is used to add elements into an array, however, we must indicate that where the new elements should be added. In the above example, 2 indicates the index number where the new elements should be placed and 1 shows the number of elements that should be deleted, as we mentioned 1 element should be deleted, we do not have the 'Robert' in the second array.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;concat()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The contact method is used to creates a new array by concatenating or merging existing arrays.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;students&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;James&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rober&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;students&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myFriends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jennifer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mary&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Patricia&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myFriends&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;allNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;students&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myFriends&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;allNames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Output:
[ 'Jack', 'James', 'Rober', 'John' ]
[ 'Jennifer', 'Mary', 'Patricia' ]
[ 'Jack', 'James', 'Rober', 'John', 'Jennifer', 'Mary', 'Patricia' ]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;slice()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt; This method slices out a part of an array starting from mentioned array element index.&lt;/li&gt;
&lt;li&gt; Slice can have two arguments, which indicate the starting and up to (but not including) the end argument.&lt;/li&gt;
&lt;li&gt;This method also accept negative numbers.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;students&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;James&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rober&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;students&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;newStudent&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;students&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newStudent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Output:
[ 'Jack', 'James', 'Rober', 'John' ]
[ 'John' ]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;students&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;James&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rober&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;students&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;newStudent&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;students&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newStudent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Output:
[ 'Jack', 'James', 'Rober', 'John' ]
[ 'James', 'Rober' ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;students&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;James&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rober&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;students&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

 &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;newStudent&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;students&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newStudent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[ 'Jack', 'James', 'Rober', 'John' ]
[ 'John' ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#sorting-arrays"&gt;
  &lt;/a&gt;
  Sorting Arrays
&lt;/h3&gt;

&lt;p&gt;You can sort an array using the sort() method alphabetically.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Zahab&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ada Lovelace&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;names&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Output: [ 'Ada Lovelace', 'JavaScript', 'Zahab' ]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's sort the numbers array using sort method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Output: [ 12, 30, 9 ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see that the output is &lt;strong&gt;wrong&lt;/strong&gt;, the right output should be [9,12,30]. But here the javaScript only evaluated the first number, so in 12 and 30, it just checked the 1 and 3.&lt;/p&gt;

&lt;p&gt;To solve this we can use the bellow function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Output: [ 9, 12, 30 ]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That is it for this article. I hope you found this article useful, if you need any help please let me know in the comment section.&lt;/p&gt;

&lt;p&gt;Feel free to contact me on &lt;a href="https://twitter.com/zahab_k/"&gt;Twitter&lt;/a&gt; &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Conversion Rate Optimisation [üéØ EP0: Series introduction and posts for the year! üìà]</title>
      <author>InHuOfficial</author>
      <pubDate>Mon, 03 Jan 2022 15:41:19 +0000</pubDate>
      <link>https://dev.to/inhuofficial/conversion-rate-optimisation-ep0-series-introduction-and-posts-for-the-year--2i03</link>
      <guid>https://dev.to/inhuofficial/conversion-rate-optimisation-ep0-series-introduction-and-posts-for-the-year--2i03</guid>
      <description>&lt;p&gt;A real passion of mine that is often overlooked.&lt;/p&gt;

&lt;p&gt;People spend so much time driving visitors to their site, only to waste the opportunity with poor UX and bad site structure / design.&lt;/p&gt;

&lt;p&gt;Most of the UX stuff out there is "pretty", but very few people who call themselves UX experts actually focus on what is important, the user journey and "reducing friction".&lt;/p&gt;

&lt;p&gt;In this mega series I will be covering what research tells us will help conversions, along with effective A / B testing (and the things you don't &lt;em&gt;need&lt;/em&gt; to A / B test and can just implement if you haven't already!).&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#part-of-my-year-of-the-series"&gt;
  &lt;/a&gt;
  Part of my "year of the series"
&lt;/h2&gt;

&lt;p&gt;This is one of 4 series I am writing this year, you can see the other series here:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/my-writing-stats-for-2021-best-time-to-post-on-dev-and-plans-for-2022-2023-over-250-articles-planned-557l" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;My writing stats for 2021, best time to post on DEV and plans for 2022-2023 [over 250 articles planned]&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial „Éª Jan 3 „Éª 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#writing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#1kto1mil&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#what-will-you-get-out-of-this-series"&gt;
  &lt;/a&gt;
  What will you get out of this series?
&lt;/h2&gt;

&lt;p&gt;In depth looks at techniques and tricks to monitor, track and improve your conversion rate both on site and via multiple channels!&lt;/p&gt;

&lt;p&gt;I will be sifting through the research and experiments people have run to show you things you can &lt;strong&gt;definetely&lt;/strong&gt; implement without A / B testing and the things you need to test for yourself! &lt;/p&gt;

&lt;p&gt;Finally I will be running some experiments of my own to help me build a CRO methodology that you can steal for your own site!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-am-i-writing-this-series"&gt;
  &lt;/a&gt;
  Why am I writing this series?
&lt;/h2&gt;

&lt;p&gt;I am building a page builder / CMS - that is the ultimate goal with all of these articles and series I am writing this year, essentially I am writing guidance for my own project!&lt;/p&gt;

&lt;p&gt;As I want this CMS to be designed for professional bloggers, marketers etc. then I need to make sure I give them the tools they need to maximise their returns!&lt;/p&gt;

&lt;p&gt;In order to build those tools I first have to understand all of the moving parts though and know which features are "essential" and which are "nice to haves"!&lt;/p&gt;

&lt;p&gt;It is also useful for me personally as I apply tips and tricks to my own articles and site to increase engagement and get people to sign up to my newsletter etc. as part of my long term goals!&lt;/p&gt;

&lt;p&gt;Although I know a decent amount about the subject it is also an excuse for me to do a load of research and look at techniques I may have ignored in the past to further my knowledge!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ok-it-sounds-interesting-what-will-the-series-cover"&gt;
  &lt;/a&gt;
  Ok it sounds interesting, what will the series cover?
&lt;/h2&gt;

&lt;p&gt;Here is the current draft list of articles (unordered):&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Item&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Colour theory&lt;/td&gt;
&lt;td&gt;Emotions and meaning, beware differences in different cultures, men vs women on colour preferences (bright bold colours for men, soothing and subtle shades for women)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Power Words&lt;/td&gt;
&lt;td&gt;List of "power words" and phrases that motivate buyers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Andy Bound's "A, B, C" method&lt;/td&gt;
&lt;td&gt;Afters, Build Confidence, Close&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Writing for skimmers (nobody reads your stuff)&lt;/td&gt;
&lt;td&gt;Headings, bulleted lists, quotes / hero sections&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Say it with pictures&lt;/td&gt;
&lt;td&gt;Where people are looking, the importance of faces, stock photography that doesn't suck, graphics and vector images&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Long form vs short form copy&lt;/td&gt;
&lt;td&gt;Pros and cons of both and when to use each plus SEO benefits of longer form copy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ask questions&lt;/td&gt;
&lt;td&gt;Higher click through rates / engagements for Ad copy / email subject lines&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reading age of a 12 year old&lt;/td&gt;
&lt;td&gt;avoiding use of jargon and complex words (and how to deal with it if it is unavoidable)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Optimising Headings and titles&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Gated content&lt;/td&gt;
&lt;td&gt;Provide value in exchange for action or an email address, eBooks, Resources, white papers and "bonus material"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;multiple touch points&lt;/td&gt;
&lt;td&gt;It is said that you need to have 12 different touch points before someone will trust your brand / make a significant purchase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Congruency&lt;/td&gt;
&lt;td&gt;Allow people to switch devices and content consumption methods&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Does dark mode actually help?&lt;/td&gt;
&lt;td&gt;Exploring whether dark mode is actually preferred by the majority of people and how to implement it properly&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Deliberate complexity&lt;/td&gt;
&lt;td&gt;Sometimes you **want** to make a process more difficult to increase lead quality, how do we make sure we get the balance right&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reduce form friction&lt;/td&gt;
&lt;td&gt;Remove unnecessary fields, explain why you need information that may be sensitive&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Fancy vs plain&lt;/td&gt;
&lt;td&gt;Sometimes having a simpler site converts better than a modern one, how do you find out without multiple redesigns?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Thank you and confirmation pages&lt;/td&gt;
&lt;td&gt;Don't miss an opportunity, give a bonus item that is unexpected to make customers smile and increase the chance of creating an advocate.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Should you have a phone number&lt;/td&gt;
&lt;td&gt;Trust, conversions, etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;A logo ticker / adding logos to your home page&lt;/td&gt;
&lt;td&gt;Is it a good idea, does it build trust?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sliders / Carousels - time to ditch them?&lt;/td&gt;
&lt;td&gt;Does a carousel actually help, does it just slow your page down? Also "banner blindness"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Background video&lt;/td&gt;
&lt;td&gt;Video is great, but background video is a waste of time and reduces conversions. How to use video effectively&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Marking fields as optional&lt;/td&gt;
&lt;td&gt;Make it clear which fields are optional and required, if they are optional then do you even need them? Pros and Cons&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;How long should free trials be?&lt;/td&gt;
&lt;td&gt;30 days, 14 days (kiss metrics study)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Product image size on ecommerce sites&lt;/td&gt;
&lt;td&gt;Larger image or "hover to zoom", which is better&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Customer feedback is 10 times more valuable than a/b testing&lt;/td&gt;
&lt;td&gt;Ask them what you are doing right and wrong, why they didn't complete a purchase (if you have their info on an abandoned cart) etc. Also how to get customer feedback (phrasing, reward etc.)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Monitor your search bar&lt;/td&gt;
&lt;td&gt;See what people are searching for, make adjustments to categories, product names and descriptions etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Play around with pricing&lt;/td&gt;
&lt;td&gt;Lower doesn't necessarily mean better, random looking amounts (127 vs 129) etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Long Term thinking vs short term thinking&lt;/td&gt;
&lt;td&gt;How KPIs need to be carefully crafted, no use adding 20% customers a month if you reduce their lifetime value by 50%!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pre-landing CRO&lt;/td&gt;
&lt;td&gt;Optimise your campaigns to get better prospects to the site in the first place&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Heatmap tools and scroll monitoring&lt;/td&gt;
&lt;td&gt;Know where people are clicking and where they abandon pages, it can be anonymous too!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Monitor what drives traffic&lt;/td&gt;
&lt;td&gt;Does a specific keyword drive high quality traffic, optimise the page around that keyword to reassure people they are in the right place&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reassurance is sometimes off-putting&lt;/td&gt;
&lt;td&gt;"We will never spam you", "We value your privacy", be careful whether you are actually adding doubt!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Small commitments on the path to big commitments&lt;/td&gt;
&lt;td&gt;Get someone to share an article before signing up to your newsletter, get them to fill out their details for a detailed review / comparison before making a big purchase etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Call To Actions&lt;/td&gt;
&lt;td&gt;Frequency, size, location on page etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Money Back Guarantees&lt;/td&gt;
&lt;td&gt;Do money back guarantees improve your conversions, what length of time etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Should you have a free tier on your SAAS product?&lt;/td&gt;
&lt;td&gt;Does a free tier actually cause more harm than good with people frustrated at features they wish they had or scared they will get "cut off" if they go over a threshold&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;You need a blog&lt;/td&gt;
&lt;td&gt;Blogs breed trust and traffic, how to keep it on message and convert visitors to customers / into the sales process&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tell stories&lt;/td&gt;
&lt;td&gt;Make your copy engaging&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Fear of missing out&lt;/td&gt;
&lt;td&gt;"only 2 left", "only available at this price for 24 hours", see which work and don't work&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Social Proof&lt;/td&gt;
&lt;td&gt;Testimonials, case studies, ratings etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tracking and measuring Conversion Rates&lt;/td&gt;
&lt;td&gt;The right metrics, what to measure, how to measure etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Perceived page loading time&lt;/td&gt;
&lt;td&gt;1 second loses 10% of visitors, conversion increases etc,&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Call to action wording&lt;/td&gt;
&lt;td&gt;"Add to cart" vs "buy now" vs "start your order" etc. The balance between assertive and unthreatening&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The "F" pattern&lt;/td&gt;
&lt;td&gt;position of things on a page, how people read / scan content&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Subtle animation&lt;/td&gt;
&lt;td&gt;Draw attention to key things without being too distracting&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;"Before you leave"&lt;/td&gt;
&lt;td&gt;Do they work or do they annoy people!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Modal popups&lt;/td&gt;
&lt;td&gt;How long before they show, do they work for you, what should they say&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dark patterns to avoid&lt;/td&gt;
&lt;td&gt;Tiny "no thankyou" text, popups, cookie acceptance etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;the 3 click rule&lt;/td&gt;
&lt;td&gt;Simplify navigation so that people can get anywhere on the site in 3 clicks (actually about flattening the site structure etc.)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multiple ways to pay&lt;/td&gt;
&lt;td&gt;Paypal, credit card, debit card, direct debit if appropriate, bank transfer, crypto even!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;International sites&lt;/td&gt;
&lt;td&gt;Automatic currency conversion, multi language, aware of cultural faux pas with images and writing etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Live chat / multiple contact methods&lt;/td&gt;
&lt;td&gt;Phone line, live chat, email / contact form / WhatsApp¬† etc. Give people options&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Delivery times&lt;/td&gt;
&lt;td&gt;The faster the better for most things, offer different shipping options and let people choose a delivery date if possible, pick a better courier who gives slots during the day and make it clear that you offer this&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Show delivery costs early&lt;/td&gt;
&lt;td&gt;Don't annoy customers with delivery costs added at the last stage of checkout, display them clearly on the site or include them in the price, offer free delivery over a certain amount&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Retargeting&lt;/td&gt;
&lt;td&gt;Should you still do it with privacy concerns? Does it work, etc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VIP club&lt;/td&gt;
&lt;td&gt;For regular customers offer VIP discounts in exchange for a monthly fee or commitment, give people a reason to keep coming back!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Key partners&lt;/td&gt;
&lt;td&gt;When people make a purchase partner with firms who have the same customer base but do not compete and create special offers as a bonus, can also be a great additional income / upsell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;After first sale follow up&lt;/td&gt;
&lt;td&gt;Follow up for a review, promote special offers, engage in fun ways, basically turn a single purchase into multiple purchases and increase the lifetime value of a customer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Increase trust (especially for high cost items)&lt;/td&gt;
&lt;td&gt;Security seals such as verisign, phone numbers, reduce errors on your site, grammar, punctuation etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Build a better 404 page&lt;/td&gt;
&lt;td&gt;404s happen, make sure there is a search box, some related products, top sellers etc. give people a reason to stay if they arrived here from search engines / external links (oh and stop making "404" the largest text, nobody knows that it means!)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Familiar patterns&lt;/td&gt;
&lt;td&gt;Don't try and reinvent the wheel, put navigation and search in the places people expect to find them&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Have a HTML sitemap&lt;/td&gt;
&lt;td&gt;If people can't find what they are searching for direct them to a well structured HTML sitemap in case they are looking for the wrong term etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reduce the number of options&lt;/td&gt;
&lt;td&gt;On pricing pages for services keep the options simple and easy to understand, try and direct people to your most profitable offering. You may even introduce an offering that appears poor value for money on purpose that you don't actually want people to buy!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Don't use voucher codes&lt;/td&gt;
&lt;td&gt;Voucher codes and discount codes drive people away from your site and make them think that they are not getting the best deal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Socially Responsible? Shout about it&lt;/td&gt;
&lt;td&gt;If you are green, donate to charity, buy only from your Country etc. then make sure you say it, you can even make it part of your identity and split your marketing to target certain people&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Progress bars on multi step forms&lt;/td&gt;
&lt;td&gt;make sure that people know where they are in a process, experiment with shorter sections early on longer multi step forms to get people "invested" in completing the process, or try reversing it to leave people with the impression of an easy process&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;When to ask people to sign up&lt;/td&gt;
&lt;td&gt;Check out as guest, then asked them to sign up later vs sign up for account before buying etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Should you have a FAQ page&lt;/td&gt;
&lt;td&gt;Does it help or hinder your conversions, concentrate on answering questions as part of your copy, if you do have a FAQ page make sure most questions are actually covered and well explained, make sure other ways to ask questions that aren't answered are highlighted such as live chat and phone numbers!&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;h2&gt;
  &lt;a href="#cool-i-am-looking-forward-to-it-what-should-i-do-now"&gt;
  &lt;/a&gt;
  Cool, I am looking forward to it, what should I do now?
&lt;/h2&gt;

&lt;p&gt;First thing is first, you should &lt;strong&gt;bookmark this page&lt;/strong&gt; as it will serve as the "index" for the series so you can quickly jump between  articles (I will link to each article in the above table as they are released).&lt;/p&gt;

&lt;p&gt;Then &lt;a href="https://dev.to/inhuofficial"&gt;follow me on DEV.to&lt;/a&gt; if you don't already!&lt;/p&gt;

&lt;p&gt;After that the only other thing you should do is &lt;a href="https://twitter.com/intent/follow?screen_name=InHuOfficial"&gt;follow me on Twitter&lt;/a&gt; as I will be releasing some bonus material over there and upping my Twitter game too this year!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;I hope that this series will highlight where most UX advice is pretty rubbish and how you can optimise your own site and content for maximum conversions!&lt;/p&gt;

&lt;p&gt;Above all though I hope that people will chip in with ideas and things that have worked (or not worked) for them so I can explore and test those also!&lt;/p&gt;

&lt;p&gt;Hopefully over the next few months I will have a complete guide to CRO that people who find it interesting can follow and implement!&lt;/p&gt;




&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;


&lt;center&gt;&lt;strong&gt;I hope you have a fantastic 2021!&lt;/strong&gt;&lt;/center&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;




</description>
      <category>cro</category>
      <category>webdev</category>
      <category>writing</category>
      <category>1kto1mil</category>
    </item>
    <item>
      <title>WCAG in plain English [ü¶æ EP0: Series introduction and posts for the year! ü¶æ]</title>
      <author>InHuOfficial</author>
      <pubDate>Mon, 03 Jan 2022 15:41:06 +0000</pubDate>
      <link>https://dev.to/inhuofficial/wcag-in-plain-english-ep0-series-introduction-and-posts-for-the-year--nfi</link>
      <guid>https://dev.to/inhuofficial/wcag-in-plain-english-ep0-series-introduction-and-posts-for-the-year--nfi</guid>
      <description>&lt;p&gt;WCAG is hard to read and complicated and it puts a lot of developers off when talking about making their applications accessible.&lt;/p&gt;

&lt;p&gt;In this series I am going to try and simplify things down and offer a different approach to WCAG that is hopefully more accessible!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#part-of-my-year-of-the-series"&gt;
  &lt;/a&gt;
  Part of my "year of the series"
&lt;/h2&gt;

&lt;p&gt;This is one of 4 series I am writing this year, you can see the other series here:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/my-writing-stats-for-2021-best-time-to-post-on-dev-and-plans-for-2022-2023-over-250-articles-planned-557l" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;My writing stats for 2021, best time to post on DEV and plans for 2022-2023 [over 250 articles planned]&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial „Éª Jan 3 „Éª 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#writing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#1kto1mil&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#what-is-the-series-about"&gt;
  &lt;/a&gt;
  What is the series about?
&lt;/h2&gt;

&lt;p&gt;This came about because whenever I start talking about accessibility I get the same responses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is complicated&lt;/li&gt;
&lt;li&gt;WCAG makes no sense!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And you know what people are (kind of) right!&lt;/p&gt;

&lt;p&gt;If WCAG was easier to understand I think more people would embrace accessibility!&lt;/p&gt;

&lt;p&gt;And I am arrogant enough to believe that I am the one to solve this problem! ü§£&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-will-you-get-out-of-this-series"&gt;
  &lt;/a&gt;
  What will you get out of this series?
&lt;/h2&gt;

&lt;p&gt;A complete run through of the WCAG "rules" and guidance covering:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;examples of code / markup&lt;/strong&gt;, &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;simplified explanations of the guidance&lt;/strong&gt; and none of the "fluffy" stuff that causes confusion (where the W3 team attempt to accommodate rare edge cases)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;who it affects&lt;/strong&gt; (user story and why it matters)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;who's responsibility&lt;/strong&gt; it is in a team&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To achieve this I will be using the following structure in each article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Introduction (what does this criterion cover / summary)&lt;/li&gt;
&lt;li&gt;Contents&lt;/li&gt;
&lt;li&gt;Why is this criterion important

&lt;ul&gt;
&lt;li&gt;user story&lt;/li&gt;
&lt;li&gt;relevant "temporary disabilities" such as broken arm, direct sunlight etc.&lt;/li&gt;
&lt;li&gt;Disability categories it impacts (cognitive, visual, hearing etc.)&lt;/li&gt;
&lt;li&gt;General UX improvements fixing this item brings&lt;/li&gt;
&lt;li&gt;Business Impact (for persuading business owners / stakeholders)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;How to test whether your site passes this criterion

&lt;ul&gt;
&lt;li&gt;Manually&lt;/li&gt;
&lt;li&gt;Automated&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;How to fix any problems

&lt;ul&gt;
&lt;li&gt;General guidance&lt;/li&gt;
&lt;li&gt;Code examples (for web)&lt;/li&gt;
&lt;li&gt;Design examples (if this is visual, such as contrast)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Exceptions to this criterion&lt;/li&gt;
&lt;li&gt;Additional Tips

&lt;ul&gt;
&lt;li&gt;Tricks for long term consistency&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Conclusion and further reading&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That should hopefully make the guides much easier to skim through to find what you need!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-am-i-writing-this-series"&gt;
  &lt;/a&gt;
  Why am I writing this series?
&lt;/h2&gt;

&lt;p&gt;I want to be able to point people to an article when explaining an accessibility concept to them (especially as part of &lt;a href="https://dev.to/inhuofficial/ultimate-ui-ep0-series-introduction-and-posts-for-the-year--32m6"&gt;my ultimate UI series!&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Additionally I want to make accessibility more accessible (the irony!) so that more people embrace it.&lt;/p&gt;

&lt;p&gt;Finally I am working to "get known" for accessibility within the industry for a product I am building, so this is a way to showcase my knowledge while hopefully helping the developer and designer communities!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ok-it-sounds-interesting-what-will-the-series-cover"&gt;
  &lt;/a&gt;
  Ok it sounds interesting, what will the series cover?
&lt;/h2&gt;

&lt;p&gt;All of the WCAG success criterion (including the &lt;a href="https://w3c.github.io/wcag/guidelines/22/"&gt;WCAG 2.2 draft items&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;It will also explain the conformance levels of A, AA and AAA and other terminology in the first episode of the series!&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Item&lt;/th&gt;
&lt;th&gt;SC&lt;/th&gt;
&lt;th&gt;Level&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Non-Text Content&lt;/td&gt;
&lt;td&gt;1.1.1&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Audio-only and Video-only (Prerecorded)&lt;/td&gt;
&lt;td&gt;1.2.1&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Captions (Prerecorded)&lt;/td&gt;
&lt;td&gt;1.2.2&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Audio Description or Media Alternative (Prerecorded)&lt;/td&gt;
&lt;td&gt;1.2.3&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Captions (Live)&lt;/td&gt;
&lt;td&gt;1.2.4&lt;/td&gt;
&lt;td&gt;AA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Audio Description (Prerecorded)&lt;/td&gt;
&lt;td&gt;1.2.5&lt;/td&gt;
&lt;td&gt;AA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sign Language (Prerecorded)&lt;/td&gt;
&lt;td&gt;1.2.6&lt;/td&gt;
&lt;td&gt;AAA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Extended Audio Description (Prerecorded)&lt;/td&gt;
&lt;td&gt;1.2.7&lt;/td&gt;
&lt;td&gt;AAA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Media Alternative (Prerecorded)&lt;/td&gt;
&lt;td&gt;1.2.8&lt;/td&gt;
&lt;td&gt;AAA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Audio-only (Live)&lt;/td&gt;
&lt;td&gt;1.2.9&lt;/td&gt;
&lt;td&gt;AAA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Info and Relationships&lt;/td&gt;
&lt;td&gt;1.3.1&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Meaningful Sequence&lt;/td&gt;
&lt;td&gt;1.3.2&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sensory Characteristics&lt;/td&gt;
&lt;td&gt;1.3.3&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Orientation&lt;/td&gt;
&lt;td&gt;1.3.4&lt;/td&gt;
&lt;td&gt;AA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Identify Input Purpose&lt;/td&gt;
&lt;td&gt;1.3.5&lt;/td&gt;
&lt;td&gt;AA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Identify Purpose&lt;/td&gt;
&lt;td&gt;1.3.6&lt;/td&gt;
&lt;td&gt;AAA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Use of Color&lt;/td&gt;
&lt;td&gt;1.4.1&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Audio Control&lt;/td&gt;
&lt;td&gt;1.4.2&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Contrast (Minimum)&lt;/td&gt;
&lt;td&gt;1.4.3&lt;/td&gt;
&lt;td&gt;AA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Resize text&lt;/td&gt;
&lt;td&gt;1.4.4&lt;/td&gt;
&lt;td&gt;AA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Images of Text&lt;/td&gt;
&lt;td&gt;1.4.5&lt;/td&gt;
&lt;td&gt;AA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Contrast (Enhanced)&lt;/td&gt;
&lt;td&gt;1.4.6&lt;/td&gt;
&lt;td&gt;AAA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Low or No Background Audio&lt;/td&gt;
&lt;td&gt;1.4.7&lt;/td&gt;
&lt;td&gt;AAA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Visual Presentation&lt;/td&gt;
&lt;td&gt;1.4.8&lt;/td&gt;
&lt;td&gt;AAA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Images of Text (No Exception)&lt;/td&gt;
&lt;td&gt;1.4.9&lt;/td&gt;
&lt;td&gt;AAA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reflow&lt;/td&gt;
&lt;td&gt;1.4.10&lt;/td&gt;
&lt;td&gt;AA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Non-text Contrast&lt;/td&gt;
&lt;td&gt;1.4.11&lt;/td&gt;
&lt;td&gt;AA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Text Spacing&lt;/td&gt;
&lt;td&gt;1.4.12&lt;/td&gt;
&lt;td&gt;AA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content on Hover or Focus&lt;/td&gt;
&lt;td&gt;1.4.13&lt;/td&gt;
&lt;td&gt;AA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Keyboard&lt;/td&gt;
&lt;td&gt;2.1.1&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;No Keyboard Trap&lt;/td&gt;
&lt;td&gt;2.1.2&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Keyboard (No Exception)&lt;/td&gt;
&lt;td&gt;2.1.3&lt;/td&gt;
&lt;td&gt;AAA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Character Key Shortcuts&lt;/td&gt;
&lt;td&gt;2.1.4&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Timing Adjustable&lt;/td&gt;
&lt;td&gt;2.2.1&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pause, Stop, Hide&lt;/td&gt;
&lt;td&gt;2.2.2&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;No Timing&lt;/td&gt;
&lt;td&gt;2.2.3&lt;/td&gt;
&lt;td&gt;AAA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Interruptions&lt;/td&gt;
&lt;td&gt;2.2.4&lt;/td&gt;
&lt;td&gt;AAA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Re-authenticating&lt;/td&gt;
&lt;td&gt;2.2.5&lt;/td&gt;
&lt;td&gt;AAA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Timeouts&lt;/td&gt;
&lt;td&gt;2.2.6&lt;/td&gt;
&lt;td&gt;AAA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Three Flashes or Below Threshold&lt;/td&gt;
&lt;td&gt;2.3.1&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Three Flashes&lt;/td&gt;
&lt;td&gt;2.3.2&lt;/td&gt;
&lt;td&gt;AAA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Animation from Interactions&lt;/td&gt;
&lt;td&gt;2.3.3&lt;/td&gt;
&lt;td&gt;AAA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bypass Blocks&lt;/td&gt;
&lt;td&gt;2.4.1&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Page Titled&lt;/td&gt;
&lt;td&gt;2.4.2&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Focus Order&lt;/td&gt;
&lt;td&gt;2.4.3&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Link Purpose (In Context)&lt;/td&gt;
&lt;td&gt;2.4.4&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multiple Ways&lt;/td&gt;
&lt;td&gt;2.4.5&lt;/td&gt;
&lt;td&gt;AA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Headings and Labels&lt;/td&gt;
&lt;td&gt;2.4.6&lt;/td&gt;
&lt;td&gt;AA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Focus Visible&lt;/td&gt;
&lt;td&gt;2.4.7&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Location&lt;/td&gt;
&lt;td&gt;2.4.8&lt;/td&gt;
&lt;td&gt;AAA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Link Purpose (Link Only)&lt;/td&gt;
&lt;td&gt;2.4.9&lt;/td&gt;
&lt;td&gt;AAA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Section Headings&lt;/td&gt;
&lt;td&gt;2.4.10&lt;/td&gt;
&lt;td&gt;AAA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Focus Appearance (Minimum)&lt;/td&gt;
&lt;td&gt;2.4.11&lt;/td&gt;
&lt;td&gt;AA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Focus Appearance (Enhanced)&lt;/td&gt;
&lt;td&gt;2.4.12&lt;/td&gt;
&lt;td&gt;AAA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Page Break Navigation&lt;/td&gt;
&lt;td&gt;2.4.13&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pointer Gestures&lt;/td&gt;
&lt;td&gt;2.5.1&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pointer Cancellation&lt;/td&gt;
&lt;td&gt;2.5.2&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Label in Name&lt;/td&gt;
&lt;td&gt;2.5.3&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Motion Actuation&lt;/td&gt;
&lt;td&gt;2.5.4&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Target Size (Enhanced)&lt;/td&gt;
&lt;td&gt;2.5.5&lt;/td&gt;
&lt;td&gt;AAA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Concurrent Input Mechanisms&lt;/td&gt;
&lt;td&gt;2.5.6&lt;/td&gt;
&lt;td&gt;AAA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dragging Movements&lt;/td&gt;
&lt;td&gt;2.5.7&lt;/td&gt;
&lt;td&gt;AA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Target Size (Minimum)&lt;/td&gt;
&lt;td&gt;2.5.8&lt;/td&gt;
&lt;td&gt;AA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Language of Page&lt;/td&gt;
&lt;td&gt;3.1.1&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Language of Parts&lt;/td&gt;
&lt;td&gt;3.1.2&lt;/td&gt;
&lt;td&gt;AA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Unusual Words&lt;/td&gt;
&lt;td&gt;3.1.3&lt;/td&gt;
&lt;td&gt;AAA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Abbreviations&lt;/td&gt;
&lt;td&gt;3.1.4&lt;/td&gt;
&lt;td&gt;AAA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reading Level&lt;/td&gt;
&lt;td&gt;3.1.5&lt;/td&gt;
&lt;td&gt;AAA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pronunciation&lt;/td&gt;
&lt;td&gt;3.1.6&lt;/td&gt;
&lt;td&gt;AAA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;On Focus&lt;/td&gt;
&lt;td&gt;3.2.1&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;On Input&lt;/td&gt;
&lt;td&gt;3.2.2&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Consistent Navigation&lt;/td&gt;
&lt;td&gt;3.2.3&lt;/td&gt;
&lt;td&gt;AA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Consistent Identification&lt;/td&gt;
&lt;td&gt;3.2.4&lt;/td&gt;
&lt;td&gt;AA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Change on Request&lt;/td&gt;
&lt;td&gt;3.2.5&lt;/td&gt;
&lt;td&gt;AAA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Consistent Help&lt;/td&gt;
&lt;td&gt;3.2.6&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Visible Controls&lt;/td&gt;
&lt;td&gt;3.2.7&lt;/td&gt;
&lt;td&gt;AA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Error Identification&lt;/td&gt;
&lt;td&gt;3.3.1&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Labels or Instructions&lt;/td&gt;
&lt;td&gt;3.3.2&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Error Suggestion&lt;/td&gt;
&lt;td&gt;3.3.3&lt;/td&gt;
&lt;td&gt;AA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Error Prevention (Legal, Financial, Data)&lt;/td&gt;
&lt;td&gt;3.3.4&lt;/td&gt;
&lt;td&gt;AA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Help&lt;/td&gt;
&lt;td&gt;3.3.5&lt;/td&gt;
&lt;td&gt;AAA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Error Prevention (All)&lt;/td&gt;
&lt;td&gt;3.3.6&lt;/td&gt;
&lt;td&gt;AAA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Accessible Authentication&lt;/td&gt;
&lt;td&gt;3.3.7&lt;/td&gt;
&lt;td&gt;AA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Accessible Authentication (No Exception)&lt;/td&gt;
&lt;td&gt;3.3.8&lt;/td&gt;
&lt;td&gt;AAA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Redundant Entry&lt;/td&gt;
&lt;td&gt;3.3.9&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Parsing&lt;/td&gt;
&lt;td&gt;4.1.1&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Name, Role, Value&lt;/td&gt;
&lt;td&gt;4.1.2&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Status Messages&lt;/td&gt;
&lt;td&gt;4.1.3&lt;/td&gt;
&lt;td&gt;AA&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;As you can see that is quite a list!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#cool-i-am-looking-forward-to-it-what-should-i-do-now"&gt;
  &lt;/a&gt;
  Cool, I am looking forward to it, what should I do now?
&lt;/h2&gt;

&lt;p&gt;First thing is first, you should &lt;strong&gt;bookmark this page&lt;/strong&gt; as it will serve as the "index" for the series so you can quickly jump between  articles (I will link to each article in the above table as they are released).&lt;/p&gt;

&lt;p&gt;Then &lt;a href="https://dev.to/inhuofficial"&gt;follow me on DEV.to&lt;/a&gt; if you don't already!&lt;/p&gt;

&lt;p&gt;After that the only other thing you should do is &lt;a href="https://twitter.com/intent/follow?screen_name=InHuOfficial"&gt;follow me on Twitter&lt;/a&gt; as I will be releasing some bonus material over there and upping my Twitter game too this year!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;I hope this series will get people, both beginners and seasoned pros, more interested in accessibility and help you improve your designs and code!&lt;/p&gt;

&lt;p&gt;Plus if people come up with better ways to explain things it is always good to get community feedback so I can improve my articles!&lt;/p&gt;

&lt;p&gt;I hope this series is useful for everyone and (fingers crossed) becomes a well known resource that helps us all fix the 97.4% of websites that have accessibility errors!&lt;/p&gt;




&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;


&lt;center&gt;&lt;strong&gt;I hope you have a fantastic 2021!&lt;/strong&gt;&lt;/center&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;




</description>
      <category>a11y</category>
      <category>webdev</category>
      <category>writing</category>
      <category>1kto1mil</category>
    </item>
    <item>
      <title>Ultimate UI [üíª EP0: Series introduction and posts for the year! üé®]</title>
      <author>InHuOfficial</author>
      <pubDate>Mon, 03 Jan 2022 15:40:54 +0000</pubDate>
      <link>https://dev.to/inhuofficial/ultimate-ui-ep0-series-introduction-and-posts-for-the-year--32m6</link>
      <guid>https://dev.to/inhuofficial/ultimate-ui-ep0-series-introduction-and-posts-for-the-year--32m6</guid>
      <description>&lt;p&gt;Every day I see a new tutorial on how to build a menu system, how to build a drop down box etc. that makes me cry!&lt;/p&gt;

&lt;p&gt;Why do I cry I hear you ask? &lt;/p&gt;

&lt;p&gt;Because most of these tutorials are...well they are absolute garbage!&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; soup everywhere, no WAI-ARIA when it is needed, hard to extend and more!&lt;/p&gt;

&lt;p&gt;Well I finally cracked, so here it is, the introduction to the largest series I will probably ever create - a complete UI kit from the ground up with a very detailed explanation of the what, why and how of designing a perfect UI kit!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#part-of-my-year-of-the-series"&gt;
  &lt;/a&gt;
  Part of my "year of the series"
&lt;/h2&gt;

&lt;p&gt;This is one of 4 series I am writing this year, you can see the other series here:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/my-writing-stats-for-2021-best-time-to-post-on-dev-and-plans-for-2022-2023-over-250-articles-planned-557l" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;My writing stats for 2021, best time to post on DEV and plans for 2022-2023 [over 250 articles planned]&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial „Éª Jan 3 „Éª 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#writing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#1kto1mil&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#what-will-you-get-out-of-this-series"&gt;
  &lt;/a&gt;
  What will you get out of this series?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;75+ UI components and patterns&lt;/strong&gt; designed to be:

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Performant&lt;/strong&gt; - no 3 second load times here!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Accessible&lt;/strong&gt; - 1 in 6 people have a disability, you can't afford to ignore their needs!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Internationalised&lt;/strong&gt; - some languages read right to left, some top to bottom!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Compatible&lt;/strong&gt; - we are looking to support 99% of browsers (yes even IE üò≤)! &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Developer Friendly&lt;/strong&gt; - well documented (hence the series), easy to adapt and easy to convert to your favourite framework!&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Detailed explanations of accessibility principles&lt;/strong&gt; so you can learn more about accessibility bit by bit to improve your code!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Detailed explanations of CSS properties&lt;/strong&gt; you may not use or even know and their support!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;How we can use "progressive enhancement"&lt;/strong&gt; to support older browsers while providing bells and whistles to newer browsers!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;hundreds of code examples&lt;/strong&gt; and patterns to use in your own projects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And much more!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-am-i-building-this-series"&gt;
  &lt;/a&gt;
  Why am I building this series?
&lt;/h2&gt;

&lt;p&gt;While you will get many benefits I want you to understand what &lt;strong&gt;I&lt;/strong&gt; will get out of it, just so you know it isn't too good to be true!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;To show off&lt;/strong&gt; - I need to establish that I know my stuff on accessibility and performance for an upcoming project, this lets me demonstrate that!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;For my own use&lt;/strong&gt; - I am going to be building a load of products that are focused on accessibility, none of the libraries out there fit my needs!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;To build a following&lt;/strong&gt; - I will be seeking investment at some point, having a good following of developers who are invested in my work helps me raise capital!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;To sell products&lt;/strong&gt; - Related products built using this UI kit (plus the UI kit itself when complete enough) to start building the InHu brand!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Crowd sourced knowledge!&lt;/strong&gt; - I will never get things perfect first try, hopefully a project of this size will start attracting attention from people who can offer useful feedback and ideas to make the product better!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see there is just as much in this for me as there is for you, so you know that I will be putting in 100% the whole way through and making sure I get things right!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#ok-it-sounds-interesting-what-will-the-series-cover"&gt;
  &lt;/a&gt;
  Ok it sounds interesting, what will the series cover?
&lt;/h2&gt;

&lt;p&gt;These are the elements / widgets / components I currently have planned (not in release order FYI!)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Accordions / Collapsible Sections&lt;/li&gt;
&lt;li&gt;Alerts, confirm dialogs etc.&lt;/li&gt;
&lt;li&gt;Audio player&lt;/li&gt;
&lt;li&gt;Auto Complete&lt;/li&gt;
&lt;li&gt;Badges (e.g. with number messages etc.)&lt;/li&gt;
&lt;li&gt;Navigation Breadcrumbs&lt;/li&gt;
&lt;li&gt;Buttons&lt;/li&gt;
&lt;li&gt;Bypass Links (skip content links)&lt;/li&gt;
&lt;li&gt;Calendar&lt;/li&gt;
&lt;li&gt;Carousels&lt;/li&gt;
&lt;li&gt;Charts&lt;/li&gt;
&lt;li&gt;Chat System&lt;/li&gt;
&lt;li&gt;Checkboxes&lt;/li&gt;
&lt;li&gt;Code Editor&lt;/li&gt;
&lt;li&gt;Code Snippets&lt;/li&gt;
&lt;li&gt;Colour Picker&lt;/li&gt;
&lt;li&gt;Combo Box&lt;/li&gt;
&lt;li&gt;Configurable Keyboard Shortcuts&lt;/li&gt;
&lt;li&gt;Context Menu (right click menus)&lt;/li&gt;
&lt;li&gt;Date Picker&lt;/li&gt;
&lt;li&gt;DateTime Picker&lt;/li&gt;
&lt;li&gt;Diff View&lt;/li&gt;
&lt;li&gt;Drag and Drop Lists&lt;/li&gt;
&lt;li&gt;Drop Down / custom selects&lt;/li&gt;
&lt;li&gt;Drop Zone / file uploaded&lt;/li&gt;
&lt;li&gt;FAQs&lt;/li&gt;
&lt;li&gt;Forms&lt;/li&gt;
&lt;li&gt;Form Validation&lt;/li&gt;
&lt;li&gt;Help Wizard&lt;/li&gt;
&lt;li&gt;Guided Tour and onboarding&lt;/li&gt;
&lt;li&gt;Idle Timeout&lt;/li&gt;
&lt;li&gt;Image Cropper&lt;/li&gt;
&lt;li&gt;Inputs and labels&lt;/li&gt;
&lt;li&gt;Infinite scroll &lt;/li&gt;
&lt;li&gt;Lists (including sortable)&lt;/li&gt;
&lt;li&gt;Mega Menus&lt;/li&gt;
&lt;li&gt;Modal Dialogues and focus trapping&lt;/li&gt;
&lt;li&gt;Multi Select&lt;/li&gt;
&lt;li&gt;Off Canvas Information&lt;/li&gt;
&lt;li&gt;Organigram&lt;/li&gt;
&lt;li&gt;Paging / Pagination&lt;/li&gt;
&lt;li&gt;Picture Manager&lt;/li&gt;
&lt;li&gt;Pop Out Window&lt;/li&gt;
&lt;li&gt;Progress Indicator&lt;/li&gt;
&lt;li&gt;Preloader&lt;/li&gt;
&lt;li&gt;Radio Buttons&lt;/li&gt;
&lt;li&gt;Range Selector&lt;/li&gt;
&lt;li&gt;Ratings&lt;/li&gt;
&lt;li&gt;Register and Login Page&lt;/li&gt;
&lt;li&gt;Scroll To Top&lt;/li&gt;
&lt;li&gt;Scrum Board / Kanban&lt;/li&gt;
&lt;li&gt;Search Bar&lt;/li&gt;
&lt;li&gt;Settings Menu&lt;/li&gt;
&lt;li&gt;Sliders&lt;/li&gt;
&lt;li&gt;Slide Show / Presentation&lt;/li&gt;
&lt;li&gt;Social Sharing Widgets&lt;/li&gt;
&lt;li&gt;Sortable Lists&lt;/li&gt;
&lt;li&gt;Switches / Toggles&lt;/li&gt;
&lt;li&gt;Tables&lt;/li&gt;
&lt;li&gt;Table Filters&lt;/li&gt;
&lt;li&gt;Tabs&lt;/li&gt;
&lt;li&gt;Tag Cloud / Word Cloud&lt;/li&gt;
&lt;li&gt;Theme Switcher&lt;/li&gt;
&lt;li&gt;Time Picker&lt;/li&gt;
&lt;li&gt;Timeline&lt;/li&gt;
&lt;li&gt;Toasts&lt;/li&gt;
&lt;li&gt;Tool Tips&lt;/li&gt;
&lt;li&gt;Toolbar&lt;/li&gt;
&lt;li&gt;Tool Tips&lt;/li&gt;
&lt;li&gt;Tree View&lt;/li&gt;
&lt;li&gt;Two Panel Selector&lt;/li&gt;
&lt;li&gt;Validation&lt;/li&gt;
&lt;li&gt;Video&lt;/li&gt;
&lt;li&gt;Wizard&lt;/li&gt;
&lt;li&gt;WYSIWYG&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#cool-i-am-looking-forward-to-it-what-should-i-do-now"&gt;
  &lt;/a&gt;
  Cool, I am looking forward to it, what should I do now?
&lt;/h2&gt;

&lt;p&gt;First thing is first, you should &lt;strong&gt;bookmark this page&lt;/strong&gt; as it will serve as the "index" for the series so you can quickly jump between  articles (I will link to each article in the above list as they are released).&lt;/p&gt;

&lt;p&gt;Then &lt;a href="https://dev.to/inhuofficial"&gt;follow me on DEV.to&lt;/a&gt; if you don't already!&lt;/p&gt;

&lt;p&gt;After that the only other thing you should do is &lt;a href="https://twitter.com/intent/follow?screen_name=InHuOfficial"&gt;follow me on Twitter&lt;/a&gt; as I will be releasing some bonus material over there and upping my Twitter game too this year!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;This is a series that I have wanted to write for a long time as it gives me an excuse to finally build a fully accessible and semantically correct UI kit, something which doesn't exist (there are partial UI kits and patterns but not a single library that covers enough to build a full application!).&lt;/p&gt;

&lt;p&gt;I hope you enjoy (and participate) in the series so that people can point out my mistakes and offer ideas to make things better.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And here is my promise to you&lt;/strong&gt;, if someone comes up with a better pattern for something I will completely rewrite any articles to use that pattern so you know things will be as good as they can be!&lt;/p&gt;




&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;


&lt;center&gt;&lt;strong&gt;I hope you have a fantastic 2021 and I look forward to going on this journey together!&lt;/strong&gt;&lt;/center&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;




</description>
      <category>ux</category>
      <category>webdev</category>
      <category>writing</category>
      <category>1kto1mil</category>
    </item>
    <item>
      <title>My writing stats for 2021, best time to post on DEV and plans for 2022-2023 [over 250 articles planned]</title>
      <author>InHuOfficial</author>
      <pubDate>Mon, 03 Jan 2022 15:40:40 +0000</pubDate>
      <link>https://dev.to/inhuofficial/my-writing-stats-for-2021-best-time-to-post-on-dev-and-plans-for-2022-2023-over-250-articles-planned-557l</link>
      <guid>https://dev.to/inhuofficial/my-writing-stats-for-2021-best-time-to-post-on-dev-and-plans-for-2022-2023-over-250-articles-planned-557l</guid>
      <description>&lt;p&gt;In 11 months of writing I have amassed over 250k views on DEV, not to be sniffed at...but I can do better! &lt;/p&gt;

&lt;p&gt;In this article I will share:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;my content stats with you for the last 11 months &lt;/li&gt;
&lt;li&gt;some analysis I did and never released on &lt;strong&gt;when&lt;/strong&gt; to post on DEV&lt;/li&gt;
&lt;li&gt;and my (ambitious) content creation plans for 2022!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hopefully you will find the writing stats interesting or when to post on DEV if you are a content creator, but if you don't create content / aren't interested in that you can &lt;a href="#2022-the-year-of-series"&gt;skip to my plans for the year here&lt;/a&gt; as I am sure you &lt;strong&gt;will&lt;/strong&gt; find that interesting!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#contents"&gt;
  &lt;/a&gt;
  Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#2021-in-review"&gt;2021 in review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#when-to-post-on-dev-release-time-matters"&gt;When to post on DEV (release time matters)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#2022-the-year-of-series"&gt;2022 the year of series!&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Ultimate UI&lt;/li&gt;
&lt;li&gt;WCAG in Plain English&lt;/li&gt;
&lt;li&gt;Conversion Rate Optimisation&lt;/li&gt;
&lt;li&gt;1000 days to ¬£1million&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#round-up"&gt;Round Up!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#2021-in-review"&gt;
  &lt;/a&gt;
  2021 in review
&lt;/h2&gt;

&lt;p&gt;So I started writing in February 2021, so these are stats for 11 months as a complete beginner!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#views"&gt;
  &lt;/a&gt;
  Views
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rMCuKFCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2iir5v0j77emca4gabah.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rMCuKFCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2iir5v0j77emca4gabah.png" alt="271,755 views on DEV" width="384" height="146"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although views don't really tell you much (as I could have just written a load of pandering listicles) it is still an interesting number to see.&lt;/p&gt;

&lt;p&gt;And I am not going to lie, hitting quarter of a &lt;strong&gt;million&lt;/strong&gt; views did bring a smile to my face.&lt;/p&gt;

&lt;p&gt;I could easily have doubled that number if I had written to a schedule but overall it was a good first few months as a content creator and it let me "find my voice" (which is apparently angry, sarcastic and mean! ü§£)&lt;/p&gt;

&lt;p&gt;But how much effort did it take to hit those numbers?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#number-of-posts"&gt;
  &lt;/a&gt;
  Number of posts
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TdDfm96Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2iltadhds1yq49yhfj9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TdDfm96Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2iltadhds1yq49yhfj9.png" alt="83 posts published, 1820 comments written, 0 tags followed" width="419" height="178"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;83 posts...not too shabby. Although I will admit a lot of them were silly posts.&lt;/p&gt;

&lt;p&gt;But for every post released I also have loads of draft posts that didn't make the cut!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AVML3Y_V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drt80vtxzjzc0ephkoxc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AVML3Y_V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drt80vtxzjzc0ephkoxc.png" alt="181 total posts" width="327" height="65"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yikes, 98 unpublished posts! Some are almost complete too but I either didn't like what I had written or just didn't have the motivation to finish the article as it didn't appeal to me. &lt;/p&gt;

&lt;p&gt;One job for this week is to rescue the posts that were nearly complete and just finish them, just because I didn't love them doesn't mean that someone else won't find them useful! &lt;/p&gt;

&lt;p&gt;So going back to my released articles, that means that with 83 posts and 270k views the average number of views for each of my posts is 3,274. Not too bad, but I could certainly improve that (more on that later).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#comments"&gt;
  &lt;/a&gt;
  Comments
&lt;/h3&gt;

&lt;p&gt;The one that surprised me was number of comments. 1820 comments in 11 months? I spend too much time here (seriously, one of the things I will be changing in 2022)!&lt;/p&gt;

&lt;p&gt;What would be good to see is how many of those comments were on my own posts. I could probably work that out using the forem API but I don't think I will bother as it is just curiosity!&lt;/p&gt;

&lt;p&gt;All I know is that although i enjoyed writing essays in the comments (seriously some of my comments are 2000+ words!) it is not a very productive use of my time so I need to stop that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#badges"&gt;
  &lt;/a&gt;
  Badges
&lt;/h3&gt;

&lt;p&gt;Badges are pretty pointless and if you are a new writer &lt;strong&gt;do not place as much emphasis on them as I did.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At first I thought it was really cool when you got a new badge but now I realise that most of the time the "achievement" is quite empty and down to luck in some ways.&lt;/p&gt;

&lt;p&gt;But I might as well share my badges for the year.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lV_NaGpG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bud0xvce0xidreuz0cm6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lV_NaGpG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bud0xvce0xidreuz0cm6.png" alt="Badges earned: CSS3, Top 7, 4 week streak, 8 week streak, 16 week streak, accessibility, beloved comment" width="408" height="723"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So we have the CSS3, Top 7, 4 week streak, 8 week streak, 16 week streak, accessibility and beloved comment badges.&lt;/p&gt;

&lt;p&gt;As I said, the gamification aspect of the badges makes them feel special at first, but in reality they don't tell you much about the quality of your content.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#last-but-not-least-interactions"&gt;
  &lt;/a&gt;
  Last but not least, interactions
&lt;/h3&gt;

&lt;p&gt;The one stat that has a little meaning to me is interactions. It does at least give me some idea of if people like a particular piece of content.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--88g2CTkG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ehe2dsohbki1gnflsyij.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--88g2CTkG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ehe2dsohbki1gnflsyij.png" alt="6,874 post reactions" width="386" height="144"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So yet again the average reactions per article is roughly 83 (weird, 83 articles with an average of 83 reactions - perhaps that is my new lucky number, but either way there is something pleasing about having a square number! ü§£).&lt;/p&gt;

&lt;p&gt;But that isn't particularly useful on its own, what I look at is reactions per view.&lt;/p&gt;

&lt;p&gt;So by doing this I can see which posts have the most engagement from the DEV community. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qZAfn363--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yr6y30413skza2wcncua.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qZAfn363--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yr6y30413skza2wcncua.png" alt="101 Digital Accessibility (a11y) tips and tricks, 516 reactions for 8857 views" width="880" height="82"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My most popular post (reactions wise) is also the post with the most reactions per view.&lt;/p&gt;

&lt;p&gt;It makes sense as that article was a monstrous and high effort posts so that does make it worth it (even if the view count was a lot lower than I would have liked at 8859 views.)&lt;/p&gt;

&lt;p&gt;Still it is the top accessibility article for the year and in the top 5 for all time so I am happy with that.&lt;/p&gt;

&lt;p&gt;The one thing I certainly learned that I haven't covered yet is:&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#when-to-post-on-dev-release-time-matters"&gt;
  &lt;/a&gt;
  When to post on DEV (Release time matters)
&lt;/h2&gt;

&lt;p&gt;Over the last year I tended to just release content whenever it was finished. This was my first big mistake!&lt;/p&gt;

&lt;p&gt;Although it is a little out of date (I did the analysis in June) I did analyse the best times to release articles for likes on DEV so I thought I would share that with you finally! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v1vYXHc---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a2whacvec8yqoh2otnq5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v1vYXHc---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a2whacvec8yqoh2otnq5.png" alt="Table showing times and days of the week in relation to average number of likes on an article, link to a more accessible version is 4 paragraphs down from this image." width="880" height="337"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What I did was download every article that was live on DEV (yup, 250k+ articles for a total of 10.6GB at the time!), which includes the like counts and release date etc.&lt;/p&gt;

&lt;p&gt;Then I discounted the top and bottom 5% number of likes to account for outliers / over-achievers / under-achievers.&lt;/p&gt;

&lt;p&gt;Then I looked at the publish time and collated the data together into sections in the table.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://inhu.co/dev_to/analyse/timeofday.php"&gt;You can find the live table here (3rd table, the other two are less relevant! This was only designed for personal use! ü§£)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All the times are GMT and you can certainly see some interesting patterns.&lt;/p&gt;

&lt;p&gt;So the best times to release articles are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Monday at either 1am, 11am or 5pm&lt;/li&gt;
&lt;li&gt;Tuesday at 1pm or 4pm&lt;/li&gt;
&lt;li&gt;Wednesday at 12pm&lt;/li&gt;
&lt;li&gt;Thursday at 9am&lt;/li&gt;
&lt;li&gt;Friday - you shouldn't release&lt;/li&gt;
&lt;li&gt;Saturday - you shouldn't release&lt;/li&gt;
&lt;li&gt;Sunday - 6am (top time to release!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The worst time to release is Friday at midnight!&lt;/p&gt;

&lt;p&gt;If you write here on DEV I hope that is useful for you so you can tune your release times for maximum impact!&lt;/p&gt;

&lt;p&gt;For me personally one of the big wins / changes for the year is to write articles and then "sit on them" until the prime time to release them.&lt;/p&gt;

&lt;p&gt;So my release schedule starting 09th January 2021 is going to be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sunday at 6am&lt;/li&gt;
&lt;li&gt;Tuesday at 1pm&lt;/li&gt;
&lt;li&gt;Wednesday at 12pm&lt;/li&gt;
&lt;li&gt;Thursday at 9am&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As I plan on writing 4 articles a week! &lt;/p&gt;

&lt;p&gt;Which leads me nicely on to...&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2022-the-year-of-series"&gt;
  &lt;/a&gt;
  2022 the year of series!
&lt;/h2&gt;

&lt;p&gt;I have decided that the best way to focus my writing while making it easier for people to read stuff that they find interesting is to write some mega series!&lt;/p&gt;

&lt;p&gt;Here is what is coming this year!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#ultimate-ui"&gt;
  &lt;/a&gt;
  Ultimate UI
&lt;/h3&gt;

&lt;p&gt;75+ UI components that are "perfect". Covering performance, accessibility, progressive enhancement, backwards compatibility and more!&lt;/p&gt;

&lt;p&gt;Read the introduction to the series here:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/ultimate-ui-ep0-series-introduction-and-posts-for-the-year--32m6" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Ultimate UI [üíª EP0: Series introduction and posts for the year! üé®]&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial „Éª Jan 3 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#ux&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#writing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#1kto1mil&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#wcag-in-plain-english"&gt;
  &lt;/a&gt;
  WCAG in Plain English
&lt;/h3&gt;

&lt;p&gt;Another mega series! &lt;/p&gt;

&lt;p&gt;This time I am going to tackle one of the biggest barriers to people building accessible applications and websites...the complexity of WCAG (the guidelines around accessibility).&lt;/p&gt;

&lt;p&gt;I am hoping to make 2022 the year of semantic HTML and accessibility and this is just my way of making accessibility more approachable.&lt;/p&gt;

&lt;p&gt;You can read more about the WCAG in plain English series in the following introduction:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/wcag-in-plain-english-ep0-series-introduction-and-posts-for-the-year--nfi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;WCAG in plain English [ü¶æ EP0: Series introduction and posts for the year! ü¶æ]&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial „Éª Jan 3 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#writing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#1kto1mil&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#conversion-rate-optimisation"&gt;
  &lt;/a&gt;
  Conversion Rate Optimisation
&lt;/h3&gt;

&lt;p&gt;The third mega series!&lt;/p&gt;

&lt;p&gt;In this series I explore the exciting world of Conversion Rate Optimisation (CRO), helping turn visitors into customers or  mailing lists subscribers etc!&lt;/p&gt;

&lt;p&gt;I am hoping I can help people see the difference between "pretty" and "effective" when it comes to UX design!&lt;/p&gt;

&lt;p&gt;You can read more about the CRO series in the following introduction:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/conversion-rate-optimisation-ep0-series-introduction-and-posts-for-the-year--2i03" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Conversion Rate Optimisation [üéØ EP0: Series introduction and posts for the year! üìà]&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial „Éª Jan 3 „Éª 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#cro&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#writing&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#1kto1mil&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#1000-days-to-%C2%A31million"&gt;
  &lt;/a&gt;
  1000 days to ¬£1million
&lt;/h3&gt;

&lt;p&gt;The 4th and final part of this "year of series" is more of a general series on taking a business from ¬£0 to ¬£1million!&lt;/p&gt;

&lt;p&gt;I will be sharing how I am optimising my time (so I can create all these series!), producing an MVP, launching a product and raising capital for the product to reach my goal of ¬£1million turnover by 01/09/2024!&lt;/p&gt;

&lt;p&gt;This series will have loads of little tips and tricks for time management and optimising your work day so it will be worth following for that! &lt;/p&gt;

&lt;p&gt;But even if that doesn't interest you it will probably be interesting to see how the Ultimate UI series and WCAG in English series are part of a much bigger plan!&lt;/p&gt;

&lt;p&gt;Think of it like a weekly roundup of what I have been working on and a curated public journal of what I have been up to personally!&lt;/p&gt;

&lt;p&gt;Oh and in case you are wondering where this is all leading...  &lt;/p&gt;

&lt;p&gt;I am building a site builder / CMS...that has to make the article worth a read just to see why I would do something so stupid! ü§£&lt;/p&gt;

&lt;p&gt;You can read my introduction to the idea here if this interests you (it is a little long, future entries will be better structured and shorter!):&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/1000-days-to-ps1million-this-should-be-fun-2d4e" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;1000 days to ¬£1million - this should be fun!&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial „Éª Dec 7 '21 „Éª 16 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#1kto1mil&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#watercooler&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cms&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#round-up"&gt;
  &lt;/a&gt;
  Round Up!
&lt;/h2&gt;

&lt;p&gt;Over 250 articles planned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;76 for Ultimate UI&lt;/li&gt;
&lt;li&gt;89 for WCAG in plain English&lt;/li&gt;
&lt;li&gt;68 for Conversion Rate Optimisation&lt;/li&gt;
&lt;li&gt;52 for 1000 days to ¬£1million&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I don't think there is much else I need to say other than - I better get cracking on writing! &lt;/p&gt;

&lt;p&gt;Oh there is one more thing I forgot to mention...I will be releasing some YouTube shorts / Tik Toks for WCAG and Conversion Rate Optimisation so if you prefer quick summaries rather than in-depth articles they might be right up your street!&lt;/p&gt;

&lt;p&gt;Oh and one more thing - I have &lt;strong&gt;3 EPIC guides planned on images, forms and performance&lt;/strong&gt; similar to my mega article on accessibility:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/101-digital-accessibility-tips-and-tricks-4728" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;101 Digital Accessibility (a11y) tips and tricks&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial „Éª Jul 30 '21 „Éª 68 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;


&lt;center&gt;&lt;strong&gt;Anyway, that is my plans for 2022 and beyond, what do you have planned for this year?&lt;/strong&gt;&lt;/center&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;




</description>
      <category>writing</category>
      <category>webdev</category>
      <category>1kto1mil</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Changelog #0008 ‚Äî üíü Collection icons</title>
      <author>Cl√°udia Delgado</author>
      <pubDate>Mon, 03 Jan 2022 15:35:14 +0000</pubDate>
      <link>https://dev.to/pie/changelog-0008-collection-icons-1ef3</link>
      <guid>https://dev.to/pie/changelog-0008-collection-icons-1ef3</guid>
      <description>&lt;p&gt;(h)API new year! üéâü•≥ü•Ç&lt;/p&gt;

&lt;p&gt;What a year for HTTPie! We launched our new brand, website, HTTPie for Web and Desktop in beta with thousands of developers on the waitlist, added many great features to HTTPie for Terminal, crossed 50K stars on GitHub, and grew our team to 10 members. We want to thank all of you for your support!&lt;/p&gt;

&lt;p&gt;And we‚Äôre just getting started. The team is laser-focused on our mission to provide the best experience to anyone working with APIs, and big things are coming to the HTTPie platform in 2022.&lt;/p&gt;

&lt;p&gt;In recent weeks, we‚Äôve released &lt;a href="https://httpie.io/blog/changelog-0005"&gt;library&lt;/a&gt; and added &lt;a href="https://httpie.io/blog/changelog-0007"&gt;collection-level auth&lt;/a&gt;. This week, we focused on library improvements. Check out what‚Äôs new üëá&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#httpie-for-web-amp-desktop"&gt;
  &lt;/a&gt;
  HTTPie for Web &amp;amp; Desktop
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w18plwDI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://httpie.io/Blog/changelog-0008/main-O7BS4KSZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w18plwDI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://httpie.io/Blog/changelog-0008/main-O7BS4KSZ.png" alt="library" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#collection-icons"&gt;
  &lt;/a&gt;
  üíü Collection icons
&lt;/h3&gt;

&lt;p&gt;A picture is worth a thousand words. Now you can use icons to give your library a personal touch and visually identify your collections. Icons help you orient in your workspace at a glance without taking up a lot of screen real-estate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MVEywDaw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://httpie.io/Blog/changelog-0008/collection-icon-4VPRZFGL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MVEywDaw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://httpie.io/Blog/changelog-0008/collection-icon-4VPRZFGL.png" alt="collection icon and color" width="880" height="624"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When creating or editing a collection, customize it with an icon and color.&lt;/p&gt;

&lt;p&gt;There are currently eight icons and eight colors offering 64 unique combinations, and we‚Äôll be adding more icons over time.&lt;br&gt;
As always‚Äîwe‚Äôre curious to hear your thoughts: Is there an icon you‚Äôd like see? Let us know and your wishes may come true ‚ú®&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#improvements"&gt;
  &lt;/a&gt;
  ‚ú® Improvements
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Now you can see request methods right in the library panel. These verbs will also add more meaning to your existing request names. You might want to review them.&lt;/li&gt;
&lt;li&gt;Our beta users rightly pointed out that the original library icon resembled one commonly used for archiving. We‚Äôve made it a bit more abstract.&lt;/li&gt;
&lt;li&gt;Just like with the size of the main panels, you know best what sidebar width works for you. Now you can resize it by dragging the divider.&lt;/li&gt;
&lt;li&gt;We‚Äôve changed the preview icon to &lt;code&gt;&amp;lt;/&amp;gt;&lt;/code&gt; and moved it to the bottom of the request specification panel. Click it to open the preview panel, where you can access HTTP preview as well as &lt;a href="https://httpie.io/blog/changelog-0003"&gt;HTTPie command export&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#httpie-for-terminal"&gt;
  &lt;/a&gt;
  HTTPie for Terminal
&lt;/h2&gt;

&lt;p&gt;Here‚Äôs a summary of this week‚Äôs improvements to the &lt;a href="https://github.com/httpie/httpie"&gt;development version&lt;/a&gt; of &lt;a href="https://httpie.io/cli"&gt;HTTPie for Terminal&lt;/a&gt;, which will be part of the upcoming v3.0.0 release.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#improvements"&gt;
  &lt;/a&gt;
  ‚ú® Improvements
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Prompted passwords are now stored persistently in session files. Shout out to Sebastian for the contribution! (&lt;a href="https://github.com/httpie/httpie/pull/1239"&gt;#1239&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When you forget to pass the &lt;code&gt;--ignore-stdin&lt;/code&gt; option on pseudo terminals (e.g., cron jobs or CI workflows), HTTPie will now warn you if there is no incoming &lt;code&gt;STDIN&lt;/code&gt; data after some time instead of just quietly waiting. (&lt;a href="https://github.com/httpie/httpie/pull/1256"&gt;#1256&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#fixes"&gt;
  &lt;/a&gt;
  ü™≤ Fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Using &lt;code&gt;--raw&lt;/code&gt; with &lt;code&gt;--chunked&lt;/code&gt; is now supported. (&lt;a href="https://github.com/httpie/httpie/pull/1254"&gt;#1254&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#happy-testing-and-see-you-next-week"&gt;
  &lt;/a&gt;
  Happy testing, and see you next week!
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;üíÅüèª‚Äç‚ôÄÔ∏è If you‚Äôre not on the private beta yet, you can &lt;a href="https://httpie.io/beta"&gt;join the waitlist here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;üëâ You can also follow &lt;a href="https://twitter.com/httpie"&gt;@httpie&lt;/a&gt; and join our &lt;a href="https://httpie.io/discord"&gt;Discord community&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;üë©‚Äçüíª We‚Äôre looking for new colleagues in &lt;a href="https://httpie.io/jobs"&gt;engineering and design roles&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Originally published on &lt;a href="https://httpie.io/blog/changelog-0008"&gt;HTTPie blog&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>devtools</category>
    </item>
  </channel>
</rss>
