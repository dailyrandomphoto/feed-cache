<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The Four Pillars of Object Oriented Programming</title>
      <author>Todd Carlson</author>
      <pubDate>Fri, 11 Dec 2020 00:16:45 +0000</pubDate>
      <link>https://dev.to/toddster79/the-four-pillars-of-object-oriented-programming-1a6m</link>
      <guid>https://dev.to/toddster79/the-four-pillars-of-object-oriented-programming-1a6m</guid>
      <description>&lt;p&gt;Whether you love, or hate, object oriented programming, "What are the four pillars of OOP?" will be a question you get asked on interviews again and again. I know this because a good friend of mine, who is a newly minted CS grad, messaged me upset because she completely blanked on this question during one of her interviews, and I was literally asked this question yesterday during a technical interview. &lt;/p&gt;

&lt;p&gt;Just a quick disclaimer, this post is not an exhaustive and deep dive into the four pillars. I am merely providing quick "in a nut shell" explanations of the four pillars, with the sole aim of helping people answer this question when it inevitably comes up during an interview.&lt;/p&gt;

&lt;p&gt;So what are the four pillars of OOP? They are Inheritance, Encapsulation, Polymorphism, and Abstraction. I will start with Encapsulation, which I believe is the real heart of OOP.&lt;br&gt;
Basically, Encapsulation is keeping your state and behavior in the same place. I also like to think of it as a public contract with private implementation. For example, say you have a class called Customer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Customer
   def initialize(id, name, addr)
      @cust_id = id
      @cust_name = name
      @cust_addr = addr
   end
   def display_details
      puts "Customer id #@cust_id"
      puts "Customer name #@cust_name"
      puts "Customer address #@cust_addr"
   end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So, we have this class called Customer, with some instance variables, and a method that displays those instance variables. Those instance variables describe the state of our class, while the method describes the behavior. They are both "encapsulated" inside of our class. The public contract aspect of this that I mentioned earlier, means that this class is guaranteed to have this state and behavior. However, the private implementation aspect that I mentioned comes into play with how I choose to use the class. I could write new methods that display only one of the instance variables, or I could write new methods that add additional behavior. However, the main concept of Encapsulation is that state and behavior are in the same place.&lt;/p&gt;

&lt;p&gt;Inheritance is a relation between two classes. We know that all dogs are animals. The benefit of inheritance is that classes lower down the hierarchy get the features of those higher up, but can also add specific features of their own. If all animals breathe, then all dogs breathe. In Ruby, a class can only inherit from a single other class. Some other languages support multiple inheritance, a feature that allows classes to inherit features from multiple classes, but Ruby doesn't support this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Animal  
  def breathe  
    puts "inhale and exhale"  
  end  
end  

class Dog &amp;lt; Mammal  
  def speak  
    puts "Woof!"  
  end  
end  

doug = Dog.new  
doug.breathe  
doug.speak  
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Polymorphism comes form the greek words "polys" meaning much or many and "morphe" meaning form or shape. In programming this means that you can have methods that all share the same name, but have different implementations. For example, say you have this class called Person:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Person
    def initialize(first, last, age)
         @first_name = first
         @last_name = last
         @age = age
    end

    def birthday
         @age += 1
    end

    def introduce
          puts "Hi everyone. My name is #{@first_name} #{@last_name}."
    end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This is all well and good, but let's also say that you want to get more specific with your person, say you also have a class of Teacher, and a class of Student. We want to keep the state and behavior of our Person class, so we will have our Teacher and Student classes inherit from the Person class. The beauty of Polymorphism is that we can keep the original "introduce" method that we get from our person class, and give it new behavior for each of the other two classes like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Person
    def initialize(first, last, age)
         @first_name = first
         @last_name = last
         @age = age
    end

    def birthday
         @age += 1
    end

    def introduce
          puts "Hi everyone. My name is #{@first_name} #{@last_name}."
    end
end

class Student &amp;lt; Person
    def introduce
          puts "Hello teacher. My name is #{@first_name} #{@last_name}."
    end
end

class Teacher &amp;lt; Person
    def introduce
          puts "Hello class. My name is #{@first_name} #{@last_name}."
    end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The Teacher and Student classes both have a method called "introduce," but it behaves differently, or it has a different implementation thanks to polymorphism. We have overridden the original method behavior, but we have kept the same name.&lt;/p&gt;

&lt;p&gt;Lastly we have abstraction, which is basically the idea of only showing essential attributes to the user, and hiding any unnecessary details/information. Abstraction is selecting data from a larger pool, and only showing the relevant details of the object to the user. It helps reduce programming complexity. An example that helps me wrap my head around the concept is fetching data from an API. Say you make a fetch request that gives you back 100 blog posts in the form of an array of objects. Each object contains the properties of, title, body, author, publication date, publisher etc. For the purposes of your website, you want to display the first four posts on your page, and only include the title and body. So you write some JavaScript and do some DOM manipulation that allows you to do just that. In this case you have abstracted away all of the posts that you don't want to display, and all of the other object properties that you don't need as well. You still get all of that information when you make your initial fetch request, but you have hidden, or abstracted it away from your user. &lt;/p&gt;

&lt;p&gt;I hope this post has helped someone understand the basics of the four pillars of OOP. Other OOP languages may do things a little differently than the examples I have shown in Ruby, for example you can't overload in Ruby because it isn't a strongly typed language, but the rest of the concepts are pretty much the same across the board. &lt;/p&gt;

</description>
      <category>oop</category>
      <category>programming</category>
    </item>
    <item>
      <title>The NPM guide I would have loved as a beginner</title>
      <author>Chandelier Axel</author>
      <pubDate>Thu, 10 Dec 2020 21:09:24 +0000</pubDate>
      <link>https://dev.to/spartakyste/the-npm-guide-i-would-have-loved-as-a-beginner-4i07</link>
      <guid>https://dev.to/spartakyste/the-npm-guide-i-would-have-loved-as-a-beginner-4i07</guid>
      <description>&lt;p&gt;As a junior developer, I struggled a lot with NPM.&lt;br&gt;
Do you remember copy/pasting all the npm commands without knowing what they do ? Or the first time you freaked out while opening the package-lock.json ? What if I tell you that there's a &lt;em&gt;bugs&lt;/em&gt; property that you can set in your package.json ?&lt;/p&gt;

&lt;p&gt;No more fear is allowed from that point onward, we're going to learn together the basics of NPM.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer - The article will follow my process of re-learning from scracth. Feel free to skip to specific parts if you don't want to read what NPM means, etc.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#a-little-background"&gt;A little background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#initialization"&gt;Initialization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#manage-dependencies"&gt;Manage dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dependencies-devdependencies"&gt;Dependencies &amp;amp; DevDependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#side-notes"&gt;Side notes&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#uninstall"&gt;Uninstall a library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install-specific-version"&gt;Install specifid version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#package-lock"&gt;The package-lock&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#a-little-background" class="anchor"&gt;
  &lt;/a&gt;
  A little background
&lt;/h2&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's start with the basics, what does NPM even mean ? It stand for &lt;strong&gt;Node Package Manager&lt;/strong&gt;, and as the name implies, it's responsible for managing your packages within your Node application.&lt;/p&gt;

&lt;p&gt;Now considered as a major piece of Javascript ecosystem, NPM offer an easy way to manage all the external dependencies we'll need to use in our project with a pretty simple command : &lt;strong&gt;npm install &lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I will skip the installation of NPM, the &lt;a href="https://nodejs.org/en/"&gt;Node website&lt;/a&gt; will explain it to you properly, and is not the core of this article.&lt;/p&gt;

&lt;p&gt;I'll jump straight to the npm commands. Let's start.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#initialization" class="anchor"&gt;
  &lt;/a&gt;
  Initialization
&lt;/h2&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When I typed my first npm commands, I had absolutely no idea what was going on, despite being the core of NPM. Let's see it in detail.&lt;/p&gt;

&lt;p&gt;First of all, we need to create a node-based application, and this is as easy as running the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We'll be prompted a few questions about our project, such as the project name, the link to your Git repository, ect. But for now, let's just skip and press Enter.&lt;/p&gt;

&lt;p&gt;Wait, use.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Amazing, we skipped all the questions.&lt;/p&gt;

&lt;p&gt;So, we now have a &lt;strong&gt;package.json&lt;/strong&gt; filled with some informations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"your_directory_name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"test"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Error: no test specified&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &amp;amp;&amp;amp; exit 1"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"keywords"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ISC"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This file can be considered as the ID Card of our application. It contains its name, the current version, a tiny description, some keywords to help other people finding it, and a bunch of other stuff.&lt;/p&gt;

&lt;p&gt;(For a complete list of the properties, &lt;strong&gt;including the 'bugs' keyword we talked about&lt;/strong&gt;, please refer to the &lt;a href="https://docs.npmjs.com/cli/v6/configuring-npm/package-json#directories"&gt;official documentation&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;You're also free to update it whenever you want, as long as you respect the JSON format and use the correct properties.&lt;/p&gt;

&lt;p&gt;Next, we want to start our application, right ?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#scripts" class="anchor"&gt;
  &lt;/a&gt;
  Scripts
&lt;/h4&gt;

&lt;p&gt;Let's look at some examples. I'll assume you have worked at least once with either an Express-based application, or one of the popular JS front-end frameworks (such as React, Angular or Vue).&lt;/p&gt;

&lt;p&gt;This scripts property give you the power to customize npm commands to use within your application.&lt;/p&gt;

&lt;p&gt;Wait a second.. Is that the place were the &lt;strong&gt;npm start&lt;/strong&gt; I use everyday is defined ? Exactly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node index.js"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can specify any valid shells commands here, and create as much entries as you want nor need. You can even combine them !&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"stuffA:"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"..."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"stuffB"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"..."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"together"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"npm run stuffA &amp;amp; npm run stuffB"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;(Beware, this will run your scrips in parallel. To run concurrently, either replace the "&amp;amp;" by "&amp;amp;&amp;amp;", or look at &lt;a href="https://www.npmjs.com/package/concurrently"&gt;the Concurrently package&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Now, &lt;strong&gt;npm run together&lt;/strong&gt; ! And yes, this is not a typo, you need to write the &lt;em&gt;run&lt;/em&gt; keyword. In fact, even the npm start command is launched as &lt;strong&gt;npm run start&lt;/strong&gt; behind the scenes. (This ability is shared with a couple other keywords, such as install, test..)&lt;/p&gt;

&lt;p&gt;You still there ? Nice, let's keep digging and unleash the full power of NPM by adding some dependencies !&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#manage-dependencies" class="anchor"&gt;
  &lt;/a&gt;
  Manage dependencies
&lt;/h2&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nowadays, an npm package already exists for pretty much anything. It would be a shame not to use them, and to rebuild the wheel everytime.&lt;/p&gt;

&lt;p&gt;This is probably the biggest role of the package.json, it'll keep track of all the dependencies within your project, including the versions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npm &lt;span class="nb"&gt;install&lt;/span&gt; &amp;lt;package_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This command will download all the files needed and install them into a brand new &lt;em&gt;node_modules&lt;/em&gt; folder.&lt;br&gt;
This folder will become bigger and badder as you'll install more and more packages (and the packages themselves most likely depend on others packages, which will be installed too).&lt;/p&gt;

&lt;p&gt;Please don't do the same mistake as I did, and prevent committing this folder to your repository !&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//.gitignore file at your project root&lt;/span&gt;

&lt;span class="nx"&gt;node_modules&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#dependencies-amp-devdependencies" class="anchor"&gt;
  &lt;/a&gt;
  Dependencies &amp;amp; DevDependencies
&lt;/h3&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Meanwhile, in your package.json ..&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"express"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.17.1"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;lt;---&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;version&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eslint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^7.13.0"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What is this ? Actually, it's quite simple. Whenever you'll install something through the npm install command, it'll list it there. Doing so, when you'll share your amazing project with the world, the others devs will only launch &lt;em&gt;npm install&lt;/em&gt; and all the libraries required for your project to run, will install nicely.&lt;/p&gt;

&lt;p&gt;Now what are devDependencies ? Everything that is &lt;strong&gt;not&lt;/strong&gt; vital for your application and that should be removed from your production build will go there (such as your linter, for example). Be careful, you have to manage them yourself.&lt;/p&gt;

&lt;p&gt;By default, the npm install command will put everything inside the regular dependencies. To put something in the devDependencies, you must pass an extra argument to the command :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; &amp;lt;your_library&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;OR&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-D&lt;/span&gt; &amp;lt;your_library&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;OR even shorter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npm i &lt;span class="nt"&gt;-D&lt;/span&gt; &amp;lt;your_library&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Organizing your dependencies will lead to better production performance. You might not need your linter rules or your Typescript types definition to run your app, right ?&lt;/p&gt;

&lt;p&gt;Even better, npm allow us to omit the devDependencies on installation !&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--only&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;prod
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#side-but-important-notes" class="anchor"&gt;
  &lt;/a&gt;
  Side (but important) notes
&lt;/h3&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#uninstall-a-library" class="anchor"&gt;
  &lt;/a&gt;
  Uninstall a library
&lt;/h4&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Made a typo and forgot the --save-dev in your command ?&lt;br&gt;
Cleaning up your app from useless modules ?&lt;br&gt;
You have two options, either remove the package and reinstall it again with the proper command, or do it manually in your package.json.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npm uninstall &amp;lt;your_library&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This will remove the library from the package.json &lt;strong&gt;and&lt;/strong&gt; from the node modules.&lt;/p&gt;

&lt;p&gt;In case you want to remove it from the node modules but &lt;strong&gt;not&lt;/strong&gt; from the package.json (let's say the installation failed for whatever reason).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  npm uninstall &lt;span class="nt"&gt;--no-save&lt;/span&gt; &amp;lt;your_library&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you can't be bothered playing with the shell commands, you can also update manually your package.json.&lt;/p&gt;

&lt;p&gt;Let's get back our previous example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"express"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.17.1"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eslint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^7.13.0"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To remove the eslint dependency, erase it, and simply re-run npm install.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#install-a-specific-version" class="anchor"&gt;
  &lt;/a&gt;
  Install a specific version
&lt;/h4&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sometimes you'll have to install a specific version of a package. It's easy :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npm &lt;span class="nb"&gt;install&lt;/span&gt; &amp;lt;your_library&amp;gt;@&amp;lt;version&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For example :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npm &lt;span class="nb"&gt;install &lt;/span&gt;eslint@1.0.0
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#the-packagelockjson" class="anchor"&gt;
  &lt;/a&gt;
  The package-lock.json
&lt;/h4&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Last but not least, the package-lock. It's actually here to solve a problem from the package.json we haven't talked about.&lt;/p&gt;

&lt;p&gt;We saw earlier that when installing a new package, his version is set into the package.json. It uses the &lt;strong&gt;semver convention&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Basically, the first character before the actual version number will implies some slight changes whenever the npm install command is ran.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;"express"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"~4.17.1"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;strong&gt;~&lt;/strong&gt; mean that NPM will go and look for the &lt;strong&gt;4.17.1&lt;/strong&gt; version, but if a newer patch release is available, let's say &lt;strong&gt;4.18.1&lt;/strong&gt;, it'll use this one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;"express"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.17.1"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;strong&gt;^&lt;/strong&gt; mean that NPM will go and look for the &lt;strong&gt;4.17.1&lt;/strong&gt; version, but if a newer minor release is available, let's say &lt;strong&gt;4.17.9&lt;/strong&gt;, it'll use this one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;"express"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"4.17.1"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you omit a character, NPM will always use this exact version whatever happens.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you always specify the exact version, the following problem I'll explain is already out of sight&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now let's say you have been working for a couple years on a project, and a new contributor clones and installs it.&lt;/p&gt;

&lt;p&gt;Since a lot of time passed, some of our dependencies must have received some new releases. As we explained earlier, depending on your semver convention, NPM will look for potential newer versions...&lt;/p&gt;

&lt;p&gt;And there we hit the wall, your project and the newly installed one are actually &lt;strong&gt;different&lt;/strong&gt; because some dependencies do not match the version specified in the package.json.&lt;/p&gt;

&lt;p&gt;Package-lock to the rescue. As his name implied, it'll &lt;strong&gt;lock&lt;/strong&gt; the version number in stone and will guarantee that the same package version is installed on every subsequent installation.&lt;/p&gt;

</description>
      <category>npm</category>
      <category>javascript</category>
    </item>
    <item>
      <title> "Point-and-click" continuous deployment with Cloud Run </title>
      <author>Katie McLaughlin</author>
      <pubDate>Thu, 10 Dec 2020 20:36:47 +0000</pubDate>
      <link>https://dev.to/googlecloud/point-and-click-continuous-deployment-with-cloud-run-4e4</link>
      <guid>https://dev.to/googlecloud/point-and-click-continuous-deployment-with-cloud-run-4e4</guid>
      <description>&lt;p&gt;On this edition of Serverless Expeditions, we take a look at how to deploy a GitHub repo on GitHub, though Cloud Run's new "point-and-click" integration, no Dockerfile required. &lt;/p&gt;

&lt;p&gt;Check out the video version of this blog post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Nf3KAY-i6zw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Say you've created a website for a travel blog, and you want to host it online. You've got your code on GitHub, and you have a README of instructions of how a friend could deploy a copy of your website: they have to have your programming language installed on their machine, install some package dependencies, then run a command to start a web server. &lt;/p&gt;

&lt;p&gt;If you want to host your website, you need a way that you can run these steps any time you want to update your code. This process is known as Continuous Deployment: when you commit a change to code a process is started that takes the new version of your code, performs the prerequisite tasks, and then starts a web server of your new code. &lt;/p&gt;

&lt;p&gt;Cloud Run, a serverless platform from Google Cloud, allows you to to bring any container to serve your website, no matter the programming language used inside, as long as it follows the &lt;a href="https://cloud.google.com/run/docs/reference/container-contract"&gt;Runtime Container contract&lt;/a&gt;: a web server must be listening for requests on &lt;code&gt;0.0.0.0&lt;/code&gt;, on port 8080 (or the configured &lt;code&gt;PORT&lt;/code&gt; environment variable). &lt;/p&gt;

&lt;p&gt;So, if you have a website, how do you turn it into a container? You could write a &lt;a href="https://docs.docker.com/engine/reference/builder/"&gt;Dockerfile&lt;/a&gt;, a set of instructions to build a container image based on your setup. But if you're using a common language like Python, Go, or Ruby, the instructions are going to be similar for many websites: copy your code into the container, install your dependencies, and start the web server. &lt;/p&gt;

&lt;p&gt;You can setup your Cloud Run service through the Google Cloud Console using the new &lt;a href="https://cloud.google.com/run/docs/continuous-deployment-with-cloud-build"&gt;walkthrough integration with Cloud Build&lt;/a&gt;: you connect your GitHub repo with Cloud Run, and set up your website to be built any time your code updates. &lt;/p&gt;

&lt;p&gt;However, instead of having to write a Dockerfile, you can now use &lt;a href="https://github.com/GoogleCloudPlatform/buildpacks"&gt;Buildpacks&lt;/a&gt;, a set of common instructions for popular programming languages that help you build your code into a container image that Cloud Run can deploy. &lt;/p&gt;

&lt;p&gt;If you're using a language like Go, Node.js, Python, Java or .NET Core, this will automatically be detected when building a container using Buildpacks. These common languages and their respective package installation processes are handled for you; all you need to do is provide the command to start your web server in a special file called Procfile. &lt;/p&gt;

&lt;p&gt;In the example in the video, Martin is using Flask, a Python-based web framework. To start his application, he runs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python3 -m flask run
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So his Procfile will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;web: python3 -m flask run
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The "web" in this case means "web server", and is the special term Buildpack looks for in a Procfile to start the web server. &lt;/p&gt;

&lt;p&gt;He should also configure his Flask app to listen on the expected IP and port. He can either add that to his app.run command, or in the Procfile itself as part of starting Flask:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;web: python3 -m flask run --host 0.0.0.0 --port $PORT
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As long as he adds this file to his codebase, he doesn't need to change anything else about his website to host it on Cloud Run. &lt;/p&gt;

&lt;p&gt;Once configured, any commits made to the GitHub repo -- from the command line, VSCode, GitHub's website, or anywhere else -- are automatically detected and deployed.&lt;/p&gt;




&lt;p&gt;To learn more about the concepts discussed in this video, read more: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://cloud.google.com/run/docs/reference/container-contract"&gt;Container runtime contract | Cloud Run Documentation&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://cloud.google.com/run/docs/continuous-deployment-with-cloud-build"&gt;Continuous deployment from Git using Cloud Build&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/GoogleCloudPlatform/buildpacks"&gt;GoogleCloudPlatform/buildpacks | GitHub.com&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can try some of the sample buildpack apps at &lt;a href="https://github.com/GoogleCloudPlatform/buildpack-samples"&gt;https://github.com/GoogleCloudPlatform/buildpack-samples&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#about-serverless-expeditions" class="anchor"&gt;
  &lt;/a&gt;
  About Serverless Expeditions
&lt;/h2&gt;

&lt;p&gt;Serverless Expeditions is a fun and cheeky video series that looks at what serverless means and how to build serverless apps with Google Cloud. &lt;/p&gt;

&lt;p&gt;Follow these hosts on dev.to at &lt;a href="https://dev.to/glasnt"&gt;@glasnt&lt;/a&gt; and &lt;a href="https://dev.to/momander"&gt;@martinomander&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>serverlessexpeditions</category>
      <category>cloudrun</category>
      <category>continuousdeployment</category>
      <category>buildpacks</category>
    </item>
    <item>
      <title>Black Devs &amp; Mentorships ⁠⠀</title>
      <author>Jonathan (Jon) Sowl</author>
      <pubDate>Thu, 10 Dec 2020 19:58:57 +0000</pubDate>
      <link>https://dev.to/thejonsowl/black-devs-mentorships-1djd</link>
      <guid>https://dev.to/thejonsowl/black-devs-mentorships-1djd</guid>
      <description>&lt;p&gt;⁠&lt;br&gt;
(although I dislike Race-based situations) There’s an increasing number of black people who look like me in the CompSci Industry, but those numbers still aren’t what I would love to see. It can be important to have mentors that understand and can really relate to what you are experiencing. It was nearly impossible for me to find that kind of person; someone that looks like me that I can see myself in.&lt;/p&gt;

&lt;p&gt;So, I really want to be that person for others.⁠⠀&lt;br&gt;
⁠⠀&lt;br&gt;
For those young, black aspiring professionals -if you message me, I’ll get back to you right away and answer any of your questions about anything and everything that I can share. Hit me up!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>My first virtual presentation</title>
      <author>Saija Saarenpää</author>
      <pubDate>Thu, 10 Dec 2020 19:27:54 +0000</pubDate>
      <link>https://dev.to/matrixx/my-first-virtual-presentation-2en0</link>
      <guid>https://dev.to/matrixx/my-first-virtual-presentation-2en0</guid>
      <description>&lt;p&gt;A couple of weeks ago I and my two colleagues from Vincit were having a streamed presentation about "Web development in an hour" in Mimmit Koodaa - This Is Not a Webinar event. In this post, I'm going to open the experience a little bit. If you're interested in the presentation itself or see the introduction of what the whole This Is Not a Webinar event was about, check out &lt;a href="https://dev.to/matrixx/quick-ramp-up-with-nodejs-5eon"&gt;my post on how to quickly ramp-up with NodeJS&lt;/a&gt;. I've been to many conferences and smaller events before, both as a guest and as a speaker, but never been in one where I can't be in touch with the audience. Judging by this single experience, it's quite a bit different than usual.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dPLeUDE_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lt17ak2qzha08u6h9h0a.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dPLeUDE_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lt17ak2qzha08u6h9h0a.jpg" alt="I and my two colleagues in Vincit t-shirts standing in front of Mimmit Koodaa banderol"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, we arrived at the venue. Siili Solutions had offered their office for the streaming. There were two studio rooms, as there were two stages with program streaming at the same time. One track was for more technical presentations and the other for some softer topics. There was a strict timeslot to arrive to be prepared in time, but to avoid too many speakers being present at the same time. We were escorted to a nice waiting room full of healthy snacks and drinks. Before our turn, there was some extra time which was used efficiently by photographing us in front of the Mimmit Kooodaa banderol and a few other places. I kind of felt like I've been in a nice gala event and suddenly felt bad for wearing my full stacker sneakers. Yeah, that's me on the left in the pic.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RjmAwj9l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i7fjccja1aa05pzhlp22.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RjmAwj9l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i7fjccja1aa05pzhlp22.jpg" alt="I and one of the studio crew installing a portable mic on my head"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the photo-op, we were escorted to the studios. Before going in, mics were installed. This was also an interesting operation because I have previously used only a handheld mic, or a one hanging in a stand. My head seems to be an odd-shaped for a head mic since it was not easy to get this stay as it should. I also eventually had to lose my right earring because it was almost guaranteed that it would have been causing some nasty sounds to the stream just by hitting the mic arm. The studio room itself was nice, you can see it in the cover photo of this post. It had some markings on the floor which guided which area is visible in the stream so we had some leeway on where to stand.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cDCwBRy6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/00hjmc8djvoei3ejz5q2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cDCwBRy6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/00hjmc8djvoei3ejz5q2.jpg" alt="I and my colleague waiting for our turn to present our part of the presentation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After our introduction, one of my colleagues started her presentation about ReactJS. At that point, I and my other colleague whose part in this presentation was to ask the questions from the stream chat on the Q&amp;amp;A section were waiting for our turn to be on the stage and discovered a horrible surprise. The slide notes were not present at all, we were on our own. You can see from our faces that we were following the situation carefully, but noticed our colleague was doing very well without the notes. This technical problem did not resolve during our whole presentation so I was forced to confront it as well, on my turn, when talking about NodeJS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eVuhpVbC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/h82xtzrlxhz0g2tizhvs.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eVuhpVbC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/h82xtzrlxhz0g2tizhvs.jpg" alt="Our whole presentation gang. One asking Q&amp;amp;A questions from the other two"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Apparently, I managed to do ok as well. I haven't seen the recording yet (they are coming later, though only in Finnish only, but I try to offer some captions there), but we got a lot of praise for having a clear and understandable presentation. Especially those who were not yet familiar with web development were very pleased that we managed to explain things without too much jargon. I think we covered our target audience pretty well, who were mostly people either changing career path to IT from something else or just otherwise new to IT. Even though afterward it came clear that we did well, I had plenty of doubts during the presentation. The most difficult part for me despite not having the slide notes was that I could not see any of the listeners' faces. I had no idea if they were laughing with me or were they already asleep. I'm excited to see if these virtual conferences and seminars are here to stay or just covering up the lack of physical ones during COVID-19. Anyway, it's always nice to have new experiences, and I would love to hear about yours in the comment section!&lt;/p&gt;

</description>
      <category>speaking</category>
      <category>webdev</category>
      <category>inclusion</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Why Vim is the best editor</title>
      <author>Toms Burgmanis</author>
      <pubDate>Thu, 10 Dec 2020 17:34:14 +0000</pubDate>
      <link>https://dev.to/tomburgs/why-vim-is-the-best-editor-1kc3</link>
      <guid>https://dev.to/tomburgs/why-vim-is-the-best-editor-1kc3</guid>
      <description>&lt;p&gt;I've been seeing articles from people claiming that VSCode is the best editor, so I'm here to tell you why they're wrong.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#that-first-line" class="anchor"&gt;
  &lt;/a&gt;
  That first line
&lt;/h2&gt;

&lt;p&gt;Since I wrote my first line of code a surprisingly long time has passed, and a lot has changed in the development world, but surprisingly little has changed in the code text editor world.&lt;/p&gt;

&lt;p&gt;I've used about every mainstream code text editor.&lt;/p&gt;

&lt;p&gt;I started with Notepad++, proceeded to Sublime which was my main editor for years, then Atom, briefly PHPStorm, eventually VSCode and finally Vim.&lt;/p&gt;

&lt;p&gt;After all that, I can confidently say that I've never been as happy with any other editor as I've been with Vim.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-i-made-the-switch" class="anchor"&gt;
  &lt;/a&gt;
  Why I made the switch
&lt;/h2&gt;

&lt;p&gt;It's easy to ask why anyone would make the switch, after all most people consider editors such as VSCode good enough for their needs and so did I.&lt;/p&gt;

&lt;p&gt;But it was already a pretty weird in the code editor space.&lt;/p&gt;

&lt;p&gt;Most people I was working with were using one of the modern fancy text editors, but people within the developer communities who I was following were almost all exclusively using Vim.&lt;/p&gt;

&lt;p&gt;An odd anomaly I thought, but I never dwelled on it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/S5E6VIkBAGujjfT0zz/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/S5E6VIkBAGujjfT0zz/giphy.gif" alt="It is what it is"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, one day I was watching George Hotz's live stream, I don't remember what he was working on, but it was interesting enough for me to sit through it.&lt;/p&gt;

&lt;p&gt;In this livestream he was using the Vim editor and I was completely blown away by how quickly he managed to make changes.&lt;/p&gt;

&lt;p&gt;He had already managed to make multiple changes to the file, saved it, and re-compiled the program before I even understood what he did.&lt;/p&gt;

&lt;p&gt;If I could be just half as productive I would already be happy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/qoHf1p7uXvna0/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/qoHf1p7uXvna0/giphy.gif" alt="Vim Strong"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#research-before-you-commit" class="anchor"&gt;
  &lt;/a&gt;
  Research before you commit
&lt;/h2&gt;

&lt;p&gt;Before I committed to this change, I had first done some research and I could only find good things people had to say about Vim.&lt;/p&gt;

&lt;p&gt;Many people described it as being able to write code at the speed of their thought, or Vim being an "extension of their fingers".&lt;/p&gt;

&lt;p&gt;So, I got into it, knowing I'll be dreadfully slow at first, but hoping that some day I'll be amazing at it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#journey-into-vim" class="anchor"&gt;
  &lt;/a&gt;
  Journey into Vim
&lt;/h2&gt;

&lt;p&gt;It was unlike any other editor I had used before.&lt;/p&gt;

&lt;p&gt;Compared to Vim everything I had used before was just a text editor with pretty syntax highlighting.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/xTv6kG7GUXfj2/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/xTv6kG7GUXfj2/giphy.gif" alt="Facepalm"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-productivity-is-great" class="anchor"&gt;
  &lt;/a&gt;
  The productivity is great
&lt;/h3&gt;

&lt;p&gt;Vim can do wonders with just a few keystrokes, which tends to be the main reason people love it.&lt;/p&gt;

&lt;p&gt;Only after a week of using Vim I was already at the same speed I was with regular editors, and after that I just got faster.&lt;/p&gt;

&lt;p&gt;I now occasionally manage to wow people when using it, which always feels great.&lt;/p&gt;

&lt;p&gt;It's also quite addictive to constantly try to find a quicker way to do things, it almost feels like a video game at times.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vscode-aint-got-nothing-on-vim" class="anchor"&gt;
  &lt;/a&gt;
  VSCode ain't got nothing on Vim
&lt;/h3&gt;

&lt;p&gt;I was concerned at first that I'll be missing out on some of the useful plugins I had in VSCode, but those concerns were completely unwarranted.&lt;/p&gt;

&lt;p&gt;The Vim community has developed a plugin for every language and its needs, which in many cases works far more seamlessly than the ones for VSCode or other editors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#should-you-switch" class="anchor"&gt;
  &lt;/a&gt;
  Should you switch?
&lt;/h2&gt;

&lt;p&gt;I advise you to do your own research, but in general I see no reason not to, however, do keep in mind that you're ultimately learning a programming language, so you need to stick with it to learn it.&lt;/p&gt;

&lt;p&gt;If programming is something you take seriously, then learning Vim is invaluable. However, if you just want to do your 8 hours and go home, it's probably not worth it for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/26FmQ6EOvLxp6cWyY/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/26FmQ6EOvLxp6cWyY/giphy.gif" alt="Do or do not"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#community-help" class="anchor"&gt;
  &lt;/a&gt;
  Community help
&lt;/h2&gt;

&lt;p&gt;I was recently introduced to an MIT lecture talking about Vim's philosophy and some of the basic features, so if you're interested in learning Vim, check it out &lt;a href="https://missing.csail.mit.edu/2020/editors/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I've also created a community discord server for Vim, so if you're a Vim user, please feel free to join by going &lt;a href="https://discord.gg/FxfJeYs5"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.vimgolf.com"&gt;Vim Golf&lt;/a&gt; anyone?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope you found this article interesting!&lt;/p&gt;

&lt;p&gt;Feel free to start editor war v2 in the comments.&lt;/p&gt;

&lt;p&gt;Happy Vimming 🧙.&lt;/p&gt;

</description>
      <category>vim</category>
      <category>vscode</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Rails gets out of the way when you need that most.</title>
      <author>Ben Halpern</author>
      <pubDate>Thu, 10 Dec 2020 17:04:02 +0000</pubDate>
      <link>https://dev.to/ben/rails-gets-out-of-the-way-when-you-need-that-most-b67</link>
      <guid>https://dev.to/ben/rails-gets-out-of-the-way-when-you-need-that-most-b67</guid>
      <description>&lt;p&gt;It's underrated how tough it can be to get a new thing off the ground, and how delicate that phase is.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vRgA2X92--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1303466766094553088/4-ZkBcZM_normal.jpg" alt="Ben Halpern 🌱 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Ben Halpern 🌱
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @bendhalpern
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Rails doesn’t scale, unless by scale you mean a $100B IPO.&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/Airbnb"&gt;@Airbnb&lt;/a&gt;, yet another org that rode &lt;a href="https://twitter.com/rails"&gt;@rails&lt;/a&gt; to the top of the mountain.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:48 PM - 10 Dec 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1337076813101748224" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-reply-action.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1337076813101748224" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-retweet-action.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      6
      &lt;a href="https://twitter.com/intent/like?tweet_id=1337076813101748224" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="/assets/twitter-like-action.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
      27
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;If a solution is optimized for getting to scale, and not for getting started, it might just be the wrong solution for getting to scale. Hopefully everything we use is capable of the scale we may eventually need of it, but that process will be a windy journey, and you can't even take the first step if you're stuck at the starting gate.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/ben" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bgwIhvJ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--1M1qt9Sp--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/1/f451a206-11c8-4e3d-8936-143d0a7e65bb.png" alt="ben image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/ben/im-ben-and-i-am-a-rails-developer-1j67" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;I’m Ben and I am a Rails developer&lt;/h2&gt;
      &lt;h3&gt;Ben Halpern ・ Apr 17 '18 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#ruby&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#rails&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;When AirBnB was figuring out what it was, trying new things, running Craigslist adds to try and get customers, Rails was there with some basic ways to provide models, views and controllers. It was opinionated, and ready for the challenge.&lt;/p&gt;

&lt;p&gt;For no specific API or pattern or technical solution, I'm still a very excited Ruby on Rails developer. I also &lt;em&gt;love&lt;/em&gt; a hypothetical scenario where Forem is eventually rewritten in some kind of way where we can package the whole thing into a tight, radically memory efficient binary. But for now, and probably forever, we're still riding the Rails.&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>startup</category>
      <category>news</category>
    </item>
    <item>
      <title>Hunt some strange numbers with Python.</title>
      <author>Fredy Somy</author>
      <pubDate>Thu, 10 Dec 2020 16:49:10 +0000</pubDate>
      <link>https://dev.to/fredysomy/hunt-some-strange-numbers-with-python-4fcm</link>
      <guid>https://dev.to/fredysomy/hunt-some-strange-numbers-with-python-4fcm</guid>
      <description>&lt;p&gt;We have heard about Different types of numbers and series.&lt;br&gt;
For example &lt;strong&gt;Ramanujan Number&lt;/strong&gt;, is the smallest number which can be expressed as the sum of two different cubes in two different ways.&lt;/p&gt;

&lt;p&gt;Today we are going to see some another strange types of numbers and how to generate it with Python.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-strange" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How strange!&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Lets take a look at this number ..&lt;br&gt;
The &lt;strong&gt;number 2520&lt;/strong&gt;  looks like a normal number like other numbers, but it is not like that.&lt;br&gt;
The strange thing is that it is divisible by numbers from 1 to 10, whether these numbers are odd or even !!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lets-see" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Lets see:&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;2520 ÷ 1 = 2520&lt;br&gt;
2520 ÷ 2 = 1260&lt;br&gt;
2520 ÷ 3 = 840&lt;br&gt;
2520 ÷ 4 = 630&lt;br&gt;
2520 ÷ 5 = 504&lt;br&gt;
2520 ÷ 6 = 420&lt;br&gt;
2520 ÷ 7 = 360&lt;br&gt;
2520 ÷ 8 = 315&lt;br&gt;
2520 ÷ 9 = 280&lt;br&gt;
2520 ÷ 10 = 252&lt;/p&gt;

&lt;p&gt;See its awesome... But there is many more numbers like that.&lt;br&gt;
Example: 5040,7560 &lt;/p&gt;



&lt;p&gt;Lets find more numbers like this by the way we Programmers do .. &lt;br&gt;
We are going to do it Programmatically with Python 🐍&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lets-get-started" class="anchor"&gt;
  &lt;/a&gt;
  Lets get started.
&lt;/h2&gt;

&lt;p&gt;Aim:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Find numbers which are divisible by numbers from 1-10&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;               


&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The Code is simple.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We are getting numbers from 1-100000(here) using for loop and range.&lt;/li&gt;
&lt;li&gt;We are initialising a variable to check for divisibility.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In the for loop we are checking the divisibility of the number with each numbers from 1-10.&lt;/li&gt;
&lt;li&gt;If a number is divisible the it will increment check by 1.&lt;/li&gt;
&lt;li&gt;Finaly we check if variable check is equal to 10 ( Means that the numbers is divisible by each in 1-10)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Final Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="mi"&gt;2520&lt;/span&gt;
&lt;span class="mi"&gt;5040&lt;/span&gt;
&lt;span class="mi"&gt;7560&lt;/span&gt;
&lt;span class="mi"&gt;10080&lt;/span&gt;
&lt;span class="mi"&gt;12600&lt;/span&gt;
&lt;span class="mi"&gt;15120&lt;/span&gt;
&lt;span class="mi"&gt;17640&lt;/span&gt;
&lt;span class="mi"&gt;20160&lt;/span&gt;
&lt;span class="mi"&gt;22680&lt;/span&gt;
&lt;span class="mi"&gt;25200&lt;/span&gt;
&lt;span class="mi"&gt;27720&lt;/span&gt;
&lt;span class="mi"&gt;30240&lt;/span&gt;
&lt;span class="mi"&gt;32760&lt;/span&gt;
&lt;span class="mi"&gt;35280&lt;/span&gt;
&lt;span class="mi"&gt;37800&lt;/span&gt;
&lt;span class="mi"&gt;40320&lt;/span&gt;
&lt;span class="mi"&gt;42840&lt;/span&gt;                                         &lt;span class="mi"&gt;45360&lt;/span&gt;
&lt;span class="mi"&gt;47880&lt;/span&gt;
&lt;span class="mi"&gt;50400&lt;/span&gt;
&lt;span class="mi"&gt;52920&lt;/span&gt;                                         &lt;span class="mi"&gt;55440&lt;/span&gt;
&lt;span class="mi"&gt;57960&lt;/span&gt;
&lt;span class="mi"&gt;60480&lt;/span&gt;
&lt;span class="mi"&gt;63000&lt;/span&gt;
&lt;span class="mi"&gt;65520&lt;/span&gt;
&lt;span class="mi"&gt;68040&lt;/span&gt;
&lt;span class="mi"&gt;70560&lt;/span&gt;
&lt;span class="mi"&gt;73080&lt;/span&gt;
&lt;span class="mi"&gt;75600&lt;/span&gt;
&lt;span class="mi"&gt;78120&lt;/span&gt;
&lt;span class="mi"&gt;80640&lt;/span&gt;
&lt;span class="mi"&gt;83160&lt;/span&gt;
&lt;span class="mi"&gt;85680&lt;/span&gt;
&lt;span class="mi"&gt;88200&lt;/span&gt;
&lt;span class="mi"&gt;90720&lt;/span&gt;
&lt;span class="mi"&gt;93240&lt;/span&gt;
&lt;span class="mi"&gt;95760&lt;/span&gt;
&lt;span class="mi"&gt;98280&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;That is for today guys .Thanks for reading the blog.&lt;/p&gt;

</description>
      <category>python</category>
      <category>numbers</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>How did you do this year with content creation?</title>
      <author>Stephanie Morillo</author>
      <pubDate>Thu, 10 Dec 2020 16:36:39 +0000</pubDate>
      <link>https://dev.to/radiomorillo/how-did-you-do-this-year-with-content-creation-a5g</link>
      <guid>https://dev.to/radiomorillo/how-did-you-do-this-year-with-content-creation-a5g</guid>
      <description>&lt;p&gt;Hi all! With the end of 2020 just a few weeks away, I've started doing my end-of-year reviews.&lt;/p&gt;

&lt;p&gt;My questions to you all: &lt;strong&gt;how did you do this year with content creation, and what do you plan on doing differently next year?&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>writing</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>[Year End] What was the best book you read this year?</title>
      <author>Saloni Goyal</author>
      <pubDate>Thu, 10 Dec 2020 16:10:05 +0000</pubDate>
      <link>https://dev.to/blender/what-was-the-best-book-you-read-this-year-4n9k</link>
      <guid>https://dev.to/blender/what-was-the-best-book-you-read-this-year-4n9k</guid>
      <description>

</description>
      <category>discuss</category>
      <category>books</category>
      <category>yearend</category>
    </item>
    <item>
      <title>GraphQL: change for the best</title>
      <author>Anastasiia</author>
      <pubDate>Thu, 10 Dec 2020 15:58:38 +0000</pubDate>
      <link>https://dev.to/soulwife/graphql-change-for-the-best-4pf6</link>
      <guid>https://dev.to/soulwife/graphql-change-for-the-best-4pf6</guid>
      <description>&lt;p&gt;Today I’d like to share with you real-life code and schema example how one can successfully integrate GraphQL into PHP and how to optimize the result. At the moment it’s hardly unlikely to meet web-developer, who doesn’t know or doesn’t hear  a thing  about GraphQL. And it’s understandable: more and more developers choose to begin or continue to use it in their projects due to various advantages. Such as single end-point, extendable hierarchy, strict types, flexibility among others.&lt;br&gt;
Despite the well-known fact that we are living and developing in the stackoverflow and medium era, each of us is constantly stuck with a ‘can not be googled’ type of task once in a while.  Usually it happens when you want or should to create something big or try the new approach and in those cases you need as much information as one can get. The documentation always comes in handy in those cases and one begins with deep dive into it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3JYi3LR2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s6f6qvag6v6hiip5riij.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3JYi3LR2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/s6f6qvag6v6hiip5riij.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This step is totally where you got covered with any type of information from the official site. But theory is cheap, you are not going to be getting paid for it, right? So, on the next step, that includes taking off pink glasses and turning theory into a practice, you are totally limited by project language or framework. Today I’d like to present a solution for using GraphQL with PHP as a server side language. You are not going to hear a detailed explanation of a GraphQL documentation or PHP ports for GraphQL. What you will definitely get in detail is an example of an GraphQL integration into a PHP project, like one you can see on your screen.  I mean, if someone had provided me the full example of an enterprise project three years ago, I would be more than happy. But no, it was not gonna happen then, but now I have one for you. More to it, I’m going to describe how you can solve the most common issues that you are most likely to get into and the most working ways to optimize queries. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LM7mHfu7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d2izv0b70takxm6kt4gh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LM7mHfu7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/d2izv0b70takxm6kt4gh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Firstly, you should choose a GraphQL port that you’ll be working with. To fulfill that purpose, one can simply open the official GraphQL site and look for the PHP section in it. You’ll see a short list with three general-use libraries and a few of framework-use. I am actively using the first one from the &lt;a href="https://github.com/webonyx/graphql-php"&gt;WebOnyx&lt;/a&gt; for about three years for now and don’t have any major issues for now. They have a bit specific error handling as for me, but we solved this with a custom error handler. &lt;br&gt;
In addition to the vendor library, you’ll most likely be in need for the schema &lt;a href="https://github.com/2fd/graphdoc"&gt;documentation generator&lt;/a&gt;. This one seems to be a perfect fit for all GraphQL projects that I’ve worked with. It’s simple in use and setup and your schemes will be always up to date (while you run on deploy the specific command for it, of course).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8u2rIPP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3ec54zn0vivc2csr4ij9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8u2rIPP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/3ec54zn0vivc2csr4ij9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Meanwhile, for a ready and working GraphQL API you’ll need:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To design and to build request and response resolvers, design and handle schemes and data view models&lt;/li&gt;
&lt;li&gt;Choose the most fitting pagination invariant and integrate it in code&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;ResultHandler&lt;/code&gt; and an &lt;code&gt;ErrorHandler&lt;/code&gt; (it’s nothing easy in this world)&lt;/li&gt;
&lt;li&gt;Create endpoint&lt;/li&gt;
&lt;li&gt;Send a query&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s review each step in detail:&lt;/p&gt;

&lt;p&gt;Well, let’s assume you have a GraphQL request parameters and know what response it should return in its body. So now you should resolve this specific request into a specific response. The main tasks of any Resolver are “query a request” and 'return a response', that’s why it has only four methods: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;query&lt;/code&gt; Here you can wrap parent vendor query method with necessary redefining of ‘resolve’ param) &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;createRequest&lt;/code&gt; In this method we can shape the request, that we have from the endpoint by adding query variables and query body as separate data attributes&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;createResponse&lt;/code&gt; The perfect method for initializing assemblers for the usecases (as analogy, I can describe it with calling application service). Use case in general in DDD is an Application Service. But besides it we additionally have to integrate the middle-ware layer (application validation check, do authorization check, data access check, etc.) and initialize Use Case with data. In general, we need to assemble query data into Use Case and return response from it. So, I call it &lt;code&gt;UseCaseAssembler&lt;/code&gt;. You can read about DDD and it's live project implementation &lt;a href="https://dev.to/soulwife/real-life-ddd-in-an-onionshell-3ohb"&gt;here&lt;/a&gt;.
&lt;/li&gt;
&lt;li&gt;and the last method is an abstract method &lt;code&gt;response&lt;/code&gt; that needs to be implemented in each specific Resolver.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, to get a better understanding, we can get a look into specific query example. Well, you have an entity Wishlist, an object of which you need to create. Creation query may look exactly like on your screens. Each query contains fields of two types: type and arguments. The type tells us that we are going to get a Wishlist interface and structured data in response as a result. And the second field type is ‘arguments’, where you obviously have the set of input variables. You can always get a good look into input variables types on the official GraphQL site or WebOnyx as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resolver" class="anchor"&gt;
  &lt;/a&gt;
  Resolver
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xPLK4frf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hr0ep0b0q2b66cel1mcg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xPLK4frf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hr0ep0b0q2b66cel1mcg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#createwishlistresolverphp" class="anchor"&gt;
  &lt;/a&gt;
  CreateWishlistResolver.php
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KUX4-Txw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m7eawfo385wfqfkzvjsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KUX4-Txw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m7eawfo385wfqfkzvjsk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Wishlist&lt;/code&gt; schema may look like that one. Any schema should have an interface and object that implements it. So, there are Wishlist interface and Wishlist object. The various output GraphQL types are always there: on the &lt;a href="https://graphql.org/"&gt;official site&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wishlistschemaphp" class="anchor"&gt;
  &lt;/a&gt;
  WishlistSchema.php
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5mikCC5Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yk9a4wznigra7buynndl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5mikCC5Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yk9a4wznigra7buynndl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If GraphQL adepts talking about pagination, there is always a war. The infinite war between two clans: the first one is 'Cursor' and the second one is 'Offset'. In truth, as usual with almost all wars sides, they have not so many differences in schema. The main difference will be at looking up in persistent storage. 'Cursor' charter looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8VWEI8l1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sgs89q19nmm5m7hnnszb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8VWEI8l1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sgs89q19nmm5m7hnnszb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Meanwhile, there is a light at the end of a tunnel. If you roll a dice and choose a pagination side, you should create a &lt;code&gt;PageInfo&lt;/code&gt; schema class (it looks exactly like &lt;code&gt;WishlistSchema&lt;/code&gt;, that you saw before). And… understand, that method render is not gonna help us anymore, just because it fits only one data record and doesn’t have pagination in it. So, that’s a moment when you understand that you're gonna need two types of response presenters: for one node and another one, that fits the collection of nodes. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#collectionpresenterphp" class="anchor"&gt;
  &lt;/a&gt;
  CollectionPresenter.php
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ReNz8i2x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/62bdpggvy10612tjyg9u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ReNz8i2x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/62bdpggvy10612tjyg9u.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nodepresenterphp" class="anchor"&gt;
  &lt;/a&gt;
  NodePresenter.php
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OZC4_8og--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p1zhhcp0rqj3n3zyc9md.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OZC4_8og--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/p1zhhcp0rqj3n3zyc9md.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Naturally, our frontend developers nicely ask or not so nicely demand 24/7 valid schema and fine-structured handled errors, preferably with error codes in case if something goes wrong. As you can notice from the render methods on previous screens, there is always  a method &lt;code&gt;getResultFields()&lt;/code&gt; in each of the render method. As one can suppose from the method name, it returns the schema of general result fields. Any query result is going to have this schema. In case of any errors it will consist of ‘errors’ set of fields and you work with response respectively to it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#abstractpresenterphp" class="anchor"&gt;
  &lt;/a&gt;
  AbstractPresenter.php
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SGff-EXP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g0h5cfi8uv6in32avuo7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SGff-EXP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/g0h5cfi8uv6in32avuo7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The result handling schema may look something like you see on display:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resultschemaphp" class="anchor"&gt;
  &lt;/a&gt;
  ResultSchema.php
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OQmTA3Nz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5fvagfguz3uusiun0gbb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OQmTA3Nz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5fvagfguz3uusiun0gbb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, as I explained earlier, we definitely need to return an error message and code in case of any errors, so whoever gets a response can notice that something went wrong and may handle errors accordingly with their codes. That's how we provide the maximum possible error handling strategy and do not leave any of ‘unpredictable’ for the API user cases as a result. Your frontend engineers will thank you for that, you’ll see. It’s worse to mention, that GraphQL schema errors (like wrong type or absence of required field) are going to be catched and returned by the vendor library, so you can add your own Exception for those  types of errors. It definitely helps you to get human readable exception traces. &lt;/p&gt;

&lt;p&gt;We have two points left from the our conquer GraphQL plan: make an endpoint and send a query.&lt;/p&gt;

&lt;p&gt;To make an endpoint it’s a specific task, I’ll explain how you can possibly do it with our case. Historically, we are using Laravel, so our endpoint is a one and only controller with two methods. The first one is for all GraphQL queries, obviously and the second one &lt;code&gt;graphQLResponse&lt;/code&gt; is about making a PSR7 json Response from the response data of the query.&lt;/p&gt;

&lt;p&gt;Meanwhile, there's only one thing left. We need to actually send a query to the endpoint URL. We are actively using Insomnia and Postman and I can recommend both of them. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#controllerphp" class="anchor"&gt;
  &lt;/a&gt;
  Controller.php
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jFx_HCWQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/52s78o929l5fvt2mcjs7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jFx_HCWQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/52s78o929l5fvt2mcjs7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Well, congratulations! You can do a full circle of GraphQL query in PHP. &lt;br&gt;
Hope that you have learned some practical or theoretical things that come in handy to those who want to use GraphQL with PHP or already using it. Every cook praises his own broth. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Keep your code clean and yourself safe and sound.&lt;/em&gt; &lt;/p&gt;

</description>
      <category>graphql</category>
      <category>php</category>
      <category>codeexample</category>
    </item>
    <item>
      <title>6 Things Programmers Can Learn From Writers</title>
      <author>Kris Guzman</author>
      <pubDate>Thu, 10 Dec 2020 15:05:33 +0000</pubDate>
      <link>https://dev.to/krisguzman_dev/6-things-programmers-can-learn-from-writers-5806</link>
      <guid>https://dev.to/krisguzman_dev/6-things-programmers-can-learn-from-writers-5806</guid>
      <description>&lt;p&gt;&lt;span class="s"&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-things-programmers-can-learn-from-writers" class="anchor"&gt;
  &lt;/a&gt;
  6 Things Programmers Can Learn From Writers
&lt;/h1&gt;

&lt;p&gt;The art of writing actually has a lot to teach programmers about good software. Here are six tips you learn as a writer that can also be used by developers.&lt;/p&gt;

&lt;p&gt;&lt;span class="jh fr gs ji jj jk"&gt;&lt;/span&gt;&lt;span class="jh fr gs ji jj jk"&gt;&lt;/span&gt;&lt;span class="jh fr gs ji jj"&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-the-first-draft-will-probably-suck" class="anchor"&gt;
  &lt;/a&gt;
  1. The First Draft Will Probably Suck
&lt;/h1&gt;

&lt;p&gt;When writing, your first draft is usually… not great. As you get better at writing, the quality of your first draft will improve as well. Fewer and fewer adjustments will be needed over time, but the point remains: Your first draft will almost always be the worst version.&lt;/p&gt;

&lt;p&gt;Programming is no different! Accept that your first draft is exactly that — a draft. That doesn’t mean you don’t put your best effort into it, but you shouldn’t be prematurely optimizing and spending a bunch of time “beautifying” your code. There is a high chance that no matter what you do, when you come back to your desk on the next go-around, you will have thought of a far better solution.&lt;/p&gt;

&lt;p&gt;&lt;span class="jh fr gs ji jj jk"&gt;&lt;/span&gt;&lt;span class="jh fr gs ji jj jk"&gt;&lt;/span&gt;&lt;span class="jh fr gs ji jj"&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-proof-read-your-own-work" class="anchor"&gt;
  &lt;/a&gt;
  2. Proof Read Your Own Work
&lt;/h1&gt;

&lt;p&gt;This is an obvious one. Anyone can usually tell when a writer didn’t even proofread their own work (spoiler alert, I didn't proof read this article!). The same applies to programmers.&lt;/p&gt;

&lt;p&gt;Typos, leftover console logs, bugs so obvious you can catch them at a glance — these are all typically red flags in a code review that the programmer didn’t do much proofreading of their own work.&lt;/p&gt;

&lt;p&gt;Proof testing your work is equally important. If you are submitting a feature as ready for user testing/review, make sure it actually works. Even if it's a one line change, I promise you that the one time you decide to skip the verification step, it's going to break something in the app against all odds.&lt;/p&gt;

&lt;p&gt;&lt;span class="jh fr gs ji jj jk"&gt;&lt;/span&gt;&lt;span class="jh fr gs ji jj jk"&gt;&lt;/span&gt;&lt;span class="jh fr gs ji jj"&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-then-let-others-proof-read-your-work" class="anchor"&gt;
  &lt;/a&gt;
  3. Then Let Others Proof Read Your Work
&lt;/h1&gt;

&lt;p&gt;Great writers usually have someone proofread their work. Sometimes no matter how much you look over your own work, you just can’t catch the obvious (or not so obvious) issues. Programming in a team is no different. The whole concept of “code reviews” revolves around this one idea of having others proofread your work to minimize problems.&lt;/p&gt;

&lt;p&gt;&lt;span class="jh fr gs ji jj jk"&gt;&lt;/span&gt;&lt;span class="jh fr gs ji jj jk"&gt;&lt;/span&gt;&lt;span class="jh fr gs ji jj"&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-there-will-probably-be-a-second-or-third-draft" class="anchor"&gt;
  &lt;/a&gt;
  4. There Will Probably Be a Second or Third Draft
&lt;/h1&gt;

&lt;p&gt;When you had to write essays in school, how often did you submit your first draft and never have to touch it again? I assume (hope?) that has never happened. I remember having to revise my work two or three times before I was allowed to submit it as “complete.”&lt;/p&gt;

&lt;p&gt;Programmers often tie their ego to getting their code right the first time (code interviews and competitions kind of push that).&lt;/p&gt;

&lt;p&gt;Considering that an error-free piece of software has never been written, I’d say that kind of thinking will set you up for disappointment.&lt;/p&gt;

&lt;p&gt;Your pull request may get rejected even when you think you did everything perfectly. That’s OK. You should be happy someone has given you the opportunity to learn and improve. We all have something to learn from each other.&lt;/p&gt;

&lt;p&gt;Now, you may submit a second pull request and get rejected &lt;em&gt;yet&lt;/em&gt; &lt;em&gt;again&lt;/em&gt;. OK, I’ll admit that hurts the ego a bit, but it’s the same principle: Learn, improve, repeat.&lt;/p&gt;

&lt;p&gt;&lt;span class="jh fr gs ji jj jk"&gt;&lt;/span&gt;&lt;span class="jh fr gs ji jj jk"&gt;&lt;/span&gt;&lt;span class="jh fr gs ji jj"&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-a-finished-piece-is-better-than-a-perfect-work-in-progress" class="anchor"&gt;
  &lt;/a&gt;
  5. A Finished Piece Is Better Than a Perfect Work in Progress
&lt;/h1&gt;

&lt;p&gt;The article that is never complete will always be worse than the article never written. Have you ever &lt;em&gt;not&lt;/em&gt; submitted an essay to your teacher because you were perfecting it and received an A+ as a grade? Hell no. You got a big fat F for failure.&lt;/p&gt;

&lt;p&gt;Coding is absolutely no different. If your software takes two years to build because you want it to be perfect, you’ve probably already failed (and a year ago at that).&lt;/p&gt;

&lt;p&gt;Accept that even your completed work won’t be a masterpiece and you will still be iterating on it long after you considered it done. The most important theme shared between writers and developers is that it is important to get feedback as soon as possible so we can make the necessary improvements sooner rather than later.&lt;/p&gt;

&lt;p&gt;&lt;span class="jh fr gs ji jj jk"&gt;&lt;/span&gt;&lt;span class="jh fr gs ji jj jk"&gt;&lt;/span&gt;&lt;span class="jh fr gs ji jj"&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-keep-a-cohesive-narrative" class="anchor"&gt;
  &lt;/a&gt;
  6. Keep a Cohesive Narrative
&lt;/h1&gt;

&lt;p&gt;Have you ever read an article that can’t seem to stay on track? It’s like a roller coaster, but on a roller coaster, you enjoy the random twists, turns, and loops. In an article where all you want is information (or a good story), this is usually not desirable.&lt;/p&gt;

&lt;p&gt;Something that requires a lot of skill in both writers and developers is the ability to elegantly flow the narrative from start to finish. To make the reader feel like they went on a journey, even if all they read was “I watched paint dry yesterday,” is part of what makes the top writers here on Medium so successful.&lt;/p&gt;

&lt;p&gt;Programmers may be thinking, “Code should be optimal and easy to read — not tell a story.”&lt;/p&gt;

&lt;p&gt;Is that so? What if I told you code that tells a story is easier to read? There is a reason humans are so responsive to a well-told story. Just check out this &lt;a href="https://www.wired.com/2011/03/why-do-we-tell-stories/"&gt;article on the psychology of storytelling.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When your code has a clear start, middle, and end, it naturally forms a story (an admittedly boring one), which makes it easier for other programmers to follow it.&lt;/p&gt;

&lt;p&gt;If you really want to level up your programming skills, see if you can write code that is not only optimal but tells a narrative as well. I think you will find that others have a much easier time navigating your code.&lt;/p&gt;

&lt;p&gt;&lt;span class="jh fr gs ji jj jk"&gt;&lt;/span&gt;&lt;span class="jh fr gs ji jj jk"&gt;&lt;/span&gt;&lt;span class="jh fr gs ji jj"&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Writing and programming have more in common than you may have thought.&lt;/p&gt;

&lt;p&gt;See more connections? Add them in the comments section!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>codequality</category>
    </item>
  </channel>
</rss>
