<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>ES6 Arrow Function Syntax Explained Simply</title>
      <author>Dan V</author>
      <pubDate>Sun, 18 Apr 2021 13:28:34 +0000</pubDate>
      <link>https://dev.to/dan_v/es6-arrow-function-syntax-explained-simply-77j</link>
      <guid>https://dev.to/dan_v/es6-arrow-function-syntax-explained-simply-77j</guid>
      <description>&lt;h1&gt;
  &lt;a href="#es6-arrow-function-syntax-explained-simply"&gt;
  &lt;/a&gt;
  ES6 Arrow Function Syntax Explained Simply
&lt;/h1&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@flowforfrank?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Ferenc Almasi&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This is a JavaScript arrow function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const getUserIds = users =&amp;gt; users.map(user =&amp;gt; user.id)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If your response to the above code is, "What, what?!", then read on! Even if you do understand what's going on, you may still pick up a thing or two along the way.&lt;/p&gt;

&lt;p&gt;Some initial questions you may have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is it doing?!&lt;/li&gt;
&lt;li&gt;What is it returning (if anything)?&lt;/li&gt;
&lt;li&gt;What does the arrow mean?&lt;/li&gt;
&lt;li&gt;What is &lt;code&gt;users&lt;/code&gt; doing there?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article, I want to go over the basics of arrow functions to help new JavaScript developers understand what is &lt;em&gt;actually&lt;/em&gt; going on here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-quick-bit-of-history"&gt;
  &lt;/a&gt;
  A quick bit of history
&lt;/h2&gt;

&lt;p&gt;ES6 was the 6th Edition of JavaScript released in 2015. It is also known as "ECMAScript 6" or "EMCAScript2015". ES6 was a major revision of JavaScript, and introduced new syntax to help developers write complex code in a simpler form.&lt;/p&gt;

&lt;p&gt;One of these new additions was arrow function syntax. Arrow function syntax (or just "arrow syntax") provides a different method of writing functions, in a way that is often shorter and mostly quicker to write and comprehend once you've grasped how the syntax works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#normal-functions-vs-arrow-functions"&gt;
  &lt;/a&gt;
  "Normal" functions vs arrow functions
&lt;/h2&gt;

&lt;p&gt;Here is a simple &lt;strong&gt;function declaration&lt;/strong&gt; in basic JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function times10(number) {
  return number * 10;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the same thing as an &lt;strong&gt;arrow function&lt;/strong&gt; using ES6 arrow syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const times10 = number =&amp;gt; number * 10;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's pick out the main, visible differences in the arrow function:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There are no curly braces (&lt;code&gt;{}&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt; There are no parentheses (or "brackets") around the function parameter (i.e. &lt;code&gt;= user =&amp;gt;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Arguably, the syntax is a bit more &lt;em&gt;streamlined&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that I use the word "streamlined", and not "better" or "simpler".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-is-this-useful"&gt;
  &lt;/a&gt;
  How is this useful?
&lt;/h2&gt;

&lt;p&gt;Perhaps you're not convinced that the use of arrow syntax in the above example is providing anything much more useful than the "normal" way of writing functions. In this case, I'd tend to agree. However, arrow functions begin to show their use in more complex scenarios.&lt;/p&gt;

&lt;p&gt;Take the below function, which gets ids from an array of user data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;getUserIds(users) {
  return users.map(function(user) {
    return user.id;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using arrow syntax, we can choose to write this function as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const getUserIds = users =&amp;gt; users.map(user =&amp;gt; user.id);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In some ways, you may find the arrow function more readable and probably quicker write too. Try writing each function in a code editor and see how they compare.&lt;/p&gt;

&lt;p&gt;Now, let's break down what is happening in the arrow function's single line of code: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We are &lt;strong&gt;defining a variable&lt;/strong&gt; called &lt;code&gt;getUserIds&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;value&lt;/strong&gt; of &lt;code&gt;getUserIds&lt;/code&gt; is &lt;strong&gt;a function definition&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;That&lt;/em&gt; function takes an argument named &lt;code&gt;users&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;The function uses a JavaScript array function called &lt;code&gt;map()&lt;/code&gt; to iterate over each item in the &lt;code&gt;users&lt;/code&gt; array and &lt;strong&gt;return a new array&lt;/strong&gt; containing only the user ids.&lt;/li&gt;
&lt;li&gt;The function &lt;strong&gt;returns the array that was returned&lt;/strong&gt; by the map() function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All on one line. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-did-we-get-here"&gt;
  &lt;/a&gt;
  How did we get here?
&lt;/h2&gt;

&lt;p&gt;Arrow function syntax is flexible, and we could have written this function in a few different ways, including being more verbose with our syntax. &lt;/p&gt;

&lt;p&gt;For example, each of these functions when called would map over the &lt;code&gt;users&lt;/code&gt; array and return an array of user ids:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ✔️
const getUserIds1 = (users) =&amp;gt; {
  return users.map(user =&amp;gt; user.id);
}

// ✔️
const getUserIds2 = users =&amp;gt; {
  return users.map(user =&amp;gt; user.id);
}

// ✔️
const getUserIds3 = users =&amp;gt; users.map(user =&amp;gt; user.id)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the second example, we were able to remove the parentheses from around the &lt;code&gt;users&lt;/code&gt; parameter, and it works exactly the same.&lt;/p&gt;

&lt;p&gt;Why do this? Arguably: for simplicity, though it is entirely optional. Note that &lt;strong&gt;this only works&lt;/strong&gt; for functions with a &lt;strong&gt;single parameter&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the third example we stripped the syntax down further, removing the braces (&lt;code&gt;{}&lt;/code&gt;) and the &lt;code&gt;return&lt;/code&gt; keyword. This is called &lt;strong&gt;implicit return&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiple-parameters"&gt;
  &lt;/a&gt;
  Multiple parameters
&lt;/h3&gt;

&lt;p&gt;If your function has multiple parameters (takes multiple arguments), you must use parentheses:&lt;/p&gt;

&lt;p&gt;❌ Will throw a syntax error&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const getUserIds4 = users, prefix =&amp;gt; {
  return users.map(user =&amp;gt; prefix + user.id);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;✔️ This is fine&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const getUserIds5 = (users, prefix) {
  return users.map(user =&amp;gt; prefix + user.id);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#argument-destructuring"&gt;
  &lt;/a&gt;
  Argument destructuring
&lt;/h4&gt;

&lt;p&gt;You must however always use parentheses when using argument destructuring:&lt;/p&gt;

&lt;p&gt;❌ Will throw a syntax error&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const user = { id: 1, name: "Daniel" }
const getName = { name } =&amp;gt; name;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;✔️ This is fine&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const user = { id: 1, name: "Daniel" }
const getName = ({ name }) =&amp;gt; name;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#implicit-return"&gt;
  &lt;/a&gt;
  Implicit return
&lt;/h3&gt;

&lt;p&gt;Arrow functions without braces will return the last value returned within it's own scope by default. Note that you should &lt;em&gt;not&lt;/em&gt; use the &lt;code&gt;return&lt;/code&gt; keyword when writing an arrow function without braces.&lt;/p&gt;

&lt;p&gt;Here are some examples of returning (or not) from arrow functions:&lt;/p&gt;

&lt;p&gt;Here is our &lt;code&gt;users&lt;/code&gt; data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const users = [{id: 1, name: "Aaron"}, {id: 2, name: "Maya"}]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;❌ Using &lt;code&gt;return&lt;/code&gt; without braces&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const getUserIds6 = (users) =&amp;gt; return users.map(user =&amp;gt; user.id)
                                   ^^^^^^

Uncaught SyntaxError: Unexpected token 'return'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;✔️ Implicit return&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const getUserIds7 = (users) =&amp;gt; users.map(user =&amp;gt; user.id)

getUserIds7(users)

// [1, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;✔️ Explicit return&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const getUserIds8 = (users) =&amp;gt; {
  return users.map(user =&amp;gt; user.id);
}

getUserIds8(users)

// [1, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;✔️ Explicitly returning nothing (or &lt;code&gt;undefined&lt;/code&gt;, to be precise)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const getUserIds9 = (users) =&amp;gt; {
  users.map(user =&amp;gt; user.id);
}

getUserIds9(users)

// undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#anonymous-functions"&gt;
  &lt;/a&gt;
  Anonymous functions
&lt;/h3&gt;

&lt;p&gt;We can also use arrow syntax to write anonymous functions. I won't go in-depth on anonymous functions here, but this is what they look like in regular and arrow syntax:&lt;/p&gt;

&lt;p&gt;Anonymous function declaration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function(x, y) { 
  return x + y;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Anonymous function expression (implicit return):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function(x, y) { x + y }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Anonymous arrow functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(x, y) =&amp;gt; x + y;
// Returns x plus y

(x) =&amp;gt; x * 100;
// Returns x times 100

x =&amp;gt; x
// Returns x

x =&amp;gt; {
  return x;
}
// Returns x

const z = 99;
() =&amp;gt; z + 1;
// Returns 100;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#ok-but-what-does-the-arrow-mean"&gt;
  &lt;/a&gt;
  Ok, but what does the arrow mean?!
&lt;/h2&gt;

&lt;p&gt;The arrow is characters which form syntax which Node or the browser will recognise, just like &lt;code&gt;===&lt;/code&gt; or &lt;code&gt;.&lt;/code&gt; or &lt;code&gt;+&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;It says: "and now I'm going to tell you what this function does".&lt;/p&gt;

&lt;p&gt;A nice way to think about it &lt;strong&gt;semantically&lt;/strong&gt; is picturing the arrow as the conveyer belt which moves the arguments through the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const add = (a, b) =&amp;gt; a + b;
// Take these things, (a,b), and move them through 
// in this direction =&amp;gt; into the function, leaving 
// the result on the other side.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#some-caveats"&gt;
  &lt;/a&gt;
  Some caveats
&lt;/h2&gt;

&lt;p&gt;Arrow functions are not that different from regular functions. Most of time, you can use them interchangeably without fear of consequence.&lt;/p&gt;

&lt;p&gt;However, there are a few technical points you should be aware of when using arrow functions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-function-hoisting"&gt;
  &lt;/a&gt;
  No function hoisting
&lt;/h3&gt;

&lt;p&gt;Functions written using the &lt;code&gt;function&lt;/code&gt; keyword are "hoisted" at runtime. In simple terms, this means the engine running your code (i.e. Node) will take these functions and store them in memory before executing the rest of your code.&lt;/p&gt;

&lt;p&gt;✔️ So you can do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;multiply(5, 2)
// 10

function multiply(x, y) {
  return x * y;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We've written our code in a way where we're calling &lt;code&gt;multiply()&lt;/code&gt;  before defining what &lt;code&gt;multiply()&lt;/code&gt; is. &lt;/p&gt;

&lt;p&gt;But because we've used the &lt;code&gt;function&lt;/code&gt; keyword, at runtime &lt;code&gt;multiply()&lt;/code&gt; will &lt;strong&gt;hoisted&lt;/strong&gt;; it will be read and stored in memory (&lt;em&gt;defined&lt;/em&gt;) before the line &lt;code&gt;multiply(5, 2)&lt;/code&gt; is executed.&lt;/p&gt;

&lt;p&gt;❌ But you can't do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;multiply(5, 2) // TypeError: multiply is not a function

const multiply = (x, y) =&amp;gt; {
  return x * y;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because we've used arrow syntax, &lt;code&gt;multiply()&lt;/code&gt; has not been hoisted. So when the runtime engine gets to &lt;code&gt;multiply(5, 2)&lt;/code&gt;, it sees that &lt;code&gt;multiply()&lt;/code&gt; is not defined at this point in the execution and throws an error.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-raw-this-endraw-"&gt;
  &lt;/a&gt;
  No &lt;code&gt;this&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Arrow functions do not have access to &lt;code&gt;this&lt;/code&gt;. This is perhaps best explained with examples.&lt;/p&gt;

&lt;p&gt;✔️ Using a normal function to access &lt;code&gt;this&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const myObject1 = {
  x: 10,
  getX: function () {
    return this.x;
  }
};

console.log(myObject1.getX());
// 10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;❌ Using an arrow function to access &lt;code&gt;this&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const myObject2 = {
  x: 10,
  getX: () =&amp;gt; this.x
};

console.log(myObject2.getX());
// TypeError: Cannot read property 'x' of undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#other-caveats"&gt;
  &lt;/a&gt;
  Other caveats
&lt;/h3&gt;

&lt;p&gt;This article is to help you understand the basics of arrow syntax, but it's helpful to be &lt;em&gt;aware&lt;/em&gt; (even if you don't understand in detail) that there are some other technical differences with arrow functions. MDN Web Docs has a good &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions"&gt;rundown of all the differences&lt;/a&gt;, if you are interested in further research.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#are-arrow-functions-better"&gt;
  &lt;/a&gt;
  Are arrow functions better?
&lt;/h2&gt;

&lt;p&gt;Not necessarily. Arrow function syntax provides developers with a tool for writing code in a different way, often with the benefits of code that is easier to read and write.&lt;/p&gt;

&lt;p&gt;When ES6 was still fancy and new, arrow functions were seen by some as the "new" way of writing JavaScript functions. Bootcamps and online tutorials would sometimes teach arrow functions by default, and often still do.&lt;/p&gt;

&lt;p&gt;But these days, I'm seeing a trend towards bringing it back to the &lt;code&gt;function&lt;/code&gt; keyword. Kent C. Dodds, a well-renowned React expert, posted &lt;a href="https://kentcdodds.com/blog/function-forms"&gt;an article&lt;/a&gt; about how he uses different function forms for different purposes, which makes for interesting reading.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In Conclusion
&lt;/h2&gt;

&lt;p&gt;ES6 arrow function syntax provides a useful way to write more streamlined code which is often more readable. Code readability is important for helping others to understand your code. Likewise, it's important to be able to read others' code well yourself. So regardless of how you like to write functions, it is good to be able to understand different syntaxes when you encounter them.&lt;/p&gt;

&lt;p&gt;I hope this article has been useful for those of you new to writing JavaScript code. If you have an questions, comments, suggestions, or indeed corrections, please let me know in the comments below. I would love to hear your thoughts, whether this article was helpful, and any constructive criticism.&lt;/p&gt;

&lt;p&gt;Please feel free to follow me here and on Twitter (&lt;a href="https://twitter.com/dan_j_v"&gt;@dan_j_v&lt;/a&gt;).&lt;/p&gt;

</description>
      <category>es6</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>🔨 [git]: Write better commits with Gitmoji</title>
      <author>Javid Mougamadou</author>
      <pubDate>Sun, 18 Apr 2021 13:07:39 +0000</pubDate>
      <link>https://dev.to/javidjms/git-write-better-commits-with-gitmoji-3193</link>
      <guid>https://dev.to/javidjms/git-write-better-commits-with-gitmoji-3193</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9Jlu3MuZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.bram.us/wordpress/wp-content/uploads/2017/09/gitmoji-560x410.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Jlu3MuZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.bram.us/wordpress/wp-content/uploads/2017/09/gitmoji-560x410.png" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  📝 Notes
&lt;/h2&gt;

&lt;p&gt;Gitmoji is an initiative to standardize and explain the use of emojis on GitHub commit messages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intro-how-to-write-a-git-commit-message"&gt;
  &lt;/a&gt;
  📝 Intro : How to Write a Git Commit Message
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QBl44j1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://chris.beams.io/content/images/size/w2000/2021/01/git_commit_2x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QBl44j1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://chris.beams.io/content/images/size/w2000/2021/01/git_commit_2x.png" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my case, I only read commits when i would like to track commit changes or to dig commit explanation. Otherwise, I directly read the source code.&lt;/p&gt;

&lt;p&gt;Here is an example of good git commit message semantic will look like (according to &lt;a href="https://gist.github.com/joshbuchea/6f47e86d2510bce28f8e7f42ae84c716"&gt;Gist Semantic Commit Messages&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&amp;lt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;scope]: &lt;span class="s2"&gt;"Message"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;type&lt;/strong&gt; must be one of the following mentioned below :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;lt;build&amp;gt;: Build related changes (eg: npm related/ adding external dependencies)&lt;/li&gt;
&lt;li&gt;&amp;lt;chore&amp;gt;: A code change that external user won't see (eg: change to .gitignore)&lt;/li&gt;
&lt;li&gt;&amp;lt;docs&amp;gt;: Documentation related changes&lt;/li&gt;
&lt;li&gt;&amp;lt;feat&amp;gt;: Introduction of a new feature&lt;/li&gt;
&lt;li&gt;&amp;lt;fix&amp;gt;: Resolve an issue directly linked to development (bugfixes)&lt;/li&gt;
&lt;li&gt;&amp;lt;hotfix&amp;gt;: Resolve an issue directly linked to production (patches)&lt;/li&gt;
&lt;li&gt;&amp;lt;test&amp;gt;: Add/Update test cases&lt;/li&gt;
&lt;li&gt;&amp;lt;performance&amp;gt;: Add code that improves performance&lt;/li&gt;
&lt;li&gt;&amp;lt;refactor&amp;gt;: Update for code for maintainability (clean code)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;scope&lt;/strong&gt; is optional and must be a noun that represents the section of the codebase&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Message&lt;/strong&gt; should be imperative and should describe the commit with a clear message/keywords.&lt;/p&gt;

&lt;p&gt;Example of commits :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&amp;lt;feat&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;home, components]: Add login button
&amp;lt;feat&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;home, components]: Add login modal
&amp;lt;fix&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;home, components]: Resolve issue with modal collapses
&amp;lt;chore&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;home]: Move icons folder
&amp;lt;feat&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;newsletter]: Add Newsletter component
&amp;lt;feat&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;navbar]: Add navbar container
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#gitmoji"&gt;
  &lt;/a&gt;
  🚀 Gitmoji
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T7cdnlBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/31794680/84195052-3a6d0780-aa9e-11ea-87ed-b39133f40829.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T7cdnlBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/31794680/84195052-3a6d0780-aa9e-11ea-87ed-b39133f40829.gif" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using emojis on commit messages provides an easy way of identifying the purpose or intention of a commit with only looking at the emojis used. As there are a lot of different emojis I found the need of creating a guide that can help to use emojis easier.&lt;/p&gt;

&lt;p&gt;Now we can replace the &amp;lt;type/&amp;gt; with an emoji :&lt;/p&gt;

&lt;p&gt;🎨 Improve structure / format of the code.&lt;/p&gt;

&lt;p&gt;⚡️ Improve performance.&lt;/p&gt;

&lt;p&gt;🔥 Remove code or files.&lt;/p&gt;

&lt;p&gt;🐛 Fix a bug.&lt;/p&gt;

&lt;p&gt;✨ Introduce new features.&lt;/p&gt;

&lt;p&gt;📝 Add or update documentation.&lt;/p&gt;

&lt;p&gt;🚀 Deploy stuff.&lt;/p&gt;

&lt;p&gt;💚 Fix CI Build.&lt;/p&gt;

&lt;p&gt;👷 Add or update CI build system.&lt;/p&gt;

&lt;p&gt;🔧 Add or update configuration files.&lt;/p&gt;

&lt;p&gt;🔨 Add or update development scripts.&lt;/p&gt;

&lt;p&gt;⚰️ Remove dead code.&lt;/p&gt;

&lt;p&gt;Example of commits :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;✨ &lt;span class="o"&gt;[&lt;/span&gt;home, components]: Add login button
✨ &lt;span class="o"&gt;[&lt;/span&gt;home, components]: Add login modal
🐛 &lt;span class="o"&gt;[&lt;/span&gt;home, components]: Resolve issue with modal collapses
🚚 &lt;span class="o"&gt;[&lt;/span&gt;home]: Move icons folder
✨ &lt;span class="o"&gt;[&lt;/span&gt;newsletter]: Add Newsletter component
✨ &lt;span class="o"&gt;[&lt;/span&gt;navbar]: Add navbar container
🔥 &lt;span class="o"&gt;[&lt;/span&gt;navbar]: Remove old navbar file
✅ &lt;span class="o"&gt;[&lt;/span&gt;home]: Add login &lt;span class="nb"&gt;test &lt;/span&gt;&lt;span class="k"&gt;case&lt;/span&gt;
🎨 &lt;span class="o"&gt;[&lt;/span&gt;home, component]: Improve login modal
📦️ &lt;span class="o"&gt;[&lt;/span&gt;npm]: Add react-table
🔨 Update script start-server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#additionnal-icons"&gt;
  &lt;/a&gt;
  Additionnal icons
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;🐳 Add Dockerfile
🐳 Add docker-compose.yml
☸️ &lt;span class="o"&gt;[&lt;/span&gt;helm]: Add postgres helm chart
☸️ &lt;span class="o"&gt;[&lt;/span&gt;helm]: Update frontend.yaml
☸️ &lt;span class="o"&gt;[&lt;/span&gt;helm]: Update pvc.yaml
🐎 &lt;span class="o"&gt;[&lt;/span&gt;home]: Increase speed load &lt;span class="k"&gt;for &lt;/span&gt;navbar
🍎 &lt;span class="o"&gt;[&lt;/span&gt;home]: Fix issue with MacOS &lt;span class="k"&gt;for &lt;/span&gt;navbar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Link: &lt;a href="https://emojipedia.org/"&gt;EmojiPedia&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%EF%B8%8F-gitmojicli"&gt;
  &lt;/a&gt;
  📦️ Gitmoji-CLI
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IfUQ1Zuu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cloud.githubusercontent.com/assets/7629661/20454643/11eb9e40-ae47-11e6-90db-a1ad8a87b495.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IfUQ1Zuu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cloud.githubusercontent.com/assets/7629661/20454643/11eb9e40-ae47-11e6-90db-a1ad8a87b495.gif" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A gitmoji interactive client for using gitmojis on commit messages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;With npm :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;gitmoji-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On MacOS :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;gitmoji
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#interactive-client"&gt;
  &lt;/a&gt;
  Interactive Client
&lt;/h3&gt;

&lt;p&gt;Start the interactive commit client, to auto generate your commit based on your prompts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gitmoji &lt;span class="nt"&gt;-c&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#hook"&gt;
  &lt;/a&gt;
  Hook
&lt;/h3&gt;

&lt;p&gt;Run the init option, add your changes and commit them, after that the prompts will begin and your commit message will be built.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gitmoji &lt;span class="nt"&gt;-i&lt;/span&gt;
git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H6vA11oS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/7629661/41189947-1de56124-6bd6-11e8-9567-e7f1a8e99500.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H6vA11oS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/7629661/41189947-1de56124-6bd6-11e8-9567-e7f1a8e99500.png" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#search"&gt;
  &lt;/a&gt;
  Search
&lt;/h3&gt;

&lt;p&gt;Search using specific keywords to find the right gitmoji.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gitmoji &lt;span class="nt"&gt;-s&lt;/span&gt; &lt;span class="s2"&gt;"criteria"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pXFc4zuJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/7629661/41189878-d24a3b78-6bd4-11e8-8d47-c8edf3b87e53.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pXFc4zuJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/7629661/41189878-d24a3b78-6bd4-11e8-8d47-c8edf3b87e53.png" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#list"&gt;
  &lt;/a&gt;
  List
&lt;/h3&gt;

&lt;p&gt;Pretty print all the available gitmojis.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gitmoji &lt;span class="nt"&gt;-l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ihaIfOch--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/7629661/41189877-d22b145a-6bd4-11e8-97f8-a8e36bcab062.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ihaIfOch--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/7629661/41189877-d22b145a-6bd4-11e8-97f8-a8e36bcab062.png" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#config"&gt;
  &lt;/a&gt;
  Config
&lt;/h3&gt;

&lt;p&gt;Run gitmoji -g to setup some gitmoji-cli preferences.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gitmoji config
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wRfyqMz4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/7629661/41189876-d21167ee-6bd4-11e8-9008-4c987502f307.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wRfyqMz4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/7629661/41189876-d21167ee-6bd4-11e8-9008-4c987502f307.png" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#extensions-integration-with-ide"&gt;
  &lt;/a&gt;
  🔨Extensions (Integration with IDE)
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#gitmoji-for-vscode"&gt;
  &lt;/a&gt;
  Gitmoji for Vscode
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6mwVJgap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.jsdelivr.net/gh/vtrois/gitmoji-vscode%401/images/about.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6mwVJgap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.jsdelivr.net/gh/vtrois/gitmoji-vscode%401/images/about.gif" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://marketplace.visualstudio.com/items?itemName=Vtrois.gitmoji-vscode"&gt;https://marketplace.visualstudio.com/items?itemName=Vtrois.gitmoji-vscode&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gitmoji-for-atom"&gt;
  &lt;/a&gt;
  Gitmoji for Atom
&lt;/h3&gt;

&lt;p&gt;Go to Settings (cmd + , or ctrl + ,) &amp;gt; Install and search for gitmoji-atom.&lt;/p&gt;

&lt;p&gt;Alternatively, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;apm &lt;span class="nb"&gt;install &lt;/span&gt;gitmoji-atom
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Link : &lt;a href="https://atom.io/packages/gitmoji-atom"&gt;https://atom.io/packages/gitmoji-atom&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integration-with-devto-"&gt;
  &lt;/a&gt;
  💻 Integration with DEV.TO ?
&lt;/h2&gt;

&lt;p&gt;Do you think that we can use if if while writing posts for Dev.TO ?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;🐳 Docker
☸️ Kubernetes
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://emojipedia.org/laptop/"&gt;https://emojipedia.org/laptop/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://gitmoji.dev/"&gt;https://gitmoji.dev/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/carloscuesta/gitmoji"&gt;https://github.com/carloscuesta/gitmoji&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/carloscuesta/gitmoji-cli"&gt;https://github.com/carloscuesta/gitmoji-cli&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://gist.github.com/joshbuchea/6f47e86d2510bce28f8e7f42ae84c716"&gt;https://gist.github.com/joshbuchea/6f47e86d2510bce28f8e7f42ae84c716&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53"&gt;https://gist.github.com/robertpainsi/b632364184e70900af4ab688decf6f53&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://gist.github.com/parmentf/035de27d6ed1dce0b36a"&gt;https://gist.github.com/parmentf/035de27d6ed1dce0b36a&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/i5han3/git-commit-message-convention-that-you-can-follow-1709"&gt;https://dev.to/i5han3/git-commit-message-convention-that-you-can-follow-1709&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/helderburato/patterns-for-writing-better-git-commit-messages-4ba0"&gt;https://dev.to/helderburato/patterns-for-writing-better-git-commit-messages-4ba0&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://chris.beams.io/posts/git-commit/"&gt;https://chris.beams.io/posts/git-commit/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>productivity</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Improving site responsiveness with CSS clamp() function
</title>
      <author>Abdessamad Bensaad</author>
      <pubDate>Sun, 18 Apr 2021 13:03:52 +0000</pubDate>
      <link>https://dev.to/b3ns44d/improving-site-responsiveness-with-css-clamp-function-3119</link>
      <guid>https://dev.to/b3ns44d/improving-site-responsiveness-with-css-clamp-function-3119</guid>
      <description>&lt;p&gt;To improve the responsiveness of your site, you don't have to use some complex event listeners using the Web API ResizeObserver, &lt;code&gt;calc() function&lt;/code&gt;, or CSS media queries that will substitute the required page elements depending on the browser window size.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Clamp()&lt;/code&gt; is the only function specifically designed to allow almost any element to adjust its size within certain limits to fit the application window.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;clamp(MIN, VALUE, MAX)&lt;/code&gt; is calculated as &lt;code&gt;clamp&lt;/code&gt; will return the value specified by the second argument (preferred) if it is within the minimum and maximum values. Computed values ​​can be passed as any of the arguments.&lt;code&gt;max(MIN, min(VALUE, MAX))&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MBsA9CWy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwkjoh2a4vh8472vwbv8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MBsA9CWy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwkjoh2a4vh8472vwbv8.png" alt="An example of using the clamp function to improve the responsiveness of the image size"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#units"&gt;
  &lt;/a&gt;
  Units
&lt;/h2&gt;

&lt;p&gt;The following units can be used for the preferred value:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  The width of the viewport in% if clamp is used in the body (or the width of the container containing the clamp).&lt;/li&gt;
&lt;li&gt;  em is the font size in the current context.&lt;/li&gt;
&lt;li&gt;  rem is the font size in the context of the HTML element.&lt;/li&gt;
&lt;li&gt;  vw - 1% of the window width.&lt;/li&gt;
&lt;li&gt;  vh - 1% of the window height.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#supported-browsers"&gt;
  &lt;/a&gt;
  Supported browsers
&lt;/h2&gt;

&lt;p&gt;Clamp is not supported in Internet Explorer only.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2wRcN0eI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3nkbxw2zxsn1hett9kd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2wRcN0eI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3nkbxw2zxsn1hett9kd.png" alt="Clamp supported browsers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-use"&gt;
  &lt;/a&gt;
  Where to use
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#headers-font"&gt;
  &lt;/a&gt;
  Headers font
&lt;/h3&gt;

&lt;p&gt;A great use case for clamp () is in headers. Let's say you want a header with a minimum size of 16 pixels and a maximum size of 50 pixels. The clamp () function will give us an intermediate value that does not go beyond the specified limits.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;5vw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Clamp () is ideal here because it ensures that the font size used is easy to read. If you use min () to set the maximum font size, then you won't be able to control the font on small screens.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-grid-responsive-grid"&gt;
  &lt;/a&gt;
  CSS Grid - Responsive Grid
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pc-oFrgt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qkr3iv086rf8hlrqszwb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pc-oFrgt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qkr3iv086rf8hlrqszwb.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another good example is the responsive CSS grid column spacing for mobile screens. With clamp, this is pretty straightforward to implement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto-fit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;minmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="py"&gt;grid-gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2vw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;24px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#adaptive-padding-for-sections"&gt;
  &lt;/a&gt;
  Adaptive padding for sections
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nU_YHf2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/swvs8jf4eck8z0u4la1x.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nU_YHf2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/swvs8jf4eck8z0u4la1x.jpg" alt="Example padding for sections"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clamp () is also ideal for setting the minimum and maximum spacing between sections. This can be done with the following CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.section&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10vmax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10rem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>css</category>
      <category>frontend</category>
    </item>
    <item>
      <title>How to Integrate twillio SendGrid web API with Nextjs?</title>
      <author>Lalit Vavdara</author>
      <pubDate>Sun, 18 Apr 2021 11:56:42 +0000</pubDate>
      <link>https://dev.to/professor833/how-to-integrate-twillio-sendgrid-web-api-with-nextjs-5d7c</link>
      <guid>https://dev.to/professor833/how-to-integrate-twillio-sendgrid-web-api-with-nextjs-5d7c</guid>
      <description>&lt;p&gt;Whenever developing any web app whether it be some static site or some dynamic site, in most of the cases we require some type of contact form.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-nextjs"&gt;
  &lt;/a&gt;
  What is Next.js?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;It is used to build server-side rendering and static web applications using React.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-is-sendgrid"&gt;
  &lt;/a&gt;
  What is SendGrid?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;SendGrid is a cloud-based SMTP provider that allows you to send email without having to maintain email servers. SendGrid manages all of the technical details, from scaling the infrastructure to ISP outreach and reputation monitoring to whitelist services and real-time analytics. In short, &lt;strong&gt;it is used to send emails.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Assuming that you already have a next.js app setup let's start with integrating SendGrid API to send emails, if you don't have one check out this &lt;a href="https://nextjs.org/docs/api-reference/create-next-app"&gt;guide&lt;/a&gt;, on how to create next.js app.&lt;/p&gt;

&lt;p&gt;There are two ways in which you can achieve this, one is by using external &lt;a href="https://www.npmjs.com/package/@sendgrid/mail"&gt;library&lt;/a&gt; from SendGrid and the second is by making a &lt;code&gt;POST&lt;/code&gt; request to &lt;code&gt;https://api.sendgrid.com/v3/mail/send&lt;/code&gt; with all the required data, this is more suitable if you don't want to include any new library in your project for just sending emails.&lt;/p&gt;

&lt;p&gt;Let's see how can you send emails with SendGrid web API in Nextjs, create a file &lt;code&gt;sendMail.js&lt;/code&gt; in the &lt;code&gt;utils&lt;/code&gt; folder of your project's root directory. Now, your project's directory structure should look like this,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--748m_NSD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/au4ex7ktafhg89l96k1m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--748m_NSD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/au4ex7ktafhg89l96k1m.png" alt="directory structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;add the following code to your &lt;code&gt;sendMail.js&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node-fetch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SENDGRID_API_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://api.sendgrid.com/v3/mail/send&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SENDGRID_API_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEW_SENDGRID_API_KEY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sendMailToMe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="nx"&gt;recepient_email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// email_address to send mail&lt;/span&gt;
  &lt;span class="nx"&gt;name_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// from name on email&lt;/span&gt;
  &lt;span class="nx"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sample subject&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;client_message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// value we receive from our contact form&lt;/span&gt;
  &lt;span class="nx"&gt;client_email&lt;/span&gt; &lt;span class="c1"&gt;// value we receive from our contact form&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sgResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SENDGRID_API_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Bearer &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;SENDGRID_API_KEY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;personalizations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;recepient_email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;],&lt;/span&gt;
          &lt;span class="na"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YOUR VERIFIED SENDGRID MAIL HERE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YOUR NAME&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text/html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;strong&amp;gt;Client Name: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name_&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &amp;lt;/strong&amp;gt; \n &amp;lt;p&amp;gt; 
                  sent you a query regarding &amp;lt;strong&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
                  \n &amp;lt;p&amp;gt;Client's Message: &amp;lt;strong&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;client_message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/strong&amp;gt;&amp;lt;\p&amp;gt; 
                  &amp;lt;p&amp;gt;Client's Email : &amp;lt;strong&amp;gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;client_email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;sgResponse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;sendMailToMe&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;here we are using &lt;code&gt;node-fetch&lt;/code&gt; for making a &lt;code&gt;POST&lt;/code&gt; request so you need to install it through &lt;code&gt;npm i node-fetch&lt;/code&gt; it is a lightweight module that brings window.fetch to Node.js, and also this function expects some values that we will include from our contact form. You will need SendGrid &lt;a href="https://sendgrid.com/docs/ui/account-and-settings/api-keys/"&gt;API key&lt;/a&gt; and store it in &lt;code&gt;next.config.js&lt;/code&gt; as env variable to send emails and also verify a &lt;a href="https://sendgrid.com/docs/ui/sending-email/sender-verification/"&gt;Sender Identity&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Then, we need to create an API endpoint in Next.js that we will use to send data from our contact form, this is done by creating a new file in &lt;code&gt;pages/api&lt;/code&gt; folder. This &lt;code&gt;api&lt;/code&gt; folder is a special folder in Nextjs which is used to create all the api endpoints of your Nextjs app, and these endpoints are only invoked when they are required.   &lt;/p&gt;

&lt;p&gt;so add &lt;code&gt;senMail.js&lt;/code&gt; to the &lt;code&gt;pages/api&lt;/code&gt; folder of your app like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9vAMi6bn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/clnocn74k3cuh3bvpm2w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9vAMi6bn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/clnocn74k3cuh3bvpm2w.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;add following code into this file,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;sendMailQueryToMe&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../utils/sendMailToMe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// req.body carries all the data&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;client_message&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;name_&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;subject&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;client_message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; ************* Invalid Data received ************ &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bad request, missing required data!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//  Data received as expected&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sendGridResponse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sendMailQueryToMe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;your_mail@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;name_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;client_message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;email&lt;/span&gt;
          &lt;span class="p"&gt;);&lt;/span&gt;

          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;sg_response&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;sendGridResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ERROR WHILE SENDING MAIL TO *YOU* THROUGH WEB API &amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;err&lt;/span&gt;
          &lt;span class="p"&gt;);&lt;/span&gt;

          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;err_message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bad request&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Err while sending Mail through send grid &amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error in sendgrid Service.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;errMsg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bad request&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now finally we need to create some UI form from which users can send mail. For this, Create a &lt;code&gt;contact.js&lt;/code&gt; file in the &lt;code&gt;pages&lt;/code&gt; folder of your app and add the following code to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;MailOutlineIcon&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@material-ui/icons/MailOutline&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;MenuItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Input&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@material-ui/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;TextField&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@material-ui/core/TextField&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;contact&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;formError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFormError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;querySubject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setQuerySetsubject&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setName_&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;clientEmail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setClientEmail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;clientMsg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setClientMsg&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;serviceOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;option1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;option1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;option2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;option2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;option3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;option3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;option4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;option4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sendMail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;client_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;client_email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;client_message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;client_subject&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;name_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;client_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;client_email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;client_message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;client_message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;client_subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/sendMail&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Length&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;https&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// console.log(`statusCode: ${res.statusCode}`);&lt;/span&gt;

      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// process.stdout.write(d);&lt;/span&gt;
        &lt;span class="c1"&gt;// console.log("data  from API &amp;gt;&amp;gt; ", JSON.parse(d));&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setFormError&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Unable to send your message please try after some time.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;
        &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;flex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;flexDirection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;column&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;50px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Input&lt;/span&gt;
          &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;100%&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
          &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name_&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;What is your name ?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setName_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
          &lt;span class="nx"&gt;required&lt;/span&gt;
        &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Input&lt;/span&gt;
          &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;100%&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
          &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;clientEmail&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;What is your email ?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setClientEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
          &lt;span class="nx"&gt;required&lt;/span&gt;
        &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TextField&lt;/span&gt;
          &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;100%&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
          &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;standard-select-Interest&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;select&lt;/span&gt;
          &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;What are you interested in ?&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;querySubject&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setQuerySetsubject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
          &lt;span class="nx"&gt;required&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;serviceOptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MenuItem&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/MenuItem&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="p"&gt;))}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/TextField&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TextField&lt;/span&gt;
          &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;100%&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
          &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;client-message-textarea&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;multiline&lt;/span&gt;
          &lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;clientMsg&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setClientMsg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;formError&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;form__error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;formError&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="dl"&gt;""&lt;/span&gt;
        &lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
            &lt;span class="nx"&gt;disabled&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;name_&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;clientEmail&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;clientMsg&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;querySubject&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;name_&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;clientEmail&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;clientMsg&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;querySubject&lt;/span&gt;
                &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#878a8f&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scale(1)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;50px 0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;50px 0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
              &lt;span class="nx"&gt;sendMail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;clientEmail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;clientMsg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;querySubject&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}}&lt;/span&gt;
          &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MailOutlineIcon&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Send&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;contact&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's all folks you have a full-featured contact form from which you can send or receive emails.&lt;/p&gt;

&lt;p&gt;I have implemented this in my contact form which you can try it out at my &lt;a href="https://www.lalitvavdara.me/contact"&gt;Site&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>sendgrid</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>Some Vanilla JS libraries you must try</title>
      <author>Unnati Bamania</author>
      <pubDate>Sun, 18 Apr 2021 11:55:49 +0000</pubDate>
      <link>https://dev.to/commentme/some-vanilla-js-libraries-you-must-try-17a3</link>
      <guid>https://dev.to/commentme/some-vanilla-js-libraries-you-must-try-17a3</guid>
      <description>&lt;p&gt;Never underestimate the power of simplicity. It's hard to imagine the application of concepts like push real-time notifications, using databases, having a rich text editor with Vanilla JS. But you can do a lot with it. Here are some examples of their libraries that make Vanilla JS somewhat impeccable. I will try to embellish each library with its features and other attributes concerning its documentation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pushjs"&gt;
  &lt;/a&gt;
  Pushjs
&lt;/h3&gt;

&lt;p&gt;I've been breaking my head all around to find the best tutorials for implementing the push notification feature. But &lt;a href="https://pushjs.org/"&gt;Pushjs&lt;/a&gt; made my work painless. The documentation is easy and beginner-friendly.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OBKt0WKA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oaxqwlt1rtbebi1pru6o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OBKt0WKA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oaxqwlt1rtbebi1pru6o.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All the effort that you need to take is to create an HTML file in a folder. &lt;br&gt;
The next step is followed by the installation part. Either install it using the npm package manager or using &lt;a href="https://github.com/Nickersoft/push.js"&gt;Github&lt;/a&gt; download the zip file. After downloading, unzip the folder and copy-paste &lt;em&gt;push.min.js&lt;/em&gt; and &lt;em&gt;serviceWorker.min.js&lt;/em&gt; into your project directory.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#code-for-indexhtml"&gt;
  &lt;/a&gt;
  Code for index.html
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;body&amp;gt;

    &amp;lt;script src="push.min.js"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src="serviceWorker.min.js"&amp;gt;&amp;lt;/script&amp;gt;

    &amp;lt;script&amp;gt;
        function start() {
            Push.create("Hello from Unnati!", {
                body: "Here's your push notification demo",
                icon: 'https://gw.alipayobjects.com/zos/antfincdn/4zAaozCvUH/unexpand.svg',
                timeout: 4000,
                onClick: function () {
                    window.focus();
                    this.close();
                }
            });
        }
    &amp;lt;/script&amp;gt;
    &amp;lt;h1&amp;gt;Push notification implementation&amp;lt;/h1&amp;gt;
    &amp;lt;h3&amp;gt;Click on this button to view notification&amp;lt;/h3&amp;gt;

    &amp;lt;a href="javascript:void(0)" onclick="start()"&amp;gt;Start&amp;lt;/a&amp;gt;

&amp;lt;/body&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XXiiT0-V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x3ejkpwqf1ey18w52b6v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XXiiT0-V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x3ejkpwqf1ey18w52b6v.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#editorjs"&gt;
  &lt;/a&gt;
  EditorJS
&lt;/h3&gt;

&lt;p&gt;Next, the amazing library on the list is &lt;a href="https://editorjs.io/"&gt;Editor Js&lt;/a&gt;. We need text editors in our project quite often, hence EditorJs is one of the simple and captivating libraries. You can use it with Vanilla Js, ReactJs, and other frameworks. Making your text bold or italics or adding a heading, has it all. Just quickly run through the documentation and you'll get a clear gist of this library. Let's come to the coding part. Again, you can either install it using the npm package manager or use its cdn.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RWS81GEW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wl4ahfafztmo5cm02ogh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RWS81GEW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wl4ahfafztmo5cm02ogh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#indexhtml"&gt;
  &lt;/a&gt;
  index.html
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;Enter your content here&amp;lt;/h1&amp;gt;

    &amp;lt;div id="editorjs"&amp;gt;&amp;lt;/div&amp;gt;

    &amp;lt;button id='button'&amp;gt;Save article&amp;lt;/button&amp;gt;
    &amp;lt;script src="https://cdn.jsdelivr.net/npm/@editorjs/editorjs@latest"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src="index.js"&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#indexjs"&gt;
  &lt;/a&gt;
  index.js
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;try {

  var editor = new EditorJS({
    holderId : 'editorjs',
    placeholder: 'Let`s write an awesome story!',
    autofocus: true,

  });

  editor.isReady
    .then(() =&amp;gt; {
      console.log("Editor.js is ready to work!");
    })
    .catch((reason) =&amp;gt; {
      console.log(`Editor.js initialization failed because of ${reason}`);
    });

  const btn = document.getElementById("button");

  btn.addEventListener("click", function () {
    editor.save().then((outputData) =&amp;gt; {
        console.log('Article data: ', outputData)
      }).catch((error) =&amp;gt; {
        console.log('Saving failed: ', error)
      });


  });
} catch (reason) {
  console.log(`Editor.js initialization failed because of ${reason}`);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After installing if your try to import editorjs it will give an error, you need to make some configurations for import to work. Hence, you use the above code for reference.&lt;br&gt;
It can also help you to save your write-up material. &lt;br&gt;
You get a lot of options for configuring your editor like adding headers, lists, embed.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dEpcwb3Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c15fxvvh0eusrk3b90uf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dEpcwb3Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c15fxvvh0eusrk3b90uf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Header from '@editorjs/header';
import List from '@editorjs/list';
import MyParagraph from 'my-paragraph.js';
const editor = new EditorJS({

  tools: {
    header: Header,
    list: List,
    myOwnParagraph: MyParagraph
  },
  defaultBlock: "myOwnParagraph"
})

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#howlerjs"&gt;
  &lt;/a&gt;
  Howler.js
&lt;/h3&gt;

&lt;p&gt;You must've used audio and video tags in your projects. &lt;a href="https://howlerjs.com/"&gt;Howlerjs&lt;/a&gt;, is here to enhance your experience. The &lt;a href="https://github.com/goldfire/howler.js#documentation"&gt;documentation&lt;/a&gt;  explains the code well. Here's the reference piece of code which gives you a basic idea of HowlerJS&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OiFdJx_M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6ddip7hzp2n4yo1mmc1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OiFdJx_M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6ddip7hzp2n4yo1mmc1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
    var sound = new Howl({
      src: ['sound.webm', 'sound.mp3']
    });
&amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HcSH7_Mn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bi7cqt6lj7d75jslv1ya.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HcSH7_Mn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bi7cqt6lj7d75jslv1ya.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#revealjs"&gt;
  &lt;/a&gt;
  Reveal.js
&lt;/h3&gt;

&lt;p&gt;Ever wondered one day you'll be able to create presentation slides using Javascript. &lt;a href="https://revealjs.com/"&gt;Reveal.js&lt;/a&gt;, made it possible. This is an amazing library that I would like to add to the list. You can install it using npm package manager or navigate to &lt;a href="https://github.com/hakimel/reveal.js"&gt;Github&lt;/a&gt; and download zip and include the files in your project folder. Create an HTML file and fetch all the CSS and javascript files. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ivbSMgY---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8o9fdm8m7tfiw0cyhcw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ivbSMgY---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8o9fdm8m7tfiw0cyhcw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;link rel="stylesheet" href="dist/reset.css"&amp;gt;
&amp;lt;link rel="stylesheet" href="dist/reveal.css"&amp;gt;
&amp;lt;link rel="stylesheet" href="dist/theme/black.css" id="theme"&amp;gt;
&amp;lt;link rel="stylesheet" href="plugin/highlight/monokai.css" id="highlight-theme"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Javascript files&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="dist/reveal.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src="plugin/notes/notes.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src="plugin/markdown/markdown.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src="plugin/highlight/highlight.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
     Reveal.initialize({
    hash: true,
        plugins: [ RevealMarkdown, RevealHighlight, RevealNotes ]
   });
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#for-the-slides-part"&gt;
  &lt;/a&gt;
  For the slides part.
&lt;/h4&gt;

&lt;p&gt;In &lt;em&gt;index.html&lt;/em&gt; inside body tag create a div with id name reveal and nest another div with id name slides. Inside the nested keep adding the section div depending upon the slide requirement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="reveal"&amp;gt;
  &amp;lt;div class="slides"&amp;gt;
   &amp;lt;section&amp;gt;
    &amp;lt;h1&amp;gt;Slide 1&amp;lt;/h1&amp;gt;
    &amp;lt;h3&amp;gt;This is an amazing library&amp;lt;/h3&amp;gt;
   &amp;lt;/section&amp;gt;
  &amp;lt;section&amp;gt;
   &amp;lt;h1&amp;gt;Slide 2&amp;lt;/h1&amp;gt;
   &amp;lt;h3&amp;gt;You can just play around with a lot of stuff&amp;lt;/h3&amp;gt;
  &amp;lt;/section&amp;gt;
  &amp;lt;section&amp;gt;
   &amp;lt;h1&amp;gt;Slide 3&amp;lt;/h1&amp;gt;
   &amp;lt;h3&amp;gt;That's it for the slide Show&amp;lt;/h3&amp;gt;
   &amp;lt;/section&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OoZjxFWs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iyi28fd9ksc8rgyh2rct.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OoZjxFWs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iyi28fd9ksc8rgyh2rct.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#chartjs"&gt;
  &lt;/a&gt;
  ChartJS
&lt;/h3&gt;

&lt;p&gt;Presentations and displaying graphical charts go hand in hand. Javascript has a stunning library &lt;a href="https://www.chartjs.org/"&gt;Chartjs&lt;/a&gt; where we can represent data using these charts. It includes bar graphs, pie diagrams, dot diagrams, and a lot more.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g3WjG51q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ypwg7rkhw264n7gqknk9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g3WjG51q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ypwg7rkhw264n7gqknk9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Here's the sample code for the pie chart&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; var ctx = document.getElementById('myChart').getContext('2d');
        var myChart = new Chart(ctx, {
            type: 'pie',
            data: {
                labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
                datasets: [{
                    label: '# of Votes',
                    data: [12, 19, 3, 5, 2, 3],
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                        'rgba(255, 159, 64, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are a lot of other popular and useful libraries which can be used with Vanilla Js. That's it for this post. If you know more stunning libraries like these please do mention them in the comment section below.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>How to upload a JSON file to firebase and access it as list items from the web?</title>
      <author>Sharjeel Yunus</author>
      <pubDate>Sun, 18 Apr 2021 11:09:23 +0000</pubDate>
      <link>https://dev.to/sharjeelyunus/how-to-upload-a-json-file-to-firebase-and-access-it-as-list-items-from-the-web-20o8</link>
      <guid>https://dev.to/sharjeelyunus/how-to-upload-a-json-file-to-firebase-and-access-it-as-list-items-from-the-web-20o8</guid>
      <description>&lt;p&gt;If you have a large JSON file and you wanna upload it to a database, &lt;strong&gt;Firebase Realtime Database&lt;/strong&gt; would be your first choice. But how can you import that large file directly without doing everything manually? And how can you fetch this data to as List items via Vanilla JavaScript?&lt;/p&gt;

&lt;p&gt;Let's start with JSON =&amp;gt; (JavaScript Object Notation) is used when data is sent from a server to a web page.&lt;/p&gt;

&lt;p&gt;Here's how our JSON file looks like!⤵&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Certificates-List"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"courseName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Elements of AI: Introduction to AI"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"institute"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"University of Helsinki"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;

        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"courseName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Javascript Beginner"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"institute"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Udemy"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;

        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"courseName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Introduction to Flutter Development"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"institute"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"App Brewery"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First of all Configure your Firebase project for the web &lt;a href="https://www.youtube.com/watch?v=q5tAUb_bvqg&amp;amp;ab_channel=TACV-TheAmazingCode-Verse"&gt;How to Configure Google Firebase for Web&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now click on 3 dots and select import JSON, select your file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OLDNJepI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5v7xmtbxk3bg9v2oniz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OLDNJepI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5v7xmtbxk3bg9v2oniz.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Ahhan! your JSON file is now uploaded to Firebase Realtime Database.&lt;br&gt;
Now your database should look like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KxkBxomr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c44ft10clmdrq9jv83ta.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KxkBxomr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c44ft10clmdrq9jv83ta.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To see this as an API, Copy the URL of the database and write the folder name .json after it. Like this =&amp;gt; &lt;a href=""&gt;https://test-45959-default-rtdb.firebaseio.com/Certificates-List.json&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now how can we access this data to a webpage using Vanilla JavaScript?&lt;br&gt;
Create a ul tag with id="Certificates-List".&lt;br&gt;
Your Project should look like this⤵&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HAnFpidI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m3avjywcrphwedpd3erq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HAnFpidI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m3avjywcrphwedpd3erq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Time for the real part: &lt;strong&gt;Access data from Firebase to Web&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create a function to add items to the list like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addItemsToList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;courseName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;institute&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ul&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Certificates-List&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_courseName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;li&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_institute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;li&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="nx"&gt;_courseName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CourseName: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;courseName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;_institute&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Institute: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;institute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_courseName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_institute&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we grab the &lt;code&gt;ul&lt;/code&gt; tag by id and then create the list items via &lt;code&gt;li&lt;/code&gt; tag. Using appendChild store the grabbed data to list items.&lt;/p&gt;

&lt;p&gt;Now create a function to fetch data from database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;FetchAllData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;firebase&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;database&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Certificates-List&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;once&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;snapshot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;snapshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ChildSnapshot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;courseName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ChildSnapshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;courseName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;institute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ChildSnapshot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;institute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;addItemsToList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;courseName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;institute&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we're fetching our data from Firebase Realtime Database with the ref of database folder name i.e Certificates-List. And then calling the &lt;code&gt;addItemsToList()&lt;/code&gt; to get the data.&lt;/p&gt;

&lt;p&gt;Now to load data&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;FetchAllData&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your code should be like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L-VfN8fI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rs3wrcvawahay8yaswj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L-VfN8fI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rs3wrcvawahay8yaswj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here's how your web page should look like:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JHD2EcF2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kvfgfhmmcyrqpk9wmald.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JHD2EcF2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kvfgfhmmcyrqpk9wmald.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it. We're all OK. Now you can customize this data and webpage however you like.👋&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>json</category>
      <category>firebase</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>4 speed run challenges ⌚ on DEV.TO!  Can you beat my times? 🏆🏆 (A fun game with a serious message!)</title>
      <author>InHuOfficial</author>
      <pubDate>Sun, 18 Apr 2021 11:00:03 +0000</pubDate>
      <link>https://dev.to/inhuofficial/4-speed-run-challenges-on-dev-to-can-you-beat-my-times-30a4</link>
      <guid>https://dev.to/inhuofficial/4-speed-run-challenges-on-dev-to-can-you-beat-my-times-30a4</guid>
      <description>&lt;p&gt;A slightly less silly post today! (only slightly mind you!)&lt;/p&gt;

&lt;p&gt;I am writing a series on accessibility on dev.to and I have recently been testing the keyboard usability of the site.&lt;/p&gt;

&lt;p&gt;I realised I could turn this into a fun game while also hopefully giving people valuable insight into what it is like using a site with a keyboard.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is not bashing dev.to&lt;/strong&gt; - they are making a real effort to improve accessibility and are really responsive to suggestions, it is just a great exercise you should perform on your own applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#on-with-the-challenges"&gt;
  &lt;/a&gt;
  On with the challenges
&lt;/h2&gt;

&lt;p&gt;So there are 4 challenges, time yourself doing each of them and then leave a comment with your time for each. &lt;/p&gt;

&lt;p&gt;After a week I will list the winners for each challenge and overall.&lt;/p&gt;

&lt;p&gt;I will assume you are honourable and don't cheat 😀&lt;/p&gt;

&lt;p&gt;Here are the rules:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;No screen reader shortcuts (if you use one) or other plugins etc that add shortcuts that do not normally exist in the browser.&lt;/li&gt;
&lt;li&gt;Keyboard only commands - if you use your mouse or another input device your run is void! **&lt;/li&gt;
&lt;li&gt;You can try each challenge as many times as you want and submit your best time!&lt;/li&gt;
&lt;li&gt;If you can't complete a challenge then you can record a Did Not Finish (DNF) and that will count as 2 minutes towards your total time.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;All challenges start on the home page&lt;/strong&gt; - and your cursor should be in the URL bar in your web browser before you start.&lt;/li&gt;
&lt;li&gt;Touch screen devices are not allowed (unless they have a Bluetooth keyboard you can use) - so if you are viewing this on mobile try it when you get in front of a PC.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;** If you use other assistive tech such as "Sip-Puff" or "eye-gaze technology" etc. then you can use those! The ideas is no mouse or pointer devices!&lt;/p&gt;

&lt;p&gt;All good? Let's go!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#challenge-1"&gt;
  &lt;/a&gt;
  Challenge 1
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qbdb8ze5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4yax8g9ynqymtdwx461.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qbdb8ze5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4yax8g9ynqymtdwx461.jpg" alt='dev.to footer showing the location of the "forem" link within the text "Built on Forem"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the footer of the site there is a link to "Forem". &lt;/p&gt;

&lt;p&gt;The first challenge is to navigate to and click on the "Forem" link in the sentence "Built on &lt;strong&gt;Forem&lt;/strong&gt; - the open source....etc" located in the footer of the site.&lt;/p&gt;

&lt;p&gt;My best time is 9 seconds - but I did  have to think about this one and I only got it right 70% of the time when I tried to repeat it!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#challenge-2"&gt;
  &lt;/a&gt;
  Challenge 2
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x7p4MOiD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/os0fzqtletao3uubfsip.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x7p4MOiD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/os0fzqtletao3uubfsip.jpg" alt='Podcast page of "script" listing all of their podcasts'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This one is simple - I want you to go to the podcast list page of "Script". (The list of all their podcasts).&lt;/p&gt;

&lt;p&gt;There are actually 2 variations of this challenge.&lt;/p&gt;

&lt;p&gt;The "easy" challenge is for people who already follow "Script" podcasts.&lt;/p&gt;

&lt;p&gt;The "hard" challenge is for people who do not follow "Script".&lt;/p&gt;

&lt;p&gt;The final URL you are trying to reach is &lt;a href="https://dev.to/scriptpodcast"&gt;https://dev.to/scriptpodcast&lt;/a&gt; - but you cannot just write that into your URL bar! Play fair people 😋&lt;/p&gt;

&lt;p&gt;Also you have to assume that you do not know the name of any of their podcasts each run. You have to try and find them as if you have never listened to them before.&lt;/p&gt;

&lt;p&gt;Make sure you end on the list of their podcasts.&lt;/p&gt;

&lt;p&gt;First time this took me about a minute, but in the end I got it down to 14 seconds (on the hard version as I don't follow them 😋)!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#challenge-3"&gt;
  &lt;/a&gt;
  Challenge 3
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wn5460nu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yzbcs1n0h5qf4h6b83j4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wn5460nu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yzbcs1n0h5qf4h6b83j4.jpg" alt='Screenshot of the header for the article "101 tips for being a great programmer"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ok now the challenges are getting tougher. Don't forget you have to start at the home page with your focus in the URL bar!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; find the article "101 Tips For Being A Great Programmer (&amp;amp; Human)" - &lt;a href="https://dev.to/emmabostian/101-tips-for-being-a-great-programmer-human-36nl"&gt;https://dev.to/emmabostian/101-tips-for-being-a-great-programmer-human-36nl&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; write "hello" in the comments box at the bottom of the page (you do not need to submit it)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I couldn't find a good workaround for this one so it took me 48 seconds (and that was tabbing ridiculously fast).&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#challenge-4"&gt;
  &lt;/a&gt;
  Challenge 4
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V-2HFX92--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3w71da5guiwaujucpm01.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V-2HFX92--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3w71da5guiwaujucpm01.jpg" alt="Code newbie challenge, top right of the dev.to homepage (next column after the feed)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The final challenge&lt;/p&gt;

&lt;p&gt;Navigate to "the code newbie challenge" home page. &lt;/p&gt;

&lt;p&gt;Remember you can't just put the URL in, in fact in this challenge I want you to assume that you do not know it exists. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The real purpose of this challenge is to get to the top of the right hand side bar on the home page and click the link "Sign up today!".&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This one took some doing as at first I thought it was impossible (you will soon see why!) but in the end I got a respectable 22 seconds. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So my times were:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;9 seconds&lt;/li&gt;
&lt;li&gt;14 seconds&lt;/li&gt;
&lt;li&gt;48 seconds&lt;/li&gt;
&lt;li&gt;22 seconds (seriously could I not get 21 seconds so I can sing "I got 21 seconds to go" in my head? 🤣🤣)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Total time 1min 33 seconds.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But that was after multiple attempts, some of them took me over a minute to complete the first time until I found better ways to do them.&lt;/p&gt;

&lt;p&gt;Obviously this is all a bit of fun but the underlying message is a serious one. &lt;strong&gt;make sure your sites are easy to use with a keyboard!&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Dev.to are improving accessibility rapidly, but the keyboard operability of the site is still quite difficult. &lt;/p&gt;

&lt;p&gt;In my next article in the dev.to accessibility series I will cover how dev.to can improve the keyboard experience on the site (and other sites built with forem) very easily! &lt;/p&gt;

&lt;p&gt;Be sure to check out the first article in the series as it may give you some ideas of what to look for on your own site and some ideas for simple fixes:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/fixing-dev-to-accessibility-4-fixes-that-would-take-less-than-10-minutes-11nj" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Fixing dev.to accessibility [part 1] - 4 fixes that would take less than 10 minutes!&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial ・ Mar 24 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#inclusion&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;So the question is "can you beat my time?" and more importantly "did this challenge make you think about your own website's accessibility?"&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>webdev</category>
      <category>watercooler</category>
      <category>competition</category>
    </item>
    <item>
      <title>Dynamic Dimension React Container with Transition Effect - Part 1</title>
      <author>AnxinYang</author>
      <pubDate>Sun, 18 Apr 2021 10:54:26 +0000</pubDate>
      <link>https://dev.to/anxinyang/dynamic-dimension-react-container-with-transition-effect-47a9</link>
      <guid>https://dev.to/anxinyang/dynamic-dimension-react-container-with-transition-effect-47a9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-issue"&gt;
  &lt;/a&gt;
  The Issue
&lt;/h2&gt;

&lt;p&gt;Sometimes, we want our container to dynamically fit the size of its content, such as navigation bar with dropdown menu. &lt;/p&gt;

&lt;p&gt;The size of the content may not always be a fixed value, and CSS transition hates that. &lt;/p&gt;

&lt;p&gt;We know CSS style like this will create a smooth transition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.menu&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.3s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.menu&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, this will not work since css transition needs a numeric value to work with.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.menu&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.3s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.menu&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;fit-content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#method-1"&gt;
  &lt;/a&gt;
  Method 1
&lt;/h2&gt;

&lt;p&gt;We can use &lt;code&gt;ref&lt;/code&gt; and &lt;code&gt;getBoundingClientRect&lt;/code&gt; to get the content's dimension&lt;/p&gt;

&lt;p&gt;Here is a demo: &lt;br&gt;
&lt;iframe src="https://codesandbox.io/embed/p13vj"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;and the code of the container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;DynamicContainer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setRect&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;//Only update dimension when children change&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
      &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
        &lt;span class="na"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0.3s&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;px`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;
      &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* The inter container for calculating the content dimension*/&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
        &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
          &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fit-content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fit-content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Noted: This container will only work well when the dimension of each child is static.&lt;/p&gt;

&lt;p&gt;We will talk how to handle child components with dynamic dimension next time.&lt;/p&gt;

&lt;p&gt;Thanks All.&lt;/p&gt;

</description>
      <category>css</category>
      <category>react</category>
      <category>javascript</category>
      <category>transition</category>
    </item>
    <item>
      <title>Are you using these Code Editors?</title>
      <author>CristoferK</author>
      <pubDate>Sun, 18 Apr 2021 09:26:02 +0000</pubDate>
      <link>https://dev.to/cristoferk/are-you-using-these-code-editors-2b9d</link>
      <guid>https://dev.to/cristoferk/are-you-using-these-code-editors-2b9d</guid>
      <description>&lt;p&gt;Are you suing these Code Editors?&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/eC8mO6iqUCk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Don't forget to like, share and subscribe!&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Should I learn Angular or React?</title>
      <author>Abdur Rehman Khalid</author>
      <pubDate>Sun, 18 Apr 2021 09:18:10 +0000</pubDate>
      <link>https://dev.to/abdurrkhalid333/should-i-learn-angular-or-react-4a30</link>
      <guid>https://dev.to/abdurrkhalid333/should-i-learn-angular-or-react-4a30</guid>
      <description>&lt;p&gt;The ReactJS framework has received a huge amount of interest in developers from the starting of the 2019 till now. It is a very common question that arises in the minds of JavaScript developers to decide between Angular, React or VueJS. I am writing this article hoping that this article will help the new learners or JavaScript Developers to decided between which Framework to learn by determining the various factors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-knowledge-of-javascript-or-typescript"&gt;
  &lt;/a&gt;
  1. Knowledge of JavaScript or TypeScript
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Good with JavaScript&lt;/strong&gt;&lt;br&gt;
If you are a pure JavaScript developer and has a strong grip on the Basic JavaScript concepts such as Coercion, Type Checking, and Destructing etc. Then it is a good option for you to learn and keep moving forward with ReactJS. The ReactJS would seem a little bit of overwhelming at first but at the end you will feel more confident and easy in it and you will fall in love working with ReactJS due to its speed and simplicity.&lt;br&gt;
&lt;strong&gt;Good with TypeScript&lt;/strong&gt;&lt;br&gt;
If you are someone who has worked a little bit of TypeScript, then it will be better for you to start learning AngularJS because AngularJS is based on the TypeScript and various annotations of the TypeScript. It will force you to implement the object oriented programming concepts as well. It will be better if you have some experience of working with Interfaces and classes.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e2i2n1ds--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iaa3m6mhsylj1gi9zdr8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e2i2n1ds--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iaa3m6mhsylj1gi9zdr8.png" alt="JavaScript vs TypeScript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-scale-of-the-next-project"&gt;
  &lt;/a&gt;
  2. Scale of the Next Project
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;For Small to Medium Scale Projects&lt;/strong&gt;&lt;br&gt;
If you are working on a project which is not large in size and the maintainability of the project is not that difficult then it a good option to select the ReactJS framework. Because this will make the development easy and effective. This will also make the maintaining the project very easy as well. The cost of building project will be dropped to a great extent as well.&lt;br&gt;
&lt;strong&gt;For Medium to Large Scale Projects&lt;/strong&gt; &lt;br&gt;
If you are going to build a project that will have a lot of modules, then AngularJS will be the better choice as it will allow the maintaining the project very easy. The AngularJS code will be much easy to understand and easy to edit as well. The AngularJS is a bit slower than the ReactJS, so keep this thing in mind as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-beginners-friendly"&gt;
  &lt;/a&gt;
  3. Beginner's Friendly
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ReactJS&lt;/strong&gt;&lt;br&gt;
Due to usage of very fundamental concepts of the JavaScript the ReactJS is very beginners friendly but with the increase in the size of the project, the code can become a bit difficult for beginners to understand and maintain.&lt;br&gt;
&lt;strong&gt;AngularJS&lt;/strong&gt;&lt;br&gt;
The basic concepts of AngularJS are very beginners friendly, the concepts like data-binding, routing are very easy to understand as well. But some concepts like custom events creation and communication between different components can become quite difficult to understand at the first try.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-installing-and-using-the-third-party-libraries"&gt;
  &lt;/a&gt;
  4. Installing and Using the Third Party Libraries
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ReactJS&lt;/strong&gt;&lt;br&gt;
In ReatJS, you have to install different kind of third party JavaScript libraries to complete your work. For Example the ReactJS does not allow the built-in form validation or routing you have to install the individual libraries for such work. So due to this reason the maintenance of ReactJS projects is very difficult because after some time the old libraries can become redundant and you have to work with new libraries.&lt;br&gt;
&lt;strong&gt;AngularJS&lt;/strong&gt; &lt;br&gt;
As AngularJS is a complete framework so you do not have to install the third party libraries to do the very basic works such as form handling and routing. All these kind of thing are already installed in the Angular so you only have to run a single command to get these libraries installed into the project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-compilation-time"&gt;
  &lt;/a&gt;
  5. Compilation Time
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ReactJS&lt;/strong&gt;&lt;br&gt;
The ReacJS is a library which works on the concept of the virtual DOM, so when there is a change in the virtual DOM the actual DOM is changed according to that change. So, the detection of this change is very rapid which makes the change detection in ReactJS very fast and it becomes favourite thing for the developers.&lt;br&gt;
&lt;strong&gt;AngularJS&lt;/strong&gt;&lt;br&gt;
The Angular is a Template driven framework which means that whenever a change occurs in any Angular file, then the whole website will be reload to make that change visible. This thing is very frustrating thing about Angular and many developers dislike this thing and it is a great challenge for Google developers who are maintaining the Angular Project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Final Words&lt;/strong&gt; &lt;br&gt;
It is not absolute that you should learn React or Angular or any other framework, all depends upon your mindset and goals you are working on, if you are looking forward to work with Bid and Enterprise level projects then Angular is good option. But if you are looking forward to work on Startup projects then React will be a great option for you. Stay Motivated and Keep on Learning new thing, because life never stops teaching.&lt;/p&gt;

</description>
      <category>react</category>
      <category>angular</category>
      <category>javascript</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Journey of Hackathon</title>
      <author>Vilsi Jain</author>
      <pubDate>Sun, 18 Apr 2021 08:58:26 +0000</pubDate>
      <link>https://dev.to/vilsi12/journey-of-hackathon-1m1k</link>
      <guid>https://dev.to/vilsi12/journey-of-hackathon-1m1k</guid>
      <description>&lt;p&gt;What is a hackathon?&lt;br&gt;
Hackathon which makes ideas into real world problem solutions , which make you connect with like minded people it make you a good team leader , grow your skills and work with different partners.&lt;br&gt;
I started my journey of hackathon in 1st year itself without knowing much, just made my team and started that time I am not a winner. I am a learner and then till now I take part in an 8+ hackathon and now I am a mentor in a hackathon.&lt;br&gt;
Who can join — In mostly Hackathon is beginner friendly everyone can participate in that just you need to make a good team and develop technical skills or if you don’t have just give it and learn the working pattern.&lt;/p&gt;

&lt;p&gt;Getting Started: Find Your Hackathon best fits on you From what I observed I found that the best profile of hackers are people who:&lt;br&gt;
They are highly competitive with a hunger to win&lt;br&gt;
bored by “just talking about it” and have the passion to see real results&lt;br&gt;
get energized by pressure deadlines&lt;br&gt;
fueled by finding like-minded people to idea to and work with&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First Decided to make a team of technical and good leader.
FORMING TEAM:
Team chemistry and makeup is one of the most important factors not only in winning, but also in making sure that you don’t burn out. To ensure that you have a chance, here are some tips:
Pitch your idea during the initial pitching session and get folks to buy-in on sharing your vision.
Join a team that already has a front-end engineer. This is a key role that I’ll describe in further detail below.
Have a team of friends or previous hackers to participate with. Knowing each member’s strengths and weaknesses beforehand gives you an advantage in preparation and execution.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;3.Employ These Strategies to Be Part of the Best Team- Make good strategies and make everyone on your team give their points and if you have a good team you will always have a chance to make sure that you are in the right direction.&lt;br&gt;
4.Understanding the Judges Panel is Key How to work — this is the best which help me to win understand the background of Judges what they want from you or in which field they are more proficient with this you will get idea that in which field you should focus more and pitch your idea.&lt;br&gt;
5.Decide Your Approach your topic and according to your skills divide it — Yes, always problem or field is given or open to all in that situation                                            1)team member should meet and discuss the innovative idea 2)approach how to make it skills required3)Divide the work on the skills of person.&lt;br&gt;
6.It’s for good time Utilize it best Hackathons typically last 24–48 hours, and the time will fly (especially if you want time for meals and sleep!).Get a general sense of who on your team will work on what, and approximately how long you expect it to take. Timebox tasks, noting when you will “just move on,” even if you can’t get things to work. Bugs can creep up anywhere — and a hackathon is no exception. Deciding in advance how much time you’ll allow for the different parts of your project, and when you’ll move on to a plan B, will help ensure that you have something to demo come pitch time.&lt;br&gt;
7.Learn How to Effectively Validate Your Idea and present it presentation is main to win means putting your ideas in front of judges is most important and you&lt;br&gt;
It’s for good time Utilize it best Hackathons typically last 24–48 hours, and the time will fly (especially if you want time for meals and sleep!).Get a general sense of who on your team will work on what, and approximately how long you expect it to take. Time box tasks, noting when you will “just move on,” even if you can’t get things to work. Bugs can creep up anywhere — and a hackathon is no exception. Deciding in advance how much time you’ll allow for the different parts of your project, and when you’ll move on to a plan B, will help ensure that you have something to demo come pitch time.&lt;br&gt;
Learn How to Effectively Validate Your Idea and present it presentation is main to win means putting your ideas in front of judges is most important and you&lt;br&gt;
8.Always write your mistake which you done and work upon it —&lt;/p&gt;

&lt;p&gt;This is the most important one “Learn from your mistake and try not to revise that in next”&lt;br&gt;
My best experience of winning Hackathon from Incubateind ,Code-n-build ,CIS, Github and my other Hackathon experience is also cool as we always learn from that&lt;br&gt;
IncubatedInd make best experience of your Hackathon I think you once checkout.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>10 Best Google Chrome Extensions for Web Developers in 2021</title>
      <author>Pawan Bhayde</author>
      <pubDate>Sun, 18 Apr 2021 08:55:54 +0000</pubDate>
      <link>https://dev.to/pawanbhayde/10-best-google-chrome-extensions-for-web-developers-in-2021-239i</link>
      <guid>https://dev.to/pawanbhayde/10-best-google-chrome-extensions-for-web-developers-in-2021-239i</guid>
      <description>&lt;p&gt;Whether you're a beginner Programmer or a seasoned programmer, you spend most of some time on Google. If you've got used Google Chrome Extensions a couple of years back, you almost certainly are avoiding it now or not even realizing its existence. But within the previous couple of years, there are many good Google Chrome developer extensions specifically made for Programmers and Software Developers to assists in their work.&lt;/p&gt;

&lt;p&gt;We often download multiple tools for various purposes and spend tons of space for storing . So why not use a Google Chrome Extension to try to to an equivalent job and reduce the work to manage multiple tools. Here we've cumulated an inventory of the simplest Chrome extensions that are very helpful for you as a developer and with these built-in developer tools, there seems to be no further need for more tools.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Daily.dev –&lt;/strong&gt;&lt;br&gt;
If you're a busy developer who cannot continue with the happenings of the programming and development world, then &lt;a href="https://webdevpawan.blogspot.com/2021/04/10-best-google-chrome-extensions-for.html"&gt;Daily.dev&lt;/a&gt; is perhaps the simplest Chrome extension for you. Its creators also are professional web developers and that they created it because they were spending an excessive amount of time checking out the newest dev news.&lt;/p&gt;

&lt;p&gt;It comes with a default opening tab that shows you the foremost awesome dev news with zero efforts. it's an extension which will surely boost your professional growth with content from many qualified sources for you. Simply open a replacement tab, and you’re done. Being an open-source extension, Daily.dev helps an enormous community of developers round the world to remain in-tuned with the newest news.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Wappalyzer –&lt;/strong&gt;&lt;br&gt;
Developed by Elbert Alias in 2009, &lt;a href="https://webdevpawan.blogspot.com/2021/04/10-best-google-chrome-extensions-for.html"&gt;Wappalyzer&lt;/a&gt; may be a Chrome extension that permits the developer to spot the various technologies that constitute the rear end of an internet site .&lt;/p&gt;

&lt;p&gt;Wappalyzer identifies the online technologies used on an internet site detecting web servers, frameworks, installed analytics tools, libraries, CMS, plugins, databases, widgets, and lots of more.&lt;/p&gt;

&lt;p&gt;It is an open-source extension and it uncovers quite thousand technologies which make it a real lifeline for developers and designers within the quest of creating appealing websites.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. sitemode.io –&lt;/strong&gt;&lt;br&gt;
This is certainly one among the simplest Chrome extensions out there for web developers since it allows them to switch , save, and share any website which too in real-time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://webdevpawan.blogspot.com/2021/04/10-best-google-chrome-extensions-for.html"&gt;Sitemod.io&lt;/a&gt; extension allows developers to switch an internet site without having access to the ASCII text file and also to make a shareable link to the modified website.&lt;/p&gt;

&lt;p&gt;It is an excellent tool if you're an internet designer and have ideas for a prospective customer's website.&lt;/p&gt;

&lt;p&gt;It uses Chrome Developer Tools to edit an internet page's HTML, CSS, or JS code, and make it possible to feature your code to the online page. Sitemod.io may be a must-have extension in your developer toolkit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Devo –&lt;/strong&gt;&lt;br&gt;
Devo may be a new tab extension that shows GitHub Trending topics, Product Hunts, Hacker News, and lots of different platforms’ front pages on every new tab, with no-login required.&lt;/p&gt;

&lt;p&gt;Users have the liberty of adjusting the location of the cards, display whatever platform they might wish to in several orders. it's an excellent tool for developers who got to stay updated with the newest changes in various tech-related fields.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://webdevpawan.blogspot.com/2021/04/10-best-google-chrome-extensions-for.html"&gt;Devo&lt;/a&gt; uses specially-built web crawlers for every of the platforms and designs the info within the way of the first platform. it's an open-source extension.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Marmoset&lt;/strong&gt;&lt;br&gt;
User appeal is extremely important for developer projects and lots of times developers might encounter the necessity to make snapshots for his or her codes in their projects for aesthetics or other representation purposes.&lt;/p&gt;

&lt;p&gt;Using &lt;a href="https://webdevpawan.blogspot.com/2021/04/10-best-google-chrome-extensions-for.html"&gt;Marmoset&lt;/a&gt;, it's possible to make beautiful code snapshots, in only seconds, that are useful for either creating graphical representations of your work to be used on social media or in your portfolio website or elsewhere . it's a must have tool for web developers and designers.&lt;/p&gt;

&lt;p&gt;Marmoset- Best Google Chrome Extensions for Software Developers&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. JSON Viewer&lt;/strong&gt;&lt;br&gt;
If you're currently working or have previously worked with anything involving plenty of JSON code like API's (especially RestFul APIs), then you would possibly be totally conscious of the very fact that how clumsy and unreadable the JSON code is usually .&lt;/p&gt;

&lt;p&gt;&lt;a href="https://webdevpawan.blogspot.com/2021/04/10-best-google-chrome-extensions-for.html"&gt;JSON Viewer&lt;/a&gt; may be a visually stunning JSON highlighter and beautifier tool that serves an excellent purpose as a Chrome extension for developers.&lt;/p&gt;

&lt;p&gt;It helps during arranging the JSON data in a visually appealing tree format which may be viewed directly within the browser window. it's an open-source extension for inspecting JSON data.&lt;/p&gt;

&lt;p&gt;Related: Learn to Code, Make Money: the way to Turn Programming Skills Into Income&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. SAML Tracer&lt;/strong&gt;&lt;br&gt;
As an internet developer, one has got to handle large amounts of knowledge that circulates through the whole project and between various others.&lt;/p&gt;

&lt;p&gt;Security Assertion Mark-up Language (SAML) which is an open standard allowing the exchange of authorization credentials between a service provider and an identity provider comes into action here.&lt;/p&gt;

&lt;p&gt;Thus, a developer often has the necessity to trace the SAML traffic. With the assistance of the &lt;a href="https://webdevpawan.blogspot.com/2021/04/10-best-google-chrome-extensions-for.html"&gt;SAML Tracer&lt;/a&gt; Chrome extension, developers can easily trace and highlight SAML traffic.&lt;/p&gt;

&lt;p&gt;It traces the small print of SAML Request and Response and may also trace the small print of HTTP requests or browser traffic including requests like GET, POST, PUT, DELETE, login and logout responses, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. actiTime&lt;/strong&gt;&lt;br&gt;
Any developer round the globe knows that point may be a vital factor for the success of their projects and keeping a track of their development time is important for the project's progress and growth.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://webdevpawan.blogspot.com/2021/04/10-best-google-chrome-extensions-for.html"&gt;actiTime&lt;/a&gt; extension makes time tracking easier and allows you to trace your hours directly from Chrome with a timer.&lt;/p&gt;

&lt;p&gt;It is an excellent tool for developers to stay a track of their work hours and is employed by companies and freelancers to research their performance and manage their project's progress and profitability.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. Ghostery&lt;/strong&gt;&lt;br&gt;
Ghostery may be a powerful privacy protection extension for Chrome developers. It not only blocks ads but also detects and stops trackers, pixels, or the other embedded snippet ultimately speeding up websites.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://webdevpawan.blogspot.com/2021/04/10-best-google-chrome-extensions-for.html"&gt;Ghostery&lt;/a&gt; eliminates annoying advertisements from an internet site and provides tracking protection to guard your data by blocking 3rd party websites from tracking you. it's freed from cost and requires no sign-up or registration to urge started.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. Full-Stack Developer Tools&lt;/strong&gt;&lt;br&gt;
In the past few years, the demand for full-stack developers has risen exponentially within the market then has the demand for full-stack development tools.&lt;/p&gt;

&lt;p&gt;There are an outsized number of tools for full-stack development but it's very tedious work to fetch them from different locations. &lt;a href="https://webdevpawan.blogspot.com/2021/04/10-best-google-chrome-extensions-for.html"&gt;Full-Stack Assistant - Developer Tools&lt;/a&gt; has made this task easier for developers by bringing the foremost used tools for full-stack development under one chrome extension.&lt;/p&gt;

&lt;p&gt;It consists of useful Development Tools and resources in one organized place.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>design</category>
    </item>
  </channel>
</rss>
