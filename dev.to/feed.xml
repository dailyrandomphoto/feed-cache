<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>June: Forem Twitch Events Roundup üëæ</title>
      <author>Christina Gorton</author>
      <pubDate>Tue, 06 Jul 2021 20:58:47 +0000</pubDate>
      <link>https://dev.to/devteam/june-forem-twitch-events-roundup-5gb1</link>
      <guid>https://dev.to/devteam/june-forem-twitch-events-roundup-5gb1</guid>
      <description>&lt;p&gt;In June, Nick Taylor and I were joined by 3 awesome guests. This is a round up of all the wonderful guests who joined us and a special pair programming episode where I show Nick how to animate our Forem logo with CSS and JavaScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#walkthrough-wednesday-with-gant-laborde"&gt;
  &lt;/a&gt;
  Walkthrough Wednesday with Gant Laborde
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/MbOUaLuyieQ"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Nick Taylor and I were joined again by Gant Laborde to discuss AI, TensorFlow, and Gant's new book &lt;a href="https://www.amazon.com/gp/product/B094LZN7WD/ref=dbs_a_def_rwt_bibl_vppi_i0"&gt;"Learning TensorFlow.js: Powerful Machine Learning in JavaScript"&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note: Please excuse my uncontrollable laughing at the beginning of the stream üòÇ Gant was a very funny guest.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Places to follow Gant:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://twitter.com/GantLaborde"&gt;Personal Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://gantlaborde.com/"&gt;Personal Website&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#pair-programming-with-christina-gorton-and-nick-taylor"&gt;
  &lt;/a&gt;
  Pair Programming with Christina Gorton and Nick Taylor
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/fxeRmPvJUQs"&gt;
&lt;/iframe&gt;
&lt;br&gt;
I showed Nick how to create an animation that appeared to be drawing the new Forem logo with both CSS and JavaScript(GreenSock). &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/cgorton/embed/QWpBpbv?height=600&amp;amp;default-tab=js,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#walkthrough-wednesday-with-cassidy-williams"&gt;
  &lt;/a&gt;
  Walkthrough Wednesday with Cassidy Williams
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ndGOOW8zSJo"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Cassidy Williams, Principal Developer Experience Engineer at &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt;, joined us to discuss Next.js, the game Go, mechanical keyboards, &lt;a href="https://www.polywork.com/"&gt;Polywork&lt;/a&gt;, and more! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Places to follow Cassidy:&lt;/strong&gt;&lt;br&gt;
&lt;a href="//cassidoo.co"&gt;Website&lt;/a&gt;&lt;br&gt;
&lt;a href="//cassidoo.co/newsletter"&gt;Newsletter&lt;/a&gt;&lt;br&gt;
&lt;a href="//timeline.cassidoo.co"&gt;Polywork&lt;/a&gt;&lt;br&gt;
&lt;a href="//twitter.com/cassidoo"&gt;Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="//github.com/cassidoo"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#walkthrough-wednesday-with-hiroko-nishimura"&gt;
  &lt;/a&gt;
  Walkthrough Wednesday with Hiroko Nishimura
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2lEPBpSghec"&gt;
&lt;/iframe&gt;
&lt;br&gt;
I was joined by Hiroko Nishimura, founder of AWS newbies, AWS hero, technical writer, and instructor. We talked about switching from full-time to freelance, complications of freelancing, why you might want to freelance, and how to get into tech writing and instructing. &lt;br&gt;
Special guest appearance by Hiroko‚Äôs lovely cat Tamakichi.üêà&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Places to follow Hiroko:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://introtoaws.com/"&gt;Introduction to AWS for Non-Engineers Courses&lt;/a&gt;&lt;br&gt;
&lt;a href="https://awsnewbies.com/"&gt;AWS Newbies&lt;/a&gt; &lt;br&gt;
&lt;a href="https://freelancefinance101.com/"&gt;Ebook for Freelancers&lt;/a&gt;&lt;br&gt;
&lt;a href="https://hiroko.io/"&gt;Blog&lt;/a&gt;&lt;br&gt;
&lt;a href="https://hirokonishimura.com"&gt;Website&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/hirokonishimura"&gt;Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://timeline.hiroko.io/"&gt;Polywork&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks to all our viewers who joined the streams and chatted with us this month! &lt;/p&gt;

&lt;p&gt;Be sure to follow the &lt;a href="https://www.twitch.tv/thepracticaldev"&gt;ThePracticalDev Twitch&lt;/a&gt; channel to be notified when future streams begin and check out all the great guests we have joining us every Wednesday this month. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Our July guests currently include:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/bencodezen"&gt;Ben Hong&lt;/a&gt;, staff developer experience engineer at Netlify, will join to walk us through how we can all leverage Obsidian as a second brain.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/jamesqquick"&gt;James Q. Quick&lt;/a&gt;, Developer Advocate at [Auth0],(&lt;a href="https://twitter.com/auth0"&gt;https://twitter.com/auth0&lt;/a&gt;) will join us to talk Developer Relations and Authentication in the Jamstack.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/thejonanshow"&gt;Jonan Scheffler&lt;/a&gt;, head of Developer Relations at the Relicans along with other folks in the industry, will join us to talk about &lt;a href="https://www.twitch.tv/thejonanshow"&gt;Code School&lt;/a&gt;. &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>opensource</category>
      <category>meta</category>
    </item>
    <item>
      <title>Building a URL shortener with Node.js</title>
      <author>Matt Angelosanto</author>
      <pubDate>Tue, 06 Jul 2021 20:42:53 +0000</pubDate>
      <link>https://dev.to/logrocket/building-a-url-shortener-with-node-js-52oe</link>
      <guid>https://dev.to/logrocket/building-a-url-shortener-with-node-js-52oe</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/subhachanda/"&gt;Subha Chanda&lt;/a&gt;&lt;/strong&gt; ‚úèÔ∏è&lt;/p&gt;

&lt;p&gt;URL shorteners like &lt;a href="http://bit.ly/"&gt;Bitly&lt;/a&gt; and &lt;a href="http://cutt.ly/"&gt;Cuttly&lt;/a&gt; are incredibly popular. In this article, we are going to create a similar tool by building an API service that shortens the URLs provided to it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XHPR5kVi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/get-request-url-shortener.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XHPR5kVi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/06/get-request-url-shortener.gif" alt="Demonstration Of Get Request URL Shortener API Service"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the project, we are going to use &lt;a href="https://www.mongodb.com/"&gt;MongoDB&lt;/a&gt; and &lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt;, so you should have basic knowledge of them for this tutorial.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#planning-the-url-shortener-build-process-in-nodejs"&gt;
  &lt;/a&gt;
  Planning the URL shortener build process in Node.js
&lt;/h2&gt;

&lt;p&gt;Let's first plan out the building process, which is pretty straightforward. For each URL passed into our API, we will generate a unique ID and create a short URL with it. Then, the long URL, short URL, and unique ID will be stored in the database.&lt;/p&gt;

&lt;p&gt;When a user sends a &lt;code&gt;GET&lt;/code&gt; request to the short URL, the URL will be searched within the database, and the user will be redirected to the corresponding original URL. Sound complex? Don't worry, we'll cover everything you need to know.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initializing-the-app-and-installing-dependencies-with-mongodb"&gt;
  &lt;/a&gt;
  Initializing the app and installing dependencies with MongoDB
&lt;/h2&gt;

&lt;p&gt;First, we are going to need a database. Because we'll use MongoDB, we'll need a MongoDB SRV URI. You can create a database from this &lt;a href="https://www.mongodb.com/cloud/atlas"&gt;link&lt;/a&gt;. Our next step is to initialize the project folder with NPM.&lt;/p&gt;

&lt;p&gt;Let's use the command &lt;code&gt;npm init&lt;/code&gt; in the project directory to initialize. Once the project is initialized, we are going to install the required dependencies. The dependencies that we need are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  dotenv: this package loads the environment variables from a file called &lt;code&gt;.env&lt;/code&gt; to &lt;code&gt;process.env&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  Express.js: this is a minimal and flexible web application framework for Node.js&lt;/li&gt;
&lt;li&gt;  Mongoose: this is a MongoDB object modeling tool for Node.js&lt;/li&gt;
&lt;li&gt;  ShortId: this package enables us to generate the short IDs for our URLs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The only developer dependency that we need is nodemon. nodemon is a simple tool that automatically restarts the Node.js server when a file change occurs.&lt;/p&gt;

&lt;p&gt;Now, let's install the dependencies. To install the dependencies that we are going to need in our app, we will use the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i dotenv express mongoose shortid
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the dependencies are installed, we'll install the developer dependency:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-D&lt;/span&gt; nodemon
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's create our server in our &lt;code&gt;app.js&lt;/code&gt; file using Express. To set up an Express server, we need to import the Express package into the &lt;code&gt;app.js&lt;/code&gt; file. Once the package is imported, initialize and store it into a variable called &lt;code&gt;app&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, use the available &lt;code&gt;listen&lt;/code&gt; function to create the server. Here's an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Server Setup&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server is running at PORT &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've used port &lt;code&gt;3333&lt;/code&gt; to run the server. The &lt;code&gt;listen&lt;/code&gt; method in Express starts a UNIX socket and listens for a connection in a given port.&lt;/p&gt;

&lt;p&gt;Now, create a &lt;code&gt;.env&lt;/code&gt; file inside the &lt;code&gt;config&lt;/code&gt; folder to store the MongoDB SRV URI and the base URL. The base URL will be your local host server location for now. Here's my &lt;code&gt;.env&lt;/code&gt; file code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MONGO_URI=mongodb+srv://nemo:YourPasswordHere@cluster0.mkws3.mongodb.net/myFirstDatabase?retryWrites=true&amp;amp;w=majority
BASE=http://localhost:3333
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember to change the &lt;code&gt;&amp;lt;password&amp;gt;&lt;/code&gt; field in the MongoDB URI with your database password.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connecting-the-database-to-the-app"&gt;
  &lt;/a&gt;
  Connecting the database to the app
&lt;/h2&gt;

&lt;p&gt;Now, we'll connect the database to the app. To do so, import the Mongoose and dotenv dependencies into your &lt;code&gt;db.js&lt;/code&gt; file, which is inside the &lt;code&gt;config&lt;/code&gt; folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./.env&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;path&lt;/code&gt; object key is passed inside the dotenv config because the &lt;code&gt;.env&lt;/code&gt; file is not located in the root directory. We are passing the location of the &lt;code&gt;.env&lt;/code&gt; file through this.&lt;/p&gt;

&lt;p&gt;Now create an asynchronous function called &lt;code&gt;connectDB&lt;/code&gt; within a file called &lt;code&gt;db.js&lt;/code&gt;, inside the &lt;code&gt;config&lt;/code&gt; folder. I'll use async/await for this article.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connectDB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MONGO_URI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;useNewUrlParser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;useUnifiedTopology&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Database Connected&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;connectDB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;code&gt;try&lt;/code&gt; block, we wait for Mongoose to connect with the given MongoDB URI. The first parameter in the &lt;code&gt;mongoose.connect&lt;/code&gt; method is the MongoDB SRV URI. Notice that the two key-value pairs are passed in the second parameter to remove the console warnings. Let's understand what the two key-value parameters mean.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;useNewUrlParser: true&lt;/code&gt;: the underlying MongoDB driver has deprecated the current connection string parser. This is why it has added a new flag. If the connection encounters any issue with the new string parser, it can fall back to the old one&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;useUnifiedTopology: true&lt;/code&gt;: this is set to &lt;code&gt;false&lt;/code&gt; by default. Here, it is set to &lt;code&gt;true&lt;/code&gt; so that the MongoDB driver's new connection management engine can be used&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If any error occurs within the &lt;code&gt;catch&lt;/code&gt; statement, we will console log the error and exit with &lt;code&gt;process.exit(1)&lt;/code&gt;. Finally, we export the function with &lt;code&gt;module.exports&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, import the &lt;code&gt;db.js&lt;/code&gt; file into the &lt;code&gt;app.js&lt;/code&gt; file with &lt;code&gt;const connectDB = require('./config/db');&lt;/code&gt; and call the &lt;code&gt;connectDB&lt;/code&gt; function with &lt;code&gt;connectDB()&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-mongoose-schema-in-mongodb"&gt;
  &lt;/a&gt;
  Creating the Mongoose schema in MongoDB
&lt;/h2&gt;

&lt;p&gt;We'll use a Mongoose schema to determine how data is stored in MongoDB. Essentially, the Mongoose schema is a model for the data. Let's create a file called &lt;code&gt;Url.js&lt;/code&gt; inside a &lt;code&gt;models&lt;/code&gt; folder. Import Mongoose here, then use the &lt;code&gt;mongoose.Schema&lt;/code&gt; constructor to create the schema.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UrlSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;urlId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;origUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;shortUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;clicks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Url&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UrlSchema&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The parent object keys are the keys that are going to be stored inside the database. We define each data key. Note that there is a required field for some and a default value for other keys.&lt;/p&gt;

&lt;p&gt;Finally, we export the schema using &lt;code&gt;module.exports = mongoose.model('Url', UrlSchema);&lt;/code&gt;. The first parameter inside &lt;code&gt;mongoose.model&lt;/code&gt; is the singular form of the data that is to be stored, and the second parameter is the schema itself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-the-url-and-index-routes"&gt;
  &lt;/a&gt;
  Building the URL and index routes
&lt;/h2&gt;

&lt;p&gt;The URL route will create a short URL from the original URL and store it inside the database. Create a folder called &lt;code&gt;routes&lt;/code&gt; in the root directory and a file named &lt;code&gt;urls.js&lt;/code&gt; inside of it. We are going to use the Express router here. First, import all of the necessary packages, like so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shortid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;shortid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../models/Url&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;utils&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../utils/utils&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../config/.env&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;utils.js&lt;/code&gt; file inside the &lt;code&gt;utils&lt;/code&gt; folder consists of a function that checks if a passed URL is valid or not. Here's the code for the &lt;code&gt;utils.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;validateUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;(?:(?:(?:&lt;/span&gt;&lt;span class="sr"&gt;https&lt;/span&gt;&lt;span class="se"&gt;?&lt;/span&gt;&lt;span class="sr"&gt;|ftp&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;:&lt;/span&gt;&lt;span class="se"&gt;)?\\&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;)(?:&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(?::&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)?@)?(?:(?&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(?:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="p"&gt;)(?:&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}){&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;})(?&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(?:&lt;/span&gt;&lt;span class="mi"&gt;169&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;254&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;192&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;168&lt;/span&gt;&lt;span class="p"&gt;)(?:&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}){&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;})(?&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="mi"&gt;172&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="p"&gt;.(?:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])(?:&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}){&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;})(?:[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])(?:&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="p"&gt;.(?:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])){&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}(?:&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="p"&gt;.(?:[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="p"&gt;(?:(?:[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="nx"&gt;u00a1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="nx"&gt;uffff0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="nx"&gt;u00a1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="nx"&gt;uffff0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)(?:&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="p"&gt;.(?:[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="nx"&gt;u00a1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="nx"&gt;uffff0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="nx"&gt;u00a1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="nx"&gt;uffff0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(?:&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="p"&gt;.(?:[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="nx"&gt;u00a1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="nx"&gt;uffff&lt;/span&gt;&lt;span class="p"&gt;]{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,})))(?::&lt;/span&gt;&lt;span class="err"&gt;\\&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;})?(?:[&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;?&lt;/span&gt;&lt;span class="sr"&gt;#]&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="sr"&gt;S*&lt;/span&gt;&lt;span class="se"&gt;)?&lt;/span&gt;&lt;span class="sr"&gt;$/i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;value&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;validateUrl&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will use the HTTP post request in the &lt;code&gt;urls.js&lt;/code&gt; file to generate and post the details to the database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shortid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;shortid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../models/Url&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;utils&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../utils/utils&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../config/.env&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Short URL Generator&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/short&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;origUrl&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;BASE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;urlId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;shortid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;validateUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;origUrl&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;origUrl&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shortUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;base&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;urlId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Url&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="nx"&gt;origUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;shortUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;urlId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server Error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Invalid Original Url&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;const { origUrl } = req.body;&lt;/code&gt; will extract the &lt;code&gt;origUrl&lt;/code&gt; value from the HTTP request body. Then we store the base URL into a variable. &lt;code&gt;const urlId = shortid.generate();&lt;/code&gt; is generating and storing a short ID to a variable.&lt;/p&gt;

&lt;p&gt;Once it is generated, we check if the original URL is valid using our function from the &lt;code&gt;utils&lt;/code&gt; directory. For valid URLs, we move into the &lt;code&gt;try&lt;/code&gt; block.&lt;/p&gt;

&lt;p&gt;Here, we first search if the original URL already exists in our database with the &lt;code&gt;Url.findOne({ origUrl });&lt;/code&gt; Mongoose method. If found, we return the data in JSON format; otherwise, we create a short URL combining the base URL and the short ID.&lt;/p&gt;

&lt;p&gt;Then, using our Mongoose model, we pass in the fields to the model constructor and save it to the database with the &lt;code&gt;url.save();&lt;/code&gt; method. Once saved, we return the response in JSON format.&lt;/p&gt;

&lt;p&gt;Unexpected errors for the &lt;code&gt;try&lt;/code&gt; block are handled in the &lt;code&gt;catch&lt;/code&gt; block, and invalid URLs that return &lt;code&gt;false&lt;/code&gt; in our &lt;code&gt;validateUrl&lt;/code&gt; function send back a message that the URL is invalid. Finally, we export the router.&lt;/p&gt;

&lt;p&gt;Previously, we needed to install the body-parser package, but now it is integrated into Express. So head back to the &lt;code&gt;app.js&lt;/code&gt; file and add these two lines to use body-parser:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Body Parser&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlencoded&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These two lines help us read incoming requests. After these two lines of code, import the URL route.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./routes/urls&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because we are using the &lt;code&gt;/api&lt;/code&gt; endpoint, our complete endpoint becomes &lt;code&gt;http://localhost:3333/api/short&lt;/code&gt;. Here's an example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZKE70Y_q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/url-shortener-api-endpoint.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZKE70Y_q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2021/07/url-shortener-api-endpoint.gif" alt="Dashboard Of URL Shortener With API As An Endpoint In The Example URL"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now create another file called &lt;code&gt;index.js&lt;/code&gt; inside the &lt;code&gt;routes&lt;/code&gt; folder to handle the redirection process. In this file, import the necessary dependencies.&lt;/p&gt;

&lt;p&gt;Here, we are first going to search our database for the short URL ID that is passed. If the URL is found, we'll redirect to the original URL.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../models/Url&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/:urlId&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;urlId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlId&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clicks&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;save&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;origUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Not found&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server Error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The HTTP &lt;code&gt;GET&lt;/code&gt; request is getting the URL ID with the help of &lt;code&gt;:urlId&lt;/code&gt;. Then, inside the &lt;code&gt;try&lt;/code&gt; block, we find the URL using the &lt;code&gt;Url.findOne&lt;/code&gt; method, similar to what we did in the &lt;code&gt;urls.js&lt;/code&gt; route.&lt;/p&gt;

&lt;p&gt;If the URL is found, we increase the number of clicks to the URL and save the click amount. Finally, we redirect the user to the original URL using &lt;code&gt;return res.redirect(url.origUrl);&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If the URL is not found, we send a JSON message that the URL is not found. Any uncaught exception is handled in the &lt;code&gt;catch&lt;/code&gt; block. We console log the error and send a JSON message of "Server Error". Finally, we export the router.&lt;/p&gt;

&lt;p&gt;Import the route to the &lt;code&gt;app.js&lt;/code&gt; file, and our URL shortener is ready to use. After importing it, our final &lt;code&gt;app.js&lt;/code&gt; file will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connectDB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./config/db&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./config/.env&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;connectDB&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Body Parser&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlencoded&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./routes/index&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./routes/urls&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// Server Setup&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Server is running at PORT &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we learned how to build a URL shortening service API from scratch. You can integrate it with any frontend you want, and even build a full-stack URL shortener service. I hope you liked reading this article and learned something new along the way. You can find the complete source code on my &lt;a href="https://github.com/nemo0/node-url-shortener"&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#200s-only-monitor-failed-and-slow-network-requests-in-production"&gt;
  &lt;/a&gt;
  200‚Äôs only ‚úîÔ∏è Monitor failed and slow network requests in production
&lt;/h2&gt;

&lt;p&gt;Deploying a Node-based web app or website is the easy part. Making sure your Node instance continues to serve resources to your app is where things get tougher. If you‚Äôre interested in ensuring requests to the backend or third party services are successful, &lt;a href="https://logrocket.com/signup/"&gt;try LogRocket&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1zhbpx-x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2019/12/network-request-filter-2-1.png" alt="LogRocket Network Request Monitoring"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt; is like a DVR for web apps, recording literally everything that happens on your site. Instead of guessing why problems happen, you can aggregate and report on problematic network requests to quickly understand the root cause.&lt;/p&gt;

&lt;p&gt;LogRocket instruments your app to record baseline performance timings such as page load time, time to first byte, slow network requests, and also logs Redux, NgRx, and Vuex actions/state. &lt;a href="https://logrocket.com/signup/"&gt;Start monitoring for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The ONE star rating system ‚Äî the future of rating</title>
      <author>Temani Afif</author>
      <pubDate>Tue, 06 Jul 2021 20:42:12 +0000</pubDate>
      <link>https://dev.to/afif/the-one-star-rating-system-the-future-of-rating-4jl8</link>
      <guid>https://dev.to/afif/the-one-star-rating-system-the-future-of-rating-4jl8</guid>
      <description>&lt;p&gt;Recently, a lot of folks tried their best to provide star rating system. Now it's time to bring THE "star rating" that will change the world!&lt;/p&gt;

&lt;p&gt;I called it: &lt;strong&gt;The ONE star rating&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;
  &lt;sup&gt;Click here if you want to catch with the previous episodes before continuing&lt;/sup&gt;
  
&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;&lt;/a&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/5-star-rating-system-actually-accessible-no-js-no-wai-aria-3idl" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;5 star rating system - ACTUALLY accessible, no JS, no WAI-ARIA and Semantic HTML! ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê [Easily converted to any framework too!]&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial „Éª Jul 2 „Éª 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/lapstjup" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mmOMY4PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--CrJ-tBeD--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366670/7c384675-c0ae-4190-85c5-6de6cc849d34.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mmOMY4PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--CrJ-tBeD--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366670/7c384675-c0ae-4190-85c5-6de6cc849d34.jpg" alt="lapstjup"&gt;&lt;/a&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/lapstjup/implementing-a-star-rating-component-in-vanilla-js-20ob" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Implementing a Star Rating component in Vanilla JS&lt;/h2&gt;
      &lt;h3&gt;Lakshya Thakur „Éª Jul 2 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#uiweekly&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/madsstoumann" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JoLwOpQB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--S8Kp4bXC--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/515396/61d796b8-f5ce-468b-8cb5-808b2bbb9279.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JoLwOpQB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--S8Kp4bXC--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/515396/61d796b8-f5ce-468b-8cb5-808b2bbb9279.jpeg" alt="madsstoumann"&gt;&lt;/a&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/madsstoumann/star-rating-using-a-single-input-i0l" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Star-Rating Using A Single Input&lt;/h2&gt;
      &lt;h3&gt;Mads Stoumann „Éª Jul 3 „Éª 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/afif" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jSZolrIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5k2bquNj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/577896/343fde9f-609b-419b-95d1-07d16b320a37.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSZolrIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5k2bquNj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/577896/343fde9f-609b-419b-95d1-07d16b320a37.png" alt="afif"&gt;&lt;/a&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/afif/scalable-star-rating-without-js-and-no-svg-or-image-for-the-star-2mef" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Scalable "star rating" without JS (and no SVG or image for the star)&lt;/h2&gt;
      &lt;h3&gt;Temani Afif „Éª Jul 4 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/link2twenty" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iZ83AbfI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--mkPwwGe8--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/21408/a5b38912-48cb-4f18-b6b2-40da7956d41d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iZ83AbfI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--mkPwwGe8--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/21408/a5b38912-48cb-4f18-b6b2-40da7956d41d.png" alt="link2twenty"&gt;&lt;/a&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/link2twenty/star-rating-using-unicode-stars-3np2" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Star-rating using Unicode stars&lt;/h2&gt;
      &lt;h3&gt;Andrew Bone „Éª Jul 5 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/inhuofficial" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VQXAgM3l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GddQJU2N--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/551686/52e35d4c-a986-401b-9bca-6ace4c8947d1.gif" alt="inhuofficial"&gt;&lt;/a&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/inhuofficial/star-rating-wars-the-madsafif-menice-an-even-better-star-rating-system-and-a-comparison-3pg5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Star[Rating] Wars - The MadsAfif Menice [An even better star rating system and a comparison]&lt;/h2&gt;
      &lt;h3&gt;InHuOfficial „Éª Jul 5 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/siddharthshyniben" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--icTFgNop--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--s_1gOp8_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/606915/bc777ec0-126a-4a76-afa2-f8e27c1badb0.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--icTFgNop--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--s_1gOp8_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/606915/bc777ec0-126a-4a76-afa2-f8e27c1badb0.jpeg" alt="siddharthshyniben"&gt;&lt;/a&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/siddharthshyniben/star-rating-in-the-terminal-12np" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Star rating in the Terminal&lt;/h2&gt;
      &lt;h3&gt;Siddharth „Éª Jul 6 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;




&lt;/p&gt;

&lt;p&gt;Why having multiple stars when we can do the job with only one star? A unique star that can hold all the information. Let's think outside of the box and build the future of rating systems.&lt;/p&gt;

&lt;p&gt;See it in play:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/KKmVjZq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Thanks to my geometry superpower, I divided the star into 5 parts and the number of selected parts will define the rating. So we have our 1 to 5 rating system with only one star!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#why-this-system-will-beat-all-the-others"&gt;
  &lt;/a&gt;
  Why this system will beat all the others?
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;It's compact&lt;/strong&gt;: All the information hold in a small space. The space needed for one star.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It's outstanding&lt;/strong&gt;: Everyone is getting bored with the old school star rating. This one will impress your visitors and they will want to rate you with a 5/5!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;rtl&lt;/code&gt; or &lt;code&gt;ltr&lt;/code&gt; ??&lt;/strong&gt;: stop thinking about that. We no more have a straight direction but a circular one. Do we have direction with clocks? no we don't! Same thing here, it's a universal circular direction.&lt;/p&gt;

&lt;p&gt;And let's not forget all the other advantages:&lt;/p&gt;

&lt;p&gt;‚úîÔ∏è No JavaScript.&lt;br&gt;
‚úîÔ∏è No complex HTML code.&lt;br&gt;
‚úîÔ∏è A small CSS code.&lt;br&gt;
‚úîÔ∏è No SVG, No images.&lt;br&gt;
‚úîÔ∏è Works with keyboard navigation.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h2&gt;

&lt;p&gt;I kept the same HTML code of my previous implementation. The inputs and one extra element.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/afif" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSZolrIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5k2bquNj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/577896/343fde9f-609b-419b-95d1-07d16b320a37.png" alt="afif"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/afif/scalable-star-rating-without-js-and-no-svg-or-image-for-the-star-2mef" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Scalable "star rating" without JS (and no SVG or image for the star)&lt;/h2&gt;
      &lt;h3&gt;Temani Afif „Éª Jul 4 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;I first start by placing all the inputs (and the extra element) above each other inside a square element.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The square is defined using a fixed width and a ratio (you can also set the height equal to width)&lt;/li&gt;
&lt;li&gt;Thanks to &lt;code&gt;grid-area:1/1&lt;/code&gt;, I can have all the elements above each other without the need of using &lt;code&gt;position:absolute&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;I add &lt;code&gt;width:100%;height:100%&lt;/code&gt; to the inputs so they cover the whole area and I make them invisible (but still interactive)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then, I create the star shape using the &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; element and &lt;code&gt;clip-path&lt;/code&gt;. That shape will have 3 background layers&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The bottom one that cover all the star (the grey coloration)&lt;/li&gt;
&lt;li&gt;The gold middle layer that will define the selected parts. For this I will use a &lt;code&gt;conic-gradient&lt;/code&gt; with a &lt;code&gt;72deg&lt;/code&gt; step (&lt;code&gt;360deg/5&lt;/code&gt;) controlled with the variable &lt;code&gt;--p&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The top layer similar to (2) with a semi transparent color and controlled with the variable &lt;code&gt;--l&lt;/code&gt;. Yes, this one will respond to the hover effect.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now the real trick is the position and shape of our inputs.&lt;/p&gt;

&lt;p&gt;Each one is clipped to the top part of the star like below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZDHGo1Wu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wcpxb4pjoqa8gqfagrjt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZDHGo1Wu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wcpxb4pjoqa8gqfagrjt.png" alt="Star clip path"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this step all of them will define the same part of our star. We have to rotate them so each one will get on the top of a different part.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.stars&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;72deg&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="nc"&gt;.stars&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;144deg&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="nc"&gt;.stars&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;216deg&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="nc"&gt;.stars&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;288deg&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now each input is placed on the top of one part of the star and clipped to that part.&lt;/p&gt;

&lt;p&gt;I think everyone know the rest of the story. On &lt;code&gt;:hover&lt;/code&gt; or &lt;code&gt;:checked&lt;/code&gt; I change the variables I described previously and we have our ONE star rating.&lt;/p&gt;

&lt;p&gt;That's it! With a simple code, we get an innovative star rating. You can easily adjust the size, the circular direction and it does work with default values:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/RwVaWyb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Creating reusable flashes in Rails using Shoelace</title>
      <author>Konnor Rogers</author>
      <pubDate>Tue, 06 Jul 2021 20:14:04 +0000</pubDate>
      <link>https://dev.to/paramagicdev/creating-reusable-flashes-in-rails-using-shoelace-3429</link>
      <guid>https://dev.to/paramagicdev/creating-reusable-flashes-in-rails-using-shoelace-3429</guid>
      <description>&lt;h2&gt;
  &lt;a href="#purpose"&gt;
  &lt;/a&gt;
  Purpose
&lt;/h2&gt;

&lt;p&gt;To document how I made a reusable flash system leveraging Shoelace + Rails&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;We all like beautiful flashes! But sometimes it takes work to make a reusable flash system. I'm going to show how I implemented mine with Shoelace, but this could easily be extended to any other CSS framework or your own CSS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-reusable-interface"&gt;
  &lt;/a&gt;
  Building a reusable interface
&lt;/h2&gt;

&lt;p&gt;There are 2 steps to building a reusable interface for flashes. The first is for the backend.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-controller-concern"&gt;
  &lt;/a&gt;
  Creating a controller concern
&lt;/h2&gt;

&lt;p&gt;Flashes are accessed from a Controller, so as such, its easiest to create a controller concern called: &lt;code&gt;Flashable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In your &lt;code&gt;app/controllers/concerns&lt;/code&gt; directory, create a file called &lt;code&gt;flashable.rb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In your &lt;code&gt;app/controllers/concerns/flashable.rb&lt;/code&gt; file we're going to add a number of convenience methods to interface with flash.&lt;/p&gt;

&lt;p&gt;Basically what we want to do is be able to call things like &lt;code&gt;flash_success("My message")&lt;/code&gt; or &lt;code&gt;flash_danger("Dangerous operation!")&lt;/code&gt; from a controller. So lets first start by building a &lt;code&gt;#show_flash&lt;/code&gt; base.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/concerns/flashable.rb&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Flashable&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;ActiveSupport&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Concern&lt;/span&gt;

  &lt;span class="c1"&gt;# These are the icons that come from the Shoelace docs on Alert.&lt;/span&gt;
  &lt;span class="no"&gt;ICONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;primary: &lt;/span&gt;&lt;span class="s2"&gt;"info-circle"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;success: &lt;/span&gt;&lt;span class="s2"&gt;"check2-circle"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;info: &lt;/span&gt;&lt;span class="s2"&gt;"gear"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;warning: &lt;/span&gt;&lt;span class="s2"&gt;"exclamation-triangle"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;danger: &lt;/span&gt;&lt;span class="s2"&gt;"exclamation-octagon"&lt;/span&gt;
  &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;freeze&lt;/span&gt;

  &lt;span class="n"&gt;included&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show_flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;now: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;icon: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Flashable&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ICONS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

      &lt;span class="nb"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;message: &lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;icon: &lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;hash&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;

      &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;hash&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the building block for our convenience methods. Our convenience methods will build off the structure we have in place here.&lt;/p&gt;

&lt;p&gt;Our final result will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/concerns/flashable.rb&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Flashable&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;ActiveSupport&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Concern&lt;/span&gt;

  &lt;span class="no"&gt;ICONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;primary: &lt;/span&gt;&lt;span class="s2"&gt;"info-circle"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;success: &lt;/span&gt;&lt;span class="s2"&gt;"check2-circle"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;info: &lt;/span&gt;&lt;span class="s2"&gt;"gear"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;warning: &lt;/span&gt;&lt;span class="s2"&gt;"exclamation-triangle"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;danger: &lt;/span&gt;&lt;span class="s2"&gt;"exclamation-octagon"&lt;/span&gt;
  &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;freeze&lt;/span&gt;

  &lt;span class="n"&gt;included&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;flash_primary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;now: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;icon: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;show_flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:primary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;now: &lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;flash_success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;now: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;icon: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;show_flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;now: &lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;flash_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;now: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;icon: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;show_flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;now: &lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;icon: &lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;flash_warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;now: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;icon: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;show_flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:warning&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;now: &lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;icon: &lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;flash_danger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;now: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;icon: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;show_flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:danger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;now: &lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;icon: &lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show_flash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;now: &lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;icon: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;icon&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Flashable&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ICONS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

      &lt;span class="nb"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;message: &lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;icon: &lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;hash&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;

      &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;hash&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes there are some ways we could've meta-programmed our flash messages, but sometimes verbosity is okay! So now, wherever the &lt;code&gt;Flashable&lt;/code&gt; module gets included, it will define these methods in the context of the Class or Module that includes it.&lt;/p&gt;

&lt;p&gt;The next step is to go into your &lt;code&gt;app/controllers/application_controller.rb&lt;/code&gt; and &lt;code&gt;include Flashable&lt;/code&gt; like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/application_helper.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Flashable&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This means every controller now has access to our new flash methods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reusable-frontend-interface"&gt;
  &lt;/a&gt;
  Reusable frontend interface
&lt;/h2&gt;

&lt;p&gt;Now that our controller can successfully call &lt;code&gt;flash_success("message")&lt;/code&gt; now we have to create a way for the frontend to interpret the flash hash and render it accordingly.&lt;/p&gt;

&lt;p&gt;In your &lt;code&gt;app/helpers/application_helper.rb&lt;/code&gt; we're going to make the following helper method: &lt;code&gt;#show_alert&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will take in the following parameters: &lt;code&gt;type, message, icon&lt;/code&gt; and will use these 3 arguments to render a shoelace alert.&lt;/p&gt;

&lt;p&gt;Heres what the method ends up looking like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/helpers/application_helper.rb&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;ApplicationHelper&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show_alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="n"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:)&lt;/span&gt;
    &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sl_alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;type: &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;open: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;closable: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sl_icon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;slot: &lt;/span&gt;&lt;span class="s2"&gt;"icon"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="n"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;In any one of our views we can do call the following code to display a Shoelace flash:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;show_alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;type: &lt;/span&gt;&lt;span class="s2"&gt;"success"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;message: &lt;/span&gt;&lt;span class="s2"&gt;"You have successfully logged in!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;icon: &lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Flashable&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ICONS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:success&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And heres what it will look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TVcRNEBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xcf8n7rbxrpsbg7c524n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TVcRNEBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xcf8n7rbxrpsbg7c524n.png" alt="Image of Shoelace Alert"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-piece-of-the-puzzle"&gt;
  &lt;/a&gt;
  Final piece of the puzzle
&lt;/h2&gt;

&lt;p&gt;Alright now we have a way for displaying flashes, but now we actually need to add a flash handler in our layout.&lt;/p&gt;

&lt;p&gt;Go to &lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt; and we'll add the flash handler code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"margin: 1rem 0;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;show_alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;type: &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;message: &lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:message&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;icon: &lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:icon&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
      &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
      &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-it-all-looks-like"&gt;
  &lt;/a&gt;
  What it all looks like
&lt;/h2&gt;

&lt;p&gt;In a controller of your choice, add some flashes, and then go check out a page! Heres how all the flashes would stack up on the same page!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HomeController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;
    &lt;span class="sx"&gt;%w[primary success info warning danger]&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;flash_method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"flash_&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sym&lt;/span&gt;
      &lt;span class="n"&gt;public_send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flash_method&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;now: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fILTOQPO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lqiovesndo27of0c2l6j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fILTOQPO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lqiovesndo27of0c2l6j.png" alt="All flashes"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>rails</category>
      <category>shoelaces</category>
      <category>alerts</category>
      <category>flashes</category>
    </item>
    <item>
      <title>Snake Bugs Animation (click to the attract the snake bugs)</title>
      <author>FRADAR</author>
      <pubDate>Tue, 06 Jul 2021 20:10:30 +0000</pubDate>
      <link>https://dev.to/fradar/snake-bugs-animation-click-to-the-attract-the-snake-bugs-16ch</link>
      <guid>https://dev.to/fradar/snake-bugs-animation-click-to-the-attract-the-snake-bugs-16ch</guid>
      <description>&lt;p&gt;These snake bugs don't like to be near each other... unless you hold down your mouse.&lt;/p&gt;

&lt;p&gt;A small fun animation I created in my free time.&lt;/p&gt;

&lt;p&gt;When the snake bug thingies come very near, they turn red and move away. That does not happen when you hold down your mouse, though.&lt;/p&gt;

&lt;p&gt;Try it here:&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR/full/qBmWgVW"&gt;https://codepen.io/FRADAR/full/qBmWgVW&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Like it? Wanna see more?&lt;/p&gt;

&lt;p&gt;Follow me here:&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR"&gt;https://codepen.io/FRADAR&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>showdev</category>
      <category>gamedev</category>
      <category>animation</category>
    </item>
    <item>
      <title>The Best Garbage Collection for JMeter</title>
      <author>NaveenKumar Namachivayam ‚ö°</author>
      <pubDate>Tue, 06 Jul 2021 20:08:16 +0000</pubDate>
      <link>https://dev.to/qainsights/the-best-garbage-collection-for-jmeter-99h</link>
      <guid>https://dev.to/qainsights/the-best-garbage-collection-for-jmeter-99h</guid>
      <description>&lt;p&gt;The Best Garbage Collection for JMeter: Automated memory management is one of the core features of Java. By default, JMeter uses the G1GC algorithm to clean up the unreferenced objects in the heap. GC algorithms have been evolving for the past many years. In this blog article, I have done some experiments using the various GCs in JMeter to identify which GC algorithm yields us more threads to run in a bare metal medium powered laptop.&lt;/p&gt;

&lt;p&gt;Before getting started, I am sure that some of you may not agree with the environment setup to validate the GC, base lining the maximum number of threads using the load model etc. If you are not satisfied with this setup, please share your comments so that I can learn along with you.&lt;/p&gt;

&lt;p&gt;I am not going to bore you with the formula to come up with the maximum number of threads that we can inject. Instead, let us focus on the experiment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/QAInsights/Best-Garbage-Collection-for-JMeter" rel="noreferrer noopener"&gt;This experiment's GitHub Repo&lt;/a&gt;&lt;/p&gt;

&lt;h1 id="h-back-to-basics"&gt;Back to basics&lt;/h1&gt;

&lt;h2 id="h-what-is-garbage-collection"&gt;What is Garbage Collection?&lt;/h2&gt;

&lt;p&gt;In Java, everything is an object. Object needs a place to live and it will be huge. When you start the Java application, your Java Virtual Machine creates new objects in the Young Generation which is expected to be short- lived. But sometimes, objects will live longer and takes up the heap space.¬†&lt;/p&gt;

&lt;p&gt;The longer the object lives, it is likely to become garbage collected in the Old Generation. Watch the phrase, &lt;em&gt;it is likely&lt;/em&gt;. JVM may clean up the unreferenced object or it may not. It is up to JVM‚Äôs decision.&lt;/p&gt;

&lt;p&gt;So, what is an unreferenced object? If the object has a reference in the stack memory, then it will not be garbage collected. Else, it might be garbage collected.&lt;/p&gt;

&lt;p&gt;Above example is from the G1GC perspective, at least at a high level. If you want to learn more, please check my &lt;a href="https://youtube.com/playlist?list=PLJ9A48W0kpRJ6Za-PG87scNCJp7kFgW2g" rel="noreferrer noopener"&gt;Performance Engineers&lt;/a&gt; playlist on YouTube.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/BWGxFcgQcYc"&gt;https://youtu.be/BWGxFcgQcYc&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="h-types-of-garbage-collectors"&gt;Types of Garbage Collectors&lt;/h2&gt;

&lt;p&gt;Without deep diving into the GC algorithms, let us see the high-level overview about the following types of Garbage Collectors in Java.¬†&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Serial Garbage Collector&lt;/li&gt;
&lt;li&gt;Parallel Garbage Collector&lt;/li&gt;
&lt;li&gt;CMS Garbage Collector&lt;/li&gt;
&lt;li&gt;G1 Garbage Collector&lt;/li&gt;
&lt;li&gt;Epsilon Garbage Collector&lt;/li&gt;
&lt;li&gt;Z Garbage Collector&lt;/li&gt;
&lt;li&gt;Shenandoah Garbage Collector&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this experiment, I did multiples execution using commonly used GC algorithms namely: G1GC, Z GC, and Shenandoah GC.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Serial GC&lt;/strong&gt; is one of the simplest GC algorithms.¬†It uses single thread to carry out the GC activity. It is not ideal for multi-threaded application like JMeter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parallel GC&lt;/strong&gt; uses multiple threads to carry out the GC activity, but it injects the pauses while doing the GC.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CMS (Concurrent Mark Sweep) GC &lt;/strong&gt;is deprecated algorithm in Java where it marks the referenced object and sweeps the remaining. It needs more CPU to achieve more throughput. Since it is deprecated, I have not included this GC for the experiment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Epsilon GC&lt;/strong&gt; is a passive GC. Meaning, it will not perform any GC. Once the heap is full. It just terminates the application. It is useful to baseline the configuration and for testing your application. Hence, I am not using Epsilon GC in this experiment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/07/Epsilon.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wfUqgbK3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/07/Epsilon.jpg" alt="Epsilon GC - Meme by NaveenKumar"&gt;&lt;/a&gt;Epsilon GC - Meme by NaveenKumar&lt;/p&gt;

&lt;p&gt;For more memes, please check &lt;a href="https://qainsights.github.io/Testing-Jokes-Memes/" rel="noreferrer noopener"&gt;this repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;G1GC (Garbage First Garbage Collector)&lt;/strong&gt; is one of the commonly used GC algorithms in Java and it is the default GC in Java 11. It separated heaps into multiple regions as I mentioned above and carry out the GC activity efficiently. G1GC is performant than CMS GC.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ZGC&lt;/strong&gt; yields less than 10ms GC time. It performs all the expensive work concurrently. ZGC yielded surprising results in this experiment. It works well with the large volume of heaps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shenandoah GC&lt;/strong&gt; is from Red Hat team which the low pause time garbage collector that reduces GC pause times by performing more garbage collection work concurrently with the running Java application. Whether your heap size is 200¬†GB or 2 GB, the semantics is identical.&lt;/p&gt;

&lt;h1 id="h-experiment-setup"&gt;Experiment Setup&lt;/h1&gt;

&lt;p&gt;I have not used Docker setup to run these tests. I want to measure the performance of each GC for JMeter in a bare metal machine. My laptop is at least six years old. But it is running, great apart from fan speed.&lt;/p&gt;

&lt;p&gt;Below is the system configuration:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OS Name: Microsoft Windows 10 Pro&lt;/li&gt;
&lt;li&gt;System Model: Inspiron 15-7579&lt;/li&gt;
&lt;li&gt;System Type:  x64-based PC&lt;/li&gt;
&lt;li&gt;Processor: Intel(R) Core (TM) i7-7500U CPU @ 2.70GHz, 2901 Mhz, 2 Core(s), 4 Logical Processor(s)&lt;/li&gt;
&lt;li&gt;Installed Physical Memory (RAM): 16.0 GB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Java and JMeter versions are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Java version for G1GC and Shenandoah is Java 11.&lt;ul&gt;&lt;li&gt;AdoptOpenJDK with Hotspot JVM&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Java version for ZGC is Java 16.&lt;ul&gt;&lt;li&gt;AdoptOpenJDK with Hotspot JVM&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JMeter 5.4.1&lt;ul&gt;&lt;li&gt;No JMeter plugins&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;Max heap size allocated is 4 GB for all the experiments.&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Demo application set up:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Jetty 9.4.38.v20210224 hitting sample demo application at localhost:8080.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;JMeter Test Plan&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Total number of HTTP Samplers: 8&lt;/li&gt;
&lt;li&gt;Constant Timer of 300 milliseconds&lt;/li&gt;
&lt;li&gt;Total Bytes for all the requests: 894.388 Kilobyte&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before I started the experiments, I have closed all the resource consuming programs such as Vivaldi browser, MS Outlook, One Drive, Docker, MS Office programs, recording software, and more.&lt;/p&gt;

&lt;p&gt;I have kept only the following programs open:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Two terminal sessions - to run Jetty application and JMeter in CLI mode.&lt;/li&gt;
&lt;li&gt;Notepad ‚Äì to take notes.&lt;/li&gt;
&lt;li&gt;Snagit ‚Äì to capture the screenshots.&lt;/li&gt;
&lt;li&gt;Task Manager ‚Äì to view the CPU and Memory trends.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, there will be background processes running e.g., Anti-virus, daemon apps etc. I cannot kill those.&lt;/p&gt;

&lt;p&gt;Following are the assumptions we can make:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;50% of RAM i.e., 8 GB is for Operating System&lt;/li&gt;
&lt;li&gt;4 GB is allocated to JMeter which is consistent across the multiple runs.&lt;ul&gt;&lt;li&gt;1 GB might be allocated for the daemon threads.&lt;/li&gt;&lt;/ul&gt;
&lt;ul&gt;&lt;li&gt;We are making use of 3 GB of RAM slice.&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Remaining might be consumed by Jetty app.&lt;/li&gt;
&lt;li&gt;No network overhead as we are using locally hosted app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From JMeter perspective, there is no resource consuming elements in the test plan.&lt;/p&gt;

&lt;p&gt;Also, after each run, I gave some breath time for my system, so that it can come back to normal utilization.&lt;/p&gt;

&lt;h2 id="h-how-to-change-the-heap-size-in-jmeter"&gt;How to change the heap size in JMeter?&lt;/h2&gt;

&lt;p&gt;Open jmeter.bat in your favorite editor and edit the line which has &lt;code&gt;SET HEAP&lt;/code&gt; and configure the heap size to 4g e.g. &lt;code&gt;set HEAP=-Xms4g -Xmx4g -XX:MaxMetaspaceSize=256m&lt;/code&gt;&lt;/p&gt;

&lt;h2 id="h-the-best-garbage-collection-for-jmeter-experiment"&gt;The Best Garbage Collection for JMeter Experiment&lt;/h2&gt;

&lt;h2 id="h-g1gc"&gt;G1GC&lt;/h2&gt;

&lt;p&gt;I started my experiment with G1GC as it is the default GC in Java 11 and with 5000 threads with a ramp up of 300 seconds. I am aware that this number is high considering my system configuration. But surprisingly it performed well.&lt;/p&gt;

&lt;p&gt;Throughout this experiment I am focusing only on the number of threads that JMeter can inject. ¬†Jetty will throw high response time eventually. The response time, number of failed transactions, and other parameters are secondary for this experiment. But in your actual project, you need to consider all the parameters.&lt;/p&gt;

&lt;p&gt;Below is the 5000 threads ‚Äì G1GC screenshot. It is a clean run. For every run, I terminated the execution after few minutes of ramp up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/07/G1GC-5000.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--frdJgQPM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/07/G1GC-5000-1024x624.jpg" alt="G1GC - 5000 Threads"&gt;&lt;/a&gt;G1GC - 5000 Threads&lt;/p&gt;

&lt;p&gt;Next run I injected 7000 threads which is also performed well. But it 10000 threads run, I started seeing failures as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/07/G1GC-10000.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rgahaTII--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/07/G1GC-10000-1024x656.jpg" alt="Garbage Collection for JMeter - G1GC - 7000 Threads"&gt;&lt;/a&gt;G1GC - 7000 Threads&lt;/p&gt;

&lt;p&gt;In 12000 and 15000 threads run as well, the trend persisted. After these runs, I injected 25000 because of over confidence. But surprisingly, 20809&lt;sup&gt;th&lt;/sup&gt; thread JMeter threw Out of Memory (heap space) error. To know more about this error, please check my YouTube tutorial.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/07/G1GC-25000.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iTInGwLf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/07/G1GC-25000.jpg" alt="G1GC - 25000 Threads"&gt;&lt;/a&gt;G1GC - 25000 Threads&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/6gkCnhcohe4"&gt;https://youtu.be/6gkCnhcohe4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/eZIArJEkwjo"&gt;https://youtu.be/eZIArJEkwjo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I repeated the same run, the outcome is similar.&lt;/p&gt;

&lt;p&gt;Let us conclude G1GC experiment stating that JMeter could inject around 20000 threads in my system configuration.&lt;/p&gt;

&lt;h2 id="h-shenandoah-gc"&gt;Shenandoah GC&lt;/h2&gt;

&lt;p&gt;To change the GC algo in JMeter, open jmeter.bat and add the below in ` set GC_ALGO` line:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-XX:+UseShenandoahGC&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As we know, Shenandoah GC should perform better than G1GC. Let us see the Shenandoah GC results. I started my first test with the over confidence by injecting 20000 threads. Shenandoah GC handled well. Here is the screenshot.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/07/SD-20000.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yBZXpkJe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/07/SD-20000-1024x487.jpg" alt="Garbage Collection for JMeter - Shenandoah - 20000 Threads"&gt;&lt;/a&gt;Shenandoah - 20000 Threads&lt;/p&gt;

&lt;p&gt;Then, I increased the thread count to 25000. It broke at 21439&lt;sup&gt;th&lt;/sup&gt; thread with heap space out of memory error. If you see the error count, it is surprisingly less.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/07/SD-25000.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RlkOWr60--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/07/SD-25000.jpg" alt="Shenandoah - 25000 Threads"&gt;&lt;/a&gt;Shenandoah - 2000 Threads&lt;/p&gt;

&lt;h2 id="h-zgc"&gt;ZGC&lt;/h2&gt;

&lt;p&gt;To change the GC algo to ZGC, open jmeter.bat and add the below in `set GC_ALGO` line:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-XX:+UseZGC&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here comes the next surprise, I started ZGC with 25000 threads. My bad. See it for yourself. It threw heap space out of memory after 8000 threads. I am not sure why. If you are expert in ZGC, please share your inputs in the comment section.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/07/ZGC-25000.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ET69WGIz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/07/ZGC-25000-1024x431.jpg" alt="ZGC - 10000"&gt;&lt;/a&gt;ZGC - 10000&lt;/p&gt;

&lt;p&gt;Even for 10000 threads, I got out of memory error again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/07/ZGC-10000.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LttVXf7A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/07/ZGC-10000-1024x307.jpg" alt="ZGC - 10000 OOM"&gt;&lt;/a&gt;ZGC - 10000 OOM&lt;/p&gt;

&lt;p&gt;But it ran well for 5000 threads. As the ZGC, threw OOM for 10000 threads, I did not purse my experiment further.&lt;/p&gt;

&lt;h2 id="h-observations"&gt;Observations&lt;/h2&gt;

&lt;p&gt;G1GC injected more than 20000 threads without any issue. But there were some stutters during the execution, I am not sure is it because of my OS or JMeter. I should have executed with Visual VM, but I do not want to have overhead again. G1GC had lot of errors in the samplers consistently across high volume runs.&lt;/p&gt;

&lt;p&gt;Shenandoah GC handled the load well. The number of errors were less, observe the trend in the above screenshots, you can easily correlate. Response times were high. From my perspective, I never bothered about that. My focus is only on active threads.&lt;/p&gt;

&lt;p&gt;I expected much from ZGC, but it ran out of memory too soon. Maybe it needs more slices to work with. But clearly ZGC is not apt to run high volumes test.&lt;/p&gt;

&lt;p&gt;If you can carry out this experiment in a high-powered instance in cloud, you can begin with ZGC by slicing more memory into it.&lt;/p&gt;

&lt;p&gt;I can hear you saying that, why you have not tuned the GC parameters to yield performance. My intention is to try just vanilla flavors without touching the other parameters. The main reason is there are too many parameters to begin with. E.g. Shenandoa GC has three modes: normal/satb, iu, and passive. Default is normal/satb. Tuning these parameters might have yielded more number of threads. If you take G1GC, we could have achieved more performance. I am not a tuning expert. Let me conclude the experiment here.&lt;/p&gt;

&lt;h2 id="h-conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;From multiple runs with varying number of threads, G1GC and Shenandoah performs almost similar in terms of performance. Further tuning of G1GC might have outperformed Shenandoah GC and vice-versa.&lt;/p&gt;

&lt;p&gt;ZGC algo has failed in my system configuration. But it could perform better in a better environment. To choose the best GC, you need to run your tests with each GC and baseline each number in your environment setup. You will get surprising results as me.&lt;/p&gt;

</description>
      <category>performance</category>
      <category>testing</category>
      <category>tutorial</category>
      <category>java</category>
    </item>
    <item>
      <title>Click | A clicking game</title>
      <author>FRADAR</author>
      <pubDate>Tue, 06 Jul 2021 20:01:03 +0000</pubDate>
      <link>https://dev.to/fradar/click-a-clicking-game-4225</link>
      <guid>https://dev.to/fradar/click-a-clicking-game-4225</guid>
      <description>&lt;p&gt;Just keep clicking!&lt;/p&gt;

&lt;p&gt;A clicking game made in 8 hours.&lt;/p&gt;

&lt;p&gt;Let's see how many things you can click before you lose your sanity!&lt;/p&gt;

&lt;p&gt;Try it here:&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR/full/dyWPPze"&gt;https://codepen.io/FRADAR/full/dyWPPze&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Like my games? Follow me on dev or on &lt;a href="https://codepen.io/FRADAR" rel="noopener noreferrer"&gt;Codepen!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>gamedev</category>
      <category>showdev</category>
      <category>challenge</category>
    </item>
    <item>
      <title>Hot Reload para desarrolladores de .NET</title>
      <author>Daniel Gomez Jaramillo</author>
      <pubDate>Tue, 06 Jul 2021 19:56:36 +0000</pubDate>
      <link>https://dev.to/esdanielgomez/hot-reload-para-desarrolladores-de-net-3h6h</link>
      <guid>https://dev.to/esdanielgomez/hot-reload-para-desarrolladores-de-net-3h6h</guid>
      <description>&lt;p&gt;¬°Hola! Un gusto saludarte. En esta ocasi√≥n tendremos la oportunidad de aprender sobre una de las funcionalidades m√°s esperadas por los desarrolladores de .NET: &lt;code&gt;Hot Reload&lt;/code&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#qu%C3%A9-es-hot-reload"&gt;
  &lt;/a&gt;
  ¬øQu√© es Hot Reload?
&lt;/h3&gt;

&lt;p&gt;Hot Reload, o recarga en caliente en espa√±ol, nos permite modificar el c√≥digo fuente de nuestra aplicaci√≥n mientras esta se encuentra en ejecuci√≥n y visualizar estos cambios en tiempo real sin necesidad de reiniciar la ejecuci√≥n. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#c%C3%B3mo-acceder-a-esta-nueva-funcionalidad"&gt;
  &lt;/a&gt;
  ¬øC√≥mo acceder a esta nueva funcionalidad?
&lt;/h3&gt;

&lt;p&gt;Al momento de escribir este art√≠culo (junio de 2021), es posible acceder a .NET Hot Reload desde la versi√≥n &lt;a href="https://visualstudio.microsoft.com/es/vs/preview/"&gt;16.11 Preview&lt;/a&gt; de Visual Studio 2019. Con esta versi√≥n, podremos abrir cualquier proyecto sobre el ecosistema de .NET que sea compatible, y probar esta funcionalidad. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hot-reload-en-acci%C3%B3n"&gt;
  &lt;/a&gt;
  Hot Reload en acci√≥n
&lt;/h3&gt;

&lt;p&gt;Para probar esta funcionalidad, veamos un ejemplo de una aplicaci√≥n web con el framework DotVVM sobre ASP.NET, el cual se basa en el patr√≥n MVVM (Modelo, Vista, VistaModelo). &lt;/p&gt;

&lt;p&gt;Los pasos son los siguientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Abrir el proyecto en Visual Studio.&lt;/li&gt;
&lt;li&gt;Iniciar la aplicaci√≥n con el depurador asociado con F5.&lt;/li&gt;
&lt;li&gt;Abrir el archivo con el c√≥digo fuente que se desea editar. &lt;/li&gt;
&lt;li&gt;Aplicar los cambios en el c√≥digo.&lt;/li&gt;
&lt;li&gt;Visualizar la actualizaci√≥n correspondiente. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para aplicar los cambios realizados en el c√≥digo, en Visual Studio 2019 podremos ubicar el bot√≥n Hot Reload como se puede visualizar a continuaci√≥n: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hM7SXpNo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4bhqg6n36xghblq2ru5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hM7SXpNo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c4bhqg6n36xghblq2ru5.png" alt="Hot Reload Button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Este es un ejemplo para los cambios efectuados en una clase en C#:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HPSnsf4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z2o8vff0pcec8f4nkrwx.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HPSnsf4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z2o8vff0pcec8f4nkrwx.gif" alt="GIF Hot Reload C Sharp"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Asimismo, lo podemos aplicar a otros componentes de c√≥digo fuente, por ejemplo, a las vistas HTML en DotVVM:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YF4BLMz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fmhm24fy3qr4t57pqre0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YF4BLMz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fmhm24fy3qr4t57pqre0.gif" alt="GIF Hot Reload HTML"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fabuloso, ¬øverdad? Ahora bien, es posible que te preguntes qu√© sucede cuando nos encontramos con excepciones en tiempo de ejecuci√≥n o con errores de compilaci√≥n. Pues bien, en esos escenarios visualizaremos algo como esto: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YhjWAg4k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4j77wyyet3icyjpr1ghb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YhjWAg4k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4j77wyyet3icyjpr1ghb.gif" alt="GIF Hot Reload Errors"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#limitaciones-del-hot-reload"&gt;
  &lt;/a&gt;
  Limitaciones del Hot Reload
&lt;/h3&gt;

&lt;p&gt;De acuerdo con la documentaci√≥n de Microsoft, los cambios que se pueden realizar en el c√≥digo fuente durante una sesi√≥n de depuraci√≥n sin reiniciar la ejecuci√≥n son los siguientes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tipos.&lt;/li&gt;
&lt;li&gt;Iteradores.&lt;/li&gt;
&lt;li&gt;Expresiones asincr√≥nicas/await.&lt;/li&gt;
&lt;li&gt;Expresiones LINQ.&lt;/li&gt;
&lt;li&gt;Lambdas.&lt;/li&gt;
&lt;li&gt;Objetos din√°micos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Asimismo, existen cambios no compatibles con esta funcionalidad, a continuaci√≥n, se pueden visualizar algunos de ellos&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cambiar el nombre de los elementos.&lt;/li&gt;
&lt;li&gt;Eliminaci√≥n de espacios de nombres, tipos y miembros.&lt;/li&gt;
&lt;li&gt;Modificaci√≥n de interfaces.&lt;/li&gt;
&lt;li&gt;Modificaci√≥n de firmas de m√©todo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En esta p√°gina web se pueden visualizar todos los detalles en cuanto a las limitaciones del Hot Reload en .NET: &lt;a href="//aka.ms/dotnet/hot-reload"&gt;https://aka.ms/dotnet/hot-reload&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aspectos-adicionales-por-comentar"&gt;
  &lt;/a&gt;
  Aspectos adicionales por comentar
&lt;/h3&gt;

&lt;p&gt;Los ejemplos sobre Hot Reload que acabamos de visualizar fueron aplicados sobre un proyecto con .NET 5. Esto ha sido posible gracias a que hemos utilizado la Preview 16.11 de Visual Studio 2019. &lt;/p&gt;

&lt;p&gt;Ahora bien, Microsoft ha pensado esta funcionalidad principalmente para .NET 6, a diferencia de nuestros ejemplos, podr√≠amos visualizar como se recarga nuestra p√°gina web en tiempo real con Hot Reload, asimismo, si quisi√©ramos utilizar esta funcionalidad en la consola de comandos, por ejemplo, necesitar√≠amos por lo menos la Preview 4 de .NET 6. &lt;/p&gt;

&lt;p&gt;En la actualidad (junio 2021) podemos ver √∫nicamente de manera preliminar estas caracter√≠sticas, para el futuro, Microsoft planea obtener toda la potencia de esta caracter√≠stica con .NET 6 (y futuras versiones de .NET) y Visual Studio 2022. Por el momento, es posible mencionar que la nueva versi√≥n de .NET ser√° anunciada en la &lt;a href="https://dotnetconf.net/"&gt;.NET Conf 2021&lt;/a&gt;, la cual, se llevar√° a cabo en noviembre 9-11 de este a√±o. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gracias-por-leer"&gt;
  &lt;/a&gt;
  Gracias por leer
&lt;/h3&gt;

&lt;p&gt;Muchas gracias por leer, espero que este art√≠culo te haya parecido interesante y pueda serte de utilidad en el futuro. Si tienes alguna pregunta o alguna idea que necesites discutir, ser√° un gusto poder colaborarte y juntos intercambiar conocimientos entre s√≠.&lt;/p&gt;

&lt;p&gt;¬°Nos vemos en &lt;a href="https://twitter.com/esDanielGomez"&gt;Twitter&lt;/a&gt;! O si gustas tambi√©n puedes escribirme por &lt;a href="https://instagram.com/esdanielgomez"&gt;Instagram&lt;/a&gt; o &lt;a href="https://t.me/esdanielgomez"&gt;Telegram&lt;/a&gt;. :=)&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>dotnet</category>
      <category>csharp</category>
      <category>html</category>
    </item>
    <item>
      <title>Build a Discord Bot with Discord.js (v13) ü§ñ</title>
      <author>Hypening</author>
      <pubDate>Tue, 06 Jul 2021 19:55:59 +0000</pubDate>
      <link>https://dev.to/hypening/build-a-discord-bot-with-discord-js-v13-14mj</link>
      <guid>https://dev.to/hypening/build-a-discord-bot-with-discord-js-v13-14mj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hello there, this sentence will mark the beginning of my first ever article released to the public. In this, and the following articles I will introduce beginners to the magical world of Discord bots. I will be using the new discord.js v13 library. However, there are certain prerequisites.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;At least beginner knowledge of Javascript. I've seen this all too much, eager new developers asking to be spoon-fed basic Javascript and Node.js fundamentals. There are innumerable fantastic resources out there, like freeCodeCamp. Don't be scared to use Google, DuckDuckGo, or any other search engine.&lt;/li&gt;
&lt;li&gt;Node.js and NPM installed on your machine. As this is an article about Discord.js solely, I wont be going in to the specifics here. You can download Node.js and NPM @ &lt;a href="https://nodejs.org/"&gt;https://nodejs.org/&lt;/a&gt;. Again, Google is your friend in case you're unsure as to how to install Node.JS properly. Discord.js requires Node.js version 14.0.0 or newer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#background-information"&gt;
  &lt;/a&gt;
  Background information
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúIt is important to view knowledge as sort of a semantic tree -- make sure you understand the fundamental principles, i.e. the trunk and big branches, before you get into the leaves/details or there is nothing for them to hang on to.‚Äù ~ Elon Musk&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In order to make something stick and make sense, you'll want to get the basics down (the trunk and big branches). Having a solid foundation is key to understanding and remembering a complex subject. What is discord.js anyways?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;discord.js is a powerful Node.js module that allows you to interact with the Discord API very easily. It takes a much more object-oriented approach than most other JS Discord libraries, making your bot's code significantly tidier and easier to comprehend.&lt;/em&gt; (&lt;a href="https://discord.js.org/#/"&gt;discord.js.org&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Let us zoom in on a part of this paragraph: "&lt;em&gt;...interact with the **Discord API&lt;/em&gt;* very easily...*". Discord.js is nothing more and nothing less than an abstract layer between you and the Discord API. It takes care of the nasty stuff, like sending and receiving requests. Like most APIs, there is a rate limit. You should keep this in mind when building Discord bots (or any type of application that interacts with an API).&lt;/p&gt;

&lt;p&gt;In the current master branch they interact with Discord API version 8. Information about the API can be found &lt;a href="https://discord.com/developers/docs/intro"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;I recommend you to have at least 2 tabs open during this series of articles: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A tab with discord.js.org open&lt;/li&gt;
&lt;li&gt;A tab with this article open&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#creating-our-bot"&gt;
  &lt;/a&gt;
  Creating our bot
&lt;/h2&gt;

&lt;p&gt;To interact with the API you will need an API key. You can obtain this key by making a new application in the &lt;a href="https://discord.com/developers/applications"&gt;Developer Portal&lt;/a&gt;.  At the top left there should be a button "New Application", click that. You'll be prompted with a name. You can name the application anything you'd like. Keep in mind that this will also be the name of your bot. This is what you should see now:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dGPbBkYh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/cvP3Bv1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dGPbBkYh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/cvP3Bv1.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
However, this isn't actually a Discord bot yet. Go to the Bot tab (At the left on PC. On mobile you'd have to open the navigation bar first by clicking the hamburger menu icon). &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Je65x01c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/p4jLZKM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Je65x01c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/p4jLZKM.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
Press Add Bot and confirm you want to create a new bot. Congratulations! You've made your first bot! Anyway, what's important now is the token. We will come back and fetch the token soon. But first:&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-our-project-folder"&gt;
  &lt;/a&gt;
  Setting up our project folder
&lt;/h2&gt;

&lt;p&gt;As with any Node project, we will have to prepare a project folder. Create a new folder with a name to your liking. My folder is named "Tutorial". &lt;/p&gt;

&lt;p&gt;Open this folder with a terminal to your liking. I will be using the stock command prompt Windows offers. When on Windows, you can open a new CMD window using the shortcut CTRL+R, then typing &lt;code&gt;cmd&lt;/code&gt; and pressing enter. You will want to navigate to your project folder now. This can be done using the &lt;code&gt;cd &amp;lt;path to folder&amp;gt;&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Now we can finally use Node for the first time. Every Node project needs a special file called &lt;code&gt;package.json&lt;/code&gt;. This file holds important information about your project, like the libraries used, its name, etc... The following command makes this file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;The syntax of the above command can be found &lt;a href="https://docs.npmjs.com/cli/v7/commands/npm-init"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now, we have to install discord.js itself. Since we will be using the latest version, we have to install the master branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; npm i discord.js@dev --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;The syntax of the above command can be found &lt;a href="https://docs.npmjs.com/cli/v7/commands/npm-install"&gt;here&lt;/a&gt;. &lt;code&gt;--save&lt;/code&gt; means we save it in our &lt;code&gt;package.json&lt;/code&gt; file. Whenever we run &lt;code&gt;npm i&lt;/code&gt; now it will check if discord.js is already installed, if not it will install it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If everything went well, discord.js should now be installed. We can now proceed to make our main file. Usually this file is called &lt;code&gt;index.js&lt;/code&gt;. Let's stick to this convention. Make a new file named &lt;code&gt;index.js&lt;/code&gt;. Open this file with your favorite code editor or IDE. Now we can finally get started with:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-a-basic-bot"&gt;
  &lt;/a&gt;
  Writing a basic bot
&lt;/h2&gt;

&lt;p&gt;I will give our final code first, and then explain it part by part. You may have noticed that this is the exact code the &lt;a href="https://discord.js.org/#/docs/main/master/general/welcome"&gt;discord.js docs&lt;/a&gt; give!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Intents&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;discord.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;intents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Intents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FLAGS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GUILDS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Intents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FLAGS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GUILD_MESSAGES&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ready&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Logged in as &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;messageCreate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ping&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pong&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;place token here&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us now break this chunk of code down in to bite-sized pieces. First we &lt;em&gt;require&lt;/em&gt; the parts of the discord.js library we want to use.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Intents&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;discord.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see in the example code above, we use the Client object and the Intents object. However, this is the same as doing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Discord&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;discord.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;Client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Discord&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;Intents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Discord&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Intents&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use which ever floats your boat! I will be sticking to the first one. We will be looking at what each one does now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;intents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Intents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FLAGS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GUILDS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Intents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FLAGS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GUILD_MESSAGES&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we define our client, we initialize the Client class.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PreaZPaq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/H6nHjrl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PreaZPaq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/H6nHjrl.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
The Client class can take options of type &lt;code&gt;ClientOptions&lt;/code&gt;. Which are the 'Options for the client'. Note that what I just mentioned is literally described in the docs &lt;a href="https://discord.js.org/#/docs/main/master/class/Client"&gt;here&lt;/a&gt;! You can specify a lot of options, to view which options you can change, click &lt;code&gt;ClientOptions&lt;/code&gt;. There is a lot of other information provided here. Like the properties, methods and events &lt;code&gt;Client&lt;/code&gt; has. Take your time to read all of them briefly...&lt;/p&gt;

&lt;p&gt;When you look at the &lt;code&gt;ClientOptions&lt;/code&gt; &lt;a href="https://discord.js.org/#/docs/main/master/typedef/ClientOptions"&gt;here&lt;/a&gt;, you can see that one field is required to be set. Namely, the intents. Intents are what you want to access. In our case we want to be able to interact with guilds (servers) and the messages sent in these guilds. Therefore we also require &lt;code&gt;Intents&lt;/code&gt; from discord.js. What is &lt;code&gt;Intents&lt;/code&gt;, you may (probably not) ask. Why, thank you for asking.  It is &lt;a href="https://discord.js.org/#/docs/main/master/typedef/ClientOptions"&gt;this&lt;/a&gt;. Indeed, I am referring to the docs once more! Everything there is to know is written there afterall. Let us take a look at that piece of code again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;intents&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Intents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FLAGS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GUILDS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Intents&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FLAGS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GUILD_MESSAGES&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We take the &lt;code&gt;FLAGS&lt;/code&gt; property of &lt;code&gt;Intents&lt;/code&gt;. Which contains all the available intents. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N1gLXYOb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/kvEGaGg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N1gLXYOb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/kvEGaGg.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
We want to know when our bot is ready to serve us. This can be done using the &lt;code&gt;ready&lt;/code&gt; event. This event is &lt;a href="https://discord.js.org/#/docs/main/master/class/Client?scrollTo=e-ready"&gt;'Emitted when the client becomes ready to start working.'&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ready&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Logged in as &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We just do a simple console.log to let us know. Nothing special really. How do we make commands, or interact with other users through messages? For this we have to know when a new message is created. If we take a look at the docs we see there are 2 ways to do this. With the &lt;code&gt;messageCreate&lt;/code&gt; event and the &lt;code&gt;message&lt;/code&gt; event. Since the latter is deprecated we will be using &lt;code&gt;messageCreate&lt;/code&gt;. This event is &lt;a href="https://discord.js.org/#/docs/main/master/class/Client?scrollTo=e-messageCreate"&gt;'Emitted whenever a message is created'&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;messageCreate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whenever a message is sent in a guild your bot is in, this event will be fired. When this happens we receive a message object, containing a lot of information about said message. You guessed it, this information can be found &lt;a href="https://discord.js.org/#/docs/main/master/class/Message"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;messageCreate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ping&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pong&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One of the properties &lt;code&gt;Message&lt;/code&gt; has is &lt;code&gt;content&lt;/code&gt;. Which, unbelievably, contains the content of the message! &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---l0znhA3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/W58YCxn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---l0znhA3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/W58YCxn.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
If someone says "Hello World" in a channel your bot has read access to. &lt;code&gt;message.content&lt;/code&gt; will also be "Hello World". In the above code, IF the content of the message is (strictly) equal to 'ping', THEN do whatever you want it do to. &lt;/p&gt;

&lt;p&gt;That whatever we want it to do now is send a message back. We want to send a message in the same channel the sender (or author, as it is named in the docs) sent his message.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pong&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Luckily for us, the &lt;code&gt;Message&lt;/code&gt; object has a property called &lt;code&gt;channel&lt;/code&gt;. This gives us information about exactly that. Assuming you are still at the page about the &lt;code&gt;Message&lt;/code&gt; object (&lt;a href="https://discord.js.org/#/docs/main/master/class/Message"&gt;here&lt;/a&gt;), scroll down until you find the &lt;code&gt;channel&lt;/code&gt; property. As you can see it can have several types: &lt;a href="https://discord.js.org/#/docs/main/master/class/TextChannel"&gt;TextChannel&lt;/a&gt;, &lt;a href="https://discord.js.org/#/docs/main/master/class/DMChannel"&gt;DMChannel&lt;/a&gt;, &lt;a href="https://discord.js.org/#/docs/main/master/class/NewsChannel"&gt;NewsChannel&lt;/a&gt;, &lt;a href="https://discord.js.org/#/docs/main/master/class/ThreadChannel"&gt;ThreadChannel&lt;/a&gt;. We only have to focus on the TextChannel. When you click &lt;a href="https://discord.js.org/#/docs/main/master/class/TextChannel"&gt;TextChannel&lt;/a&gt; you will, again, see all its properties and methods. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2bUK60eN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ohtZgGO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2bUK60eN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ohtZgGO.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
One of the methods is &lt;code&gt;send&lt;/code&gt;. Send takes as arguments &lt;code&gt;options&lt;/code&gt;. To keep it simple we only give the content of the message we want to send back.&lt;/p&gt;

&lt;p&gt;Lastly we want to let discord.js know our access code or token.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;place token here&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go to your application in the Developer Portal and to the Bot section. There, under the username of your bot, you should see 'TOKEN'. Click Copy and paste it in stead of &lt;code&gt;&amp;lt;place token here&amp;gt;&lt;/code&gt;. &lt;strong&gt;DO NEVER SHARE THIS TOKEN WITH ANYONE ELSE&lt;/strong&gt; Anybody with that token can access your bot. With that done, we can finally move to:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-your-discord-bot"&gt;
  &lt;/a&gt;
  Running your Discord bot
&lt;/h2&gt;

&lt;p&gt;Open the console or terminal of your choosing. Make sure you are in your project folder using &lt;code&gt;cd &amp;lt;path to project folder&amp;gt;&lt;/code&gt;. You can now start your bot with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; node .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;The syntax of above command can be found &lt;a href="https://nodejs.org/docs/latest-v15.x/api/synopsis.html"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If everything went right. You should see the message specified in your ready event. Before you can test your bot you'll want to invite it to your server...&lt;/p&gt;

&lt;p&gt;Go back to your application in the Developer Portal and instead of Bot, click &lt;code&gt;OAuth2&lt;/code&gt;. Scroll down to &lt;code&gt;OAuth2 URL Generator&lt;/code&gt;. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ybPJckBo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/IYb3RGd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ybPJckBo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/IYb3RGd.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
Check the &lt;code&gt;bot&lt;/code&gt; option in the middle. Scroll further down and select permissions you want your bot to have. For now I recommend to just give it Administrator permissions. Copy the URL, paste it in a new browser tab. Accept all, and the bot should now be in the selected server.&lt;/p&gt;

&lt;p&gt;Go to any channel your bot has access to in Discord. Send &lt;code&gt;ping&lt;/code&gt; in that channel and you should see your bot replying with &lt;code&gt;pong!&lt;/code&gt;. Well done, you coded your first Discord bot!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MN-dVxtm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/3dJ0pFS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MN-dVxtm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/3dJ0pFS.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;You have just made your first ever discord(.js) bot. But more importantly, you've learned how to properly use the documentation. This concludes my first ever article released to the public. I know I am severely lacking, and therefore would like to ask everyone reading to give their honest feedback. Please be as harsh as you feel is needed.&lt;/p&gt;

</description>
      <category>discord</category>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>HTML Standards for Better SEO: The HEAD element</title>
      <author>Danilo C√©sar</author>
      <pubDate>Tue, 06 Jul 2021 19:52:07 +0000</pubDate>
      <link>https://dev.to/danilo/html-standards-for-better-seo-the-head-element-1cck</link>
      <guid>https://dev.to/danilo/html-standards-for-better-seo-the-head-element-1cck</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This article is also available in the following languages: &lt;a href="https://danilocsar.medium.com/padr%C3%B5es-html-para-melhor-seo-o-elemento-head-9cf787bcad00"&gt;Portuguese&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;In this article, we will understand the basics of Search Engine Optimization (SEO), and of the HTML's format and syntax. We will also learn how to implement better tags on our websites, that can help us to reach better results on search engines, by investigating how they do work, and what are the meta tags that they understand.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üí° &lt;em&gt;If you are not familiar with the HTML syntax, you should check my article ‚Äú&lt;a href="https://dev.to/danilo/css-and-html-explained-for-absolute-beginners-part-1-2hjd"&gt;CSS and HTML Explained for Absolute Beginners: Part 1&lt;/a&gt;‚Äù before continue on this current one, as some markup language knowledge may be necessary.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Suppose you are getting into a new author, and walk to the next bookstore, on your neighborhood, hoping that you will find this person's new book there. How do you start searching for it?&lt;/p&gt;

&lt;p&gt;There are many options that may help you on this job: (a) you ask the salesperson, by giving some information about the book; (b) you walk through the aisles, looking for the specific category where the book belongs; or, (c) you look at every single book in this bookstore, one by one, looking for the specific cover that contains the information you're looking for.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5fmIB0eb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/03fstwvbifwwgxzpkqyj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5fmIB0eb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/03fstwvbifwwgxzpkqyj.jpg" alt="Shelf Bookcase Library"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúShelf Bookcase Library‚Äù, by &lt;a href="https://pixabay.com/users/deedee86-4642964/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=3195135"&gt;Deedee86&lt;/a&gt; from &lt;a href="https://pixabay.com/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=3195135"&gt;Pixabay&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you can see, some of these choices may take a while, but they all have one thing in common: the document's metadata. It means there are some information on these objects that can be used for catalog, and also for better searching purposes.&lt;/p&gt;

&lt;p&gt;This is the basic of &lt;strong&gt;Search Engine Optimization&lt;/strong&gt;, or &lt;strong&gt;SEO techniques&lt;/strong&gt;, a process meant to optimize the way we search for specific things on the internet. Let's investigate how this works, and how we can develop better implementations on our websites or applications, in order to reach better positions when users search for specific keywords on their favorite search engines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-seo"&gt;
  &lt;/a&gt;
  What is SEO?
&lt;/h2&gt;

&lt;p&gt;Search Engine Optimization (SEO) is a set of techniques in order to make the web content search-friendly, by making the search engines ‚Äúunderstand‚Äù our website, and lead users to find us. The small improvements that we make, result in more relevant users viewing our content, and also help us to promote and monetize web content.&lt;/p&gt;

&lt;p&gt;There are many experts on the internet that can help us to improve our visibility on those page's results, and also to provide useful services. Let's understand how we can apply some of these techniques by following the HTML standards.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WlEzBy_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7mqwj0kho7wvzp23k4gn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WlEzBy_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7mqwj0kho7wvzp23k4gn.jpg" alt="Search Engine Optimization"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúSearch Engine Optimization‚Äù, by &lt;a href="https://pixabay.com/pt/users/geralt-9301/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=1359429"&gt;Gerd Altmann&lt;/a&gt; from &lt;a href="https://pixabay.com/pt/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=1359429"&gt;Pixabay&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#how-to-insert-meta-tags-in-html"&gt;
  &lt;/a&gt;
  How to insert meta tags in HTML
&lt;/h2&gt;

&lt;p&gt;Before we get started, take a minute to check the metadata information used on this current webpage.&lt;/p&gt;

&lt;p&gt;Above the web browser's address bar, the title, and the icon ‚Äî a.k.a. &lt;em&gt;favicon&lt;/em&gt;, the ‚Äúfavorite icon‚Äù ‚Äî are presented even before the page is fully rendered. See how our web browser already collect some of this data? Under the hood, when a request is made to a web server, our web browser is looking for information like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt; &lt;span class="na"&gt;dir=&lt;/span&gt;&lt;span class="s"&gt;"ltr"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width,initial-scale=1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/favicon.png"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
[...]
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;My simple web page&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"In order to fully understand SEO, we have to start by the basics, learning its fundamentals."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
[...]
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;üí° Some browsers provide better information about the metadata gathered from the current webpage. If you're using Mozilla Firefox, you can open the Site Information panel by pressing &lt;code&gt;Ctrl + I&lt;/code&gt; on your PC, or by following &lt;a href="https://support.mozilla.org/en-US/kb/site-information-panel"&gt;this guide&lt;/a&gt;. The opened window should look like this:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mLFnjfiI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rombfoxm253qi48zaeo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mLFnjfiI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rombfoxm253qi48zaeo.png" alt="Firefox's Site Information panel"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://stackoverflow.com/"&gt;StackOverflow&lt;/a&gt;'s homepage ‚Äî &lt;a href="https://stackoverflow.blog/2017/03/09/anyone-actually-visit-stack-overflows-home-page/"&gt;yes, they do have a homepage!&lt;/a&gt; ‚Äî seen in Firefox's Site Information panel.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Even if you don't fully understand HTML yet, notice these pieces of information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The source-code tells the web browser that this is an HTML-type document;&lt;/li&gt;
&lt;li&gt;The second line specifies that the following HTML elements are displayed in the English language, and the ‚Äúleft-to-right‚Äù (&lt;code&gt;LTR&lt;/code&gt;) direction;&lt;/li&gt;
&lt;li&gt;There are some &lt;code&gt;viewport&lt;/code&gt; definitions for rendering the current webpage;&lt;/li&gt;
&lt;li&gt;There are, also, some values provided for the &lt;code&gt;icon&lt;/code&gt;, the &lt;code&gt;title&lt;/code&gt;, and a &lt;code&gt;description&lt;/code&gt; about this page.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HTML is not rocket science, so we can easily insert meta tags in our HTML file by adding it to the top of our content, inside the HTML's &lt;code&gt;head&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;head&lt;/code&gt; element is meant to provide some information about the page, such as rendering definitions, links, style-sheets, and scripts. Most of this metadata are not human-readable, and will not be displayed on the page, but will be only interpreted by the web server, and by the client's web browser.&lt;/p&gt;

&lt;p&gt;The search engines usually collect data from the &lt;code&gt;head&lt;/code&gt; element to provide better results, which means that we can insert meta tags to improve the visibility of our webpages and applications, like by following the HTML's formatting syntax.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#htmls-formatting-syntax"&gt;
  &lt;/a&gt;
  HTML's formatting syntax
&lt;/h2&gt;

&lt;p&gt;The HTML's formatting syntax is the set of rules that structure an HTML file, so its content can be recognized by the web browser and correctly rendered for the users' navigation.&lt;/p&gt;

&lt;p&gt;There are many elements defined on the HTML Standards, and developers had also implemented non-standard elements and global attributes on their applications.&lt;/p&gt;

&lt;p&gt;For the purposes of this article, we will cover only some of those that can be understood by SEO techniques, so you can implement it on your own website or application to achieve better results.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-document-element"&gt;
  &lt;/a&gt;
  The document element üìÉ
&lt;/h3&gt;

&lt;p&gt;The first step on creating an HTML file is actually informing that it &lt;em&gt;is&lt;/em&gt; an HTML file.&lt;/p&gt;

&lt;p&gt;According to the HTML Standard, by the &lt;a href="https://whatwg.org/"&gt;Web Hypertext Application Technology Working Group&lt;/a&gt; (WHATWG), a community founded by the leading web browser vendors in 2004:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;html&lt;/code&gt; element represents the root of an HTML document.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, it refers to the single element from where all the HTML's elements belong to. You can think it as &lt;em&gt;node tree&lt;/em&gt;: the whole document is a document node; so other HTML elements are hierarchical nodes, like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w9Z-P9d0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ip6jlnm5zxm23xbn628.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w9Z-P9d0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ip6jlnm5zxm23xbn628.gif" alt="The HTML DOM nodes structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The HTML DOM nodes structure. Image from &lt;a href="https://www.w3schools.com/js/js_htmldom_navigation.asp"&gt;W3Schools&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#the-document-tree"&gt;
  &lt;/a&gt;
  The document tree üå≥
&lt;/h3&gt;

&lt;p&gt;The way most search engines work is by traveling relevant parts of the entire document, and then gathering information from its nodes, and creating relationships between the element and its content, such as texts, by looking for HTML's &lt;code&gt;p&lt;/code&gt; elements (for the paragraphs), or images and its caption ‚Äî like &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption"&gt;this one&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;figure&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/media/cc0-images/elephant-660-480.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Elephant at sunset"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;figcaption&amp;gt;&lt;/span&gt;An elephant at sunset&lt;span class="nt"&gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/figure&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the &lt;code&gt;alt&lt;/code&gt; attribute on the example above: it can be used by screen readers, for blind and visually impaired people, so they can know what this image is about; but also for SEO purposes, as we can describe for the search engine what this figure is about, and how it's related to near text.&lt;/p&gt;

&lt;p&gt;Talking about &lt;strong&gt;web accessibility&lt;/strong&gt;, we should avoid placing texts &lt;em&gt;inside&lt;/em&gt; images, as it won't be read for many users. Instead, we can use a relevant image &lt;em&gt;near&lt;/em&gt; a piece of text explaining what this is about.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üí° The best practice is to place the most important figure near the top of the webpage, like a banner image, and the other images near its context, such as the relevant text or section's heading.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#the-document-metadata"&gt;
  &lt;/a&gt;
  The document metadata üìî
&lt;/h3&gt;

&lt;p&gt;Another great way to provide information for the search engine is by using meta tags. In the HTML document, it can be provided right on the front matter, inside the &lt;code&gt;head&lt;/code&gt; element. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1, maximum-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"generator"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"WordPress 5.6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;The document metadata&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"author"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"John Doe"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"This article explains the HTML metadata"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"keywords"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"html,metadata,rfc"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"alternate"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"application/atom+xml"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"blog-posts.xml"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"canonical"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"http://www.example.com/html/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"license"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://creativecommons.org/licenses/by/4.0/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;üí° According to the HTML5 Standard, &lt;em&gt;&lt;a href="https://html.spec.whatwg.org/multipage/syntax.html#void-elements"&gt;void elements&lt;/a&gt;&lt;/em&gt;, such as &lt;code&gt;link&lt;/code&gt; and &lt;code&gt;meta&lt;/code&gt; tags are &lt;em&gt;self-closing&lt;/em&gt;, as they don't have any content. It means you can end them by just typing &lt;code&gt;&amp;gt;&lt;/code&gt;, instead of &lt;code&gt;/&amp;gt;&lt;/code&gt;. Other &lt;em&gt;void elements&lt;/em&gt; include: &lt;code&gt;area&lt;/code&gt;, &lt;code&gt;base&lt;/code&gt;, &lt;code&gt;br&lt;/code&gt;, &lt;code&gt;col&lt;/code&gt;, &lt;code&gt;embed&lt;/code&gt;, &lt;code&gt;hr&lt;/code&gt;, &lt;code&gt;img&lt;/code&gt;, &lt;code&gt;input&lt;/code&gt;, &lt;code&gt;param&lt;/code&gt;, &lt;code&gt;source&lt;/code&gt;, &lt;code&gt;track&lt;/code&gt;, and &lt;code&gt;wbr&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's understand each one of these elements used in our example code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-head-elements"&gt;
  &lt;/a&gt;
  HTML head elements
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#the-meta-tag"&gt;
  &lt;/a&gt;
  The meta tag üß¨
&lt;/h3&gt;

&lt;p&gt;First, the &lt;code&gt;meta&lt;/code&gt; tag is used for defining metadata about the HTML file, and can modify the way web browsers render the document.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta/name"&gt;MDN Web Docs&lt;/a&gt; has a great list about the values that can be assigned to the meta tag's &lt;code&gt;name&lt;/code&gt; attribute, such as &lt;code&gt;author&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, &lt;code&gt;generator&lt;/code&gt;, and &lt;code&gt;keywords&lt;/code&gt;. Most of them are self-descriptive, and automatically informed by modern frameworks already.&lt;/p&gt;

&lt;p&gt;Let's revisit our previous example. The first three meta tags can be useful: (i) to inform the characters encoding ‚Äî we're using &lt;code&gt;UTF-8&lt;/code&gt;, the default &lt;code&gt;charset&lt;/code&gt; ‚Äî; (ii) to specify the device's size (also to enable the responsive behavior); and (iii) to identify the software that generated the webpage.&lt;/p&gt;

&lt;p&gt;These three lines below can be used to describe the name of one of the page's authors, a brief summary of the document ‚Äî modern web browsers may use it as the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta/name"&gt;default description&lt;/a&gt; of bookmarked pages ‚Äî, and some keywords (separated by comma) related to the current page's content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"author"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"John Doe"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"This article explains the HTML metadata"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"keywords"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"html,metadata,rfc"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;üí° Most of the search engines use this metadata to provide a short description of the webpage on their results, so using a good mix of keyword phrases can lead us to make better results. But be careful: numerous unnecessary keywords should be avoided, as they may harm your position.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If dealing with explicit content, it is strongly recommended by most of the search engines to specify the &lt;code&gt;rating&lt;/code&gt; metadata, so it won't be included in the search results for users that are not allowed, don't want, or don't expect to find these, when using search filters, like Google's &lt;a href="https://developers.google.com/search/docs/advanced/guidelines/google-images?hl=cs#safe_search"&gt;SafeSearch&lt;/a&gt;. It can be done by including one of the following meta tags:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"rating"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"adult"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"rating"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"RTA-5042-1996-1400-1577-RTA"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another thing to notice about the meta tag is that many search engines may change the search result title if they notice an alternative text, inside the webpage's content, that better indicates their relevance to the users' query. According to &lt;a href="https://developers.google.com/search/docs/advanced/appearance/good-titles-snippets?hl=cs#why-the-search-result-title-might-differ-from-the-pages-title-tag"&gt;Google Search Central&lt;/a&gt;, it occurs when ‚Äúthe title tag as specified by a website owner is limited to being static, fixed regardless of the query‚Äù, so the search result title might differ from the &lt;code&gt;title&lt;/code&gt; tag defined in the HTML file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-link-tag"&gt;
  &lt;/a&gt;
  The link tag ‚õìÔ∏è
&lt;/h3&gt;

&lt;p&gt;Sometimes, developers need to establish connections to use external resources from a different location, for many reasons, such as to avoid repetition of code and patterns, so replacing it with another source also reduces the size of the single file. This can be done by using the &lt;code&gt;link&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;The External Resource Link element, the HTML's &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tag, tells the web browser to get this file, and use its content in the current web page. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"favicon.png"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"default-stylesheet.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://example.com/css/print.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"print"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"mobile.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;media=&lt;/span&gt;&lt;span class="s"&gt;"screen and (max-width: 576px)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, we are informing the browser to locate the default CSS file, used for most of the media types, in the &lt;code&gt;default-stylesheet.css&lt;/code&gt;. Notice that files can also be located outside the current page's directory, as we are reaching the &lt;code&gt;https://example.com/css/print.css&lt;/code&gt; file from a different web server.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;media&lt;/code&gt; attribute specifies that this resource should only be used by the web browser when the media condition is true. So, in our example, if we are trying to print this web page, our web browser will render the page according to the style-sheets located in that file.&lt;/p&gt;

&lt;p&gt;For targeting printers, we can add our code inside the &lt;em&gt;media breakpoint&lt;/em&gt; in our CSS file, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;.banner&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;üí° HTML respects the order of the information provided, so we can set a new CSS file to override the previous one: by adding an external resource link element after the &lt;code&gt;default-stylesheet.css&lt;/code&gt; line, in our example.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The same applies to the &lt;code&gt;mobile.css&lt;/code&gt; file: if we are opening this page on a device which screen is 576px or less, the browser will render the webpage according to its file.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üí° There are some common breakpoints, based on the general screen size ranges, such as: &lt;strong&gt;576px&lt;/strong&gt; (small devices), &lt;strong&gt;768px&lt;/strong&gt; (medium devices), &lt;strong&gt;992px&lt;/strong&gt; (large devices), and &lt;strong&gt;1200px&lt;/strong&gt; (extra-large devices).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Ml2mpPY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/seqofhkg19hoq3jzsdym.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Ml2mpPY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/seqofhkg19hoq3jzsdym.png" alt="Responsive Web Design"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúResponsive Web Design‚Äù, by &lt;a href="https://pixabay.com/users/clovis_cheminot-949172/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=1166833"&gt;Clovis Cheminot&lt;/a&gt; from &lt;a href="https://pixabay.com/?utm_source=link-attribution&amp;amp;utm_medium=referral&amp;amp;utm_campaign=image&amp;amp;utm_content=1166833"&gt;Pixabay&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For better SEO results, we should use the &lt;code&gt;rel&lt;/code&gt; attribute as well, that can set a relationship between some linked resources and our current webpage.&lt;/p&gt;

&lt;p&gt;According to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel"&gt;MDN Web Docs&lt;/a&gt;, the &lt;code&gt;rel&lt;/code&gt; attribute must express tokens that are semantically valid for both machines and humans. In our example, we already used three of them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"alternate"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"application/atom+xml"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"blog-posts.xml"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"canonical"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"http://www.example.com/html/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"license"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://creativecommons.org/licenses/by/4.0/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's understand what does each one of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;alternate&lt;/code&gt; value describes other representations of the current document, such as a syndication feed, or an alternative format and language, intended for other media types. In our example, we are demonstrating that there is an Atom Feed for our blog-posts as an alternate representation.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;canonical&lt;/code&gt; value should be use if there is a single page that can be accessed on multiple URLs, or different pages containing the same content. It may occur when there are duplicate versions of the same page, such as &lt;code&gt;example.com/html/&lt;/code&gt; and &lt;code&gt;example.com/?p=html&lt;/code&gt;, so all the other URLs with similar content will be considered &lt;em&gt;duplicate&lt;/em&gt; URLs and &lt;em&gt;crawled&lt;/em&gt; less often.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;üí° Many developers usually post the same content on multiple blogging platform, or information channels, to engage a larger audience. This technique is known as ‚Äúcrossposting‚Äù, and should be used along with the &lt;code&gt;canonical&lt;/code&gt; URL, so search engines can prioritize the one that is the most representative from a set of the duplicate pages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;license&lt;/code&gt; value indicates the licensing information for the current element or webpage. It can be used on the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;area&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;, or &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; HTML elements, and so provided a hyperlink with the rules and declarations, like this:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"license"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"http://creativecommons.org/licenses/by/4.0/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Creative Commons License"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"border-width:0"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://i.creativecommons.org/l/by/4.0/88x31.png"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;This work is licensed under a &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"license"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"http://creativecommons.org/licenses/by/4.0/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Creative Commons Attribution 4.0 International License&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;üí° The synonym &lt;code&gt;copyright&lt;/code&gt; is incorrect and must be avoided, although recognized by many web browsers and search engines.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;link&lt;/code&gt; tag, however, can't be used for loading scripts: instead, we can use the &lt;code&gt;script&lt;/code&gt; tag.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-script-tag"&gt;
  &lt;/a&gt;
  The script tag üïπÔ∏è
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;script&lt;/code&gt; tag is used for embed executable code, and is typically used to include JavaScript code. It can also contain data, such as JSON (JavaScript Object Notation), that can be processed in our web page or application.&lt;/p&gt;

&lt;p&gt;As well as the &lt;code&gt;link&lt;/code&gt; tags, &lt;code&gt;script&lt;/code&gt; elements can refer to JavaScript code located in another web server or directory, like this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"&lt;/span&gt; &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4="&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice we are using the &lt;code&gt;integrity&lt;/code&gt; and the &lt;code&gt;crossorigin&lt;/code&gt; attributes when adding this request to an external web server. It is a good practice, in order to create more secure applications that the web browser check the response.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;integrity&lt;/code&gt; attribute prevents web browser to load content that doesn't match with the expected response from the web server. It contains a &lt;em&gt;hash&lt;/em&gt; of a resource as its value, that ensures that the file was received unmodified and delivered without unexpected manipulation.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;crossorigin&lt;/code&gt; attribute defines how the element handles &lt;em&gt;cross-origin requests&lt;/em&gt;, by adding an &lt;code&gt;Origin&lt;/code&gt; field into the &lt;em&gt;HTTP Request&lt;/em&gt; to a server from a different origin. It provides support for &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"&gt;Cross-Origin Resource Sharing (CORS)&lt;/a&gt; mechanism, and can be set to either &lt;code&gt;anonymous&lt;/code&gt; (default), or &lt;code&gt;use-credentials&lt;/code&gt; values: the first one creates CORS requests with the credentials flag set to &lt;code&gt;same-origin&lt;/code&gt;; the second one, with the credentials flag set to &lt;code&gt;include&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our example, the web browser won't execute the code if the delivered file doesn't match with the hash that was informed, using the &lt;em&gt;SHA-256&lt;/em&gt; cryptographic hash algorithm.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üí° HTML's &lt;code&gt;link&lt;/code&gt; and &lt;code&gt;script&lt;/code&gt; tags can implement the &lt;code&gt;integrity&lt;/code&gt; and &lt;code&gt;crossorigin&lt;/code&gt; in order to provide better security, by allowing proper verification of the received data and its source.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That code can be implemented in the &lt;code&gt;head&lt;/code&gt; or in the &lt;code&gt;body&lt;/code&gt; of our HTML file, so the web browser would request for the file before or after the page's content is fully loaded. Also, it can be loaded in parallel with the rendering of the webpage's elements, asynchronously, or synchronously.&lt;/p&gt;

&lt;p&gt;Developers typically insert the &lt;code&gt;script&lt;/code&gt; element right after all the elements of the webpage are defined: in general, this way you can ensure the user will not be presented to a blank page until all the scripts are loaded, what can take some time depending on the users' network.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üí° For the purposes of this article, we won't cover the pros and cons of inserting the &lt;code&gt;script&lt;/code&gt; element on the &lt;code&gt;head&lt;/code&gt; or the &lt;code&gt;body&lt;/code&gt; element yet, nor doing it synchronously or asynchronously, as these topics require an article for themselves. In fact, you can follow this series as we will learn it in another time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In SEO terms, placing the &lt;code&gt;link&lt;/code&gt; and &lt;code&gt;script&lt;/code&gt; tags inside the &lt;code&gt;head&lt;/code&gt; or &lt;code&gt;body&lt;/code&gt; element shouldn't matter, as search engine &lt;em&gt;crawlers&lt;/em&gt; usually won't read scripts or style-sheets, rather than our HTML content. On the other hand, their placement may impact users' experience, and the order of their declarations matter to other scripts that use them as dependencies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We're done, so let's recap. We covered the basics of SEO techniques, and how to insert meta tags using HTML. Then, we learned about the document's elements and tree. Finally, we covered a few HTML head elements, such as the &lt;code&gt;meta&lt;/code&gt;, &lt;code&gt;link&lt;/code&gt;, and &lt;code&gt;script&lt;/code&gt; tags, and how to use it correctly in order to achieve better search engine results.&lt;/p&gt;

&lt;p&gt;In the next article of this series, we will cover the HTML's &lt;code&gt;body&lt;/code&gt; element, and how it can be implemented for better SEO results. Make sure to follow it. üèÜ&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps üö∂
&lt;/h3&gt;

&lt;p&gt;There are many protocols that enhances the power of SEO techniques, and we can apply them to our webpage, in order to make better results. If you'd like to know about them, make sure to follow this series, as we will continue exploring how to make use of better SEO techniques.&lt;/p&gt;

&lt;p&gt;If you have any questions or suggestions about these subjects, please make a comment below. üì£&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References üß©
&lt;/h3&gt;

&lt;p&gt;[1] The Document Metadata (Header) element - HTML: HyperText Markup Language | MDN. (2021, June 2). MDN Web Docs. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head"&gt;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[2] The External Resource Link element - HTML: HyperText Markup Language | MDN. (2021, June 9). MDN Web Docs. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link"&gt;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[3] The metadata element - HTML: HyperText Markup Language | MDN. (2021, June 2). MDN Web Docs. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta"&gt;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[4] The Script element - HTML: HyperText Markup Language | MDN. (2021, June 2). MDN Web Docs. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script"&gt;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[5] Consolidate Duplicate URLs with Canonicals | Google Search Central. (n.d.). Google Developers. Retrieved July 5, 2021, from &lt;a href="https://developers.google.com/search/docs/advanced/crawling/consolidate-duplicate-urls"&gt;https://developers.google.com/search/docs/advanced/crawling/consolidate-duplicate-urls&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[6] HTML attribute: crossorigin - HTML: HyperText Markup Language | MDN. (2021, May 26). MDN Web Docs. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin"&gt;https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[7] HTML attribute: rel - HTML: HyperText Markup Language | MDN. (2021, June 22). MDN Web Docs. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel"&gt;https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[8] HTML Standard. (2021). WHATWG. &lt;a href="https://html.spec.whatwg.org/"&gt;https://html.spec.whatwg.org/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;[9] SEO Starter Guide: The Basics | Google Search Central. (n.d.). Google Developers. Retrieved July 2, 2021, from &lt;a href="https://developers.google.com/search/docs/beginner/seo-starter-guide"&gt;https://developers.google.com/search/docs/beginner/seo-starter-guide&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>beginners</category>
      <category>seo</category>
    </item>
    <item>
      <title>CSS3 selectors Cheat Sheet</title>
      <author>Mainak Das</author>
      <pubDate>Tue, 06 Jul 2021 19:52:04 +0000</pubDate>
      <link>https://dev.to/dawnind/css3-selectors-cheat-sheet-6dk</link>
      <guid>https://dev.to/dawnind/css3-selectors-cheat-sheet-6dk</guid>
      <description>&lt;h2&gt;
  &lt;a href="#css-selectors"&gt;
  &lt;/a&gt;
  CSS Selectors
&lt;/h2&gt;

&lt;p&gt;CSS selectors are utilized to select the content you need to style. In CSS Rule Set, Selectors are the part. CSS selectors select HTML elements as per their id, class, type, attribute, etc.&lt;/p&gt;

&lt;p&gt;CSS selectors are divided into five categories:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Simple/Basic selectors&lt;/strong&gt; (select elements based on name, id, class)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Combinator selectors&lt;/strong&gt; (select elements based on a specific relationship between them)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Pseudo-classes selectors&lt;/strong&gt; (select elements based on a certain state)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Pseudo-elements selectors&lt;/strong&gt; (select and style a part of an element)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Attribute selectors&lt;/strong&gt; (select elements based on an attribute or attribute value)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#simple-selectors"&gt;
  &lt;/a&gt;
  Simple Selectors
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Selector&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;th&gt;Example description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;#id&lt;/td&gt;
&lt;td&gt;#firstname&lt;/td&gt;
&lt;td&gt;Selects the element with id="firstname"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.class&lt;/td&gt;
&lt;td&gt;.intro&lt;/td&gt;
&lt;td&gt;Selects all elements with class="intro"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element.class&lt;/td&gt;
&lt;td&gt;p.intro&lt;/td&gt;
&lt;td&gt;Selects only &lt;p&gt; elements with class="intro"&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;Selects all elements&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element&lt;/td&gt;
&lt;td&gt;p&lt;/td&gt;
&lt;td&gt;Selects all &lt;p&gt; elements&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element,element,..&lt;/td&gt;
&lt;td&gt;div, p&lt;/td&gt;
&lt;td&gt;Selects all  elements and all &lt;p&gt; elements&lt;/p&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#basic-selectors"&gt;
  &lt;/a&gt;
  Basic Selectors
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Selector&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;element&lt;/td&gt;
&lt;td&gt;Type¬†selector. Matches an element.&lt;/td&gt;
&lt;td&gt;p { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches paragraphs */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;.class&lt;/td&gt;
&lt;td&gt;Class selector. Matches the value of anclassattribute.&lt;/td&gt;
&lt;td&gt;.warning { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches elements containing class="warning" */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#id&lt;/td&gt;
&lt;td&gt;ID¬†selector. Matches the value of an¬†id¬†attribute.&lt;/td&gt;
&lt;td&gt;#warning { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches elements containing id="warning" */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;Universal¬†selector. Matches everything.&lt;/td&gt;
&lt;td&gt;* { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches everything */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#attribute-selectors"&gt;
  &lt;/a&gt;
  Attribute selectors
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Selector&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[attribute]&lt;/td&gt;
&lt;td&gt;Matches elements containing a given attribute.&lt;/td&gt;
&lt;td&gt;a[href] { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches a elements with an href attribute */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[attribute="x"]&lt;/td&gt;
&lt;td&gt;Matches elements containing a given attribute with a given value.&lt;/td&gt;
&lt;td&gt;a[href="/sitemap/"] { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches a elements with the attribute and value href="/sitemap/" */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[attribute~="x"]&lt;/td&gt;
&lt;td&gt;Matches elements containing a given attribute with a value that contains a sub-value within a space-separated list.&lt;/td&gt;
&lt;td&gt;abbr[title~="Style"] { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches abbr elements with a title that contains 'Style' (such as in title="Cascading Style Sheets") */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[attribute&lt;/td&gt;
&lt;td&gt;="x"]&lt;/td&gt;
&lt;td&gt;Matches elements containing a given attribute with a value that contains a sub-value within a hyphen-separated list.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches html elements with a lang attribute that contains 'en' (such as in lang="en-gb") */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[attribute^="x"]&lt;/td&gt;
&lt;td&gt;Matches elements containing a given attribute with a value that starts with something.&lt;/td&gt;
&lt;td&gt;a[href^="http://"] { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches a elements with an href attribute, the value of which begins with 'http://' */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[attribute$="x"]&lt;/td&gt;
&lt;td&gt;Matches elements containing a given attribute with a value that ends with something.&lt;/td&gt;
&lt;td&gt;a[href$=".com"] { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches a elements with an href attribute, the value of which ends with '.com' */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[attribute*="x"]&lt;/td&gt;
&lt;td&gt;Matches elements containing a given attribute with a value that contains something.&lt;/td&gt;
&lt;td&gt;a[href*="htmldog"] { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches a elements with an href attribute, the value of which contains 'htmldog' */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#pseudoclasses-selectors"&gt;
  &lt;/a&gt;
  Pseudo-classes Selectors
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Selector&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;:link&lt;/td&gt;
&lt;td&gt;Matches a¬†link that has not been visited.&lt;/td&gt;
&lt;td&gt;a:link { color: blue }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:visited&lt;/td&gt;
&lt;td&gt;Matches a¬†link that has been visited.&lt;/td&gt;
&lt;td&gt;a:visited { color: purple }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:active&lt;/td&gt;
&lt;td&gt;Matches an element that is being¬†activated, such as a link being clicked on.&lt;/td&gt;
&lt;td&gt;a:active { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:hover&lt;/td&gt;
&lt;td&gt;Matches an element whose box is being¬†hovered over¬†by a cursor.&lt;/td&gt;
&lt;td&gt;a:hover { text-decoration: none }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:focus&lt;/td&gt;
&lt;td&gt;Matches an element that has¬†focus, such as one that has been tabbed to.&lt;/td&gt;
&lt;td&gt;a:focus { border: 1px solid yellow }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:target&lt;/td&gt;
&lt;td&gt;Matches an element that has been¬†linked to (via&amp;lt;a href="#x"‚Ä¶,for example).&lt;/td&gt;
&lt;td&gt;h2:target { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches a second-level heading that has been linked to */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:lang()&lt;/td&gt;
&lt;td&gt;Matches an element of a given¬†language.&lt;/td&gt;
&lt;td&gt;p:lang(fr) { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches paragraphs that are declared, or otherwise considered, as French */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:first-child&lt;/td&gt;
&lt;td&gt;Matches the¬†first child¬†of an element.&lt;/td&gt;
&lt;td&gt;p:first-child { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches the first child, if it is a paragraph, of an element */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:last-child&lt;/td&gt;
&lt;td&gt;Matches the¬†last child¬†of an element.&lt;/td&gt;
&lt;td&gt;div p:last-child { color: blue }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches the last child, if it is a paragraph, of an element */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:first-of-type&lt;/td&gt;
&lt;td&gt;Matches the¬†first sibling of its type¬†in an element.&lt;/td&gt;
&lt;td&gt;li:first-of-type { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches the first instance of a list item inside an element */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:last-of-type&lt;/td&gt;
&lt;td&gt;Matches the¬†last sibling of its type¬†in an element.&lt;/td&gt;
&lt;td&gt;li:last-of-type { color: blue }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches the last instance of a list item inside an element */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:nth-child()&lt;/td&gt;
&lt;td&gt;Matches an element that is the¬†ordinal number child¬†of its parent.&lt;/td&gt;
&lt;td&gt;p:nth-child(3) { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches the third child, if it is a paragrpah, of an element */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:nth-last-child()&lt;/td&gt;
&lt;td&gt;Matches an element that is the¬†ordinal number child, in reverse order, of its parent.&lt;/td&gt;
&lt;td&gt;p:nth-last-child(2) { color: blue }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches the next-to-last child, if it is a paragraph, of an element */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:nth-of-type()&lt;/td&gt;
&lt;td&gt;Matches an element that is the¬†ordinal number sibling of its type.&lt;/td&gt;
&lt;td&gt;li:nth-of-type(5) { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches the fifth instance of a list item inside an element */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:nth-last-of-type()&lt;/td&gt;
&lt;td&gt;Matches an element that is the ordinal number sibling, in reverse order, of its type.&lt;/td&gt;
&lt;td&gt;li:nth-of-type(5) { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches the next-to-last instance of a list item inside an element */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:only-child&lt;/td&gt;
&lt;td&gt;Matches an element if it is the¬†only child¬†of its parent.&lt;/td&gt;
&lt;td&gt;article p:only-child { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches a paragraph if it is the only child of an article element */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:only-of-type&lt;/td&gt;
&lt;td&gt;Matches an element if it is the¬†only sibling of its type.&lt;/td&gt;
&lt;td&gt;article aside:only-of-type { color: blue }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches an aside element if it is the only aside element in an article element */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:empty&lt;/td&gt;
&lt;td&gt;Matches an element with¬†no children, or content.&lt;/td&gt;
&lt;td&gt;td:empty { border-color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches table data cells with nothing in 'em */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:root&lt;/td&gt;
&lt;td&gt;Matches the¬†root element¬†of a document. This will be the¬†html¬†element in HTML.&lt;/td&gt;
&lt;td&gt;:root { background: yellow }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:enabled&lt;/td&gt;
&lt;td&gt;Matches¬†form control elements that are not disabled.&lt;/td&gt;
&lt;td&gt;input:enabled { border-color: lime }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches input elements that are not disabled */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:disabled&lt;/td&gt;
&lt;td&gt;Matches¬†form control elements that are disabled.&lt;/td&gt;
&lt;td&gt;input:enabled { border-color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches input elements that are disabled */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:checked&lt;/td&gt;
&lt;td&gt;Matches a radio or checkbox type¬†input element that is checked.&lt;/td&gt;
&lt;td&gt;input:checked { outline: 3px solid yellow }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches checked input elements */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:not()&lt;/td&gt;
&lt;td&gt;Negotiation¬†pseudo-class. Matches an element that does not match a selector.&lt;/td&gt;
&lt;td&gt;p:not(:first-child) { color: orange }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches paragraphs that are not first children */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#pseudoelements-selectors"&gt;
  &lt;/a&gt;
  Pseudo-elements Selectors
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Selector&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;::first-line&lt;/td&gt;
&lt;td&gt;Matches the¬†first textual line¬†in an element.&lt;/td&gt;
&lt;td&gt;p::first-line { font-weight: bold }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches the first line in a paragraph */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;::first-letter&lt;/td&gt;
&lt;td&gt;Matches the¬†first letter¬†in an element.&lt;/td&gt;
&lt;td&gt;p::first-letter { font-size: 2em }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches the first letter in a paragraph */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;::before&lt;/td&gt;
&lt;td&gt;Used with the¬†content¬†property to generate content¬†before¬†the initial content of an element.&lt;/td&gt;
&lt;td&gt;h1::before { content: "*" }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* places an asterisk at the start of a top-level heading */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;::after&lt;/td&gt;
&lt;td&gt;Used with the¬†content¬†property to generate content¬†after¬†the initial content of an element.&lt;/td&gt;
&lt;td&gt;h1::after { content: "+" }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* places a plus-sign at the end of a top-level heading */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Selector&lt;/td&gt;
&lt;td&gt;Description&lt;/td&gt;
&lt;td&gt;Example&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;selector selector&lt;/td&gt;
&lt;td&gt;Descendant¬†combinator. Matches elements that are descendants of another element.&lt;/td&gt;
&lt;td&gt;aside p { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches paragraphs inside elements containing class="warning" */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;selector &amp;gt; selector&lt;/td&gt;
&lt;td&gt;Child¬†combinator. Matches elements that are children of another element.&lt;/td&gt;
&lt;td&gt;.warning &amp;gt; p { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches paragraphs that are children of elements containing class="warning" */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;selector + selector&lt;/td&gt;
&lt;td&gt;Adjacent sibling¬†combinator. Matches elements that immediately follow another element.&lt;/td&gt;
&lt;td&gt;h1 + * { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches the first element to follow a top-level heading */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;selector ~ selector&lt;/td&gt;
&lt;td&gt;General sibling¬†combinator. Matches elements that follow another element.&lt;/td&gt;
&lt;td&gt;h2 ~ p { color: red }&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/* matches every paragraph that follows a second-level heading */&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#css-group-selector"&gt;
  &lt;/a&gt;
  CSS Group Selector
&lt;/h2&gt;

&lt;p&gt;The grouping selector in CSS picks all the HTML elements with the same style definitions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To minimize the code, just apply the CSS grouping selectors. Simply group the selectors by separating each selector with a comma. Let's see the following code after CSS Grouping Selectors:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>Building a collapsible sidebar with Stimulus and Tailwind CSS</title>
      <author>David Colby</author>
      <pubDate>Tue, 06 Jul 2021 19:46:22 +0000</pubDate>
      <link>https://dev.to/davidcolbyatx/building-a-collapsible-sidebar-with-stimulus-and-tailwind-css-aj4</link>
      <guid>https://dev.to/davidcolbyatx/building-a-collapsible-sidebar-with-stimulus-and-tailwind-css-aj4</guid>
      <description>&lt;p&gt;Today we're building one of the most common elements in web design - a lefthand sidebar for navigation - using Tailwind CSS and Stimulus.js.&lt;/p&gt;

&lt;p&gt;Our sidebar will always take up 100% of the height of the page and we'll be able to expand and collapse the sidebar by clicking a button. The whole thing will be accomplished with just a bit of Stimulus for the expand/collapse action and a small amount of Tailwind in our markup.&lt;/p&gt;

&lt;p&gt;Here's what it will look like when we're finished.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BWwOXPLt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8eckmj63giha9oboxqb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BWwOXPLt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8eckmj63giha9oboxqb.png" alt="A screen shot of a web page with a blue sidebar displaying links and main content discussing global warming"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To accomplish this, we'll start with a plain HTML file, pull in Tailwind CSS to make things look nice, and use Stimulus for interactivity.&lt;/p&gt;

&lt;p&gt;I'm writing this assuming a solid understanding of HTML and CSS, and some level of comfort with JavaScript. &lt;/p&gt;

&lt;p&gt;If you've never seen Tailwind before, some of the classes we add for styling might feel a little odd. You don't need any knowledge of how Stimulus works, but if you're brand new you might want to read the &lt;a href="https://stimulus.hotwired.dev/handbook/introduction"&gt;Stimulus Handbook&lt;/a&gt; to help solidify some concepts as we go.&lt;/p&gt;

&lt;p&gt;You can find the complete code for this project on &lt;a href="https://gist.github.com/DavidColby/46b0684c7c166995830098596a3a192a"&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's dive in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  Project setup
&lt;/h2&gt;

&lt;p&gt;For simplicity, we're just going to use a plain old HTML file and pull in Tailwind and Stimulus from a CDN. In a real project, you should use a build system but we don't need all that to demonstrate the concept!&lt;/p&gt;

&lt;p&gt;Let's start with our plain HTML. Go ahead and copy and paste the below into a file called &lt;code&gt;sidebar.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Collapsible sidebar with Stimulus and Tailwind&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;aside&amp;gt;&lt;/span&gt;
      Here's our sidebar, eventually
    &lt;span class="nt"&gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
      Here's where our main content lives
    &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we'll add in Stimulus and make Stimulus available through &lt;code&gt;Stimulus&lt;/code&gt;. Add these script tags to the head tag, copied right from the &lt;a href="https://stimulus.hotwired.dev/handbook/installing#using-without-a-build-system"&gt;Stimulus docs&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/stimulus/dist/stimulus.umd.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Stimulus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sidebar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Stimulus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;targets&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;})()&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then pull in Tailwind CSS from CDN, which is &lt;strong&gt;not recommended&lt;/strong&gt; for uses outside of demos like this. Tailwind has &lt;a href="https://tailwindcss.com/docs/installation"&gt;extensive documentation&lt;/a&gt; for how to include Tailwind for just about any build system and framework you can imagine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Perfect, now when we open &lt;code&gt;sidebar.html&lt;/code&gt; in our browser we should be able to access &lt;code&gt;Stimulus&lt;/code&gt; in the JavaScript console and the defaults applied by Tailwind should be visible on our placeholder text.&lt;/p&gt;

&lt;p&gt;Let's create the sidebar layout with Tailwind now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-static-sidebar"&gt;
  &lt;/a&gt;
  Building a static sidebar
&lt;/h2&gt;

&lt;p&gt;Replace the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; of your sidebar.html file with the below to add the basic structure of the sidebar to your page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;aside&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sm:w-1/5 bg-blue-500 min-h-screen"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sticky top-0 pt-12 px-2 w-full"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute right-2 top-2 cursor-pointer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-6 w-6"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 24 24"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;stroke-linecap=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-linejoin=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M11 19l-7-7 7-7m8 14l-7-7 7-7"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex flex-col overflow-hidden space-y-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hover:text-gray-200 h-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex items-center h-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-5 w-5 mr-1 inline-block"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 24 24"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt; &lt;span class="na"&gt;aria-hidden=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;stroke-linecap=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-linejoin=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;
                    Home
                  &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hover:text-gray-200 h-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex items-center h-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-5 w-5 mr-1"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 24 24"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt; &lt;span class="na"&gt;aria-hidden=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;stroke-linecap=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-linejoin=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;
                    Learn
                  &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hover:text-gray-200 h-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex items-center h-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-5 w-5 mr-1"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 24 24"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt; &lt;span class="na"&gt;aria-hidden=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;stroke-linecap=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-linejoin=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;
                    About
                  &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex items-center hover:text-gray-200 h-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex items-center h-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-5 w-5 mr-1"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 24 24"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt; &lt;span class="na"&gt;aria-hidden=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;stroke-linecap=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-linejoin=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;
                    Contact
                  &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;main&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sm:w-4/5 p-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        Main content goes here.
      &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method of adding a static sidebar uses flexbox to create two side-by-side containers, with the smaller content on the left and the content on the right. Using Tailwind, we don't need to touch CSS at all to create the layout, instead relying entirely on existing Tailwind utility classes.&lt;/p&gt;

&lt;p&gt;Because we want the sidebar to have a background color that stretches (at minimum) the full height of the page, we add the &lt;code&gt;min-h-screen&lt;/code&gt; class to the sidebar's container. We want to keep the navigation links on the page at all times, even if the main content scrolls, so add the &lt;code&gt;sticky&lt;/code&gt; class to the element that wraps the navigation menu.&lt;/p&gt;

&lt;p&gt;Our navigation links each have an icon. When we have our collapse/expand functionality in place, the collapsed sidebar will display the link icons without any text.&lt;/p&gt;

&lt;p&gt;With the body updated, refresh the page and see the basic layout in place. Clicking on the collapse/expand icon won't do anything just yet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BWwOXPLt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8eckmj63giha9oboxqb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BWwOXPLt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8eckmj63giha9oboxqb.png" alt="A screen shot of a web page with a blue sidebar displaying links and main content discussing global warming"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-sidebar-stimulus-controller"&gt;
  &lt;/a&gt;
  Creating the sidebar Stimulus controller
&lt;/h2&gt;

&lt;p&gt;The Stimulus controller will handle collapsing and expanding the sidebar content when the user clicks the collapse/expand icon.&lt;/p&gt;

&lt;p&gt;First, we'll add a function that toggles the sidebar from expanded to collapsed and back again. This function will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sidebarContainerTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expanded&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collapse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;toggle()&lt;/code&gt; function uses a simple if statement that checks a data attribute in the DOM to determine if the sidebar is currently expanded or collapsed and then call the collapse or expand function as appropriate. We'll create this data attribute in the next section.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;collapse()&lt;/code&gt; function is responsible for collapsing the expanded sidebar, and it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;collapse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sidebarContainerTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sm:w-1/5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;iconTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
  &amp;lt;svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"&amp;gt;
    &amp;lt;path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 5l7 7-7 7M5 5l7 7-7 7" /&amp;gt;
  &amp;lt;/svg&amp;gt;
  `&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;linkTargets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sr-only&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sidebarContainerTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expanded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we find the sidebar container, remove the width Tailwind class, swap out the icon for the expand icon, apply the Tailwind &lt;code&gt;sr-only&lt;/code&gt; utility class to hide navigation link text from the page unless the user is accessing the site with a screenreader. Last, we update the sidebar's expanded data attribute to 0, so that the next time the collapse/expand link is clicked the &lt;code&gt;toggle&lt;/code&gt; function calls the &lt;code&gt;expand&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;One of the wonderful things about Stimulus is that it provides a simple way to select elements from the DOM using &lt;a href="https://stimulus.hotwired.dev/reference/targets"&gt;targets&lt;/a&gt;. These targets take the place of selecting elements by class or id, instead relying on data attributes. &lt;/p&gt;

&lt;p&gt;Using targets, we can keep our JavaScript and our HTML clear and readable, so that future developers don't accidentally break our JavaScript by removing a class or changing an id.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;expand()&lt;/code&gt; function comes next, and it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sidebarContainerTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sm:w-1/5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;iconTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"&amp;gt;
      &amp;lt;path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 19l-7-7 7-7m8 14l-7-7 7-7" /&amp;gt;
    &amp;lt;/svg&amp;gt;
  `&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;linkTargets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sr-only&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sidebarContainerTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expanded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we simply reverse the changes our collapse function makes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Setting the sidebar width&lt;/li&gt;
&lt;li&gt;Swapping the icon&lt;/li&gt;
&lt;li&gt;Display link text to all users&lt;/li&gt;
&lt;li&gt;Set the expanded data attribute to 1 so the next click on the icon routes to collapse&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Finally, we need to tell our Stimulus controller about the targets we're using by updating the &lt;code&gt;targets&lt;/code&gt; definition at the top of the Stimulus controller:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;targets&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sidebarContainer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;icon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;link&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With these changes in place, the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag that adds Stimulus to our page looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;application&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Stimulus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nx"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sidebar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Stimulus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;targets&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sidebarContainer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;icon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;link&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sidebarContainerTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expanded&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;collapse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nx"&gt;collapse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sidebarContainerTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sm:w-1/5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sidebarContainerTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expanded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;iconTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
        &amp;lt;svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"&amp;gt;
          &amp;lt;path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 5l7 7-7 7M5 5l7 7-7 7" /&amp;gt;
        &amp;lt;/svg&amp;gt;
        `&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;linkTargets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sr-only&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="nx"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sidebarContainerTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sm:w-1/5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sidebarContainerTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expanded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;iconTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
          &amp;lt;svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"&amp;gt;
            &amp;lt;path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 19l-7-7 7-7m8 14l-7-7 7-7" /&amp;gt;
          &amp;lt;/svg&amp;gt;
        `&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;linkTargets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sr-only&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;           
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;})()&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you make these updates, refresh the page and click on the collapse icon you'll notice that absolutely nothing happens. That's because our Stimulus controller isn't connected to the DOM yet. We'll finish up this guide by updating our HTML to make everything work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connecting-to-the-dom"&gt;
  &lt;/a&gt;
  Connecting to the DOM
&lt;/h2&gt;

&lt;p&gt;For our Stimulus controller to work, we first need to add a &lt;code&gt;controller&lt;/code&gt; data attribute somewhere in the HTML. In general, you want to attach the controller to the parent element for the part of the DOM you plan to change within the controller. Since the Sidebar controller makes changes to the sidebar and the elements inside of the sidebar, it makes sense to attach the controller to the top-level sidebar element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;aside&lt;/span&gt; &lt;span class="na"&gt;data-controller=&lt;/span&gt;&lt;span class="s"&gt;"sidebar"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sm:w-1/5 bg-blue-500 min-h-screen"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- Sidebar content --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next up, we need a data attribute to track the current state of the sidebar (expanded or collapsed):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;aside&lt;/span&gt; &lt;span class="na"&gt;data-sidebar-target=&lt;/span&gt;&lt;span class="s"&gt;"sidebarContainer"&lt;/span&gt; &lt;span class="na"&gt;data-expanded=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sm:w-1/5 bg-blue-500 min-h-screen"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- Sidebar content --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last update to the &lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt; element is to tell our Stimulus controller that it is the &lt;code&gt;sidebarContainer&lt;/code&gt; target:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;aside&lt;/span&gt; &lt;span class="na"&gt;data-sidebar-target=&lt;/span&gt;&lt;span class="s"&gt;"sidebarContainer"&lt;/span&gt; &lt;span class="na"&gt;data-expanded=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;data-controller=&lt;/span&gt;&lt;span class="s"&gt;"sidebar"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sm:w-1/5 bg-blue-500 min-h-screen"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- Sidebar content --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next up, our collapse icon container needs a target and an action:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-action=&lt;/span&gt;&lt;span class="s"&gt;"click-&amp;gt;sidebar#toggle"&lt;/span&gt; &lt;span class="na"&gt;data-sidebar-target=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute right-2 top-2 cursor-pointer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-6 w-6"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 24 24"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;stroke-linecap=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-linejoin=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M11 19l-7-7 7-7m8 14l-7-7 7-7"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;data-action&lt;/code&gt; attribute is structured as "UserAction -&amp;gt; ControllerName#FunctionName". For certain elements and actions, the UserAction component is optional but for a div, an action must always be provided. Read more about actions &lt;a href="https://stimulus.hotwired.dev/reference/actions"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With these attributes in place, each time the sidebar icon is clicked, the &lt;code&gt;toggle()&lt;/code&gt; function defined in our &lt;code&gt;Sidebar&lt;/code&gt; controller will be called. If you refresh the page now you'll notice an error in your JavaScript console. One last addition to the HTML and we'll be all set:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex flex-col overflow-hidden space-y-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hover:text-gray-200 h-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex items-center h-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-5 w-5 mr-1 inline-block"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 24 24"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt; &lt;span class="na"&gt;aria-hidden=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;stroke-linecap=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-linejoin=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;data-sidebar-target=&lt;/span&gt;&lt;span class="s"&gt;"link"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          Home
        &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hover:text-gray-200 h-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex items-center h-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-5 w-5 mr-1"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 24 24"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt; &lt;span class="na"&gt;aria-hidden=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;stroke-linecap=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-linejoin=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;data-sidebar-target=&lt;/span&gt;&lt;span class="s"&gt;"link"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          Learn
        &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hover:text-gray-200 h-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex items-center h-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-5 w-5 mr-1"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 24 24"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt; &lt;span class="na"&gt;aria-hidden=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;stroke-linecap=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-linejoin=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;data-sidebar-target=&lt;/span&gt;&lt;span class="s"&gt;"link"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          About
        &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex items-center hover:text-gray-200 h-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex items-center h-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-5 w-5 mr-1"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 24 24"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt; &lt;span class="na"&gt;aria-hidden=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;stroke-linecap=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-linejoin=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;data-sidebar-target=&lt;/span&gt;&lt;span class="s"&gt;"link"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          Contact
        &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we added &lt;code&gt;sidebar-target="link"&lt;/code&gt; to each of the span's that wrap the link text. &lt;/p&gt;

&lt;p&gt;Recall that in our Stimulus controller we use &lt;code&gt;linkTargets&lt;/code&gt; to toggle the &lt;code&gt;sr-only&lt;/code&gt; class as needed. This ability to easily find and modify any number of elements without relying on classes that may or may not be changed in the future is one of the things that makes Stimulus so pleasant to work with.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;linkTargets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sr-only&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that last change in place, refresh the page one last time and see that everything works as expected.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ElU3Ae_e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlmoqbiumudb3cmr7qhn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ElU3Ae_e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hlmoqbiumudb3cmr7qhn.gif" alt="A screen recording of a user clicking an icon to collapse and expand a sidebar on a web page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;Today we learned how to use Tailwind CSS and Stimulus to create a simple sidebar that users can collapse and expand on demand. &lt;/p&gt;

&lt;p&gt;While both a sidebar layout and collapsing/expanding content can be accomplished without any CSS or JavaScript frameworks, I hope this example has given you a taste for how readable, maintainable, and scalable Tailwind and Stimulus can be. A future developer revisiting code written with Stimulus and Tailwind can quickly deduce the purpose of each class and data attribute and can confidently make changes to implement new features to expand the site over time.&lt;/p&gt;

&lt;p&gt;We're just scratching the surface of what Tailwind and Stimulus can do. To dig in further, start with:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://tailwindcss.com/"&gt;Tailwind's excellent (really, excellent) documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stimulus.hotwired.dev/"&gt;The Stimulus Handbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.betterstimulus.com/"&gt;Better Stimulus&lt;/a&gt; for Stimulus patterns and best practices&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#about-the-author"&gt;
  &lt;/a&gt;
  About the author:
&lt;/h3&gt;

&lt;p&gt;I'm David - a solo founder and consultant. I write about software engineering, Ruby on Rails and the Rails-y ecosystem, product management, and the lessons I learn as I work to build sustainable SaaS businesses. &lt;/p&gt;

&lt;p&gt;My current project is &lt;a href="https://vestimonials.tv"&gt;Vestimonials&lt;/a&gt;, an async video communication tool to help companies collect and share video testimonials from their employees and customers. I'm available for Rails, product management, and strategy consulting.  Get in touch if you have questions about this article or anything else that's on your mind.&lt;/p&gt;

</description>
      <category>stimulus</category>
      <category>tailwindcss</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
