<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Learning Kubernetes - Part 1: Introduction</title>
      <author>Vasco Ramos</author>
      <pubDate>Wed, 10 Mar 2021 19:04:38 +0000</pubDate>
      <link>https://dev.to/vascoalramos/learning-kubernetes-concepts-part-1-pb0</link>
      <guid>https://dev.to/vascoalramos/learning-kubernetes-concepts-part-1-pb0</guid>
      <description>&lt;p&gt;This post is the first part of a series about Kubernetes. Rather than a series of tutorials, this is meant to be a periodic log of my journey learning the concepts and tools regarding orchestration using Kubernetes.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#installation" class="anchor"&gt;
  &lt;/a&gt;
  Installation
&lt;/h4&gt;

&lt;p&gt;As I intended to learn how to use Kubernetes (not managing it), I started a Kubernetes cluster in Google Cloud Platform and worked from there. Hence, I will not address Kubernetes cluster installation and configuration in this series. For more details on how to use the GCP Kubernetes cluster, click &lt;a href="https://cloud.google.com/kubernetes-engine/docs/quickstart"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#first-the-concepts" class="anchor"&gt;
  &lt;/a&gt;
  First: the concepts
&lt;/h4&gt;

&lt;p&gt;One thing that always helps me better understand and learn a new technology or tool is to understand what is the purpose of the tool or technology, what it is used for, and &lt;strong&gt;get the concepts right&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Making sure you understand the basic concepts is a great help in the road ahead of improving your knowledge of the tool/technology you're learning. &lt;/p&gt;

&lt;p&gt;So, let's start by understanding &lt;strong&gt;what is Kubernetes&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#kubernetes" class="anchor"&gt;
  &lt;/a&gt;
  Kubernetes
&lt;/h2&gt;

&lt;p&gt;Kubernetes is an orchestration tool that allows us to manage containerized applications across a group of nodes. Not only providing mechanisms to quickly run those but also how to update, deploy and provide access to them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pod-the-atom-in-the-kubernetes-universe" class="anchor"&gt;
  &lt;/a&gt;
  Pod: the atom in the Kubernetes universe
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--86BVp3jv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i1uekt1ooync59oschot.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--86BVp3jv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i1uekt1ooync59oschot.jpg" alt="Kubernetes - Pods"&gt;&lt;/a&gt;&lt;br&gt;
A pod is the smallest unit inside the Kubernetes cluster and it represents a collection of application containers and volumes running in the same isolated execution environment. Each container in the same Pod shares the same IP address, namespace, and storage.&lt;/p&gt;

&lt;p&gt;Although I described a pod as a collection of containers, the most common pattern is to have one container per pod. If you need to think twice about group multiple containers in the same pod, ask yourself&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Will these containers work properly if they land on different machines?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the answer is "no", you should indeed group those containers in the same pod, otherwise, just don't do it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you like my explanation, you can follow me, I will publish the following parts of this series shortly.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Node.js 101 - part 2: First web server</title>
      <author>Eric Chapman</author>
      <pubDate>Wed, 10 Mar 2021 18:22:45 +0000</pubDate>
      <link>https://dev.to/ericchapman/node-js-101-part-2-first-web-server-5gl8</link>
      <guid>https://dev.to/ericchapman/node-js-101-part-2-first-web-server-5gl8</guid>
      <description>&lt;p&gt;I strongly recommend learning javascript frirst. Here a series of post I did on Dev.to: &lt;a href="https://dev.to/rickavmaniac/javascript-my-learning-journey-part-1-what-is-javascript-role-and-use-case-49a3"&gt;https://dev.to/rickavmaniac/javascript-my-learning-journey-part-1-what-is-javascript-role-and-use-case-49a3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am now ready to continue my Node.js learning journey :)&lt;/p&gt;

&lt;p&gt;Click follow if you want to miss nothing. I will publish here on Dev.to what I learn everyday. &lt;/p&gt;

&lt;p&gt;Without further ado here is a summary of my notes for my last day.&lt;/p&gt;

&lt;h2&gt;Create my first Web Server&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// the http module have method to help create the server&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Create the server instance&lt;/span&gt;
&lt;span class="c1"&gt;// req :  incoming request&lt;/span&gt;
&lt;span class="c1"&gt;// res :  outgoing response&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// send a response to client&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World from the server&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// start server listening for request&lt;/span&gt;
&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;localhost&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server is listening at localhost on port 5000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KmTcsrOJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcccyoblnk1k8x8s4avi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KmTcsrOJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcccyoblnk1k8x8s4avi.png" alt="First Server"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Basic Routing&lt;/h2&gt;

&lt;p&gt;This server is great but currently he do not react to different url we could send from the browser. If we send for example &lt;a href="http://localhost:5000/friends"&gt;http://localhost:5000/friends&lt;/a&gt; it show the exact same response as &lt;a href="http://localhost:5000"&gt;http://localhost:5000&lt;/a&gt;. Let implement that specific behaviour call routing.&lt;/p&gt;

&lt;p&gt;With the server instance we just create, the req variable contain the incoming request informations.&lt;/p&gt;

&lt;p&gt;This incoming request have a property call url that return current page path we currently visit.&lt;/p&gt;

&lt;p&gt;For example if we visit the friends page at localhost:5000/friends the req.url property will return '/friends'.&lt;/p&gt;

&lt;p&gt;If we visit the root path localhost:5000, the req.url will contain only empty '/'&lt;/p&gt;

&lt;p&gt;Here a example very basic routing&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Create the server instance&lt;/span&gt;
&lt;span class="c1"&gt;// req :  incoming request&lt;/span&gt;
&lt;span class="c1"&gt;// res :  outgoing response&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pathName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/friends&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is my friends page&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pathName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World from the server root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// start server listening for request&lt;/span&gt;
&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;localhost&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Server is listening at localhost on port 5000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Noted if you visit a page not include in the if/else routing the server will continue to loop indefinitely. So best thing to do is to add a else statement for all other non manage route.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pathName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/friends&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is my friends page&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pathName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World from the server root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Page not found&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To make that even more pro, we can add a 404 header to our response. Since we write a header we will also add a Content-type to 'text/html' that will allow us to use HTML in the response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pathName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/friends&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is my friends page&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pathName&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World from the server root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeHead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text/html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
     &lt;span class="p"&gt;})&lt;/span&gt;
     &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;h1&amp;gt;Page not found&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U2KCSnae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ze06hw3btqd3xik7pok6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U2KCSnae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ze06hw3btqd3xik7pok6.png" alt="Page 404"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That's it for today. Tomorrow will put all that learning to good use and will make our first API. Stay tune!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Setting up Rails to Send Emails with Amazon SES</title>
      <author>David Morales</author>
      <pubDate>Wed, 10 Mar 2021 16:05:56 +0000</pubDate>
      <link>https://dev.to/davidmles/setting-up-rails-to-send-emails-with-amazon-ses-ifm</link>
      <guid>https://dev.to/davidmles/setting-up-rails-to-send-emails-with-amazon-ses-ifm</guid>
      <description>&lt;p&gt;The Amazon Simple Email Service is a cloud service inside AWS (Amazon Web Services) to send and receive email. I have used it to send emails, and it worked flawlessly. It has a reasonable maximum sending quota, and it’s pretty fast for a modest web application.&lt;/p&gt;

&lt;p&gt;It has serious competitors, especially the service from MailChimp: Mandrill. But since they switched it to an add-on for MailChimp premium users, Amazon SES is, in my opinion, the first choice for small and medium web applications.&lt;/p&gt;

&lt;p&gt;Initially, all users are placed in the Amazon SES sandbox (a test environment) to ensure the quality of service and avoid fraud. This has real limiting quotas for big applications, so a request must be filled to Amazon support to move out of the sandbox and get higher limits.&lt;/p&gt;

&lt;p&gt;Before going on, you will need to sign up for an Amazon Web Services account. If you haven’t have one, go create one for yourself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#verifying-your-domain" class="anchor"&gt;
  &lt;/a&gt;
  Verifying your domain
&lt;/h2&gt;

&lt;p&gt;The first step is &lt;a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-domain-procedure.html"&gt;verifying the domain the emails will be sent from&lt;/a&gt; to prove the ownership. Don’t forget to generate DKIM settings, it is recommended to increase your domain trust.&lt;/p&gt;

&lt;p&gt;This step will require to add some DNS records, so you will need access to your DNS panel.&lt;/p&gt;

&lt;p&gt;Once all records are added, you will have to wait for them to propagate to the other internet DNS servers. This can take up to 24 hours to complete. For now you will see your domain listed in Amazon SES console as “pending verification”. Don’t worry, Amazon will check it automatically later on and verify your domain.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-smtp-credentials" class="anchor"&gt;
  &lt;/a&gt;
  Creating the SMTP credentials
&lt;/h2&gt;

&lt;p&gt;In order to use Amazon SES to send your emails you will need to authenticate using an SMTP endpoint.&lt;/p&gt;

&lt;p&gt;Please go to your “SMTP Settings” page in your SES console. Here you can see your server name, note it down somewhere.&lt;/p&gt;

&lt;p&gt;Click the “Create My SMTP Credentials” button. Amazon will ask you for a new IAS user name (IAS stands for Identity and Access Management), but they will provide you with a default one that you can safely accept. Click the “Create” button at the very bottom of the page.&lt;/p&gt;

&lt;p&gt;Your credentials are now created! You can see them by unhiding them clicking the corresponding link.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LUAn5-ck--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/euz1axmma88indlsg2qb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LUAn5-ck--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/euz1axmma88indlsg2qb.png" alt="Screen Shot 2021-03-10 at 16.44.39"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;There you will see your SMTP username and password. If you need to save a copy, click the “Download Credentials” button at the very bottom of this page, because you will not have access to these settings once this page is closed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-your-rails-application" class="anchor"&gt;
  &lt;/a&gt;
  Configuring your Rails application
&lt;/h2&gt;

&lt;p&gt;Open your &lt;code&gt;config/environments/production.rb&lt;/code&gt; file and add this code inside the configure block:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;config.x.mail_from = %(Your site name &amp;lt;no-reply@yoursite-domain.com&amp;gt;)
config.action_mailer.default_url_options = { host: 'yoursite-domain.com' }
config.action_mailer.smtp_settings = { address: 'email-smtp.eu-west-1.amazonaws.com', user_name: 'your_smtp_username', password: 'your_smtp_password' }
config.action_mailer.raise_delivery_errors = true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#sending-your-emails" class="anchor"&gt;
  &lt;/a&gt;
  Sending your emails
&lt;/h2&gt;

&lt;p&gt;Your new account is still in the Amazon SES sandbox. That means that you can only send email to addresses using your verified domain. This is intended to test the service and your application.&lt;/p&gt;

&lt;p&gt;If you want to test the service sending an email to an email address of yours, you will have to add and verify it in the “Email Addresses” in the “Identity Management” section of your SES console.&lt;/p&gt;

&lt;p&gt;So click the “Verify a New Email Address” button. Enter an email of yours and you will receive a verification email. Click on the link you will find inside that email that you have received. That’s it! You now have a verified email recipient to test the service with. Bear in mind that you should send the test email from this address too.&lt;/p&gt;

&lt;p&gt;When you are happy with it, go to “Sending Statistics” in the “Email Sending” section in your SES console. You will find a button to open a request to move out of the sandbox. When it’s accepted, your application will be able to send emails to any email address in the Internet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Alright! We have set up our Amazon SES service and our Rails application to work together. Really. You don’t have to make any other modification, just use Rails email sending methods as usual and it will work.&lt;/p&gt;

&lt;p&gt;With this article I wanted to show how easy is to configure and use a service like this. If you ever want to switch to another service, I’m sure the process will be similar. At least from Rails’ side you’ll only need to adapt your SMTP settings.&lt;/p&gt;

&lt;p&gt;Happy email sending!&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>email</category>
      <category>ses</category>
    </item>
    <item>
      <title>Adding Serverless User Authentication to Your React Projects</title>
      <author>Michael Bagley</author>
      <pubDate>Wed, 10 Mar 2021 15:10:21 +0000</pubDate>
      <link>https://dev.to/mbagley1020/adding-serverless-user-authentication-to-your-react-projects-jbe</link>
      <guid>https://dev.to/mbagley1020/adding-serverless-user-authentication-to-your-react-projects-jbe</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;React has given developers great leverage to deploy enterprise applications across many different devices. This framework has opened the door to writing stateful, beautiful UIs for many application developers.&lt;/p&gt;

&lt;p&gt;A common issue that many web-based projects will eventually have to consider is how to handle user authentication. We are all familiar with websites that hide user-related data and processes behind a sign-in page; users sign in if they have an account, if not, they can create one. Manually implementing this kind of framework for your individual project can be difficult or insecure. Today I'll demonstrate to you how easy this is with the &lt;code&gt;easybase-react&lt;/code&gt; library. The framework we will implement utilizes a &lt;a href="https://easybase.io/about/2021/01/30/What-Is-a-Serverless-Application/"&gt;&lt;strong&gt;serverless technology stack&lt;/strong&gt;&lt;/a&gt; that is ready for production.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-install-library" class="anchor"&gt;
  &lt;/a&gt;
  1. Install library
&lt;/h2&gt;

&lt;p&gt;In your project directory, type the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install easybase-react
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;More information on this package is available on &lt;a href="https://github.com/easybase/easybase-react"&gt;Github&lt;/a&gt;. If you don't know how to create a new react project and would like to learn, &lt;a href="https://github.com/facebook/create-react-app"&gt;take a look at create-react-app&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-create-easybase%C2%A0project" class="anchor"&gt;
  &lt;/a&gt;
  2. Create Easybase Project
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jAFyun4i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Afpv0kSBj1SHu4Psn6A_9yw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jAFyun4i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Afpv0kSBj1SHu4Psn6A_9yw.gif" alt="Creating Easybase Project gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you don't already have one, create an account on &lt;a href="https://easybase.io/"&gt;easybase.io&lt;/a&gt; (don't worry, it's free). Once you're logged in, navigate to 'Projects' and click the 'create project' button. Give this project an identification tag and click 'create'.&lt;/p&gt;

&lt;p&gt;Within this menu you can also specify which tables a user will have the ability to read or write from (we'll delve further into users). You can set the project's permissions to read/write all records of a table or just user associated records. User associated records are records that were created or edited by that signed-in user. You can manually associate a record to a user in the easybase row drawer by opening a table and clicking a specific row.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-put-ebconfig-in-your-project-directory" class="anchor"&gt;
  &lt;/a&gt;
  3. Put ebconfig in your project directory
&lt;/h3&gt;

&lt;p&gt;Click the 'download' button within your newly created project and place this file in the root of your react project.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── src/
│   ├── App.js
│   ├── index.js
│   └── ebconfig.js
├── assets/
├── package.json
└── ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#4-wrap-your-components-in-the-easybaseprovider" class="anchor"&gt;
  &lt;/a&gt;
  4. Wrap Your Components in the EasybaseProvider
&lt;/h3&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;Be sure to fulfill the &lt;code&gt;ebconfig&lt;/code&gt; prop with your downloaded token.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-create-a-pattern-for-users-to-sign-insign-up" class="anchor"&gt;
  &lt;/a&gt;
  5. Create a Pattern For Users to Sign In/Sign Up
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;EasebaseProvider&lt;/code&gt; component will grant all child nodes access to the &lt;code&gt;useEasybase&lt;/code&gt; hook. This provides functions such as &lt;strong&gt;signIn&lt;/strong&gt;, &lt;strong&gt;signUp&lt;/strong&gt;, &lt;strong&gt;isUserSignedIn&lt;/strong&gt;, and other user state related function. &lt;a href="https://easybase.io/docs/easybase-react"&gt;Read the documentation here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here’s a basic example granting users the ability to sign in or sign up to your React project. (Users will be automatically authenticated if they have previously signed in on that device in the past 24 hours)&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The basic idea here is that we use the &lt;strong&gt;isUserSignedIn()&lt;/strong&gt; to determine whether to show our sign-up view or sign-in view. You should use this with &lt;a href="https://reactjs.org/docs/code-splitting.html"&gt;React’s code splitting&lt;/a&gt; for even faster load times.&lt;/p&gt;

&lt;p&gt;If &lt;strong&gt;signUp()&lt;/strong&gt; runs successfully, a new users will be visible in the ‘Users’ tab on Easybase. Also, use the &lt;strong&gt;onSignIn&lt;/strong&gt; function to automatically run a function when a user is authenticated via &lt;strong&gt;signIn()&lt;/strong&gt; or automatically.&lt;/p&gt;

&lt;p&gt;Note that a user’s attributes can be edited in the ‘Users’ tab of Easybase and also get/set via the &lt;code&gt;useEasybase&lt;/code&gt; hook as well. User attributes simply correspond to an object mapping keys to a string.&lt;/p&gt;




&lt;p&gt;Authenticated users now have the ability to read/write records in your configured collections. It’s important to understand that these functions relating to your collections will only work on a signed in instance. Easybase’s React database library is powerful and easy to integrate into your projects and works extremely well with user authentication. &lt;a href="https://easybase.io/react/2020/09/20/The-Best-Way-To-Add-A-Database-To-Your-React-React-Native-Apps/"&gt;Read more here&lt;/a&gt;. Here’s a basic example of using an Easybase &lt;strong&gt;Frame()&lt;/strong&gt; on an authenticated instance:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Using the &lt;code&gt;easybase-react&lt;/code&gt; framework to handle your projects authentication and data querying makes managing your projects much easier and much more cost-effective. &lt;a href="https://easybase.io/docs/easybase-react/"&gt;Check out the docs for more information on the Easybase React authentication framework.&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;The React library for Easybase.io provides developers with the ability to streamline their project backend processes visually. The free-tier covers almost all use cases and makes serverless frameworks and scalable databases accessible for developers of all kind.&lt;/p&gt;

&lt;p&gt;Furthermore, this serverless technology works particularly well with &lt;strong&gt;cloud functions&lt;/strong&gt; (also known as Function-as-a-Service). This resource demonstrates &lt;a href="https://easybase.io/react/2021/03/09/The-Easiest-Way-To-Deploy-Cloud-Functions-for-your-React-Projects/"&gt;how to easily deploy cloud functions with Easybase + React&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, live analytics for your new project can be viewed in the ‘Usage’ tab in the Easybase web application. It is at this location that you can view project volume, data transfer, etc. in an organized manner.&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Mock a SQS queue with moto</title>
      <author>drewmullen</author>
      <pubDate>Wed, 10 Mar 2021 14:39:47 +0000</pubDate>
      <link>https://dev.to/drewmullen/mock-a-sqs-queue-with-moto-4ppd</link>
      <guid>https://dev.to/drewmullen/mock-a-sqs-queue-with-moto-4ppd</guid>
      <description>&lt;p&gt;Below is simple example code to mock the aws sqs api. This can be useful for development so you dont have to actually manage a real SQS queue / connectivity / IAM permissions until you're ready. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#apppy" class="anchor"&gt;
  &lt;/a&gt;
  app.py
&lt;/h1&gt;

&lt;p&gt;A simple function to write a message to a preexisting queue&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;QUEUE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'QUEUE_URL'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'&amp;lt;default value&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;write_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;sqs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'sqs'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;region_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'us-east-1'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;MessageBody&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;QueueUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;QUEUE_URL&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conftestpy" class="anchor"&gt;
  &lt;/a&gt;
  conftest.py
&lt;/h1&gt;

&lt;p&gt;Pytest fixtures to mock up the aws sqs API. &lt;code&gt;aws_credentials()&lt;/code&gt; also ensures that your pytest functions will not actually write to aws resources.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;REGION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'us-east-'&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'function'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;aws_credentials&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="s"&gt;"""Mocked AWS Credentials for moto."""&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'AWS_ACCESS_KEY_ID'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'testing'&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'AWS_SECRET_ACCESS_KEY'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'testing'&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'AWS_SECURITY_TOKEN'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'testing'&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'AWS_SESSION_TOKEN'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'testing'&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'function'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sqs_client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aws_credentials&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# setup
&lt;/span&gt;    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;mock_sqs&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'sqs'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;region_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;REGION&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# teardown
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#testsqspy" class="anchor"&gt;
  &lt;/a&gt;
  test_sqs.py
&lt;/h1&gt;

&lt;p&gt;An example test function. Create a queue using the mock client from conftest.py (notice &lt;code&gt;sqs_client&lt;/code&gt; parameter matches the conftest function name &lt;code&gt;sqs_client&lt;/code&gt;), invoke your python module function &lt;code&gt;app.write_message()&lt;/code&gt;. Validate the returned message matches what you sent&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_write_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sqs_client&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqs_client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_queue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QueueName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'test-msg-sender'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;queue_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'QueueUrl'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="c1"&gt;# override function global URL variable
&lt;/span&gt;    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;QUEUE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queue_url&lt;/span&gt;
    &lt;span class="n"&gt;expected_msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;'msg'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'this is a test'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expected_msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sqs_messages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqs_client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;receive_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QueueUrl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;queue_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sqs_messages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Messages'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'Body'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;expected_msg&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#extra" class="anchor"&gt;
  &lt;/a&gt;
  Extra
&lt;/h2&gt;

&lt;p&gt;In case you wanted to see my file structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;├── README.md
├── app.py
├── requirements.txt
├── requirements_dev.txt
└── tests
    ├── __init__.py
    ├── conftest.py
    └── unit
        ├── __init__.py
        └── test_sqs.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#thank-you" class="anchor"&gt;
  &lt;/a&gt;
  Thank you
&lt;/h2&gt;

&lt;p&gt;kudos to &lt;a href="https://qxf2.com/blog/mocking-out-aws-sqs-using-moto"&gt;Arunkumar Muralidharan&lt;/a&gt; who got me started&lt;/p&gt;

</description>
      <category>python</category>
      <category>moto</category>
      <category>boto3</category>
      <category>aws</category>
    </item>
    <item>
      <title>Git that Code!</title>
      <author>Maegan Wilson</author>
      <pubDate>Wed, 10 Mar 2021 14:10:04 +0000</pubDate>
      <link>https://dev.to/maeganwilson_/git-that-code-2heh</link>
      <guid>https://dev.to/maeganwilson_/git-that-code-2heh</guid>
      <description>&lt;p&gt;Welcome to "Git that Code!" The 2nd post in my Git series. In this post, I'm going to talk about the popular remote servers, GitHub, GitLab, and BitBucket, how to get your code on the server, and retrieve code from it. Let's get started!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4KwLqLXGPn8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#remote-server-options" class="anchor"&gt;
  &lt;/a&gt;
  Remote Server Options
&lt;/h1&gt;

&lt;p&gt;There are 3 Git server options that you hear about, well you might actually only hear about the first 2. You could also roll your own, but that's a bit out of the scope here. So, here are some options that are free and offer quite a bit.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GitHub&lt;/li&gt;
&lt;li&gt;GitLab&lt;/li&gt;
&lt;li&gt;BitBucket&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are just the most "popular" options and each have their pluses and minuses, but here are some general features that each offer on their free tiers.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Free, unlimited private repos (where the code lives)&lt;/li&gt;
&lt;li&gt;Issue tracking&lt;/li&gt;
&lt;li&gt;Wiki per repo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now here is what each is mainly known for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;GitHub&lt;/strong&gt;: Open source software. Most people put their OSS on GitHub for others to contribute to or use&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;GitLab&lt;/strong&gt;: Contains more devop options like Continuious Integration and more access levels&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;BitBucket&lt;/strong&gt;: Has unlimited private repos and integrates well with JIRA and other atlassian software&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post, I'll be demoing using GitHub, but it is relatively the same on all 3 platforms.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-get-code-to-the-server" class="anchor"&gt;
  &lt;/a&gt;
  How to get code to the server
&lt;/h1&gt;

&lt;p&gt;Now, that we know where to store code, let's talk about getting code onto the server. To get code onto the server, you must &lt;code&gt;push&lt;/code&gt; the code into a repository.&lt;/p&gt;

&lt;p&gt;What I like to do is start the repo in your choice of server, mine is GitHub and then get the repo onto my computer, but in the last &lt;a href="https://cctplus.xyz/2021/03/02/giting_started"&gt;post&lt;/a&gt; I walked through making a git repo locally, so let's get that repo onto GitHub.&lt;/p&gt;

&lt;p&gt;The first thing I need to do is make a blank repository. This repository is going to be where the code will be stored.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open your browser of choice&lt;/li&gt;
&lt;li&gt;Navigate to your server&lt;/li&gt;
&lt;li&gt;Sign in&lt;/li&gt;
&lt;li&gt;Create a new repository&lt;/li&gt;
&lt;li&gt;Don't check any of these boxes, but make sure to give your repo a name.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, this is the remote repo that needs to be added to our local repo. GitHub gives us some handy quick setup which is what we are going to follow.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open your terminal app&lt;/li&gt;
&lt;li&gt;Navigate to your local repository&lt;/li&gt;
&lt;li&gt;Add a remote url to the local git repository &lt;code&gt;git remote add origin&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Now we need to create a branch locally &lt;code&gt;git branch -M main&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Then, we &lt;code&gt;push&lt;/code&gt; it to the server. basically we are uploading it to the server now. &lt;code&gt;git push -u origin main&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now the code should be in my GitHub repo. Let's refresh and &lt;strong&gt;BAM&lt;/strong&gt; it's there.&lt;/p&gt;

&lt;p&gt;After commits have been made, we need to run &lt;code&gt;git push&lt;/code&gt; which will push the commits to the remote server.&lt;/p&gt;

&lt;p&gt;When do you push your code? All the time. Sometimes I do it after a long session. Sometimes I do it after each commit. Just make sure your code in the remote server is as up to date as possible. In case things go south, you want a way o bring that work back and the history back.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-get-the-code-from-the-server" class="anchor"&gt;
  &lt;/a&gt;
  How to get the code from the server
&lt;/h1&gt;

&lt;p&gt;We just talked about pushing code to the server, now let's talk about pulling and cloning code from the server. There are two basic commands to get the code from the server. They are &lt;code&gt;git clone&lt;/code&gt; and &lt;code&gt;git pull&lt;/code&gt;. Each are used in different scenarios.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;git clone&lt;/code&gt; is &lt;strong&gt;mainly&lt;/strong&gt; used to get a repository from the server that doesn't exist on the local computer. If you stumble upon a project on  GitHub that you want to hack on, then you clone it to your machine.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git pull&lt;/code&gt; is &lt;strong&gt;mainly&lt;/strong&gt; used to get changes to a repository that you are working on locally. It can be used if you're working on a team or make a change on the web that you need on your computer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's walk through an example of cloning a repo. I'll clone my &lt;code&gt;hello-world-js&lt;/code&gt; repo from forever ago.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open terminal&lt;/li&gt;
&lt;li&gt;Navigate where you want to store the repo for me that'll be my developer folder&lt;/li&gt;
&lt;li&gt;Grab the URL to clone from the repo&lt;/li&gt;
&lt;li&gt;In the terminal type the command &lt;code&gt;git clone git@github.com:maeganwilson/hello-world-js.git&lt;/code&gt; and press enter&lt;/li&gt;
&lt;li&gt;DONE!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, we can edit the file and push it back.&lt;/p&gt;

&lt;p&gt;Alright, cloning was kinda easy, now let's try pulling. Like I said, pulling can only happen when there are changes on the server that you need to git. So, I'm going to make some changes in GitHub.com in the iHog repo.&lt;/p&gt;

&lt;p&gt;Now, in my terminal, I'm going to change my directory to iHog and then run &lt;code&gt;git pull&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the terminal, we see how many changes were made and a bit more.&lt;/p&gt;




&lt;p&gt;That's a very basic overview of using a remote server and how to pull and clone code.&lt;/p&gt;

&lt;p&gt;In the next post, I'm going to cover branches and not the outside tree kind.&lt;/p&gt;




&lt;p&gt;If you want to chat with me and point out some tips and tricks, you can watch me work on iOS apps on Tuesday, Thursday, and Friday mornings at &lt;a href="http://twitch.tv/maeganwilson_"&gt;twitch.tv/maeganwilson_&lt;/a&gt; Make sure to drop by and say hi!&lt;/p&gt;

</description>
      <category>git</category>
    </item>
    <item>
      <title>Learning JavaScript the easy way: JavaScript Grammar</title>
      <author>Adetayo Akinsanya</author>
      <pubDate>Wed, 10 Mar 2021 13:56:26 +0000</pubDate>
      <link>https://dev.to/unkletayo/learning-javascript-the-easy-way-javascript-grammar-4jll</link>
      <guid>https://dev.to/unkletayo/learning-javascript-the-easy-way-javascript-grammar-4jll</guid>
      <description>&lt;p&gt;Hi, welcome to my first post on &lt;a href="https://dev.to"&gt;dev.to&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This post will be the first part of the "Learning JavaScript the easy way" series.&lt;/p&gt;

&lt;p&gt;The decision to start this series came out of the desire to teach JavaScript concepts in the most understandable way to people who may be struggling with it and also get a deeper understanding of it.&lt;/p&gt;

&lt;p&gt;This tutorial is best suited for beginners as it promises a smooth ride and a better understanding of JavaScript concepts from the ground up.&lt;/p&gt;

&lt;p&gt;In this part, you will learn about JavaScript grammar, some of which include case-sensitivity, identifiers, comments, statements, and expressions.&lt;/p&gt;

&lt;p&gt;Let's dive in 🚀🚀&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-grammar" class="anchor"&gt;
  &lt;/a&gt;
  Javascript Grammar
&lt;/h2&gt;

&lt;p&gt;Every language has its diction, be it a programming language or the native languages we use to communicate with ourselves and Javascript isn't an exception.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#case-sensitivity" class="anchor"&gt;
  &lt;/a&gt;
  Case Sensitivity
&lt;/h3&gt;

&lt;p&gt;JavaScript is a &lt;i&gt;case-sensitive&lt;/i&gt; language. This implies that the keywords, variable, function, and many other identifiers must always have consistent capitalization. Therefore, a variable name like &lt;code&gt;user&lt;/code&gt; is significantly different from &lt;code&gt;User&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#identifiers" class="anchor"&gt;
  &lt;/a&gt;
  Identifiers
&lt;/h3&gt;

&lt;p&gt;An Identifier can simply be referred to as a name.&lt;br&gt;
In JavaScript, identifiers are used to name variables, functions, parameters, or classes. But these identifiers have certain rules that must be conformed to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A JavaScript identifier must start with a letter, underscore (_), or a dollar sign ($). Subsequent characters can also be digits (0–9), digits, underscores, or dollar signs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The letters being referred to in this context are not limited to ASCII characters also but may extend to Unicode characters also.&lt;/p&gt;

&lt;p&gt;It has become a convention among Javascript developers to use camel case for identifiers, this means that the first letter is lowercase, and each additional word starts with a capital letter. Although it is not mandatory as there are other conventions like &lt;code&gt;kebab case&lt;/code&gt;, &lt;code&gt;snake case&lt;/code&gt; that can also be used, they just have to abide by the identifier rule&lt;/p&gt;

&lt;p&gt;The following are identifier names declared in camelcase&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;greetingsFromNigeria&lt;/span&gt;
&lt;span class="nx"&gt;containsNumber&lt;/span&gt;
&lt;span class="nx"&gt;isString&lt;/span&gt;
&lt;span class="nx"&gt;routeHere&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#comments" class="anchor"&gt;
  &lt;/a&gt;
  Comments
&lt;/h2&gt;

&lt;p&gt;They are added with the purpose of making the source code easier for humans to understand, and are generally ignored by compilers and interpreters.&lt;/p&gt;

&lt;p&gt;Comments are unexecuted statements in Javascript (more on statements later).&lt;/p&gt;

&lt;p&gt;A line of code that comes after double slashes // or block of codes that comes between /* and */ are treated as a comment in JavaScript.&lt;br&gt;
For example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//  I will be executed&lt;/span&gt;
&lt;span class="c1"&gt;// let bar = 7;  I am not executed&lt;/span&gt;

&lt;span class="cm"&gt;/*
This code won't run.
Because it is a comment
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#statements" class="anchor"&gt;
  &lt;/a&gt;
  Statements
&lt;/h2&gt;

&lt;p&gt;A statement is a piece of code that can be executed and performs some kind of action.&lt;/p&gt;

&lt;p&gt;Although JavaScript doesn't require a statement to end with a semicolon(;), it is recommended to be used when ending a statement. &lt;/p&gt;

&lt;p&gt;Personally, I think it makes code readable.&lt;br&gt;
You can use a code block that begins with a left curly brace &lt;code&gt;({)&lt;/code&gt; and ends with the right curly brace &lt;code&gt;(})&lt;/code&gt; to combine multiple statements as follows:&lt;/p&gt;

&lt;p&gt;For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;today&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="nx"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Monday&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tuesday&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#expressions" class="anchor"&gt;
  &lt;/a&gt;
  Expressions
&lt;/h2&gt;

&lt;p&gt;An expression is a piece of code that can be evaluated to produce a value. &lt;br&gt;
For example, the following illustrates an expression that involves a and b:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#reserved-keywords" class="anchor"&gt;
  &lt;/a&gt;
  Reserved Keywords
&lt;/h2&gt;

&lt;p&gt;There are some keywords that are reserved in JavaScript these keywords cant be used to name variables some of which includes &lt;/p&gt;

&lt;p&gt;&lt;code&gt;await&lt;/code&gt;,&lt;code&gt;break&lt;/code&gt;,&lt;code&gt;case&lt;/code&gt;,&lt;code&gt;catch&lt;/code&gt;,&lt;code&gt;default&lt;/code&gt;,&lt;code&gt;const&lt;/code&gt;,&lt;code&gt;continue&lt;/code&gt;,&lt;code&gt;debugger&lt;/code&gt;,&lt;code&gt;delete&lt;/code&gt;,&lt;code&gt;enum&lt;/code&gt;,&lt;code&gt;else&lt;/code&gt;,&lt;code&gt;export&lt;/code&gt;,&lt;code&gt;do&lt;/code&gt;,&lt;code&gt;extends&lt;/code&gt;,&lt;code&gt;false&lt;/code&gt;,&lt;code&gt;finally&lt;/code&gt;,&lt;code&gt;for&lt;/code&gt;,&lt;code&gt;function&lt;/code&gt;,&lt;code&gt;void&lt;/code&gt;,&lt;code&gt;static&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are many other reserved words and keywords in JavaScript that aren't mentioned here, but the good thing is you don't have to memorize them all. However, if you wish to check out other reserved words you can find them &lt;a href="https://www.w3schools.in/javascript-tutorial/keywords/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the next part, we will be discussing &lt;i&gt;Variable&lt;/i&gt;, its declaration, hosting amongst many basic concepts.&lt;/p&gt;

&lt;p&gt;As this is my first post, I would like the opinions of experts on how to make this better&lt;/p&gt;

&lt;p&gt;Thank you for your time.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>firstpost</category>
    </item>
    <item>
      <title>Sharing common code between Rails controllers with `Scoped` pattern</title>
      <author>matt swanson</author>
      <pubDate>Wed, 10 Mar 2021 13:00:00 +0000</pubDate>
      <link>https://dev.to/swanson/sharing-common-code-between-rails-controllers-with-scoped-pattern-471m</link>
      <guid>https://dev.to/swanson/sharing-common-code-between-rails-controllers-with-scoped-pattern-471m</guid>
      <description>&lt;p&gt;If you follow a strict REST / nested resources approach to building your Rails app, you might get sick of repeating common controller actions.&lt;/p&gt;

&lt;p&gt;Try the &lt;code&gt;Scoped&lt;/code&gt; concern pattern: a place to put shared code (setting variables, authorization) and slim down your controllers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage" class="anchor"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;This particular pattern comes from DHH and Basecamp – a codebase that p&lt;a href="https://twitter.com/dhh/status/964244090224128001"&gt;rides itself of using lots of tiny concerns&lt;/a&gt; to share bits of behavior.&lt;/p&gt;

&lt;p&gt;While the savings of repeating the same &lt;code&gt;before_action&lt;/code&gt;s to look up a &lt;code&gt;Channel&lt;/code&gt; would be a fine benefit on it’s own, the naming convention of &lt;code&gt;Scoped&lt;/code&gt; is such a great, sharp name. Playlists are “scoped” to a channel so it makes total sense that the corresponding controller would be “channel scoped”.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;ChannelScoped&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;ActiveSupport&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Concern&lt;/span&gt;

  &lt;span class="n"&gt;included&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;before_action&lt;/span&gt; &lt;span class="ss"&gt;:set_channel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:authorize_channel&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_channel&lt;/span&gt;
    &lt;span class="vi"&gt;@channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:channel_id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;authorize_channel&lt;/span&gt;
    &lt;span class="n"&gt;authorize&lt;/span&gt; &lt;span class="vi"&gt;@channel&lt;/span&gt; &lt;span class="c1"&gt;# check that user has access, etc&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Channels::SubscriptionsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;ChannelScoped&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Channels::VideosController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;ChannelScoped&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Channels::PlaylistsController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;ChannelScoped&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#additional-resources" class="anchor"&gt;
  &lt;/a&gt;
  Additional Resources
&lt;/h2&gt;

&lt;p&gt;DHH Gist: &lt;a href="https://gist.github.com/dhh/10022098"&gt;Models for Nested Resources&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://twitter.com/_swanson"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0llgMsYy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://boringrails.com/images/twitter-banner.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>webdev</category>
    </item>
    <item>
      <title>React State: A simple and easy to follow breakdown</title>
      <author>Kieran Roberts 👋</author>
      <pubDate>Wed, 10 Mar 2021 12:58:12 +0000</pubDate>
      <link>https://dev.to/kieran6roberts/react-state-a-simple-and-easy-to-follow-breakdown-3ai</link>
      <guid>https://dev.to/kieran6roberts/react-state-a-simple-and-easy-to-follow-breakdown-3ai</guid>
      <description>&lt;h2&gt;
  &lt;a href="#content" class="anchor"&gt;
  &lt;/a&gt;
  Content
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;What is state?&lt;/li&gt;
&lt;li&gt;What causes a component to re-render?&lt;/li&gt;
&lt;li&gt;How do we use state in React?&lt;/li&gt;
&lt;li&gt;Functional components and the &lt;code&gt;useState()&lt;/code&gt; hook&lt;/li&gt;
&lt;li&gt;Class components and &lt;code&gt;setState()&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;State do's &amp;amp; don'ts&lt;/li&gt;
&lt;li&gt;Lifting state&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So you've just started learning and working with React. Great 😄! React is a fantastic JavaScript library that helps us in building interactive sites but it can difficult to grasp at first.&lt;/p&gt;

&lt;p&gt;Coming from vanilla JavaScript into React you will be hit by all kinds of terminology such as props, state, lifecycle, components, hooks and much more. It can be overwhelming but it doesn't have to be. &lt;/p&gt;

&lt;p&gt;State is a core concept of React. One that can be difficult to understand at first and especially difficult to master. So that is why I decided to write this article. I like React a lot and would like to help others who might be having difficulties. Let's get to it 👏.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-state" class="anchor"&gt;
  &lt;/a&gt;
  What is state?
&lt;/h2&gt;

&lt;p&gt;Let's consider some simple real world examples for a second. A door can either be open or closed hence in an open or closed state. It can be anything really. Think about a clock ticking over. Each time the second increases, the state of the clock changes. &lt;/p&gt;

&lt;p&gt;In React we build our UI by creating re-usable components that we write using JavaScript(usually JSX which is a syntax extension of JavaScript). Components are able to manage their own state locally and they can be combined to form large and complex UI.&lt;/p&gt;

&lt;p&gt;Consider a project written with vanilla JavaScript for a second. If we want to update an element normally we would have to query for the element and then do something to it to reflect the change of state. A common way to do this is by toggling certain classes that we have set up. Check  it out 👇.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dUQq5ykU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p57fmvx3hrwzl1qd01az.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dUQq5ykU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p57fmvx3hrwzl1qd01az.jpeg" alt="Example of toggling state with vanilla JavaScript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this simple example we are creating a function to toggle the CSS class "open" every time we click on the button element. We could also say that we are toggling the &lt;strong&gt;state&lt;/strong&gt; of the button which we show to the user through a change in style.&lt;/p&gt;

&lt;p&gt;React comes into its own when we are dealing with a more complex application that has a lot of moving parts and requires a lot of state changes/management. &lt;/p&gt;

&lt;p&gt;It is down in large part to React state in whether our components are dynamic or not. Values inside state can and often change over time as we require changes to our UI or data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-causes-a-component-to-rerender" class="anchor"&gt;
  &lt;/a&gt;
  What causes a component to re-render?
&lt;/h2&gt;

&lt;p&gt;React is very smart when it comes to updating the DOM(Document Object Model). It uses something called the Virtual DOM which is similar to the real DOM that we work with except it is a lightweight virtual representation of it. &lt;/p&gt;

&lt;p&gt;Think about walking into your favorite fast food restaurant for second. You have the person working at the cash register that takes your money and we deal with this person every time we're hungry. But there's also that person in the back and this is the person making our food. The unsung hero and the one we know is there but never get to meet 🤣.&lt;/p&gt;

&lt;p&gt;Each DOM object has a corresponding virtual DOM object and React uses this virtual DOM to check for updates so that it doesn't have to directly update all of the real DOM's objects if they show no changes. This would be otherwise very inefficient.&lt;/p&gt;

&lt;p&gt;Whenever we render a JSX element in React, the whole virtual DOM is updated which happens incredibly quickly. Next up it compares the updated virtual DOM's objects against the real DOM. It will then only make changes to the objects in the real DOM that have changed and that is when we see the changes updated on the screen. This is the reason why React is so fast.&lt;/p&gt;

&lt;p&gt;So how do we update the DOM in React other than the initial first render 🤔 ?&lt;/p&gt;

&lt;p&gt;In React a component will undergo a re-render whenever its state changes. This can be done in two ways. Firstly through a direct change to the state using the state update functions provided by React which we will soon take a look at. Secondly through a change to the components props. &lt;/p&gt;

&lt;p&gt;Now that we have an idea of what state is in the context of React and why we need it, let's see how we can use it in our apps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-we-use-state-in-react" class="anchor"&gt;
  &lt;/a&gt;
  How do we use State in React?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#functional-components-amp-class-components" class="anchor"&gt;
  &lt;/a&gt;
  Functional components &amp;amp; Class components
&lt;/h3&gt;

&lt;p&gt;Before we start with some example we first have to differentiate the two different methods we have of working with state. While writing or reading about React you may have come across examples of code where components are written as JavaScript classes &lt;code&gt;Class Product extends React.Component {}&lt;/code&gt; or as functional components such as &lt;code&gt;const Product = () =&amp;gt; {}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It used to be that when we required a component to be a &lt;strong&gt;stateful&lt;/strong&gt; component(meaning we want create some local state for the component) we would use classes to construct the component. And when we required a &lt;strong&gt;stateless&lt;/strong&gt;(no local state required) component we would create the component as a functional component.&lt;/p&gt;

&lt;p&gt;The reason for this is that React did not provide a way for us to control a components state when we used functional components. If we wanted the the component to be stateful then we would have to use a class component and then create a state object with &lt;code&gt;this.state = {...};&lt;/code&gt; which we will soon see.&lt;/p&gt;

&lt;p&gt;In February 2019 React released a way in which we could now use state with functional components known as &lt;strong&gt;React Hooks&lt;/strong&gt;. They are essentially special functions that we can use and one of these hooks allows us to control a components state &lt;em&gt;without&lt;/em&gt; having to use classes. This does not mean that you are forced to use hooks instead of classes and vice versa. The definition provided by React fro hooks is as follows.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is a Hook? A Hook is a special function that lets you “hook into” React features. For example, useState is a Hook that lets you add React state to function components. We’ll learn other Hooks later.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is however my preference to stick to functional components when working with React similar to many others who think that they are simpler to read and write and understand exactly what is going. In fact in the official React documentation in the section &lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;Introducing Hooks - React&lt;/a&gt;, there is a sub-heading that says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Classes confuse both people and machines&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you are coming from another language where classes are the norm then don't worry, you are more than welcome to use classes in your React code. React have made clear that they have no plans to remove classes from the library. I think those of us whose first programming language is JavaScript tend to prefer functional programming.&lt;/p&gt;

&lt;p&gt;In JavaScript we also have to deal with using the &lt;code&gt;this&lt;/code&gt; keyword in classes which behaves differently to many other programming languages and this can lead to code that can be harder to read or follow.&lt;/p&gt;

&lt;p&gt;To demonstrate this let's take a look at our first example of a simple stateful component. One will be written as a class and the other as a functional component so we can compare both methods but each component is otherwise the same. Don't worry to much if there's something in the code you are not sure about just yet. We'll cover the specifics about handling state very soon.&lt;/p&gt;

&lt;p&gt;Functional Component with &lt;code&gt;useState()&lt;/code&gt; hook 👇.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nrxiv47q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/41j1dgea780aexmln0vi.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nrxiv47q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/41j1dgea780aexmln0vi.jpeg" alt="React functional component with state"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we have a simple &lt;code&gt;Button&lt;/code&gt; component that requires us to use state so that we can conditionally show the the user whether it is in an "open" or "closed" state. Really contrived example but go with it 😃 just so we can make a quick comparison.&lt;/p&gt;

&lt;p&gt;Class Component using &lt;code&gt;setState()&lt;/code&gt; 👇.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SYAuNzEN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1615372160651/h77xrznKH.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SYAuNzEN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1615372160651/h77xrznKH.jpeg" alt="React class component with state"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aside from there being less code to write in a functional component it is also &lt;em&gt;for me at least&lt;/em&gt; easier to parse. Despite this it is important to be comfortable with both class and functional components. There are a lot of resources, code snippets and documentation for React that were written before the existence of React hooks. Therefore we want to be comfortable with both so now we'll have a look at them. Let's get into it 👇.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#functional-components-and-the-raw-usestate-endraw-hook" class="anchor"&gt;
  &lt;/a&gt;
  Functional components and the &lt;code&gt;useState()&lt;/code&gt; hook
&lt;/h2&gt;

&lt;p&gt;As we briefly saw in the previous comparison we can use state in a functional component with the &lt;code&gt;useState()&lt;/code&gt; hook provided by React. To use this hook we call the &lt;code&gt;useState()&lt;/code&gt; function &lt;strong&gt;inside the component&lt;/strong&gt; and pass in one argument which will be the initial value for the state. This initial value can be anything and is not restricted to being an object such as &lt;code&gt;setState()&lt;/code&gt; which we will see in the next section.&lt;/p&gt;

&lt;p&gt;From calling the &lt;code&gt;useState()&lt;/code&gt; function we get two things back from React and we use array destructuring to deconstruct them into two variables. If you need a refresher for JavaScript destructuring then check out &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"&gt;MDN - Destructuring Assignment&lt;/a&gt;. The first is called the state variable and we can give it any name we want. I suggest giving it a name that represents what the state is(e.g products, name, isOpen etc.).&lt;/p&gt;

&lt;p&gt;The second value we get back is a function that allows up to update the state and similarly we can choose an appropriate name for it although the convention is to give it the same name as the state value but prefixed with the word "set". For Example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const [ numbers, setNumbers ] = useState([0, 1, 2, 3]);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can also have multiple different calls to &lt;code&gt;useState()&lt;/code&gt; to keep track of different values in state which may be required in a larger and more complex component. We could inlcude all of the following &lt;code&gt;useState()&lt;/code&gt; calls within a single component if we really desired.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cI4_LJCb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1615318989085/KFDVc4L6U.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cI4_LJCb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1615318989085/KFDVc4L6U.jpeg" alt="useState() initializing examples"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we know how to create some state let's put it into action. We are going to create a simple component that will output an array of numbers. We will have a button and whenever we click the button we will increment the last number of the array by 1 and output the full list with our state updates. &lt;/p&gt;

&lt;p&gt;Here is an example of it after we have clicked the button once and therefore added the number 4 to the initial list &lt;code&gt;[0, 1, 2, 3]&lt;/code&gt; 👇.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2cIILm_P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1615379905156/SH-Ddc_LZ.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2cIILm_P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1615379905156/SH-Ddc_LZ.jpeg" alt="Example project output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We start by creating the functional component and calling the &lt;code&gt;useState()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tYHEhOrf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1615319360560/svvUsq5Sd.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tYHEhOrf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1615319360560/svvUsq5Sd.jpeg" alt="React useState() example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So now we have our state value &lt;code&gt;numbers&lt;/code&gt; set initially to the array &lt;code&gt;[0, 1, 2, 3]&lt;/code&gt; that we pass in to &lt;code&gt;useState&lt;/code&gt; and we also have our function that will let us update the state value when something happens. So let's put it all into action.&lt;/p&gt;

&lt;p&gt;Whenever we want to update the state we call the &lt;code&gt;SetNumbers()&lt;/code&gt; function in our case. Let's write a simple function that holds the logic to find the next number to add to the list and then update the state as we have defined. This will cause a component re-render and the result can then be shown to the user.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MSnijO3F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1615321328266/IEa07RCxB.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MSnijO3F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1615321328266/IEa07RCxB.jpeg" alt="React.useState() example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we access the last number of the array with &lt;code&gt;array[array.length - 1]&lt;/code&gt; and then we call the update state function. We pass in an array where we spread the values from the current numbers state value using the JavaScript spread syntax &lt;code&gt;...&lt;/code&gt; so that we can still keep them in state. Then to the end of the array we add current last value + 1.&lt;/p&gt;

&lt;p&gt;The final step is to make sure we return something because all React component must return some kind of React element. In the case of a functional component we can do this with the &lt;code&gt;return&lt;/code&gt; keyword. So let's finish our example and update the UI to show that our state is changing.&lt;/p&gt;

&lt;p&gt;(note: In the map function below each &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; should contain a unique key property which is explained here &lt;a href="https://reactjs.org/docs/lists-and-keys.html"&gt;React - Lists and Keys&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VB5VVB3c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1615321154552/dPUHsuLsz.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VB5VVB3c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1615321154552/dPUHsuLsz.jpeg" alt="Complete useState() example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to trigger the function that add adds a number to the array I have rendered a button for the user with an &lt;code&gt;onClick&lt;/code&gt; handler that will run our function after a click. Then we want to render our list of numbers to the page. We can do with with the JavaScript &lt;code&gt;map()&lt;/code&gt; function which allows us to perform some action on each element of the array and return the result of each action into a new array.&lt;/p&gt;

&lt;p&gt;This is a very common pattern in React where we have some data(e.g result of an external API call) and we have to map it in some form to the DOM. Here we map each number into a list element by passing each number into the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;. Often we would have other custom components where we map the data at each index into the component.&lt;/p&gt;

&lt;p&gt;And that's it! We have our stateful functional component that will update upon user interaction 👍. Let's take a look at how we would achieve the same result in a class component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#class-components-and-raw-setstate-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  Class components and &lt;code&gt;setState()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Before the introduction of React Hooks we were forced to write our stateful components using classes. React provided us with the &lt;code&gt;setState()&lt;/code&gt; api which allows us to request some changes to our state. I use the word request because it is not guaranteed that React will update the state changes immediately. It is possible that React will delay the update for performance reasons so attempting to read the state value immediately after a change might lead to unexpected results.&lt;/p&gt;

&lt;p&gt;Nevertheless calling this will always lead to a component re-render as we have previously explored. It takes two arguments shown here &lt;code&gt;setState(updater, [ callback ])&lt;/code&gt; where &lt;code&gt;updater&lt;/code&gt; is a function that can take two parameters as state and props and returns the change of state &lt;code&gt;(state, props) =&amp;gt; stateChange&lt;/code&gt;. The callback parameter is an optional function that gets executed after the component has re-rendered with state changes. This callback is not often used and React suggests not to use it but instead provides &lt;a href="https://reactjs.org/docs/state-and-lifecycle.html"&gt;LifeCycle Methods&lt;/a&gt; which we will not cover today.&lt;/p&gt;

&lt;p&gt;We can also choose to just pass an object as the first parameter of &lt;code&gt;setState()&lt;/code&gt; instead of the function and this will create a shallow merge of our new state into the state object. This just means that the values in our object will override any duplicate properties with our new values, leaving other properties unchanged and this is how we are going to update our state in our example. This is an example of the merging 👇.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UoG0v6r8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1615315351113/8DLY1h11k.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UoG0v6r8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1615315351113/8DLY1h11k.jpeg" alt="setState({}) shallow merge explanation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Back to our example we start by creating our local state object in our class constructor like this 👇.&lt;/p&gt;

&lt;p&gt;(Note: Don't forget to import React which is not shown in the following examples 😅).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ywvpALTh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1615317435658/QBroL30Qr.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ywvpALTh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1615317435658/QBroL30Qr.jpeg" alt="React class using this.state setup"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We do this by setting &lt;code&gt;this.state&lt;/code&gt; to an object where we can specify the properties we want to keep in state with their initial values. Similarly to a functional component we could use more state variables by adding more properties into our state object.  &lt;/p&gt;

&lt;p&gt;Next we can update our &lt;code&gt;handleAddNumber&lt;/code&gt; function to be suitable for a class component.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i5i09meQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1615317313001/5Ds87hsd3w.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i5i09meQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1615317313001/5Ds87hsd3w.jpeg" alt="React class using this.state with update function"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The only changes we've made here is to use the &lt;code&gt;this&lt;/code&gt; keyword when referencing our state value and update function so that we are referring to our Numbers Class and I have also stored the current state in a temporary variable for readability. It is also important to note that our &lt;code&gt;handleAddNumber&lt;/code&gt; method is created using the arrow function syntax so that we don't have to bind our function to the correct &lt;code&gt;this&lt;/code&gt; in the &lt;code&gt;onClick&lt;/code&gt; handler. Arrow functions do not have their own &lt;code&gt;this&lt;/code&gt; and therefore it will refer to enclosing execution context, in this case our class.&lt;/p&gt;

&lt;p&gt;If you would like a refresher for understanding the &lt;code&gt;this&lt;/code&gt; keyword in JavaScript then check it out here at &lt;a href="https://javascript.info/object-methods"&gt;JavaScript Info - Object methods, "this"&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we refer to our current state with &lt;code&gt;this.state.numbers&lt;/code&gt; and I have stored this in a constant for readability. In order to update the state we &lt;code&gt;setState()&lt;/code&gt; provided by react and pass in our new state object. Finally let's return some React Element using the React built-in &lt;code&gt;render()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;(note: In the map function below each &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; should contain a unique key property which is explained here &lt;a href="https://reactjs.org/docs/lists-and-keys.html"&gt;React - Lists and Keys&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NAd17rKH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1615317052729/GOMXInZ2h.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NAd17rKH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1615317052729/GOMXInZ2h.jpeg" alt="React class complete example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once again we have to add the &lt;code&gt;this&lt;/code&gt; keyword to our handler function as explained and also to our state value &lt;code&gt;this.state.numbers&lt;/code&gt; that we are mapping to the DOM.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#state-dos-amp-donts" class="anchor"&gt;
  &lt;/a&gt;
  State Do's &amp;amp; Don'ts
&lt;/h2&gt;

&lt;p&gt;Now that we know how to create stateful components we should consider the things to avoid when we use state in React.&lt;/p&gt;

&lt;p&gt;Firstly it is important to know that state changes in React is asynchronous. This means that we need to be careful when calling multiple state change functions in quick succession. We will end up running into problems where we call multiple state updates inside the same cycle.&lt;/p&gt;

&lt;p&gt;Secondly it is important that we should never try to change the state value directly using &lt;code&gt;this.state.numbers = ...&lt;/code&gt; but instead always use the &lt;code&gt;setState()&lt;/code&gt; or &lt;code&gt;useState()&lt;/code&gt; options function for classes or the update function provided by &lt;code&gt;useState()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are also rules for using React hooks such as the &lt;code&gt;useState()&lt;/code&gt; hook we have previously used ourselves. React provides us with a few more very useful hooks(and some less useful) that give us our functional component alternatives to using React class lifecycle methods.&lt;/p&gt;

&lt;p&gt;The first important rule is that we don't call our hooks anywhere other than the top level. Don't call them inside loops or conditional and try to call them before your functions might experience an early return.&lt;/p&gt;

&lt;p&gt;This is because we have to ensure that our component hooks are executed in the same order every time our component renders otherwise we will run into errors with React. If the component only sometimes executes an &lt;code&gt;if&lt;/code&gt; statement for example with some state update then there will be a difference in the order that the hooks were called. It is a common problem for React learners and one that will get easier to understand with time.&lt;/p&gt;

&lt;p&gt;Secondly we cannot call out &lt;code&gt;useState()&lt;/code&gt; (or other hooks) or subsequent state update function outside of React Functions(this means React components or custom hooks which are just themselves functions). &lt;/p&gt;

&lt;p&gt;For now it is good to just be aware of the important rules and get playing with state. When you run into problems you will have a better understanding of why you are receiving the error 😃.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lifting-state" class="anchor"&gt;
  &lt;/a&gt;
  Lifting State
&lt;/h2&gt;

&lt;p&gt;Lifting State is a term you may have come across during your learning and it describes a solution for the flow of data through react components. What happens when we have two different components and we would like them to react(pun intended 😅) to the changes in state of another component. Often we have multiple components and we want them to show some changes based on the state changes of another component.&lt;/p&gt;

&lt;p&gt;In order to understand this further we need to know about the flow of data through our app. In React we have to pass props down the component tree from top to bottom. We cannot pass this data up from a child to a parent or from a child to a sibling. The data comes from ancestors downwards.&lt;/p&gt;

&lt;p&gt;Consider the following example where the &lt;code&gt;Child&lt;/code&gt; component originally has some local state but then we realize that the &lt;code&gt;ChildSibling&lt;/code&gt; component also requires the same state. In React we want to limit the amount of stateful components as much as possible. The possibility of bugs increases when we work with more stateful components and if we keep re-writing the same code in different places then we are not writing efficient code. &lt;/p&gt;

&lt;p&gt;So before we lift our state up we have this 👇.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dLm51ePV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1615376156420/LnJYyD65O.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dLm51ePV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1615376156420/LnJYyD65O.jpeg" alt="Before state is lifted example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we are just toggling the &lt;code&gt;isOpen&lt;/code&gt; state variable with a button click using &lt;code&gt;setIsOpen(!isOpen)&lt;/code&gt; which means not the current value of &lt;code&gt;isOpen&lt;/code&gt;. A boolean can only ever be true or false so we just flip the value when the button is pressed.&lt;/p&gt;

&lt;p&gt;In order for both child components to utilize this state we can 'lift' it to the closest common ancestor of both components. In our case it is the &lt;code&gt;Parent&lt;/code&gt; component which we can see is returning both of the child components. &lt;/p&gt;

&lt;p&gt;So what we can do is lift the state to the &lt;code&gt;Parent&lt;/code&gt; component declaring it only once. Then we can pass the state value as a prop to each component so that it can render something conditionally. We will also move our button to the parent component.&lt;/p&gt;

&lt;p&gt;So let's lift it up to the &lt;code&gt;Parent&lt;/code&gt; and pass it down to each child.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wqRPdEvS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1615376703334/c59XWQHLL.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wqRPdEvS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1615376703334/c59XWQHLL.jpeg" alt="After state is lifted"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you can see we define our state in the &lt;code&gt;Parent&lt;/code&gt; component and pass it to our children via the props object which we deconstruct inside the parameters into the variable so we don't have to bother with writing &lt;code&gt;props.isOpen&lt;/code&gt;. We still only have on stateful component which is great 😄.&lt;/p&gt;

&lt;p&gt;It is important to not that our child components no longer have control over this state and we cannot modify the values passed down from the parent as props. They can however update in some way as a result of the parent modifying the state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There is so much more to learn with regards to React and state. Try building some simple components that might be used on a website to practice with state. &lt;/p&gt;

&lt;p&gt;Start small like a box that toggles its visibility with a button click. Maybe a clock that uses state to update itself with every second and eventually you will be building bigger and more complex examples. &lt;/p&gt;

&lt;p&gt;When you are ready I suggest exploring the other react hooks we have available other than &lt;code&gt;useState()&lt;/code&gt; or if you prefer classes then check out the React lifecycle methods.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed reading the article as much as I enjoyed writing it. For more React and front-end related content you can follow me &lt;a href="https://twitter.com/Kieran6dev"&gt;@Kieran6dev&lt;/a&gt;. Until next time 👋.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Build a react-router clone from scratch</title>
      <author>Thomas Cullen</author>
      <pubDate>Wed, 10 Mar 2021 12:38:17 +0000</pubDate>
      <link>https://dev.to/thomascullen/build-a-react-router-clone-from-scratch-38dp</link>
      <guid>https://dev.to/thomascullen/build-a-react-router-clone-from-scratch-38dp</guid>
      <description>&lt;p&gt;React router is a package that I use in almost all of my projects. Not too long&lt;br&gt;
ago, Michael Jackson &lt;a href="https://twitter.com/mjackson/status/1223684745755684864"&gt;tweeted this&lt;/a&gt;. This made me curious as to how difficult it would be to rebuild react router from scratch.&lt;/p&gt;

&lt;p&gt;Before we dig into this I want to clarify that if you need a router in your project you should just use react router. It has a lot more features, handles a lot more edge cases and is incredibly well tested. This is purely a learning exercise.&lt;/p&gt;

&lt;p&gt;In this post we are going to build a simplified version of react-router that is based on the &lt;a href="https://reacttraining.com/blog/react-router-v6-pre/"&gt;newer v6 API's&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At the heart of react router is another package called 'history'. This package is responsible for managing the router history. For this post we are only concerned about creating a router for the web and so we are going to bake this directly into our react components. The first thing we are going to need is a root &lt;code&gt;Router&lt;/code&gt; component and a context for our other components to consume. Let's start with the context.&lt;/p&gt;

&lt;p&gt;Our router is going to be much more simplified than react router in that we aren't going to provide support for location state, hashes and other cases that react router provides. Our router context is going to provide 2 keys; location and push:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;location is simply a string of the current path.&lt;/li&gt;
&lt;li&gt;push is a function which can be called to change the current path.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And with that we can create our basic router context.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;RouterContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This context is useless without rendering a provider. We are going to do that inside of our main &lt;code&gt;Router&lt;/code&gt; component. The responsibility of this component is to provide information about the current route and provide ways to manipulate it. We are going to store the current location path in react state. This way when we update the location our component will re-render. We also need to provide the &lt;code&gt;push&lt;/code&gt; function to our context which will simply update the browser location and update our location state. Finally we also listen for the window 'popstate' event to update our location when using the browser navigation buttons.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLocation&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handlePush&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newLocation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pushState&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newLocation&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setLocation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newLocation&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;setLocation&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleHashChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setLocation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;setLocation&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;popstate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleHashChange&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;popstate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleHashChange&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;handleHashChange&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;RouterContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;handlePush&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;RouterContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to test our component we are going to need a way to update the current route to check the correct components are rendering. Let's create a &lt;code&gt;Link&lt;/code&gt; component for this. Our link component will simply take a &lt;code&gt;to&lt;/code&gt; argument of the new path and call our &lt;code&gt;push&lt;/code&gt; function from the router context when clicked.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;push&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;RouterContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have a way to navigate around, we need a way to actually render some routes! Let's create a &lt;code&gt;Routes&lt;/code&gt; and &lt;code&gt;Route&lt;/code&gt; component to handle this. Let's start with the &lt;code&gt;Route&lt;/code&gt; component because all it needs to do is simply render the children we give it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we need our &lt;code&gt;Routes&lt;/code&gt; component. Here we need to iterate through the route components and find one that matches the current location. We will also want to render the matched route inside of a route context, so that our route children can access any params that matched in the path. Let's start by creating the functions we need to match the routes. The first thing we need is a function that takes the path prop on a route and converts it into a regex that we can use to match against the current location.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;compilePath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/:&lt;/span&gt;&lt;span class="se"&gt;(\w&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;([^&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;/]+)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`^(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;i&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;keys&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will also give us an array of any keys that represet any params in the path pattern.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;compilePath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/posts/:id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// =&amp;gt; { regex: /^(/posts/([^\/]+))/i, keys: ["id"] }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next up we need a new function that will iterate through each child route and use the &lt;code&gt;compilePath&lt;/code&gt; function to test if it matches the current location, while also extracing any matching params.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;matchRoutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;matches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;keys&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;compilePath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;route&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;collection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{}),&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally we can create a new &lt;code&gt;RouteContext&lt;/code&gt; and put together our Routes component. We'll pass the provided children into the &lt;code&gt;matchRoutes&lt;/code&gt; function to find a matching route and render it inside of a provider for the route context.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;RouteContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Routes&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;RouterContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;matchRoutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="c1"&gt;// if no routes matched then render null&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;RouteContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;RouteContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point we actually have a functioning router, however, we are missing a small but crucial piece. Every good router needs a way to extract parameters from the URL. Thanks to our &lt;code&gt;RouteContext&lt;/code&gt; we can easily create a &lt;code&gt;useParams&lt;/code&gt; hook that our routes can use to extract this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useParams&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;RouteContext&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And with all of that we have our own basic working version of react router!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Products&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Example Products&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/products/1"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Product One&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/products/2"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Product Two&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useParams&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Viewing product &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h4&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt; &lt;span class="na"&gt;to&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Back to all products&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Routes&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/products/:id"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Product&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Products&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Routes&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Top 10 Date Pickers in React</title>
      <author>deji adesoga</author>
      <pubDate>Wed, 10 Mar 2021 12:13:05 +0000</pubDate>
      <link>https://dev.to/desoga/top-10-date-pickers-in-react-9hm</link>
      <guid>https://dev.to/desoga/top-10-date-pickers-in-react-9hm</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Never bend your head. Always hold it high. Look the world straight in the eye.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;- Helen Keller&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-content" class="anchor"&gt;
  &lt;/a&gt;
  Table of Content
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="#Introduction"&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#y0c/react-datepicker"&gt;&lt;strong&gt;10). @ y0c/react-datepicker&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#materialui-daterange-picker"&gt;&lt;strong&gt;9). materialui-daterange-picker&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#React-DateTime-Picker"&gt;&lt;strong&gt;8). React-DateTime-Picker&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#react-date-range"&gt;&lt;strong&gt;7). react-date-range&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#react-date-picker"&gt;&lt;strong&gt;6). react-date-picker&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#react-big-calendar"&gt;&lt;strong&gt;5). react-big-calendar&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#react-datetime"&gt;&lt;strong&gt;4). react-datetime&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#react-day-picker"&gt;&lt;strong&gt;3). react-day-picker&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#material-ui/pickers"&gt;&lt;strong&gt;2). @material-ui/pickers&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#reactdatepicker"&gt;&lt;strong&gt;1). React Date Picker&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#conclusion"&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;A Date Picker is a form of graphical user interface that allows users to select a date from a calendar and/or time from a time range. The common practice in which a date picker is implemented is by providing a text-box field, which when clicked upon to enter a date, displays a pop-up calendar, such that when one of the characters on the calendar is selected, it displays the value inside the text input field.&lt;/p&gt;

&lt;p&gt;Some of the advantages of using a date picker include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Entering dates becomes easier for the user and you can control the format of the data you receive.&lt;/li&gt;
&lt;li&gt;  Only valid dates can be entered.&lt;/li&gt;
&lt;li&gt;  Dates are properly formated to avoid confusion.&lt;/li&gt;
&lt;li&gt;  Date Pickers can help users out by including common holidays, for instance depending on the country chosen and integration of their own calendar.&lt;/li&gt;
&lt;li&gt;  Making the user enter a date by merely clicking on a date in the pop-up calendar as opposed to having to take their hand off the mouse to type in a date, reducing the chances of error in the process.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this tutorial, we will take a look at the top ten date pickers in react, using the estimated weekly downloads from the least number to the most on &lt;a href="https://www.npmjs.com/"&gt;NPM&lt;/a&gt;.&lt;br&gt;
&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#10-y0creactdatepicker" class="anchor"&gt;
  &lt;/a&gt;
  10). @ y0c/react-datepicker
&lt;/h2&gt;

&lt;p&gt;This date picker is a flexible, reusable, mobile-friendly DatePicker component for React. Its previous versions rely on &lt;strong&gt;moment.js,&lt;/strong&gt; but now it is changed to &lt;strong&gt;Day.js&lt;/strong&gt; because of bundle size issues.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#brief-overview" class="anchor"&gt;
  &lt;/a&gt;
  Brief Overview:
&lt;/h3&gt;
&lt;h6&gt;
  &lt;a href="#version%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Version  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;1.0.4&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#license%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;License  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;MIT&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#estimatedweekly-downloads%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Estimated-Weekly -Downloads &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;677&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#unpackedsize" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Unpacked-size&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;154kb&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#link-to-repository" class="anchor"&gt;
  &lt;/a&gt;
  Link To Repository
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://github.com/y0c/react-datepicker"&gt;@yoc/react-&lt;/a&gt;date picker&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#code-demo-example" class="anchor"&gt;
  &lt;/a&gt;
  Code Demo / Example
&lt;/h3&gt;

&lt;p&gt;In this short tutorial, I'll be showing us how we can install, display and get the values of the date that is selected in the DatePicker.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#step-1" class="anchor"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h4&gt;

&lt;p&gt;We will need to install React, this can be done trough Create-React-App. I wrote an article on how to install it &lt;a href="https://thecodeangle.com/angular-vs-react-vs-vue-getting-started/#reactinstallation"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once that is done, we will need to navigate into the path of our folder in our terminal and run the npm command to install our Date-Picker package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i @y0c/react-datepicker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-2" class="anchor"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#appjs" class="anchor"&gt;
  &lt;/a&gt;
  app.js
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;DatePicker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;RangeDatePicker&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@y0c/react-datepicker&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@y0c/react-datepicker/assets/styles/calendar.scss&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;YocReactDatePicker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onChangeValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dateValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toDate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dateValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onChangeRangeValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;YOC&lt;/span&gt; &lt;span class="nx"&gt;DatePicker&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;DatePicker&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onChangeValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;br&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;br&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;YOC&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt; &lt;span class="nx"&gt;Range&lt;/span&gt; &lt;span class="nx"&gt;Picker&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;RangeDatePicker&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onChangeRangeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;date&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;YocReactDatePicker&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we did here was to create a new file. After this, we had to import &lt;strong&gt;React&lt;/strong&gt;, &lt;strong&gt;DatePicker&lt;/strong&gt;, &lt;strong&gt;RangeDatePicker&lt;/strong&gt; as well as the assets for the &lt;strong&gt;CSS.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Next, we created a functional component that has two variables. The first one is called &lt;strong&gt;onChangeValue&lt;/strong&gt; which takes in an argument, while the second one is called &lt;strong&gt;onChangeRangeValue. &lt;/strong&gt;These variables allow us to log the data for the date in the console.&lt;/p&gt;

&lt;p&gt;Finally in our code, we display the date pickers by calling both the &lt;strong&gt;&lt;em&gt;&lt;/em&gt;&lt;/strong&gt; and the &lt;strong&gt;&lt;/strong&gt; that was imported earlier.&lt;/p&gt;

&lt;p&gt;Each one has an &lt;strong&gt;onChange&lt;/strong&gt; prop that takes in the variables that we created earlier.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#result" class="anchor"&gt;
  &lt;/a&gt;
  Result
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EJdFni7C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EJdFni7C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-1.gif" alt="a gif displaying the result of the above code sample"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#possible-errors" class="anchor"&gt;
  &lt;/a&gt;
  Possible Errors
&lt;/h4&gt;

&lt;p&gt;There is a chance you may get an error that says, &lt;strong&gt;&lt;em&gt;ERROR Cannot find module 'node-sass'.&lt;/em&gt;&lt;/strong&gt; All you have to do when you get this error message is to run the command &lt;code&gt;npm install node-sass&lt;/code&gt; in your terminal or command line.&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9%C2%A0materialuidaterangepicker" class="anchor"&gt;
  &lt;/a&gt;
  9). materialui-daterange-picker
&lt;/h2&gt;

&lt;p&gt;This is a react date range picker that makes use of @material-ui. Material-UI is the most popular React component library, with millions of users worldwide.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#brief-overview" class="anchor"&gt;
  &lt;/a&gt;
  Brief Overview:
&lt;/h3&gt;

&lt;h6&gt;
  &lt;a href="#version%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Version  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;1.1.92&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#license%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;License  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;MIT&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#estimatedweekly-downloads%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Estimated-Weekly -Downloads &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;5,135&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#unpackedsize" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Unpacked-size&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;1.12 MB&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#link-to-repository" class="anchor"&gt;
  &lt;/a&gt;
  Link To Repository
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://github.com/jungsoft/materialui-daterange-picker#readme"&gt;materialui-daterange-picker&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-demo-example" class="anchor"&gt;
  &lt;/a&gt;
  Code Demo / Example
&lt;/h3&gt;

&lt;p&gt;In this short tutorial, I'll be showing us how we can install, display and get the values of the date that is selected in the DatePicker.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-1" class="anchor"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h4&gt;

&lt;p&gt;We will need to install React, this can be done trough Create-React-App. I wrote an article on how to install it &lt;a href="https://thecodeangle.com/angular-vs-react-vs-vue-getting-started/#reactinstallation"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once that is done, we will need to navigate into the path of our folder in our terminal and run the npm command to install our Date-Picker package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i materialui-daterange-picker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-2" class="anchor"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#appjs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;app.js&lt;/em&gt;
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;DateRangePicker&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;materialui-daterange-picker&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MaterialUiDateRange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setOpen&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setOpen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;


  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setDateRange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;endDate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;endDate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Material&lt;/span&gt; &lt;span class="nx"&gt;UI&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt; &lt;span class="nx"&gt;Range&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;DateRangePicker&lt;/span&gt;
        &lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setDateRange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MaterialUiDateRange&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we import &lt;strong&gt;React&lt;/strong&gt; and the &lt;strong&gt;DateRangePicker&lt;/strong&gt; as expected. Then we created a functional component. In this component, we declared a React hook called &lt;strong&gt;useState&lt;/strong&gt; that takes in a variable(open) and a function(setOpen).&lt;/p&gt;

&lt;p&gt;We state the &lt;strong&gt;useState&lt;/strong&gt; to &lt;strong&gt;true&lt;/strong&gt; by default because that is how our date picker will get displayed on the page.&lt;/p&gt;

&lt;p&gt;Next up, we assigned an anonymous function to a variable called toggle. This makes sure that our date picker is always open no matter the state.&lt;/p&gt;

&lt;p&gt;We then create another variable called &lt;strong&gt;setDateRange.&lt;/strong&gt; This variable takes in an anonymous function that logs and alert the value of the date selected. We get the value for both the start date and the end date.&lt;/p&gt;

&lt;p&gt;Finally in our return, we assign each props in the &amp;lt;&lt;strong&gt;DateRangePicker&lt;/strong&gt; /&amp;gt; component to each of the variables.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#result" class="anchor"&gt;
  &lt;/a&gt;
  Result
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z1nDlUNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z1nDlUNW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-2.gif" alt="Gif showing the result of the code above"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-reactdatetimepicker" class="anchor"&gt;
  &lt;/a&gt;
  8). React-DateTime-Picker
&lt;/h2&gt;

&lt;p&gt;This is a  fast, lightweight and easy to style date picker that only provides support for modern browsers. It is only compatible with  16.3 or later. If you use an older version of React, please refer to the table below to find a suitable React-DateTime-Picker version.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;React version&lt;/th&gt;
&lt;th&gt;Newest compatible React-DateTime-Picker version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;≥16.3&lt;/td&gt;
&lt;td&gt;latest&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;≥16.0&lt;/td&gt;
&lt;td&gt;2.x&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#brief-overview" class="anchor"&gt;
  &lt;/a&gt;
  Brief Overview:
&lt;/h3&gt;

&lt;h6&gt;
  &lt;a href="#version%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Version  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;3.1.0&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#license%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;License  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;MIT&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#estimatedweekly-downloads%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Estimated-Weekly -Downloads &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;20,973&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#unpackedsize" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Unpacked-size&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;193 kB&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#link-to-repository" class="anchor"&gt;
  &lt;/a&gt;
  Link To Repository
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://github.com/wojtekmaj/react-datetime-picker#readme"&gt;react-datetime-picker&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-demo-example" class="anchor"&gt;
  &lt;/a&gt;
  Code Demo / Example
&lt;/h3&gt;

&lt;p&gt;In this short tutorial, I’ll be showing us how we can install, display and get the values of the date that is selected in the DatePicker.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-1" class="anchor"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h4&gt;

&lt;p&gt;We will need to install React, this can be done trough Create-React-App. I wrote an article on how to install it &lt;a href="https://thecodeangle.com/angular-vs-react-vs-vue-getting-started/#reactinstallation"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once that is done, we will need to navigate into the path of our folder in our terminal and run the npm command to install our Date-Picker package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i react-datetime-picker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-2" class="anchor"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#appjs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;app.js&lt;/em&gt;
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;DateTimePicker&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-datetime-picker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ReactDateTimePicker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getDateValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;


  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt; &lt;span class="nx"&gt;Time&lt;/span&gt; &lt;span class="nx"&gt;Picker&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;DateTimePicker&lt;/span&gt;
        &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getDateValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ReactDateTimePicker&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the above, we import &lt;strong&gt;React&lt;/strong&gt;, &lt;strong&gt;useState&lt;/strong&gt; and &lt;strong&gt;DateTimePicker&lt;/strong&gt;, then we created a functional component. Then we declared a React hook called &lt;strong&gt;useState&lt;/strong&gt; that takes in a variable(value) and a function(onChange).&lt;/p&gt;

&lt;p&gt;The value takes in the value of the current date which will be displayed by default in the input field.&lt;/p&gt;

&lt;p&gt;Next up we created a variable called &lt;strong&gt;getDateValue&lt;/strong&gt;. This variable takes in an anonymous function that enables us to log and alert the value of the selected date. Also, the &lt;strong&gt;onChange&lt;/strong&gt; function is called inside the anonymous function, this makes the date values in the input field change based on the date that was selected.&lt;/p&gt;

&lt;p&gt;Lastly, in our return, we pass in the variables to the props inside the &lt;strong&gt;&lt;/strong&gt; component.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#result" class="anchor"&gt;
  &lt;/a&gt;
  Result
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nAUexGv9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-3-1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nAUexGv9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-3-1.gif" alt="Gif to show result of the code above"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#7-reactdaterange" class="anchor"&gt;
  &lt;/a&gt;
  7). react-date-range
&lt;/h2&gt;

&lt;p&gt;This is a React Date Picker component for choosing dates and date ranges. It makes use of date-fns for date operations. Some of the qualities of this date picker include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Stateless date operations&lt;/li&gt;
&lt;li&gt;  Highly configurable&lt;/li&gt;
&lt;li&gt;  Multiple range selection&lt;/li&gt;
&lt;li&gt;  Based on native js dates&lt;/li&gt;
&lt;li&gt;  Drag n Drop selection&lt;/li&gt;
&lt;li&gt;  Keyboard friendly&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#brief-overview" class="anchor"&gt;
  &lt;/a&gt;
  Brief Overview:
&lt;/h3&gt;
&lt;h6&gt;
  &lt;a href="#version%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Version  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;1.1.3&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#license%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;License  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;MIT&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#estimatedweekly-downloads%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Estimated-Weekly -Downloads &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;63,883&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#unpackedsize" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Unpacked-size&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;1.92 MB&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#link-to-repository" class="anchor"&gt;
  &lt;/a&gt;
  Link To Repository
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://github.com/hypeserver/react-date-range#readme"&gt;react-date-range&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#code-demo-example" class="anchor"&gt;
  &lt;/a&gt;
  Code Demo / Example
&lt;/h3&gt;

&lt;p&gt;In this short tutorial, I’ll be showing us how we can install, display and get the values of the date that is selected in the DatePicker.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#step-1" class="anchor"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h4&gt;

&lt;p&gt;We will need to install React, this can be done trough Create-React-App. I wrote an article on how to install it &lt;a href="https://thecodeangle.com/angular-vs-react-vs-vue-getting-started/#reactinstallation"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once that is done, we will need to navigate into the path of our folder in our terminal and run the npm command to install our Date-Picker package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i react-date-range
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-2" class="anchor"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#appjs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;app.js&lt;/em&gt;
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-date-range/dist/styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// main style file&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-date-range/dist/theme/default.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// theme css file&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Calendar&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-date-range&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ReactDateRange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSelect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;


  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt; &lt;span class="nx"&gt;Range&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Calendar&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSelect&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ReactDateRange&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first thing we did was import &lt;strong&gt;React&lt;/strong&gt;, the CSS files for the theme and also the necessary component from &lt;strong&gt;react-date-range.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Next, we created a function called &lt;strong&gt;handleSelect&lt;/strong&gt;, that helps log the date values to the console.&lt;/p&gt;

&lt;p&gt;Finally, in our return, our first component called &lt;strong&gt;&lt;/strong&gt; we declared some props and assigned some variables to it. The first is the date prop that takes in a new Date value, second is the &lt;strong&gt;onChange&lt;/strong&gt; prop that takes in the &lt;strong&gt;handleSelect&lt;/strong&gt; variable that logs out the date values to the console.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#result" class="anchor"&gt;
  &lt;/a&gt;
  Result
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QYIVvXXO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QYIVvXXO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-4.gif" alt="Gif showing the result of the above code"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#6-reactdatepicker" class="anchor"&gt;
  &lt;/a&gt;
  6). react-date-picker
&lt;/h2&gt;

&lt;p&gt;This is a  fast, lightweight and easy to style date picker that only provides support for modern browsers. With this date picker you can pick days, months, years, or even decades.&lt;/p&gt;

&lt;p&gt;It is only compatible with  16.3 or later. If you use an older version of React, please refer to the table below to find a suitable React-DateTime-Picker version.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;React version&lt;/th&gt;
&lt;th&gt;Newest compatible React-Date-Picker version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;≥16.3&lt;/td&gt;
&lt;td&gt;latest&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;≥16.0&lt;/td&gt;
&lt;td&gt;7.x&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#brief-overview" class="anchor"&gt;
  &lt;/a&gt;
  Brief Overview:
&lt;/h3&gt;
&lt;h6&gt;
  &lt;a href="#version%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Version  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;8.0.7&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#license%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;License  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;MIT&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#estimatedweekly-downloads%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Estimated-Weekly -Downloads &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;78,779&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#unpackedsize" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Unpacked-size&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;209 kB&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#link-to-repository" class="anchor"&gt;
  &lt;/a&gt;
  Link To Repository
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://github.com/wojtekmaj/react-date-picker#readme"&gt;react-date-picker &lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#code-demo-example" class="anchor"&gt;
  &lt;/a&gt;
  Code Demo / Example
&lt;/h3&gt;

&lt;p&gt;In this short tutorial, I’ll be showing us how we can install, display and get the values of the date that is selected in the DatePicker.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#step-1" class="anchor"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h4&gt;

&lt;p&gt;We will need to install React, this can be done trough Create-React-App. I wrote an article on how to install it &lt;a href="https://thecodeangle.com/angular-vs-react-vs-vue-getting-started/#reactinstallation"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once that is done, we will need to navigate into the path of our folder in our terminal and run the npm command to install our Date-Picker package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i react-date-picker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-2" class="anchor"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#appjs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;app.js&lt;/em&gt;
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;DatePicker&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-date-picker&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ReactDatePicker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dateValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;range&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt; &lt;span class="nx"&gt;Picker&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;DatePicker&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dateValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ReactDatePicker&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the above, we import &lt;strong&gt;React&lt;/strong&gt;, &lt;strong&gt;useState&lt;/strong&gt; and &lt;strong&gt;DatePicker&lt;/strong&gt;, then we created a functional component. Next, we declared a React hook called &lt;strong&gt;useState&lt;/strong&gt; that takes in a variable(value) and a function(onChange).&lt;/p&gt;

&lt;p&gt;The value takes in the result of the current date which will be displayed by default in the input field.&lt;/p&gt;

&lt;p&gt;Next up we created a variable called &lt;strong&gt;dateValue&lt;/strong&gt; . This variable takes in an anonymous function that enables us to log and alert the value of the selected date. Also, the &lt;strong&gt;onChange&lt;/strong&gt; function is called inside the anonymous function, this makes the date values in the input field change based on the date that was selected.&lt;/p&gt;

&lt;p&gt;Lastly, in our return, we pass in the variables to the props inside the &amp;lt;&lt;strong&gt;DatePicker&lt;/strong&gt; /&amp;gt; component.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#result" class="anchor"&gt;
  &lt;/a&gt;
  Result
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X4EzB0-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X4EzB0-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-5.gif" alt="Gif showing results of the above code"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#5-reactbigcalendar" class="anchor"&gt;
  &lt;/a&gt;
  5). react-big-calendar
&lt;/h2&gt;

&lt;p&gt;This is an events calendar component built for React and made for modern browsers (read: IE10+) and uses flexbox over the classic tables-based approach.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;react-big-calendar&lt;/strong&gt; makes use of three options for handling the date formatting and culture localization, depending on your preference of &lt;strong&gt;DateTime&lt;/strong&gt; libraries. You can use either the &lt;a href="https://momentjs.com/"&gt;Moment.js&lt;/a&gt;, &lt;a href="https://github.com/jquery/globalize"&gt;Globalize.js&lt;/a&gt; or &lt;a href="https://date-fns.org/"&gt;date-fns&lt;/a&gt; localizers.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#brief-overview" class="anchor"&gt;
  &lt;/a&gt;
  Brief Overview:
&lt;/h3&gt;
&lt;h6&gt;
  &lt;a href="#version%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Version  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;0.32.0&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#license%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;License  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;MIT&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#estimatedweekly-downloads%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Estimated-Weekly -Downloads &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;126,292&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#unpackedsize" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Unpacked-size&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;1.13 MB&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#link-to-repository" class="anchor"&gt;
  &lt;/a&gt;
  Link To Repository
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://github.com/jquense/react-big-calendar#readme"&gt;react-date-calendar&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#code-demo-example" class="anchor"&gt;
  &lt;/a&gt;
  Code Demo / Example
&lt;/h3&gt;

&lt;p&gt;In this short tutorial, I’ll be showing us how we can install, display and get the values of the date that is selected in the DatePicker.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#step-1" class="anchor"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h4&gt;

&lt;p&gt;We will need to install React, this can be done trough Create-React-App. I wrote an article on how to install it &lt;a href="https://thecodeangle.com/angular-vs-react-vs-vue-getting-started/#reactinstallation"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once that is done, we will need to navigate into the path of our folder in our terminal and run the npm command to install our Date-Picker package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i react-big-calendar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-2" class="anchor"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#appjs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;app.js&lt;/em&gt;
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Calendar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;momentLocalizer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-big-calendar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;moment&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;moment&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-big-calendar/lib/css/react-big-calendar.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ReactBigCalendar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;moment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;en-GB&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;localizer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;momentLocalizer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;moment&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myEventsList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;moment&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toDate&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="na"&gt;end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;moment&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;days&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toDate&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Play Nintendo Switch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="nx"&gt;Big&lt;/span&gt; &lt;span class="nx"&gt;Calendar&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Calendar&lt;/span&gt;
        &lt;span class="nx"&gt;localizer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;localizer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;myEventsList&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ReactBigCalendar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the above, we import &lt;strong&gt;React&lt;/strong&gt;, the necessary dependencies from &lt;strong&gt;react-big-calendar&lt;/strong&gt;, &lt;strong&gt;moment.js&lt;/strong&gt; as well as the needed &lt;strong&gt;CSS&lt;/strong&gt; assets.&lt;/p&gt;

&lt;p&gt;Next up we set the structure for &lt;strong&gt;moment.js&lt;/strong&gt;, after which we declare a variable called &lt;strong&gt;myEventsList&lt;/strong&gt;. This variable contains an array of objects that sets a start-date, end-date as well as the title of the event to take place on those days.&lt;/p&gt;

&lt;p&gt;Finally, we return our &amp;lt;&lt;strong&gt;Calendar&lt;/strong&gt; /&amp;gt; component which contains the props in which we passed the date and also the list of events.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#results" class="anchor"&gt;
  &lt;/a&gt;
  Results
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kq7e4s8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kq7e4s8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-6.gif" alt="Gif showing results of the above code"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#4-reactdatetime" class="anchor"&gt;
  &lt;/a&gt;
  4). react-datetime
&lt;/h2&gt;

&lt;p&gt;This Date-Picker can be used as a date picker, time picker or both at the same time. It is &lt;strong&gt;highly customizable&lt;/strong&gt; and it even allows to edit date's milliseconds.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#brief-overview" class="anchor"&gt;
  &lt;/a&gt;
  Brief Overview:
&lt;/h3&gt;
&lt;h6&gt;
  &lt;a href="#version%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Version  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;3.0.4&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#license%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;License  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;MIT&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#estimatedweekly-downloads%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Estimated-Weekly -Downloads &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;207,604&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#unpackedsize" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Unpacked-size&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;296 kB&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#link-to-repository" class="anchor"&gt;
  &lt;/a&gt;
  Link To Repository
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/react-datetime"&gt;react-datetime&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#code-demo-example" class="anchor"&gt;
  &lt;/a&gt;
  Code Demo / Example
&lt;/h3&gt;

&lt;p&gt;In this short tutorial, I’ll be showing us how we can install, display and get the values of the date that is selected in the DatePicker.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#step-1" class="anchor"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h4&gt;

&lt;p&gt;We will need to install React, this can be done trough Create-React-App. I wrote an article on how to install it &lt;a href="https://thecodeangle.com/angular-vs-react-vs-vue-getting-started/#reactinstallation"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once that is done, we will need to navigate into the path of our folder in our terminal and run the npm command to install our Date-Picker package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i react-datetime
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-2" class="anchor"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#appjs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;app.js&lt;/em&gt;
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-datetime/css/react-datetime.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Datetime&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-datetime&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ReactDateTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;setDateTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dateValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toDate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dateValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dateValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt; &lt;span class="nx"&gt;Time&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Datetime&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setDateTime&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setDateTime&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ReactDateTime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we import &lt;strong&gt;React&lt;/strong&gt;, the &lt;strong&gt;CSS&lt;/strong&gt; assets and &lt;strong&gt;Datetime&lt;/strong&gt; from the &lt;strong&gt;react-datetime&lt;/strong&gt; library.&lt;/p&gt;

&lt;p&gt;Inside our functional component, we created a variable called &lt;strong&gt;setDateTime&lt;/strong&gt;. This variable takes in an anonymous function that will display the values of the date both inside the browser console and the alert box.&lt;/p&gt;

&lt;p&gt;Finally, in our return, we create our &amp;lt;&lt;strong&gt;Datetime&lt;/strong&gt; /&amp;gt; component and assign the necessary props to it, which makes our date-picker functional.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#results" class="anchor"&gt;
  &lt;/a&gt;
  Results
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6d7c1neW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6d7c1neW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-7.gif" alt="Gif showing results of the above code"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-reactdaypicker" class="anchor"&gt;
  &lt;/a&gt;
  3). react-day-picker
&lt;/h2&gt;

&lt;p&gt;This is a date-picker that is highly customizable, localizable, with ARIA support, no external dependencies.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#brief-overview" class="anchor"&gt;
  &lt;/a&gt;
  Brief Overview:
&lt;/h3&gt;
&lt;h6&gt;
  &lt;a href="#version%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Version  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;7.4.8&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#license%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;License  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;MIT&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#estimatedweekly-downloads%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Estimated-Weekly -Downloads &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;454,148&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#unpackedsize" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Unpacked-size&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;686 kB&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#link-to-repository" class="anchor"&gt;
  &lt;/a&gt;
  Link To Repository
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://github.com/gpbl/react-day-picker"&gt;react-day-picker&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#code-demo-example" class="anchor"&gt;
  &lt;/a&gt;
  Code Demo / Example
&lt;/h3&gt;

&lt;p&gt;In this short tutorial, I’ll be showing us how we can install, display and get the values of the date that is selected in the DatePicker.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#step-1" class="anchor"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h4&gt;

&lt;p&gt;We will need to install React, this can be done trough Create-React-App. I wrote an article on how to install it &lt;a href="https://thecodeangle.com/angular-vs-react-vs-vue-getting-started/#reactinstallation"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once that is done, we will need to navigate into the path of our folder in our terminal and run the npm command to install our Date-Picker package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i react-day-picker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-2" class="anchor"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#appjs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;app.js&lt;/em&gt;
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;DayPickerInput&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-day-picker/DayPickerInput&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-day-picker/lib/style.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ReactDayPicker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onDayChangeInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;day&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;DayPickerInput&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h3&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;DayPickerInput&lt;/span&gt;
        &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DD/MM/YYYY&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DD/MM/YYYY&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;onDayChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onDayChangeInput&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ReactDayPicker&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the above code, we import &lt;strong&gt;React&lt;/strong&gt;, the &lt;strong&gt;DayPickerInput&lt;/strong&gt; and the &lt;strong&gt;CSS&lt;/strong&gt; assets.&lt;/p&gt;

&lt;p&gt;In our functional component, we created a variable called &lt;strong&gt;onDayChangeInput&lt;/strong&gt;. Inside this variable is an anonymous function that logs the date valued to the console as well as showing an alert box.&lt;/p&gt;

&lt;p&gt;Then finally, in our return, we include the props in our &amp;lt;&lt;strong&gt;DayPickerInput&lt;/strong&gt; /&amp;gt; component.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#result" class="anchor"&gt;
  &lt;/a&gt;
  Result
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tQovgzyk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tQovgzyk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-8.gif" alt="Gif showing the result of the above code"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-materialuipickers" class="anchor"&gt;
  &lt;/a&gt;
  2). @material-ui/pickers
&lt;/h2&gt;

&lt;p&gt;This date-picker is an accessible, customizable, delightful date &amp;amp; time pickers for React. It is one of the most high-quality date-picker out there.&lt;/p&gt;

&lt;p&gt;It is based on Material-UI, the world’s most popular React component library.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#brief-overview" class="anchor"&gt;
  &lt;/a&gt;
  Brief Overview:
&lt;/h3&gt;
&lt;h6&gt;
  &lt;a href="#version%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Version  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;3.2.10&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#license%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;License  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;MIT&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#estimatedweekly-downloads%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Estimated-Weekly -Downloads &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;608,421&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#unpackedsize" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Unpacked-size&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;1.49 MB&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#link-to-repository" class="anchor"&gt;
  &lt;/a&gt;
  Link To Repository
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://github.com/mui-org/material-ui-pickers"&gt;material-ui pickers&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#code-demo-example" class="anchor"&gt;
  &lt;/a&gt;
  Code Demo / Example
&lt;/h3&gt;

&lt;p&gt;In this short tutorial, I’ll be showing us how we can install, display and get the values of the date that is selected in the DatePicker.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#step-1" class="anchor"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h4&gt;

&lt;p&gt;We will need to install React, this can be done trough Create-React-App. I wrote an article on how to install it &lt;a href="https://thecodeangle.com/angular-vs-react-vs-vue-getting-started/#reactinstallation"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once that is done, we will need to navigate into the path of our folder in our terminal and run the npm command to install our Date-Picker package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i @material-ui/pickers
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-2" class="anchor"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#appjs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;app.js&lt;/em&gt;
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;DateFnsUtils&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@date-io/date-fns&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// choose your lib&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;DatePicker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;TimePicker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;DateTimePicker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;MuiPickersUtilsProvider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@material-ui/pickers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MaterialUiPickers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;selectedDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleDateChange&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dateChangeValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;handleDateChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dateValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dateValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dateValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Material&lt;/span&gt; &lt;span class="nx"&gt;UI&lt;/span&gt; &lt;span class="nx"&gt;Pickers&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MuiPickersUtilsProvider&lt;/span&gt; &lt;span class="nx"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;DateFnsUtils&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;DatePicker&lt;/span&gt;
          &lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;static&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;selectedDate&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dateChangeValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;br&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TimePicker&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;selectedDate&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dateChangeValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;DateTimePicker&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;selectedDate&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;dateChangeValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/MuiPickersUtilsProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MaterialUiPickers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above shows how we import the necessary dependencies to run the project.&lt;/p&gt;

&lt;p&gt;Then in our functional component, we created a &lt;strong&gt;useState&lt;/strong&gt; hook that has a variable and a function called &lt;strong&gt;selectedDate&lt;/strong&gt; and &lt;strong&gt;handleDateChange&lt;/strong&gt; respectively.&lt;/p&gt;

&lt;p&gt;Next, we created a variable called &lt;strong&gt;dateChangeValue&lt;/strong&gt; that holds an anonymous function. Inside this function we do three things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  We call the &lt;strong&gt;handleDateChange&lt;/strong&gt; function from our &lt;strong&gt;useSate&lt;/strong&gt;, this helps us update the change event on the date-picker, shown on the page.&lt;/li&gt;
&lt;li&gt;  Next up we log and alert the value of the date that is clicked on the date-picker.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally. in our return, we have a &amp;lt;&lt;strong&gt;DatePicker&lt;/strong&gt; /&amp;gt;,&amp;lt;&lt;strong&gt;TimePicker&lt;/strong&gt; /&amp;gt; and a &amp;lt;&lt;strong&gt;DateTimePicker&lt;/strong&gt; /&amp;gt;. Each of these components takes in props like &lt;strong&gt;value&lt;/strong&gt; and &lt;strong&gt;onChange&lt;/strong&gt; that have the appropriate variables assigned to them.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#result" class="anchor"&gt;
  &lt;/a&gt;
  Result
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l-Io8uO---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l-Io8uO---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-9.gif" alt="Gif showing the result of the code above"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#possible-errors" class="anchor"&gt;
  &lt;/a&gt;
  Possible Errors
&lt;/h4&gt;

&lt;p&gt;There is a possibility you run into this error: &lt;strong&gt;Module not found: Can't resolve '@date-io/date-fns'&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When that happens, you can run the following commands to solve the issue:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm i --save date-fns@next @date-io/date-fns@1.x
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-react-date-picker" class="anchor"&gt;
  &lt;/a&gt;
  1). React Date Picker
&lt;/h2&gt;

&lt;p&gt;This is a simple and reusable Datepicker component made for React. It is one of the most popular packages around the web, with hundreds of thousands of weekly downloads.&lt;/p&gt;

&lt;p&gt;This date picker relies on &lt;a href="https://date-fns.org/v2.0.0-alpha.18/docs/I18n"&gt;date-fns internationalization&lt;/a&gt; to localize its display components. By default, the date picker will use the locale globally set, which is English.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#brief-overview" class="anchor"&gt;
  &lt;/a&gt;
  Brief Overview:
&lt;/h3&gt;

&lt;h6&gt;
  &lt;a href="#version%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Version  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;3.6.0&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#license%C2%A0%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;License  &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;MIT&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#estimatedweekly-downloads%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Estimated-Weekly -Downloads &lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;835,537&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#unpackedsize" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Unpacked-size&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;509 kB&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#link-to-repository" class="anchor"&gt;
  &lt;/a&gt;
  Link To Repository
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://github.com/Hacker0x01/react-datepicker"&gt;react-datepicker&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-demo-example" class="anchor"&gt;
  &lt;/a&gt;
  Code Demo / Example
&lt;/h3&gt;

&lt;p&gt;In this short tutorial, I’ll be showing us how we can install, display and get the values of the date that is selected in the DatePicker.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-1" class="anchor"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h4&gt;

&lt;p&gt;We will need to install React, this can be done trough Create-React-App. I wrote an article on how to install it &lt;a href="https://thecodeangle.com/angular-vs-react-vs-vue-getting-started/#reactinstallation"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once that is done, we will need to navigate into the path of our folder in our terminal and run the npm command to install our Date-Picker package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i react-datepicker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#step-2" class="anchor"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#appjs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;app.js&lt;/em&gt;
&lt;/h3&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;DatePicker&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-datepicker&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-datepicker/dist/react-datepicker.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ReactDatePicker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;startDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setStartDate&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getDateValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setStartDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt; &lt;span class="nx"&gt;Picker&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;DatePicker&lt;/span&gt;
        &lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;startDate&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getDateValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ReactDatePicker&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above we import all the necessary dependencies. Then in the functional component, we create a &lt;strong&gt;useState&lt;/strong&gt; hook. This hook takes in a variable and a function called &lt;strong&gt;startDate&lt;/strong&gt; and &lt;strong&gt;setStartDate&lt;/strong&gt; respectively.&lt;/p&gt;

&lt;p&gt;Next, we create a variable with an anonymous function called &lt;strong&gt;getDateValue.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this variable, the &lt;strong&gt;setStartDate&lt;/strong&gt; function from the &lt;strong&gt;useState&lt;/strong&gt; is updated with the value of the current date as they change on the page. We also log and alert the date values on the console.&lt;/p&gt;

&lt;p&gt;Finally in our return, we declare our &amp;lt;&lt;strong&gt;DatePicker&lt;/strong&gt; /&amp;gt; component and assign the necessary props to it.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#result" class="anchor"&gt;
  &lt;/a&gt;
  Result
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6oe5cu32--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-10.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6oe5cu32--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thecodeangle.com/wp-content/uploads/2021/03/date-10.gif" alt="Gif showing result of the code above"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So that is it for the top Date pickers in React. Date pickers are very popular and important components in the Frontend Development world. It is really great that we have so many Date Pickers out there, and we can easily implement anyone that seems like the right fit for our project.&lt;/p&gt;

&lt;p&gt;If you have any difficulties in implementing any of the Date Picker discussed above, feel free to drop your issue in the comment section.&lt;/p&gt;

&lt;p&gt;Also if you are looking for an open-source project to contribute to, a lot of the above Date Pickers provide an excellent opportunity for you to do so.&lt;/p&gt;

&lt;p&gt;Also, &lt;a href="https://github.com/desoga10/date-pickers"&gt;here&lt;/a&gt; is the GitHub link to the code examples used in the article.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Subscribe to my&lt;/em&gt; &lt;a href="https://www.youtube.com/channel/UChi_aILZkMMx8_KlVAsbI7g"&gt;&lt;em&gt;Youtube Channel&lt;/em&gt;&lt;/a&gt; &lt;em&gt;for more tutorials on web development content.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Events and Event Emitter in Node.js </title>
      <author>Ditikrushna Giri</author>
      <pubDate>Wed, 10 Mar 2021 11:45:27 +0000</pubDate>
      <link>https://dev.to/ditikrushna/events-and-event-emitter-in-node-js-2ek5</link>
      <guid>https://dev.to/ditikrushna/events-and-event-emitter-in-node-js-2ek5</guid>
      <description>&lt;p&gt;One of the core concepts of a node is the concept of events. In fact, a lot of nodes' core functionality is based on this concept of events.&lt;/p&gt;

&lt;p&gt;Definition: &lt;br&gt;
The event is basically a signal that indicates that something has happened in our applications.&lt;/p&gt;

&lt;p&gt;Example :&lt;br&gt;
In node, we have a class called HTTP that we can use to build a web server so we listen on a given port, and every time we receive a request on that port that HTTP class raises an event. Now our job is to respond to that event which basically involves reading that request and returning the right response. &lt;/p&gt;

&lt;p&gt;Let's see how we can work with the event emitter: &lt;/p&gt;

&lt;p&gt;Step-1: &lt;br&gt;
 let's load the events modules : &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const  EventEmitter  =  require('events');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; In terms of naming the first letter of every word in uppercase this is a convention that indicates that this event emitter is a class, not a function or simple value.&lt;/p&gt;

&lt;p&gt;When we call the &lt;code&gt;require&lt;/code&gt; function we get the event emitter class. Now, we need to create an instance of this class. And that can be done with the following piece of code &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const emitter = new EventEmitter() ;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This emitter has a bunch of methods use this &lt;a href="https://nodejs.org/api/events.html#events_class_eventemitter"&gt;link&lt;/a&gt; for all list of events that offer emitter class. &lt;/p&gt;

&lt;p&gt;Even though we have more than ten methods most of the time we use only two of these methods one is &lt;strong&gt;emit&lt;/strong&gt; that we use to raise an event. If you do not know the meaning of the &lt;strong&gt;emit&lt;/strong&gt;: means making noise or produce something in our case we are going to making noise in our application. We are signaling that an event has happened.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;emitter.emit('')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;We pass an argument that is the name of the event let say &lt;strong&gt;messageLogged&lt;/strong&gt; in the future we are going to extend our loger module and every time we log a message we are going to raise an event called &lt;strong&gt;message logged&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Now , if we run the following codes nothing is going to append : &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const EventEmitter = require('events')
const emitter = new EventEmitter();
emitter.emit('messageLogged');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;because we have raised an event here but nowhere in our application we have registered a listener that is interested in that event. &lt;br&gt;
&lt;strong&gt;Listener:&lt;/strong&gt;  is a function that will be called when that event is raised. &lt;/p&gt;

&lt;p&gt;Let's register a listener that will be called when the message log event is raised for that we will use the &lt;strong&gt;on&lt;/strong&gt; method and that takes two arguments first one will be the name of the event in our case &lt;strong&gt;messageLogged&lt;/strong&gt; and the second one is a callback function or the actual listener.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const EventEmitter = require('events')
const emitter = new EventEmitter();
//Register a listener 
emitter.on('messageLogged',function(){
  console.log("Listener is called")
});
emitter.emit('messageLogged');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The order is important here if you register listener after calling the &lt;strong&gt;emit&lt;/strong&gt; method nothing would have happened because when we call the &lt;strong&gt;emit&lt;/strong&gt; method the &lt;strong&gt;emitter&lt;/strong&gt; iterates over all the registered listeners and calls them synchronously. &lt;/p&gt;

&lt;p&gt;This is the basis of raising events and handling them using event emitter class. &lt;/p&gt;

&lt;p&gt;Happy Coding ;) &lt;/p&gt;

</description>
      <category>node</category>
      <category>backend</category>
      <category>eventemitter</category>
      <category>basic</category>
    </item>
  </channel>
</rss>
