<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Day 54 of 100 Days of Code &amp; Scrum: Ghost on Heroku and Next.js on Vercel</title>
      <author>Rammina</author>
      <pubDate>Fri, 03 Dec 2021 09:58:56 +0000</pubDate>
      <link>https://dev.to/rammina/day-54-of-100-days-of-code-scrum-ghost-on-heroku-and-nextjs-on-vercel-2gj9</link>
      <guid>https://dev.to/rammina/day-54-of-100-days-of-code-scrum-ghost-on-heroku-and-nextjs-on-vercel-2gj9</guid>
      <description>&lt;p&gt;Greetings, everyone!&lt;/p&gt;

&lt;p&gt;Today, I started working on my Ghost blog setup. After consulting various resources online, I will most likely use a combination of Next.js frontend deployed on Vercel and Ghost headless CMS deployed on Heroku for my blog. It's a free solution that can scale even with significant traffic increase (I can just use CDN in the future). I'm pretty excited for it!&lt;/p&gt;

&lt;p&gt;Anyway, let's move on to my daily report!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;I finally deployed my &lt;a href="https://www.rammina.com/"&gt;business website&lt;/a&gt;. I think it's satisfactory for now despite being simple.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;Here are the things I learned and worked on today:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#company-website"&gt;
  &lt;/a&gt;
  Company Website
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;updated the contact form validation to require proper email format.&lt;/li&gt;
&lt;li&gt;added an input field that is visible to bots only, to help prevent spam.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#ghost"&gt;
  &lt;/a&gt;
  Ghost
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;read a lot of the documentations for getting started.&lt;/li&gt;
&lt;li&gt;learned how to deploy an initial setup for a Ghost blog locally and on Heroku.&lt;/li&gt;
&lt;li&gt;learned about Jamstack for Next.js + Ghost blog setup.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  Scrum
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I did some practice flashcards for Scrum.&lt;/li&gt;
&lt;li&gt;reviewed some of the things I've learned before.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for reading and continuing to support me!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" alt="Rammina Thank You Banner" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/docs/deployment"&gt;Deployment | Next.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scrum.org/pathway/scrum-master"&gt;Scrum Master learning pathway | Scrum.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhail Lapshin's Scrum Quizzes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#other-media"&gt;
  &lt;/a&gt;
  Other Media
&lt;/h3&gt;

&lt;p&gt;Feel free to reach out to me in other media!&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://www.rammina.com/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BK-zilS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1638444046/rammina-button-128_x9ginu.png" alt="Rammina Logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://twitter.com/RamminaR"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C341ckO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636792959/twitter-logo_laoyfu_pdbagm.png" alt="Twitter logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://github.com/Rammina"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u4ZlXeay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636795051/GitHub-Emblem2_epcp8r.png" alt="Github logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>The 5 Most Popular Programming Languages</title>
      <author>Mark Vassilevskiy</author>
      <pubDate>Fri, 03 Dec 2021 09:53:13 +0000</pubDate>
      <link>https://dev.to/markfusion/the-5-most-popular-programming-languages-418f</link>
      <guid>https://dev.to/markfusion/the-5-most-popular-programming-languages-418f</guid>
      <description>&lt;p&gt;What are the best programming languages for your career? Programming is becoming one of the most in-demand careers in America. The Bureau of Labor Statistics predicts that by 2020, there will be over 1 million more computer programmer jobs than American college graduates to fill them. Programming has become a great way to make money and have an exciting career! With so many options out there, it can be hard to know which language you should learn first. For this blog post, we will look at 5 different popular programming languages and discuss what they're used for as well as why they're so popular among coders today.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  Python
&lt;/h2&gt;

&lt;p&gt;Python is one of the most popular languages in the whole world, so you can ask me why? Firstly, because of its simplicity and easily readable syntax. Also, with Python, you can build some cool stuff like Telegram/Discord Bots, Calculator, Basic App, and probably even a game. Especially it unleashes his potential in Computer Science and AI spheres. There're thousands if not millions of libraries and frameworks that will help you to make actually everything that you want to do. By the way, Python Programmers are getting pretty good salaries and feedback from it. &lt;/p&gt;

&lt;p&gt;In a Nutshell, Python is a great language for beginners as it's easy to start with and read, but also powerful enough to build big projects on it! With the biggest community in the Discord and probably not only&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h2&gt;

&lt;p&gt;JavaScript is the only Programming Language that is working on the Web and not only. With it, you can do actually everything that you want to. For Instance, make your website by using Front-end frameworks like React or Angular and Back-end by Node.js. You can write a mobile app for Android and iOS at the same by using ReactNative. Also, there's even a TensorFlow library if you want to start doing some Neural Networks. &lt;/p&gt;

&lt;p&gt;By the way, JavaScript probably has the largest community after Python and it's also a great direction if you're a beginner. Especially I think that JS is much better than Python if you don't wanna do some hard AI algorithms, however, as I said earlier even on JS you can do it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#java"&gt;
  &lt;/a&gt;
  Java
&lt;/h2&gt;

&lt;p&gt;One of the best things about Java is that you can do pretty much everything - from creating Android apps, Desktop Apps (using Eclipse), Games, or even Web-based Programming like JSPs! And believe me, if I say that there're tons of tutorials out there where people share their experience in doing something cool on this particular platform. You just have to find them all by yourself :) In general, one thing which makes java so popular among newbies is its ease-of-use and having some kind of "universal" way how to use syntax every time. Also, Java offers great tools for debugging, which makes Java Programming career more stable in general.&lt;/p&gt;

&lt;p&gt;Java is one of the most popular programming languages because it's basically everywhere! It runs on your smartphone, desktop PC, and even at the bank - when you are looking to withdraw some money or pay with a credit card. So what else do you need? Just start coding something interesting today! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#swift"&gt;
  &lt;/a&gt;
  Swift
&lt;/h2&gt;

&lt;p&gt;Is Swift really that good as they say? Well, let me tell you this: if there're programmers who are working on iOS apps right now using Objective-C language.. their next projects will probably be written in Swift. Why? Because its syntax is much cleaner than before and easy to understand. Also, Apple has recently announced their plans about making Swift Programming the main language for iOS and macOS Programming. Swift is widely used by Apple engineers in all kinds of projects - from chatbots to powering up their payment systems like Paypal (for example) or Venmo.&lt;/p&gt;

&lt;p&gt;I still think that this programming language has its value today because there're so many people who use it! And believe me, when someone becomes an expert in one thing he can do everything what they want later. Anyway, if you have some plans about how to make money online without coding at all, well maybe Swift Programming will work just great for you!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#c"&gt;
  &lt;/a&gt;
  C++
&lt;/h2&gt;

&lt;p&gt;The most popular programming language for years due to its stability and high-speed execution. C++ Programming is famous because it's used in Operating Systems like Windows, MacOS, and Linux (just some examples). Also, the majority of games on Steam are written on this particular platform or at least they use a huge amount of code from the Engine that was written on C/C++ Programming Language. So imagine what kind of Career you can get if you master such a tool? &lt;/p&gt;




&lt;p&gt;In conclusion, these were just some options among many others out there! However I hope that after reading all this information about different languages it will become more clear how exactly programmers make money online without coding skills nowadays. Just pick one which sounds interesting to you and start your Programming Career as soon as possible!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>python</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>4 ways to create modern GUI in python in the easiest way possible</title>
      <author>Yash Makan</author>
      <pubDate>Fri, 03 Dec 2021 09:37:20 +0000</pubDate>
      <link>https://dev.to/yash_makan/4-ways-to-create-modern-gui-in-python-in-easiest-way-possible-5e0e</link>
      <guid>https://dev.to/yash_makan/4-ways-to-create-modern-gui-in-python-in-easiest-way-possible-5e0e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hi developers, I am Yash Makan and today we are going to discuss how can you make beautiful UI applications in python. I know that this sounds a little weird when I say "beautiful UI" together in context with python as I personally feel that the standard Tkinter library is not good enough to develop amazing UI. Today we will cover 4 different ways to make modern applications in python so without any further ado let's begin,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--52xLUZel--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.giphy.com/media/3BUYbmXltgQ4zu0Tv5/giphy.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--52xLUZel--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.giphy.com/media/3BUYbmXltgQ4zu0Tv5/giphy.webp" alt="https://i.giphy.com/media/3BUYbmXltgQ4zu0Tv5/giphy.webp" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#before"&gt;
  &lt;/a&gt;
  Before
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NKunCO25--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cj3guv1g8ku69j50la5v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NKunCO25--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cj3guv1g8ku69j50la5v.png" alt="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cj3guv1g8ku69j50la5v.png" width="416" height="292"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#after"&gt;
  &lt;/a&gt;
  After
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iLLekv5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7a5f3tplukh7tucr5blm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iLLekv5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7a5f3tplukh7tucr5blm.png" alt="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7a5f3tplukh7tucr5blm.png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-using-eel"&gt;
  &lt;/a&gt;
  1. Using eel
&lt;/h2&gt;

&lt;p&gt;The first method in our list is for developers who know HTML &amp;amp; CSS(if you don't then I highly recommend it too) with the basics of javascript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h3&gt;

&lt;p&gt;Basically, you are going to develop the frontend using HTML and CSS and write your computation or backend part in python. nd eel act as a bridge between python and javascript and pass data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KntlxLX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d2irr9ptvtvo4c1pslxv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KntlxLX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d2irr9ptvtvo4c1pslxv.png" alt="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d2irr9ptvtvo4c1pslxv.png" width="880" height="535"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install Eel
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#directory-structure"&gt;
  &lt;/a&gt;
  Directory Structure
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;└── Folder
    ├── templates
    |   ├── index.html
    |   ├── main.js
    |   └── style.css
    └── main.py

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#cat-mainpy"&gt;
  &lt;/a&gt;
  cat main.py
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;eel&lt;/span&gt;

&lt;span class="c1"&gt;# name of folder where the html, css, js, image files are located
&lt;/span&gt;&lt;span class="n"&gt;eel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'templates'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;eel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expose&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="c1"&gt;# 1000 is width of window and 600 is the height
&lt;/span&gt;&lt;span class="n"&gt;eel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'index.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#cat-mainjs"&gt;
  &lt;/a&gt;
  cat main.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
    &lt;span class="nx"&gt;eel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// call the demo function which we have created in the main.py file&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;abc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#cat-indexhtml"&gt;
  &lt;/a&gt;
  cat index.html
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;sample&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/eel.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/scrip&lt;/span&gt;&lt;span class="err"&gt;t
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text/javascript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;main.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!--
have to call compute() from here for example when user clicks any button or something like that.
--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#github-reference"&gt;
  &lt;/a&gt;
  Github Reference
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;https://github.com/ChrisKnott/Eel&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-figma-and-python"&gt;
  &lt;/a&gt;
  2. Figma and Python
&lt;/h2&gt;

&lt;p&gt;Alright, you must be thinking that what is the combination between Figma and python? and Figma is a UI development tool, not a library written in python... Yeah! I know you are right, but let's keep reading the post.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install tkdesigner
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h3&gt;

&lt;p&gt;The only thing the user needs to do is design an interface with Figma, and then paste the Figma file URL and API token into Tkinter Designer. Tkinter Designer will automatically generate all the code and images required to create the GUI in Tkinter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cnhjcCuJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/42001064/119832620-fb88c980-bf1b-11eb-8e9b-4affe7b92ba2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cnhjcCuJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/42001064/119832620-fb88c980-bf1b-11eb-8e9b-4affe7b92ba2.jpg" alt="https://user-images.githubusercontent.com/42001064/119832620-fb88c980-bf1b-11eb-8e9b-4affe7b92ba2.jpg" width="750" height="1686"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;For complete procedure do watch [this](https://www.youtube.com/watch?v=mFjE2-rbpm8&amp;amp;t=66s&amp;amp;ab_channel=Parthjadhav) video on youtube from Parth Jadhav
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#github-reference"&gt;
  &lt;/a&gt;
  Github Reference
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://github.com/ParthJadhav/Tkinter-Designer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-pywebview"&gt;
  &lt;/a&gt;
  3. Pywebview
&lt;/h2&gt;

&lt;p&gt;pywebview is a lightweight cross-platform wrapper around a webview component that allows displaying HTML content in its own native GUI window. pywebview is created by &lt;a href="https://github.com/r0x0r/"&gt;Roman Sirokov&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install pywebview
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#sample-code"&gt;
  &lt;/a&gt;
  Sample code
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import webview

if __name__ == '__main__':
    window = webview.create_window('Load HTML Example', 'index.html')
    webview.start(window)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#github-reference"&gt;
  &lt;/a&gt;
  Github Reference
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://github.com/r0x0r/pywebview/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-pyqt5"&gt;
  &lt;/a&gt;
  4. PyQT5
&lt;/h2&gt;

&lt;p&gt;PyQt is a great library to develop modern flat GUI in python. You can create applications with coding in python which can be a little difficult and overwhelming but as we are covering the easiest way possible you can even make GUI with a drag-drop builder known as PyQt5Designer. It is a great way to build applications by generating a .ui file which is the drag-drop program and then later you can convert this .ui file to a .py file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install PyQt5Designer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h2&gt;

&lt;p&gt;After installation designer will be installed in your system. Simply type &lt;code&gt;designer&lt;/code&gt; in your command prompt and designer.exe will pop up. It will look something like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sa5TbJCN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s76hssmdz999arj3e72w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sa5TbJCN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s76hssmdz999arj3e72w.png" alt="PyQT5Designer" width="880" height="468"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now here you can drag-drop elements in the canvas. After designing your application simply export it as a .ui file. Later you can convert this .ui file in .py file using,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pyuic5 -x [NAME_OF_UI_FILE].ui [NAME_OF_PY_FILE].py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So you see, here are the 4 easy ways to make impressive-looking GUI in python. I hope you liked my blog and if this article adds any value then it would be great if you leave a like and make sure to bookmark it as well. Also, share the post with your friends so that they too can learn something new(don't be selfish...). Also, you can follow me on &lt;a href="https://twitter.com/Yash_Makan"&gt;Twitter&lt;/a&gt; for more tech and python related content. Hope to be in your mind again, till then b-bye!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ldo5yJZu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--H3ignATo--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://media4.giphy.com/media/w89ak63KNl0nJl80ig/giphy.gif%253Fcid%253Decf05e478g5vv310sx1w5035xnuj17tgxbdtlcpcvas5fsoj%2526rid%253Dgiphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ldo5yJZu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--H3ignATo--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://media4.giphy.com/media/w89ak63KNl0nJl80ig/giphy.gif%253Fcid%253Decf05e478g5vv310sx1w5035xnuj17tgxbdtlcpcvas5fsoj%2526rid%253Dgiphy.gif" alt="Bye Bye" width="480" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-articles"&gt;
  &lt;/a&gt;
  Other Articles
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/4-best-python-web-app-hosting-services-for-freewith-complete-process-57nb"&gt;4 Free hosting platforms for python web app with step-by-step process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/18-python-one-liners-that-will-speed-up-your-coding-process-21md"&gt;18 Python one-liners that will speed up your coding process.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/ai-bot-that-could-answer-any-questions-asked-gmn"&gt;AI bot that could answer your questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/yash_makan/generate-your-own-favourite-tv-episode-using-python-1pb3"&gt;Generate your own favourite TV episode using python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#socials"&gt;
  &lt;/a&gt;
  Socials
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.yashmakan.co.in/"&gt;My Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Yash_Makan"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.yashmakan.co.in/banner"&gt;Banner&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>design</category>
      <category>beginners</category>
      <category>figma</category>
    </item>
    <item>
      <title>Thank you, Apple, for hijacking port 5000 😣</title>
      <author>Chris Bongers</author>
      <pubDate>Fri, 03 Dec 2021 09:23:50 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/thank-you-apple-for-hijacking-port-5000-nm</link>
      <guid>https://dev.to/dailydevtips1/thank-you-apple-for-hijacking-port-5000-nm</guid>
      <description>&lt;p&gt;You might have already upgraded to Mac OS Monterey. If not, there might be an unpleasant surprise awaiting you.&lt;/p&gt;

&lt;p&gt;For me, it was running the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And getting a message stating port 5000 is already in use...&lt;/p&gt;

&lt;p&gt;It took me a good couple of minutes to find out no other application was using this port, and I was baffled at this point.&lt;/p&gt;

&lt;p&gt;Surely all I did was upgrade to Monterey...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reopening-port-5000-on-mac-os-monterey"&gt;
  &lt;/a&gt;
  Re-opening port 5000 on Mac OS Monterey
&lt;/h2&gt;

&lt;p&gt;After doing some research, I did a portscan and noticed "AirPlay Receiver" was using this port.&lt;/p&gt;

&lt;p&gt;That didn't sound like anything I made.&lt;br&gt;
Did some more research to find out that the AirPlay receiver is on by default.&lt;/p&gt;

&lt;p&gt;To re-enable port 5000, you can simply turn off this checkbox.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fimsbWqp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637558048297/YHaewxiZ2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fimsbWqp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637558048297/YHaewxiZ2.png" alt="AirPlay Receiver in macOS Monterey listening on port 5000" width="880" height="740"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find this checkbox in &lt;code&gt;Settings&lt;/code&gt; &amp;gt; &lt;code&gt;Sharing&lt;/code&gt; &amp;gt; &lt;code&gt;AirPlay Receiver&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is not a new thing though, Apple has been using port 5000 for AirPlay since 2004.&lt;br&gt;
The only new part is the introduction to having a Mac listening to AirPlay, which, as mentioned, uses port 5000.&lt;/p&gt;

&lt;p&gt;If you wish to use AirPlay on your Mac, I'd suggest switching your development to a different port.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>We open-sourced our Node.js API Generator</title>
      <author>DhiWise</author>
      <pubDate>Fri, 03 Dec 2021 09:06:31 +0000</pubDate>
      <link>https://dev.to/dhiwise/we-open-sourced-our-nodejs-api-generator-5b1f</link>
      <guid>https://dev.to/dhiwise/we-open-sourced-our-nodejs-api-generator-5b1f</guid>
      <description>&lt;p&gt;Last week we open-sourced our entire Node.js API generator along with the front-end React app that helps to build it. Check our &lt;a href="https://github.com/dhiwise/dhiwise-nodejs/"&gt;Repository here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vPC6Inqt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2560/1%2AJoazw5NqPtHRCbr4Nif7fA.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vPC6Inqt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2560/1%2AJoazw5NqPtHRCbr4Nif7fA.jpeg" alt="" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post is going to tell you about who we are, what is Node.js API Generator &amp;amp; its features, why we open-sourced it, and how we have made this project open for external contributions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-are-we"&gt;
  &lt;/a&gt;
  Who are we?
&lt;/h2&gt;

&lt;p&gt;At &lt;a href="https://hubs.la/H0_-wmC0"&gt;DhiWise&lt;/a&gt;, our mission is to build the most intelligent programming platform in the world. We &lt;strong&gt;automate the developer’s repetitive tasks&lt;/strong&gt; so that they can focus on what matters the most.&lt;/p&gt;

&lt;p&gt;With &lt;a href="https://hubs.la/H0_-wmC0"&gt;DhiWise&lt;/a&gt;, developers can fully go on to an autopilot mode, where one can take a nap or walk while &lt;a href="https://hubs.la/Q0102mTP0"&gt;DhiWise &lt;/a&gt;generates production-ready code for you. Yeah, just like Tesla.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--winjNr66--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AdvX7PFawX1jyGmeWEK-zxw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--winjNr66--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AdvX7PFawX1jyGmeWEK-zxw.gif" alt="" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-basically-is-the-nodejs-api-generator"&gt;
  &lt;/a&gt;
  So what basically is the Node.js API Generator?
&lt;/h2&gt;

&lt;p&gt;Imagine you want to bake a cake and you have all the raw materials you need such as flour, baking powder, eggs. Now, you give us those materials and we will bake you the ready-to-serve cake of your choice.&lt;/p&gt;

&lt;p&gt;With this builder’s context, with just minimal inputs like models, attributes, ORM type, platforms, routes, role access, authentication, this builder is going to build backend CRUD APIs along with other essential features to boost developers’ productivity time by twofold.&lt;/p&gt;

&lt;p&gt;Most importantly, the Node.js API generator gives developers clean, scalable, human-readable code with complete ownership. The code it generates is bug-free and easily customizable, not to forget in one of the two different architectures of your choice. (Clean code &amp;amp; MVC)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;User Authentication&lt;/strong&gt; and Authorization (using Passport)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Social Login&lt;/strong&gt; APIs&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CRUD APIs with middleware and attributes’ selection&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;List API with &lt;strong&gt;pagination, populate, and queries&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Upload attachment API&lt;/strong&gt; with validation and &lt;strong&gt;storage options&lt;/strong&gt; like (Local server or S3 public/private bucket)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Role-Permission&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hooks and Indexes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Policy/middleware&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;API &lt;strong&gt;request body validation&lt;/strong&gt; (Using joi)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;API response with standard &lt;strong&gt;error and message pattern&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test cases&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Postman collection and API documentation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Constants&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Environment Variables for development, QA, and production&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Custom API setup&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Multiple Platform selection&lt;/strong&gt; and User type configuration&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MVC and Clean-code architecture&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Supported Databases&lt;br&gt;
a. MongoDB&lt;br&gt;
b. SQL Server&lt;br&gt;
c. MYSQL&lt;br&gt;
d. PostgreSQL&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#why-did-we-opensource-it"&gt;
  &lt;/a&gt;
  Why did we open-source it?
&lt;/h2&gt;

&lt;p&gt;Our main focus is to empower the developer community to be more productive and try to automate their repetitive tasks so that in their remaining time they can add any new features or fix any bugs in this repository to make it available to their entire community.&lt;/p&gt;

&lt;p&gt;It may sound cheesy but by open-sourcing the platform we intend to have open communication with DhiWise community in order to build something epic.&lt;/p&gt;

&lt;p&gt;Also, we wouldn’t want to stop users who are trying to self-host the API builder and want to check how easy &amp;amp; productive it is to generate project and production-ready source code at their demand. Don’t forget to tag us on Twitter (@&lt;a href="https://twitter.com/dhiwise"&gt;dhiwise&lt;/a&gt;) when you get the AHA moment after checking the end result.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#this-is-just-the-beginning"&gt;
  &lt;/a&gt;
  This is just the beginning!
&lt;/h2&gt;

&lt;p&gt;It took a long time and a lot of work to get here, though this is just ONE OF THE FEW builders we have offered to the community for now.&lt;br&gt;
Figuring out how to open-source this project has been a fun challenge, but I think the best is yet to come. Working in the open is the most fun way to build software, and I can’t wait to see how this project evolves as we invite contributors from around the world to help shape its future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#now-were-calling-on-you-to-take-what-weve-created-and-build-on-it"&gt;
  &lt;/a&gt;
  Now, we’re calling on you to take what we’ve created and build on it!
&lt;/h2&gt;

&lt;p&gt;Please let us know what you are creating with what we have started. We can’t wait to push the developer’s community to be more productive together to become the best it can be!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;By Ravi Sojitra 
(Tech Lead | DhiWise)&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>showdev</category>
      <category>opensource</category>
    </item>
    <item>
      <title>How to use Margin in CSS?</title>
      <author>dev-ashishsethi</author>
      <pubDate>Fri, 03 Dec 2021 08:41:21 +0000</pubDate>
      <link>https://dev.to/devashishsethi/how-to-use-margin-in-css-501i</link>
      <guid>https://dev.to/devashishsethi/how-to-use-margin-in-css-501i</guid>
      <description>&lt;p&gt;According to box model in CSS margin is the outer most edge of any element, it can be set on all the four sides of the element. It can be written in shorthand or assigning different values to individual margin properties for example, margin-top:10px, margin-right:20px, margin-left:2px, margin-bottom:8px.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-margin-in-shorthand"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;u&gt;Writing margin in shorthand&lt;/u&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;For writing margin in shorthand there are some things to learn first, let me tell what those are.&lt;/p&gt;

&lt;p&gt;In shorthand you can specify only &lt;strong&gt;one value&lt;/strong&gt; or &lt;strong&gt;two values&lt;/strong&gt; or &lt;strong&gt;three values&lt;/strong&gt; or &lt;strong&gt;four values&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#one-value"&gt;
  &lt;/a&gt;
  One Value
&lt;/h2&gt;

&lt;p&gt;example-&amp;gt; margin: 2rem;&lt;br&gt;
 It applies same measurement(2rem here) to all the four sides.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#two-values"&gt;
  &lt;/a&gt;
  Two Values
&lt;/h2&gt;

&lt;p&gt;example-&amp;gt; margin: 2rem 4rem&lt;br&gt;
 First value gets applied to top and bottom and second value gets &lt;br&gt;
 applied to left and right of element.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#three-values"&gt;
  &lt;/a&gt;
  Three Values
&lt;/h2&gt;

&lt;p&gt;example-&amp;gt; margin: 2rem 4rem 1rem;&lt;br&gt;
 First value applies to top, second value applies to right and &lt;br&gt;
 left and third value applies to bottom.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#four-values"&gt;
  &lt;/a&gt;
  Four Values
&lt;/h2&gt;

&lt;p&gt;example-&amp;gt; margin: 2rem 4rem 3rem 1rem;&lt;br&gt;
 First value gets assigned to top, second values is assigned to &lt;br&gt;
 right, third values gets assigned to bottom and fourth value gets &lt;br&gt;
 assigned to left.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>Create HTML, CSS &amp; Javascript Folder 📁 Structure </title>
      <author>Pratik</author>
      <pubDate>Fri, 03 Dec 2021 08:13:26 +0000</pubDate>
      <link>https://dev.to/pratikdhame/create-html-css-javascript-folder-structure-4m5p</link>
      <guid>https://dev.to/pratikdhame/create-html-css-javascript-folder-structure-4m5p</guid>
      <description>&lt;p&gt;&lt;strong&gt;1. You need to have node.js installed in your computer&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MGkfXwA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcRaz4IN0nOGPud9MV0QlkWdO_RXtnyIfh77hg%26usqp%3DCAU" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGkfXwA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcRaz4IN0nOGPud9MV0QlkWdO_RXtnyIfh77hg%26usqp%3DCAU" alt="node.js" width="739" height="415"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Steps&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1.&lt;em&gt;Download the Windows installer from Nodejs.org.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;2.&lt;em&gt;Run the installer (the . msi file you downloaded in the previous step.)&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;3.&lt;em&gt;Follow the prompts in the installer (Accept the license agreement, click the NEXT button a bunch of times and accept the default installation settings).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;4.&lt;em&gt;Restart your computer.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.Open Terminal&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7ptOoYhK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/7/78/Appleterminal2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7ptOoYhK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/7/78/Appleterminal2.png" alt="Terminal" width="880" height="617"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Open Terminal wherever you want to create project&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Write Command &lt;code&gt;npx touch-5&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Final Output&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QjGTUPT---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcQuTwTkLgQs7xOKdMy9k4KW5QLP-TVYpMqpaA%26usqp%3DCAU" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QjGTUPT---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcQuTwTkLgQs7xOKdMy9k4KW5QLP-TVYpMqpaA%26usqp%3DCAU" alt="CSS and JavaScript Files linked to HTML" width="640" height="479"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can see Folder 📁 and Files linked together&lt;/li&gt;
&lt;li&gt;HTML boiler-plate code in HTML file&lt;/li&gt;
&lt;li&gt;You can see css and javascript files linked to the html file&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>HTML tags | img</title>
      <author>Carlos Espada</author>
      <pubDate>Fri, 03 Dec 2021 08:11:29 +0000</pubDate>
      <link>https://dev.to/carlosespada/html-tags-img-44p1</link>
      <guid>https://dev.to/carlosespada/html-tags-img-44p1</guid>
      <description>&lt;p&gt;It is used to &lt;strong&gt;embed an image into the document&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The HTML standard doesn't list what image formats to support, so user agents &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types"&gt;may support different formats&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The image file formats that are most commonly used on the web are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;APNG&lt;/strong&gt; (&lt;em&gt;Animated Portable Network Graphics&lt;/em&gt;): good choice for lossless animation sequences (GIF is less performant).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;AVIF&lt;/strong&gt; (&lt;em&gt;AV1 Image File Format&lt;/em&gt;): good choice for both images and animated images due to high performance.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;GIF&lt;/strong&gt; (&lt;em&gt;Graphics Interchange Format&lt;/em&gt;): good choice for simple images and animations.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;JPEG&lt;/strong&gt; (&lt;em&gt;Joint Photographic Expert Group&lt;/em&gt;): good choice for lossy compression of still images (currently the most popular).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;PNG&lt;/strong&gt; (&lt;em&gt;Portable Network Graphics&lt;/em&gt;): good choice for lossy compression of still images (slightly better quality than JPEG).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;SVG&lt;/strong&gt; (&lt;em&gt;Scalable Vector Graphics&lt;/em&gt;): vector image format. Use for images that must be drawn accurately at different sizes.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;WebP&lt;/strong&gt; (&lt;em&gt;Web Picture&lt;/em&gt;): excellent choice for both images and animated images.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Formats like WebP and AVIF are highly recommended as they are now broadly (and somewhat deeply) supported by web browsers, and perform much better than PNG, JPEG, GIF for both still and animated images. SVG remains the recommended format for images that must be drawn accurately at different sizes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#image-loading-errors"&gt;
  &lt;/a&gt;
  Image loading errors
&lt;/h2&gt;

&lt;p&gt;If an error occurs while loading or rendering an image, and an &lt;code&gt;onerror&lt;/code&gt; event handler has been set on the &lt;code&gt;error&lt;/code&gt; event, that event handler will get called. This can happen in a number of situations, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;src&lt;/code&gt; attribute is empty (&lt;code&gt;""&lt;/code&gt;) or &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;src&lt;/code&gt; URL is the same as the URL of the page the user is currently on.&lt;/li&gt;
&lt;li&gt;The image is corrupted in some way that prevents it from being loaded.&lt;/li&gt;
&lt;li&gt;The image's metadata is corrupted in such a way that it's impossible to retrieve its dimensions, and no dimensions were specified in the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element's attributes.&lt;/li&gt;
&lt;li&gt;The image is in a format not supported by the user agent.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#attributes"&gt;
  &lt;/a&gt;
  Attributes
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#alt"&gt;
  &lt;/a&gt;
  alt
&lt;/h3&gt;

&lt;p&gt;Defines an alternative text description of the image. It isn't mandatory but is &lt;strong&gt;incredibly useful for accessibility&lt;/strong&gt; — screen readers read this description out to their users so they know what the image means. &lt;/p&gt;

&lt;p&gt;Browsers do not always display images. There are a number of situations in which a browser might not display images, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Non-visual browsers (such as those used by people with visual impairments).&lt;/li&gt;
&lt;li&gt;The user chooses not to display images (saving bandwidth, privacy reasons)&lt;/li&gt;
&lt;li&gt;The image is invalid or an unsupported type&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In these cases, the browser may replace the image with the text in the element's &lt;code&gt;alt&lt;/code&gt; attribute. For these reasons and others, provide a useful value for &lt;code&gt;alt&lt;/code&gt; whenever possible.&lt;/p&gt;

&lt;p&gt;Omitting &lt;code&gt;alt&lt;/code&gt; altogether indicates that the image is a key part of the content and no textual equivalent is available. &lt;strong&gt;Setting this attribute to an empty string&lt;/strong&gt; (&lt;code&gt;alt=""&lt;/code&gt;) indicates that this image is not a key part of the content (it’s decoration or a tracking pixel), and that &lt;strong&gt;non-visual browsers may omit it from rendering&lt;/strong&gt;. Visual browsers will also hide the broken image icon if the alt is empty and the image failed to display.&lt;/p&gt;

&lt;p&gt;This attribute is also used when copying and pasting the image to text, or saving a linked image to a bookmark.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#crossorigin"&gt;
  &lt;/a&gt;
  crossorigin
&lt;/h3&gt;

&lt;p&gt;Indicates if the fetching of the image must be done using a CORS request. Image data from a CORS-enabled image returned from a CORS request can be reused in the &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element without being marked "tainted".&lt;/p&gt;

&lt;p&gt;If the &lt;code&gt;crossorigin&lt;/code&gt; attribute is not specified, then a non-CORS request is sent (without the &lt;code&gt;Origin&lt;/code&gt; request header), and the browser marks the image as tainted and restricts access to its image data, preventing its usage in &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; elements.&lt;/p&gt;

&lt;p&gt;If the &lt;code&gt;crossorigin&lt;/code&gt; attribute is specified, then a CORS request is sent (with the &lt;code&gt;Origin&lt;/code&gt; request header); but if the server does not opt into allowing cross-origin access to the image data by the origin site (by not sending any &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; response header, or by not including the site's origin in any &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; response header it does send), then the browser blocks the image from loading, and logs a CORS error to the devtools console.&lt;/p&gt;

&lt;p&gt;Allowed values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;anonymous&lt;/code&gt;: a CORS request is sent with credentials omitted (that is, no cookies, X.509 certificates, or &lt;code&gt;Authorization&lt;/code&gt; request header).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;use-credentials&lt;/code&gt;: the CORS request is sent with any credentials included (that is, cookies, X.509 certificates, and the &lt;code&gt;Authorization&lt;/code&gt; request header). If the server does not opt into sharing credentials with the origin site (by sending back the &lt;code&gt;Access-Control-Allow-Credentials: true&lt;/code&gt; response header), then the browser marks the image as tainted and restricts access to its image data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the attribute has an invalid value, browsers handle it as if the &lt;code&gt;anonymous&lt;/code&gt; value was used.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#decoding"&gt;
  &lt;/a&gt;
  decoding
&lt;/h3&gt;

&lt;p&gt;Provides an image decoding hint to the browser. Allowed values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;sync&lt;/code&gt;: decode the image synchronously, for atomic presentation with other content.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;async&lt;/code&gt;: decode the image asynchronously, to reduce delay in presenting other content.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;auto&lt;/code&gt; (default): no preference for the decoding mode. The browser decides what is best for the user.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#height"&gt;
  &lt;/a&gt;
  height
&lt;/h3&gt;

&lt;p&gt;The intrinsic height of the image, in pixels. Must be an integer without a unit. Allows image to take up space before it loads, to mitigate content layout shifts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intrinsicsize"&gt;
  &lt;/a&gt;
  intrinsicsize
&lt;/h3&gt;

&lt;p&gt;This attribute tells the browser to ignore the actual intrinsic size of the image and pretend it’s the size specified in the attribute. Specifically, the image would raster at these dimensions and &lt;code&gt;naturalWidth/naturalHeight&lt;/code&gt; on images would return the values specified in this attribute.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ismap"&gt;
  &lt;/a&gt;
  ismap
&lt;/h3&gt;

&lt;p&gt;This Boolean attribute indicates that the image is part of a server-side map. If so, the coordinates where the user clicked on the image are sent to the server.&lt;/p&gt;

&lt;p&gt;This attribute is allowed only if the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element is a descendant of an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element with a valid &lt;code&gt;href&lt;/code&gt; attribute. This gives users without pointing devices a fallback destination.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#loading"&gt;
  &lt;/a&gt;
  loading
&lt;/h3&gt;

&lt;p&gt;Indicates how the browser should load the image:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;eager&lt;/code&gt; (default): loads the image immediately, regardless of whether or not the image is currently within the visible viewport.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;lazy&lt;/code&gt;: defers loading the image until it reaches a calculated distance from the viewport, as defined by the browser. The intent is to avoid the network and storage bandwidth needed to handle the image until it's reasonably certain that it will be needed. This generally improves the performance of the content in most typical use cases.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Loading is only deferred when JavaScript is enabled&lt;/strong&gt;. This is an anti-tracking measure, because if a user agent supported lazy loading when scripting is disabled, it would still be possible for a site to track a user's approximate scroll position throughout a session, by strategically placing images in a page's markup such that a server can track how many images are requested and when.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#referrerpolicy"&gt;
  &lt;/a&gt;
  referrerpolicy
&lt;/h3&gt;

&lt;p&gt;A string indicating which referrer to use when fetching the resource:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;no-referrer&lt;/code&gt;: the &lt;code&gt;Referer&lt;/code&gt; header will not be sent.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;no-referrer-when-downgrade&lt;/code&gt;: the &lt;code&gt;Referer&lt;/code&gt; header will not be sent to origins without TLS (HTTPS).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;origin&lt;/code&gt;: the sent referrer will be limited to the origin of the referring page: its scheme, host and port.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;origin-when-cross-origin&lt;/code&gt;: the referrer sent to other origins will be limited to the scheme, the host and the port. Navigations on the same origin will still include the path.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;same-origin&lt;/code&gt;: a referrer will be sent for same origin, but cross-origin requests will contain no referrer information.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;strict-origin&lt;/code&gt;: only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS→HTTPS), but don't send it to a less secure destination (HTTPS→HTTP).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;strict-origin-when-cross-origin&lt;/code&gt; (default): send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS→HTTPS), and send no header to a less secure destination (HTTPS→HTTP).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;unsafe-url&lt;/code&gt;: the referrer will include the origin and the path (but not the fragment, password or username). This value is unsafe, because it leaks origins and paths from TLS-protected resources to insecure origins.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#sizes"&gt;
  &lt;/a&gt;
  sizes
&lt;/h3&gt;

&lt;p&gt;One or more strings separated by commas, indicating a set of source sizes. Each source size consists of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A media condition. This must be omitted for the last item in the list.&lt;/li&gt;
&lt;li&gt;A source size value.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Media Conditions describe properties of the viewport, not of the image. For example, &lt;code&gt;(max-height: 500px) 1000px&lt;/code&gt; proposes to use a source of 1000px width, if the viewport is not higher than 500px.&lt;/p&gt;

&lt;p&gt;Source size values specify the intended display size of the image. User agents use the current source size to select one of the sources supplied by the &lt;code&gt;srcset&lt;/code&gt; attribute, when those sources are described using width (&lt;code&gt;w&lt;/code&gt;) descriptors. The selected source size affects the intrinsic size of the image (the image’s display size if no CSS styling is applied). If the &lt;code&gt;srcset&lt;/code&gt; attribute is absent, or contains no values with a width descriptor, then the sizes attribute has no effect.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#src"&gt;
  &lt;/a&gt;
  src
&lt;/h3&gt;

&lt;p&gt;The image URL. &lt;strong&gt;Mandatory&lt;/strong&gt; for the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element. On browsers supporting &lt;code&gt;srcset&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt; is treated like a candidate image with a pixel density descriptor &lt;code&gt;1x&lt;/code&gt;, unless an image with this pixel density descriptor is already defined in &lt;code&gt;srcset&lt;/code&gt;, or unless &lt;code&gt;srcset&lt;/code&gt; contains &lt;code&gt;w&lt;/code&gt; descriptors.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#srcset"&gt;
  &lt;/a&gt;
  srcset
&lt;/h3&gt;

&lt;p&gt;One or more strings separated by commas, indicating possible image sources for the user agent to use. Each string is composed of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A URL to an image&lt;/li&gt;
&lt;li&gt;Optionally, whitespace followed by one of:

&lt;ul&gt;
&lt;li&gt;A width descriptor (a positive integer directly followed by &lt;code&gt;w&lt;/code&gt;). The width descriptor is divided by the source size given in the &lt;code&gt;sizes&lt;/code&gt; attribute to calculate the effective pixel density.&lt;/li&gt;
&lt;li&gt;A pixel density descriptor (a positive floating point number directly followed by &lt;code&gt;x&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If no descriptor is specified, the source is assigned the default descriptor of &lt;code&gt;1x&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is incorrect to mix width descriptors and pixel density descriptors in the same &lt;code&gt;srcset&lt;/code&gt; attribute. Duplicate descriptors (for instance, two sources in the same &lt;code&gt;srcset&lt;/code&gt; which are both described with &lt;code&gt;2x&lt;/code&gt;) are also invalid.&lt;/p&gt;

&lt;p&gt;The user agent selects any of the available sources at its discretion. This provides them with significant leeway to tailor their selection based on things like user preferences or bandwidth conditions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#width"&gt;
  &lt;/a&gt;
  width
&lt;/h3&gt;

&lt;p&gt;The intrinsic width of the image in pixels. Must be an integer without a unit. Allows image to take up space before it loads, to mitigate content layout shifts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#usemap"&gt;
  &lt;/a&gt;
  usemap
&lt;/h3&gt;

&lt;p&gt;The partial URL (starting with &lt;code&gt;#&lt;/code&gt;) of an image map associated with the element.&lt;/p&gt;

&lt;p&gt;You cannot use this attribute if the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element is inside an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#styling"&gt;
  &lt;/a&gt;
  Styling
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; is a replaced element; it has a display value of &lt;code&gt;inline&lt;/code&gt; by default, but its default dimensions are defined by the embedded image's intrinsic values, like it were &lt;code&gt;inline-block&lt;/code&gt;. You can set properties like &lt;code&gt;border&lt;/code&gt;/&lt;code&gt;border-radius&lt;/code&gt;, &lt;code&gt;padding&lt;/code&gt;/&lt;code&gt;margin&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, etc. on an image.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; has no baseline, so when images are used in an inline formatting context with &lt;code&gt;vertical-align: baseline&lt;/code&gt;, the bottom of the image will be placed on the text baseline.&lt;/p&gt;

&lt;p&gt;You can use the &lt;code&gt;object-position&lt;/code&gt; property to position the image within the element's box, and the &lt;code&gt;object-fit&lt;/code&gt; property to adjust the sizing of the image within the box (for example, whether the image should fit the box or fill it even if clipping is required).&lt;/p&gt;

&lt;p&gt;Depending on its type, an image may have an intrinsic width and height. For some image types, however, intrinsic dimensions are unnecessary. SVG images, for instance, have no intrinsic dimensions if their root &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element doesn't have a &lt;code&gt;width&lt;/code&gt; or &lt;code&gt;height&lt;/code&gt; set on it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessibility"&gt;
  &lt;/a&gt;
  Accessibility
&lt;/h2&gt;

&lt;p&gt;An &lt;code&gt;alt&lt;/code&gt; attribute's value &lt;strong&gt;should clearly and concisely describe the image's content&lt;/strong&gt;. It should not describe the presence of the image itself or the file name of the image. If the &lt;code&gt;alt&lt;/code&gt; attribute is purposefully left off because the image has no textual equivalent, consider alternate methods to present what the image is trying to communicate.&lt;/p&gt;

&lt;p&gt;Don't&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img alt="image" src="penguin.jpg"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img alt="A Rockhopper Penguin standing on a beach." src="penguin.jpg"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When an &lt;code&gt;alt&lt;/code&gt; attribute &lt;strong&gt;is not present&lt;/strong&gt; on an image, some screen readers &lt;strong&gt;may announce the image's file name instead&lt;/strong&gt;. This can be a confusing experience if the file name isn't representative of the image's contents.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;title&lt;/code&gt; attribute is not an acceptable substitute for the &lt;code&gt;alt&lt;/code&gt; attribute. Additionally, avoid duplicating the &lt;code&gt;alt&lt;/code&gt; attribute's value in a &lt;code&gt;title&lt;/code&gt; attribute declared on the same image. Doing so may cause some screen readers to announce the description twice, creating a confusing experience.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;title&lt;/code&gt; attribute should also not be used as supplemental captioning information to accompany an image's &lt;code&gt;alt&lt;/code&gt; description. If an image needs a caption, use the &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;figcaption&amp;gt;&lt;/code&gt; elements.&lt;/p&gt;

&lt;p&gt;The value of the &lt;code&gt;title&lt;/code&gt; attribute is usually presented to the user as a tooltip, which appears shortly after the cursor stops moving over the image. While this can provide additional information to the user, you should not assume that the user will ever see it: the user may only have keyboard or touchscreen. &lt;strong&gt;If you have information that's particularly important or valuable for the user, present it inline using one of the methods mentioned above&lt;/strong&gt; instead of using &lt;code&gt;title&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It has an &lt;strong&gt;implicit ARIA role&lt;/strong&gt; &lt;code&gt;img&lt;/code&gt; (with non-empty &lt;code&gt;alt&lt;/code&gt; attribute or no &lt;code&gt;alt&lt;/code&gt; attribute) or no corresponding role (with empty &lt;code&gt;alt&lt;/code&gt; attribute).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Type: &lt;em&gt;inline&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Self-closing: &lt;em&gt;Yes&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Semantic value: &lt;em&gt;No&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/tags/tag_img.asp"&gt;Definition&lt;/a&gt; | &lt;a href="https://www.w3schools.com/tags/tryit.asp?filename=tryhtml_image_test"&gt;Example&lt;/a&gt; | &lt;a href="https://caniuse.com/mdn-html_elements_img"&gt;Support&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>tags</category>
      <category>img</category>
    </item>
    <item>
      <title>Cloud Technology News of the Month: November 2021</title>
      <author>CAST AI</author>
      <pubDate>Fri, 03 Dec 2021 08:10:29 +0000</pubDate>
      <link>https://dev.to/castai/cloud-technology-news-of-the-month-november-2021-464g</link>
      <guid>https://dev.to/castai/cloud-technology-news-of-the-month-november-2021-464g</guid>
      <description>&lt;p&gt;Already feeling the vibe of this year’s festive season? Here’s some fresh cloud technology news to keep you on the right track. &lt;/p&gt;

&lt;p&gt;This series brings you up to speed with the latest releases, acquisitions, research, and hidden gems in the world of cloud computing – the stuff actually worth reading.&lt;/p&gt;

&lt;p&gt;What happened in the cloud world this November? Keep on reading to find out!&lt;/p&gt;

&lt;p&gt;_____&lt;/p&gt;

&lt;h2&gt;Story of the month: All the new things at AWS, re:Invent style&lt;/h2&gt;

&lt;p&gt;Our team is at &lt;strong&gt;AWS re:Invent&lt;/strong&gt; right now and shared some blazingly hot news with us, including the big news from AWS CEO Adam Selipsky’s keynote.&lt;/p&gt;

&lt;p&gt;Here are the top things that stood out to us:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;More speed for less money! &lt;/strong&gt;AWS announced &lt;strong&gt;Graviton 3&lt;/strong&gt;, the freshest generation of its Arm-based Graviton processors. The new chip will be 25% faster and use 60% less power, powering some new instance types AWS is rolling out as well (C7g).&lt;/li&gt;
&lt;li&gt;AWS released its open-source &lt;strong&gt;autoscaling tool Karpenter&lt;/strong&gt; to production. We hope that it helps people save money on their cloud bills because back when we tried an earlier version a year ago it wasn’t all that different from a vanilla Kubernetes cluster autoscaler.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Machine learning &lt;/strong&gt;made easy with a new service called &lt;strong&gt;Amazon SageMaker Canvas&lt;/strong&gt; made for non-specialized engineers or business users. The promise? Anyone can build machine learning prediction models using a point-and-click interface.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s6Qru-jD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cast.ai/wp-content/uploads/2021/08/dollar-banner.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s6Qru-jD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cast.ai/wp-content/uploads/2021/08/dollar-banner.png" alt="" width="870" height="324"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;_____&lt;/h2&gt;

&lt;h2&gt;The Business of Cloud&lt;/h2&gt;

&lt;p&gt;The top cloud vendors have a hard time breaking our CAPEX on their IaaS and SaaS offerings, but they manage to make it overall. Take a look at the recent public cloud growth rates, and you’ll see a &lt;strong&gt;correlation between capital expenditure and revenue&lt;/strong&gt;. The top cloud vendor, &lt;strong&gt;AWS grew 10% faster&lt;/strong&gt; in the last quarter than it did a year ago. Scale matters a lot in the cloud and CAPEX helps to secure it. &lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.infoworld.com/article/3639017/cloud-costs-a-lot-of-money.html"&gt;InfoWorld&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/charlesfitz/status/1453828546040721416"&gt;Charles Fitzgerald on Twitter&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dell&lt;/strong&gt; is setting up one of the largest corporate spin-offs ever by shedding its 81% stake in &lt;strong&gt;VMware&lt;/strong&gt; to create a software company with a stock market value of &lt;strong&gt;almost $64 billion&lt;/strong&gt;. This is the epilogue to Dell’s 8-year-long commitment to transforming his interest in the slightly forgotten PC maker into a data center hardware and software company worth $40 billion.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://arstechnica.com/information-technology/2021/11/dell-spins-off-64-billion-vmware-as-it-battles-debt-hangover/"&gt;Arstechnica&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In an interesting turn of events, the &lt;strong&gt;UK’s spy agencies&lt;/strong&gt; - MI5, MI6, and GCHQ - are going to use AWS for cloud storage and computing. &lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.ft.com/content/74782def-1046-4ea5-b796-0802cfb90260"&gt;Financial Times&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nvidia’s acquisition of Arm&lt;/strong&gt; saga just released another chapter. The deal is now under scrutiny by the FTC, and the EU won’t hesitate to shut it either. The global chip shortage is probably one of the reasons why.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://arstechnica.com/tech-policy/2021/11/nvidia-acquisition-of-arm-now-under-scrutiny-by-ftc/"&gt;Arstechnica&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The cloud data service vendor partly owned by an Indonesian tycoon - DCI Indonesia - just became &lt;strong&gt;the world’s top IPO of 2021&lt;/strong&gt;, noting a 10,852% increase since its share float in January. This makes the company the second-biggest contributor to this year’s 12% gain of the Jakarta Composite Index.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.bloomberg.com/news/articles/2021-11-26/a-10-000-jump-makes-indonesia-data-firm-world-s-top-gaining-ipo"&gt;Bloomberg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;_____&lt;/p&gt;

&lt;h2&gt;Food for thought&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Single and private clouds are out of the door&lt;/strong&gt;. IBM released a study where it shows how this trend dropped from 29% in 2019 to only 2% in 2021. Who won the race instead? Hybrid cloud and multi cloud! Yet another piece of research showing us that multi cloud is set to become the dominant architecture for cloud service delivery. &lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.ibm.com/downloads/cas/K0ZGR6BW"&gt;IBM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, &lt;strong&gt;Google Cloud went down&lt;/strong&gt; in the middle of the month and &lt;strong&gt;took down services like Home Depot, Snap, and Spotify&lt;/strong&gt;. What caused the outage? A glitch in a network configuration. It’s yet another scenario demonstrating the risk of betting on a single cloud provider to handle all your applications.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://status.cloud.google.com/incidents/6PM5mNd43NbMqjCZ5REh"&gt;Google Cloud Status Dashboard&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;_____&lt;/p&gt;

&lt;h2&gt;Meanwhile in CAST AI&lt;/h2&gt;

&lt;p&gt;Here are some new product features hot off the press:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you have ever worked with manual cost management tools, you know how time-consuming that can be. We built a feature that brings you from zero to an optimized state in a few minutes - &lt;strong&gt;Instant Rebalancing&lt;/strong&gt;. Learn more about it &lt;a href="https://cast.ai/blog/introducing-instant-rebalancing-for-a-fully-autonomous-kubernetes-optimization-platform/"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Also, we are &lt;a href="https://cast.ai/blog/cast-ai-is-officially-soc-2-type-ii-compliant/"&gt;&lt;strong&gt;officially SOC 2 Type II compliant!&lt;/strong&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;We also added the &lt;strong&gt;Spot Fallback&lt;/strong&gt; feature that guarantees capacity by temporarily moving your workloads to other nodes until there are new spot instances available.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Available savings report&lt;/strong&gt; is now enhanced with a graph that displays point in time actual and optimal cluster costs as well as other dimensions (i.e. CPU, Memory, node count).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Scrapable cluster metrics&lt;/strong&gt; are now available, here’s a handy &lt;a href="https://github.com/castai/examples/tree/main/metrics"&gt;guide&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For &lt;strong&gt;AWS/Kops clusters&lt;/strong&gt; we previously deployed a &lt;strong&gt;Lambda function&lt;/strong&gt; per cluster, it’s no longer the case. From now on a single Lambda function is deployed per account.&lt;/li&gt;
&lt;li&gt;Added support for &lt;strong&gt;Kops version 1.20&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;_____&lt;/p&gt;

&lt;p&gt;Why not get the next portion of cloud technology news directly to your inbox?&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>news</category>
      <category>kubernetes</category>
      <category>cloudnative</category>
    </item>
    <item>
      <title>Free Bootstrap 5 Admin Template - Dash UI
</title>
      <author>Jitu Chauhan</author>
      <pubDate>Fri, 03 Dec 2021 08:08:09 +0000</pubDate>
      <link>https://dev.to/imjituchauhan/free-bootstrap-5-admin-template-dash-ui-19j2</link>
      <guid>https://dev.to/imjituchauhan/free-bootstrap-5-admin-template-dash-ui-19j2</guid>
      <description>&lt;p&gt;Dash-UI is a Bootstrap 5 Admin &amp;amp; Dashboard Theme. Dash UI Kit a free and open source components and templates kit fully coded with Bootstrap 5.&lt;/p&gt;

&lt;p&gt;Download - &lt;a href="https://codescandy.gumroad.com/l/dashui"&gt;Dash UI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Demo - &lt;a href="https://codescandy.com/dashui/index.html"&gt;Dash UI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Support - &lt;a href="https://github.com/codescandy/Dash-UI/discussions"&gt;Join the Community&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-in-the-package"&gt;
  &lt;/a&gt;
  What's in the package
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;50+ Components&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bootstrap 5.1.3&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;HTML5 &amp;amp; SCSS&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gulp Based Workflow&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;100% Responsive&lt;/li&gt;
&lt;li&gt;Authentication Pages&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Collapsible Sidebar&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Font Icons&lt;/li&gt;
&lt;li&gt;Google Fonts&lt;/li&gt;
&lt;li&gt;Developer &lt;a href="https://codescandy.com/dashui/docs/index.html"&gt;Docs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pages"&gt;
  &lt;/a&gt;
  Pages
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codescandy.com/dashui/index.html"&gt;Project Dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codescandy.com/dashui/pages/profile.html"&gt;Profile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codescandy.com/dashui/pages/settings.html"&gt;Account Settings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codescandy.com/dashui/pages/billing.html"&gt;Billing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codescandy.com/dashui/pages/pricing.html"&gt;Pricing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Authentication Pages&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codescandy.com/dashui/pages/sign-in.html"&gt;Sign In&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codescandy.com/dashui/pages/sign-up.html"&gt;Sign Up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codescandy.com/dashui/pages/forget-password.html"&gt;Forgot Password&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;404 Error&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Menu Level&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Layout&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Thank you for reading.&lt;/strong&gt;&lt;br&gt;
If you like this product, please support us by sharing our GitHub repository! &lt;a href="https://github.com/codescandy/Dash-UI"&gt;Github&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>opensource</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to customize your Transistor.fm Website with JS and CSS</title>
      <author>swyx</author>
      <pubDate>Fri, 03 Dec 2021 07:58:15 +0000</pubDate>
      <link>https://dev.to/swyx/how-to-customize-your-transistorfm-website-with-js-and-css-3afc</link>
      <guid>https://dev.to/swyx/how-to-customize-your-transistorfm-website-with-js-and-css-3afc</guid>
      <description>&lt;p&gt;The default Transistor.fm website is kinda ugly. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PKQCqj4B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yoyklslz9swh8k9e317s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PKQCqj4B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yoyklslz9swh8k9e317s.png" alt="Image description" width="880" height="924"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's mine: &lt;a href="https://swyx.transistor.fm/"&gt;https://swyx.transistor.fm/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Ctv-5H9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6t2nf9pgwfmfvv91x5r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Ctv-5H9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6t2nf9pgwfmfvv91x5r.png" alt="Image description" width="880" height="706"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's how to customize your Transistor.fm website if you use Transistor. But also it's a simple guide to do clientside customizations of almost any website whose code you don't control.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-video-3mins"&gt;
  &lt;/a&gt;
  How To Video (3mins)
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/EyV6QHk63lg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h2&gt;

&lt;p&gt;Head HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/episodes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByClassName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;site-content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertBefore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByClassName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;site-content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// assuming index page&lt;/span&gt;
    &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByClassName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;site-first-episode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`
&amp;lt;iframe title="swyx mixtape embed" width="100%" height="390" frameborder="no" scrolling="no" seamless src="https://share.transistor.fm/e/learn-in-podcast/playlist/dark"&amp;gt;&amp;lt;/iframe&amp;gt;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;swyxembed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeLive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;swyxembed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;makeLive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;makeLive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.site-intro&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.25rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60ch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="nc"&gt;.site-credits&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="nf"&gt;#site-footer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="nf"&gt;#swyxembed&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="nc"&gt;.site-featured-episodes&lt;/span&gt; &lt;span class="nc"&gt;.site-episode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="nc"&gt;.site-episode&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="py"&gt;grid-template-areas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"date title"&lt;/span&gt; &lt;span class="s1"&gt;"date desc"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="py"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;minmax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10ch&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="py"&gt;grid-column-gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="nc"&gt;.site-episode&lt;/span&gt; &lt;span class="nt"&gt;time&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="py"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="nc"&gt;.site-episode&lt;/span&gt; &lt;span class="nt"&gt;time&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="nc"&gt;.site-episode&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="py"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="nc"&gt;.site-episode&lt;/span&gt; &lt;span class="nc"&gt;.site-episode-summary&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="py"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;desc&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="nc"&gt;.site-episode&lt;/span&gt; &lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>tips</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>Using PySpark and AWS Glue to analyze multi-line log files</title>
      <author>Maurice</author>
      <pubDate>Fri, 03 Dec 2021 07:52:12 +0000</pubDate>
      <link>https://dev.to/aws-builders/using-pyspark-and-aws-glue-to-analyze-multi-line-log-files-24oe</link>
      <guid>https://dev.to/aws-builders/using-pyspark-and-aws-glue-to-analyze-multi-line-log-files-24oe</guid>
      <description>&lt;p&gt;In this post I'm going to explain how you can analyze multiline-logs using PySpark and/or AWS Glue. If you're not familiar with Glue yet, you can check out &lt;a href="https://aws-blog.de/2021/06/what-i-wish-somebody-had-explained-to-me-before-i-started-to-use-aws-glue.html"&gt;this article&lt;/a&gt; for an introduction.&lt;/p&gt;

&lt;p&gt;One of the main challenges with log analyses is the peculiar file format. In lots of cases tools produce multiline log messages like these:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2021-12-02T14:00:00,000Z    DEBUG   This is
a message that
spans multiple linees
2021-12-02T14:00:01,000Z    DEBUG   Single-line-message
2021-12-02T14:00:02,000Z    DEBUG   Another message
2021-12-02T14:00:03,000Z    INFO    This is
another multi-line message
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why is this a challenge? When you read data in PySpark using most connectors, they operate on a line by line basis, i.e. you get a record in your data frame for each line in the file. So your data frame will look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+-------------------------------------------------------+
| 2021-12-02T14:00:00,000Z  DEBUG   This is             |
+-------------------------------------------------------+
| a message that                                        |
+-------------------------------------------------------+
| spans multiple linees                                 |
+-------------------------------------------------------+
| 2021-12-02T14:00:01,000Z  DEBUG   Single-line-message |
+-------------------------------------------------------+
| 2021-12-02T14:00:02,000Z  DEBUG   Another message     |
+-------------------------------------------------------+
| 2021-12-02T14:00:03,000Z  INFO    This is             |
+-------------------------------------------------------+
| another multi-line message                            |
+-------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That makes meaningful analyses tricky. Data that belongs together is distributed across multiple records, because the message part of the log is spread out. Fortunately there is another approach that circumvents these issues.&lt;/p&gt;

&lt;p&gt;In order to correctly process the logs, we need to treat the file as a whole when we read it. We have to use a reader that doesn't create records from the individual lines in the files, but one record per file. Fortunately there is something that does exactly that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyspark.context&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SparkContext&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyspark.sql.session&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SparkSession&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pyspark.sql.functions&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;

&lt;span class="c1"&gt;# Change this to your data source
&lt;/span&gt;&lt;span class="n"&gt;S3_INPUT_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"s3a://&amp;lt;my-log-bucket&amp;gt;/"&lt;/span&gt;

&lt;span class="n"&gt;SC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SparkContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getOrCreate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;SPARK&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SparkSession&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Load all files as individual records, i.e. each
# record has the path as _1 and the content as _2
&lt;/span&gt;&lt;span class="n"&gt;logs_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wholeTextFiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S3_INPUT_PATH&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;toDF&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;a href="https://spark.apache.org/docs/3.1.1/api/python/reference/api/pyspark.SparkContext.wholeTextFiles.html"&gt;wholeTextFiles reader&lt;/a&gt; loads the files into a data frame with two columns. The column &lt;code&gt;_1&lt;/code&gt; contains the path to the file and &lt;code&gt;_2&lt;/code&gt; its content. (&lt;em&gt;Note: I'd avoid printing the column &lt;code&gt;_2&lt;/code&gt; in jupyter notebooks, in most cases the content will be too much to handle.&lt;/em&gt;) This is important, because treating the file as a whole allows us to use our own splitting logic to separate the individual log records.&lt;/p&gt;

&lt;p&gt;We can achieve this by using the &lt;code&gt;split&lt;/code&gt; function in combination with the &lt;code&gt;explode&lt;/code&gt; function like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;multiline_str_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logs_df&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;explode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"_2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;"(?=\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2},\d{3}[\S\s]*\t)"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What's going on here is probably not that intuitive, since a regular expression is involved. Let's talk about it. Now that we're working on the content of the whole file, we need to split the file into log records. We can't use new line characters for this precisely because of the reason outlined above. Instead we can use the timestamp, because each new record starts with a timestamp followed by the tab-separator (&lt;code&gt;\t&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Unfortunately the regular split operator removes the character which we use to split a string, so splitting &lt;code&gt;11A11A11&lt;/code&gt; at &lt;code&gt;A&lt;/code&gt; would yield &lt;code&gt;[11, 11, 11]&lt;/code&gt; and we'd lose the &lt;code&gt;A&lt;/code&gt;. If we now split at the timestamp, we'd lose it, which is not good. This is where regular expressions can help. They allow for a look-ahead match. The details don't really matter, but if you start a capture group with &lt;code&gt;?=&lt;/code&gt; it will match everything before the pattern. By using a look ahead capture group, we're able to match everything before the timestamp:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(?=\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2},\d{3}[\S\s]*\t)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is to move all the matches into rows in a data frame, which we can use &lt;a href="https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.sql.functions.explode.html"&gt;explode&lt;/a&gt; for. It returns a new row for all matches. After running our code, the new dataframe &lt;code&gt;multiline_str_df&lt;/code&gt; looks roughly like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+-------------------------------------------------------+
|                        value                          |
+-------------------------------------------------------+
| 2021-12-02T14:00:00,000Z  DEBUG   This is             |
| a message that                                        |
| spans multiple linees                                 |
+-------------------------------------------------------+
| 2021-12-02T14:00:01,000Z  DEBUG   Single-line-message |
+-------------------------------------------------------+
| 2021-12-02T14:00:02,000Z  DEBUG   Another message     |
+-------------------------------------------------------+
| 2021-12-02T14:00:03,000Z  INFO    This is             |
| another multi-line message                            |
+-------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can use another regex to filter the individual rows and extract timestamp, log level as well as the message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;REGEX_PATTERN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;'(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2},\d{3})[\S\s]*\t([\S\s]*?)\s*\t([\s\S]*)'&lt;/span&gt;
&lt;span class="c1"&gt;# 1: Timestamp
# 2: Log Level
# 3: Message
&lt;/span&gt;

&lt;span class="n"&gt;log_data_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;multiline_str_df&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;regexp_extract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'value'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;REGEX_PATTERN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'timestamp'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;regexp_extract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'value'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;REGEX_PATTERN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'log_level'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;regexp_extract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'value'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;REGEX_PATTERN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'message'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally &lt;code&gt;log_data_df&lt;/code&gt; will look like this and you can do further processing based on that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;+---------------------------------------------------------------+
| timestamp                | log_level | message                |
+---------------------------------------------------------------+
| 2021-12-02T14:00:00,000Z | DEBUG     | This is                |
|                          |           | a message that         |
|                          |           | spans multiple linees  |
+---------------------------------------------------------------+
| 2021-12-02T14:00:01,000Z | DEBUG     | Single-line-message    |
+---------------------------------------------------------------+
| 2021-12-02T14:00:02,000Z | DEBUG     | Another message        |
+---------------------------------------------------------------+
| 2021-12-02T14:00:03,000Z | INFO      | This is                |
|                          |           | another multi-line[...]|
+---------------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we've gotten our data into shape, it's time to upload it to S3 and configure a Glue Job to process our log files in S3. If you're not using Glue or S3 that's also fine - the code is plain PySpark and not AWS-dependent.&lt;/p&gt;

&lt;p&gt;Is this a one-size-fits-all solution? No, definitely not, but the approach is broadly applicable. In your case the identifier for new log records will most likely be different and you'll have to adapt the regex to locate it. Just make sure to use a look-ahead group in the split logic (starting with &lt;code&gt;?=&lt;/code&gt;). I recommend you use something like &lt;a href="//regex101.com"&gt;regex101.com&lt;/a&gt; to tinker with your regular expression until it works as you want to use it.&lt;/p&gt;

&lt;p&gt;Hopefully this helped you. If you have any feedback, feel free to reach out via the social media channels in my bio.&lt;/p&gt;

&lt;p&gt;— Maurice&lt;/p&gt;

</description>
      <category>aws</category>
      <category>python</category>
      <category>bigdata</category>
      <category>pyspark</category>
    </item>
  </channel>
</rss>
