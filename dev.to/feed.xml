<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Next/image - Make image fill available space without specifying height or width</title>
      <author>Tan Ahmed</author>
      <pubDate>Tue, 13 Apr 2021 21:13:45 +0000</pubDate>
      <link>https://dev.to/tanahmed/next-image-make-image-fill-available-space-272o</link>
      <guid>https://dev.to/tanahmed/next-image-make-image-fill-available-space-272o</guid>
      <description>&lt;p&gt;The Next.js Image component which has Lazyloading forces you to specify a width and height. Yet most times you do not know this information beforehand nor do you want images to look squashed. &lt;/p&gt;

&lt;p&gt;I discovered with a few lines of CSS you can get around this. Thus your images will fill all the available space in the div.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div className="unset-img"&amp;gt;
  &amp;lt;Image alt="Mountains" src="/project/pexels-photo.jpeg" layout="fill" className="custom-img"
   /&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.custom-img {
  object-fit: contain;
  width: 100% !important;
  position: relative !important;
  height: unset !important;
}

.unset-img {
  width: 100%;
}
.unset-img &amp;gt; div {
  position: unset !important;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>react</category>
      <category>nextjs</category>
      <category>css</category>
      <category>performance</category>
    </item>
    <item>
      <title>Talk Notes: "Self-Care on Rails" (RailsConf 2021)</title>
      <author>Sylwia Vargas</author>
      <pubDate>Tue, 13 Apr 2021 20:15:10 +0000</pubDate>
      <link>https://dev.to/sylwiavargas/tech-talk-notes-self-care-on-rails-railsconf-2021-49ma</link>
      <guid>https://dev.to/sylwiavargas/tech-talk-notes-self-care-on-rails-railsconf-2021-49ma</guid>
      <description>&lt;p&gt;✨ &lt;strong&gt;What is this post about&lt;/strong&gt;: As a part of my professional growth, I make time to watch conference talks on Ruby, Rails, JS, React, tech writing, and tech trivia. Previously, I'd just watch them but now I will take and publish notes for future reference. This talk was a part of RailsConf 2021 that I'm participating at the time of writing. &lt;/p&gt;

&lt;p&gt;✨ &lt;strong&gt;Talk:&lt;/strong&gt; 'Self-Care on Rails' by &lt;a class="comment-mentioned-user" href="https://dev.to/bengreenberg"&gt;@bengreenberg&lt;/a&gt;
 , or &lt;a href="https://twitter.com/RabbiGreenberg"&gt;Ben Greenberg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;✨ &lt;strong&gt;One-paragraph summary&lt;/strong&gt;: This past year has been one of the most challenging years in recent memory. The pandemic has taken a toll, including on children. Adults used their professional skills to help make the year a little better for the kids in our lives: Therapists counseled, entertainers delighted, teachers educated... and Rails developers developed!&lt;/p&gt;

&lt;p&gt;✨ &lt;strong&gt;Impression&lt;/strong&gt;: I appreciate the human-side of the Rails community that Ben represents; the talk was inspiring and also grounding&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#Notes"&gt;Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#side-notes"&gt;Side Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#read-more"&gt;Read more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;"...citizens of a democracy are collectively responsible for what their society allows; they have a special duty towards those it systematically fails, and this burden falls most heavily on those most rewarded..." (Chiala Cordelli)&lt;/li&gt;
&lt;li&gt;a new initiative in the Open Source community: Hippocratic License

&lt;ul&gt;
&lt;li&gt;"...we are starting to realize that the software that we create has a real and lasting impact on the world in which we live" (&lt;a href="https://firstdonoharm.dev/"&gt;An Ethical License to Open Source&lt;/a&gt; - how will your code be used? will it be bettering the world at large?&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;"If I am not for myself, who will be for me?"

&lt;ul&gt;
&lt;li&gt;self-interest can mean asserting yourself among others and that's not a bad thing!&lt;/li&gt;
&lt;li&gt;your interest is among others and it matters&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;We are facing mental health crises (loneliness, etc.) and it's affecting all of us: adults and youths alike&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;webRTC&lt;/strong&gt;: real-time communication

&lt;ul&gt;
&lt;li&gt;open web standard and available as regular JS APIs in the majority of browsers&lt;/li&gt;
&lt;li&gt;it supports video, voice, and generic data to be sent between peers&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Ben mentioned two apps he built: 

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/nexmo-community/rails-video-watch-party-app"&gt;a video-sharing app&lt;/a&gt; he built for his son's birthday party,&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/bencgreenberg/school-health-declaration-automation"&gt;a gem he published&lt;/a&gt; that uses web-scraping to automate school form submission (btw. &lt;a href="https://dev.to/bengreenberg/automate-school-forms-with-web-scraping-in-ruby-2c3j"&gt;his blog post on building this&lt;/a&gt; is amazing)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;the more you help yourself, the more you help others&lt;/strong&gt; ✨&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#side-notes"&gt;
  &lt;/a&gt;
  Side notes:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I love Ben's attitude, kindness, and jokes&lt;/li&gt;
&lt;li&gt;"You can't escape JavaScript ;-; " - Ben 😹&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#read-more"&gt;
  &lt;/a&gt;
  Read more
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API"&gt;webRTC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/bengreenberg/automate-school-forms-with-web-scraping-in-ruby-2c3j"&gt;Blog: Automate School Forms with Web Scraping in Ruby&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>techtalks</category>
      <category>rails</category>
    </item>
    <item>
      <title>Slow and Steady: Converting Sentry’s Entire Frontend to TypeScript</title>
      <author>Schaeffer</author>
      <pubDate>Tue, 13 Apr 2021 19:59:24 +0000</pubDate>
      <link>https://dev.to/sentry/slow-and-steady-converting-sentry-s-entire-frontend-to-typescript-3g17</link>
      <guid>https://dev.to/sentry/slow-and-steady-converting-sentry-s-entire-frontend-to-typescript-3g17</guid>
      <description>&lt;p&gt;Recently, Sentry converted 100% of its frontend React codebase from JavaScript to TypeScript. This year-long effort spanned over a dozen members of the engineering team, 1,100 files, and 95,000 lines of code.&lt;/p&gt;

&lt;p&gt;In this blog post, we share our process, techniques, challenges, and ultimately, what we learned along this journey.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-pitch"&gt;
  &lt;/a&gt;
  The pitch
&lt;/h2&gt;

&lt;p&gt;Back in 2019, we were shipping more frontend bugs than what was acceptable. After looking at the underlying causes of these incidents, it became clear that many of these bugs could have been prevented by static analysis and type checking.&lt;/p&gt;

&lt;p&gt;During that year’s Hackweek event, Lyn Nagara, Alberto Leal, and Daniel Griesser pitched introducing TypeScript to the Sentry frontend. This team bootstrapped the TypeScript compiler to our build process as well as converted a few non-trivial views — and their related components — to TypeScript.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hackweek is an event that takes place once a year, giving all Sentry employees the opportunity to set aside their usual work to focus solely on innovative projects and ideas. Hackweek has given birth to numerous applications and tools that are now important parts of our product, like the recently launched &lt;a href="https://blog.sentry.io/2021/03/16/building-dark-mode"&gt;Dark Mode project&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nbt4bRSI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yl6lu1bktyvwpokvez9f.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nbt4bRSI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yl6lu1bktyvwpokvez9f.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Typescript project presentation during Hackweek 2019&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After considering the presentation, we felt Typescript was a strong fit for Sentry because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Several classes of bugs could be detected — and eliminated — during compilation.&lt;/li&gt;
&lt;li&gt;We could improve the developer experience through editor integrations such as auto-completion, faster code navigation, and inline compiler feedback.&lt;/li&gt;
&lt;li&gt;We could reduce the need for API documentation, as type annotations help produce self-describing code.&lt;/li&gt;
&lt;li&gt;TypeScript has an active community with a clear and maintained development &lt;a href="https://github.com/Microsoft/TypeScript/wiki/Roadmap"&gt;roadmap&lt;/a&gt; in addition to rapid &lt;a href="https://github.com/microsoft/TypeScript/releases"&gt;releases&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Many of the libraries we use (including React) already have &lt;a href="https://github.com/borisyankov/DefinitelyTyped"&gt;type definitions&lt;/a&gt; available.&lt;/li&gt;
&lt;li&gt;TypeScript can be adopted incrementally. That meant we can start writing new code with TypeScript and incrementally convert over time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There were some potential drawbacks of adopting TypeScript, though:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It’s a large time investment. Our frontend code is non-trivial in scope, so it would take significant effort to convert it. That complexity meant additional build time.&lt;/li&gt;
&lt;li&gt;We would need to educate the frontend team in TypeScript and support them as they learned.&lt;/li&gt;
&lt;li&gt;TypeScript and JavaScript would need to coexist in the code base for a significant period of time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#maturing-the-prototype"&gt;
  &lt;/a&gt;
  Maturing the prototype
&lt;/h2&gt;

&lt;p&gt;Shortly after Hackweek, excitement was high and a more formal proposal was brought to our Frontend Technical Steering Committee (TSC). This group meets every two weeks to guide our frontend architecture. While TypeScript wasn’t among the “winning” projects for Hackweek, we were confident that it would be a worthwhile investment that would ultimately pay off in the long run.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1ZOWeDGo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1y5ctrzjg4ro3vctftbw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ZOWeDGo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1y5ctrzjg4ro3vctftbw.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Sentry’s first Typescript Pull Request:&lt;/em&gt; &lt;a href="https://github.com/getsentry/sentry/pull/13786"&gt;https://github.com/getsentry/sentry/pull/13786&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#overall-strategy"&gt;
  &lt;/a&gt;
  Overall strategy
&lt;/h2&gt;

&lt;p&gt;We broke our high-level strategy into several phases:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Educate&lt;/strong&gt;. In this phase, we needed to let people know that TypeScript was coming, and provide the right learning resources to help folks onboard.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;New code in TypeScript&lt;/strong&gt;. In this phase, we needed to have all new development being done in TypeScript. If we continued to create new JavaScript, we would never finish the conversion phase.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Conversion&lt;/strong&gt;. In this phase, all new work would be done in TypeScript, giving us a finite number of files to convert. Then it is “just work”™️.&lt;br&gt;
Our most controversial decision was agreeing to not undergo any other major refactors until the code base was converted 100% to TypeScript. This meant we would not take on other quality-of-life improvements — things like upgrading our state-management library or introducing React hooks — until the TypeScript conversion was complete.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#educating-the-team"&gt;
  &lt;/a&gt;
  Educating the team
&lt;/h2&gt;

&lt;p&gt;Early on, we recognized that the broader development team at Sentry would need additional resources and materials to learn TypeScript. To help folks who were new to TypeScript, we shared a list of introductory articles and resources for configuring various editors.&lt;/p&gt;

&lt;p&gt;Additionally, members of the TSC took the time to review code and help educate those folks eager to learn TypeScript. Having this support system in place helped create more TypeScript “believers” who would, over time, write new code in TypeScript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--npLwZDZZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jd4yhtflwop7y4nouiqd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--npLwZDZZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jd4yhtflwop7y4nouiqd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Example of a TypeScript code review.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FoV-0pNa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oakbsa0zh1w6aj47p0r7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FoV-0pNa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oakbsa0zh1w6aj47p0r7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Slack shoutout for TypeScript conversion.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#taking-root-in-green-fields"&gt;
  &lt;/a&gt;
  Taking root in green fields
&lt;/h2&gt;

&lt;p&gt;While we were educating the broader team, folks who were keen on TypeScript not only began building out their new feature work in TypeScript, but also found opportunities to convert files which overlapped with new features. This approach let us build up our type definitions and gain more experience writing Typescript in lower-risk parts of the product that were not exposed to customers.&lt;/p&gt;

&lt;p&gt;As the broader team gained more experience and found value in what TypeScript provides, they naturally stopped creating more JavaScript. While we never used tooling to stop people from creating new JavaScript, our education efforts and social agreements helped prevent new JavaScript from being created.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#work-out-from-the-core-and-in-from-the-leaves"&gt;
  &lt;/a&gt;
  Work out from the core — and in from the leaves
&lt;/h2&gt;

&lt;p&gt;Once TypeScript had a firm foothold, we needed a strategy to work through the 1,100+ files that needed conversion. Here, we audited our imports, ordering them by how frequently each module was imported. We used this list to prioritize which modules were converted first. By converting frequently used modules, we would be able compound our gains as we converted files.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r1PFD9I5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1b2bs41dfd353up4gxxc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r1PFD9I5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1b2bs41dfd353up4gxxc.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The list we used to prioritize and assign conversion work based on import frequency.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This approach worked well in the beginning, as some modules have dramatically more imports than others. But because most of our modules have fewer than 10 imports, we quickly plateaued. Our next approach was starting from “leaf node” modules that are imported in one place. Converting these files enabled us to accumulate progress more quickly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#all-we-have-to-do-now-is-convert-1100-files"&gt;
  &lt;/a&gt;
  All we have to do now is convert 1,100+ files…
&lt;/h2&gt;

&lt;p&gt;Like many software projects, our initial rollout plans were overly ambitious. We started off by retroactively calculating a timeline where we completed within 2019. With approximately 15 weeks before the end of the year, that meant would need to convert approximately 74 files per week. This assumed that we would not accumulate any additional JavaScript files (we did) and that we could sustain that effort (we didn’t). After eight weeks, we checked in on our progress.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CNJy_NCo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/inhw4g2erp7b36ohvsuv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CNJy_NCo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/inhw4g2erp7b36ohvsuv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Despite promising progress during our first 8 weeks, we knew we weren’t going to finish in 2019.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It was obvious that we were not going to complete it in 2019. Given projections from the current effort, a more likely completion date would be mid-2020.&lt;/p&gt;

&lt;p&gt;During the fall and winter of 2019, progress was slow. People were focusing on meeting product goals and didn’t have as much time to devote to TypeScript conversion. In February of 2020, we reached equilibrium. We were no longer making new JavaScript and our backlog of conversion work became fixed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R_UkMvnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gl79ewou9ek6g1seoh3z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R_UkMvnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gl79ewou9ek6g1seoh3z.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Our conversion progress over time. Note there are several lulls as well as periods of renewed activity.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#challenges-encountered"&gt;
  &lt;/a&gt;
  Challenges encountered
&lt;/h2&gt;

&lt;p&gt;Although the introduction of TypeScript was definitely a game-changer, we also faced a few challenges during the conversion process. Most of these were due to interoperability issues between TypeScript and React:&lt;/p&gt;

&lt;p&gt;1.&lt;strong&gt;Default Props&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When using &lt;code&gt;defaultProps&lt;/code&gt; on classes, TypeScript is able to correctly infer that the props are not required when using the component, but when using Higher Order Components, the types for &lt;code&gt;defaultProps&lt;/code&gt; generally don’t work, and the previously optional properties would become required.&lt;/p&gt;

&lt;p&gt;An example of how &lt;code&gt;defaultProps&lt;/code&gt; interacts poorly with Higher Order Components is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;statsPeriod&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DEFAULT_STREAM_GROUP_STATS_PERIOD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;canSelect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;withChart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;useFilteredStats&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;selection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GlobalSelection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;organization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Organization&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;displayReprocessingLayout&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;hasGuideAnchor&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;memberList&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="nx"&gt;onMarkReviewed&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;itemIds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;showInboxTime&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;defaultProps&lt;/span&gt;

&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;State&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...};&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;StreamGroup&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;defaultProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defaultProps&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;withGlobalSelection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;withOrganization&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;StreamGroup&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Normally, TypeScript would be able to use the &lt;code&gt;defaultProps&lt;/code&gt; attribute of our class component to infer that those properties are not required. However, when wrapped in a Higher Order Component, TypeScript displays the following errors:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sn8Br_aW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e5xui5azt6bttuu0v5po.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sn8Br_aW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e5xui5azt6bttuu0v5po.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here our solution was to use &lt;code&gt;Partial&lt;/code&gt; on the &lt;code&gt;defaultProps&lt;/code&gt; and rely on React to fill in the default values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;defaultProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;statsPeriod&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DEFAULT_STREAM_GROUP_STATS_PERIOD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;canSelect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;withChart&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;useFilteredStats&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;selection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;GlobalSelection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;organization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Organization&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;displayReprocessingLayout&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;hasGuideAnchor&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;memberList&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
      &lt;span class="nx"&gt;onMarkReviewed&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;itemIds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;showInboxTime&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;Partial&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;defaultProps&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;State&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...};&lt;/span&gt;

    &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;StreamGroup&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;defaultProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defaultProps&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;withGlobalSelection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;withOrganization&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;StreamGroup&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find a more complete implementation of &lt;a href="https://github.com/getsentry/sentry/blob/master/src/sentry/static/sentry/app/components/stream/group.tsx"&gt;this approach here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;2.&lt;strong&gt;Libraries adding incorrect types&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One downside to relying on the type definitions in DefinitelyTyped is that occasionally the library types are not written by the maintainers. Instead, community users contribute types, and because of that some types are missing or incorrectly defined. We encountered this with the versions of &lt;a href="https://echarts.apache.org/en/index.html"&gt;ECharts&lt;/a&gt; and &lt;a href="https://github.com/reflux/refluxjs"&gt;Reflux&lt;/a&gt; we were using. Our solution here was to add additional type definitions in our code.&lt;/p&gt;

&lt;p&gt;3.&lt;strong&gt;React.forwardRef is not compatible with generics&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using generic types with &lt;code&gt;React.forwardRef&lt;/code&gt; is not directly possible, as it requires concrete types. In more detail, the &lt;code&gt;forwardRef&lt;/code&gt; function has only one parameter named &lt;code&gt;render&lt;/code&gt;. The type of this parameter is &lt;code&gt;ForwardRefRenderFunction&lt;/code&gt;, which is not a generic function declaration, so higher order function type inference cannot propagate free type parameters on to the calling function &lt;code&gt;React.forwardRef&lt;/code&gt;.  We had to make &lt;a href="https://github.com/getsentry/sentry/pull/23766/files"&gt;compromises and use “any” when this situation arose&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sustaining-motivation-and-energy"&gt;
  &lt;/a&gt;
  Sustaining motivation and energy
&lt;/h2&gt;

&lt;p&gt;Toward the end of the conversion, many contributors were feeling the burning toil this project was having.&lt;/p&gt;

&lt;p&gt;In the summer of 2020 – a full year after this project began – we crossed the 70% threshold. This revitalized folks, as we knew the end was near. We were able to sustain that energy and focus though the summer and fall by using part of our TSC meeting as a check in and collecting “conversion pledges” for the next meeting. This introduced a light-hearted social game that helped us stay focused.&lt;/p&gt;

&lt;p&gt;In addition, our fantastic tools team introduced a slackbot that would allow us to track progress on demand. Seeing the number go up every day was a big motivator in the final stages, so much so it’s something we’ll likely to use again. You can find the early versions of that bot &lt;a href="https://github.com/getsentry/TypeScript-slack-bot"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-end-finally"&gt;
  &lt;/a&gt;
  The end, finally
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QOBm6LPZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r0fc1zd8c5nr34x9po9e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QOBm6LPZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r0fc1zd8c5nr34x9po9e.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After 18 months of migrating our frontend code base to TypeScript, the day everyone at Sentry had been working toward had finally arrived. When we started on our TypeScript journey, we had 1,100+ files to convert. Now, we have over 1,915 Typescript files. It’s worth mentioning that at no time was a GitHub check added to block new JavaScript files. After developers saw the benefits that TypeScript would bring, writing new code in TypeScript was an organic choice.&lt;/p&gt;

&lt;p&gt;With TypeScript, we now have an extra layer of protection in our code, which means we’re able to ship with greater confidence, higher productivity, and most importantly, fewer bugs. Some of our newer frontend developers have never seen a production incident caused by a frontend change.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#looking-back"&gt;
  &lt;/a&gt;
  Looking back
&lt;/h2&gt;

&lt;p&gt;Like everything in life, we also learned a few things along this journey.&lt;/p&gt;

&lt;p&gt;1.&lt;strong&gt;Incremental conversion is key&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Our strategy to gradually migrate our files to TypeScript worked out well. We were able to balance converting our code to TypeScript, without delaying important product work. It’s important to highlight that from the beginning, we were not in a hurry to achieve our goal, but instead we wanted to proceed carefully and do a great job.&lt;/p&gt;

&lt;p&gt;2.&lt;strong&gt;Stay current with TypeScript releases&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;During our conversion process, several new releases of TypeScript came out. Each one helped us refine our types further with new features like optional chaining, nullish coalesce, named tuples, and more. While upgrading did take additional effort, the benefits were well worth it. It’s why we recommend staying as current as you can with TypeScript releases.&lt;/p&gt;

&lt;p&gt;3.&lt;strong&gt;Gradually build complex types&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At the beginning of the migration, it was impossible to know the correct type of everything. After all, Sentry possesses a large code base, and not everyone is familiar with all parts of the application. Which meant we had to build our more complex types incrementally. As we were converting files, we became more familiar with their types and as we converted related files, we were able to better identify whether the types we had previously defined were updated with the new insights.&lt;/p&gt;

&lt;p&gt;4.&lt;strong&gt;Use TODO Comments to note future work&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Sentry, we generally use TODO comments in the code to help us track something we need to review later. This approach proved to be very useful during our migration to TypeScript. When we encountered an unclear type, or problematic component we would leave a &lt;code&gt;TODO(ts)&lt;/code&gt; for later review. We are now incrementally reviewing the TODO list and further refining and improving our types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Frame&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app/types&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// TODO(ts): define correct stack trace type&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getRelevantFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stacktrace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Frame&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;stacktrace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasSystemFrames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;stacktrace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;frames&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;stacktrace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;frames&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stacktrace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;frames&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stacktrace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;frames&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inApp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;frame&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// this should not happen&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;stacktrace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;frames&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;stacktrace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;frames&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;getRelevantFrame&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#moving-forward"&gt;
  &lt;/a&gt;
  Moving forward
&lt;/h2&gt;

&lt;p&gt;Migrating to TypeScript was just the beginning. The frontend team at Sentry will continue to gradually improve types, making sure they are correct as possible, including the removal of all React PropTypes.&lt;/p&gt;

&lt;p&gt;We’re also seriously considering introducing end-to-end type safety, so that a backend engineer can make changes in the API without unknowing breaking clients, and frontend engineers can be confident in the data that will be coming back from the server.&lt;/p&gt;

&lt;p&gt;This important achievement would not have been possible without the patience, persistence, attention to detail, passion and hard work of everyone involved. A big thank you to all the Sentaurs who contributed to this enormous effort.&lt;/p&gt;

&lt;p&gt;Eager for a challenging project like this one? Then join us at Sentry. &lt;a href="https://sentry.io/careers/"&gt;We are hiring!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>react</category>
      <category>javascript</category>
      <category>sentry</category>
    </item>
    <item>
      <title>Reflecting on My Voyage as an Intern to a Developer</title>
      <author>Shravan Kumar B</author>
      <pubDate>Tue, 13 Apr 2021 19:58:52 +0000</pubDate>
      <link>https://dev.to/imshravan/reflecting-on-my-voyage-as-an-intern-to-a-developer-1d6k</link>
      <guid>https://dev.to/imshravan/reflecting-on-my-voyage-as-an-intern-to-a-developer-1d6k</guid>
      <description>&lt;p&gt;Hi everyone! This is a revised version of my article from &lt;a href="https://ohmyscript.com/2021/04/13/reflecting-on-my-voyage-as-an-intern-to-a-developer/"&gt;my personal blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is an article that expresses a few major learnings I would like to take away and mistakes I wouldn’t want to commit again from my journey, and maybe stand out like a guide book for those who are starting their career in Software Industry. I have tried to put up my learning and takeaways from my voyage in the simplest way I can.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n0Ic3ql8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2400/1%2AcD-wC5pUgL-mSI8bpyYF9A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n0Ic3ql8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2400/1%2AcD-wC5pUgL-mSI8bpyYF9A.png"&gt;&lt;/a&gt;&lt;br&gt;Learning is a Continuum Concept, where at every level and stage of your life, you learn and take away something from your previous experiences
  &lt;/p&gt;

&lt;p&gt;I am closing in on completing two years of my career at a startup, starting as a Graduate Intern Developer to Junior Developer and what a journey it has been. I have learnt a lot during the course of this ride. I explored newer nooks of the developmental and DevOps technology. I have made mistakes and learnt from them.&lt;/p&gt;

&lt;p&gt;During the Internship experience, I encountered a bunch of challenges that are very much typical to all, who is going through a transition from the College Graduate phase to the Working Professional phase. Likewise, I am going to address the challenges that I had faced along with the changes in my perception while growing as a working professional.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some takeaways so far from my experience:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1. &lt;strong&gt;Tutorial Hell&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Initially, when we start out as newbies, it is quite common that we prefer to learn videos from Youtube Tutorials, Udemy or any other LMS application. Some might prefer following and reading from some open blogs like Freecodecamp or Medium blogs.&lt;/p&gt;

&lt;p&gt;Now, let us first understand what is Tutorials Hell?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tutorial Hell&lt;/strong&gt; is a typical situation, where you find a lot of tutorials and you are not sure about which one to follow and learn from. &lt;br&gt;
Assuming, let us say somehow you figured out which tutorial to learn from. Now you struggle with what to do/build with what you have learnt.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Initially, I had a very hard time getting through this situation. I was learning Node.js and I was very new to the Event-Driven Programming Paradigm and had a lot of confusions about fundamentals, despite I had followed one of the many tutorials available.&lt;/p&gt;

&lt;p&gt;Generally speaking, I do not have any issue with tutorials, but I find that most of the tutorials, always tend to miss 4–5 core concepts, as they expect you to have a technical grasp of the same. Those missed out concepts create a lot of voids as you go ahead.&lt;/p&gt;

&lt;p&gt;Let me give you an instance from my own experience. If you have worked on any JS-based framework/libraries, you must be knowing different ways of handling asynchronous operations (Callbacks, Promises, async-await). Those of you who do not know, do not worry, it is just 3 different ways of handling async operations. The point being, Callbacks are a real pain, whereas Promises and async-await is a better and cleaner way of writing code.&lt;/p&gt;

&lt;p&gt;Initially, when I started out writing RESTful APIs, I followed the Callback way of handling asynchronous operation, because the tutorial I had followed did not bother to speak about Promises and async-await. For around a month or so, imagine my life, handling every DB calls and asynchronous functions as callbacks. It was too difficult to write simple logic, despite the problem statement was quite straightforward.&lt;/p&gt;

&lt;p&gt;With time, as I kept exploring different technologies, one thing that I realised is that nothing beats the &lt;strong&gt;OFFICIAL DOCUMENTATION&lt;/strong&gt;. Every technology that you want to learn, has its own Learning Management System or its own Official Documentation published, which surely covers every aspect of the technology that you are learning. Since, then any technology that I want to explore, I always prefer to follow the official documentation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--171qcCU_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/300/1%2AdEaEwTrhabKDUxcmDpttDA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--171qcCU_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/300/1%2AdEaEwTrhabKDUxcmDpttDA.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;Avoid Cobwebbed by tutorials
  &lt;/p&gt;

&lt;p&gt;Finally, after we learn from the resource, follows another overwhelming situation where you are more confused about what to do with the updated knowledge portfolio?&lt;/p&gt;

&lt;p&gt;Initially, since I was already working on a project, I could easily fill in whatever I learnt to fulfil the project requirements. It allowed me to constantly learn and explore.&lt;/p&gt;

&lt;p&gt;There could be scenarios where you learn technologies out of the scope of your project you are working on. How to deal with situations in that scenario?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5sqJAlGr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AV8wl8X5-fnrwRhNX3125Hg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5sqJAlGr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AV8wl8X5-fnrwRhNX3125Hg.jpeg" alt=""&gt;&lt;/a&gt;&lt;br&gt;Difference between Knowing vs Understanding
  &lt;/p&gt;

&lt;p&gt;The best thing one should do after learning technology is &lt;strong&gt;BUILDING SOMETHING&lt;/strong&gt;. Build, Create something you want. Be it simply for fun. Does not really have to be a real-time useful product. It is simply a product that you can apply conceptual learning to practicality.&lt;/p&gt;

&lt;p&gt;If it’s a new programming language, you can explore more by trying to solve problems from HackerRank or other competitive platforms. Maintain a GitHub Repository to keep track of whatever you are learning with simple documentation for your understanding. This allows you to have your own documentation that you can look back into whenever you want. Creating and documenting the Proof of Concepts is a deal.&lt;/p&gt;

&lt;p&gt;Meanwhile, &lt;strong&gt;KEEP CODE-READING&lt;/strong&gt; from different GitHub repositories. I used to randomly code-read just to get a glimpse of different approaches to solving problems and writing code. This actually helped me improvise the way I wrote the code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7791fnIh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AG6IMBGB--Xr0iHrajQROpA.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7791fnIh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AG6IMBGB--Xr0iHrajQROpA.jpeg" alt=""&gt;&lt;/a&gt;&lt;br&gt;Open Source Contribution allows you to spread your wings and collaborate with people having different ideologies.
  &lt;/p&gt;

&lt;p&gt;Open Source Contribution allows you to spread your wings and collaborate with people having different ideologies.&lt;/p&gt;

&lt;p&gt;One more way to get through this situation is to &lt;strong&gt;CONTRIBUTE TOWARDS&lt;/strong&gt; &lt;strong&gt;OPEN SOURCE&lt;/strong&gt;. Try to search for some Open Source Projects built on top of the technology and try actively contributing towards it or recreating your own project as a Proof of Concept.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-build-products-not-junk"&gt;
  &lt;/a&gt;
  2. Build Products, not Junk
&lt;/h1&gt;

&lt;p&gt;This seriously was a huge misconception I had initially, where I thought trying to solve the problem statement and coming up with a solution, is the most important thing. Probably, because of an attitude sometimes your graduate syllabus forces you to inculcate, where finding a solution is considered important than any other factors.&lt;/p&gt;

&lt;p&gt;There are two factors that we tend to fail to focus upon, firstly &lt;strong&gt;END-USER&lt;/strong&gt; of the application and secondly &lt;strong&gt;CLARITY over USER REQUIREMENTS&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hR1WCGZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2A1cujLlFONgNdPC5RtF1FrA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hR1WCGZw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2A1cujLlFONgNdPC5RtF1FrA.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;What user wanted vs What you delivered
  &lt;/p&gt;

&lt;p&gt;Sometimes we fail to understand the user requirements. At times, we misinterpret given User Requirement, due to our individual perception and experience, which, of course, is not a mistake. But, it is very important to clarify what you have understood with the client/user/product-owner.&lt;/p&gt;

&lt;p&gt;It is always better to ask, in the very initial stage of the project, with the product-owner/client, whether your understanding of the requirements are accurate or not. When you question the client in the very first stage, you won’t end up building a product that was not required.&lt;/p&gt;

&lt;p&gt;Similarly whenever, requirement pitches in between the development cycle, ensure you clarify that as well, just to make sure that your project doesn’t end up going south.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9MzGs11n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/602/1%2Ax7B9p3FkuOID95MPyu3nIA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9MzGs11n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/602/1%2Ax7B9p3FkuOID95MPyu3nIA.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;&lt;strong&gt;Bad UI/UX&lt;/strong&gt;: Label [PUSH/PULL] and Handlebars.&lt;br&gt;&lt;br&gt;
Why? Do I need the handlebar to push?
  &lt;/p&gt;

&lt;p&gt;Always focus on building the product on the basis of how the product owner (End-User) wants it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zDjwg6SU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/658/1%2Ap6-KTu5kcpbD-fVBPIgE9A.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zDjwg6SU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/658/1%2Ap6-KTu5kcpbD-fVBPIgE9A.jpeg" alt=""&gt;&lt;/a&gt;&lt;br&gt;&lt;strong&gt;Bad Design Aesthetics&lt;/strong&gt;: A button showing the corresponding number and another actual button to click the floor number
  &lt;/p&gt;

&lt;p&gt;When you are building the product, ask yourself, “&lt;strong&gt;As an owner of the product, does this make my work easier? Does this solve my problem? Is this solution feasible? Is this the only approach available? Are there better approaches?&lt;/strong&gt;”.&lt;/p&gt;

&lt;p&gt;By the time, your research is done, and have it evaluated based on the above factors, you will have a conclusive and evident answer, portraying clarity over how to go about building the product with a better User Experience.&lt;/p&gt;

&lt;p&gt;Keep constantly in touch with end-user and build the product always iteratively.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-knowing-the-best-practices"&gt;
  &lt;/a&gt;
  3. Knowing the Best Practices
&lt;/h1&gt;

&lt;p&gt;To those who do not know what do I mean by &lt;strong&gt;Best Practices&lt;/strong&gt;? Best Practices are evidently proved guidelines with a strong theory behind them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x2KH9E9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2Ac6GeX3zdBru2d9yHjp-N4Q.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x2KH9E9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2Ac6GeX3zdBru2d9yHjp-N4Q.jpeg" alt="BigSur wallpaper"&gt;&lt;/a&gt;&lt;br&gt;Daily Healthy Routine is the closest analogy to the Best Practices
  &lt;/p&gt;

&lt;p&gt;Just like how we follow certain practices on daily basis like bathing, washing hands after eating, and so on, to maintain our hygiene and keep ourselves neat and tidy. Similarly, in software development, we follow a certain set of proved norms, just to ensure that the product we are building doesn’t rot with time or newer requirements.&lt;/p&gt;

&lt;p&gt;Every technology you learn, there are always best practices tagged along with it. It is quite difficult to remember all the best practices. Over time, one thing that I realised and noticed about the &lt;strong&gt;BEST PRACTICES&lt;/strong&gt; is that most of them try to learn and recollect the best practices. And fail to understand the theory behind the practice that we should follow.&lt;/p&gt;

&lt;p&gt;If you understand the theory behind the practice, it wouldn’t be difficult to remember them while implementing it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Practice tells you that things are good or bad; theory tells why.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let us take a simple instance, whenever we want to scale your project structure, how do you figure that out?&lt;br&gt;&lt;br&gt;
We have a proposed model called the &lt;strong&gt;Scaling Cube&lt;/strong&gt; Theory, which describes the basic principle behind the model and why should you consider it when scaling the project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7zut4uHe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/427/1%2Acg9znQR8I2orO8ooLMCv4w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7zut4uHe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/427/1%2Acg9znQR8I2orO8ooLMCv4w.png" alt="BigSur wallpaper"&gt;&lt;/a&gt;&lt;br&gt;&lt;strong&gt;Scale Cube&lt;/strong&gt;: Service Scalability Best Practices
  &lt;/p&gt;

&lt;p&gt;Each axis of the indicates, as shown below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  X-axis: &lt;strong&gt;Scaling by cloning&lt;/strong&gt;, otherwise known as Horizontal Duplication. Usually monolithic projects when deployed, have multiple cloned copies of an application behind a load balancer. When you have only one service to deal with, we are mostly advised to go with &lt;strong&gt;&lt;em&gt;Monolithic Architecture&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;  Y-axis: &lt;strong&gt;Scaling by splitting different services&lt;/strong&gt;, known as decomposition. Usually, projects with complex problems statements and several services, are often advised to split the application into multiple distinct services. When you take this kind of decomposition approach, we call it &lt;strong&gt;&lt;em&gt;Microservice Architecture&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;  Z-axis: &lt;strong&gt;Scaling by splitting similar things&lt;/strong&gt;, known as Data Partitioning. In projects where robustness is a very high priority, improving Infrastructure from the Data Storage point of view helps a lot. In this kind of approach, there are several replicated copy of the code, but each of them is accessible only to a subset of the data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you see in the above instance, by knowing the theory behind the Scaling Cube, it is easier for us to understand which approach to be considered when we are building the project architecture, based on the business requirements of the project. When we apply Scaling Cube, it is easier to evaluate whether or not to scale the project.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-debugging"&gt;
  &lt;/a&gt;
  4. Debugging
&lt;/h1&gt;

&lt;p&gt;At the early stage of my learning, I devoted a lot of my time to debugging, since I was very new to the technology I was working on. And I did not have the grasp of the errors and crashes that followed. I always used to seek help from &lt;strong&gt;StackOverflow&lt;/strong&gt; and &lt;strong&gt;Grepper&lt;/strong&gt; extension for finding the cause and origin of the bug and do some quick fixes. As I kept exploring, I became quite familiar with some set of errors.&lt;/p&gt;

&lt;p&gt;But as I kept exploring new services and stacks, sometimes it was due to bugs in packages that I am using, it so used to happen, where I encounter some new types of error. I couldn’t afford to spend more time to debug and resolve errors, so I started following a simple backtracking method to debug called &lt;strong&gt;Five whys&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Debugging is a sort of aggravating task when you can not figure out the origin and cause of the error. The five whys method was a very basic technique, which helped me determine the root cause of the error in the easiest way, by iteratively asking the question “Why?”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xX6KQIy4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/400/1%2A9vUBXY9HW42xWutui8QeIw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xX6KQIy4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/400/1%2A9vUBXY9HW42xWutui8QeIw.png" alt="BigSur wallpaper"&gt;&lt;/a&gt;&lt;br&gt;5 Whys: Technique used by Toyota Motors for finding manufacturing defects
  &lt;/p&gt;

&lt;p&gt;I used loggers to ensure from where exactly the issue has originated. This saves a lot of time. It is important to find the origin and root cause of the error.&lt;/p&gt;

&lt;p&gt;Also ensure that you document the tracked bug, which is at the application level. It is important to document the bug, maintain the history of bug tracks and record the solution for the bug reported.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-when-you-have-to-explore-something-new-create-proof-of-concept"&gt;
  &lt;/a&gt;
  5. When you have to explore something new, create Proof of Concept
&lt;/h1&gt;

&lt;p&gt;Whenever a new problem statement pitches in, something that you have not worked on. Always create a Proof of Concept for the same. Try out different possible solutions for the same. And do some research work on the different possible solution and make a simple Proof of Concept with enough documentation(for your teammates to follow up). Have a healthy discussion and take opinions from your team.&lt;/p&gt;

&lt;p&gt;Proof of Concept is not final implementation, rather they are intended to provide proof that a given system would work effectively for the problem statement posed. Take feedback on the PoC, and also do not forget to keep them in your GitHub Repository for future reference for yourself and others.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-unit-tests-makes-your-code-better"&gt;
  &lt;/a&gt;
  6. Unit Tests makes your code better
&lt;/h1&gt;

&lt;p&gt;I learnt this the hard way, but honestly speaking, Unit tests are the best way to catch bugs. In the initial stage, I hardly knew and cared about writing Unit Tests for the APIs, I used to often find myself concentrating on completing the tasks in the expected slot with good quality.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RyqzFW3U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/225/1%2AjSLR-uO-8cBDuAvvWA6BKQ.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RyqzFW3U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/225/1%2AjSLR-uO-8cBDuAvvWA6BKQ.jpeg" alt="BigSur wallpaper"&gt;&lt;/a&gt;&lt;br&gt;&lt;strong&gt;Unit Testing&lt;/strong&gt;: Verify if the piece of code is doing what it is intended to do
  &lt;/p&gt;

&lt;p&gt;Writing Unit Tests helps you to verify that the code is doing what it is intended to do. Unit tests always help and provide strong backbone support to maintain your code and safely refactor them from time to time. Sometimes, Unit Tests helped me to discover edge cases that I have missed upon. Since the time, I have learnt to write Unit Tests, I have always made it a habit to write Unit Tests for the code I write, which gives me more confidence in the quality of the code I deliver.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-maintain-documentation"&gt;
  &lt;/a&gt;
  7. Maintain Documentation
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Documentation&lt;/strong&gt; is always the best way to define a feature from the User’s perspective. Before developing the feature, document the feature first. As a developer, always maintain documentation for the feature you are building.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UovZwyV2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AP9uD6rvLW1FhNPoFOIdz6w.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UovZwyV2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AP9uD6rvLW1FhNPoFOIdz6w.jpeg" alt="BigSur wallpaper"&gt;&lt;/a&gt;&lt;br&gt;“Documentation is a love letter that you write to your future self” &lt;br&gt;
-Twitter&lt;br&gt;

  &lt;/p&gt;

&lt;p&gt;Whenever you can, ensure that you have the document written has been reviewed by the end users and stakeholders before any development begins. As and when the feature is modified during development, make sure that the corresponding changes are documented. Just as documentations are modified, so should be the Unit Tests.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#8-writing-blogs"&gt;
  &lt;/a&gt;
  8. Writing Blogs
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Writing blogs&lt;/strong&gt; is useful for many reasons. Writing blogs will help you realise if you have understood the concepts well and if you are able to explain them in a way others can understand. As developers, we mostly work on creating and adding values to the product, we are building maybe by resolving a bug or implementing new features, which most of them do, but writing blogs would help you get a better understanding of the concepts and gives you a very good feeling about helping people. Some day, someone might read your content and may be able to produce a feature required for their project through your guidance. Your experience can help someone get proper guidance.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#9-contribute-towards-open-source"&gt;
  &lt;/a&gt;
  9. Contribute towards Open Source
&lt;/h1&gt;

&lt;p&gt;Open Source has a great community built around. Contributing and being part of the Open Source Community allows me to explore and embrace newer perspectives. Contributing to Open Source helps me a lot in improvising my problem-solving skills.&lt;/p&gt;

&lt;p&gt;I get to meet like-minded people and they help me inspire to become a better developer. It is always nice to be part of a peer, passionate about developing and building products. Trust me, it feels great to have your name as a contributor to someone’s project, which boosts your positivity and confidence.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#10-always-be-open-to-continuous-learn"&gt;
  &lt;/a&gt;
  10. Always be Open to Continuous Learn
&lt;/h1&gt;

&lt;p&gt;Firstly make sure that you build upon your fundamentals. Keep your fundamentals strong. If your fundamentals are strong, switching between similar technologies and exploring them would not be a difficult task.&lt;/p&gt;

&lt;p&gt;Keep exploring new technologies. The Software and Technology Industry is an everlasting industry that keeps expanding with time. As time evolves, the industry also keeps evolving with new technology arising every new day. Always ensure you are open to switch and learn, explore and practically work on those technologies.&lt;/p&gt;

&lt;p&gt;Read Technical and Non Technical books to keep yourself aware of the revolutionary changes happening in the industry. Keep reading blogs published by Major MNCs and have an understanding of their system design and architecture and the theory behind it.&lt;/p&gt;

&lt;p&gt;I always keep exploring different technologies, because it helps me have a wider perspective. Wider perspective helps you come out with better and creative solutions. I prefer to be a &lt;strong&gt;Generalizing Specialist&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A Generalizing Specialist is jack-of-all-trades, and master of a few&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#11-be-polite"&gt;
  &lt;/a&gt;
  11. Be polite
&lt;/h1&gt;

&lt;p&gt;Life becomes much easier as a developer when you start listening to others. Always have a certain level of humility when listening to others. It is very important to be open to different perspectives and opinions.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Every expert was once a beginner.&lt;/p&gt;

&lt;p&gt;You were a beginner before you reached this stage today.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Always be there for those who need your guidance and keep helping others learn and grow. In the process of guiding others and helping them expand their wings, there is a lot that you will explore and experience as well.&lt;/p&gt;

&lt;p&gt;These were some of the major takeaways from my journey as an Intern to a Developer. I hope all the beginners who are reading the article, will find these useful for your journey. Those who have already passed this phase might find it very much relatable.&lt;/p&gt;

&lt;p&gt;The post has been longer than expected, if you got this far, I appreciate your patience and thank you for your time.&lt;/p&gt;

&lt;p&gt;If you like the article, hit the like button, share the article and subscribe to the blog. If you want me to write an article on specific domain/technology I am provisioned in, feel free to drop a mail at &lt;a href="mailto:shravan@ohmyscript.com"&gt;shravan@ohmyscript.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Stay tuned for my next article.&lt;/p&gt;

&lt;p&gt;That’s all for now. Thank you for reading.&lt;/p&gt;

&lt;p&gt;Signing off until next time.&lt;br&gt;&lt;br&gt;
Happy Learning.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>productivity</category>
      <category>career</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>I Got a Tech Job in Under a Year. Here's How.</title>
      <author>Sandra Spanik</author>
      <pubDate>Tue, 13 Apr 2021 19:53:31 +0000</pubDate>
      <link>https://dev.to/sanspanic/i-got-a-tech-job-in-under-a-year-here-s-how-536p</link>
      <guid>https://dev.to/sanspanic/i-got-a-tech-job-in-under-a-year-here-s-how-536p</guid>
      <description>&lt;p&gt;&lt;em&gt;"Is this... an April fool's joke?"&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;...is what I asked the recruiter when he called me on the 1st of April to let me know I had gotten the job. It felt impossible, too good to be true - this was the first tech role I'd ever applied for, after all. Strictly speaking, even saying I applied for it is an exaggeration, because in truth, I was approached by a recruiter on LinkedIn. My portfolio page wasn't up yet (it still isn't), and my bootcamp was only 90% finished. On paper, I was less ready than many others out there. &lt;strong&gt;I couldn't believe my luck - I had actually secured a job offer from one of Europe's fastest growing tech companies.&lt;/strong&gt; For someone with no computer science degree and a background in mental health and administration, this was life-changing stuff.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;actual footage of my impostor syndrome kicking in the second I got the job&lt;/em&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/l3q2WKTvXa4AEC0xO/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img width="60%" src="https://i.giphy.com/media/l3q2WKTvXa4AEC0xO/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Despite what the admittedly clickbait-y title of this article suggests, it will not focus on me blowing my own trumpet and letting everyone know just how smart and uniquely awesome I am (&lt;em&gt;although, of course I am...&lt;/em&gt; 😏). Instead, &lt;strong&gt;I will offer some well-meaning advice and talk openly about my often challenging but ultimately rewarding experience of transitioning careers from mental health to tech in under a year, warts and all.&lt;/strong&gt; I will let you know what I did to get to where I am now, but importantly, I will also acknowledge the large role circumstances outwith my control played over the last year.&lt;/p&gt;

&lt;p&gt;Don't get me wrong - &lt;strong&gt;I've worked incredibly hard for this&lt;/strong&gt; - sweat, blood and literal tears went into the process. Of course I think I deserve the company's faith and I'm determined to continue growing and proving myself worth their trust. But I want to qualify my success with external factors that helped me get here. &lt;/p&gt;

&lt;p&gt;I've previously caught myself feeling jealous of people who wrote similar articles without acknowledging how much luck or support they had along the way. Social media is by design a place where we share our highlight reels, and more often than not, we remain silent about the uglier parts of our lives, or the privilege we get to benefit from. &lt;strong&gt;My aim is to be fully transparent,&lt;/strong&gt; and in doing so, prevent anyone reading this from feeling bad about themselves just because their job search or learning process might be taking longer than mine did.&lt;/p&gt;

&lt;p&gt;So whether you are a newbie starting to learn how to code or a bootcamp-graduate already in the market for your first tech job, keep reading, this series of articles is for you. &lt;strong&gt;You've got this. I promise.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;The focus of this series will be split across 3 topics, which I'll release over the coming days. If you're more interested in practical advice than my journey, fair enough, feel free to skip ahead to Part 2. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-my-coding-journey-the-good-the-bad-the-ugly"&gt;
  &lt;/a&gt;
  1. My Coding Journey - the Good, the Bad, the Ugly
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#2-what-i-wish-i-knew-when-i-started-coding"&gt;
  &lt;/a&gt;
  2. What I Wish I Knew When I Started Coding
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#3-interview-advice"&gt;
  &lt;/a&gt;
  3. Interview Advice
&lt;/h3&gt;

</description>
      <category>motivation</category>
      <category>career</category>
      <category>beginners</category>
      <category>shecoded</category>
    </item>
    <item>
      <title>Learning from dev courses...or from side projects? </title>
      <author>Ladislav Szolik</author>
      <pubDate>Tue, 13 Apr 2021 19:43:03 +0000</pubDate>
      <link>https://dev.to/ladislavszolik/learning-from-dev-courses-or-from-side-projects-4i98</link>
      <guid>https://dev.to/ladislavszolik/learning-from-dev-courses-or-from-side-projects-4i98</guid>
      <description>&lt;p&gt;I love to complete a good course on software development or design. It makes me feel that I learned something new and I feel confident about it. 💪&lt;/p&gt;

&lt;p&gt;This last until I face a project and I realize I either forgot some parts or I don't know how to use it here. &lt;/p&gt;

&lt;p&gt;First I thought, the is a problem with my note taking technique or the course material...&lt;/p&gt;

&lt;p&gt;Then recently a friend asked me to build a web app for her small business. It was all on me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hosting&lt;/li&gt;
&lt;li&gt;landing page&lt;/li&gt;
&lt;li&gt;brand + UI design&lt;/li&gt;
&lt;li&gt;database design&lt;/li&gt;
&lt;li&gt;authentication &lt;/li&gt;
&lt;li&gt;mails&lt;/li&gt;
&lt;li&gt;i18n &lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In that half year of discussions, design and development I feel learned a tons and I thought to share with you. &lt;/p&gt;

&lt;p&gt;Having a stake in the game changed the way I build knowledge. &lt;/p&gt;

&lt;p&gt;If you haven't been responsible to build something for somebody else, I can highly recommend! Even more, I am always happy to collaborate!  &lt;/p&gt;

</description>
      <category>discuss</category>
      <category>career</category>
      <category>learning</category>
      <category>writing</category>
    </item>
    <item>
      <title>A simple strategy for structuring TailwindCSS classnames</title>
      <author>Nikolaus Rademacher</author>
      <pubDate>Tue, 13 Apr 2021 19:02:15 +0000</pubDate>
      <link>https://dev.to/wheelmaker24/a-simple-strategy-for-structuring-tailwindcss-classnames-1ba9</link>
      <guid>https://dev.to/wheelmaker24/a-simple-strategy-for-structuring-tailwindcss-classnames-1ba9</guid>
      <description>&lt;p&gt;This is the third article of my small series about TailwindCSS. If you have not done so already, check out my other posts.&lt;/p&gt;

&lt;p&gt;Anyone who has proposed to use TailwindCSS for their project has probably heard something like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Ugh, this looks like inline styles!"&lt;/p&gt;

&lt;p&gt;"How should I keep an overview with so many classnames in my component?"&lt;/p&gt;

&lt;p&gt;"This seems hard to maintain…"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes, I understand these concerns. With Tailwind's utility-first approach, the default procedure is to write any utility-classname directly into the component's markup. With more complicated components this can quickly come out of hand.&lt;/p&gt;

&lt;p&gt;In today's post, we will look at a possibly better solution which I am using for my projects for a while now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-simple-example"&gt;
  &lt;/a&gt;
  A simple example
&lt;/h2&gt;

&lt;p&gt;Let's take this &lt;code&gt;Navigation&lt;/code&gt; component as an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Navigation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;links&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"flex flex-col justify-end list-none sm:flex-row"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;
              &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"mb-3 sm:ml-3 sm:mb-0 even:bg-gray-50 odd:bg-white"&lt;/span&gt;
            &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;
                &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`text-black font-bold inline-block rounded-full bg-yellow-400 py-1 px-3 &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;
                  &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;
                    &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                    &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hover:bg-yellow-500&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
                &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What can we do to not let the component look so messy?&lt;/p&gt;

&lt;p&gt;My first rule of thumb is: Do any calculations before your render / return function and only use these calculated flags in your render. That applies for the &lt;code&gt;router.pathname === link.path&lt;/code&gt; condition – let's move it into a &lt;code&gt;const&lt;/code&gt; and name it &lt;code&gt;isActive&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And while we are at it, let's move the &lt;code&gt;className&lt;/code&gt; definitions to &lt;code&gt;const&lt;/code&gt;s as well – just name them after their according HTML element (another reason for using semantic elements instead of a bunch of &lt;code&gt;div&lt;/code&gt;s ;)):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Navigation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;links&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;navClassNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;listClassNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex flex-col justify-end list-none sm:flex-row&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;navClassNames&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;listClassNames&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isActive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;listItemClassNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mb-3 sm:ml-3 sm:mb-0 even:bg-gray-50 odd:bg-white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;anchorClassNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`text-black font-bold inline-block rounded-full bg-yellow-400 py-1 px-3 &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;
            &lt;span class="nx"&gt;isActive&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hover:bg-yellow-500&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;listItemClassNames&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;anchorClassNames&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That looks better already, but there’s still room for improvement.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-raw-join-endraw-"&gt;
  &lt;/a&gt;
  Use &lt;code&gt;.join(" ")&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Instead of writing long strings of classNames, let's write arrays and concatenate them automatically. The good thing about arrays is that you can also add entries conditionally – and therefore get rid of the template literal condition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Navigation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;links&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;navClassNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;listClassNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex-col&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;justify-end&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;list-none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sm:flex-row&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;navClassNames&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;listClassNames&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isActive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;listItemClassNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mb-3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sm:ml-3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sm:mb-0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;even:bg-gray-50&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;odd:bg-white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;anchorClassNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-black&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;font-bold&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;inline-block&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rounded-full&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bg-yellow-400&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;py-1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;px-3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;isActive&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hover:bg-yellow-500&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;listItemClassNames&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;anchorClassNames&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(One note concerning the ternary operator that conditionally adds a className: If you don't have an either/or operation, just add an empty string to the else case (e.g. &lt;code&gt;isCondition ? 'myClass' : ''&lt;/code&gt;) and don't rely on shorthands like &lt;code&gt;isCondition &amp;amp;&amp;amp; 'myClass'&lt;/code&gt;. The latter would work for &lt;code&gt;undefined&lt;/code&gt; values but add a &lt;code&gt;"false"&lt;/code&gt; string to your array in case the condition is false.)&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#abstract-all-component-styles-into-a-raw-styles-endraw-object"&gt;
  &lt;/a&gt;
  Abstract all component styles into a &lt;code&gt;styles&lt;/code&gt; object
&lt;/h2&gt;

&lt;p&gt;Let's further work on this approach: In this example with multiple elements in one component especially it might make sense to create a styles object outside of the component's &lt;code&gt;return&lt;/code&gt; functions.&lt;/p&gt;

&lt;p&gt;But there is one issue: In our anchor link styles definition we rely on having access to the &lt;code&gt;isActive&lt;/code&gt; flag. We can easily solve this by transforming its definitions from a string to an arrow function returning a string. With such a function you can provide any condition you need in the scope of your element's styles array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex-col&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;justify-end&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;list-none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sm:flex-row&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;li&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mb-3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sm:ml-3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sm:mb-0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;even:bg-gray-50&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;odd:bg-white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;isActive&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-black&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;font-bold&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;inline-block&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rounded-full&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bg-yellow-400&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;py-1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;px-3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;isActive&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hover:bg-yellow-500&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Navigation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;links&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nav&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isActive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;isActive&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another note here: I've put the flag into an object instead of directly into the arguments list (&lt;code&gt;({ isActive })&lt;/code&gt; instead of &lt;code&gt;(isActive)&lt;/code&gt;). This makes sense because it is easier to maintain: Otherwise you would have to think of the particular order of your flags in both the function call and its definition within the styles object. With the object's destructuring syntax you can work around this issue and don't need to worry about the object entries' positions – by just adding two more characters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#put-styles-into-a-separate-file"&gt;
  &lt;/a&gt;
  Put styles into a separate file
&lt;/h2&gt;

&lt;p&gt;I you want to take it even further, you could outsource your styles to a separate file with the same approach:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Navigation.styles.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flex-col&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;justify-end&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;list-none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sm:flex-row&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;li&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mb-3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sm:ml-3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sm:mb-0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;even:bg-gray-50&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;odd:bg-white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;isActive&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-black&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;font-bold&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;inline-block&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rounded-full&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bg-yellow-400&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;py-1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;px-3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;isActive&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text-white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hover:bg-yellow-500&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Navigation.jsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Navigation.styles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Navigation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;links&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nav&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;links&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isActive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;isActive&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
              &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm working with this approach for a while now and I really like it. It's simple and clean and it allows me to write TailwindCSS without cluttering my components with a bunch of classnames.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-approaches"&gt;
  &lt;/a&gt;
  Other approaches
&lt;/h2&gt;

&lt;p&gt;There are some other approaches that you can use instead or in combination with the above:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-raw-classnames-endraw-or-raw-clsx-endraw-"&gt;
  &lt;/a&gt;
  Use &lt;code&gt;classnames()&lt;/code&gt; (or &lt;code&gt;clsx()&lt;/code&gt;)
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;classnames()&lt;/code&gt; library is a simple utility to concatenate your classNames into a string. It has some additional functions built in that might come in handy.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;clsx()&lt;/code&gt; has the same API but comes with a smaller bundle size:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/JedWatson/classnames"&gt;https://github.com/JedWatson/classnames&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/lukeed/clsx"&gt;https://github.com/lukeed/clsx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These libraries makes sense especially when dealing with many conditions like the &lt;code&gt;isActive&lt;/code&gt; one in the example above or with nested arrays that you would need to flatten otherwise.&lt;/p&gt;

&lt;p&gt;For most cases I'd say that joining an array like above will do the work and that you don't need any additional package for that – but for bigger projects it might make sense to embrace the API of those libraries.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#brise"&gt;
  &lt;/a&gt;
  brise
&lt;/h3&gt;

&lt;p&gt;Another interesting approach is pago's brise:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/pago/brise"&gt;https://github.com/pago/brise&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is using template literals to work with Tailwind styles. And it even allows you to add custom CSS by using emotion's &lt;code&gt;css&lt;/code&gt; utility.&lt;/p&gt;

&lt;p&gt;It's also definitely worth checking out.&lt;/p&gt;

&lt;p&gt;I hope this post inspired you writing cleaner components when using TailwindCSS. If you have any other recommendations feel free to add them to the comments!&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>javascript</category>
      <category>react</category>
      <category>css</category>
    </item>
    <item>
      <title>A Developer’s Guide to Analytics Implementation &amp; Testing</title>
      <author>Avo</author>
      <pubDate>Tue, 13 Apr 2021 18:31:02 +0000</pubDate>
      <link>https://dev.to/avohq/a-developer-s-guide-to-analytics-implementation-testing-3a60</link>
      <guid>https://dev.to/avohq/a-developer-s-guide-to-analytics-implementation-testing-3a60</guid>
      <description>&lt;p&gt;When working with data teams, spending chunks of our time chasing and squashing data bugs is no one's idea of a good time. Those bugs can have a huge impact on the whole product, even if they often seem insignificant, from a development perspective.&lt;/p&gt;

&lt;p&gt;We spend so much time bug-squashing because we often find ourselves put in a reactive position by mediocre data management practices. It would remove huge time-wasters for everyone if we could proactively act on data quality. One way to achieve that is becoming a data stakeholder, a role that guides better workflows from the outset. Eradicating trivial data-quality issues allows all engineers on the team to spend less time chasing frustrating bugs and more time building worthwhile code.&lt;/p&gt;

&lt;p&gt;We should follow implementation best practices; test and validate our implementation to make sure our code functions correctly, and our data is clean. This helps avoid rework down the road. So, if we’d rather create exciting new features than spend our time dealing with bad data and do-overs, here are the best practices for analytics implementation and testing to follow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#caring-about-data-analytics-implementation-and-testing-best-practices-saves-developers-time-and-frustration"&gt;
  &lt;/a&gt;
  Caring about data analytics implementation and testing best practices saves developers time and frustration
&lt;/h2&gt;

&lt;p&gt;When we care about analytics implementation and validation best practices, it prevents bad-data-mitigating rework later on. This saves a huge number of engineering hours that get wasted tracking down the error later — not to mention the frustration in trying to find what went wrong. Other parts of the company might also be waiting for corrected insights to make clear decisions, and they’re getting held up as well.&lt;/p&gt;

&lt;p&gt;One of Avo’s customers is realistically expecting to cut engineering hours spent on implementing analytics by 80%, and that time-saving largely comes from not having to chase down these bad data-bugs anymore. This makes everyone happier — from the developer implementing tracking code to the product manager analyzing the data to the CEO making data based decisions.&lt;/p&gt;

&lt;p&gt;Reworking represents a huge waste of time. Kirill Yakovenko, product manager at Termius, knows this well. Termius’ process for dealing with bad data was laborious and frustrating, &lt;a href="https://www.avo.app/customers/avo-and-mixpanel-empower-termius-developers-to-make-self-serve-data-driven-product-decisions"&gt;before they started using Avo&lt;/a&gt;, of course.&lt;/p&gt;

&lt;p&gt;“The problem with tracking mistakes,” says Yakovenko,“is that each fix takes time. It might take a month to roll out a fix for a single issue to all our applications and users.”&lt;/p&gt;

&lt;p&gt;Fixing analytics issues didn’t just waste developer hours on the fix itself; it also delayed product decisions because insights are crucial to making the right product decisions.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Caring about data analytics implementation and testing best &amp;gt;practices help prevent bad data and rework later on.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Analytics implementation and validation processes often aren’t something we consider when we think of testing code because it hasn’t traditionally been a part of our main codebase, nor is it part of our job to design. But caring about data analytics implementation and testing best practices helps prevent bad data and rework later on. As more businesses recognize the importance of online business as a primary revenue source, data insights are important as ever, and product analytics solutions like &lt;a href="https://www.avo.app/amplitude"&gt;Amplitude&lt;/a&gt; and &lt;a href="https://www.avo.app/mixpanel"&gt;Mixpanel&lt;/a&gt; are becoming more critical.&lt;/p&gt;

&lt;p&gt;When trying to implement analytics, many developers report:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Incomplete implementation instructions&lt;/li&gt;
&lt;li&gt;Systems that were designed with data as an afterthought&lt;/li&gt;
&lt;li&gt;Long feedback loops of the correctness of their implementation&lt;/li&gt;
&lt;li&gt;Multiple streams of feedback from different stakeholders&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the testing side, we, and data teams, often don’t prioritize testing our code to make sure we’re not putting garbage into our data systems. Testing is time-expensive, complicated, and easy to get wrong — making it low priority. Low priority generally translates to no testing at all, which means that code either ships broken, breaks during a later update, or ships without analytics altogether 💀.&lt;/p&gt;

&lt;p&gt;However, it’s important that we take an active role in analytics implementation and testing best practices to help make our data teams and our own workdays more efficient. After all, it’s much easier for us to fix data through testing these best practices at the source than it is to make corrections downstream, especially if we’ve already shipped.&lt;/p&gt;

&lt;p&gt;Removing the frustration around data tasks, and recouping development time by tweaking these processes is valuable. Fixing bugs can take us &lt;a href="https://deepsource.io/blog/exponential-cost-of-fixing-bugs/"&gt;as much as 30x the amount of time&lt;/a&gt; to fix later on, if not caught early. Developers within our own network report that up to 30% of issues for a single team are analytics bugs. We can slash that number down to size with these best practices in the bag.&lt;/p&gt;

&lt;p&gt;Here’s how.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#five-best-practices-for-analytics-implementation-and-testing"&gt;
  &lt;/a&gt;
  Five best practices for analytics implementation and testing
&lt;/h2&gt;

&lt;p&gt;These five practices make your analytics tests and implementation more efficient and consistent. Your code can be implemented quickly, without taking shortcuts or trading accuracy for convenience. In other words, you’re beating the &lt;a href="https://blog.amplitude.com/2020-amplify-announcements#menu-item-31630:~:text=builder%E2%80%99s%20paradox%3A%20You%20can%20either%20build,and%20fall%20behind%20on%20customer%20demands"&gt;builder’s paradox&lt;/a&gt;. Think of the efficiency as the “human” process side to data testing and implementation. Easier replication of the same process or request while having clean code on the other side of that replication creates consistency. Think of the consistency as the “code” process side to analytics testing and implementation. Breaking best practices down into matters of efficiency and consistency means you’ll be able to reap the benefits of attending to analytics implementation and testing — less time spent on frustrating re-work and bugs, and more time spent on your regular development workflow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-request-full-implementation-specs-every-time"&gt;
  &lt;/a&gt;
  1. Request full implementation specs every time
&lt;/h3&gt;

&lt;p&gt;Request full implementation specs from your data team or product manager every time, so you know where the code goes in your codebase and what the goal of implementing it is.&lt;/p&gt;

&lt;p&gt;The main obstacle to straightforward implementation is that we often get ill-defined data from our product managers. Sometimes, this results in stop-gap solutions that work “well enough” but require rework later on. Other times, it generates a lot of tiresome back and forth on how to implement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The devs handle implementation as they think it should be done.&lt;/li&gt;
&lt;li&gt;The PM comes back to the devs with something else that they’d prefer.&lt;/li&gt;
&lt;li&gt;The dev redoes the same work.&lt;/li&gt;
&lt;li&gt;The cycle repeats until mutual satisfaction/breakdown.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Holistic specs makes implementation and testing more efficient by preventing confusion around necessary actions. Everyone is clear from the jump, and no back-and-forth is needed.&lt;/p&gt;

&lt;p&gt;Additionally, these guidelines for implementing your code help ensure that all tracking is consistent between multiple platforms each time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-consolidate-feedback-into-a-single-source-of-truth"&gt;
  &lt;/a&gt;
  2. Consolidate feedback into a single source of truth
&lt;/h3&gt;

&lt;p&gt;Consolidate feedback into a single source of data truth that the data team can comment on and answer questions around before the code goes to production. This involves the creation of a draft branch — or a draft version for JSON lovers — of your changes in your event analytics software or your tracking plan.&lt;/p&gt;

&lt;p&gt;Consolidate feedback to ensure that it remains directed and issue-oriented. This also allows you to gather feedback in the specific context of the suggested changes. That way, everyone can see exactly what will be changed and can give feedback on it.&lt;/p&gt;

&lt;p&gt;Feedback can come from anyone, other developers, data analysts, and product managers who all have something to say about your approach to data analytics implementation. This feedback is often ad hoc, making it difficult to track the narrative of the changes needed or questions asked. This is especially true if you don’t have a solid tracking plan and your teams are siloed.&lt;/p&gt;

&lt;p&gt;When you consolidate feedback into a single source of truth it increases implementation and testing efficiency by creating a single environment (e.g., a shared doc or an easy-to-use tool like &lt;a href="https://www.avo.app/"&gt;Avo&lt;/a&gt; 🙌) in which you can surface questions. Not only is it easier to have the relevant context then and there with descriptions, but your data team can be pulled in to answer any questions that might come up. When your data includes all relevant information that’s accessible to all stakeholders at any time, you can expect to see rapid turnaround on required changes and track any conversations about the particular changes made and the conversation about those changes.&lt;/p&gt;

&lt;p&gt;Maintaining a single source of truth also helps consistency by giving you a chance to flag issues that arise during testing. Your data team, meanwhile, gets an equal chance to flag an issue with downstream data if/when they come across it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-embrace-versioning-and-test-environments"&gt;
  &lt;/a&gt;
  3. Embrace versioning and test environments
&lt;/h3&gt;

&lt;p&gt;Embrace versioning and test environments so you can test for analytics implementation errors before that code causes problems in your codebase out in the real world. Faulty code during the product cycle is bad enough, but faulty code in your released product can negatively affect customer success and, by extension, your business’ credibility. For example, if you’re in a commerce business, I can tell you that you will not want to be the developer on call (or on the hook!) for an analytics break during the Black Friday rush.😬&lt;/p&gt;

&lt;p&gt;Development moves fast, and in the interest of time, testing environments and versioning for analytics specs are either non-existent or weak. Instead, the focus is squarely on getting to market in good time, i.e shipping fast. As a result, plenty of teams ship a product only to find out downstream that there’s an issue.&lt;/p&gt;

&lt;p&gt;Devoting attention to versioning and test environments increases the efficiency of your implementation and testing by solving problems at the source. When you scan for errors at the source by using versioning and test environments that work by comparing your product against a golden/ideal dataset and a copy of your production dataset, you can clearly see where improvements are needed. You can make them in real time and then press on with development. So long, rework! 🐬&lt;/p&gt;

&lt;p&gt;Following versioning and test environment best practices also helps with consistency by incorporating them into your standard product development cycle. It becomes the default. Having a set process for testing your code before it goes to production will help you avoid inconsistencies in implementation before it’s out in the real world. Or, as an Avo user puts it, “Fewer stupid errors with analytics.” As a result, you will consistently be able to release bug-free products that perform better, rather than chasing errors down the road.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-map-data-dependencies-and-lineages"&gt;
  &lt;/a&gt;
  4. Map data dependencies and lineages
&lt;/h3&gt;

&lt;p&gt;Create an ecosystem for mapping downstream dependencies. Knowing how updates or changes will affect dependencies ensures fewer breaking changes are made. It will also create an environment that fosters communication between teams responsible for dependencies throughout the project. &lt;/p&gt;

&lt;p&gt;You’ll gain a better understanding of why you’re implementing specific data, and you’ll have a higher stake in the success of capturing and maintaining that data. You’ll also know who to contact if any changes you make cause issues in an important metric or campaign.&lt;/p&gt;

&lt;p&gt;Data implementation is often carried out by devs who have a lot of other demands on their time, so they optimize for getting it done. Code goes to production without checks. This is not only a problem in and of itself — as analytics tracking builds on inconsistent implementation, the quality of the data suffers.&lt;/p&gt;

&lt;p&gt;When you have a better understanding of why data is being implemented, you can see how the work you’re doing is integral to heading off instances of bugs and misaligned code down the road. Not only will this cause less frustration for you, but your data team will thank you, as well as anyone who depends on the insights produced. This is anyone from marketing, product, even up to VP or executive level.&lt;/p&gt;

&lt;p&gt;Mapping dependencies and lineages ahead of time cuts down on rework and headaches that are inevitable down the line when data quality practices are poor. You can paint a representative, upfront picture of what dependencies exist in your code. Testing will then reveal any issues arising as a result of those dependencies before you’re in production. Data produced this way is tracked and tested, and therefore correct, and uniform downstream.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-use-the-right-tools-to-make-your-life-easier"&gt;
  &lt;/a&gt;
  5. Use the right tools to make your life easier
&lt;/h3&gt;

&lt;p&gt;There’s a reason the next big thing in analytics is data governance. What has been a frustrating and error-prone process is now being solved with made-for-purpose analytics governance solutions. Instead of just using manual tests, finding the right data analytics tool can streamline your testing and data management and increase your data quality. This allows you to spend more time on the code you enjoy building, and less time squashing analytics bugs.&lt;/p&gt;

&lt;p&gt;Avo is made so your data implementation is seamless. Your whole team has access to a single source of truth where data specialists can send clear, explicit implementation instructions to developers for each platform. Developers love it, as what that means in practice is: “Goodbye guesswork when implementing code!”&lt;/p&gt;

&lt;p&gt;Using a type-safe tool like Avo increases your efficiency as you no longer need to write explicit data tests every time. Instead, you immediately see if the app is getting the expected data or not. Avo can be used in unit testing as part of your full test suite. This makes it easy for you to test analytics functionality without going too far out of your way. Here you can see an example of how to &lt;a href="https://www.avo.app/docs/best-practices/unit-tests"&gt;initialize Avo in a jest test environment with JavaScript&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Tools like Avo are great for your operation’s consistency. Avo’s type-safety means that, unlike a lot of other data analytics tools, you won’t have to troubleshoot your event names and metadata based on syntax. With Avo, you can trust that it’s right every time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-analytics-implementation-and-testing-best-practices-are-important-and-they-dont-have-to-suck"&gt;
  &lt;/a&gt;
  Data analytics implementation and testing best practices are important— and they don’t have to suck
&lt;/h2&gt;

&lt;p&gt;Without any kind of optimization, analytics implementation and testing is a laborious and unappetizing process. By following implementation and testing best practices you’re saving yourself from a magnitude of data bugs and unexpected code re-work. Good news! There’s a tool to help you with this. 🥑&lt;/p&gt;

&lt;p&gt;Having &lt;a href="https://www.avo.app/how-it-works"&gt;Avo&lt;/a&gt; in your tool stack minimizes the amount of valuable time required for implementation and testing episodes. It can eliminate the need for manual testing entirely. In a time when both &lt;a href="https://www.chorus.ai/blog/sales-cycle-velocity-twb"&gt;quality&lt;/a&gt; and speed to market are more important than ever, trust you’re building a better product. Try &lt;a href="https://www.avo.app/how-it-works"&gt;Avo&lt;/a&gt; today to make analytics implementation a breeze for you and your team.&lt;/p&gt;

</description>
      <category>analytics</category>
      <category>tutorial</category>
      <category>product</category>
      <category>testing</category>
    </item>
    <item>
      <title>The main client concerns about IT outsourcing and how we solve them</title>
      <author>Arateg</author>
      <pubDate>Tue, 13 Apr 2021 18:24:14 +0000</pubDate>
      <link>https://dev.to/arateg/the-main-client-concerns-about-it-outsourcing-and-how-we-solve-them-53hf</link>
      <guid>https://dev.to/arateg/the-main-client-concerns-about-it-outsourcing-and-how-we-solve-them-53hf</guid>
      <description>&lt;p&gt;Based in Belarus, our custom software engineering company has delivered more than 50 projects to industries such as healthcare, e-commerce, insurance, education, finance and banking. Since 2014, we have been providing IT outsourcing services to organizations located mainly in the USA and Europe. Collaborating with CEOs and CTOs for over 6 years, our experts have helped them address hundreds of business and technical challenges.&lt;/p&gt;

&lt;p&gt;At the moment, we are witnessing the rapid growth of IT outsourcing. Although this practice allows saving costs and accessing high expertise, there are some issues C-level executives aim to resolve. In this article, we will consider the key concerns of CEOs and CTOs when outsourcing software development tasks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-main-concerns-of-ceos-and-ctos-when-outsourcing-software-development"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The main concerns of CEOs and CTOs when outsourcing software development&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. Legitimate issues&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Legitimate issues have to be taken into account before hiring a software development outsourcing company. When drawing up a contract, you should include the clause about protecting intellectual property to prevent illegal distribution of your ideas, requirements, and know-how.&lt;/p&gt;

&lt;p&gt;Ask a potential IT service partner to sign a non-disclosure agreement before sharing business-specific goals and sending any documents, for instance, a technical specification. Write down deadlines and deliverables to ensure all stages will be completed on time. Since it is often challenging to predict the exact number of the necessary tasks—especially for long-term and complex projects—it is also important to choose a proper payment model.&lt;/p&gt;

&lt;p&gt;Here at Arateg, we always start collaboration with signing an NDA to provide our customers with data confidentiality. We consult with lawyers on all document-related issues in order to ensure proper assignment of rights and intellectual property.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Payment model&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Concluding a pricing model agreement, you and an IT service vendor will define the work scope, timeline, and project cost. It will also indicate what you actually pay for: the number of spent hours, completed tasks, or the end result and performed KPIs.&lt;/p&gt;

&lt;p&gt;Our customers said that sometimes they felt difficulties when choosing a type of an agreement: Fixed Price, Time and Material, Mixed Mode, or Dedicated Team, especially when they wanted to establish a long-term partnership with an IT outsourcing company. In this case, a high level of flexibility is crucial: while it is possible to make accurate time and budget estimations for small occasional activities, it is challenging to calculate the exact cost of building a complex product without a detailed technical specification.&lt;/p&gt;

&lt;p&gt;At Arateg, we analyze the project requirements to understand your business goals and help you draw up a pricing contract according to your needs.&lt;/p&gt;

&lt;p&gt;Read our article &lt;a href="https://arateg.com/blog/how-to-choose-best-pricing"&gt;&lt;strong&gt;“How to choose the best software development pricing model for your project.”&lt;/strong&gt;&lt;/a&gt; to learn the peculiarities of different agreements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Project management&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;How will I control software project development if an IT outsourcing company is located in the other country? This is a common concern of C-level managers that IT service vendors should address. Before delegating IT-related tasks, you should make sure a potential partner provides daily reports containing information about performed tasks, planned activities, and technical issues solved by the team.&lt;/p&gt;

&lt;p&gt;In our software engineering company, we focus on process transparency, so that you can easily control the project. We hold regular in-person and virtual meetings to discuss the required issues and show the outcome of each stage.&lt;/p&gt;

&lt;p&gt;Our experts communicate with you to get a clear understanding of your business needs, show intermediary results, and receive your feedback. We also give you access to a time tracking system, so that you can monitor deadlines and estimate the number of spent hours.&lt;/p&gt;

&lt;p&gt;See what our customers say about cooperating with Arateg.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;“We had a dedicated team of developers and the PM who was my contact person. We had weekly meetings and 1 time a month a meeting in person with the team!”&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Marketing Executive at &lt;a href="https://clutch.co/profile/arateg#review-1165668"&gt;&lt;strong&gt;Ad Tech Company&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;“Arateg team is very responsive. We can reach out to them at any time over Slack or Jira. We had never the feeling that we are not heard. The communication is superb. We never lost time due to communication.”&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Managing Director and Product Owner at &lt;a href="https://clutch.co/profile/arateg#review-1559162"&gt;&lt;strong&gt;food pre-ordering startup&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Deadlines&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The ability to meet deadlines is one of the key client concerns when outsourcing software development. It is especially important when the organization aims to improve time-to-market while saving product quality. To deliver the project on time, software engineers should need to analyze the customer requirements and estimate the scope of work properly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://arateg.com/blog/key-concerns-of-CEOs-and-CTOs-when-it-outsourcing"&gt;Continue reading...&lt;/a&gt;&lt;/p&gt;

</description>
      <category>startup</category>
      <category>outsourcing</category>
      <category>mobile</category>
      <category>webdev</category>
    </item>
    <item>
      <title>🦋Flutter - Next Level Routing - Error Handling</title>
      <author>Luciano Jung</author>
      <pubDate>Tue, 13 Apr 2021 18:12:47 +0000</pubDate>
      <link>https://dev.to/lucianojung/flutter-next-level-routing-error-handling-3nek</link>
      <guid>https://dev.to/lucianojung/flutter-next-level-routing-error-handling-3nek</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;If you are using a dynamic class for routing in Flutter, you may be concerned about errors. How about a static error page (404) when routing fails so the user knows what's going wrong?!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is Part 3 of 4 of my Series: 🦋Flutter - Next Level Navigation.&lt;br&gt;
If you haven't read &lt;a href="https://dev.to/lucianojung/series/12052"&gt;the other parts&lt;/a&gt; yet, I recommend you to do so.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#content"&gt;
  &lt;/a&gt;
  content
&lt;/h2&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;a href="#error-handling"&gt;Error handling&lt;/a&gt;&lt;/li&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href="#1-create-an-error-page"&gt;1. Create an error page&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#2-link-to-the-error-page"&gt;2. Link to the error page&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;li&gt;&lt;a href="#individualize-the-error-page"&gt;Individualize the error page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#error-handling"&gt;
  &lt;/a&gt;
  Error handling
&lt;/h2&gt;

&lt;p&gt;To catch errors while navigating within the app, we added error queries in the last post. To redirect the user to an error page now requires 2 simple steps.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-create-an-error-page"&gt;
  &lt;/a&gt;
  1. Create an error page
&lt;/h3&gt;

&lt;p&gt;To display an error page we need to create an error page. This can be done either in a separate class or directly in our previously created &lt;code&gt;RouteGenerator&lt;/code&gt; class. If the error page will be simple, I recommend the last option.&lt;/p&gt;

&lt;p&gt;For the error page we now create an internal private function &lt;code&gt;_errorRoute&lt;/code&gt;, which returns an object &lt;code&gt;Route&amp;lt;dynamic&amp;gt;&lt;/code&gt;. In the returned page we construct a scaffold object that sets our error message. This might look like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kd"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_errorRoute&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;MaterialPageRoute&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;builder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Scaffold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;appBar:&lt;/span&gt; &lt;span class="n"&gt;AppBar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Error'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'ERROR'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;});&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#2-link-to-the-error-page"&gt;
  &lt;/a&gt;
  2. Link to the error page
&lt;/h3&gt;

&lt;p&gt;Now, to redirect to the page in every error case we just need to return the function &lt;code&gt;_errorRoute()&lt;/code&gt; on every error. So our previously created switch-case block will be extended as follows:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RouteGenerator&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kd"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;generateRoute&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RouteSettings&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;      
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;'/page2'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;MaterialPageRoute&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;builder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
                  &lt;span class="n"&gt;IntroductionView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;arguments:&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_errorRoute&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_errorRoute&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#individualize-the-error-page"&gt;
  &lt;/a&gt;
  Individualize the error page
&lt;/h2&gt;

&lt;p&gt;Of course, it is also possible to provide the user with more information on the error page. For example, you can make the error more concrete by trying to pass the cause of the error. This might look like the following:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kd"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_errorRoute&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;MaterialPageRoute&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;builder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Scaffold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;appBar:&lt;/span&gt; &lt;span class="n"&gt;AppBar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Error'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'ERROR: '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;});&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&amp;amp;&amp;amp;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_errorRoute&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;message:&lt;/span&gt; &lt;span class="s"&gt;'wrong routing name'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Remember to specify the passed error as optional as in the example, so no error can occur when navigating to the error page. I mean how ironic would that be! XD&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZkN631c2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0wtpvq02mzobtz4lx46j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZkN631c2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0wtpvq02mzobtz4lx46j.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/lucianojung"&gt;Follow me&lt;/a&gt; to not miss any following posts&lt;br&gt;
See my latest Projects on &lt;a href="https://github.com/login?return_to=%2Flucianojung"&gt;Github&lt;/a&gt; or at &lt;a href="https://lucianojung.de/#work"&gt;Lucianojung.de&lt;/a&gt;&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#you-may-also-like"&gt;
  &lt;/a&gt;
  You may also like:
&lt;/h4&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/lucianojung" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xWpDhmb2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ST6k_uJ6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/570773/4067a97a-e6f0-46c4-84d9-bf571ec88277.jpeg" alt="lucianojung image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/lucianojung/global-variable-access-in-flutter-3ijm" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;🦋Flutter - Manage global variables&lt;/h2&gt;
      &lt;h3&gt;Luciano Jung ・ Feb 10 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#flutter&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#dart&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#bestpractice&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;




&lt;div class="ltag__link"&gt;
  &lt;a href="/lucianojung" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xWpDhmb2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ST6k_uJ6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/570773/4067a97a-e6f0-46c4-84d9-bf571ec88277.jpeg" alt="lucianojung image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/lucianojung/flutter-next-level-navigation-nh4" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;🦋Flutter - Next Level Navigation &lt;/h2&gt;
      &lt;h3&gt;Luciano Jung ・ Apr  4 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#flutter&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#dart&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/lucianojung" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xWpDhmb2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ST6k_uJ6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/570773/4067a97a-e6f0-46c4-84d9-bf571ec88277.jpeg" alt="lucianojung image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/lucianojung/flutter-singelton-pattern-1a38" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;🦋Flutter - Singleton Pattern&lt;/h2&gt;
      &lt;h3&gt;Luciano Jung ・ Mar 22 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#flutter&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#dart&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#pattern&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#bestpractice&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>flutter</category>
      <category>dart</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Simplifying the git forking workflow</title>
      <author>Ben Demboski</author>
      <pubDate>Tue, 13 Apr 2021 18:01:36 +0000</pubDate>
      <link>https://dev.to/bendemboski/simplifying-the-git-forking-workflow-4bkf</link>
      <guid>https://dev.to/bendemboski/simplifying-the-git-forking-workflow-4bkf</guid>
      <description>&lt;p&gt;The standard way to contribute to an open source project that you do not maintain is to fork it, create a branch in your fork where you put your code changes, and then open a pull request into the original repository. I've been doing this for years, and just discovered a tweak to the workflow that I really like and want to share with you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-git-forking-workflow"&gt;
  &lt;/a&gt;
  The git forking workflow
&lt;/h2&gt;

&lt;p&gt;This is a well established pattern that has been written up a number of times (e.g. &lt;a href="https://gist.github.com/Chaser324/ce0505fbed06b947d962"&gt;here&lt;/a&gt; and &lt;a href="https://www.atlassian.com/git/tutorials/comparing-workflows/forking-workflow"&gt;here&lt;/a&gt;), so I'll just briefly outline the process of opening a pull request, and then opening a second pull request, as I originally learned it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-pull-request"&gt;
  &lt;/a&gt;
  First pull request
&lt;/h3&gt;

&lt;p&gt;To open my first pull request, I need to first create a fork. I'll use the Ember test helpers repo as my example that I'm contributing to. Note that none of this is specific to GitHub -- it would work the same with BitBucket or any other git host. My steps are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fork the repo, so the original is at &lt;code&gt;git+ssh://git@github.com/emberjs/ember-test-helpers&lt;/code&gt; and my fork is at &lt;code&gt;git+ssh://git@github.com/bendemboski/ember-test-helpers&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone git+ssh://git@github.com/bendemboski/ember-test-helpers&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -b my-branch-1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Write code&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -u origin my-branch-1&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;and now I'm ready to open a pull request! This is nice and simple, but where I think it gets a little complicated is when I want to make my second pull request.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#second-pull-request"&gt;
  &lt;/a&gt;
  Second pull request
&lt;/h3&gt;

&lt;p&gt;If some time has passed, Ember test helpers' &lt;code&gt;master&lt;/code&gt; branch will have changed since I created my fork as work on the project continues -- at the very least, I hope my pull request was merged into it! So when creating my new branch, I need to make sure to branch off of the latest &lt;code&gt;master&lt;/code&gt; in the original repo, not the out-of-date one in my fork.&lt;/p&gt;

&lt;p&gt;The steps are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git remote add upstream git+ssh://git@github.com/emberjs/ember-test-helpers&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git fetch upstream master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git merge upstream/master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -b my-branch-2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Write code&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -u origin my-branch-2&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Steps 1-4 are just syncing my local mirror of my fork's &lt;code&gt;master&lt;/code&gt; branch with the &lt;code&gt;master&lt;/code&gt; branch in Ember test helpers' repo. Since I don't actually do anything with my fork's &lt;code&gt;master&lt;/code&gt; branch, I could simplify this slightly:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git remote add upstream git+ssh://git@github.com/emberjs/ember-test-helpers&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git fetch upstream master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -b my-branch-2 upstream/master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Write code&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -u origin my-branch-2&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#simplified-git-forking-workflow"&gt;
  &lt;/a&gt;
  Simplified git forking workflow
&lt;/h2&gt;

&lt;p&gt;The simplification involves a tweak to the workflow that is pretty minor from a mechanical/what-commands-do-I-type standpoint, but I think simplifies the mental model significantly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-pull-request"&gt;
  &lt;/a&gt;
  First pull request
&lt;/h3&gt;

&lt;p&gt;Instead of cloning my fork of the repo, I will clone the original repo and then add my fork as another remote:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fork the repo, so the original is at &lt;code&gt;git+ssh://git@github.com/emberjs/ember-test-helpers&lt;/code&gt; and my fork is at &lt;code&gt;git+ssh://git@github.com/bendemboski/ember-test-helpers&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git clone git+ssh://git@github.com/emberjs/ember-test-helpers&lt;/code&gt; &amp;lt;-- this is the key difference&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -b my-branch-1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Write code&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git remote add bendemboski git+ssh://git@github.com/bendemboski/ember-test-helpers&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -u bendemboski my-branch-1&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The server-side result is the same -- my fork has a &lt;code&gt;my-branch-1&lt;/code&gt; branch ready to use for a pull request into the original repo, but the local setup is different in a way that makes opening subsequent pull requests somewhat simpler.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#second-pull-request"&gt;
  &lt;/a&gt;
  Second pull request
&lt;/h3&gt;

&lt;p&gt;Since I have cloned the original repo, I sync my local &lt;code&gt;master&lt;/code&gt; branch just like I would with any other branch, simplifying the beginning of this workflow:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git checkout master&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -b my-branch-2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Write code&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -u bendemboski my-branch-2&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#practical-differences"&gt;
  &lt;/a&gt;
  Practical differences
&lt;/h2&gt;

&lt;p&gt;The only practical difference between these two versions of the forking workflow is that in the simplified form I'm not trying to keep my fork's &lt;code&gt;master&lt;/code&gt; up-to-date with the original repo's. In fact, I completely ignore my fork's &lt;code&gt;master&lt;/code&gt; branch and just treat my fork as a repository for pushing temporary branches to support opening pull requests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ergonomic-benefits"&gt;
  &lt;/a&gt;
  Ergonomic benefits
&lt;/h2&gt;

&lt;p&gt;Even though the pure number of commands I need to type isn't significantly reduced, in my experience, this simplifies the mental model in a way that reduces friction in the whole process of opening pull requests. The benefits I've experienced are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I don't have to worry about whether my fork's &lt;code&gt;master&lt;/code&gt; branch is up-to-date with the original repo's &lt;code&gt;master&lt;/code&gt; branch&lt;/li&gt;
&lt;li&gt;I don't have to worry about accidentally merging code into my fork's &lt;code&gt;master&lt;/code&gt; branch in a way that would require something like rebase to get back in sync with the original repo's &lt;code&gt;master&lt;/code&gt; branch&lt;/li&gt;
&lt;li&gt;I don't have to think about the fact that I'm working with a fork of a repository aside from the one time (per branch) that I have to push my branch to the remote pointing to my fork (&lt;code&gt;git push -u bendemboski ...&lt;/code&gt; instead of &lt;code&gt;git push -u origin ...&lt;/code&gt;). All of my pulling and branching operations are done just as if I owned the repository, and it's only the first time I push a branch that I have to do something different.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These may not seem like a huge deal, but for me they are, because of the mental simplification of not having to switch between two different "modes" -- the "working on an original repo" mode and the "working on a fork of a repo" mode. When I'm working in my local clone, it makes no difference and I do the same thing either way, and it's only when I need to push a new branch to somewhere remote that I have to think about the difference, and that's exactly when I &lt;em&gt;should&lt;/em&gt; be thinking about the difference!&lt;/p&gt;

&lt;p&gt;This peels off one extra layer of mental load and reduces the friction involved in the whole process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-extra-thought"&gt;
  &lt;/a&gt;
  An extra thought
&lt;/h2&gt;

&lt;p&gt;There can be good reasons to use the forking workflow even for repositories that you &lt;em&gt;can&lt;/em&gt; push to, e.g. to keep from polluting the original repository with experimental branches, etc. As the ever-insightful &lt;a href="https://twitter.com/katiegengler"&gt;@katiegengler&lt;/a&gt; pointed out in a Discord discussion, in such cases following the simplified forking workflow but cloning the original repo using the &lt;code&gt;https&lt;/code&gt; instead of &lt;code&gt;git&lt;/code&gt; URL (&lt;code&gt;git clone https://github.com/emberjs/ember-test-helpers&lt;/code&gt; instead of &lt;code&gt;git clone git+ssh://git@github.com/emberjs/ember-test-helpers&lt;/code&gt;) adds an extra layer of protection preventing you from accidentally pushing to the original repo instead of your fork.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I've found this tweak to the workflow to be a non-trivial simplification that noticeably improves my developer experience of periodically contributing to projects that I don't own. I love the open source model, and I love contributing back to projects that I have benefited from, so I'm always excited to find ways of reducing friction in the process to make me more likely to do it, and free up energy for the actual development work that's fun rather than the git mechanics that are...less fun. I'd love to hear what you think about this simplified workflow, or other ways you've found to reduce friction in contributing to open source projects.&lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>bitbucket</category>
    </item>
    <item>
      <title>Build a Scalable Video Chat App with Agora in Django</title>
      <author>Kofi Mupati</author>
      <pubDate>Tue, 13 Apr 2021 18:01:27 +0000</pubDate>
      <link>https://dev.to/mupati/build-a-scalable-video-chat-app-with-agora-in-django-1lle</link>
      <guid>https://dev.to/mupati/build-a-scalable-video-chat-app-with-agora-in-django-1lle</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Django is a high-level Python Web framework that takes care of much of the hassle of Web development so that you can focus on writing your app without needing to reinvent the wheel. While Agora takes away the hassle of building a video chat application from scratch.&lt;/p&gt;

&lt;p&gt;WebRTC is only one of the ways that people can implement video chat features. Companies like &lt;a href="https://www.agora.io/en/"&gt;Agora&lt;/a&gt; also provide a fully packaged video chat SDK to provide a high-quality Real-Time Engagement video chat experience. As someone who has WebRTC development experience, I can tell you there are some limitations with WebRTC, such as:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Quality of experience:&lt;/strong&gt; Since WebRTC is transmitted over the Internet, which is a public domain, the quality of experience is hard to guarantee.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Scalability:&lt;/strong&gt; Scalability is fairly limited on group video calls due to the peer-to-peer nature of WebRTC.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After I was introduced to the Agora platform, I was impressed that setting up the same video call feature is easier with the Agora SDK than with WebRTC. I went ahead to build a video chat application with Agora and Laravel. In this article, however, I don't want Django developers to be left out so we are going to implement a video chat application with Django and Agora.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-agora-is-the-preferred-solution"&gt;
  &lt;/a&gt;
  Why Agora Is the Preferred Solution
&lt;/h1&gt;

&lt;p&gt;After building a video chat app with Agora, I want to highlight some of the advantages:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;There's one SDK for everything - voice, video, live streaming, screen sharing, and so on.&lt;/li&gt;


&lt;li&gt;I didn't have to set up a turn server with &lt;a href="https://github.com/coturn/coturn"&gt;coturn&lt;/a&gt; on Amazon EC2 as I did in the other implementation to relay traffic between peers on different networks.&lt;/li&gt;

&lt;li&gt;You get &lt;a href="https://www.agora.io/en/pricing/"&gt;10,000 minutes every month &lt;/a&gt;free, and this gives you the flexibility to develop your solution prototype for free.&lt;/li&gt;

&lt;li&gt;You don't have the challenge of managing the underlying infrastructure supporting the video call functionality.&lt;/li&gt;

&lt;li&gt;Intuitive API documentation is available.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Python 3.8.5&lt;/li&gt;
&lt;li&gt;An average knowledge about how to create a Django project and app. The following tutorial can help you: &lt;a href="https://docs.djangoproject.com/en/3.1/intro/tutorial01/%0A"&gt;Writing your first Django app&lt;/a&gt;.&lt;/li&gt;

&lt;li&gt;A free pusher account on &lt;a href="https://pusher.com/"&gt;pusher.com&lt;/a&gt;
&lt;/li&gt;

&lt;li&gt;An understanding of &lt;a href="https://pusher.com/docs/channels/using_channels/presence-channels"&gt;pusher presence channels&lt;/a&gt; and the &lt;a href="https://github.com/pusher/pusher-http-python#installation"&gt;python server library&lt;/a&gt;.&lt;/li&gt;

&lt;li&gt;Agora Developer Account: (See &lt;a href="https://www.agora.io/en/blog/how-to-get-started-with-agora"&gt;How to get started with Agora&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  Project Setup
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create and activate a python3 virtual environment for this project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open your terminal or command prompt and navigate to your Django project directory. We will use &lt;strong&gt;mysite&lt;/strong&gt; as the project name for this tutorial.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the necessary packages from your terminal or command prompt.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    pip install pusher python-dotenv

&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a new app called agora. Run the following from your terminal.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
   python manage.py startapp agora

&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the project directory i.e &lt;strong&gt;mysite&lt;/strong&gt;, run your migrations and create new super users by running the following command from your terminal.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    python manage.py migrate
// run the next command multiple times to create more users
    python manage.py createsuperuser

&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Download the AgoraDynamicKey Python3 code from the Agora repository: &lt;a href="https://github.com/AgoraIO/Tools/tree/master/DynamicKey/AgoraDynamicKey/python3"&gt;AgoraDynamicKey&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Keep the downloaded folder in a location outside the project folder. Some of these files from the folder will be copied into our project when we're configuring the back end.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#configuring-the-backend"&gt;
  &lt;/a&gt;
  Configuring the Backend
&lt;/h1&gt;

&lt;p&gt;We will create the views and classes with the methods needed to generate the Agora token to establish a call. We will set up Pusher at the server-side as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-add-agora-to-the-installed-apps-in-mysitesettingspy"&gt;
  &lt;/a&gt;
  1. Add agora to the installed apps in mysite/settings.py
&lt;/h3&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#2-add-application-routes"&gt;
  &lt;/a&gt;
  2. Add application routes
&lt;/h3&gt;

&lt;p&gt;Create a file named &lt;strong&gt;urls.py&lt;/strong&gt; in the agora directory and add the following code.&lt;br&gt;
From your terminal or command prompt:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```bash

   touch agora/urls.py

```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Add the following to &lt;strong&gt;agora/urls.py&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;Register the agora app routes at the project level. Add the following code to &lt;strong&gt;mysite/urls.py&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#3-add-the-downloaded-agoradynamickey-generator-files"&gt;
  &lt;/a&gt;
  3. Add the downloaded AgoraDynamicKey generator files
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Open your command prompt, and in the &lt;strong&gt;agora&lt;/strong&gt; directory, create a sub-directory named &lt;strong&gt;agora_key&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
   &lt;span class="nb"&gt;cd &lt;/span&gt;agora
   &lt;span class="nb"&gt;mkdir &lt;/span&gt;agora_key

&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy &lt;strong&gt;AccessToken.py&lt;strong&gt; and &lt;strong&gt;RtcTokenBuilder.py&lt;/strong&gt; from the &lt;strong&gt;src&lt;/strong&gt; directory in the downloaded files and add them to the &lt;strong&gt;agora_key&lt;/strong&gt; directory.&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-create-the-views-for-the-agora-app-in-agoraviewspy"&gt;
  &lt;/a&gt;
  4. Create the views for the Agora app in agora/views.py
&lt;/h3&gt;

&lt;p&gt;Add the following block of code to the &lt;strong&gt;agora/views.py&lt;/strong&gt; file.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h4&gt;
  &lt;a href="#breakdown-of-methods-in-agoraviewspy"&gt;
  &lt;/a&gt;
  Breakdown of Methods in agora/views.py
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;index:&lt;/strong&gt; To view the video call page. Only authenticated users can view the page but non-authenticated users are redirected to the login page. We return a list of all the users apart from the currently authenticated user to be rendered on the front end.&lt;/li&gt;

&lt;li&gt;
&lt;strong&gt;pusher_auth:&lt;/strong&gt; It serves as the endpoint for authenticating the logged-in user as they join the pusher's presence channel. The ID and name of the user are returned after successful authentication with the pusher.&lt;/li&gt;

&lt;li&gt;
&lt;strong&gt;generate_agora_token:&lt;/strong&gt; To generate the Agora dynamic token. The token is used to authenticate app users when they join the agora channel to establish a call.&lt;/li&gt;

&lt;li&gt;
&lt;strong&gt;call_user:&lt;/strong&gt; This triggers a &lt;strong&gt;make-agora-call&lt;/strong&gt; event on the &lt;strong&gt;presence-online-channel&lt;/strong&gt; to which all logged-in users are subscribed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The data broadcast with the &lt;strong&gt;make-agora-call&lt;/strong&gt; event across the &lt;strong&gt;presence-online-channel&lt;/strong&gt; contains the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;userToCall:&lt;/strong&gt; This is the ID of the user who is supposed to receive a call from a caller.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;channelName:&lt;/strong&gt; This is the call channel that the caller has already joined on the front end. This is a channel created with the Agora SDK on the client-side. It is the room the caller has already joined, waiting for the callee to also join to establish a call connection.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;from:&lt;/strong&gt; The ID of the caller.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From the &lt;strong&gt;make-agora-call&lt;/strong&gt; event, a user can determine whether they are being called if the userToCall value matches their ID. We show an incoming call notification with a button to accept the call. They know who the caller is by the value of from.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#configuring-the-front%C2%A0end"&gt;
  &lt;/a&gt;
  Configuring the Front End
&lt;/h1&gt;

&lt;p&gt;We are going to create the user interface for making and receiving the video call with the ability to toggle the on and off states of the camera and the microphone.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-create-the-html-file-for-the-index%C2%A0view"&gt;
  &lt;/a&gt;
  1. Create the HTML file for the index view.
&lt;/h3&gt;

&lt;p&gt;The HTML file will contain the links to the CDN for Agora SDK, Vue.js, Pusher, Bootstrap for styling, and our custom CSS and Javascript.&lt;/p&gt;

&lt;p&gt;In your terminal navigate to the &lt;strong&gt;agora&lt;/strong&gt; directory, create a &lt;strong&gt;templates&lt;/strong&gt; directory and an &lt;strong&gt;agora&lt;/strong&gt; subdirectory within it.&lt;br&gt;
Create your &lt;strong&gt;index.html&lt;/strong&gt; file in the &lt;strong&gt;agora&lt;/strong&gt; subdirectory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    cd agora
    mkdir -p templates/agora
    touch templates/agora/index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Add the following to the &lt;strong&gt;index.html&lt;/strong&gt; file:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-create-the-static%C2%A0files"&gt;
  &lt;/a&gt;
  2. Create the static files
&lt;/h3&gt;

&lt;p&gt;We have &lt;strong&gt;index.css&lt;/strong&gt; for custom styling and &lt;strong&gt;index.js;&lt;/strong&gt; our script for handling the call logic.&lt;/p&gt;

&lt;p&gt;Add the following to &lt;strong&gt;index.js&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Add the following to index.css&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h4&gt;
  &lt;a href="#breakdown-of-the-agora-call-page"&gt;
  &lt;/a&gt;
  Breakdown of the Agora Call Page
&lt;/h4&gt;

&lt;p&gt;On the video call page, i.e &lt;strong&gt;app/templates/agora/ndex.html&lt;/strong&gt;, we display buttons that bear the name of each registered user and whether they are online or offline at the moment.&lt;/p&gt;

&lt;p&gt;To place a call, we click the button of a user with online status. An online user indicates one who is available to receive a call. For our demo, we see a list of users. The user named &lt;strong&gt;Bar&lt;/strong&gt; is indicated as being online. The caller named &lt;strong&gt;Foo&lt;/strong&gt; can call &lt;strong&gt;Bar&lt;/strong&gt; by clicking the button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YiCWg2qk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AP2jNnqj_GriDK5eL" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YiCWg2qk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AP2jNnqj_GriDK5eL" alt="Users with Call Buttons"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bar&lt;/strong&gt; gets an incoming call notification with Accept and Decline buttons and the name of the caller.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KA-SlCHE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AuLdMRCpbatnuyyt7" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KA-SlCHE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2AuLdMRCpbatnuyyt7" alt="Incoming Call Notification"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From the call notification image above, we see that the caller's name is &lt;strong&gt;Foo&lt;/strong&gt;. &lt;strong&gt;Bar&lt;/strong&gt; can then accept the call for a connection to be established.&lt;/p&gt;

&lt;p&gt;The following diagram explains the call logic in terms of the code:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vrf2RK55--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2560/1%2AWWf_DkRuKz0-cFywT7uXBg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vrf2RK55--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2560/1%2AWWf_DkRuKz0-cFywT7uXBg.jpeg" alt="Call Logic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-update-env-variables-with-pusher-and-agora%C2%A0keys"&gt;
  &lt;/a&gt;
  3. Update env variables with Pusher and Agora keys
&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;.env&lt;/strong&gt; file is located at the root of your project folder. Add the credentials you got from Agora and Pusher.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PUSHER_APP_ID=
PUSHER_APP_KEY=
PUSHER_APP_SECRET=
PUSHER_APP_CLUSTER=

AGORA_APP_ID=
AGORA_APP_CERTIFICATE=
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Start the Django development server from your terminal.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
    python manage.py runserver

&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open two different browsers or two instances of the same browser, with one instance in incognito mode, and go to &lt;a href="http://127.0.0.1:8000&amp;lt;br&amp;gt;%0Atarget="&gt;&lt;/a&gt;&lt;a href="http://127.0.0.1:8000"&gt;http://127.0.0.1:8000&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You are presented with the Django admin login page if you are not already logged in.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After successful login, you will be taken to the Django admin dashboard. Click on the VIEW SITE link at the top right to navigate to the video call page.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In each of the browsers you opened, the other users registered on the application are displayed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In one browser, you can call the user who is logged in and on the other browser by clicking the button that bears their name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The other user is prompted to click the Accept button to fully establish the call.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#video-demonstration-of-the-video-call"&gt;
  &lt;/a&gt;
  Video Demonstration of the Video Call
&lt;/h1&gt;

&lt;p&gt;To confirm that your demo is functioning properly, see my demo video as an example of how the finished project should look and function:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/KAjVu51BKUY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;You have now implemented the video call feature in your Django application! It's not that hard, right?&lt;/p&gt;

&lt;p&gt;To include video calling functionality in your web app, you don't have to build it from scratch.&lt;/p&gt;

&lt;p&gt;Agora provides a lot of great features out of the box. It also helps businesses save development hours when implementing video chat into existing projects. The only thing a developer has to do is build a compelling front end - Agora handles the video chat back end.&lt;/p&gt;

&lt;p&gt;Link to project repository: &lt;a href="https://github.com/Mupati/agora-django-video-call"&gt;https://github.com/Mupati/agora-django-video-call&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Online Demo Link: &lt;a href="https://github.com/Mupati/agora-django-video-call"&gt;https://fleet-server.herokuapp.com/agora/login/?next=/agora/dashboard/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make sure the demo link or production version is served on HTTPS.&lt;/p&gt;

&lt;p&gt;Test accounts:&lt;br&gt;&lt;br&gt;
&lt;a href="mailto:foo@example.com"&gt;foo@example.com&lt;/a&gt;: DY6m7feJtbnx3ud&lt;br&gt;&lt;br&gt;
&lt;a href="mailto:bar@example.com"&gt;bar@example.com&lt;/a&gt;: Me3tm5reQpWcn3Q&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#other-resources"&gt;
  &lt;/a&gt;
  Other Resources
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html#agorartc.client.html%23on"&gt;Available events on the Agora Client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;For more information about Agora.io applications, take a look at the: &lt;a href="https://docs.agora.io/en/Video/run_demo_video_call_web?platform=Web"&gt;Agora Quickstart Guides&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Take a look at the complete documentation for the functions discussed above and many more: &lt;a href="https://docs.agora.io/en/Video/API%20Reference/web/index.html"&gt;Agora Web SDK API&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also invite you to &lt;a href="https://app.slack.com/client/T265K8ZT9/C263V5MFV/thread/CPQP4GMJ9-1585749906.115600"&gt;join the Agora.io Developer Slack community&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>agora</category>
      <category>videocall</category>
    </item>
  </channel>
</rss>
