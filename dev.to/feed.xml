<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Adding a Next.js Administration Dashboard to your site in seconds</title>
      <author>IroncladDev</author>
      <pubDate>Mon, 17 Jan 2022 20:20:56 +0000</pubDate>
      <link>https://dev.to/ironcladdev/adding-a-nextjs-administration-dashboard-to-your-site-in-seconds-7jb</link>
      <guid>https://dev.to/ironcladdev/adding-a-nextjs-administration-dashboard-to-your-site-in-seconds-7jb</guid>
      <description>&lt;p&gt;Making an administration dashboard for all my freelance clients is always a challenge.  It's just annoying to create a new database, add it to your site, enable authentication, etc.&lt;/p&gt;

&lt;p&gt;It's understandable why a lot of people use Wordpress instead of raw code, mainly for the reason of the dashboard and how easy it is to edit things.&lt;/p&gt;

&lt;p&gt;Guess what?  I just changed that for all you React and Next.js developers out there.  You won't have to use Wordpress over your favorite stack anymore or spend hours sweating your brain out coding an admin dashboard.  All it takes to implement this is a git clone, editing some JSON and ENV values, and your dashboard is ready to go!&lt;/p&gt;

&lt;p&gt;Take a look at the demo and try it out!&lt;br&gt;
&lt;a href="https://next-admin.ironcladdev.repl.co/"&gt;https://next-admin.ironcladdev.repl.co/&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#getting-the-code"&gt;
  &lt;/a&gt;
  Getting the Code
&lt;/h3&gt;

&lt;p&gt;Open your favorite code editor and run &lt;code&gt;git clone https://github.com/Conner1115/next-admin.git&lt;/code&gt;.  You won't even have to run &lt;code&gt;npx create-next-app&lt;/code&gt; since all the files are already there for you.  Simply run &lt;code&gt;npm run dev&lt;/code&gt; and then start building your site around that.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#customizing-authentication"&gt;
  &lt;/a&gt;
  Customizing Authentication
&lt;/h3&gt;

&lt;p&gt;Before you start on the admin dashboard go to the &lt;code&gt;.env&lt;/code&gt; file.  Set a strong password, which is the one you'll be using to log in and out of your dashboard, and a long random string for the session cookie.  This enables security and prevents brute-forcing.&lt;/p&gt;

&lt;p&gt;You'll need to set two fields in the &lt;code&gt;.env&lt;/code&gt; file.  &lt;code&gt;ADMIN_SESSION&lt;/code&gt; which is the long random string and &lt;code&gt;ADMIN_PASSWORD&lt;/code&gt; which is the password you'll use to log in.&lt;/p&gt;

&lt;p&gt;Don't worry, I've already applied Rate Limiting on the password 'n all (three failed login attempts per thirty minutes), so no worries on the bad guys getting in your site and messing up all the content.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#customizing-the-dashboard"&gt;
  &lt;/a&gt;
  Customizing the Dashboard
&lt;/h3&gt;

&lt;p&gt;Go to the &lt;code&gt;data&lt;/code&gt; folder and then open up &lt;code&gt;data.json&lt;/code&gt;.  This is where you will control the different types of data that can be edited.&lt;/p&gt;

&lt;p&gt;If you went to the admin page in the demo, which is probably corrupted to a massive extent, and played around with it, you can see that the fields consist of single string fields, multiple strings fields, and arrays.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#create-a-single-string-field"&gt;
  &lt;/a&gt;
  Create a single String Field
&lt;/h4&gt;

&lt;p&gt;Open up &lt;code&gt;data.json&lt;/code&gt;, clear out all the existing fields, and add an item &lt;code&gt;"homepage"&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"homepage"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"This is the text that goes on the homepage"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run &lt;code&gt;npm run dev&lt;/code&gt; in the terminal and go to &lt;a href="http://localhost:3000/admin"&gt;http://localhost:3000/admin&lt;/a&gt;.&lt;br&gt;
You should be seeing something already after you log in.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1wgrdIva--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4u94wu27t3b5ax5qanf4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1wgrdIva--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4u94wu27t3b5ax5qanf4.png" alt="Preview of the Homepage" width="880" height="426"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Single-text-fields can be useful for editing short headlines, descriptions, paragraphs, and more.  As for pages that have multiple paragraphs, features, or other things that require more content, you can use Multi-string fields.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#create-a-multistring-field"&gt;
  &lt;/a&gt;
  Create a Multi-string field
&lt;/h4&gt;

&lt;p&gt;Open up &lt;code&gt;data.json&lt;/code&gt; and add a field "paragraphs" as an array of strings.  This array can be of any length.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"homepage"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"This is the text that goes on the homepage"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"paragraphs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"This is paragraph One"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"This is paragraph Two"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"I'm the third paragraph"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, the length of this array will be three and generate three editable text fields.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--77WqOFf4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2e3lfcr0zclijoam41a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--77WqOFf4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2e3lfcr0zclijoam41a.png" alt="String Field Paragraphs" width="880" height="903"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#array-field"&gt;
  &lt;/a&gt;
  Array Field
&lt;/h4&gt;

&lt;p&gt;Array Fields are particularly useful for simple blogs and other storage functions where authentication isn't required.&lt;/p&gt;

&lt;p&gt;Create a new field "posts" and set it to an empty array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"homepage"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"This is the text that goes on the homepage"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"paragraphs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"This is paragraph One"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"This is paragraph Two"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"I'm the third paragraph"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"posts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go &lt;code&gt;schemas.json&lt;/code&gt; and add an object "posts".  From there you can set the input fields.   &lt;strong&gt;Make sure the field in schemas.json is the same name as data.json&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"posts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"textarea"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"date"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"luckynumber"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"number"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That, of course, is just an example.  &lt;code&gt;"date"&lt;/code&gt; and &lt;code&gt;"luckynumber"&lt;/code&gt; exist as examples to show what types of inputs there are.  The type of input (besides "textarea") will always be a type in an html &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; tag.  If "textarea" is used, a &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; tag will be generated.&lt;/p&gt;

&lt;p&gt;Now go to your admin dashboard and try it out.  After creating a post, you should see a new element added to your schema array in &lt;code&gt;data.json&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"posts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Title"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Test Text"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2022-01-21"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"luckynumber"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"d8d2ef38-b02c-496b-9833-c53fa3b063c9"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All schema-type array fields automatically will be given a random &lt;code&gt;uuid&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You may add as many fields to the &lt;code&gt;data.json&lt;/code&gt; object as you want.  All top-level object keys will be added and editable in the dashboard.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accessing-the-data"&gt;
  &lt;/a&gt;
  Accessing the data
&lt;/h3&gt;

&lt;p&gt;To get the data from &lt;code&gt;data.json&lt;/code&gt; and use it in your pages, simply import it in one of your pages and use it as a valid javascript object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;json&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../data/data.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headline&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can access the json file from the client side of your application as well as the server side.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#writing-to-raw-datajson-endraw-"&gt;
  &lt;/a&gt;
  Writing to &lt;code&gt;data.json&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Writing to data.json from anywhere else besides the original admin api routes can be done from another api route.  You may use the &lt;code&gt;writeJSON&lt;/code&gt; function which is located under &lt;code&gt;scripts/util.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;writeJSON&lt;/code&gt; function takes a single parameter, which is a function that should return an object.&lt;/p&gt;

&lt;p&gt;The object returned will overwrite the entire json file completely.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"field"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"value"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;writeJSON&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;//updating a field&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;field&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;newvalue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;//adding a new field&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;field2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Have fun, try your best to not abuse the playground demo too much, and feel free to use this admin page in any of your projects.&lt;/p&gt;




&lt;p&gt;Liked this?  Be sure to follow me on dev, subscribe to me at my &lt;a href="https://connerow.dev"&gt;website&lt;/a&gt;, and support this post with a couple of reactions!&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>nextjs</category>
      <category>react</category>
    </item>
    <item>
      <title>Firing on all cylinders (Part 2): Understanding Hidden Classes to optimize your JavaScript code</title>
      <author>Austin Burger</author>
      <pubDate>Mon, 17 Jan 2022 19:40:56 +0000</pubDate>
      <link>https://dev.to/about14sheep/firing-on-all-cylinders-part-2-understanding-hidden-classes-to-optimize-your-javascript-code-5di3</link>
      <guid>https://dev.to/about14sheep/firing-on-all-cylinders-part-2-understanding-hidden-classes-to-optimize-your-javascript-code-5di3</guid>
      <description>&lt;p&gt;In the first part of this series we went over the differences between dynamic and non-dynamic languages. We also went over the difference between how the two approach object storage lookup. We discussed the meaning of offset, the displacement integer in memory between an object and its properties. We then looked into how JavaScript interpreters combine all of that through the use of hash tables.&lt;/p&gt;

&lt;p&gt;We left on a cliff hanger. Realizing that the use of hash tables is inefficient, we hinted at the way v8 mitigates this: Hidden Classes.&lt;/p&gt;

&lt;p&gt;In part 2 of this series we learn what hidden classes are, how they work, and how the v8 JavaScript interpreter handles object storage look up efficiently.&lt;/p&gt;

&lt;p&gt;Along the way I will stop at where, I think, the best understanding of the one-liners (mentioned in part 1) can come from.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-we-begin"&gt;
  &lt;/a&gt;
  Before we begin
&lt;/h2&gt;

&lt;p&gt;Although the concepts mentioned here may not be required to get value from this post. If you are confused with the term offset, how hash tables work, or how JavaScript interpreters handle object storage lookup; I encourage you to go back and read part 1 of this series.&lt;/p&gt;

&lt;p&gt;I have always felt that in order to understand a solution you must first understand the problem the solution solves.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-rise-of-hidden-classes"&gt;
  &lt;/a&gt;
  The Rise of Hidden Classes
&lt;/h2&gt;

&lt;p&gt;Hidden Classes are based on the same principles behind the fixed offset mapping in non-dynamic languages (see part 1). The difference is that they are created at runtime, but the outcome is the same. Hidden Classes allow the v8 interpreter to optimize property access time on objects. Hidden Classes are created for each and every object in your program.&lt;/p&gt;

&lt;p&gt;We will go back to our example from part one of the series, the employee constructor function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Define a simple constructor function for an employee&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;employee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;salary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;salary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;salary&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the v8 interpreter reads this code, it first creates a pointer to a location in memory where the call signature for the &lt;code&gt;employee&lt;/code&gt; function is (this 'shell' does not include the properties as we learned in part 1). So you end up with your first hidden class (we can call this HC0):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kBD5wYVn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wunqui77w4758je07vr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kBD5wYVn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wunqui77w4758je07vr.png" alt="Hidden Class 0" width="166" height="166"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, when the interpreter reads the next line (&lt;code&gt;this.salary&lt;/code&gt;) it creates a new hidden class for &lt;code&gt;employee&lt;/code&gt; that includes the offset value for the property &lt;code&gt;this.salary&lt;/code&gt;. It then updates the pointer to now point to this new hidden class. Also, it adds a transition from the first hidden class (HC0) to the new hidden class (HC1):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4jENzAEy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zsgam7rdhx35ohonlml0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4jENzAEy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zsgam7rdhx35ohonlml0.png" alt="Hidden Class 1" width="166" height="166"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nest, just like previously, when the interpreter reads the next line (&lt;code&gt;this.position&lt;/code&gt;) it creates a new hidden class (and updates the pointer) for &lt;code&gt;employee&lt;/code&gt; that includes the offset value for the property &lt;code&gt;this.position&lt;/code&gt; &lt;em&gt;along with&lt;/em&gt; the already added offset value for the property &lt;code&gt;this.salary&lt;/code&gt;. It then, also just like previously, adds a new transition from (HC1) to (HC2):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VxRj2eLv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a839o7pof8c822esqldb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VxRj2eLv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a839o7pof8c822esqldb.png" alt="Hidden Class 2" width="166" height="166"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All of these together in one big happy Harry Potter family tree looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qjMnLHol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hntn48tgr6byc9lx66a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qjMnLHol--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hntn48tgr6byc9lx66a.png" alt="Hidden Class All" width="736" height="366"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this image you can see the final state of the hidden classes and transitions that make up the &lt;code&gt;employee&lt;/code&gt; constructor function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-it-all-means"&gt;
  &lt;/a&gt;
  What it all means
&lt;/h2&gt;

&lt;p&gt;The transitions between the hidden classes are important. They allow for hidden classes to be shared among similar objects. What this means is that if two objects share a hidden class and you add a new property to both of them, transitions ensure that both of the objects will have the same hidden class.&lt;/p&gt;

&lt;p&gt;This is important because being able to share hidden classes between object is what removes that need to have a hash map with each instance. Instead you have one hidden class, accessed by one quick lookup, shared among all objects of the &lt;code&gt;employee&lt;/code&gt; type.&lt;/p&gt;

&lt;p&gt;Now here's the catch...&lt;/p&gt;

&lt;p&gt;The order in which you add dynamic properties to an object matters. Changing this order between two similar objects creates two different hidden classes, omitting the optimization we just discussed!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-on-the-catch"&gt;
  &lt;/a&gt;
  More on the catch
&lt;/h2&gt;

&lt;p&gt;Let's look at what we just discussed in code. We will create two &lt;code&gt;employee&lt;/code&gt; objects and dynamically add some properties to both of them, but we will do it out of order:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Instantiate the two employees&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;salesEmployee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sales&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ceoEmployee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;employee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ceo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// add two new properties to salesEmployee&lt;/span&gt;
&lt;span class="nx"&gt;salesEmployee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payDay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Saturday&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;salesEmployee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phoneNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8675309&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// add the same two properties to ceoEmployee but in a different order&lt;/span&gt;
&lt;span class="nx"&gt;ceoEmployee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phoneNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9087654&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;ceoEmployee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payDay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Monday&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This looks the same, after this is ran you have two employee's with the same structure, all conforming to the &lt;code&gt;employee&lt;/code&gt; constructor function shape. Since the shape of the objects seems identical it seems logical to assume they will share the same hidden class and all the optimization that comes with it... right?&lt;/p&gt;

&lt;p&gt;Nope, as it turns out the v8 interpreter will create two separate hidden classes. One for each, as the offset for the two dynamically added properties will be different. To better explain this i'll use a food analogy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#same-same-but-different"&gt;
  &lt;/a&gt;
  Same, Same; but Different
&lt;/h2&gt;

&lt;p&gt;Imagine you are cooking a roast. There are many possible ways to cook a roast, however we will limit this discussion to just two. You might use a crock-pot and let it simmer all day pulling it out at the end to flash sear the edges. You might first sear the edges before you leave it to simmer. In both of these scenarios the ingredients are the same, however the technique is different. Both of them result in a delicious dinner, but both of them has their own distinct &lt;em&gt;recipe&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This is how optimizing hidden classes works in v8. The order in which you dynamically add properties to an object matters. Either way, it is valid JavaScript just like both are valid roasts. Also just like the roasts; although the outcome is the same, the &lt;em&gt;recipe&lt;/em&gt; is different. You have to memorize the two different techniques in cooking, so too does the v8 interpreter have to store (memorize) the two different objects and the offset of their property values.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;When you use TypeScript, you are required to do this. The TypeScript compiler will throw an error if you try and add a property to an object dynamically. This is one of the many reasons &lt;strong&gt;we love TypeScript&lt;/strong&gt;. You could almost say that the TL;DR for this post is "use TypeScript".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h2&gt;

&lt;p&gt;With a better understanding of hidden classes and the catch with how you apply properties dynamically, I think this one-liner might make more sense:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;always add dynamic properties to an instantiation of a class (object) in the same order&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I had originally thought to add inline caching to this part of the series, however this post is already a long one. No worries though, we can just do a part 3! &lt;/p&gt;

&lt;p&gt;Thank you for reading and if you have any questions don't hesitate to leave a comment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further reading
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://engineering.linecorp.com/en/blog/v8-hidden-class/"&gt;Blog: Hidden Classes in v8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://richardartoul.github.io/jekyll/update/2015/04/26/hidden-classes.html"&gt;Another Blog on Hidden Classes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://v8.dev/blog"&gt;The official v8 engine blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Offset_%28computer_science%29"&gt;Wikipedia article on Offset&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>performance</category>
      <category>programming</category>
    </item>
    <item>
      <title>Building GitHub Apps with Golang</title>
      <author>Martin Heinz</author>
      <pubDate>Mon, 17 Jan 2022 19:11:57 +0000</pubDate>
      <link>https://dev.to/martinheinz/building-github-apps-with-golang-3ljo</link>
      <guid>https://dev.to/martinheinz/building-github-apps-with-golang-3ljo</guid>
      <description>&lt;p&gt;If you're using GitHub as your version control system of choice then GitHub Apps can be incredibly useful for many tasks including building CI/CD, managing repositories, querying statistical data and much more. In this article we will walk through the process of building such an app in Go including setting up the GitHub integration, authenticating with GitHub, listening to webhooks, querying GitHub API and more.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;TL;DR: All the code used in this article is available at &lt;a href="https://github.com/MartinHeinz/go-github-app"&gt;https://github.com/MartinHeinz/go-github-app&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#choosing-integration-type"&gt;
  &lt;/a&gt;
  Choosing Integration Type
&lt;/h2&gt;

&lt;p&gt;Before we jump into building the app, we first need to decide which type of integration we want to use. GitHub provides 3 options - &lt;em&gt;Personal Access Tokens&lt;/em&gt;, &lt;em&gt;GitHub Apps&lt;/em&gt; and &lt;em&gt;OAuth Apps&lt;/em&gt;. Each of these 3 have their pros and cons, so here are some basic things to consider:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Personal Access Token&lt;/em&gt; is the simplest form of authentication and is suitable if you only need to authenticate with GitHub as &lt;em&gt;yourself&lt;/em&gt;. If you need to act on behalf of other users, then this won't be good enough&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;GitHub Apps&lt;/em&gt; are the preferred way of developing GitHub integrations. They can be installed by individual users as well as whole organizations. They can listen to events from GitHub via webhooks as well as access the API when needed. They're quite powerful, but even if you request all the permissions available, you won't be able to use them to perform all the actions that a user can.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;OAuth Apps&lt;/em&gt; use OAuth2 to authenticate with GitHub on behalf of user. This means that they can perform any action that user can. This might seem like the best option, but the permissions don't provide the same granularity as GitHub Apps, and it's also more difficult to set up because of OAuth.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you're not sure what to choose, then you can also take a look at &lt;a href="https://docs.github.com/en/developers/apps/getting-started-with-apps/about-apps#determining-which-integration-to-build"&gt;diagram in docs&lt;/a&gt; which might help you decide. In this article we will use GitHub App as it's very versatile integration and best option for most use cases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up"&gt;
  &lt;/a&gt;
  Setting Up
&lt;/h2&gt;

&lt;p&gt;Before we start writing any code, we need to create and configure the GitHub App integration:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;As a prerequisite, we need a tunnel which we will use to deliver GitHub webhooks from internet to our locally running application. You will need to install &lt;em&gt;localtunnel&lt;/em&gt; tool with &lt;code&gt;npm install -g localtunnel&lt;/code&gt; and start forwarding to your localhost using &lt;code&gt;lt --port 8080&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next we need to go to &lt;a href="https://github.com/settings/apps/new"&gt;https://github.com/settings/apps/new&lt;/a&gt; to configure the integration. Fill the fields as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Homepage URL&lt;/em&gt;: Your &lt;em&gt;localtunnel&lt;/em&gt; URL&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Webhook URL&lt;/em&gt;: &lt;code&gt;https://&amp;lt;LOCALTUNNEL_URL&amp;gt;/api/v1/github/payload&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Webhook secret&lt;/em&gt;: any secret you want (and save it)&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Repository Permissions&lt;/em&gt;: Contents, Metadata (Read-only)&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Subscribe to events&lt;/em&gt;: Push, Release&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After creating the app, you will be presented with the settings page of the integration. Take note of &lt;em&gt;App ID&lt;/em&gt;, generate a private key and download it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next you will also need to install the app to use it with your GitHub account. Go to &lt;em&gt;Install App&lt;/em&gt; tab and install it into your account.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We also need &lt;em&gt;installation ID&lt;/em&gt;, which we can find by going to &lt;em&gt;Advanced&lt;/em&gt; tab and clicking on latest delivery in the list, take a note of installation ID from request payload, it should be located in &lt;code&gt;{ "installation": { "id": &amp;lt;...&amp;gt;} }&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you've got lost somewhere along the way, refer to the guide &lt;a href="https://docs.github.com/en/developers/apps/getting-started-with-apps/setting-up-your-development-environment-to-create-a-github-app"&gt;GitHub docs&lt;/a&gt; which shows where you can find each of the values.&lt;/p&gt;

&lt;p&gt;With that done, we have the integration configured and all the important values saved. Before we start receiving events and making API requests we need to get the Go server up and running, so let's start coding!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-the-app"&gt;
  &lt;/a&gt;
  Building the App
&lt;/h2&gt;

&lt;p&gt;To build the Go application, we will use the template I prepared in &lt;a href="https://github.com/MartinHeinz/go-github-app"&gt;https://github.com/MartinHeinz/go-github-app&lt;/a&gt;. This application is ready to be used as GitHub app and all that's missing in it, are a couple of variables which we saved during setup in previous section. The repository contains convenience script which you can use to populate all the values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone git@github.com:MartinHeinz/go-github-app.git &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;go-github-app
./configure_project.sh &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;APP_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"54321"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;INSTALLATION_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"987654321"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;WEBHOOK_SECRET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"verysecret"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;KEY_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"./github_key.pem"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nv"&gt;REGISTRY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"ghcr.io/&amp;lt;GITHUB_USERNAME&amp;gt;/go-github-app"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following sections will walk you through the code but if you're inpatient, then the app is good to go. You can use &lt;code&gt;make build&lt;/code&gt; to build a binary of the application or &lt;code&gt;make container&lt;/code&gt; to create a containerized version of it.&lt;/p&gt;

&lt;p&gt;First part of the code we need to tackle is authentication. It's done using &lt;code&gt;ghinstallation&lt;/code&gt; package as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;InitGitHubClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;tr&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultTransport&lt;/span&gt;
    &lt;span class="n"&gt;itr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ghinstallation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewKeyFromFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;12345&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;123456789&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"/config/github-app.pem"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GitHubClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Transport&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;itr&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function, which is invoked from &lt;code&gt;main.go&lt;/code&gt; during &lt;em&gt;Gin&lt;/em&gt; server start-up, takes App ID, Installation ID and private key to create a GitHub client which is then stored in global config in &lt;code&gt;config.Config.GitHubClient&lt;/code&gt;. We will use this client to talk to the GitHub API later.&lt;/p&gt;

&lt;p&gt;Along with the GitHub client, we also need to set up server routes so that we can receive payloads:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// ...&lt;/span&gt;
    &lt;span class="n"&gt;v1&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/api/v1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/github/payload"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;webhooks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ConsumeEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/github/pullrequests/:owner/:repo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;apis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetPullRequests&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/github/pullrequests/:owner/:repo/:page"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;apis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetPullRequestsPaginated&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InitGitHubClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;":%v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ServerPort&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First of these is the payload path at &lt;code&gt;http://.../api/v1/github/payload&lt;/code&gt; which we used during GitHub integration setup. This path is associated with &lt;code&gt;webhooks.ConsumeEvent&lt;/code&gt; function which will receive all the events from GitHub.&lt;/p&gt;

&lt;p&gt;For security reasons, the first thing the &lt;code&gt;webhooks.ConsumeEvent&lt;/code&gt; function does is verify request signature to make sure that GitHub is really the service that generated the event:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;VerifySignature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;hmac&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sha256&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GitHubWebhookSecret&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="n"&gt;computedSignature&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"sha256="&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;hex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EncodeToString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"computed signature: %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;computedSignature&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;computedSignature&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;signature&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;ConsumeEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ioutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;VerifySignature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"X-Hub-Signature-256"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbortWithStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusUnauthorized&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"signatures don't match"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It performs the verification by computing a HMAC digest of payload using webhook secret as a key, which is then compared with the value in &lt;code&gt;X-Hub-Signature-256&lt;/code&gt; header of a request. If the signatures match then we can proceed to consuming the individual events:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;ConsumeEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// ...&lt;/span&gt;
    &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"X-GitHub-Event"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;Events&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"consuming event: %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;EventPayload&lt;/span&gt;
            &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unmarshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Consumers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)](&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"couldn't consume event %s, error: %+v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="c"&gt;// We're responding to GitHub API, we really just want to say "OK" or "not OK"&lt;/span&gt;
                &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbortWithStatusJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusInternalServerError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"reason"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"consumed event: %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbortWithStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusNoContent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Unsupported event: %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbortWithStatusJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusNotImplemented&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"reason"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Unsupported event: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above snippet we extract the event type from &lt;code&gt;X-GitHub-Event&lt;/code&gt; header and iterate through a list of events that our app supports. In this case those are:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;Install&lt;/span&gt;     &lt;span class="n"&gt;Event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"installation"&lt;/span&gt;
    &lt;span class="n"&gt;Ping&lt;/span&gt;        &lt;span class="n"&gt;Event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"ping"&lt;/span&gt;
    &lt;span class="n"&gt;Push&lt;/span&gt;        &lt;span class="n"&gt;Event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"push"&lt;/span&gt;
    &lt;span class="n"&gt;PullRequest&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"pull_request"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;Events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Ping&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;Push&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;PullRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the event name matches one of the options we proceed with loading the JSON payload into a &lt;code&gt;EventPayload&lt;/code&gt; struct, which is defined in &lt;a href="https://github.com/MartinHeinz/go-github-app/blob/master/cmd/app/webhooks/models.go"&gt;&lt;code&gt;cmd/app/webhook/models.go&lt;/code&gt;&lt;/a&gt;. It's just a struct generated using &lt;a href="https://mholt.github.io/json-to-go/"&gt;https://mholt.github.io/json-to-go/&lt;/a&gt; with unnecessary fields stripped.&lt;/p&gt;

&lt;p&gt;That payload is then sent to function that handles the respective event type, which is one of the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;Consumers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;map&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EventPayload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="n"&gt;consumeInstallEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Ping&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;consumePingEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Push&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;        &lt;span class="n"&gt;consumePushEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PullRequest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;consumePullRequestEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For example for &lt;em&gt;push&lt;/em&gt; event one can do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;consumePushEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="n"&gt;EventPayload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Process event ...&lt;/span&gt;
    &lt;span class="c"&gt;// Insert data into database ...&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Received push from %s, by user %s, on branch %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Repository&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FullName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pusher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ref&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Enumerating commits&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;commits&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Commits&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;commits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;commits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Pushed commits: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;commits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That being in this case - checking the receiving repository and branch and enumerating the commits contained in this single push. This is the place where you could for example insert the data into database or send some notification regarding the event. &lt;/p&gt;

&lt;p&gt;Now we have the code ready, but how do we test it? To do so, we will use the tunnel which you already should have running, assuming you followed the steps in previous sections.&lt;/p&gt;

&lt;p&gt;Additionally, we also need to spin up the server, you can do that by running &lt;code&gt;make container&lt;/code&gt; to build the containerized application, followed by &lt;code&gt;make run&lt;/code&gt; which will start the container that listens on port &lt;code&gt;8080&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now you can simply push to one of your repositories and you should see a similar output in the server logs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;GIN] 2022/01/02 - 14:44:10 | 204 |     696.813µs |   123.82.234.90 | POST     &lt;span class="s2"&gt;"/api/v1/github/payload"&lt;/span&gt;
2022/01/02 14:44:10 Received push from MartinHeinz/some-repo, by user MartinHeinz, on branch refs/heads/master
2022/01/02 14:44:10 Pushed commits: &lt;span class="o"&gt;[&lt;/span&gt;9024da76ec611e60a8dc833eaa6bca7b005bb029]
2022/01/02 14:44:10 consumed event: push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To avoid having to push dummy changes to repositories all the time, you can redeliver payloads from &lt;em&gt;Advanced&lt;/em&gt; tab in your GitHub App configuration. On this tab you will find a list of previous requests, just choose one and hit the &lt;em&gt;Redeliver&lt;/em&gt; button.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-api-calls"&gt;
  &lt;/a&gt;
  Making API Calls
&lt;/h2&gt;

&lt;p&gt;GitHub apps are centered around webhooks to which you can subscribe and listen to, but you can also use any of the GitHub REST/GraphQL API endpoints assuming you requested the necessary permissions. Using API rather than push events is useful - for example - when creating files, analyzing bulk data or querying data which cannot be received from webhooks.&lt;/p&gt;

&lt;p&gt;For demonstration of how to do so, we will retrieve pull requests of specified repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;GetPullRequests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"owner"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"repo"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pullRequests&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GitHubClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PullRequests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PullRequestListOptions&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"open"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AbortWithStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusCode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;pullRequestTitles&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pr&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;pullRequests&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;pullRequestTitles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pullRequestTitles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StatusOK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"pull_requests"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pullRequestTitles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function takes 2 arguments - &lt;code&gt;owner&lt;/code&gt; and &lt;code&gt;repo&lt;/code&gt; - which get passed to &lt;code&gt;PullRequests.List(...)&lt;/code&gt; function of GitHub client instance. Along with that, we also provide &lt;code&gt;PullRequestListOptions&lt;/code&gt; struct to specify that we're only interested in pull requests with state set to &lt;code&gt;open&lt;/code&gt;. We then iterate over returned PRs and accumulate all their titles which we return in response.&lt;/p&gt;

&lt;p&gt;The above function resides on &lt;code&gt;.../api/v1/github/pullrequests/:owner/:repo&lt;/code&gt; path as specified in &lt;code&gt;main.go&lt;/code&gt; so we can query it like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl http://localhost:8080/api/v1/github/pullrequests/octocat/hello-world | jq &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It might not be ideal to query API as shown above in situations where we expect a lot of data to be returned. In those cases we can utilize &lt;em&gt;paging&lt;/em&gt; to avoid hitting rate limits. A function called &lt;code&gt;GetPullRequestsPaginated&lt;/code&gt; that performs the same task as &lt;code&gt;GetPullRequests&lt;/code&gt; with addition of &lt;code&gt;page&lt;/code&gt; argument for specifying page size can be found in &lt;a href="https://github.com/MartinHeinz/go-github-app/blob/master/cmd/app/apis/github.go"&gt;&lt;code&gt;cmd/app/apis/github.go&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-tests"&gt;
  &lt;/a&gt;
  Writing Tests
&lt;/h2&gt;

&lt;p&gt;So far we've been testing the app with &lt;em&gt;localtunnel&lt;/em&gt;, which is nice for quick ad-hoc tests against live API, but it doesn't replace proper unit tests. To write unit tests for this app, we need to mock-out the API to avoid being dependent on the external service. To do so, we can use &lt;a href="https://github.com/migueleliasweb/go-github-mock"&gt;&lt;code&gt;go-github-mock&lt;/code&gt;&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;TestGithubGetPullRequests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;expectedTitles&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;"PR number one"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"PR number three"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;closedPullRequestTitle&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"PR number two"&lt;/span&gt;
    &lt;span class="n"&gt;mockedHTTPClient&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewMockedHTTPClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WithRequestMatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetReposPullsByOwnerByRepo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PullRequest&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"open"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;expectedTitles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"closed"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;closedPullRequestTitle&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"open"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;expectedTitles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mockedHTTPClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GitHubClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;

    &lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestMode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;httptest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewRecorder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateTestContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="n"&gt;gin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Param&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"owner"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"octocat"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"repo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"hello-world"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;GetPullRequests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;ioutil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;expectedTitles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NotContains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;closedPullRequestTitle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;expectedTitles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This test starts by defining mock client which will be used in place of normal GitHub client. We give it list of pull request which will be returned when &lt;code&gt;PullRequests.List&lt;/code&gt; is called. We then create test context with arguments that we want to pass to the function under test, and we invoke the function. Finally, we read the response body and assert that only PRs with &lt;code&gt;open&lt;/code&gt; state were returned. &lt;/p&gt;

&lt;p&gt;For more tests, see the full &lt;a href="https://github.com/MartinHeinz/go-github-app/blob/master/cmd/app/apis/github_test.go"&gt;source code&lt;/a&gt; which includes examples of tests for pagination as well as handling of errors coming from GitHub API.&lt;/p&gt;

&lt;p&gt;When it comes to testing our webhook methods, we don't need to use a mock client, because we're dealing with basic API requests. Example of such tests including generic API testing setup can be found in &lt;a href="https://github.com/MartinHeinz/go-github-app/blob/master/cmd/app/webhooks/webhook_test.go"&gt;&lt;code&gt;cmd/app/webhooks/github_test.go&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article I tried to give you a quick tour of both GitHub apps, as well as the &lt;a href="https://github.com/MartinHeinz/go-github-app/"&gt;GitHub repository&lt;/a&gt; containing the sample Go GitHub project. In both cases, I didn't cover everything, the Go client package has much more to offer and to see all the actions you can perform with it, I recommend skimming through the &lt;a href="https://pkg.go.dev/github.com/google/go-github/v41/github#pkg-index"&gt;docs index&lt;/a&gt; as well as looking at the source code itself where GitHub API links are listed along each function. For example, like the earlier shown &lt;code&gt;PullRequests.List&lt;/code&gt; &lt;a href="https://github.com/google/go-github/blob/master/github/pulls.go#L147"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As for the repository, there are couple more things you might want to take a look at, including Makefile targets, &lt;a href="https://github.com/MartinHeinz/go-github-app/tree/master/.github/workflows"&gt;CI/CD&lt;/a&gt; or additional tests. If you have any feedback or suggestions, feel free to create an issue or just star it if it was helpful to you. 🙂&lt;/p&gt;

</description>
      <category>go</category>
      <category>github</category>
      <category>api</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How coding is like crocheting</title>
      <author>La Rainne Pasion</author>
      <pubDate>Mon, 17 Jan 2022 19:07:22 +0000</pubDate>
      <link>https://dev.to/larainnepasion/how-crocheting-is-like-coding-1mkn</link>
      <guid>https://dev.to/larainnepasion/how-crocheting-is-like-coding-1mkn</guid>
      <description>&lt;p&gt;At first glance, coding and crocheting appear to have little in common outside of both being words that start with the letter “C.” One is a process that allows us to build cutting-edge computer software, websites, games, and apps. The other is an allegedly old-fashioned craft, more often associated with grandmas in rocking chairs than anything high-tech.&lt;/p&gt;

&lt;p&gt;But what if I told you that the two are more similar than you might think? Barbara Oakley, in her famed &lt;a href="https://www.coursera.org/learn/learning-how-to-learn"&gt;Learning How to Learn Coursera program&lt;/a&gt;, teaches us that the “chunks” of information we know from one concept can sometimes have surprising links to another idea we’re learning. In my case, I realized after finishing the first week of a  &lt;a href="https://leonnoel.com/100devs/"&gt;software engineering course&lt;/a&gt;  that crocheting and coding aren’t all that different when it comes to things like the language, the community, and the journey to a finished product.&lt;/p&gt;

&lt;p&gt;Don’t believe me? Read on to see what I mean.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coding-and-crocheting-have-mystifying-lingo"&gt;
  &lt;/a&gt;
  Coding and crocheting have mystifying lingo
&lt;/h3&gt;

&lt;p&gt;When you look at code in a language you’re unfamiliar with, a lot of it seems like gibberish. You may not know right away what &lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt; or &lt;code&gt;rgb()&lt;/code&gt; or &lt;code&gt;JSON&lt;/code&gt; means, but once you become more acquainted with the syntax and terminology, the letters and symbols laid out in front of you start to make sense. With some study and practice, you can recognize which part of the document results in what output on a page.&lt;/p&gt;

&lt;p&gt;Crocheting, like coding, has  &lt;a href="https://www.craftyarncouncil.com/standards/crochet-abbreviations"&gt;its own lexicon&lt;/a&gt;  as well. Read any pattern on how to make a hat and you’ll see it’ll go something like “Ch 87. Ss in 1st ch to join. Ch 2. *[FPdc in next st, dc in next 2 sts]” – not so easy to decipher when you don’t know crochet lingo, but the function of each term becomes much clearer after learning some of the language.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#their-communities-are-generous-and-supportive"&gt;
  &lt;/a&gt;
  Their communities are generous and supportive
&lt;/h3&gt;

&lt;p&gt;Spend a bit of time on (the good side of)  &lt;a href="https://twitter.com/search?q=%23techtwitter&amp;amp;src=typed_query"&gt;#techtwitter&lt;/a&gt;  and you’ll see that there are tons of people in tech offering support to those who are new to coding or are trying to break into the field as engineers and developers. Many of these seasoned professionals volunteer their precious time to troubleshoot code,  &lt;a href="https://twitter.com/i/lists/1459161119520612355"&gt;mentor juniors&lt;/a&gt;, and review portfolios. There are also endless free resources online for learning programming languages or building projects, shared openly by enthusiasts entirely out of generosity. I myself have enrolled in a  &lt;a href="https://leonnoel.com/100devs/"&gt;full-stack web development training program&lt;/a&gt;  for a total of $0.00 thanks to one very altruistic instructor,  &lt;a href="https://twitter.com/leonnoel"&gt;Leon Noel&lt;/a&gt;. This is all to say that plenty of folks who have a passion for coding also have a passion for giving, and often all they ask for in return is for you to pay it forward.&lt;/p&gt;

&lt;p&gt;The same generosity can be seen in crocheting circles and the abundance of knowledge that crafters make available for anyone to access. Google “crochet basics” and you’ll find thousands of tutorials from experienced crocheters explaining everything there is to know about the art. There are also crafters who spend hours upon hours building, testing, and writing patterns that they then  &lt;a href="https://www.allfreecrochet.com/"&gt;release for free&lt;/a&gt;, much like developers do with some of their code. In a way, crocheters have their own open-source databases of projects that they can enhance and customize to their needs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-use-similar-methods-for-fixing-mistakes"&gt;
  &lt;/a&gt;
  You use similar methods for fixing mistakes
&lt;/h3&gt;

&lt;p&gt;One of a crocheter’s worst nightmares is pausing to look at your work in progress only to realize that it’s a little wonky. Fixing a project that’s gone awry involves closely examining your stitches and pinpointing the row(s) in which you may have skipped a stitch, forgotten to change colors, or used the incorrect number of turning chains. Once you figure out where things went wrong, then you can get back on track to finishing your scarf, sweater, or what have you.&lt;/p&gt;

&lt;p&gt;You don’t always get it right the first time when coding, either (in fact, I’d be really impressed – maybe even slightly suspicious – if you did). Just like with crochet, debugging your code calls for carefully inspecting what you’ve worked on and repairing existing errors. Gradually, you learn how to become patient and attentive to detail whether you’re working in VS Code or wielding a crochet hook.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-can-create-beautiful-and-functional-things-with-just-your-hands-and-minimal-tools"&gt;
  &lt;/a&gt;
  You can create beautiful and functional things with just your hands and minimal tools
&lt;/h3&gt;

&lt;p&gt;Give a crafter some yarn, a crochet hook, and time, and you’ll be amazed at what they can make: blankets,  &lt;a href="https://www.twoofwands.com/blog/french-market-bag"&gt;reusable market bags&lt;/a&gt;,  &lt;a href="https://www.repeatcrafterme.com/2020/06/crochet-granny-stripe-shorts-for-men.html"&gt;board shorts&lt;/a&gt;, and even  &lt;a href="https://www.lovecrafts.com/en-us/c/article/a-guide-to-amigurumi"&gt;amigurumi&lt;/a&gt;. In the same vein, programmers can build a limitless array of products with only a computer, a text editor, and probably (highly likely) some caffeine. These two disciplines use minimal tools to construct something beautiful, useful, or often both. At the end of the day, coding and crocheting are different but analogous ways to be creative using your hands–just remember to be careful, because you can get  &lt;a href="https://www.youtube.com/watch?v=DaI30kjVTlI&amp;amp;ab_channel=HealthySoftwareDeveloper"&gt;carpal tunnel syndrome&lt;/a&gt;  doing either activity!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-learn-something-new-every-day"&gt;
  &lt;/a&gt;
  You learn something new every day
&lt;/h3&gt;

&lt;p&gt;Whether you’re a beginner at crochet or a crafter with 10 years of fiber art under your belt, there’s always a new technique to practice or a fresh project to undertake. Being a good crafter means you never stop working to improve your skill or expand your knowledge. The same can be said for coding: to become a great coder is to sign up to be a lifelong student. Engineers, developers, and programmers are constantly picking up new languages, frameworks, and technologies to keep themselves current in their fields. While this may seem daunting, it's a big part of what keeps the work unique and exciting.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Have I convinced you that code and crochet are not as different as you may have thought? Did this make you think about unexpected links between your interests? I'd love to hear them!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>culture</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Learn TailwindCSS: Make A Profile Card</title>
      <author>Shreya Purohit</author>
      <pubDate>Mon, 17 Jan 2022 18:46:03 +0000</pubDate>
      <link>https://dev.to/shreya/learn-tailwindcss-make-a-profile-card-597d</link>
      <guid>https://dev.to/shreya/learn-tailwindcss-make-a-profile-card-597d</guid>
      <description>&lt;p&gt;Tailwind is a CSS framework that lets you build amazing responsive UI with less effort. &lt;br&gt;
If you're learning TailwindCSS, this blog can help you to build concepts stronger by creating a mini profile card with a button in less than 5 minutes. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Is1BG4-B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jir3csift2d3h44mginl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Is1BG4-B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jir3csift2d3h44mginl.jpg" alt="profile" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First you need to install Tailwind in your project. Now there are 3 ways as given below. Visit the one you prefer. As this is a simple card, I'll just use CDN:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Through CLI (fastest): &lt;a href="https://tailwindcss.com/docs/installation"&gt;read here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Through CDN: &lt;a href="https://tailwindcss.com/docs/installation/play-cdn"&gt;read here&lt;/a&gt; - &lt;code&gt;we will use this&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;As a PostCSS plugin: &lt;a href="https://tailwindcss.com/docs/installation/using-postcss"&gt;read here&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We're using CDN for this project. So add this &lt;code&gt;link&lt;/code&gt; inside the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt; &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/tailwindcss@^1.0/dist/tailwind.min.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;If you're using React, I have a step-by-step blog on it already. &lt;br&gt;
&lt;em&gt;Read it here&lt;/em&gt;: &lt;a href="https://dev.to/shreya/how-to-setup-tailwind-in-your-project-3075"&gt;How to setup TailwindCSS in your React App&lt;/a&gt;&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;Now we're ready to use Tailwind. Let's start by defining the basic structure first:

&lt;ul&gt;
&lt;li&gt;To use the image used in this project, copy &lt;a href="https://www.disneyplusinformer.com/wp-content/uploads/2021/09/The-Simpsons-Profile-Icons-8.png"&gt;this link&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;   &lt;span class="c"&gt;&amp;lt;!-- main - parent div --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!--card--&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="c"&gt;&amp;lt;!--profile-image--&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"image"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"profile"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="c"&gt;&amp;lt;!--name--&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Simp&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="c"&gt;&amp;lt;!--username--&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"username"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;@simpyy&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="c"&gt;&amp;lt;!--work--&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"work"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Front-end developer 🧑‍💻&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="c"&gt;&amp;lt;!-- follow button --&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;Follow&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's what you see right now. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dxdTjDZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xvzz63b400sq4rgz9msy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dxdTjDZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xvzz63b400sq4rgz9msy.png" alt="first" width="539" height="151"&gt;&lt;/a&gt;&lt;br&gt;
Pretty boring right?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Let's make it interesting by adding classes that Tailwind provides us:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;We'll start from top to bottom to avoid confusions. But first I'll pick up the div having a class &lt;code&gt;"card"&lt;/code&gt;:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#card-section"&gt;
  &lt;/a&gt;
  &lt;strong&gt;CARD SECTION&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card bg-white flex flex-col items-center justify-center p-4 shadow-lg rounded-2xl w-64"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;bg-white&lt;/code&gt;: sets the white background to the &lt;code&gt;div&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;flex items-center justify-center&lt;/code&gt;: works just as we centre a div using CSS flexbox model. 

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;flex:&lt;/code&gt; sets display to flex&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;items-center:&lt;/code&gt; &lt;code&gt;align-items: center;&lt;/code&gt; in CSS&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;justify-center:&lt;/code&gt; &lt;code&gt;justify-content: center;&lt;/code&gt; in CSS&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;p-4:&lt;/code&gt; sets a padding of 1rem

&lt;ul&gt;
&lt;li&gt;check all possible values &lt;a href="https://tailwindcss.com/docs/padding"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;shadow-lg:&lt;/code&gt; sets shadow to the div

&lt;ul&gt;
&lt;li&gt;possible values: &lt;code&gt;sm | md | lg | xl | 2xl | inner&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7xl6u2CN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guoxqtwh0xueoryt7hnh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7xl6u2CN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guoxqtwh0xueoryt7hnh.png" alt="maindiv" width="605" height="160"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;rounded-2xl:&lt;/code&gt; sets border radius to the element

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;md | lg | full | xl | 2xl&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;w-64:&lt;/code&gt; We want our card to be of a fixed width so setting it accordingly.&lt;/li&gt;
&lt;li&gt;Experiment with &lt;code&gt;w-{number}&lt;/code&gt; and &lt;a href="https://tailwindcss.com/docs/width#fixed-widths"&gt;explore more&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Tp6ypdP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kldobfbers1eefbg1ttm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Tp6ypdP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kldobfbers1eefbg1ttm.png" alt="card-div" width="880" height="438"&gt;&lt;/a&gt;&lt;br&gt;
Our card has started getting shape, so let's center it and start designing! &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#parent-topmost-div"&gt;
  &lt;/a&gt;
  &lt;strong&gt;PARENT (TOPMOST) DIV&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;To center the &lt;code&gt;card&lt;/code&gt; div, I'd take the parent div &lt;code&gt;main&lt;/code&gt; and set CSS grid to it:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- parent div --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"main bg-yellow-400 grid place-items-center h-screen"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;bg-yellow-400:&lt;/code&gt; set the yellow background color. 

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;bg&lt;/code&gt;: background&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;yellow&lt;/code&gt;: color | try more colors available &lt;a href="https://tailwindcss.com/docs/customizing-colors#default-color-palette"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;400&lt;/code&gt;: shades | ranges from 50-900&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;grid h-screen place-items-center:&lt;/code&gt; To centre the card div

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;grid:&lt;/code&gt; sets display to grid&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;place-items-center&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;works like &lt;code&gt;place-items: center;&lt;/code&gt; in css&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;h-screen:&lt;/code&gt; sets full viewport height (full width as screen)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l63oSQPx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqlr1yezlh8gsb59k4dg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l63oSQPx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqlr1yezlh8gsb59k4dg.png" alt="bg" width="791" height="354"&gt;&lt;/a&gt;&lt;br&gt;
Now the card looks much better and visible. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#profile-picture-div"&gt;
  &lt;/a&gt;
  &lt;strong&gt;PROFILE PICTURE DIV&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"profile mx-auto rounded-full py-2 w-16 "&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/simp.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"profile"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;To use the image used in this project, copy &lt;a href="https://www.disneyplusinformer.com/wp-content/uploads/2021/09/The-Simpsons-Profile-Icons-8.png"&gt;this link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mx-auto:&lt;/code&gt; sets equal margins to both (left and right) sides, so centres the image&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;rounded-full:&lt;/code&gt; gives the circular shape 

&lt;ul&gt;
&lt;li&gt;works just like &lt;code&gt;border-radius: 50%&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;py-2:&lt;/code&gt; sets &lt;code&gt;padding-top&lt;/code&gt; and &lt;code&gt;padding-bottom&lt;/code&gt; values to 0.5rem both&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;w-16:&lt;/code&gt; sets image width

&lt;ul&gt;
&lt;li&gt;sizes the image according to the card (experiment with the values)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T07-iZJY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rl62pz7ibprams0h2wr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T07-iZJY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rl62pz7ibprams0h2wr.png" alt="img" width="642" height="283"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#name-div"&gt;
  &lt;/a&gt;
  &lt;strong&gt;NAME DIV&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"name text-gray-800 text-2xl font-medium mt-4 "&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Simp&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;text-gray-800:&lt;/code&gt; sets the &lt;code&gt;font-color&lt;/code&gt; property to greyish black&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;text-2xl:&lt;/code&gt; increases the font size

&lt;ul&gt;
&lt;li&gt;possible values: &lt;code&gt;sm | base | lg | xl | 2xl ...&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;font-medium:&lt;/code&gt; sets the &lt;code&gt;font-weight&lt;/code&gt; property

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;light | normal | medium | semibold | bold&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mt-4:&lt;/code&gt; sets &lt;code&gt;margin-top&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#username-div"&gt;
  &lt;/a&gt;
  &lt;strong&gt;USERNAME DIV&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"username text-gray-500"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;@simpyy&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;text-gray-500:&lt;/code&gt; sets the font color to light gray.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#work-div"&gt;
  &lt;/a&gt;
  &lt;strong&gt;WORK DIV&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"work text-gray-700 mt-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Front-end developer 🧑‍💻&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;text-gray-700:&lt;/code&gt; changes the font color to gray.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mt-4:&lt;/code&gt; sets &lt;code&gt;margin-top&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e5bepuyO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15mgokbbxs4lztt4rhin.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e5bepuyO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15mgokbbxs4lztt4rhin.png" alt="fonts" width="823" height="298"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now almost everything is done. Let's do the final work of designing the &lt;em&gt;Follow Button&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#follow-button"&gt;
  &lt;/a&gt;
  &lt;strong&gt;FOLLOW BUTTON&lt;/strong&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"w-full mt-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bg-blue-500 py-2 px-4 hover:bg-blue-600 text-white w-full font-semibold rounded-lg shadow-lg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        Follow
    &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;div&lt;/em&gt;:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;w-full&lt;/code&gt; sets the full width (according to the parent div) so covers the card properly.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mt-8:&lt;/code&gt; sets &lt;code&gt;margin-top&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;button&lt;/em&gt;:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;bg-blue-500:&lt;/code&gt; sets the blue color

&lt;ul&gt;
&lt;li&gt;explore all the possible colors &lt;a href="https://tailwindcss.com/docs/customizing-colors"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;py-2&lt;/code&gt; and &lt;code&gt;px-4&lt;/code&gt;: sets &lt;code&gt;padding-bottom&lt;/code&gt; and &lt;code&gt;padding-top&lt;/code&gt;, respectively&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;text-white:&lt;/code&gt; sets the &lt;code&gt;font-color&lt;/code&gt; to white&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;hover:bg-blue-600&lt;/code&gt;: sets the CSS hover properties, in this case we've simply increased the shade from &lt;code&gt;500 to 600&lt;/code&gt; to give it a realistic look.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--svRgDDEX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7dps19n5nsdjtcags3mb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--svRgDDEX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7dps19n5nsdjtcags3mb.gif" alt="btn" width="880" height="411"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Congratulations! 🎉 Your follow card is completed now.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;My motive for this post was to make you understand how to add Tailwind classes to a project. I hope I was able to complete this job.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;




&lt;p&gt;I share content related to web development and technical writing on &lt;a href="https://twitter.com/eyeshreya"&gt;Twitter&lt;/a&gt; daily. &lt;/p&gt;

&lt;p&gt;Would love to connect!&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>css</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Add bookmark links to your blog to make it easy to reference</title>
      <author>Rob OLeary</author>
      <pubDate>Mon, 17 Jan 2022 18:40:33 +0000</pubDate>
      <link>https://dev.to/robole/add-bookmark-links-to-your-headings-to-make-your-blog-easy-to-reference-2dm7</link>
      <guid>https://dev.to/robole/add-bookmark-links-to-your-headings-to-make-your-blog-easy-to-reference-2dm7</guid>
      <description>&lt;p&gt;It is kind of an informal industry standard to have a bookmark link in the headings of a page. The link text is typically a link icon (🔗) or a hash symbol (#). The idea is that you can click this link and get an URL that points to that section of the page. It is a bit odd to click a link, have the page scroll down to the section exactly, and then copy the link from the address bar to share it with others. But that is what is done usually.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hcUxGMGc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vj93l0r7au0sllwmaxg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hcUxGMGc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9vj93l0r7au0sllwmaxg.gif" alt="demonstration of clicking on bookmark link" width="590" height="569"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see how some websites have implemented the links in figure 1-0 below. GitHub only shows the link when you hover on the heading. CSS Tricks and Smashing Magazine always show the link, however the link text has a lower color contrast ratio than the rest of the text, but when you hover over it, it gets brighter. GitHub and CSS Tricks place the link at the very beginning of the heading, Smashing Magazine places it right at the end of the heading. Variations on the theme.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uITxt3Us--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzcpqgr8bolb3gidpdf2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uITxt3Us--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzcpqgr8bolb3gidpdf2.png" alt="simple cover image featuring a copy content icon" width="781" height="694"&gt;&lt;/a&gt;&lt;/p&gt;
Figure 1-0. Examples of bookmark links from around the web (GitHub, CSS Tricks, Smashing Magazine)



&lt;p&gt;Today, I will show you how you can write some code to add these links to a page. And I will offer an alternative version, why not just add a button that will copy the URL to the system clipboard for you?&lt;/p&gt;

&lt;p&gt;And now, there is a web specification that adds some &lt;a href="https://wicg.github.io/scroll-to-text-fragment/#navigating-to-text-fragment"&gt;query powers to text fragments&lt;/a&gt;, so you can reference &lt;em&gt;any&lt;/em&gt; part of a webpage in an URL, and you don't have to rely on the page-author to do anything for you!&lt;/p&gt;

&lt;p&gt;Let's explore these options.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-standard-way-a-bookmark-link"&gt;
  &lt;/a&gt;
  The "standard" way - a bookmark link
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/robjoeol/embed/rNGRLvW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;N.B. Codepen runs code in a &lt;code&gt;iframe&lt;/code&gt;, so the bookmark links don't point to a valid external URL. If you run the same code in a page, the links are perfectly valid.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To create a bookmark, we add an unique ID to an element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"my-bookmark"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;How to create a bookmark&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember that there are a &lt;a href="https://stackoverflow.com/questions/70579/what-are-valid-values-for-the-id-attribute-in-html"&gt;few rules&lt;/a&gt; for a valid ID name:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it must contain at least one character,&lt;/li&gt;
&lt;li&gt;it cannot start with a number, and&lt;/li&gt;
&lt;li&gt;must not contain whitespaces (spaces, tabs, etc.).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To create a link to that heading, the URL must contain a text fragment that matches our ID. A text fragment is specified by a hash.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#my-bookmark"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Jump to the heading&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above example is only valid within the same page. You must use an absolute URL if you want to share it with others e.g. &lt;a href="https://www.roboleary.net/2022/01/13/copy-code-to-clipboard-blog.html/#my-bookmark"&gt;https://www.roboleary.net/2022/01/13/copy-code-to-clipboard-blog.html/#my-bookmark&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, to create bookmark links for all of our headings, we need to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add unique IDs to all of our headings except &lt;code&gt;h1&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Insert a link into these headings, set the &lt;code&gt;href&lt;/code&gt; to an absolute URL that includes the ID as a text fragment.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's write the code then!&lt;/p&gt;

&lt;p&gt;We can get all of our headings with &lt;code&gt;document.querySelectorAll("h2, h3, h4, h5, h6")&lt;/code&gt;. We want to loop through each of these headings and add an &lt;code&gt;id&lt;/code&gt;. We must come up with a way to create an unique ID for each heading, a common way to do this is to use the text of the heading to generate a "slug" (that's what the cool kids call it). We will discuss the &lt;code&gt;slugify&lt;/code&gt; function in more detail below.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A slug is a human-readable, unique identifier, used to identify a resource instead of a less human-readable identifier like an id. You use a slug when you want to refer to an item while preserving the ability to see, at a glance, what the item is.&lt;/p&gt;

&lt;p&gt;-- &lt;a href="https://itnext.io/whats-a-slug-f7e74b6c23e0"&gt;What’s a slug and why would I use one? by Dave Sag&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For each heading, we must create an anchor element (&lt;code&gt;a&lt;/code&gt;) and set its &lt;code&gt;href&lt;/code&gt; attribute to the current URL plus the slug as a text fragment. We use the global object &lt;code&gt;window.location&lt;/code&gt; to get the page's URL info. We build our own URL from the pieces rather than use &lt;code&gt;window.location.href&lt;/code&gt;. We do this because &lt;code&gt;window.location.href&lt;/code&gt; includes the text fragment, if someone were to follow a link with a text fragment to the page and we used &lt;code&gt;window.location.href&lt;/code&gt; in our code, we would create a bookmark link with 2 text fragments. Not the outcome we want! Once the link is created correctly, we append it to the heading.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;headings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h2, h3, h4, h5, h6&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// we construct this URL ourselves to exclude the text fragment&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;currentURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;protocol&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;//&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;headings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;slugify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bookmarkLink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;bookmarkLink&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;bookmarkLink&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;href&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;currentURL&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;#&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;heading&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bookmarkLink&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our &lt;code&gt;slugify&lt;/code&gt; function, we want to generate a slug that has no whitespace, and does not have any unwanted punctuation characters. While all punctuation characters are allowed in an &lt;code&gt;id&lt;/code&gt; name, it is common practice to only include hyphens and underscores, probably for the sake of readability. We can use a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions"&gt;regular expression (regex)&lt;/a&gt; in the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace"&gt;replace() function&lt;/a&gt; to remove the unwanted charcters, and replace any spaces with hyphens. I will use something similar to GitHub's algorithm, which uses a weird-looking regex, but no doubt it has been battle-tested by now!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;slugify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Everything except our "safe" characters&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PUNCTUATION_REGEXP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[^\p&lt;/span&gt;&lt;span class="sr"&gt;{L}&lt;/span&gt;&lt;span class="se"&gt;\p&lt;/span&gt;&lt;span class="sr"&gt;{M}&lt;/span&gt;&lt;span class="se"&gt;\p&lt;/span&gt;&lt;span class="sr"&gt;{N}&lt;/span&gt;&lt;span class="se"&gt;\p&lt;/span&gt;&lt;span class="sr"&gt;{Pc}&lt;/span&gt;&lt;span class="se"&gt;\-&lt;/span&gt;&lt;span class="sr"&gt; &lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;/gu&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;PUNCTUATION_REGEXP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/ /g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is a literal description of the &lt;code&gt;PUNCTUATION_REGEXP&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;" Globally match a single character not present in the list below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;\p{L}&lt;/em&gt;: any kind of letter from any language,&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;\p{M}&lt;/em&gt;: a character intended to be combined with another character (e.g. accents, umlauts, enclosing boxes, etc.),&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;\p{N}&lt;/em&gt;: any kind of numeric character in any script,&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;\p{Pc}&lt;/em&gt;: a punctuation character such as an underscore that connects words,&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;\-&lt;/em&gt;: a hyphen,&lt;/li&gt;
&lt;li&gt;and an empty space (which we replace later)."&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We use the regex to remove anything that is not in our "character safe list". When you use a regex which contains &lt;a href="https://javascript.info/regexp-unicode#unicode-properties-p"&gt;unicode properties&lt;/a&gt;, any expression in the form of &lt;code&gt;\p{}&lt;/code&gt;, you must use the &lt;code&gt;/u&lt;/code&gt; flag also. We do a second replacement to replace spaces with a hyphen.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-alternative-way-a-copy-bookmark-link-to-clipboard-button"&gt;
  &lt;/a&gt;
  An alternative way - a "copy bookmark link to clipboard" button
&lt;/h2&gt;

&lt;p&gt;My proposed alternative is to use a button instead of a link. The button copies the bookmark URL to the system clipboard. A &lt;a href="https://material.io/components/snackbars"&gt;snackbar message&lt;/a&gt; informs the user that the URL has been copied to the clipboard. I think this is a more convenient way of doings things.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/robjoeol/embed/JjrzLLJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;N.B. Codepen runs code in a &lt;code&gt;iframe&lt;/code&gt;, so the bookmark links don't point to a valid external URL. If you run the same code in a page, the links are perfectly valid.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;copyLink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;srcElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data-href&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clipboard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;showSnackbar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can asynchronously write to the system clipboard through the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API"&gt;Clipboard API&lt;/a&gt;, using the &lt;code&gt;writeText()&lt;/code&gt; function. The &lt;a href="https://caniuse.com/async-clipboard"&gt;browser support is excellent (for writing to the clipboard)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We show a snackbar message when the button is pressed. We use the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API/Using_the_Web_Animations_API"&gt;Web Animations API&lt;/a&gt; to fade in and move the snackbar further into view. The Web Animations API is a cleaner of way of running a once-off animation, the alternative is to add a class that has an associated CSS animation, and then remove it via &lt;code&gt;setTimeout()&lt;/code&gt; a few seconds later. You can see the function &lt;code&gt;showSnackbar()&lt;/code&gt; for the details.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#text-fragment-directive-specification"&gt;
  &lt;/a&gt;
  Text fragment directive specification
&lt;/h2&gt;

&lt;p&gt;Text fragments &lt;a href="https://wicg.github.io/scroll-to-text-fragment/#navigating-to-text-fragment"&gt;can now include a text query&lt;/a&gt;. Upon clicking a link with a text query, the browser finds that text in the webpage, scrolls it into view, and highlights the matched text. This enables links to specify which portion of the page is being linked to, without relying on the page-author annotating the page with ID attributes.&lt;/p&gt;

&lt;p&gt;The fragment format is: &lt;code&gt;#:~:text=\[prefix-,]textStart[,textEnd\][,-suffix]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In its simplest form, the syntax is as follows: The hash symbol &lt;code&gt;#&lt;/code&gt; followed by :&lt;code&gt;~:text=&lt;/code&gt; and finally &lt;code&gt;textStart&lt;/code&gt;, which is the percent-encoded text I want to link to. Here is a simple example you can test in your browser to take you to the text "how do we get the text of the code element" from my last article:&lt;br&gt;
&lt;a href="https://www.roboleary.net/2022/01/13/copy-code-to-clipboard-blog.html#:%7E:text=how%20do%20we%20get%20the%20text%20of%20the%20code%20element?"&gt;https://www.roboleary.net/2022/01/13/copy-code-to-clipboard-blog.html#:~:text=how%20do%20we%20get%20the%20text%20of%20the%20code%20element?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---l-4XUxi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u86romqroo6evccc49nz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---l-4XUxi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u86romqroo6evccc49nz.jpg" alt="navigating to an URL with a text fragment showing the highlighted text in the body of the webpage" width="800" height="515"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can check out the article, &lt;a href="https://web.dev/text-fragments/#text-fragments"&gt;Boldly link where no one has linked before: Text Fragments&lt;/a&gt;, for further explanation and examples.&lt;/p&gt;

&lt;p&gt;At the moment, &lt;a href="https://caniuse.com/url-scroll-to-text-fragment"&gt;this feature is only available in Edge and Chrome&lt;/a&gt;. It is still early days, but I think this should be something that we start to use wholesale.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-word"&gt;
  &lt;/a&gt;
  Final word
&lt;/h2&gt;

&lt;p&gt;Having the ability to cross-reference specific parts of other webpages is an often overlooked feature of the web that is of great benefit to readers. You are saving a reader from foraging through a page to find the right section themselves - maybe they want to read more of the passage of text, or maybe they want to verify the source of a quotation. &lt;/p&gt;

&lt;p&gt;It does seem strange that we are still adding links to headings if the purpose is to provide someone with an URL to a section of a page. Why not add a button that will copy it to the clipboard instead, like I demonstrated? Or is there something am I missing? If there is, fill me in!&lt;/p&gt;

&lt;p&gt;I hope that more browsers implement the text fragment directive soon. It would be great to break the dependence of the reader on the page-author to add IDs to headings to enable referencing of sections. And along with that, it would be great if the awareness of this feature grew too, so that people would start using it regularly. I hope this article will go a little way to raising awareness!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>The importance of using Server-Side Rendering with Next.JS</title>
      <author>Ramon Pereira</author>
      <pubDate>Mon, 17 Jan 2022 18:30:34 +0000</pubDate>
      <link>https://dev.to/ramonpereira88/the-importance-of-using-server-side-rendering-with-nextjs-16h</link>
      <guid>https://dev.to/ramonpereira88/the-importance-of-using-server-side-rendering-with-nextjs-16h</guid>
      <description>&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Server-Side Rendering (SSR) is a resource provided by Next.JS meaning that for each request made by the user, a server-side HTML will be generated and that content will be pre-rendered. So when a request for a specific page is made, the process of building that page done by the browser will be faster. This set of steps of requesting content from the database, building the page by the browsers and delivering it to the client is Client-Side Rendering.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are the advantages of using Server-Side Rendering with Next.JS?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The main advantages are: the faster response in page loading, the SEO (Search Engine Optimization) and the Web Crawlers that are the bots responsible for improving the indexing in the search engines of browsers such as Google, Bing, thus providing a better experience for the user who will have less waiting time and your page or site will probably appear at the top of searches.&lt;/p&gt;

&lt;p&gt;Please have in mind that Next.JS also offers SSG (Static Site Generation) which is more recommended for smaller projects and that will not have that many components, which require so many specific requests to serve them, this can affect the performance of your application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How does the SSR happen?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using a function called getServerSideProps() by convention, Next.JS will understand that by using the above name in the function, server-side rendering should and will happen. The data of the function is passed via props that can be consumed in the function below in the same JS or JSX file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--blbfHKOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hj8m3p9hoews4fpl2so0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--blbfHKOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hj8m3p9hoews4fpl2so0.png" alt="Snippet of code showing how to implement Server-Side Rendering in Next.JS" width="880" height="681"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The content generated by the code above:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1uZr1QlJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njhx8mpveur6ut4sig54.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1uZr1QlJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njhx8mpveur6ut4sig54.JPG" alt="Result in the browser of the code above showing Server-Side Rendering in action" width="880" height="321"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Terminal in VSCode:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wUg_X6zN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/glkf5xtos3gg9wzz6g3v.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wUg_X6zN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/glkf5xtos3gg9wzz6g3v.JPG" alt="VSCode terminal showing Server-Side Rendering in the console" width="880" height="323"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Search Engine Optimization (SEO)?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Taking into account that this is the main reason for using Server-Side Rendering with Next.JS, what is this Search Engine Optimization (SEO)? Well, that is a set of good practices that, if executed, make your page or WEB application better indexed in Google, Bing or other search engines, and that might lift your page or application to be in the first options to be shown for the user that makes the search for some content. The better structured, semantically organized with the correct tags, meta tags, titles, sections, alt attributes and ARIA (Accessible Rich Internet Applications) and that will provide a better experience when the subject is accessibility. The better your page is structured the better it will be evaluated by these browser search engines.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lighthouse: How do I know if my page or site indexing is good?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Lighthouse is a tool developed by Google that analyzes web pages and applications providing metrics on performance, best practices, accessibility, SEO or if the application or page is a PWA (Progressive Web App) and even simulates a desktop and mobile application. It’s worth checking out the results. You can find Lighthouse in Chrome Dev Tools under one of the tabs, but not just in Google Chrome, in many browsers based on Google Chrome. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nK9Fipkz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1m5kk7ts7swkgod3szu7.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nK9Fipkz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1m5kk7ts7swkgod3szu7.JPG" alt="Image showing Lighthouse in Chrome Developer Tools" width="880" height="205"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After clicking on ‘Generate Report’, a page analysis process will be started and a report will be generated.&lt;br&gt;
We analyzed Vercel's website, which is the creator of the Next.JS framework, and these were the results:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tVM77fb7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bg4lagc9j5vuwd7bogdb.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tVM77fb7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bg4lagc9j5vuwd7bogdb.JPG" alt="Image showing results of the analysis made by Lighthouse on Vercel's website" width="880" height="354"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;References:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://vercel.com/blog/nextjs-server-side-rendering-vs-static-generation"&gt;https://vercel.com/blog/nextjs-server-side-rendering-vs-static-generation&lt;/a&gt; &lt;br&gt;
&lt;a href="https://blog.cod3r.com.br/server-side-rendering-x-client-side-rendering"&gt;https://blog.cod3r.com.br/server-side-rendering-x-client-side-rendering&lt;/a&gt; &lt;br&gt;
&lt;a href="https://medium.com/swlh/server-side-rendering-with-next-js-56f84f98f9bd"&gt;https://medium.com/swlh/server-side-rendering-with-next-js-56f84f98f9bd&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ramon Pereira&lt;br&gt;
Frontend Developer&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Dev.to's CodePen Liquid Tag is Getting an Upgrade!</title>
      <author>Jane Ori</author>
      <pubDate>Mon, 17 Jan 2022 18:28:33 +0000</pubDate>
      <link>https://dev.to/janeori/devtos-codepen-liquid-tag-is-getting-an-upgrade-2e69</link>
      <guid>https://dev.to/janeori/devtos-codepen-liquid-tag-is-getting-an-upgrade-2e69</guid>
      <description>&lt;p&gt;&lt;a href="#all-the-codepen-embed-options"&gt;Skip my practice writing and jump to the features!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I only learned about dev.to last Tuesday after a coworker shared a draft article with the team. After work, I read the &lt;a href="https://dev.to/faq"&gt;FAQ&lt;/a&gt; and the &lt;a href="https://dev.to/about"&gt;About Page&lt;/a&gt;. It checked every box I've wanted for a dev blogging platform:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[x] We own our posts&lt;/li&gt;
&lt;li&gt;[x] Dev.to respects our privacy&lt;sup&gt;[1]&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;[x] Social-centric: comments, feeds, reactions, community&lt;/li&gt;
&lt;li&gt;[x] I can embed from my favorite code-sharing platform, &lt;a href="https://codepen.io/"&gt;CodePen&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;[x] It's Open Source and encouraging new contributors&lt;/li&gt;
&lt;li&gt;[x] Tons of other features&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[1] if you sign up with your github account, it only asks to read your email address. THANK YOU.&lt;/p&gt;

&lt;p&gt;So the first thing I did was play around with the codepen liquid tag and tried adding CodePen's custom theme-id option. It's a feature for pro users to change the appearance of the embed so I can stay on brand with &lt;a href="https://twitter.com/Jane0ri"&gt;my purple-heavy twitter feed&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A0lYFngw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yimh4jd865sye2uudhj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A0lYFngw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yimh4jd865sye2uudhj.gif" alt="Gif capture of Jane's colorful twitter feed" width="634" height="302"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A little extra, I know, but I have fun so don't hate 😛&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#themeid-didnt-work"&gt;
  &lt;/a&gt;
  ...theme-id didn't work
&lt;/h2&gt;

&lt;p&gt;First I asked around to see if I was missing something, I know it wasn't documented but it seemed like something that should work since the default-tab parameter works. Then I remembered the about page linked to the &lt;a href="https://github.com/forem"&gt;dev.to github org&lt;/a&gt; because, I thought, surely it would be easy to add? I searched for "codepen" to find the code and related issues. Here's what I found:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/blob/a0c3ef03293af06ae05a9a3a02628f2ef5ea4649/spec/liquid_tags/codepen_tag_spec.rb"&gt;CodePen Liquid Tag Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/blob/5da625cadb632ad92693ad29158ec1f146326b5f/app/liquid_tags/codepen_tag.rb"&gt;CodePen Liquid Tag Implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/issues/5346"&gt;A closed/unfulfilled issue asking for control of the height param&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/forem/forem/issues/12130"&gt;A 1 year old open issue asking for a way to embed in preview mode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Great! There's interest near by, but not for the thing I wanted specifically... So if I take care of both of those requests and loop mine in too, there's maybe a better chance of getting approved quickly.&lt;/p&gt;

&lt;p&gt;Just one small problem though... As far as I remember,&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ive-never-even-opened-a-ruby-file-before"&gt;
  &lt;/a&gt;
  I've never even opened a ruby file before
&lt;/h2&gt;

&lt;p&gt;...and this is all written in Ruby. Fortunately, I did recently meet someone who seems to love Ruby though, &lt;a href="https://twitter.com/adrianvalenz_"&gt;Adrian&lt;/a&gt; while discussing sugary JS syntax idea I had&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T0-3sj0---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FGRg4EmWYAklsET.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vY1vCNJU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1408413691037597696/9GXSl8a6_normal.jpg" alt="Jane 💜 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jane 💜
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @jane0ri
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Who likes sugar in their JS that turns 6 lines into 1?&lt;br&gt;&lt;br&gt;I know multiple returns in a JS function is fiercely debated as anti-patern (🙄) buuuuuut if any TC39 members see this and want to champion the idea... 💜 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      20:40 PM - 10 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1469406737614708744" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1469406737614708744" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1469406737614708744" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
Seemed like he would be willing to give me pointers if I ran into trouble (I'm sure he would have, didn't need to ask though!), so I wasn't worried about stumbling my way through this.

&lt;p&gt;Setup might be some effort, my Thursday night looks open, wait until then.&lt;/p&gt;

&lt;p&gt;Time to code&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#my-process-went-like-this"&gt;
  &lt;/a&gt;
  My process went like this
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Follow the &lt;a href="https://github.com/forem/forem#contributing"&gt;links into the contributor's guide&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;del&gt;Get everything installed and running&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;Spend 3 hours not understanding postgress errors&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Just get all the tests running&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;Hack enough of the code and env to get just &lt;code&gt;spec/liquid_tags&lt;/code&gt; tests running and ignore everything else&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Throw around some copy-pasted code in the test file until new tests were successfully failing

&lt;ul&gt;
&lt;li&gt;this is pretty easy to do even in completely foreign syntax; Either it works, or it doesn't and you try again.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Modify the implementation code until the tests were passing

&lt;ul&gt;
&lt;li&gt;not too difficult because Ruby Regular Expressions seem to be a superset of the features I know well enough to hack together quickly, and every existing line of Ruby here is an example to learn from&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For the sake of completion, add the last CodePen pro embed feature (editable=true) that wasn't previously mentioned&lt;/li&gt;
&lt;li&gt;Find and update the on-site docs for the codepen liquid tag

&lt;ul&gt;
&lt;li&gt;it's in two places, just had to do it once and copy paste&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Almost 2am Friday, time to &lt;a href="https://github.com/forem/forem/pull/16102"&gt;open a PR&lt;/a&gt; only for the parts I was supposed to change&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ran into a problem with CI, (I probably had windows line endings in my push (oops!)). The &lt;a href="https://github.com/forem/forem/pull/16102#issuecomment-1014122748"&gt;core contributors were helpful&lt;/a&gt; here though and put effort in to get it working!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thank you for helping me, help you, help us all&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xMldf0tR4Gk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And finally, just a couple hours ago, we got &lt;a href="https://github.com/forem/forem/pull/16102#issuecomment-1014606337"&gt;confirmation of intent-to-merge&lt;/a&gt; for Tomorrow at 2pm Central, just one full week after I learned about dev.to 🎉&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_github-liquid-tag"&gt;
  &lt;h1&gt;
    &lt;a href="https://github.com/forem/forem/pull/16102#issuecomment-1014606337"&gt;
      &lt;img class="github-logo" alt="GitHub logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg"&gt;
      &lt;span class="issue-title"&gt;
        Comment for
      &lt;/span&gt;
      &lt;span class="issue-number"&gt;#16102&lt;/span&gt;
    &lt;/a&gt;
  &lt;/h1&gt;
  &lt;div class="github-thread"&gt;
    &lt;div class="timeline-comment-header"&gt;
      &lt;a href="https://github.com/jeremyf"&gt;
        &lt;img class="github-liquid-tag-img" src="https://res.cloudinary.com/practicaldev/image/fetch/s--SbHk20us--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/2130%3Fv%3D4" alt="jeremyf avatar"&gt;
      &lt;/a&gt;
      &lt;div class="timeline-comment-header-text"&gt;
        &lt;strong&gt;
          &lt;a href="https://github.com/jeremyf"&gt;jeremyf&lt;/a&gt;
        &lt;/strong&gt; commented on &lt;a href="https://github.com/forem/forem/pull/16102#issuecomment-1014606337"&gt;&lt;time&gt;Jan 17, 2022&lt;/time&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag-github-body"&gt;
      &lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/janeori"&gt;@janeori&lt;/a&gt; looks great, I want to give @msarit a chance to review as well.  She's been spending a lot of time in the liquid tags.&lt;/p&gt;
&lt;p&gt;I've added this to my watch list to merge on Tuesday UTC 20:00.&lt;/p&gt;

    &lt;/div&gt;
    &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/forem/forem/pull/16102#issuecomment-1014606337"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Now for the main course&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#all-the-codepen-embed-options"&gt;
  &lt;/a&gt;
  All the codepen embed options
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#basic-embed"&gt;
  &lt;/a&gt;
  Basic embed
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;{% codepen https://codepen.io/twhite96/pen/XKqrJX %}&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#private-embed-codepen-pro-feature"&gt;
  &lt;/a&gt;
  Private embed (CodePen PRO feature)
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;{% https://codepen.io/quezo/pen/e10ca45c611b9cf3c98a1011dedc1471 %}&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preview-embed-new"&gt;
  &lt;/a&gt;
  Preview embed (NEW!)
&lt;/h3&gt;

&lt;p&gt;Replace &lt;code&gt;/pen/&lt;/code&gt; with &lt;code&gt;/pen/preview/&lt;/code&gt;, which becomes &lt;code&gt;/embed/preview/&lt;/code&gt; in the generated iframe&lt;br&gt;
&lt;code&gt;{% codepen https://codepen.io/propjockey/pen/preview/YzWPEKN %}&lt;/code&gt;&lt;br&gt;
This is CodePen's "Click-to-Load" feature that shows a static preview without loading or running the heavier resources in larger pens. The user clicks once and the pen loads:&lt;/p&gt;

&lt;p&gt;[TODO: show an example here once the feature is live]&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#defaulttab-parameter"&gt;
  &lt;/a&gt;
  default-tab parameter
&lt;/h3&gt;

&lt;p&gt;Show just the result tab:&lt;br&gt;
&lt;code&gt;{% codepen https://codepen.io/twhite96/pen/XKqrJX default-tab=result %}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Show the html and css tabs:&lt;br&gt;
&lt;code&gt;{% codepen https://codepen.io/twhite96/pen/XKqrJX default-tab=html,css %}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Show the js and result tab:&lt;br&gt;
&lt;code&gt;{% codepen https://codepen.io/twhite96/pen/XKqrJX default-tab=js,result %}&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#height-parameter-new"&gt;
  &lt;/a&gt;
  height parameter (NEW!)
&lt;/h3&gt;

&lt;p&gt;Set the height on the iframe and pass in the parameter to codepen&lt;br&gt;
&lt;code&gt;{% codepen https://codepen.io/propjockey/pen/dyVMgBg height=300 %}&lt;/code&gt;&lt;br&gt;
default value is &lt;code&gt;600&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/propjockey/embed/dyVMgBg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;(Many of the liquid tag embeds could use this height parameter upgrade! Consider becoming a contributor by copying (and/or improving) the code for your favorite one!)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#editabletrue-new-codepen-pro-feature"&gt;
  &lt;/a&gt;
  editable=true (NEW!) (CodePen PRO feature)
&lt;/h3&gt;

&lt;p&gt;Allows the code to be edited from the embed&lt;br&gt;
&lt;code&gt;{% codepen https://codepen.io/propjockey/pen/dyVMgBg editable=true %}&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#themeid-new-codepen-pro-feature"&gt;
  &lt;/a&gt;
  theme-id (NEW!) (CodePen PRO feature)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://blog.codepen.io/documentation/unlimited-embed-themes/"&gt;Read about this feature on CodePen&lt;/a&gt;&lt;br&gt;
&lt;code&gt;{% codepen https://codepen.io/propjockey/pen/NWazORr theme-id=40148 %}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/propjockey/embed/NWazORr?height=600&amp;amp;default-tab=css&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-multiple-options-together"&gt;
  &lt;/a&gt;
  Using multiple options together
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;{% codepen https://codepen.io/propjockey/pen/preview/YzWPEKN default-tab=css,result theme-id=40148 height=700 %}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;[TODO: show an example here once the feature is live]&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The end!
&lt;/h2&gt;

&lt;p&gt;Thank you for reading, hope you find the upgrades useful!&lt;/p&gt;

&lt;p&gt;💜 // Jane&lt;/p&gt;

</description>
      <category>meta</category>
      <category>codepen</category>
      <category>liquidtags</category>
      <category>contributing</category>
    </item>
    <item>
      <title>ELI5: Reactivity in Vue 3</title>
      <author>Morgenstern2573</author>
      <pubDate>Mon, 17 Jan 2022 18:22:22 +0000</pubDate>
      <link>https://dev.to/morgenstern2573/eli5-reactivity-in-vue-3-4o40</link>
      <guid>https://dev.to/morgenstern2573/eli5-reactivity-in-vue-3-4o40</guid>
      <description>&lt;p&gt;Reactivity. It's a popular buzzword. It's also one of the most convenient features of front-end frameworks.&lt;br&gt;
What is it exactly, and how does it work in Vue 3?&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#prerequisite-knowledge"&gt;
  &lt;/a&gt;
  Prerequisite Knowledge
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Basic JavaScript and JS objects&lt;/li&gt;
&lt;li&gt;Basic knowledge of Vue.js&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#what-is-reactivity"&gt;
  &lt;/a&gt;
  What is reactivity?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Reactivity is a programming paradigm that allows us to adjust to changes in a declarative manner. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Vue 3.x documentation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We say a value is reactive when it can update itself in response to changes in values it depends on. What do we mean by depends on? Let's take an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let val1 = 2
let val2 = 3
let sum = val1 + val2

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The value of sum is always determined by the values of val1 and val2, so we say that sum depends on val1 and val2.&lt;/p&gt;

&lt;p&gt;What happens to sum when one of the values it depends on changes? In regular JavaScript, it stays the same.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(sum) // 5

val1 = 3

console.log(sum) // Still 5

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But if sum was reactive,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(sum) // 5

val1 = 3

console.log(sum) // Sum is 6!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The value of sum would change in response to the change in a value it depended on. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-vue-need-to-make-a-value-reactive"&gt;
  &lt;/a&gt;
  What does Vue need to make a value reactive?
&lt;/h2&gt;

&lt;p&gt;Vue needs to know:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what dependencies that value has.&lt;/li&gt;
&lt;li&gt;when those dependencies change.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vue also needs to be able to re-calculate values when their dependencies change.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-vue-knows-when-dependencies-change"&gt;
  &lt;/a&gt;
  How Vue knows when dependencies change
&lt;/h2&gt;

&lt;p&gt;Vue wraps the data object of all components with an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy"&gt;ES6 Proxy&lt;/a&gt;.&lt;br&gt;
A proxy is an object that wraps a target object.&lt;/p&gt;

&lt;p&gt;This is important because all reactive values depend (directly or not) on the properties in a component's data object. &lt;/p&gt;

&lt;p&gt;Proxies allow you to intercept all requests to get or set properties of the target. They also let you run any code in response to those requests. &lt;/p&gt;

&lt;p&gt;Thanks to this, when code attempts to change one of the properties of a data object, Vue intercepts it and is aware of it.&lt;/p&gt;

&lt;p&gt;Vue can then re-calculate any functions that depend on that value. But how does Vue know which functions depend on which values?&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-vue-knows-which-dependencies-belong-to-a-value"&gt;
  &lt;/a&gt;
  How Vue knows which dependencies belong to a value
&lt;/h2&gt;

&lt;p&gt;To make our value reactive, we need to wrap it in a function. Using sum to illustrate again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// we need to go from

let val1 = 2
let val2 = 3
let sum = val1 + val2

// to

const updateSum = () =&amp;gt; {
 sum = val1 + val2
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Vue then wraps all such functions with an effect. An effect is a function that takes another function as an argument. Vue then calls the effect in place of that function. &lt;/p&gt;

&lt;p&gt;When Vue calls an effect, the effect:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Records that it's running.&lt;/li&gt;
&lt;li&gt;Calls the function it received as an argument. &lt;/li&gt;
&lt;li&gt;Removes itself from the list of running effects after the function ends.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remember all source values come from a Proxy (the data component)? While executing the function it wraps, the effect will need a property from the data object, and try to read it.&lt;/p&gt;

&lt;p&gt;The Proxy will intercept that read request. Vue checks which effect is currently running. It then records that the effect depends on the property it tried to read. This is how Vue knows which values depend on which properties.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-how-does-vue-know-when-to-rerun-the-functions-that-return-dependent-values"&gt;
  &lt;/a&gt;
  So how does Vue know when to re-run the functions that return dependent values?
&lt;/h3&gt;

&lt;p&gt;The answer is once again the magic of Proxies. Proxies can intercept requests to set property values too. &lt;/p&gt;

&lt;p&gt;Remember we now have a record of effects, as well as the values they depend on. When the value of a property in data changes, Vue needs to do one thing: check that record and update the source value.&lt;/p&gt;

&lt;p&gt;Vue can then re-run all the effects that depend on it, and thus update the values. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This article is a simplified overview of how reactivity works in Vue 3. If you'd like to read more on the subject, here are some resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.sitepoint.com/vue-3-reactivity-system/"&gt;Understanding the New Reactivity System in Vue 3&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://v3.vuejs.org/guide/reactivity.html#how-vue-tracks-these-changes"&gt;Reactivity in Depth&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Host your website on GitHub Pages</title>
      <author>Ludivine A</author>
      <pubDate>Mon, 17 Jan 2022 18:17:09 +0000</pubDate>
      <link>https://dev.to/lachouri/host-your-website-on-github-pages-gie</link>
      <guid>https://dev.to/lachouri/host-your-website-on-github-pages-gie</guid>
      <description>&lt;p&gt;Did you know that you can host a website on GitHub, for free ?&lt;/p&gt;

&lt;p&gt;No ? Then let me show you.&lt;/p&gt;

&lt;p&gt;You need to create a repository that has the following name :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CFRfeRtH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhfjda1f3h2c4j2baux0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CFRfeRtH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhfjda1f3h2c4j2baux0.png" alt="yourUsername.github.io" width="802" height="745"&gt;&lt;/a&gt;&lt;br&gt;
for me this would be lachouri.github.io, and make it public. &lt;/p&gt;

&lt;p&gt;Then, simply to test it, I am going to create an index.html file with a bit of code and I will push it on github.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--719SKkTk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bpcepm4bvq1csgulrmki.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--719SKkTk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bpcepm4bvq1csgulrmki.PNG" alt="Simple bit of code" width="867" height="265"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Then initialize the repo with &lt;code&gt;git init&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Create a commit with &lt;code&gt;git add .&lt;/code&gt;  and &lt;code&gt;git commit -m "First commit" &lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Create the main branch with &lt;code&gt;git branch -M main&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Link your local repo to the git repository with &lt;code&gt;git remote add origin https://github.com/yourUsername/yourRepo &lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Finally push with &lt;code&gt;git push -u origin main&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wait for a minute or so, and go to the following url : &lt;a href="https://yourUsername.github.io"&gt;https://yourUsername.github.io&lt;/a&gt; and 🎉 your website appears.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N8xGt8jL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j553fcwtp8clx9gh618n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N8xGt8jL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j553fcwtp8clx9gh618n.png" alt="Website" width="393" height="256"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Originally posted on my &lt;a href="https://blog.ludivineachouri.com/"&gt;blog&lt;/a&gt;. Check out my &lt;a href="https://www.instagram.com/la.dev/"&gt;instagram &lt;/a&gt;account to learn more about web development.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>github</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>5 Articles every WebDev should read this week (#03)</title>
      <author>martin krause</author>
      <pubDate>Mon, 17 Jan 2022 17:32:45 +0000</pubDate>
      <link>https://dev.to/martinkr/5-articles-every-webdev-should-read-this-week-03-181e</link>
      <guid>https://dev.to/martinkr/5-articles-every-webdev-should-read-this-week-03-181e</guid>
      <description>&lt;p&gt;A curated list of the top five web development must-reads from last week. Don't miss out on the latest web development stories and insights. Read all about the cutting edge in web development, working in tech and the new tools and frameworks while learning a few new tricks.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#freefordev"&gt;
  &lt;/a&gt;
  free-for.dev
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Developers and Open Source authors now have a massive amount of services offering free tiers, but it can be hard to find them all to make informed decisions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a list of software (SaaS, PaaS, IaaS, etc.) and other offerings that have free tiers for developers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://free-for.dev/"&gt;https://free-for.dev/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-not-to-learn-typescript"&gt;
  &lt;/a&gt;
  How not to learn TypeScript
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;“TypeScript and I are never going to be friends”. Oh wow, how often have I heard this phrase? Learning TypeScript, even in 2022, can be frustrating it seems. And for so many different reasons. People who write Java or C# and find out things are working differently than they should. Folks who have done JavaScript most of their time and are being screamed at by a compiler. Here are some mistakes I’ve seen people do when getting started with TypeScript.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#httpsfettblogeuhownottolearntypescript"&gt;
  &lt;/a&gt;
  &lt;a href="https://fettblog.eu/how-not-to-learn-typescript/"&gt;https://fettblog.eu/how-not-to-learn-typescript/&lt;/a&gt;
&lt;/h2&gt;




&lt;h2&gt;
  &lt;a href="#being-the-dri-of-your-career"&gt;
  &lt;/a&gt;
  Being the DRI of Your Career
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;At DuckDuckGo, there’s an expression: “You are the DRI of your career” (DRI: Directly Responsible Individual). I like this, both as an individual who has always felt like the DRI of my own career, and I like it as a manager because I think it makes the boundaries of what you can and can’t do for people clear.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://cate.blog/2021/09/20/being-the-dri-of-your-career/"&gt;https://cate.blog/2021/09/20/being-the-dri-of-your-career/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-stack-elements-in-css"&gt;
  &lt;/a&gt;
  How to Stack Elements in CSS
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to create fantastic and unique visual experiences on the web, you will eventually need two elements to overlap or exist in the same place. You may even just need them to be positioned near or next to each other. Let’s go over two different ways to accomplish this, one with the position property and one with CSS Grid.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/how-to-stack-elements-in-css/"&gt;https://css-tricks.com/how-to-stack-elements-in-css/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-new-vue-by-evan-you"&gt;
  &lt;/a&gt;
  The New Vue by Evan You
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;In this session, Evan You talks about the new Vue 3 experience: from new syntax to new docs, build tools, devtools, and TS/IDE.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=2KBHvaAWJOA"&gt;https://www.youtube.com/watch?v=2KBHvaAWJOA&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Follow me on &lt;a href="http://twitter.com/_martinkr"&gt;Twitter: @martinkr&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@burntime"&gt;Alex Kulikov&lt;/a&gt; on &lt;a href="https://unsplash.com"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://modernfrontend.dev/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cH97ToOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://modernfrontend.dev/banner/banner_583-111.png" alt="Subscribe to the weekly modern frontend development newsletter" width="583" height="111"&gt;&lt;/a&gt;&lt;/p&gt;




</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Working with Numbers &amp; Strings in Python</title>
      <author>CodeWithKenn</author>
      <pubDate>Mon, 17 Jan 2022 17:15:56 +0000</pubDate>
      <link>https://dev.to/codewithkenn/working-with-numbers-strings-in-python-4d8l</link>
      <guid>https://dev.to/codewithkenn/working-with-numbers-strings-in-python-4d8l</guid>
      <description>&lt;p&gt;Python is one of the most popular coding languages available and is great as a starting point in your learning journey. It can be used for a range of things, such as web and internet development, software development application, network programming, and 3D graphics... (&lt;a href="https://hethelinnovation.com/"&gt;hethelinnovation.com&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;*While learning, we end up getting stuck in small bugs that can take more time to solve, whereas we could have solved it quickly if we could only remember the basics. *&lt;/p&gt;

&lt;p&gt;So, this is a series of Basics Python tips to remember whenever we work with numbers and strings. You can also use this article as a reference somehow while coding...&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-numbers"&gt;
  &lt;/a&gt;
  Python Numbers
&lt;/h2&gt;

&lt;p&gt;There are three numeric types we use in Python: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;int: or integer, is a whole number without decimals.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x = 1245
y = -789

print(type(x))
print(type(y))

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;float: or Floating, a number with one or more decimals.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x = 12.45
y = 42E5

print(type(x))
print(type(y))

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;complex: as studied in high school, is a number written with a "j" as the imaginary part.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x = 3 + 2j
y = -15j

print(type(x))
print(type(y))

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#numbers-types-conversion"&gt;
  &lt;/a&gt;
  Numbers Types Conversion
&lt;/h2&gt;

&lt;p&gt;To convert numbers from one type (from the three) to another, we used methods.&lt;/p&gt;

&lt;p&gt;In Python, a method is a function that is available for a given object because of the object's type.&lt;br&gt;
So, You can convert from one type to another with the int(), float(), and complex() methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
x = 4    # int number
y = 0.8  # float number
z = 4j   # complex number

# from int to float:
a = float(x)

# from float to int:
b = int(y)

# from int to complex:
c = complex(x)

print(a)
print(b)
print(c)

print(type(a))
print(type(b))
print(type(c))

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lets-build-a-simple-calculator"&gt;
  &lt;/a&gt;
  Let's Build a Simple Calculator
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Python Simple calculator

# Addition Function
def add(x, y):
    return x + y

# Substraction Function
def subtract(x, y):
    return x - y

# Multiplication Function
def multiply(x, y):
    return x * y

# Division Function
def divide(x, y):
    return x / y


def calculate(first_number, second_number, operator):
    if operator == "+":
        answer = add(first_number, second_number)
        return answer

    elif operator == "-":
        answer = subtract(first_number, second_number)
        return answer

    elif operator == "/":
        answer = divide(first_number, second_number)
        return answer
    elif operator == "*" or operator == "x":
        answer = subtract(first_number, second_number)
        return answer
    else:
        return "Invalid"


num1 = int(input("Enter the first number: "))
num2 = int(input("Enter the second number: "))
operator = input("Enter the Operator: ")

print(f"{num1} {operator} {num2} = {calculate(num1, num2, operator)}")

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#python-strings"&gt;
  &lt;/a&gt;
  Python Strings
&lt;/h2&gt;

&lt;p&gt;Strings in python are surrounded by: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Single quotation marks
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'bonjour'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Double quotation marks
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"bonjour"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-a-variable-to-save-the-string"&gt;
  &lt;/a&gt;
  Use a Variable to save the String
&lt;/h2&gt;

&lt;p&gt;The assignment sign is made of &lt;em&gt;=&lt;/em&gt; (equal sign).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name = "Kennedy"
role = "Software Engineer"
print(name)
print(role)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#we-can-also-use-multiline-strings"&gt;
  &lt;/a&gt;
  We can also use Multiline Strings
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;poem = """Your face is the grave of your nose
your face is the grave of your ears
your face is the grave of your face
once again your face overflows uncontrollably."""

print(poem)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#accessing-a-character-of-the-string"&gt;
  &lt;/a&gt;
  Accessing a Character of the String
&lt;/h2&gt;

&lt;p&gt;We can think of strings like an array made of characters. For example, the word "Elon Musk" is made of "E", "l", "o", "n", " ", "M", "u", "s" and "k" (Notice the space is also counted as a character).&lt;/p&gt;

&lt;p&gt;The first character is counted at index 0 (not 1).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;greeting = "Hello, World!"
print(greeting[1]) #prints "e" 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#working-with-strings"&gt;
  &lt;/a&gt;
  Working with Strings
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#checking-the-string-length"&gt;
  &lt;/a&gt;
  Checking the String Length
&lt;/h3&gt;

&lt;p&gt;use the &lt;code&gt;len()&lt;/code&gt; function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name = "Kennedy"
length_of_name = len(name)

print(length_of_name)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#checking-an-existing-string-or-character-in-a-string"&gt;
  &lt;/a&gt;
  Checking an existing string or character in a string
&lt;/h3&gt;

&lt;p&gt;Use the &lt;code&gt;in&lt;/code&gt; keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sentence = "Kennedy is a python programmer"
if "python" in a sentence:
  print("Yes, 'python' is present.")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#most-common-string-methods"&gt;
  &lt;/a&gt;
  Most Common String Methods
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;capitalize()&lt;/code&gt; method converts the first character of a string to an uppercase letter and lowercases all other characters.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name = "python"
print(name.capitalize())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;casefold()&lt;/code&gt; method Converts string into lower case.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name = "PYTHON"
print(name.casefold())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;upper()&lt;/code&gt; method converts all the characters into Uppercase.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name = "python"
print(name.upper())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;lower()&lt;/code&gt; method converts all the characters into Lowercase.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name = "PYTHON"
print(name.lower())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;len()&lt;/code&gt; method used to count the total number of characters in a string.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name = "python"
print( len(name) )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;find()&lt;/code&gt; searches the string for a specified value and returns the position of where it was found.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sentence = "python is great"
print( sentence.find('great') )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;replace()&lt;/code&gt; is used to replace a string with another.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sentence = "python is great"
new_sentence = sentence.replace('great', 'awesome') 
print(new_sentence)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;str()&lt;/code&gt; is used for string conversion
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ten = str(10)
print(ten) #converts 10 to '10'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;You can find more in the &lt;a href="https://docs.python.org/2.5/lib/string-methods.html"&gt;Python.org Official Docs&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#lets-work-on-a-small-project"&gt;
  &lt;/a&gt;
  Let's work on a Small Project
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#-arrange-string-characters-such-that-lowercase-letters-should-come-first"&gt;
  &lt;/a&gt;
  - Arrange string characters such that lowercase letters should come first
&lt;/h4&gt;

&lt;p&gt;Initial Code&lt;br&gt;
&lt;code&gt;noun = PrOgRamMinG&lt;/code&gt;&lt;br&gt;
&lt;code&gt;# Expected Output : rgaminPORMG&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Solution&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;noun = "PrOgRamMinG"

def arrange_string(my_string):
    print('Original String:', my_string)
    lower = []
    upper = []

    #Let's iterate and convert
    for char in my_string:
        if char.islower():
            # add lowercase characters to lower list
            lower.append(char)
        else:
            # add uppercase characters to lower list
            upper.append(char)

    # Join both list
    sorted_str = ''.join(lower + upper)
    print('Result:', sorted_str)

# Now, let's call execute the function we just created! 
arrange_string(noun)

# Output: 
# Original String: PrOgRamMinG
# Result: rgaminPORMG
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Resources for more Details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.w3schools.com/python/"&gt;www.w3schools.com&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.programiz.com/python-programming"&gt;www.programiz.com&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://pynative.com/python-string-exercise/#h-exercise-4-arrange-string-characters-such-that-lowercase-letters-should-come-first"&gt;www.pynative.com/&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;👉 &lt;a href="https://dev.to/codewithkenn"&gt;DISCOVER MORE useful ARTICLES&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading this article, many others are coming very soon, Feel free to subscribe 🤙.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  🌎 Let's connect
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/CodeWithKenn"&gt;Twitter&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/KennStack01"&gt;Github&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.linkedin.com/in/kennkibadi/"&gt;LinkedIn&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.instagram.com/codewithkenn_/"&gt;Instagram&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Want to start blogging?  🔥&lt;a href="https://hashnode.com/@CodeWithKenn/joinme"&gt;Join NOW!&lt;/a&gt; &lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
