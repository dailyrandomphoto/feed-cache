<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Getting started with Super Productivity</title>
      <author>Johannes Millan</author>
      <pubDate>Thu, 06 Jan 2022 15:51:42 +0000</pubDate>
      <link>https://dev.to/johannesjo/getting-started-with-super-productivity-2791</link>
      <guid>https://dev.to/johannesjo/getting-started-with-super-productivity-2791</guid>
      <description>&lt;p&gt;&lt;a href="https://super-productivity.com/"&gt;Super Productivity&lt;/a&gt; is an advanced open source todo list app with integrated &lt;a href="https://de.wikipedia.org/wiki/Timeboxing"&gt;Timeboxing&lt;/a&gt; and time tracking capabilities. While the app won't magically solve all your productivity, time management and procrastination issues, the combination of planning ahead and quickly re-planning whenever necessary, breaking tasks down into smaller bits and doing a bit of timeboxing can be a surprisingly powerful combination.&lt;/p&gt;

&lt;p&gt;The following article will introduce the basic features of the app. Since quickest way to do things in Super Productvity, is to use keyboard shortcuts, I will be focussing on using the most important ones in this tutorial.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#plan-your-tasks-and-break-them-down"&gt;
  &lt;/a&gt;
  Plan your tasks and break them down
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#adding-new-tasks"&gt;
  &lt;/a&gt;
  Adding new tasks
&lt;/h3&gt;

&lt;p&gt;First thing you want to do when starting the app is to create a task. When there are no tasks the app should greet you with an input box to do so. If you already created some you can use the "+" button in the top right or the keyboard shortcut &lt;code&gt;Shift+A&lt;/code&gt; to do so. You can close the add task overlay by pressing escape.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ic-29uV4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/336ees415q3rjfc9oltu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ic-29uV4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/336ees415q3rjfc9oltu.png" alt="Add task bar" width="697" height="95"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Below the input where you enter the task title you can see a little info text which introduces the &lt;strong&gt;short syntax&lt;/strong&gt;. Using the short syntax you can quickly add and edit the time estimated and spent for a task (and also the project and tags assigned to it).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#adding-estimates-at-task-creation"&gt;
  &lt;/a&gt;
  Adding estimates at task creation
&lt;/h4&gt;

&lt;p&gt;Giving time estimates to tasks (aka Timeboxing) is recommended as it can help to increase focus, avoid procrastination and reduce the time spent on a task. To create a new timeboxed task:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Press &lt;code&gt;Shift+A&lt;/code&gt; (requires the app window to be focused)&lt;/li&gt;
&lt;li&gt;Enter "&lt;code&gt;Getting to now Super Productivity 30m&lt;/code&gt;"&lt;/li&gt;
&lt;li&gt;Press the &lt;code&gt;Enter&lt;/code&gt; key to create the task&lt;/li&gt;
&lt;li&gt;Press the &lt;code&gt;Escape&lt;/code&gt; key to close the overlay&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#tracking-time"&gt;
  &lt;/a&gt;
  Tracking time
&lt;/h3&gt;

&lt;p&gt;To start tracking time you can either press the &lt;code&gt;y&lt;/code&gt; key while a task is focused or click on the little "play" button that appears once you hover it. To stop press &lt;code&gt;y&lt;/code&gt; again or press the "pause" button at the top right of the screen.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#productivity-tip-dont-beat-yourself-up-about-not-meeting-the-times-you-estimated-and-replan-instead"&gt;
  &lt;/a&gt;
  Productivity Tip: Don't beat yourself up about not meeting the times you estimated and re-plan instead!
&lt;/h4&gt;

&lt;p&gt;Timeboxing is meant to be a tool to help you and not intended to provide you with fixed deadlines to be stressed out about. &lt;strong&gt;Plans are always very likely &lt;em&gt;not&lt;/em&gt; to go &lt;em&gt;exactly&lt;/em&gt; as you intended&lt;/strong&gt; and that is fine! However, an exceeded time estimate might give you a good indication, when it is time to take step back and to consciously adjust your plans and maybe to tackle the problem at hand from another angle.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#completing-tasks"&gt;
  &lt;/a&gt;
  Completing tasks
&lt;/h3&gt;

&lt;p&gt;Tasks can be marked as done by pressing &lt;code&gt;d&lt;/code&gt; or by clicking on the checkmark button that appears when hovering it. For the mobile app you swipe the task to the right.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#editing-tasks"&gt;
  &lt;/a&gt;
  Editing tasks
&lt;/h3&gt;

&lt;p&gt;Once a task is focused (indicated by the colored border around them) you can quickly navigate to other tasks in the list by using the arrow keys. Pressing &lt;code&gt;Enter&lt;/code&gt; will allow you to edit the task title (and also using the short syntax here again). Press &lt;code&gt;Enter&lt;/code&gt; again to save the changes you made.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prioritize-tasks"&gt;
  &lt;/a&gt;
  Prioritize tasks
&lt;/h3&gt;

&lt;p&gt;In addition to using custom tags (e.g. "#A #B #C #important") the most efficient way to prioritize your tasks is by simply ordering them. You can do so by dragging them around using the drag handle to the left of the task title or by moving them via &lt;code&gt;Ctrl+Shift+ArrowUp&lt;/code&gt; and &lt;code&gt;Ctrl+Shift+ArrowDown&lt;/code&gt; to move them up and down.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#break-tasks-down-by-adding-subtasks"&gt;
  &lt;/a&gt;
  Break tasks down by adding subtasks
&lt;/h3&gt;

&lt;p&gt;When you are facing a big and/or complex task, it usually helps a lot if you break it down into smaller, more manageable parts. This will help you avoid stress and procrastination. The quickest way to add a subtask is to press &lt;code&gt;a&lt;/code&gt; while a task is being focused. Alternatively you can use the task context menu which can be opened up by right-clicking on the task (or long pressing it on macOS).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#hint-use-markdown-checkboxes-if-you-need-another-subtask-level"&gt;
  &lt;/a&gt;
  Hint: Use markdown checkboxes if you need another subtask level
&lt;/h4&gt;

&lt;p&gt;To avoid never completed giant mega tasks – which can be frustrating to deal with – subtasks are limited to one level, if you really need another level, you can use markdown, inside the task notes panel to write another checklist. To do so select a task via keyboard and press the &lt;code&gt;ArrowRight&lt;/code&gt; key, which will open up an additional panel form the right. You can select the items in this panel via the arrow keys (&lt;code&gt;ArrowUp&lt;/code&gt;/&lt;code&gt;ArrowDown&lt;/code&gt; to move and &lt;code&gt;ArrowRight&lt;/code&gt;/&lt;code&gt;Enter&lt;/code&gt; to select an item). Under "Description" you find a small panel where you can enter some &lt;a href="https://www.markdownguide.org/getting-started/"&gt;markdown&lt;/a&gt; text for additional context information. Using the following syntax will provide you with a check-list:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- [ ] Some item
- [x] Checked item
- [x] Another checked item
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And produce the following result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WL-2zuBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xvm6kprrq9lbe109ubdl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WL-2zuBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xvm6kprrq9lbe109ubdl.png" alt="Nested subtasks" width="819" height="535"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#hint-avoid-mega-tasks"&gt;
  &lt;/a&gt;
  Hint: Avoid mega tasks
&lt;/h4&gt;

&lt;p&gt;It also might be helpful to avoid long ongoing tasks with hundreds of subtasks. It might feel better to create a new task instead and simply assigning a number to them such as "My long task 2" and to then drag the remaining subtasks over to it. This approach might also make it easier to focus on the current problem at hand and to put irrelevant stuff out of your mind.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#recap-the-most-important-shortcuts"&gt;
  &lt;/a&gt;
  Recap: The most important shortcuts
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Shift+A&lt;/code&gt;: Open add task bar&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Enter&lt;/code&gt;: Edit currently focussed task title&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Arrow keys&lt;/code&gt;: Navigate around task list&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;D&lt;/code&gt;: Mark currently focused task as done&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;A&lt;/code&gt;: Add subtask to currently focused task&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Y&lt;/code&gt;: Toggle tracking time to currently focused task&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;S&lt;/code&gt;: Open schedule dialog for currently focused task&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Backspace&lt;/code&gt;: Delete currently focused task&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ArrowRight&lt;/code&gt;: Open additional info panel for currently focused task&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Ctrl+Shift+ArrowUp&lt;/code&gt;: Move currently focused task up in list&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Ctrl+Shift+ArrowDown&lt;/code&gt;: Move currently focused task down in list&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can edit these and all other shortcuts on the settings page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#moving-done-tasks-to-the-archive-and-finishing-your-day"&gt;
  &lt;/a&gt;
  Moving done tasks to the archive (and finishing your day)
&lt;/h2&gt;

&lt;p&gt;At the bottom of the task list you find a button labeled "Finish Day". Clicking it will bring you to the another page, that gives you an overview over what you did that day. We ignore that for now and scroll to the bottom of the page where there is another button labeled "Save and go home". By clicking it all (non sub-) tasks will be moved to the task archive.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#productivity-tip-why-reflecting-and-winding-down-is-a-good-idea"&gt;
  &lt;/a&gt;
  Productivity Tip: Why reflecting and winding down is a good idea
&lt;/h3&gt;

&lt;p&gt;In most literature about productivity giving yourself a pat on the back, winding down and taking a moment to reflect after a busy day is considered a good practise as it helps you among other things with getting some distance between you and your work, which in turn allows to be more refreshed and productive the next day.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-else-is-there"&gt;
  &lt;/a&gt;
  What else is there?
&lt;/h2&gt;

&lt;p&gt;These are the most important basic Super Productivity offers and that should be enough to get some benefit out of the app. There are other helpful (and all optional) features, too, which I would recommend gradually exploring and to experiment with whatever might work for you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#projects-tags-and-color-coding"&gt;
  &lt;/a&gt;
  Projects, Tags and Color Coding
&lt;/h3&gt;

&lt;p&gt;Each task can have multiple tags assigned, but only a single project. Each project and tag offers its own sortable list, which could be helpful if you only want to work on a particular subject and hae everything else out of the way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#import-tasks-from-your-companies-project-management-software"&gt;
  &lt;/a&gt;
  Import tasks from your companies project management software
&lt;/h3&gt;

&lt;p&gt;Super Productivity allows you to directly import tasks from Jira, GitHub, GitLab and Open Project. This allows you to integrate your personal planning with that of your team.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-an-overview-over-time-via-the-timeline"&gt;
  &lt;/a&gt;
  Get an overview over time via the Timeline
&lt;/h3&gt;

&lt;p&gt;The timeline view offers a quick overview on how your planning might work out over time. Non-scheduled tasks float around scheduled tasks, and you can also show data from your calendar there.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#time-sheets-amp-worklogs"&gt;
  &lt;/a&gt;
  Time sheets &amp;amp; worklogs
&lt;/h3&gt;

&lt;p&gt;There are multiple ways that allow you to export the tracked time in different formats, which might be handy in case you need to report your time worked somewhere.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#productivity-helpers"&gt;
  &lt;/a&gt;
  Productivity Helpers
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#break-reminder"&gt;
  &lt;/a&gt;
  Break reminder
&lt;/h4&gt;

&lt;p&gt;Reminds you to regularly take breaks. Can be (de)activated on the settings page.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pomodoro-timer"&gt;
  &lt;/a&gt;
  Pomodoro timer
&lt;/h4&gt;

&lt;p&gt;Integrated pomodoro timer if you need some extra focus. Can be activated on the settings page.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#procrastination-helper"&gt;
  &lt;/a&gt;
  Procrastination Helper
&lt;/h4&gt;

&lt;p&gt;Some emergency information about procrastination and some tools to help with it. Can be reached by clicking on the flash button in the top right.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#simple-counters"&gt;
  &lt;/a&gt;
  Simple counters
&lt;/h4&gt;

&lt;p&gt;Freely configurable stopwatch and single click counters, to be used for whatever you please. E.g. a coffee counter. Can be configured on the settings page.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#evaluate-your-work-days"&gt;
  &lt;/a&gt;
  Evaluate your work days
&lt;/h4&gt;

&lt;p&gt;Collect simple metrics to get a better grasp at what works for you and what doesn't. Can be filled on the "Finish Day" page and evaluated on the "Metrics" pages.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>workflow</category>
      <category>tips</category>
    </item>
    <item>
      <title>When are you most productive?</title>
      <author>Ben Halpern</author>
      <pubDate>Thu, 06 Jan 2022 15:40:29 +0000</pubDate>
      <link>https://dev.to/ben/when-are-you-most-productive-5eh5</link>
      <guid>https://dev.to/ben/when-are-you-most-productive-5eh5</guid>
      <description></description>
      <category>discuss</category>
      <category>productivity</category>
    </item>
    <item>
      <title>New Year, New CMS?</title>
      <author>James Perkins</author>
      <pubDate>Thu, 06 Jan 2022 15:29:21 +0000</pubDate>
      <link>https://dev.to/tinacms/new-year-new-cms-38k0</link>
      <guid>https://dev.to/tinacms/new-year-new-cms-38k0</guid>
      <description>&lt;p&gt;Here we are, the new year is upon us, and if you are like us, you have set some New Year’s resolutions for yourself. We are big fans of the fresh start and self-improvement that comes along with this time of year. Have you set any resolutions, maybe building or rebuilding your own personal site, starting a new business, or giving your portfolio a new lick of pain?. That means that you will need a CMS to handle all the content that drives your site and we think Tina can fill the role in some unique ways.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-tina"&gt;
  &lt;/a&gt;
  Why Tina?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#git-backed"&gt;
  &lt;/a&gt;
  Git Backed
&lt;/h3&gt;

&lt;p&gt;Traditionally when you sign up for a CMS, your content is locked into the vendor. This means if you decide that the CMS is not for you, you have to find a way to export that data and import it into your new CMS. That is not what Tina is about, we don’t want to hold you or your content hostage. In fact, Tina doesn’t store any of your data, it is stored in a GitHub repository that you own. Yep, that is right, you own and control it all. In addition to feeling secure that you own your own content, there are many practical advantages to this approach such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easy to track when and what changed in your project&lt;/li&gt;
&lt;li&gt;CI / CD support&lt;/li&gt;
&lt;li&gt;No vendor lock in&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#contextual-editing"&gt;
  &lt;/a&gt;
  Contextual Editing
&lt;/h3&gt;

&lt;p&gt;Tina is different from a traditional headless CMS, where you enter your data into a form with no context of how it will behave or look on your site. You then have to kick off a build and navigate to your site to see the changes. &lt;br&gt;
When you use Tina, the content is edited using a sidebar on your site, you get to see the changes in real time as you make them. This allows you to see exactly what you are editing or creating and how it will look and behave. No more saves, previews, refreshes after every few edits. Once you are happy with the changes, you can hit save and Tina will commit it directly to your GitHub repository and the rebuild process will begin.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#native-mdx-support"&gt;
  &lt;/a&gt;
  Native MDX Support
&lt;/h3&gt;

&lt;p&gt;Tina can support MDX out of the box, this means you can create reusable components and Tina can provide an easy way for anyone editing or creating content to add them to the page, no matter how experienced they are.&lt;/p&gt;

&lt;p&gt;Other headless CMSs require the users who are creating the content to remember the Component names, use the correct syntax when using them, as well as transform the data using mdx-remote or something similar. This is fine for an experienced developer but if you want to bring on guests who have zero experience it is a steep learning curve. Seriously, ask your editor friends about this, see the rage and/or fear in their eyes.&lt;/p&gt;

&lt;p&gt;We include a button that will allow anyone to click, select the user-friendly named component, and add it to the page. They can then dynamically edit that component with the correct text, images, or styles that you defined.&lt;br&gt;
Tina also doesn’t require you to transform the MDX or hydrate your components, making it easier to integrate then traditional CMS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#three-ways-to-get-started-in-under-five-minutes"&gt;
  &lt;/a&gt;
  Three ways to get started in under five minutes
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#tina-quickstart"&gt;
  &lt;/a&gt;
  Tina Quickstart
&lt;/h3&gt;

&lt;p&gt;Our &lt;a href="https://app.tina.com/quickstart"&gt;Tina QuickStart&lt;/a&gt; flow is a web based way to get started with Tina, it allows you to choose from one of our starters (Tina Barebones, Tina Documentation Starter, Tina Cloud Starter) and deploy directly to Vercel.&lt;/p&gt;

&lt;p&gt;This approach allows you to see how Tina works in a production deployment almost immediately . This is great for getting to know what Tina can do, how Tina works,and show it to others such as your content team.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q0k1hJZ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/forestry-demo/video/upload/v1641390729/blog-media/new-year-new-cms/tina-quickstart.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q0k1hJZ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/forestry-demo/video/upload/v1641390729/blog-media/new-year-new-cms/tina-quickstart.gif" alt="Tina Quickstart example" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-npx-createtinaapp-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;npx create-tina-app&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;create-tina-app&lt;/code&gt; allows you to work locally with one of our starters, this allows you to see how all the code behind the scenes is working before you decide that Tina is right for you.&lt;/p&gt;

&lt;p&gt;To use the &lt;code&gt;create-tina-app&lt;/code&gt; you will need &lt;code&gt;Node 14+&lt;/code&gt; .This doesn't require you to already have an application and will create a new project and directory and allow you to start developing locally.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u9-hzwjd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/forestry-demo/video/upload/v1641390724/blog-media/new-year-new-cms/create-tina-app.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u9-hzwjd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/forestry-demo/video/upload/v1641390724/blog-media/new-year-new-cms/create-tina-app.gif" alt="Create Tina App Example" width="880" height="554"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tina-cli"&gt;
  &lt;/a&gt;
  Tina CLI
&lt;/h3&gt;

&lt;p&gt;Tina CLI (&lt;code&gt;npx @tincms/cli@latest init&lt;/code&gt;) allows you to add Tina to an existing Next.js application. When using the CLI we will take care of the important pieces including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adding all the Tina dependencies&lt;/li&gt;
&lt;li&gt;Setting up a .tina folder with a basic schema&lt;/li&gt;
&lt;li&gt;Creating a demo directory with an example Tina powered page&lt;/li&gt;
&lt;li&gt;Creating an admin route&lt;/li&gt;
&lt;li&gt;Ensuring Tina best practices are used&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using the Tina CLI allows you to add Tina and selectively integrate it into your existing Next.js application. This allows you to keep your established site and slowly bring the power of Tina to your editors and content team. Though once you use it, we are not sure how slowly you will want to move. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kTGbXdCr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/forestry-demo/video/upload/v1641390724/blog-media/new-year-new-cms/tina-cli.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kTGbXdCr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/forestry-demo/video/upload/v1641390724/blog-media/new-year-new-cms/tina-cli.gif" alt="Tina CLI Example" width="880" height="502"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-can-you-keep-up-to-date-with-tina"&gt;
  &lt;/a&gt;
  Where can you keep up to date with Tina?
&lt;/h2&gt;

&lt;p&gt;You know that you will want to be part of this creative, innovative, supportive community of developers (and even some editors and designers) who are experimenting and implementing Tina daily. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tina-community-discord"&gt;
  &lt;/a&gt;
  Tina Community Discord
&lt;/h3&gt;

&lt;p&gt;Tina has a community &lt;a href="https://discord.com/invite/zumN63Ybpf"&gt;Discord&lt;/a&gt; that is full of Jamstack lovers and Tina enthusiasts. When you join you will find a place:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To get help with issues&lt;/li&gt;
&lt;li&gt;Find the latest Tina news and sneak previews&lt;/li&gt;
&lt;li&gt;Share your project with Tina community, and talk about your experience&lt;/li&gt;
&lt;li&gt;Chat about the Jamstack&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#tina-twitter"&gt;
  &lt;/a&gt;
  Tina Twitter
&lt;/h3&gt;

&lt;p&gt;Our Twitter account (&lt;a href="https://twitter.com/tina_cms"&gt;@tina_cms&lt;/a&gt;) announces the latest features, improvements, and sneak peeks to Tina. We would also be psyched if you tagged us in projects you have built.&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>cms</category>
      <category>mdx</category>
    </item>
    <item>
      <title>Introduction to Tailwind Best CSS Framework</title>
      <author>Mysterio</author>
      <pubDate>Thu, 06 Jan 2022 15:11:35 +0000</pubDate>
      <link>https://dev.to/shubhamtiwari909/introduction-to-tailwind-best-css-framework-1gdj</link>
      <guid>https://dev.to/shubhamtiwari909/introduction-to-tailwind-best-css-framework-1gdj</guid>
      <description>&lt;p&gt;Hello Guys Today i am going to show you the power of Tailwind a CSS framework.&lt;br&gt;
First of All i want to tell you that i was using Bootstrap for the styling part and it is also a good frameword but its design style has become common and little bit old and also it has some limitations which can be fulfilled by Tailwind CSS.&lt;/p&gt;

&lt;p&gt;Lets Get started...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation-"&gt;
  &lt;/a&gt;
  Installation -
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.tailwindcss.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First of all Add this CDN of Tailwind to your HTML file's Head tag to use the Tailwind for your styling.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#just-like-bootstrap-tailwind-also-do-your-styling-by-just-adding-the-class-names-of-the-style-you-want-to-use"&gt;
  &lt;/a&gt;
  Just like Bootstrap , Tailwind also do your styling by just adding the class names of the style you want to use.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#example-1-basic-styling-"&gt;
  &lt;/a&gt;
  Example 1 - Basic Styling -
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;...
&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;'bg-blue-800 text-gray-500 text-center p-5 m-5'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
hello Tailwind
&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#explaination-"&gt;
  &lt;/a&gt;
  Explaination -
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;As you can see the class names is similar to like bootstrap classes.&lt;/li&gt;
&lt;li&gt;bg(background)-blue(color name)-800(opacity).&lt;/li&gt;
&lt;li&gt;text-gray(text color)-500(opacity).&lt;/li&gt;
&lt;li&gt;text-center(will center the text).&lt;/li&gt;
&lt;li&gt;p-5(padding of 20px on all sides).&lt;/li&gt;
&lt;li&gt;m-5(margin of 20px on all sides).&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#see-how-you-easily-you-have-done-the-styling-to-your-element-without-using-any-css"&gt;
  &lt;/a&gt;
  See how you easily you have done the styling to your element without using any css.
&lt;/h4&gt;

&lt;h2&gt;
  &lt;a href="#example-2-grid-and-flex"&gt;
  &lt;/a&gt;
  Example 2 - Grid and Flex
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Flex
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt; &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;'flex justify-center gap-5'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;3&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;4&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;5&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;6&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Flex (will make the element a flexbox).&lt;/li&gt;
&lt;li&gt;justify-center(horizontally align the items centered).&lt;/li&gt;
&lt;li&gt;gap-5(Put a gap of 20px between each element).&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Grid -
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;'grid grid-cols-3 place-content-center text-center h-48 gap-2'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;3&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;4&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;5&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;6&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;grid(make the element as grid).&lt;/li&gt;
&lt;li&gt;grid-cols-3(make a 3x2 grid).&lt;/li&gt;
&lt;li&gt;place-content-center(place all the elements at center).&lt;/li&gt;
&lt;li&gt;h-48(gives the height of 192px).&lt;/li&gt;
&lt;li&gt;gap-2(A gap of 8px).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#example-3-hover-effects"&gt;
  &lt;/a&gt;
  Example - 3 Hover effects
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;'text-center p-4 bg-purple-900 text-white 
hover:bg-red-700 hover:text-slate-100'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;'hover:scale-125'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hello Tailwind&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#explaination-"&gt;
  &lt;/a&gt;
  Explaination -
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;text-center,p-4 ,bg-purplre-900, text-white i have discussed these already.&lt;/li&gt;
&lt;li&gt;hover:bg-red-700 and hover:text-slate-100 (when you hover over the element , the background color will change to red and text color will change to slate with opacity very low).&lt;/li&gt;
&lt;li&gt;Inside H1 tag , hover:scale-125(it will zoom the text by 1.25 times when you will hover over the text).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Documentation - &lt;a href="https://tailwindcss.com/docs/installation"&gt;https://tailwindcss.com/docs/installation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thats it for this tutorial....&lt;/p&gt;

&lt;p&gt;NOTE - I have used className attribute instead of class because i am working in react and the class attribute there is written as className. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-can-help-me-by-some-donation-at-the-link-below-thank-you-"&gt;
  &lt;/a&gt;
  ^^You can help me by some donation at the link below Thank you👇👇 ^^
&lt;/h2&gt;

&lt;p&gt;☕ --&amp;gt; &lt;a href="https://www.buymeacoffee.com/waaduheck"&gt;https://www.buymeacoffee.com/waaduheck&lt;/a&gt; &amp;lt;--&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-this-post-and-if-you-find-any-mistake-or-wants-to-give-any-suggestion-please-mention-it-in-the-comment-section"&gt;
  &lt;/a&gt;
  THANK YOU FOR READING THIS POST AND IF YOU FIND ANY MISTAKE OR WANTS TO GIVE ANY SUGGESTION , PLEASE MENTION IT IN THE COMMENT SECTION.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#also-check-these-posts-as-well"&gt;
  &lt;/a&gt;
  Also check these posts as well
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/shubhamtiwari909/animation-with-react-spring-3k22"&gt;https://dev.to/shubhamtiwari909/animation-with-react-spring-3k22&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/shubhamtiwari909/text-to-speech-in-reactjs-52ml"&gt;https://dev.to/shubhamtiwari909/text-to-speech-in-reactjs-52ml&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/shubhamtiwari909/best-vs-code-extensions-for-web-development-2lk3"&gt;https://dev.to/shubhamtiwari909/best-vs-code-extensions-for-web-development-2lk3&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
    </item>
    <item>
      <title>Top 10 Best Python Frameworks for Web Development in 2022</title>
      <author>virender</author>
      <pubDate>Thu, 06 Jan 2022 15:10:55 +0000</pubDate>
      <link>https://dev.to/virendebro/top-10-best-python-frameworks-for-web-development-in-2022-pci</link>
      <guid>https://dev.to/virendebro/top-10-best-python-frameworks-for-web-development-in-2022-pci</guid>
      <description>&lt;p&gt;&lt;strong&gt;Top 10 Best Python Frameworks for Web Development in 2022&lt;/strong&gt;&lt;br&gt;
In this blog, i have discussed about Top 10 Best Python Frameworks for Web Development in 2022. Most Popular 10 Best Python Frameworks for Web Development in 2022&lt;/p&gt;

&lt;p&gt;1: Django&lt;br&gt;
2: Pyramid&lt;br&gt;
3: CherryPy&lt;br&gt;
4: Flask&lt;br&gt;
5: Bottle&lt;br&gt;
6: Falcon&lt;br&gt;
7: Web2Py&lt;br&gt;
8: TurboGears&lt;br&gt;
9: Hug&lt;br&gt;
10:Tornado&lt;/p&gt;

&lt;p&gt;To read the full blog, click on the link above or search my website (&lt;strong&gt;CodesAshish&lt;/strong&gt;) on Google. I use to upload blogs related to programming and coding on my website. So Please visit once.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thankyou&lt;/strong&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Top 5 Technologies You Must Know in 2022</title>
      <author>virender</author>
      <pubDate>Thu, 06 Jan 2022 14:52:23 +0000</pubDate>
      <link>https://dev.to/virendebro/top-5-technologies-you-must-know-in-2022-1j1d</link>
      <guid>https://dev.to/virendebro/top-5-technologies-you-must-know-in-2022-1j1d</guid>
      <description>&lt;p&gt;&lt;strong&gt;Top 5 Technologies You Must Know in 2022&lt;/strong&gt;&lt;br&gt;
In this blog, i have discussed about Top 5 Technologies to know in 2022. Most Popular Technologies to Learn in 2022.&lt;/p&gt;

&lt;p&gt;1: Artificial Intelligence&lt;br&gt;
2: 5G Network Technology&lt;br&gt;
3: Blockchain&lt;br&gt;
4: AR &amp;amp; VR&lt;br&gt;
5: Cyber Security&lt;/p&gt;

&lt;p&gt;To read the full blog, click on the link above or search my website (&lt;strong&gt;CodesAshish&lt;/strong&gt;) on Google. I use to upload blogs related to programming and coding on my website. So Please visit once.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thankyou&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>ai</category>
      <category>machinelearning</category>
      <category>techtalks</category>
    </item>
    <item>
      <title>VSCode Datree: Datree's power now in your code editor 💪</title>
      <author>Suyash Sonawane</author>
      <pubDate>Thu, 06 Jan 2022 14:48:22 +0000</pubDate>
      <link>https://dev.to/suyashsonawane/vscode-datree-datrees-power-now-in-your-code-editor-4ol2</link>
      <guid>https://dev.to/suyashsonawane/vscode-datree-datrees-power-now-in-your-code-editor-4ol2</guid>
      <description>&lt;h1&gt;
  &lt;a href="#whats-in-this-article"&gt;
  &lt;/a&gt;
  What’s in this article?
&lt;/h1&gt;

&lt;p&gt;VSCode Datree  —  a VSCode Extension that brings &lt;a href="https://www.datree.io/?utm_source=suyash+sonawane&amp;amp;utm_medium=Medium+com&amp;amp;utm_campaign=VSCode+Datree%3A+Datree%E2%80%99s+power+now+in+your+code+editor&amp;amp;utm_id=Datree"&gt;Datree’s&lt;/a&gt; features right inside your code editor 🚀&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YhnStASi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AYap8sVqvwQbrH3WXStqD3g.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YhnStASi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AYap8sVqvwQbrH3WXStqD3g.gif" alt="Devs after installing VSCode Datree" width="498" height="202"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#abstract"&gt;
  &lt;/a&gt;
  Abstract
&lt;/h2&gt;

&lt;p&gt;Improper Kubernetes configurations can lead to ineffective and hard-to-maintain resource allocations, in worst cases it can break the whole CI/CD if not detected in earlier stages of deployment. The VSCode Datree extension uses Datree under the hood to gather information about the YAML and Helm configurations and generate errors and suggestions that can be displayed right inside the code editor for the developer to act upon, as the Datree CLI currently doesn’t show the line number where the error is occurring this can help developers to find errors easily in large configurations. This open-source extension extends Datree’s functionality by allowing users to use custom policies made with Datree and use them directly through VSCode.&lt;br&gt;
The extension also simplifies it for the developer to correct the errors during the development phase rather than waiting for warnings later during the CI/CD pipelines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-datree"&gt;
  &lt;/a&gt;
  What’s Datree?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;h1&gt;
  &lt;a href="#prevent-kubernetes-misconfigurations-from-reaching-production-again-"&gt;
  &lt;/a&gt;
  Prevent Kubernetes misconfigurations from reaching production (again 😤 )!
&lt;/h1&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Datree&lt;/strong&gt; helps us tackle misconfigurations easily with the command-line tool that can be easily integrated into existing CI/CD pipelines and warns us before any  misconfigured resources get deployed to production. It can also assist during the development phase by warning about possible incorrect values much earlier in the first place to increase the overall efficiency.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-vscode-datree"&gt;
  &lt;/a&gt;
  Installing VSCode Datree
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Datree needs to be installed for the extension to work, get it here 👇&lt;a href="https://hub.datree.io/?utm_source=suyash+sonawane&amp;amp;utm_medium=Medium+com&amp;amp;utm_campaign=VSCode+Datree%3A+Datree%E2%80%99s+power+now+in+your+code+editor&amp;amp;utm_id=Datree"&gt;https://hub.datree.io/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The extension can be installed directly through the extensions tab available in VSCode or through VSCode’s marketplace.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=suyashsonawane.vscode-datree"&gt;&lt;strong&gt;VSCode Datree - Visual Studio Marketplace&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QRkTVNCj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AUPkkPN6VFb6zi9QHhVzpog.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QRkTVNCj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AUPkkPN6VFb6zi9QHhVzpog.gif" alt="Installing VSCode Datree" width="600" height="325"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exploring-the-features"&gt;
  &lt;/a&gt;
  Exploring the features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Highlighting YAML Errors&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Highlighting K8s Schema Errors&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Helm Workflow Support &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Custom Test Configurations&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Solution Suggestions&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The extension incorporates different Datree features and provides added functionalities to the user. Let us discuss each of these features in detail and the datree commands they run under the hood.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-highlighting-yaml-errors"&gt;
  &lt;/a&gt;
  1. Highlighting YAML Errors
&lt;/h2&gt;

&lt;p&gt;This feature shows the issue in the YAML structure of the configuration file, this helps to ensure that a properly structured configuration file is fed during production to avoid silly delays.&lt;br&gt;
By default, Datree checks the YAML structure of the config file even before running the actual configuration checks.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ datree test config.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HMEjo8RK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ACfsOjJ5aKkeaNoUur3v5ng.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HMEjo8RK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ACfsOjJ5aKkeaNoUur3v5ng.gif" alt="YAML Errors" width="600" height="325"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-highlighting-k8s-schema-errors"&gt;
  &lt;/a&gt;
  2. Highlighting K8s Schema Errors
&lt;/h2&gt;

&lt;p&gt;This is the feature where Datree and the extension shines. The configuration file is analysed for any misconfiguration and incorrect values, then problems are highlighted along with helpful suggestions.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ datree test config.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i79YJdYd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Ahx6RA_kCMfFX8ViDKei7sw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i79YJdYd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Ahx6RA_kCMfFX8ViDKei7sw.gif" alt="K8s Schema Error" width="600" height="325"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vzN-fwqZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AAa7m36SIbQMi3uLFlKAMcQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vzN-fwqZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AAa7m36SIbQMi3uLFlKAMcQ.gif" alt="Policy Errors" width="600" height="325"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-support-for-helm-workflows"&gt;
  &lt;/a&gt;
  3. Support for Helm Workflows
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Helm and Datree’s Helm Plugin is required, get it here 👇&lt;br&gt;
&lt;a href="https://hub.datree.io/helm-plugin?utm_source=suyash+sonawane&amp;amp;utm_medium=Medium+com&amp;amp;utm_campaign=VSCode+Datree%3A+Datree%E2%80%99s+power+now+in+your+code+editor&amp;amp;utm_id=Datree"&gt;https://hub.datree.io/helm-plugin&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When it comes to defining Kubernetes configuration for large applications, Helm Charts play an important role by reducing duplication &amp;amp; complexity and boosting productivity. Datree’s Helm Plugin allows you to run policy checks on Helm Charts with ease, the extension can also detect the Helm workflow and automatically run the required helm plugin.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ helm datree test [CHART_DIRECTORY]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GxfFq5T2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AJeXsvnJ639y1ANfs_S_lcQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GxfFq5T2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AJeXsvnJ639y1ANfs_S_lcQ.gif" alt="Helm Charts" width="600" height="325"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-custom-test-configurations"&gt;
  &lt;/a&gt;
  4. Custom Test Configurations
&lt;/h2&gt;

&lt;p&gt;Datree CLI provides a couple of options such as mentioning K8s schema version, policies, etc. The extension enables you to harness these options through an options panel.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ datree test config.yaml --schema-version 1.18.0 --policy staging
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vtQh2s97--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AAQZDzPK4aWVfLd3BpCKihA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vtQh2s97--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AAQZDzPK4aWVfLd3BpCKihA.gif" alt="Custom Parameters" width="600" height="325"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-solution-suggestions"&gt;
  &lt;/a&gt;
  5. Solution Suggestions
&lt;/h2&gt;

&lt;p&gt;Datree has 30 built-in battle-tested policy checks, if your configuration has these errors, a link to the solution article will be linked along with the error highlight.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--doJ8NTAP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AYjLYl2isSEA7SWAf0uAZcA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--doJ8NTAP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AYjLYl2isSEA7SWAf0uAZcA.gif" alt="Suggesting Solutions" width="600" height="338"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#future-scope"&gt;
  &lt;/a&gt;
  Future Scope
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Linking Execution history &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Improved Error Highlighting&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As this extension is actively maintained, new features that are added to Datree CLI will be made available in the extension as well!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Being an Opensource project, if you find any issues, bugs, or have any suggestions feel free to contribute 🙌&lt;br&gt;
&lt;a href="https://github.com/SuyashSonawane/vscode-datree"&gt;&lt;strong&gt;GitHub - SuyashSonawane/vscode-datree: Simple VSCode Extension that allows you to run Datree tests…&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#pretext"&gt;
  &lt;/a&gt;
  Pretext
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Here I share the idea behind the extension and how it was created!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This extension is built for Datree as a part of the &lt;a href="https://cloudnativehack21.devpost.com/"&gt;Cloud Native Hackathon&lt;/a&gt;.&lt;br&gt;
Datree is a CLI tool that allows the rectification of K8s configuration files with ease and zero dependencies. While researching the possible use case for the hackathon I came across an idea about a VSCode extension that can show errors directly in the editor and to my surprise there was no existing solution to this!! , I always wanted to make a VSCode extension and now it was the perfect opportunity.&lt;/p&gt;

&lt;p&gt;First, I started with parsing the CLI’s output with its JSON output format, faced some issues with the structure, and contacted datree support for assistance, I came to know that there was already an issue that addressed this and &lt;a href="https://github.com/eyarz"&gt;Eyar Zilberman&lt;/a&gt; provided me with some ideas and a video that link that suggests such VSCode extension. I was very much pumped at this point and worked with full force to make it into a reality.&lt;/p&gt;

&lt;p&gt;VSCode has a very extensive API when it comes to developing extensions. I got the opportunity to learn and understand the logic that goes behind building such extensions. I worked with reviews, child processes, providers, and typescript while building this extension and React.js for building the webviews.&lt;/p&gt;

&lt;p&gt;I periodically updated the datree team with my progress and they were kind enough to solve my doubts and suggest improvements and features. &lt;a href="https://github.com/shimont"&gt;Shimon Tolts&lt;/a&gt; suggested adding Helm support and &lt;a href="https://github.com/dimabru"&gt;Dima Brusilovsky&lt;/a&gt; suggested having an interface where the user can provide custom configuration for the tests, thanks to them I was able to complete the first stable release of the extension.&lt;/p&gt;

&lt;p&gt;While working on this project I interacted with many hackers, solved their doubts, got some of the mine cleared, thanks to Community Classroom for making this happen&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interested-to-know-more-about-me-heres-my-portfolio"&gt;
  &lt;/a&gt;
  Interested to know more about me, here’s my portfolio 🚀
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://suyashsonawane.me/"&gt;&lt;strong&gt;Portfolio | Suyash Sonawane&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thats-all-folks"&gt;
  &lt;/a&gt;
  That’s All Folks
&lt;/h1&gt;

&lt;p&gt;You can follow me on:&lt;br&gt;
Twitter: &lt;a href="https://twitter.com/SuyashYSonawane"&gt;Suyash Sonawane (@SuyashYSonawane) / Twitter&lt;/a&gt;&lt;br&gt;
LinkedIn: &lt;a href="https://www.linkedin.com/in/suyash-sonawane-44661417b/"&gt;Suyash Sonawane | LinkedIn&lt;/a&gt;&lt;br&gt;
Github: &lt;a href="https://github.com/SuyashSonawane"&gt;SuyashSonawane (Suyash Sonawane)&lt;/a&gt;&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>vscode</category>
      <category>datree</category>
    </item>
    <item>
      <title>Koa vs Express</title>
      <author>Eugene Kopich</author>
      <pubDate>Thu, 06 Jan 2022 14:41:59 +0000</pubDate>
      <link>https://dev.to/web2033/koa-vs-express-3em1</link>
      <guid>https://dev.to/web2033/koa-vs-express-3em1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#koa-vs-express"&gt;
  &lt;/a&gt;
  Koa vs Express
&lt;/h2&gt;

&lt;p&gt;Philosophically, &lt;a href="https://github.com/koajs/koa"&gt;Koa&lt;/a&gt; aims to "fix and replace node", whereas &lt;a href="https://github.com/expressjs/express"&gt;Express&lt;/a&gt; "augments node". Koa uses promises and async functions to rid apps of callback hell and simplify error handling. It exposes its own &lt;code&gt;ctx.request&lt;/code&gt; and &lt;code&gt;ctx.response&lt;/code&gt; objects instead of node's &lt;code&gt;req&lt;/code&gt; and &lt;code&gt;res&lt;/code&gt; objects.&lt;/p&gt;

&lt;p&gt;Express, on the other hand, augments node's &lt;code&gt;req&lt;/code&gt; and &lt;code&gt;res&lt;/code&gt; objects with additional properties and methods and includes many other "framework" features, such as routing and templating, which Koa does not.&lt;/p&gt;

&lt;p&gt;Thus, Koa can be viewed as an abstraction of node.js's &lt;code&gt;http&lt;/code&gt; modules, where as Express is an application framework for node.js.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Koa&lt;/th&gt;
&lt;th&gt;Express&lt;/th&gt;
&lt;th&gt;Connect&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Middleware Kernel&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Routing&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Templating&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sending Files&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JSONP&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Thus, if you'd like to be closer to node.js and traditional node.js-style coding, you probably want to stick to Connect/Express or similar frameworks. If you want to get rid of callbacks, use Koa.&lt;/p&gt;

&lt;p&gt;As result of this different philosophy is that traditional node.js "middleware", i.e. functions of the form &lt;code&gt;(req, res, next)&lt;/code&gt;, are incompatible with Koa. Your application will essentially have to be rewritten from the ground, up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#does-koa-replace-express"&gt;
  &lt;/a&gt;
  Does Koa replace Express?
&lt;/h2&gt;

&lt;p&gt;It's more like Connect, but a lot of the Express goodies were moved to the middleware level in Koa to help form a stronger foundation. This makes middleware more enjoyable and less error-prone to write, for the entire stack, not just the end application code.&lt;/p&gt;

&lt;p&gt;Typically many middleware would re-implement similar features, or even worse incorrectly implement them, when features like signed cookie secrets among others are typically application-specific, not middleware specific.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#does-koa-replace-connect"&gt;
  &lt;/a&gt;
  Does Koa replace Connect?
&lt;/h2&gt;

&lt;p&gt;No, just a different take on similar functionality now that generators allow us to write code with less callbacks. Connect is equally capable, and some may still prefer it, it's up to what you prefer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-isnt-koa-just-express-40"&gt;
  &lt;/a&gt;
  Why isn't Koa just Express 4.0?
&lt;/h2&gt;

&lt;p&gt;Koa is a pretty large departure from what people know about Express, the design is fundamentally much different, so the migration from Express 3.0 to this Express 4.0 would effectively mean rewriting the entire application, so we thought it would be more appropriate to create a new library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-is-koa-different-than-connectexpress"&gt;
  &lt;/a&gt;
  How is Koa different than Connect/Express?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#promisesbased-control-flow"&gt;
  &lt;/a&gt;
  Promises-based control flow
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;No callback hell.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Better error handling through try/catch.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No need for domains.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#koa-is-barebones"&gt;
  &lt;/a&gt;
  Koa is barebones
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Unlike both Connect and Express, Koa does not include any middleware.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unlike Express, routing is not provided.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unlike Express, many convenience utilities are not provided. For example, sending files.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Koa is more modular.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#koa-relies-less-on-middleware"&gt;
  &lt;/a&gt;
  Koa relies less on middleware
&lt;/h3&gt;

&lt;p&gt;For example, instead of a "body parsing" middleware, you would instead use a body parsing function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#koa-abstracts-nodes-requestresponse"&gt;
  &lt;/a&gt;
  Koa abstracts node's request/response
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Less hackery.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Better user experience.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Proper stream handling.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#koa-routing-third-party-libraries-support"&gt;
  &lt;/a&gt;
  Koa routing (third party libraries support)
&lt;/h3&gt;

&lt;p&gt;Since Express comes with its own routing, but Koa does not have&lt;br&gt;
any in-built routing, there are third party libraries available such as koa-router and koa-route. Similarly, just like we have helmet for security in Express, for Koa we have koa-helmet available and the list goes on for Koa available third party libraries.&lt;/p&gt;

</description>
      <category>koa</category>
      <category>express</category>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to use Python with Notion API</title>
      <author>Mihai-Adrian Andrei</author>
      <pubDate>Thu, 06 Jan 2022 14:31:36 +0000</pubDate>
      <link>https://dev.to/mihaiandrei97/how-to-use-python-with-notion-api-1n61</link>
      <guid>https://dev.to/mihaiandrei97/how-to-use-python-with-notion-api-1n61</guid>
      <description>&lt;p&gt;Everybody uses Notion. And why not? It is an awesome tool. But what if you want to also add it to some of your apps? It seems you can now do it by using the Notion API and I will show how you can integrate it using Python.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#notion-setup"&gt;
  &lt;/a&gt;
  Notion setup
&lt;/h2&gt;

&lt;p&gt;First, you need to create a page that contains a database in Notion. In this example, we are going to make one that contains 3 fields: &lt;code&gt;name, genre, and completed&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j8IqNs9i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641454499743/26O5x4__I.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j8IqNs9i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641454499743/26O5x4__I.png" alt="image.png" width="880" height="248"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to have access to this page inside Python, we need to create an integration for it. For that, you can go to &lt;code&gt;Settings =&amp;gt; Integrations =&amp;gt; Develop your own integrations&lt;/code&gt;. After that, you specify a name for your integration and click submit. In the end, you will get to this screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SpCgyxXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641454720564/wHtL1V_hv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SpCgyxXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641454720564/wHtL1V_hv.png" alt="image.png" width="880" height="505"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see in the photo, you now have a secret key. Copy that because we will need it in our Python program.&lt;/p&gt;

&lt;p&gt;We need to do 2 more steps in Notion before starting to write some code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We need to go on the notion page, click the &lt;code&gt;Share&lt;/code&gt; button, press &lt;code&gt;Invite&lt;/code&gt;, and then you can select the integration that you just created from a list:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0BiWsb-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641454890420/AWKuYAkLc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0BiWsb-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641454890420/AWKuYAkLc.png" alt="image.png" width="789" height="423"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;With the page opened in your browser, you will need a database id. Let's say the link is the following one: &lt;code&gt;https://www.notion.so/19f00145217c4437afb06cfdbb2ad994?v=51972570a71c4b8b9b1feeec01e87eb5&lt;/code&gt;. The database id is &lt;code&gt;19f00145217c4437afb06cfdbb2ad994&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#python-setup"&gt;
  &lt;/a&gt;
  Python Setup
&lt;/h2&gt;

&lt;p&gt;First, we import the requests library that we are going to use to interact with the Notion API. Then, we store the secret and database_id from the notion setup.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'secret_from_notion_integration'&lt;/span&gt;
&lt;span class="n"&gt;database_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'database_id_from_link'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we will use the requests library to interact with the Notion API.&lt;/p&gt;

&lt;p&gt;The first function we are going to create is &lt;code&gt;getMovies&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getMovies&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'https://api.notion.com/v1/databases/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;database_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/query'&lt;/span&gt;

  &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"Authorization"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Bearer &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Notion-Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"2021-08-16"&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="n"&gt;result_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;movie_list_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'results'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movie_list_result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if you add a movie in Notion, and you call this function, you will see a lot of data. In order to make it more readeble and use only the information we need, we will make a helper function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mapNotionResultToMovie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="c1"&gt;# you can print result here and check the format of the answer.
&lt;/span&gt;  &lt;span class="n"&gt;movie_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;properties&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'properties'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;genre&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Genre'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'rich_text'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'text'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'content'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Name'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'text'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'content'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;completed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Completed'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'checkbox'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'genre'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;genre&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'completed'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'movie_id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;movie_id&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And call it inside &lt;code&gt;getMovies&lt;/code&gt;. The function should contain the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getMovies&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'https://api.notion.com/v1/databases/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;database_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/query'&lt;/span&gt;

  &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"Authorization"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Bearer &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Notion-Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"2021-08-16"&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="n"&gt;result_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;movie_list_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'results'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="n"&gt;movies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;movie_list_result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="n"&gt;movie_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mapNotionResultToMovie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movie_dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;movies&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example of usage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;movies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getMovies&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# json.dumps is used to pretty print a dictionary 
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Movie list:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, you can use this function to display your movies inside Python. Pretty cool, right 😁 ?&lt;/p&gt;

&lt;p&gt;The next function we are going to implement is &lt;code&gt;createMovie&lt;/code&gt;. For this one, we will need to construct a payload similar to the response from &lt;code&gt;getMovies&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;createMovie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;genre&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;completed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'https://api.notion.com/v1/pages'&lt;/span&gt;

  &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"parent"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s"&gt;"database_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;database_id&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s"&gt;"properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s"&gt;"Name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="s"&gt;"Genre"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"rich_text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;genre&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="s"&gt;"Completed"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"checkbox"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;completed&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}}&lt;/span&gt;

  &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"Authorization"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Bearer &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Notion-Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"2021-08-16"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"application/json"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

  &lt;span class="n"&gt;movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mapNotionResultToMovie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;createdMovie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;createMovie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Movie1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Genre1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Created Movie:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;createdMovie&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you check Notion, you will see that a new entry in the table was created.🎉🎉🎉&lt;/p&gt;

&lt;p&gt;The update function is pretty similar to the create one. The major difference is that we need to also take into consideration a &lt;code&gt;movieId&lt;/code&gt;.  We create the payload in a similar way, but we also add the &lt;code&gt;movieId&lt;/code&gt; in the URL.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;updateMovie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movieId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'https://api.notion.com/v1/pages/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;movieId&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;

  &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s"&gt;"Name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="s"&gt;"Genre"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"rich_text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'genre'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="s"&gt;"Completed"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"checkbox"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'completed'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}}&lt;/span&gt;

  &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"Authorization"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Bearer &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Notion-Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"2021-08-16"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"application/json"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

  &lt;span class="n"&gt;movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mapNotionResultToMovie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to use this function, you first need to call &lt;code&gt;getMovies()&lt;/code&gt;. In that response, you can get a &lt;code&gt;movieId&lt;/code&gt; (in the ex: &lt;code&gt;fdd0fa87-4729-43e6-ae3f-823d48b382ee&lt;/code&gt;) and use it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;updatedMovie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;updateMovie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'fdd0fa87-4729-43e6-ae3f-823d48b382ee'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'UpdatedMovie1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;'genre'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'UpdatedGenre1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;'completed'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Update movie'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;updatedMovie&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last function that we are going to create is &lt;code&gt;deleteMovie&lt;/code&gt;. In Notion, pages are using a property called &lt;code&gt;archived&lt;/code&gt;. If we set that to true, then the page will be deleted. So, this function will use the update endpoint in order to change the value of the 'archived' boolean.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deleteMovie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movieId&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'https://api.notion.com/v1/pages/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;movieId&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;

  &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"archived"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"Authorization"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Bearer &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Notion-Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"2021-08-16"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"application/json"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, you can use it with a &lt;code&gt;movieId&lt;/code&gt; and if you check the database in Notion, that specific row will be deleted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;deleteMovie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'a19e538d-10cc-40ec-91bb-f7237c93e428'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is easier to interact with Notion from JavaScript because they provide a client, and in Python, we don't have one, but that shouldn't stop you to use it😁.&lt;/p&gt;

</description>
      <category>python</category>
      <category>notion</category>
    </item>
    <item>
      <title>Case Study - Lunacy</title>
      <author>Dan Walmsley</author>
      <pubDate>Thu, 06 Jan 2022 14:30:00 +0000</pubDate>
      <link>https://dev.to/avalonia/case-study-lunacy-2fg9</link>
      <guid>https://dev.to/avalonia/case-study-lunacy-2fg9</guid>
      <description>&lt;p&gt;We interviewed Sergey Mikolaitis from &lt;a href="https://icons8.com/lunacy"&gt;icons8&lt;/a&gt;. Sergey and his team have recently released a fantastic design application called Lunacy.&lt;/p&gt;

&lt;p&gt;Lunacy is a truly cross platform graphic design tool powered by Avalonia.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-did-you-discover-avalonia"&gt;
  &lt;/a&gt;
  How did you discover Avalonia?
&lt;/h2&gt;

&lt;p&gt;I had seen Nikita Tsukanov give talks at conferences and on YouTube back in the early days.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=DLHhZJkSqWk"&gt;English&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8qzqweimcFs"&gt;Russian&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;It seemed like an interesting project but I didn't imagine how serious the team was about the platform and what it has now become, a serious player in the cross platform UI space.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-were-the-reasons-to-choose-avalonia"&gt;
  &lt;/a&gt;
  What were the reasons to choose Avalonia?
&lt;/h2&gt;

&lt;p&gt;We had been using WPF and our application was tied to just Windows.&lt;/p&gt;

&lt;p&gt;The newer replacements to WPF (UWP and Xamarin) were not able to offer us the flexibility that we needed for a content creation application.&lt;/p&gt;

&lt;p&gt;We had our eye on Avalonia for along time and we saw that it is a robust platform with a huge and active community behind it.&lt;/p&gt;

&lt;p&gt;Once Avalonia became stable enough we jumped at the opportunity to port our application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-was-your-experience-of-using-avalonia-and-porting-your-application"&gt;
  &lt;/a&gt;
  How was your experience of using Avalonia and porting your application?
&lt;/h2&gt;

&lt;p&gt;Initially there was a bit of a learning curve as with all new frameworks. Previously we had been focused on Windows only technologies so we had to start thinking about writing applications for cross platform, however since Avalonia is extremely similar to the likes of WPF and UWP we got up to speed quite quickly, we were able to re-use our existing knowledge and skills effectively.&lt;/p&gt;

&lt;p&gt;I believe the port would have taken us at least 3x longer if we had chosen a different framework.&lt;/p&gt;

&lt;p&gt;The biggest difference coming from WPF is the new CSS like styling system. Once we understood it however it was far more flexible and a joy to use.&lt;/p&gt;

&lt;p&gt;We see Avalonia as a "better WPF", its almost how you would make WPF if it was being designed today. There are many sensible improvements over WPF which save you a lot of time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#was-avalonia-missing-any-important-features-compared-to-wpf"&gt;
  &lt;/a&gt;
  Was Avalonia missing any important features compared to WPF?
&lt;/h2&gt;

&lt;p&gt;The only thing that was missing was IME support and right-to-left text support.&lt;/p&gt;

&lt;p&gt;Those however are actively being worked on and will soon be available.&lt;/p&gt;

&lt;p&gt;There were a few other very minor features that we were able to implement ourselves, we opened PRs and they were merged.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#was-it-important-that-avalonia-was-an-open-source-framework"&gt;
  &lt;/a&gt;
  Was it important that Avalonia was an open source framework?
&lt;/h2&gt;

&lt;p&gt;Not really but it became invaluable. The code quality of the framework is of a very high standard. This means the team were able to debug into Avalonia directly from the IDE and see nice clean and understandable code.&lt;/p&gt;

&lt;p&gt;Sometimes you could skip the documentation and have a quick peek at the code on GitHub to get the information you need. This is something you are usually scared to do with other large code bases.&lt;/p&gt;

&lt;p&gt;It also means when we find a bug or an issue, we are able to just fix it ourselves, we open a PR and it usually doesn't take long to have it merged.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-you-needed-help-where-did-you-find-it"&gt;
  &lt;/a&gt;
  When you needed help where did you find it?
&lt;/h2&gt;

&lt;p&gt;One of the best places for support was the community chat on Telegram.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://t.me/Avalonia"&gt;Telegram (EN)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://t.me/AvaloniaRU"&gt;Telegram (RU)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We had a difficulty being able to submit our application to the Apple store. We chatted with members of the community and quickly found how to resolve it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-is-the-performance"&gt;
  &lt;/a&gt;
  How is the performance?
&lt;/h2&gt;

&lt;p&gt;The performance is excellent, our application is very graphical and we were able to make zooming, panning extremely smooth.&lt;/p&gt;

&lt;p&gt;We also know that the team are working to optimize Avalonia even further so its only getting better from here.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hasv24Gf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/da6u77rn3i04b6pbl1dg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hasv24Gf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/da6u77rn3i04b6pbl1dg.jpg" alt="Image description" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://icons8.com/lunacy"&gt;Lunacy&lt;/a&gt; is available in the &lt;a href="https://apps.apple.com/app/id1582493835"&gt;Apple Store&lt;/a&gt; and &lt;a href="https://dev.toms-windows-store://pdp/?productid=9pnlmkkpcljj"&gt;Microsoft Store&lt;/a&gt;, visit their website to try out a real Avalonia application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://icons8.com/lunacy"&gt;https://icons8.com/lunacy&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>🎬Top 10 CSS &amp; JavaScript Projects🙌</title>
      <author>Robson Muniz</author>
      <pubDate>Thu, 06 Jan 2022 14:25:38 +0000</pubDate>
      <link>https://dev.to/robsonmuniz16/top-10-css-javascript-projects-1jk7</link>
      <guid>https://dev.to/robsonmuniz16/top-10-css-javascript-projects-1jk7</guid>
      <description>&lt;p&gt;&lt;strong&gt;Top 10 CSS &amp;amp; JavaScript Projects&lt;/strong&gt; that will help you test your knowledge and use muscle memory in creating them.&lt;/p&gt;




&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xhaq1YhelIw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;We will see from the simple HTML (markup) as well as its presentation layer, adding beauty to your pages, going beyond that adding effects such as hover effects and others.&lt;/p&gt;

&lt;p&gt;Lastly we have more intermediate projects, we'll see how to manipulate CSS at our leisure using Javascript, making our sites really interactive.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Tech conferences list: how to find the next tech conference?</title>
      <author>Aurélie Vache</author>
      <pubDate>Thu, 06 Jan 2022 14:20:23 +0000</pubDate>
      <link>https://dev.to/aurelievache/tech-conferences-list-how-to-find-the-next-tech-conference-igc</link>
      <guid>https://dev.to/aurelievache/tech-conferences-list-how-to-find-the-next-tech-conference-igc</guid>
      <description>&lt;p&gt;As an organizer, speaker, attendee or sponsor, have you ever ask when and where the next tech conferences will be happen?&lt;br&gt;
And as a speaker maybe you want to submit your last talk, but where and when?&lt;/p&gt;

&lt;p&gt;In 2017, several years back!, I created a Git repository on GitHub titled &lt;a href="https://github.com/scraly/developers-conferences-agenda/"&gt;"Developers Conferences Agenda/List"&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/scraly"&gt;
        scraly
      &lt;/a&gt; / &lt;a href="https://github.com/scraly/developers-conferences-agenda"&gt;
        developers-conferences-agenda
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      This repository list a maximum of conferences's date in order to help conferences organizers &amp;amp; attendees
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#goal"&gt;
  &lt;/a&gt;
  Goal
&lt;/h2&gt;

&lt;p&gt;The goal of this repository was to: "list a maximum of conferences date in order to help conferences organizers/speakers/sponsors/attendees.&lt;/p&gt;

&lt;p&gt;As a conference organizer, we always ask us what will be the perfect date for the event?&lt;/p&gt;

&lt;p&gt;A data to take in account is the date of others events, but how to find this?&lt;/p&gt;

&lt;p&gt;As a developer, a technical lover, an attendee, we want to have a calendar, we want to know when will be the next event.&lt;/p&gt;

&lt;p&gt;And as a speaker, do you ask yourself what are the dates of the next CFP (Call For Paper)? What is the date and place of the next conferences?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nHAHfTjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p3kgr1k1okn9mb1wtoh4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nHAHfTjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p3kgr1k1okn9mb1wtoh4.png" alt="CFP" width="880" height="282"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I propose to you this GitHub repository in order to list all conferences for developers in France, Europe and world."&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#want-to-contribute"&gt;
  &lt;/a&gt;
  Want to contribute?
&lt;/h2&gt;

&lt;p&gt;I try to maintain and continually update this repository, but if you find any missing conferences you can easily contribute. Just add an event or your event. For that, just do a &lt;a href="https://github.com/scraly/developers-conferences-agenda/pulls"&gt;Pull Request (PR)&lt;/a&gt; in order to update this developers conferences agenda.&lt;/p&gt;

&lt;p&gt;If everybody contribute to this repository, it can really help conferences organizer. If they don't know your conference they can't buy a ticket and come to it 😏. It can also help sponsor: thanks to this tech conferences agenda, they can know which conferences to sponsor. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-repository"&gt;
  &lt;/a&gt;
  The repository
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/scraly"&gt;
        scraly
      &lt;/a&gt; / &lt;a href="https://github.com/scraly/developers-conferences-agenda"&gt;
        developers-conferences-agenda
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      This repository list a maximum of conferences's date in order to help conferences organizers &amp;amp; attendees
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In order to help developers and tech lifetime it can be easy. No need to create the future Javascript framework, no need to understand all the concepts of Kubernetes and Docker.&lt;/p&gt;

&lt;p&gt;But the power is in your hands, you can add a star to this simple repository, share it, contribute it and create your own repositories and projects :-).&lt;/p&gt;

</description>
      <category>dev</category>
      <category>github</category>
    </item>
  </channel>
</rss>
