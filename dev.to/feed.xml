<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Next.js Redirect Without Flashing Content</title>
      <author>Theodorus Clarence</author>
      <pubDate>Tue, 18 May 2021 15:25:14 +0000</pubDate>
      <link>https://dev.to/theodorusclarence/next-js-redirect-without-flashing-content-5bio</link>
      <guid>https://dev.to/theodorusclarence/next-js-redirect-without-flashing-content-5bio</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Next.js prerenders the static page, then hydrate the site to full interactivity client-side&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That means, we see our page first which is the HTML and the CSS, and a split second later, we get the JavaScript and all of the interactivity like button clicks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;In Create React App redirecting or doing &lt;code&gt;history.push&lt;/code&gt; is not really a problem because all of the data that was sent is fetch on the client-side, including the static page (HTML &amp;amp; CSS). So there won't be any flashing content, and the app will smoothly redirect or push the page.&lt;/p&gt;

&lt;p&gt;But, in Next.js, we get the static page first, then only after finishing the hydration, the javascript code that does the redirecting will run. This becomes a problem when we are making a page with an authentication barrier because the unauthorized user can see the content briefly before getting redirected.&lt;/p&gt;

&lt;p&gt;I saw a lot of this problem even in the production app, maybe they still cover up the data because some of it was fetched client-side, but the shell sometimes still shows up. Try opening this website &lt;a href="https://app.splitbee.io/projects/theodorusclarence.com"&gt;https://app.splitbee.io/projects/theodorusclarence.com&lt;/a&gt;. You are not supposed to have access to this page. You will see a flash of the dashboard shell then only after that flash, you will get redirected to the login page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vw1o9VzI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kncp90qt7bib1ue0jpzb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vw1o9VzI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kncp90qt7bib1ue0jpzb.gif" alt="Splitbee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are a lot of answers lying around the internet to use methods such as server-side rendering the page, and utilizing cookies by using &lt;code&gt;dangerouslySetInnerHTML&lt;/code&gt; in the Head.&lt;/p&gt;

&lt;p&gt;This method of blocking the page does not need any of that, but we will need to have a full-page loader to block the content.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;p&gt;I created a demo on &lt;a href="https://learn-auth-redirect-nextjs.vercel.app/"&gt;https://learn-auth-redirect-nextjs.vercel.app/&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;You can try opening up the page, and directly go to &lt;a href="http://learn-auth-redirect-nextjs.vercel.app/blocked"&gt;learn-auth-redirect-nextjs.vercel.app/blocked&lt;/a&gt;. You will briefly see the loader, then get redirected to the &lt;code&gt;/&lt;/code&gt; route.&lt;/p&gt;

&lt;p&gt;There are 2 approach that I found.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-checking-on-every-single-page"&gt;
  &lt;/a&gt;
  1. Checking on every single page
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useAuth&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/contexts/auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;FullPageLoader&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/components/FullPageLoader&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;blocked&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isAuthenticated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAuth&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isAuthenticated&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isAuthenticated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isAuthenticated&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FullPageLoader&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'py-12 space-y-4 layout'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;YOUR CONTENT THAT SHOULD NOT BE SEEN UNLESS AUTHENTICATED&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we are getting the &lt;code&gt;isAuthenticated&lt;/code&gt; from the Auth Context, you can &lt;a href="https://github.com/theodorusclarence/learn-auth-redirect-nextjs"&gt;see the repository&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;This set of code will return the FullPageLoader component first while waiting for the page rendered and getting hydrated, then after that, the useEffect will do the checking if we are authenticated.&lt;/p&gt;

&lt;p&gt;This code is using useEffect in the Authentication Context, to verify the token that is usually stored in localStorage. If you want to see this Authentication Context pattern, I have &lt;a href="http://theodorusclarence.com/library/auth-context"&gt;a code snippet&lt;/a&gt; for that.&lt;/p&gt;

&lt;p&gt;The context are returning isLoading Value, and we show the loader when it is loading, until we get the value of isAuthenticated.&lt;/p&gt;

&lt;p&gt;This pattern will effectively block the content that we don't want to give to unauthorized users. But using the first approach, it will be painful to add that pattern to every authenticated page we have. So I try to create a PrivateRoute, kind of similar to the CRA's React Router pattern.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-using-privateroute-component"&gt;
  &lt;/a&gt;
  2. Using PrivateRoute Component
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useAuth&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/contexts/auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;FullPageLoader&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./FullPageLoader&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;PrivateRoute&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;protectedRoutes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isAuthenticated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAuth&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pathIsProtected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;protectedRoutes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isAuthenticated&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;pathIsProtected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Redirect route, you can point this to /login&lt;/span&gt;
            &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isAuthenticated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pathIsProtected&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isAuthenticated&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;pathIsProtected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FullPageLoader&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By using this component, we can specify the routes that we want to protect in _app.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;//_app.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SEO&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/next-seo.config&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/styles/globals.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AuthProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/contexts/auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PrivateRoute&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/components/PrivateRoute&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Add your protected routes here&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;protectedRoutes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/blocked-component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AuthProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PrivateRoute&lt;/span&gt; &lt;span class="na"&gt;protectedRoutes&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;protectedRoutes&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;PrivateRoute&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;AuthProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;I'm open for all suggestions and contributions to improve 🚀. Open a PR on the repository or email me at &lt;a href="mailto:theodorusclarence@gmail.com"&gt;theodorusclarence@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Without using full page loader &amp;amp; not authenticated &lt;code&gt;/blocked-unhandled&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QqBuSI2Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cc7blmnmesmrvvz1728t.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QqBuSI2Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cc7blmnmesmrvvz1728t.gif" alt="Blocked unhandled"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the red text is still flashed briefly&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using full page loader &amp;amp; not authenticated &lt;code&gt;/blocked-component&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E5zFFFdH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vx06rx7zrqa6b1v01hkl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E5zFFFdH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vx06rx7zrqa6b1v01hkl.gif" alt="Blocked without token"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using full page loader, no content will be flashed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using full page loader &amp;amp; authenticated by checking the token&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7dvKtvfG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53adkh32mk5jt7c58o0z.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7dvKtvfG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53adkh32mk5jt7c58o0z.gif" alt="Blocked with Token"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using full page loader will still work if they have the token in localStorage&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>nextjs</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>Contentful Developer newsletter: Rich Text rendering, a new Next.js course and tags for GraphQL</title>
      <author>Stefan Judis</author>
      <pubDate>Tue, 18 May 2021 15:19:56 +0000</pubDate>
      <link>https://dev.to/contentful/contentful-developer-newsletter-rich-text-rendering-a-new-next-js-course-and-tags-for-graphql-j0n</link>
      <guid>https://dev.to/contentful/contentful-developer-newsletter-rich-text-rendering-a-new-next-js-course-and-tags-for-graphql-j0n</guid>
      <description>&lt;h1&gt;
  &lt;a href="#howdy-friends-and-happy-may-contentful-community"&gt;
  &lt;/a&gt;
  Howdy friends and happy May, Contentful Community!
&lt;/h1&gt;

&lt;p&gt;As spring approaches in Berlin, I’ve had time to think outside and came up with some interesting nuggets I wanted to share. This month’s newsletter is full of resources about the popular JavaScript framework Next.js, Rich Text rendering and new features!&lt;/p&gt;

&lt;p&gt;I’m also interested in what you are building and would love to have you share it with us. Tweet &lt;a href="https://twitter.com/contentful"&gt;@contentful&lt;/a&gt; what you’ve built using #BuiltWithContentful.&lt;/p&gt;

&lt;p&gt;Let’s get to it!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#we-code-live-on-youtube-and%C2%A0twitch"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.twitch.tv/contentfuldevs"&gt;We code live on YouTube and Twitch!&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Last month we hosted several guests to talk about a wide range of topics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cpkQiBo6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/fo9twyrwpveg/3OwNFbs3bxgXBJ28aVGaOE/6ae3cccce74f9c43009f902336ce5b1a/pasted_image_0__3_.png%3Ffm%3Dwebp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cpkQiBo6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/fo9twyrwpveg/3OwNFbs3bxgXBJ28aVGaOE/6ae3cccce74f9c43009f902336ce5b1a/pasted_image_0__3_.png%3Ffm%3Dwebp" alt="Screenshots of Contentful live coding sessions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find the recordings on YouTube:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Qx4OQ9QWf94"&gt;The Ultimate SEO tutorial with Andrew Kumar&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=wwc_LnJSQNw&amp;amp;t=5387s"&gt;ContentModel.io with Ante Šepić&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=QFDQIdkfyHc"&gt;Tags and Permissions with Olubukola Makinwa&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What’s next? Salma and Shy will spend &lt;strong&gt;a whole month building a Jamstack ecommerce site&lt;/strong&gt;. Watch the space and follow us on &lt;a href="https://www.youtube.com/contentfulinc"&gt;YouTube&lt;/a&gt; or &lt;a href="https://www.twitch.tv/contentfuldevs"&gt;Twitch&lt;/a&gt; to get notified!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#exciting-things-from-the%C2%A0internet"&gt;
  &lt;/a&gt;
  Exciting things from the internet
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#dotfiles-for-your%C2%A0inspiration"&gt;
  &lt;/a&gt;
  &lt;a href="https://dotfiles.github.io/inspiration/"&gt;Dotfiles for your inspiration&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Dotfiles projects are repositories that include hidden configuration dotfiles (starting with a &lt;code&gt;.&lt;/code&gt;). Once you have figured out a setup that works for you, you can automatically set up a new machine. Don’t know where to start? I got you. This resource lists over 50 approaches to inspire you – happy automating!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#emoji-under-the%C2%A0hood"&gt;
  &lt;/a&gt;
  &lt;a href="https://tonsky.me/blog/emoji/"&gt;Emoji under the hood&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;I love using emojis (🙈). I’m also fascinated by the technical Unicode concept. “Emoji under the hood” is an excellent article if you want to understand how Emojis work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#loficafe-beautiful-beats-with-soothing%C2%A0backgrounds"&gt;
  &lt;/a&gt;
  &lt;a href="https://lofi.cafe/"&gt;lofi.cafe – beautiful beats with soothing backgrounds&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;I just found out about lofi.cafe. It’s a beautiful site that plays chill music that’s perfect for coding. The best thing is that it comes with beautiful videos you can put on your second monitor.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#contentful-corner"&gt;
  &lt;/a&gt;
  Contentful corner
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#adjust-how-your-references-look-in-contentful-building-a-custom-reference%C2%A0app"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.contentful.com/blog/2021/04/22/app-framework-tutorial-custom-reference-app/"&gt;Adjust how your references look in Contentful: building a custom reference app&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Did you ever wonder how to change the reference view in the Contentful web app? David wrote a tutorial explaining how to render a custom reference field using the App Framework.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rendering-linked-assets-and-entries-in-the-contentful-rich-text%C2%A0field"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.contentful.com/blog/2021/04/14/rendering-linked-assets-entries-in-contentful/"&gt;Rendering linked assets and entries in the Contentful Rich Text field&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;One of my favorite features of Contentful’s Rich Text is that you place other entries right next to your headlines and paragraphs. People asked us what’s the best way to render linked references. Salma explains how to render Rich Text references using our REST and GraphQL API on our blog.&lt;/p&gt;

&lt;p&gt;If you prefer video, Salma and I implemented a custom reference-rendering in a ridiculously “designed” React site. &lt;a href="https://www.youtube.com/watch?v=u2emRgzXTzw&amp;amp;t=4218s"&gt;Watch the recording&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learn-nextjs-with-this-new-contentful%C2%A0course"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=m9mNsYJbkNg&amp;amp;list=PL4cUxeGkcC9jClk8wl1yJcN3Zlrr8YSA1&amp;amp;index=2"&gt;Learn Next.js with this new Contentful course&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wVl6Gi-Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/fo9twyrwpveg/6nPYckuNfQd8gD3b4GbvZw/164c26eaf586501093b844a0078eb3dd/pasted_image_0__4_.png%3Ffm%3Dwebp%26q%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wVl6Gi-Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/fo9twyrwpveg/6nPYckuNfQd8gD3b4GbvZw/164c26eaf586501093b844a0078eb3dd/pasted_image_0__4_.png%3Ffm%3Dwebp%26q%3D1" alt="Illustration of the Next.js and Contentful intro and setup session"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There’s a new Contentful course on YouTube. The Net Ninja published a new and free series. If you want to get started with Next.js, this course is for you!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-apps-with%C2%A0nextjs"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.youtube.com/watch?v=VAEn4vRMJx8"&gt;Building apps with Next.js&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KiMuqpOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/fo9twyrwpveg/72t5Dn6TglmzVxdI6UoePL/3ea5529d693bff65c3b3a6bb330d3a66/Screenshot_2021-05-05_at_12.21.47.png%3Ffm%3Dwebp%26q%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KiMuqpOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/fo9twyrwpveg/72t5Dn6TglmzVxdI6UoePL/3ea5529d693bff65c3b3a6bb330d3a66/Screenshot_2021-05-05_at_12.21.47.png%3Ffm%3Dwebp%26q%3D1" alt="Screenshot of a next.js app building session stream"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our friend &lt;a href="https://twitter.com/dazulu?lang=en"&gt;Adrian Payne&lt;/a&gt; from &lt;a href="https://www.evernest.com/de/"&gt;Evernest&lt;/a&gt; gave an insightful session about the App Framework. He explained how they extend the Contentful UI using Next.js. I love seeing real-life examples like this!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#contentful-tip"&gt;
  &lt;/a&gt;
  Contentful tip
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EXHgKLD3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/fo9twyrwpveg/63V4Zm977zGXhYvderSlRh/17fbf0de0b2b56bb906175bf96d3b5b0/pasted_image_0__5_.png%3Ffm%3Dwebp%26q%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EXHgKLD3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.ctfassets.net/fo9twyrwpveg/63V4Zm977zGXhYvderSlRh/17fbf0de0b2b56bb906175bf96d3b5b0/pasted_image_0__5_.png%3Ffm%3Dwebp%26q%3D1" alt="Screenshot with a Contentful tip"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You might have noticed the red circle in your Contentful spaces. The Contentful changelog is now visible in our web app!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#changelog"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.contentful.com/developers/changelog/"&gt;Changelog&lt;/a&gt;
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#tags-for-graphql-and%C2%A0apps"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.contentful.com/developers/changelog/#tags-for-graphql-and-apps"&gt;Tags for GraphQL and apps&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;We have released new features for tags in the GraphQL Content API. They allow you to query assets and entries across content types that share a common tag.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#change-timezone-for-the-launch%C2%A0calendar"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.contentful.com/developers/changelog/#change-timezone-on-the-launch-calendar"&gt;Change timezone for the Launch calendar&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;We have updated the calendar page in Launch to change the timezone of the content calendar.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tasks-for-app%C2%A0identities"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.contentful.com/developers/changelog/#tasks-for-app-identities"&gt;Tasks for app identities&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;App identities can now access &lt;code&gt;Task&lt;/code&gt;. Apps are now equipped with an app access token that can read, create and update tasks.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#stay-safe-and-talk-with-you-next%C2%A0month"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Stay safe, and talk with you next month!&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;That’s it for May! Visit &lt;a href="https://www.contentful.com/developers/"&gt;our developer portal to stay up to date&lt;/a&gt;. It includes developer blog posts, videos and tutorials. Let us know via &lt;a href="https://www.contentful.com/slack/"&gt;Slack&lt;/a&gt; or &lt;a href="https://twitter.com/contentful"&gt;Twitter&lt;/a&gt; how we can continue to help you make awesome things. And don’t forget to show us what you’ve built on Twitter with #BuiltWithContentful!&lt;/p&gt;

&lt;p&gt;If you enjoyed this newsletter, &lt;a href="https://www.contentful.com/resources/dev-newsletter/"&gt;sign up to receive the next one in your inbox&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>contentful</category>
    </item>
    <item>
      <title>What Are Callback Functions In JavaScript?</title>
      <author>Amitav Mishra</author>
      <pubDate>Tue, 18 May 2021 15:05:21 +0000</pubDate>
      <link>https://dev.to/amitavmishra99/what-are-callback-functions-in-javascript-1141</link>
      <guid>https://dev.to/amitavmishra99/what-are-callback-functions-in-javascript-1141</guid>
      <description>&lt;p&gt;A callback is a function that is passed into another function as an argument which can be invoked later inside the function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#synchronous-callbacks"&gt;
  &lt;/a&gt;
  Synchronous callbacks
&lt;/h2&gt;

&lt;p&gt;Synchronous means the code statements execute immediately after one another in a sequential manner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;checkEvenOrOdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Even&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Odd&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;checkEvenOrOdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 56 is Even&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the callback is executing immediately and it is not waiting for any asynchronous operation to finish. That’s why it is synchronous callback.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#asynchronous-callbacks"&gt;
  &lt;/a&gt;
  Asynchronous callbacks
&lt;/h2&gt;

&lt;p&gt;If a callback is executing after an asynchronous operation has finished then it is an Asynchronous callback.&lt;/p&gt;

&lt;p&gt;Let’s see one example where we will take an order and print it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;takeOrder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Coffee&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tea&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;takeOrder&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Order is for: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Order is for: undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here in the &lt;code&gt;takeOrder&lt;/code&gt; function, the &lt;code&gt;setTimeout&lt;/code&gt; will run after 1 sec, and by that time the &lt;code&gt;console.log&lt;/code&gt; statement has already executed therefore printed value of order as &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we can resolve this issue if we can log our message to console only after the data has returned from &lt;code&gt;takeOrder&lt;/code&gt;. This can be done by passing a callback function to &lt;code&gt;takeOrder&lt;/code&gt; which will be invoked inside &lt;code&gt;takeOrder&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;takeOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Coffee&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tea&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;takeOrder&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Order is for: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;// Order is for: Tea&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here after 1 second the callback function will be called and the console statement will get executed with the correct order value.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: The output of &lt;code&gt;takeOrder&lt;/code&gt; function may differ in your case as we are using &lt;code&gt;Math.random()&lt;/code&gt; to decide order value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#handling-errors-with-callbacks"&gt;
  &lt;/a&gt;
  Handling errors with callbacks
&lt;/h2&gt;

&lt;p&gt;We can pass different callbacks for both success and failure scenarios.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;takeOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Coffee&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tea&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;failure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Order Not Available&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;takeOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Order is for: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#nested-callbacks"&gt;
  &lt;/a&gt;
  Nested callbacks
&lt;/h2&gt;

&lt;p&gt;Let’s see the order process one by one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;takeOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Coffee&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tea&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; is prepared&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;serveOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; is served&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;takeOrder&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Order is for: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;makeOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;orderStatus&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;orderStatus&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;serveOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;orderStatus&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;orderStatus&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Order is for: Coffee
Coffee is prepared
Coffee is served
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here &lt;code&gt;makeOrder&lt;/code&gt; is called when response from &lt;code&gt;takeOrder&lt;/code&gt; comes. Similarly &lt;code&gt;serveOrder&lt;/code&gt; is called when response from &lt;code&gt;makeOrder&lt;/code&gt; comes. Here we are nesting callbacks inside one another to execute functions in a sequence.&lt;/p&gt;

&lt;p&gt;If the nesting of callbacks increases then it is called a &lt;strong&gt;Callback hell&lt;/strong&gt;, where it is difficult to manage the callbacks and it reduces the readability of the code. Take a look at a sample callback hell.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;takeOrder&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;makeOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;serveOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;provideBill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;takeBill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="c1"&gt;// some more callbacks&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This callback hell can be fixed by using &lt;a href="https://jscurious.com/a-brief-guide-to-promises-in-javascript/"&gt;promise&lt;/a&gt; and &lt;a href="https://jscurious.com/understanding-async-and-await-in-javascript/"&gt;async/await&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are some built in methods available in JavaScript that accepts callback as argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Array.map()&lt;/span&gt;
&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// your code here&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;// setTimeout&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// your code here&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s see some other methods that accept callback.&lt;br&gt;
&lt;code&gt;Array.filter()&lt;/code&gt;, &lt;code&gt;Array.reduce()&lt;/code&gt;, &lt;code&gt;Array.find()&lt;/code&gt;, &lt;code&gt;Array.sort()&lt;/code&gt;, &lt;code&gt;Array.forEach()&lt;/code&gt;, &lt;code&gt;setInterval()&lt;/code&gt;, &lt;code&gt;addEventListener()&lt;/code&gt;, &lt;code&gt;Promise.then()&lt;/code&gt;, &lt;code&gt;Promise.catch()&lt;/code&gt; etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-may-also-like"&gt;
  &lt;/a&gt;
  You may also like
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jscurious.com/a-brief-guide-to-promises-in-javascript/"&gt;A brief guide to Promises in JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jscurious.com/understanding-async-and-await-in-javascript/"&gt;Understanding async and await in JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jscurious.com/20-javascript-shorthand-techniques-that-will-save-your-time/"&gt;20 JavaScript Shorthand Techniques that will save your time&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Thanks for you time&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
Find more of my writings on web development blogs at &lt;a href="https://jscurious.com"&gt;jscurious.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Integrate ESLint with your React project step by step (javascript)</title>
      <author>Brayan Arrieta</author>
      <pubDate>Tue, 18 May 2021 15:00:15 +0000</pubDate>
      <link>https://dev.to/brayanarrieta/integrate-eslint-with-your-react-project-step-by-step-javascript-50i7</link>
      <guid>https://dev.to/brayanarrieta/integrate-eslint-with-your-react-project-step-by-step-javascript-50i7</guid>
      <description>&lt;p&gt;First of all, we need to install ESLint&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i eslint --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install ESLint plugins&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx install-peerdeps --dev eslint-config-airbnb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: with a single command will install 6 plugins: &lt;code&gt;eslint-config-airbnb&lt;/code&gt;, &lt;code&gt;eslint-plugin-import&lt;/code&gt;, &lt;code&gt;eslint-plugin-react&lt;/code&gt;, &lt;code&gt;eslint-plugin-react-hooks&lt;/code&gt;, and &lt;code&gt;eslint-plugin-jsx-a11y&lt;/code&gt;. You can also install these plugins individually.&lt;/p&gt;

&lt;p&gt;Install babel eslint&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i --save-dev babel-eslint
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your "devDependencies" should look something similar to this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"devDependencies": {
    "babel-eslint": "^10.1.0",
    "eslint": "^7.2.0",
    "eslint-config-airbnb": "^18.2.0",
    "eslint-plugin-import": "^2.22.0",
    "eslint-plugin-jsx-a11y": "^6.3.1",
    "eslint-plugin-react": "^7.20.6",
    "eslint-plugin-react-hooks": "^4.0.0"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, create the file &lt;code&gt;.eslintrc.json&lt;/code&gt; at the root of the project. Paste below config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "env": {
        "browser": true,
        "commonjs": true,
        "es6": true,
    },
    "parser": "babel-eslint",
    "extends": [
        "eslint:recommended",
        "airbnb",
        "airbnb/hooks",
        "plugin:react/recommended",
        "plugin:import/errors",
        "plugin:import/warnings",
        "plugin:jsx-a11y/recommended"
    ],
    "globals": {
        "Atomics": "readonly",
        "SharedArrayBuffer": "readonly"
    },
    "parserOptions": {
        "ecmaFeatures": {
            "jsx": true
        },
        "ecmaVersion": 11,
        "sourceType": "module"
    },
    "settings": {
        "react": {
            "version": "detect"
        }
    },
    "plugins": [
        "react",
        "react-hooks"
    ],
    "rules": {
        "react/react-in-jsx-scope": "off",
        "react/jsx-filename-extension": [
            1,
            {
                "extensions": [
                    ".js",
                    ".jsx"
                ]
            }
        ],
        "react/display-name": 1
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, install &lt;a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint"&gt;ESLint extension&lt;/a&gt; for VSCode, After that need to reload the VSCode window once to get proper linting.*&lt;/p&gt;

&lt;p&gt;ESLint will automatically start detecting errors/warnings in &lt;code&gt;.js&lt;/code&gt; and &lt;code&gt;.jsx&lt;/code&gt; files. If that's not the case then either your project has no linting errors or ESLint is not properly set up. To test if linting works run eslint command in the terminal with folder path i.e. &lt;code&gt;eslint src/**&lt;/code&gt; and notice output.&lt;/p&gt;

&lt;p&gt;To disable the linting of some files/folders you can create a &lt;code&gt;.eslintignore&lt;/code&gt; at the root of the project.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.eslintignore&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node_modules
dist
coverage
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, you can also add linting to &lt;code&gt;scripts&lt;/code&gt; in &lt;code&gt;package.json&lt;/code&gt; as a part of your pipeline process&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"scripts": {
    "lint": "eslint . --ext js,jsx",
    "lint:fix": "eslint . --ext js,jsx --fix"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me know in the comments recommendations or something else that can be added, I will update the post based on that thanks! 👍&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>eslint</category>
      <category>programming</category>
    </item>
    <item>
      <title>16 VS Code Shortcuts for Faster Coding</title>
      <author>Suraj Vishwakarma</author>
      <pubDate>Tue, 18 May 2021 14:46:26 +0000</pubDate>
      <link>https://dev.to/basecampxd/16-vs-code-shortcuts-for-faster-coding-4k5a</link>
      <guid>https://dev.to/basecampxd/16-vs-code-shortcuts-for-faster-coding-4k5a</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Microsoft's VS code is one of the most popular text/code editors available on the internet. VS Code is an IDE(Integrated Development Environment), We can make it more powerful by using the extensions and it's very easy to customize. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s4LromC6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4tr39b0cn96i8og1859m.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s4LromC6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4tr39b0cn96i8og1859m.gif" alt="Coding"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It comes with emmet pre-built which no other text editor does and it also allows us to tweak into its code so we can even modify its environment variables according to our preferences. It has a large collection of extensions which you can use for your requirement. &lt;/p&gt;

&lt;p&gt;Today we are going to look into shortcuts of VS code that will help you to code more effectively.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#keyboard-shortcuts"&gt;
  &lt;/a&gt;
  Keyboard Shortcuts
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#1-command-palette"&gt;
  &lt;/a&gt;
  1. Command Palette
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Keyboard Shortcut: &lt;code&gt;Ctrl+Shift+P&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Access all available commands based on your current context.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WxqEl6Er--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pr3cpv6atedsg5pgfch3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WxqEl6Er--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/pr3cpv6atedsg5pgfch3.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All of the commands are in the Command Palette with the associated key binding (if it exists). If you forget a keyboard shortcut, use the Command Palette to help you out.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#2-quick-open"&gt;
  &lt;/a&gt;
  2. Quick Open
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Keyboard Shortcut: &lt;code&gt;Ctrl+P&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Quickly open files.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FhA-nGZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nlen9uesslrdkc2iomh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FhA-nGZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nlen9uesslrdkc2iomh.gif" alt="QuickOpen"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-errors-and-warnings"&gt;
  &lt;/a&gt;
  3. Errors and warnings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Keyboard Shortcut: &lt;code&gt;Ctrl+Shift+M&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Quickly jump to errors and warnings in the project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sayb9pza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/Errors_Warnings.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sayb9pza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/Errors_Warnings.gif" alt="Errors and warnings"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#4-change-language-mode"&gt;
  &lt;/a&gt;
  4. Change language mode
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Keyboard Shortcut: &lt;code&gt;Ctrl+K M&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Persist the new language mode for that file type&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kCM91BLr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/change_syntax.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kCM91BLr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/change_syntax.gif" alt="Errors and warnings"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#5-change-your-theme"&gt;
  &lt;/a&gt;
  5. Change your theme
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Keyboard Shortcut: &lt;code&gt;Ctrl+K Ctrl+T&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;You can install more themes from the VS Code extension Marketplace.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LQ43jD8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/PreviewThemes.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LQ43jD8q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/PreviewThemes.gif" alt="Change your theme"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#6-toggle-sidebar"&gt;
  &lt;/a&gt;
  6. Toggle Sidebar
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Keyboard Shortcut: &lt;code&gt;Ctrl+B&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Show and hide the status bar.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YmBYZA7G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/toggle_side_bar.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YmBYZA7G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/toggle_side_bar.gif" alt="Toggle Sidebar"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#7-zen-mod"&gt;
  &lt;/a&gt;
  7. Zen mod
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Keyboard Shortcut: &lt;code&gt;Ctrl+K Z&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Enter distraction-free Zen mode.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S3-BsUtI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/zen_mode.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S3-BsUtI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/zen_mode.gif" alt="Zen mod"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#8-side-by-side-editing"&gt;
  &lt;/a&gt;
  8. Side by side editing
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Keyboard Shortcut: &lt;code&gt;Ctrl+\&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;You can also drag and drop editors to create new editor groups and move editors between groups.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yrQJLpNB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/split_editor.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yrQJLpNB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/split_editor.gif" alt="Side by side editing"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#9-all-selection"&gt;
  &lt;/a&gt;
  9. All Selection
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Keyboard Shortcut: &lt;code&gt;Ctrl+Shift+L&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;You can add additional cursors to all occurrences of the current selection.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RMgKaCbg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/add_cursor_current_selection.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RMgKaCbg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/add_cursor_current_selection.gif" alt="All Selection"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#10-next-selection"&gt;
  &lt;/a&gt;
  10. Next Selection
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Keyboard Shortcut: &lt;code&gt;Ctrl+D&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;This only selects the next occurrence after the one you selected so you can add selections one by one.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j1NqeCfE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/add_cursor_current_selection_one_by_one.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j1NqeCfE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/add_cursor_current_selection_one_by_one.gif" alt="Next Selection"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#11-copy-line-up-down"&gt;
  &lt;/a&gt;
  11. Copy line up/ down
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Keyboard Shortcut: &lt;code&gt;Shift+Alt+Up&lt;/code&gt; or &lt;code&gt;Shift+Alt+Down&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Copy the whole line and paste it into the line above or below.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4ZSj9zge--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/copy_line_down.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ZSj9zge--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/copy_line_down.gif" alt="Copy line up/ down"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#12-move-line-up-and-down"&gt;
  &lt;/a&gt;
  12. Move line up and down
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Keyboard Shortcut: &lt;code&gt;Alt+Up&lt;/code&gt; or &lt;code&gt;Alt+Down&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Move the whole line above and below as required.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pB5tyF6e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/move_line.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pB5tyF6e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/move_line.gif" alt="Copy line up/ down"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#13-code-formatting"&gt;
  &lt;/a&gt;
  13. Code formatting
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Currently selected source code: &lt;code&gt;Ctrl+K Ctrl+F&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Whole document format: &lt;code&gt;Shift+Alt+F&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Format your untidy code to clean your code for more readability.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6yIAWxaP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/code_formatting.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6yIAWxaP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/code_formatting.gif" alt="Code formatting"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#14-open-markdown-preview"&gt;
  &lt;/a&gt;
  14. Open Markdown preview
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Keyboard Shortcut: &lt;code&gt;Ctrl+Shift+V&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;See Markdown preview for markdown file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q-olvgHb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/markdown-preview.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q-olvgHb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/markdown-preview.png" alt="Open Markdown preview"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#15-side-by-side-markdown-edit-and-preview"&gt;
  &lt;/a&gt;
  15. Side by side Markdown edit and preview
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Keyboard Shortcut: &lt;code&gt;Ctrl+K V&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;The preview and editor will synchronize with your scrolling in either view.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V86OssOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/markdown-preview-side-by-side.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V86OssOu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/markdown-preview-side-by-side.png" alt="Open Markdown preview"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#16-intellisense"&gt;
  &lt;/a&gt;
  16. IntelliSense
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Keyboard Shortcut: &lt;code&gt;Ctrl+Space&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;You can view available methods, parameter hints, short documentation, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ts6UF_OO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/intellisense.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ts6UF_OO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/intellisense.gif" alt="IntelliSense"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#connect-with-me"&gt;
  &lt;/a&gt;
  🔗 Connect with me:
&lt;/h1&gt;

&lt;p&gt;Currently, on Twitter, I am posting about "How to write and grow blog?". If you want to write a more effective blog with tips, consider the follow button on Twitter.&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;With this completing 500 tweets🥳.&lt;br&gt;&lt;br&gt;Thank you to everyone🤩.&lt;br&gt;&lt;br&gt;As helping more people, I am going to tweet about writing and growing blog especially technical, in the coming days🔥.&lt;br&gt;&lt;br&gt;So if you haven't followed me, please consider🤗.&lt;/p&gt;— Suraj Vishwakarma (&lt;a class="mentioned-user" href="https://dev.to/surajondev"&gt;@surajondev&lt;/a&gt;
) &lt;a href="https://twitter.com/surajondev/status/1394212368675000321?ref_src=twsrc%5Etfw"&gt;May 17, 2021&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;&lt;a href="https://twitter.com/surajondev"&gt;&lt;strong&gt;Twitter&lt;/strong&gt;&lt;/a&gt; &lt;a href="https://github.com/surajondev"&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#last-note"&gt;
  &lt;/a&gt;
  Last Note
&lt;/h1&gt;

&lt;p&gt;I hope this post will help you write code effectively. Thank you for reading the post.&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>productivity</category>
      <category>watercooler</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to create currency converter in javascript</title>
      <author>Stackfindover</author>
      <pubDate>Tue, 18 May 2021 14:42:06 +0000</pubDate>
      <link>https://dev.to/stackfindover/how-to-create-currency-converter-in-javascript-3h26</link>
      <guid>https://dev.to/stackfindover/how-to-create-currency-converter-in-javascript-3h26</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Hello, guys In this tutorial we will try to solve the mentioned query. and also we will learn how to create a currency converter in JavaScript&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#common-query"&gt;
  &lt;/a&gt;
  Common Query
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;How to make a currency converter&lt;/li&gt;
&lt;li&gt;How to use frankfurter free API&lt;/li&gt;
&lt;li&gt;How to create API based application&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#what-is-currency-converter"&gt;
  &lt;/a&gt;
  What is Currency Converter?
&lt;/h3&gt;

&lt;p&gt;A currency converter is a software, that is &lt;strong&gt;&lt;em&gt;designed to convert a currency into another&lt;/em&gt;&lt;/strong&gt; to check its corresponding value. They do so by connecting to a database of current currency exchange value.&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Exchange_rate"&gt;Click here to Know more&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#currency-converter-using-javascript-step-by-step-guide"&gt;
  &lt;/a&gt;
  Currency Converter Using JavaScript Step By Step Guide
&lt;/h3&gt;

&lt;p&gt;To make a currency converter in javascript we use frankfurter API this is an open-source, simple, and lightweight API for current and historical foreign exchange (forex) rates published by the European Central Bank.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GyGfP9nn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zj854r4oaeo8uz6f2s04.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GyGfP9nn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zj854r4oaeo8uz6f2s04.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.frankfurter.app/docs/"&gt;Read more about frankfurter API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, we need to create two files &lt;strong&gt;index.html&lt;/strong&gt; and &lt;strong&gt;style.css&lt;/strong&gt; then we need to do code for it.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step1"&gt;
  &lt;/a&gt;
  Step:#1
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Add below code inside index.html&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;How to create currency converter&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"ie=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.googleapis.com/css2?family=IBM+Plex+Sans&amp;amp;display=swap"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"currency-row-outer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"currency-converter"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Currency Converter&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"field grid-50-50"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"colmun col-left"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-input"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"00000"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"colmun col-right"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"select"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;select&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"currency"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"currency"&lt;/span&gt; &lt;span class="na"&gt;onchange=&lt;/span&gt;&lt;span class="s"&gt;"updatevalue()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/select&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"field grid-50-50"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"colmun col-left"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"form-input"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"output"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"00000"&lt;/span&gt; &lt;span class="na"&gt;disabled&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"colmun col-right"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"select"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;select&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"currency"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"currency"&lt;/span&gt; &lt;span class="na"&gt;onchange=&lt;/span&gt;&lt;span class="s"&gt;"updatevalue()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/select&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;


  &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;select&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.currency&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;output&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://api.frankfurter.app/currencies&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;


    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;entries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;option value="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt; : &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/option&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;option value="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt; : &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/option&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;



    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;updatevalue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currency1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currency2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currency1&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;currency2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currency1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currency2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Choose Diffrent Currency&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currency1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currency2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;api.frankfurter.app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/latest?amount=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;from=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;currency1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;to=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;currency2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rates&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
          &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rates&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step2"&gt;
  &lt;/a&gt;
  Step:#2
&lt;/h3&gt;

&lt;p&gt;Then we need to add code for &lt;strong&gt;style.css&lt;/strong&gt; which code I provide in the below screen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/*Start Currency Converter*/&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'IBM Plex Sans'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow-x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.currency-row-outer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.currency-converter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;480px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#363636&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.3em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#dbdbdb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#00000057&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inset&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0.0625em&lt;/span&gt; &lt;span class="m"&gt;0.125em&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;5%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;-webkit-appearance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.field.grid-50-50&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.currency-converter&lt;/span&gt; &lt;span class="nc"&gt;.colmun&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;select&lt;/span&gt;&lt;span class="nc"&gt;.currency&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#3273dc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.currency-converter&lt;/span&gt; &lt;span class="nc"&gt;.select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.currency-converter&lt;/span&gt; &lt;span class="nc"&gt;.select&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-45deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.525em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.525em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.125em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-0.4375em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.select&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#3273dc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.select&lt;/span&gt;&lt;span class="nd"&gt;:hover::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#363636&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#currency-converter-in-javascript-video-output"&gt;
  &lt;/a&gt;
  Currency converter in javascript video output:
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/IV23QBgC41U"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-may-like-this-also"&gt;
  &lt;/a&gt;
  You may like this also
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://blog.stackfindover.com/shortcut-keys-of-computer-a-to-z/"&gt;Shortcut Keys of Computer A to Z&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.stackfindover.com/how-to-publish-a-website-for-free/"&gt;How to publish a website for free&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Random Art Generator: Dots &amp; Rings</title>
      <author>Mads Stoumann</author>
      <pubDate>Tue, 18 May 2021 14:41:42 +0000</pubDate>
      <link>https://dev.to/madsstoumann/random-art-generator-dots-rings-3ca3</link>
      <guid>https://dev.to/madsstoumann/random-art-generator-dots-rings-3ca3</guid>
      <description>&lt;p&gt;If you like random art, I've just released a new tool for generating random rings and dots (in &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;With the editor, you can tweak a lot of parameters (Click the “Random!”-button to get started):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--prhIBMOV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqk33xqq9ya9l1ch4nqy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--prhIBMOV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqk33xqq9ya9l1ch4nqy.png" alt="Editor"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And render art like these examples: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4s78jUK5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nlvfbt47s5wqh0cno0sw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4s78jUK5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nlvfbt47s5wqh0cno0sw.png" alt="image1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1i9f-41N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4do76jmyojg8a66ywbc5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1i9f-41N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4do76jmyojg8a66ywbc5.png" alt="image2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0vqA1-Z6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9tdje0g3b1y9pzeayrv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0vqA1-Z6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9tdje0g3b1y9pzeayrv.png" alt="image3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_tsonSEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vp52mx2n159j7vatx2rk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_tsonSEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vp52mx2n159j7vatx2rk.png" alt="image4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you've made a piece you'd like to save, click on “Export", chose a file format, then click on “Save to Image”.&lt;/p&gt;

&lt;p&gt;It's on Codepen (open fullscreen for best experience):&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/stoumann/embed/dyvprJM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>javascript</category>
      <category>showdev</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Evolution of API and Microservice ecosystem: part 1</title>
      <author>Jayesh Bapu Ahire</author>
      <pubDate>Tue, 18 May 2021 14:30:04 +0000</pubDate>
      <link>https://dev.to/hypertrace/evolution-of-api-and-microservice-ecosystem-part-1-399a</link>
      <guid>https://dev.to/hypertrace/evolution-of-api-and-microservice-ecosystem-part-1-399a</guid>
      <description>&lt;p&gt;In this first installment in a series on the evolution of API and microservices ecosystem, we will learn about how microservices and APIs became industry standards and what are different benefits microservices offer. We will explore different challenges with this ecosystem and how to solve them in the second part of this series. &lt;/p&gt;

&lt;p&gt;Most of the tech giants including companies like Amazon, Netflix, started to build their systems using a monolithic architecture because back in the time it was much faster to set up a monolith and get the business moving. But over time as the product matures or fat growth happens, with growing systems the code gets more and more complicated. They all faced this problem and looked at microservices as a solution. One of the biggest benefits of microservices is that each microservice can be developed, scaled, and deployed independently. You can replace or upgrade any part of the system without affecting the whole system. &lt;/p&gt;

&lt;p&gt;But, &lt;em&gt;what is microservice architecture?&lt;/em&gt; &lt;a href="https://www.martinfowler.com/articles/microservices.html"&gt;As called out by James Lewis and Martin Fowler&lt;/a&gt;, The term "Microservice Architecture" has sprung up over the last few years to describe a particular way of designing software applications as suites of independently deployable services. While there is no precise definition of this architectural style, there are certain common characteristics around organization around business capability, automated deployment, intelligence in the endpoints, and decentralized control of languages and data. &lt;br&gt;
I hope it’s not that hard to guess but these microservices talk to each other via APIs and two of the most commonly used protocols are HTTP request-response with resource APIs and lightweight messaging. Although as I mentioned above, companies like Netflix and Amazon have been using microservices for quite a long time, many small organizations have also started adopting API first or microservice driven architectures recently, because &lt;a href="https://www.infoq.com/articles/web-apis-business-perspective/"&gt;APIs have become the heart of the global tech industry in the past decade.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rise-of-microservices"&gt;
  &lt;/a&gt;
  Rise of Microservices
&lt;/h2&gt;

&lt;p&gt;Let’s dive more into the origins of APIs and Microservices as they share a common origin story. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rise of service-oriented architectures&lt;/li&gt;
&lt;li&gt;Rise of cloud computing and managed services&lt;/li&gt;
&lt;li&gt;Rise of decentralization movement&lt;/li&gt;
&lt;li&gt;Rise of Agile movement&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#rise-of-serviceoriented-architectures"&gt;
  &lt;/a&gt;
  Rise of service-oriented architectures
&lt;/h3&gt;

&lt;p&gt;As we all know, building distributed systems is hard and managing them is even harder. The rise of the web back in the days opened the doors to innovate the way we build distributed systems and that’s where Service based architecture came into the picture. SOA was defined as a style of multi-tier computing that helps organizations share logic and data among multiple applications and usage modes. [as defined by &lt;a href="https://www.gartner.com/en/documents/302868"&gt;Gartner&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;Though a failed movement back in the time, SOA surely helped a lot in initiating microservice movements, and even organizations like Netflix and Amazon were calling their architectures SOAs before the microservice movement. Due to the centralized nature of ESB topology and some other reasons, SOAs increased complexity and introduced bottlenecks, and the costs of implementing an SOA infrastructure (based on the ESB, registry, and service platform template) were excessive.  &lt;/p&gt;

&lt;p&gt;Due to these problems, people started looking for better alternatives.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rise-of-cloud-computing-and-managed-services"&gt;
  &lt;/a&gt;
  Rise of cloud computing and managed services
&lt;/h3&gt;

&lt;p&gt;The rise of RESTful Web APIs arose as a lighter-weight alternative to SOAP services. -- a style of interconnecting applications that had evolved organically on the Web --. The distributed nature of cloud infrastructure challenged the placement of the centralized ESB topology.&lt;br&gt;
Everyone started adopting microservices due to the benefits they provided and here we are today looking at complex modern architectures. Cloud computing helped in removing barriers for deployment and provided a variety of new use-cases for APIs. It worked out as a novel platform for deploying more granular API-fronted application components. Cloud services provided another reason to move towards more service-oriented and modular deployment architectures. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rise-of-decentralization-moment"&gt;
  &lt;/a&gt;
  Rise of decentralization moment
&lt;/h3&gt;

&lt;p&gt;As we discussed earlier, at one point in time, service-oriented computing became an increasingly popular paradigm for modeling and building distributed systems in open and heterogeneous environments. However, proposed service-oriented architectures are typically based on centralized components, such as service registries or service brokers, that introduce reliability, management, and performance issues. &lt;/p&gt;

&lt;p&gt;During this whole time, the capabilities and scale of distributed systems have increased. The trend towards decentralization in both the system itself as well as the supporting organization started to catch up and the decentralization moment started. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rise-of-agile-moment"&gt;
  &lt;/a&gt;
  Rise of Agile moment
&lt;/h3&gt;

&lt;p&gt;In his blog post titled “&lt;a href="http://www.codingthearchitecture.com/2013/09/03/what_is_agile_software_architecture.html"&gt;Coding the Architecture&lt;/a&gt;”, &lt;a href="https://twitter.com/simonbrown"&gt;Simon Brown&lt;/a&gt; pointed out that agile architecture does not naturally emerge from agile development practices. Rather, it must be consciously sought. Note that his description of agile software architecture is a perfect match for microservice architecture. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If we look at the characteristics of agile software architecture, we tend to think of something that is built using a collection of small, loosely coupled components/services that collaborate together to satisfy an end-goal. This style of architecture provides agility in a number of ways. Small, loosely coupled components/services can be built, modified, and tested in isolation, or even ripped out and replaced depending on how requirements change. This style of architecture also lends itself well to a very flexible and adaptable deployment model, since new components/services can be added and scaled if needed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The agile software movement arose as a reaction to the same centralized approach to enterprise IT that hampered the SOA movement. Agile’s popularity and success in software development led to the CI/CD approach to software deployment, followed by the cultural philosophy of the DevOps movement. Between CI/CD, DevOps, agile development, and progressive delivery, the software delivery train also started speeding up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-microservices"&gt;
  &lt;/a&gt;
  Benefits of Microservices
&lt;/h2&gt;

&lt;p&gt;Now that we have gone through the reasons behind the rise of Microservices, Let’s try to understand what business value microservices provide. &lt;/p&gt;

&lt;p&gt;The main reason that drives the move to microservices in any organization is speed and agility at scale which helps in software delivery. Reducing cross-team coordination, building diverse language applications, flexible deployments, enhanced manageability are some of the additional perks that organizations with microservice architectures enjoy. &lt;/p&gt;

&lt;p&gt;Many of the benefits which come with Microservice architectures are mostly due to the API-first nature of microservices and here are a few of them: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Composability:&lt;/strong&gt; When services are published through an API, it is easier to use them in multiple business contexts to assist in various business processes&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Testability:&lt;/strong&gt; When services are accessible over a network boundary, it is easier to isolate tests and exercise individual components of the system&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Scalability:&lt;/strong&gt; Each microservice can be scaled autonomously without disrupting the other microservices that comprise the application. When demand increases, you only need to upgrade or divert more resources to the microservice affected by the increasing demands. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Evolvability:&lt;/strong&gt; When services are exposed through an API, implementation details can be hidden from the consumer, making it easier to change components without impacting dependent parts of the system &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Comprehensibility:&lt;/strong&gt; When a complex system is broken down into modular APIs, it is easier to understand the overall business functionality of the system, which helps in both designing and maintaining the system&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Automatability:&lt;/strong&gt; Along with the data plane API benefits above, control plane APIs allow automation in the deployment and management of microservices, thus increasing the velocity of software delivery&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But as we know &lt;em&gt;with great power comes great responsibility&lt;/em&gt; and the same thing applies to microservices and API ecosystems as well. These complex systems bring a lot of challenges with them and we will discuss those challenges in the next part of this blog post. &lt;/p&gt;

&lt;p&gt;Until then, if your organization is using microservice architecture and exploring Observability solutions, feel free to check out our Open Source Observability platform &lt;a href="https://github.com/hypertrace/hypertrace"&gt;Hypertrace&lt;/a&gt;. If you are in transition and want to learn more about Observability or want to contribute to Hypertrace, &lt;a href="https://bit.ly/hypertrace-community-slack"&gt;join our slack community&lt;/a&gt; to interact with folks who have been through this transition or going through this transition. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.martinfowler.com/articles/microservices.html"&gt;https://www.martinfowler.com/articles/microservices.html&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.infoq.com/articles/web-apis-business-perspective/"&gt;https://www.infoq.com/articles/web-apis-business-perspective/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gartner.com/en/documents/302868"&gt;https://www.gartner.com/en/documents/302868&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.infoworld.com/article/3080611/learning-from-soa-5-lessons-for-the-microservices-era.html"&gt;https://www.infoworld.com/article/3080611/learning-from-soa-5-lessons-for-the-microservices-era.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.broadcom.com/doc/microsurfaces-the-role-of-apis-in-a-microservice-architecture"&gt;https://docs.broadcom.com/doc/microsurfaces-the-role-of-apis-in-a-microservice-architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.thoughtworks.com/insights/blog/microservices-nutshell"&gt;https://www.thoughtworks.com/insights/blog/microservices-nutshell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://link.springer.com/article/10.1007/s12083-009-0062-6"&gt;https://link.springer.com/article/10.1007/s12083-009-0062-6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.infoworld.com/article/3075880/microservice-architecture-is-agile-software-architecture.html"&gt;https://www.infoworld.com/article/3075880/microservice-architecture-is-agile-software-architecture.html&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>cloud</category>
      <category>architecture</category>
      <category>kubernetes</category>
      <category>agile</category>
    </item>
    <item>
      <title>Writing my first C# MVC Unit Test</title>
      <author>Seth A Burleson</author>
      <pubDate>Tue, 18 May 2021 14:29:12 +0000</pubDate>
      <link>https://dev.to/sbrevolution5/writing-my-first-c-mvc-unit-test-13ah</link>
      <guid>https://dev.to/sbrevolution5/writing-my-first-c-mvc-unit-test-13ah</guid>
      <description>&lt;p&gt;After much research and thought, I'm diving in today with a very basic C# unit test, just to get my feet wet with Test Driven Development.  The purpose of this test, is to see if the home index will return 2 blogs.  It should be very simple, and I honestly rarely expect this test to break, but you've got to start somewhere!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-setup"&gt;
  &lt;/a&gt;
  The setup.
&lt;/h1&gt;

&lt;p&gt;I've Installed the xUnit extension into VS2019, and I'm adding a new xUnit Test Project to my solution.  Since this is for my blog project, I'll name it BlogTests, and put it in my project folder.  This creates a sample test with nothing in it at the moment, but we will fix that shortly.   &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#autogenerated-tests"&gt;
  &lt;/a&gt;
  Auto-generated "Tests"
&lt;/h1&gt;

&lt;p&gt;One of the great things about VS2019 is that it can generate a "test" for you.  This test doesn't do anything, but it gives us a starting point.  Over in the main project's home controller, if we right click inside the index action (you can right click inside the overall class to make more than one test at once if needed) and go to "Create Unit tests" we get a lovely pop-up that gives us some options.  If its not already selected, make sure the Test Framework is xUnit.net 2.0, then select your test project, and &lt;code&gt;&amp;lt;New Test File&amp;gt;&lt;/code&gt; before you hit OK.  I'm having it assert failure for all tests right now, since there isn't anything going on just yet.  &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#mocking-the-database"&gt;
  &lt;/a&gt;
  Mocking the database
&lt;/h1&gt;

&lt;p&gt;With EFCore, we actually don't have to make a Mock database, we will instead use the local database for testing.   It was rather difficult to get the Mock database working with EFCore, and in my research it turned out to be unnecessary.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#writing-the-test-itself"&gt;
  &lt;/a&gt;
  Writing the test itself
&lt;/h1&gt;

&lt;p&gt;Once we have our Mock Database, we are ready to write the test.  Lets use a more descriptive name than "Index Test".  There are 3 parts considered standard to a test name:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The behavior being tested&lt;/li&gt;
&lt;li&gt;The constraints&lt;/li&gt;
&lt;li&gt;The expected behavior&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I'm going to use "Index_ReturnsAViewResult_WithAPagedListOfFiveBlogs" as the name.  Its a mouthful, but if my test fails I will immediately know what failed.&lt;/p&gt;

&lt;p&gt;There are now 3 parts to our test: Arrange, Act, and Assert.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#arrange"&gt;
  &lt;/a&gt;
  Arrange
&lt;/h2&gt;

&lt;p&gt;This step involves putting the data in the correct spot, and performing any setup.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var optionsBuilder = new DbContextOptionsBuilder&amp;lt;ApplicationDbContext&amp;gt;();
            optionsBuilder.UseNpgsql(Connection.GetConnectionString(_configuration));
            var _dbContext = new ApplicationDbContext(optionsBuilder.Options);

            var controller = new HomeController(null,_dbContext);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The optionsBuilder is used to configure options for the ApplicationDbContext, which then is passed to the controller.  I did not pass the controller a logger at this point, since I am not using the logger to test.  Your options builder should take the same arguments that are used in startup.cs to set up your database.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#act"&gt;
  &lt;/a&gt;
  Act.
&lt;/h2&gt;

&lt;p&gt;This part is very simple, just get a result from the controller&lt;br&gt;
&lt;code&gt;var result = await controller.Index(1); //passing page 1&lt;/code&gt;&lt;br&gt;
I'm passing a variable because my site is using X.PagedList to paginate (see &lt;a href="https://dev.to/sbrevolution5/3-steps-to-paging-in-asp-net-blog-part-3-371m"&gt;this post&lt;/a&gt;)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#assert"&gt;
  &lt;/a&gt;
  Assert
&lt;/h2&gt;

&lt;p&gt;And here's the meat and potatoes, We're going to check that the type is ViewResult, and the model is based on an IPagedList.  Then finally, we ensure that the model only includes 5 items for this page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var viewResult = Assert.IsType&amp;lt;ViewResult&amp;gt;(result);
            var model = Assert.IsAssignableFrom&amp;lt;IPagedList&amp;lt;Blog&amp;gt;&amp;gt;(viewResult.Model);
            Assert.Equal(5, actual: model.Count());
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run a test, we use a series of "assert" statements.  If any of these fail, we will recieve a failure on a test.  This is where we're going to stop for now, but as a first experiment in testing, I'd call this a success.  &lt;/p&gt;

&lt;p&gt;My main struggle at the moment is coming up with the right kind of tests.  Unlike working with a very math based console app, I don't feel like I have much to test within the controllers.  &lt;/p&gt;

&lt;p&gt;What kinds of tests do you do with MVC apps? &lt;/p&gt;

</description>
      <category>testing</category>
      <category>csharp</category>
      <category>dotnet</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Keep your AWS Kubernetes costs in check with intelligent allocation</title>
      <author>CAST AI</author>
      <pubDate>Tue, 18 May 2021 14:25:24 +0000</pubDate>
      <link>https://dev.to/castai/keep-your-aws-kubernetes-costs-in-check-with-intelligent-allocation-2l8l</link>
      <guid>https://dev.to/castai/keep-your-aws-kubernetes-costs-in-check-with-intelligent-allocation-2l8l</guid>
      <description>&lt;p&gt;Traditional cost allocation and Kubernetes are like oil and water. Surely, containerized environments make a lot of things easier. But not this one.&lt;/p&gt;

&lt;p&gt;Luckily, there are a few things you can do to &lt;strong&gt;allocate AWS Kubernetes costs smarter&lt;/strong&gt; and keep them in check.&lt;/p&gt;

&lt;p&gt;Read on to find out what they are and finally hold the reins over your cloud expenses.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you’ll find inside:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;You’re not the only one getting confused by Kubernetes costs, here’s why&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Calculating shared costs is a nightmare&lt;/li&gt;
&lt;li&gt;Containers are very dynamic&lt;/li&gt;
&lt;li&gt;Dealing with multiple cost centers is hard&lt;/li&gt;
&lt;li&gt;Autoscaling leads to more confusion&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Allocating AWS Kubernetes costs, the smart way&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Use container classes&lt;/li&gt;
&lt;li&gt;Break costs down for labeling and tagging&lt;/li&gt;
&lt;li&gt;Establish labeling and namespace standards&lt;/li&gt;
&lt;li&gt;Split and allocate shared costs&lt;/li&gt;
&lt;li&gt;Count in cluster costs beyond the core&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;How to apply all of this and win the cost allocation game&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#youre-not-the-only-one-getting-confused-by-kubernetes-costs-heres-why"&gt;
  &lt;/a&gt;
  You’re not the only one getting confused by Kubernetes costs, here’s why
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mRFc50SK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5844rai8vp9m5zitdu79.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mRFc50SK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5844rai8vp9m5zitdu79.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Getting the hang of &lt;a href="https://cast.ai/blog/kubernetes-cost-estimation-4-problems-and-how-to-solve-them/"&gt;Kubernetes cost estimation&lt;/a&gt;, allocation, and reporting is something every team mindful of its expenses aspires to. &lt;/p&gt;

&lt;p&gt;But why is it so hard? Here are 4 Kubernetes cost challenges we all know all too well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-calculating-shared-costs-is-a-nightmare"&gt;
  &lt;/a&gt;
  1. Calculating shared costs is a nightmare
&lt;/h3&gt;

&lt;p&gt;Kubernetes clusters are in essence shared services multiple teams run to hold multiple containers and apps. Once a team deploys a container, it uses some of the cluster’s resources – so, you need to pay for each and every server instance that is part of your cluster. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This doesn’t sound so hard until you try making that work with, say, three teams working on ten unique applications. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Which application or project uses the biggest chunk of your cluster resources? You can’t really tell, because all of these projects use multiple containers. &lt;/p&gt;

&lt;p&gt;Knowing how many resources an individual container uses from a specific server is next to impossible. And that’s what makes allocating Kubernetes costs so challenging.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-containers-are-very-dynamic"&gt;
  &lt;/a&gt;
  2. Containers are very dynamic
&lt;/h3&gt;

&lt;p&gt;A container’s lifespan lasts only &lt;a href="https://www.datadoghq.com/container-report/"&gt;one day&lt;/a&gt;. Compare that to how long your virtual machine lasts. It’s a speck in time.&lt;/p&gt;

&lt;p&gt;The dynamic character of your containerized environment makes calculating costs even more complex. You need to come up with a cost management system that can handle it. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-dealing-with-multiple-cost-centers-is-hard"&gt;
  &lt;/a&gt;
  3. Dealing with multiple cost centers is hard
&lt;/h3&gt;

&lt;p&gt;It’s likely that not all development costs come from the DevOps budget and you have a number of cost centers running across your company. &lt;/p&gt;

&lt;p&gt;While your product team develops core applications, &lt;strong&gt;another team might launch a shadow IT project that consumes resources.&lt;/strong&gt; You need to consider this especially if your business has multiple digital services and each comes with its own teams and budgets. &lt;/p&gt;

&lt;p&gt;When multiple teams use one cluster, identifying which one is responsible for which part of the bill is a hard nut to crack. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-autoscaling-leads-to-more-confusion"&gt;
  &lt;/a&gt;
  4. Autoscaling leads to more confusion
&lt;/h3&gt;

&lt;p&gt;Teams often use the three built-in &lt;a href="https://cast.ai/blog/guide-to-kubernetes-autoscaling-for-cloud-cost-optimization/"&gt;Kubernetes autoscaling&lt;/a&gt; mechanisms that reduce the waste (and cost) of running clusters. But autoscaling has an impact on your cost calculations.&lt;/p&gt;

&lt;p&gt;For example, &lt;strong&gt;Vertical Pod Autoscaler (VPA)&lt;/strong&gt; automatically adjusts requests and limits configuration to eliminate overhead. It changes the number of requests on a container, increasing and reducing its resource allocation. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Horizontal Pod Autoscaler (HPA)&lt;/strong&gt; focuses on scaling out to get the best combo of CPU or RAM allocated to an instance. It changes the number of containers all the time. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-does-it-matter-heres-an-example-scenario"&gt;
  &lt;/a&gt;
  Why does it matter? Here’s an example scenario:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Imagine that you have three webserver containers running during the night. Everything works well. &lt;/li&gt;
&lt;li&gt;But there are some peak hours during the day – so HPA scales from 3 to 50 containers. &lt;/li&gt;
&lt;li&gt;When lunchtime comes and demand is lower, it scales down. &lt;/li&gt;
&lt;li&gt;And then it brings the scale back up for the afternoon rush, only to settle at a low level as the day ends.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The number of containers and their sizes is very dynamic in this setup. This complicates the process of calculating and forecasting AWS Kubernetes costs even more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#allocating-aws-kubernetes-costs-the-smart-way"&gt;
  &lt;/a&gt;
  Allocating AWS Kubernetes costs, the smart way
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JFHtz_-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g9w2nc8pxydbjnv2af6q.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JFHtz_-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g9w2nc8pxydbjnv2af6q.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Take a look at your &lt;a href="https://cast.ai/blog/cloud-bill-5-common-issues-and-how-to-deal-with-them/"&gt;cloud bill&lt;/a&gt;. You get charged for every instance that makes up a cluster where containers are deployed. You need to pay for that resource, even if you’re not using it. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To allocate the individual costs of a container running on a given cluster, you need to discover how much of the server the container ended up consuming.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And then add the satellite AWS Kubernetes costs of a running cluster to that as well (from management nodes and software licensing to backups and disaster recovery). &lt;/p&gt;

&lt;p&gt;How to do it? Here are some best practices for allocating Kubernetes costs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-use-container-classes"&gt;
  &lt;/a&gt;
  1. Use container classes
&lt;/h3&gt;

&lt;p&gt;You can set different resource guarantees on scheduled containers in Kubernetes. They’re called Quality of Service (QoS) classes. Here’s a quick introduction: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Guaranteed&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These pods are top priority and guaranteed to not get killed until the moment they exceed their limits. If limits and requests (not equal to 0) are set for all the resources across your containers and are equal, the pod is classified as guaranteed. &lt;/p&gt;

&lt;p&gt;Use this for critical service containers to make sure that a pod gets the vCPU and memory it needs at all times.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Burstable&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;If your workload experiences spikes, it should have access to more resources when it needs them. This setup allows the pod to use more resources than requested at first – as long as the capacity is available on the underlying instance. &lt;/p&gt;

&lt;p&gt;This type of allocation works like burstable instances AWS offers (T-series) – they give you a base level of performance and allow the pod to burst when it requires more. &lt;/p&gt;

&lt;p&gt;This is much more cost-effective than investing in an instance large enough to cover the spikes but way too large for regular operation. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BestEffort&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These pods are the lowest priority and get killed first if your system runs out of memory. This allocation allows the pod to run while there’s excess capacity available and stops it when it’s not. It works like spot instances in AWS. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It’s a good idea to allocate a mix of pods that have different resource allocation guarantees into a server instance to increase its utilization. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, you can allocate a baseline of resources to guaranteed resource pods, add some burstable pods that use up to the remainder of resources, and best-effort pods that take advantage of any spare capacity. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--40oSvMYY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/khsh54z9anhb40bf7bfk.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--40oSvMYY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/khsh54z9anhb40bf7bfk.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-break-costs-down-for-labeling-and-tagging"&gt;
  &lt;/a&gt;
  2. Break costs down for labeling and tagging
&lt;/h3&gt;

&lt;p&gt;Breaking costs into separate categories helps to make sense of them through labels and tagging. Here are a few categories that Kubernetes teams find useful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Billing hierarchy&lt;/strong&gt; – develop and align it with your cloud costs (for example, projects, folders, or organizations),&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Resources&lt;/strong&gt; – this part covers compute cores, GPU, TPU, RAM, load balancers, custom machines, network egress, etc.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Namespaces&lt;/strong&gt; – it’s a good practice to label specific and isolated containers,&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Labels&lt;/strong&gt; – come up with labels reflecting different cost centers, teams, application names, environments, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-establish-labeling-and-namespace-standards"&gt;
  &lt;/a&gt;
  3. Establish labeling and namespace standards
&lt;/h3&gt;

&lt;p&gt;Develop and implement a labeling and namespace strategy – and stick to it when allocating cluster costs. That way, teams that use AWS can see which groups are driving costs in a given cluster. &lt;/p&gt;

&lt;p&gt;Consider the proportional resources consumed by every group and use your findings to allocate cluster costs to these groups. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here’s an example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s say that you have four namespaces in a cluster. Each of them consumes 25% of the cluster resources. One way to allocate costs would be taking 25% of the total cluster costs and allocating them to each namespace. &lt;/p&gt;

&lt;p&gt;Naturally, this is an example scenario – don’t expect things to be so straightforward in the real world. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Before setting out to do that, establish how you’ll be determining cluster resource utilization – by CPU, memory, or a combination of these two? Are you going to look at requests or actual consumption? &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;If you go for actual usage,&lt;/strong&gt; each team will only pay for what it uses. But who will be covering the bill for idle time? How are you going to deal with overprovisioning? &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;If you allocate costs by resource requests,&lt;/strong&gt; you’ll encourage teams to provision only what they need and allocate all the costs. But this might also lead teams to underestimate their requirements.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-split-and-allocate-shared-costs"&gt;
  &lt;/a&gt;
  4. Split and allocate shared costs
&lt;/h3&gt;

&lt;p&gt;Companies have unique ways to split infrastructure costs. These methods often get inherited when they start using Kubernetes.&lt;/p&gt;

&lt;p&gt;Here’s a set of best practices if you’re looking for another approach:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#a-define-what-shared-costs-are"&gt;
  &lt;/a&gt;
  a. Define what shared costs are
&lt;/h4&gt;

&lt;p&gt;This depends on the maturity and size of your company. You share the cloud bill at the organizational level but need to allocate it either to a centralized budget or different cost centers. Still, your shared costs will be charged within one account, so understanding which AWS Kubernetes costs should be shared is challenging.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here are a few examples of commonly shared costs:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Shared resources (network, storage like data lakes)&lt;/li&gt;
&lt;li&gt;Platform services (Kubernetes, logging)&lt;/li&gt;
&lt;li&gt;Enterprise-level support and discounts&lt;/li&gt;
&lt;li&gt;Licensing and third-party costs &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Take support charges as an example. They’re applied at the parent account level. While some businesses cover them with a central budget of the IT or cloud team, others go a step further and allocate this cost to customers like application owners or business units. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The rise of shared platforms where multiple teams use the same core resources complicates this – like Kubernetes systems that run on shared clusters. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#b-split-your-shared-costs"&gt;
  &lt;/a&gt;
  b. Split your shared costs
&lt;/h4&gt;

&lt;p&gt;Tagging helps to do that accurately, and you can choose from several techniques:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Proportional split – based on the relative percentage of direct costs&lt;/li&gt;
&lt;li&gt;Even split – where you split the total amount evenly across all targets&lt;/li&gt;
&lt;li&gt;Fixed proportion split – based on a user-defined coefficient 
This is a bit abstract, so let’s show an example.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Imagine that you have several business units that consume a different portion of cloud resources:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XGOtmx0S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xhxoyiwtwtfzflrmpxq8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XGOtmx0S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xhxoyiwtwtfzflrmpxq8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#you-get-a-15k-enterprise-support-charge-on-top-of-that-so-your-final-bill-is-115k-per-month"&gt;
  &lt;/a&gt;
  You get a $15k enterprise support charge on top of that, so your final bill is $115k per month.
&lt;/h4&gt;

&lt;p&gt;Here’s how this plays out in different splitting techniques.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#proportional-split"&gt;
  &lt;/a&gt;
  Proportional split
&lt;/h4&gt;

&lt;p&gt;In this model, you split the $15k enterprise support charge among your three business units based on the percentage of their spend in direct charges. So, the sales operations team that uses 50% of your bill will also be accountable for $7.5k on top of their bill. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V0jo2Elx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9uqxrgb7a8dloek7tnbv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V0jo2Elx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9uqxrgb7a8dloek7tnbv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#even-split"&gt;
  &lt;/a&gt;
  Even split
&lt;/h4&gt;

&lt;p&gt;This model is simpler, so you can often find it among smaller companies with fewer business units. In this scenario, the $15k enterprise support charge is shared evenly by all business units – so $5k each.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3vcgFx9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oc6fitb3eyujszv0pd5f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3vcgFx9x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oc6fitb3eyujszv0pd5f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#fixed-proportion-split"&gt;
  &lt;/a&gt;
  Fixed proportion split
&lt;/h4&gt;

&lt;p&gt;When using this method, you set a fixed percentage for attributing shared costs based on past spend. The idea is to get a fair breakdown. So if you decide that the sales operations team’s shared cost allocation is 40%, then it will get $6k of the enterprise support fee allocated to it.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ps1406bY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9wwrt2pjfjim4g9nwiv6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ps1406bY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9wwrt2pjfjim4g9nwiv6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-count-in-cluster-costs-beyond-the-core"&gt;
  &lt;/a&gt;
  5. Count in cluster costs beyond the core
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5v-8zJil--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iv6h4mt1nsacmhojrfxy.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5v-8zJil--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iv6h4mt1nsacmhojrfxy.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
When allocating costs to cluster consumers, consider the satellite costs of operating this cluster like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Management and operational costs&lt;/strong&gt; – these are charged by AWS for managing the cluster for you. For example, EKS charges $0.1 per hour per Kubernetes cluster – this amounts to c. $74 per month. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Learn more here: &lt;a href="https://cast.ai/blog/aws-eks-vs-ecs-vs-fargate-where-to-manage-your-kubernetes/"&gt;AWS EKS vs. ECS vs. Fargate: Where to manage your Kubernetes?&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Storage&lt;/strong&gt; – add the costs of storage consumed by the host OS on the nodes, and any backup or data retrieval storage that is used in operating a production cluster can be allocated back to the workloads running on the cluster. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Licensing&lt;/strong&gt; – these costs might be included in your AWS bill, but if you use Bring Your Own License (BOYL), you need to allocate this cost from the external spend. Moreover, software packages running on the host OS might incur a license fee too. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Observability&lt;/strong&gt; – these metrics and logs are transferred from the cluster to a service your teams use to monitor and visualize them. This cost might be incurred by AWS or a third-party SaaS solution. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Security&lt;/strong&gt; – AWS offers a wealth of security features, but they come at an extra fee that needs to be allocated.
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-apply-all-of-this-and-win-the-cost-allocation-game"&gt;
  &lt;/a&gt;
  How to apply all of this and win the cost allocation game
&lt;/h2&gt;

&lt;p&gt;Implementing all of these best practices at once is bound to overwhelm you. So start small and develop a process for allocating costs. Build an understanding of how these costs should be allocated in your company.&lt;/p&gt;

&lt;p&gt;Or get a solution that keeps your AWS Kubernetes costs at bay. Analyzing and allocating costs is so much easier if you have access to a detailed overview like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tTnF-fJU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxa8iuw6lrst2ih4vj83.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tTnF-fJU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lxa8iuw6lrst2ih4vj83.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here’s how to get started:&lt;/strong&gt; &lt;a href="https://cast.ai/eks-optimizer/"&gt;Analyze your cluster for free&lt;/a&gt; to see every single detail that increases your AWS bill.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
      <category>aws</category>
      <category>eks</category>
    </item>
    <item>
      <title>I created 3 New VSCode Themes!</title>
      <author>Rithik Samanthula</author>
      <pubDate>Tue, 18 May 2021 14:21:16 +0000</pubDate>
      <link>https://dev.to/code2rithik/i-created-3-new-vscode-themes-39ji</link>
      <guid>https://dev.to/code2rithik/i-created-3-new-vscode-themes-39ji</guid>
      <description>&lt;p&gt;Hey There!&lt;/p&gt;

&lt;p&gt;This is an exciting post because.....&lt;/p&gt;

&lt;p&gt;Drumroll please..🥁🥁&lt;/p&gt;

&lt;p&gt;Well you obviously know by the title 😂.&lt;/p&gt;

&lt;p&gt;Anyways, I created 3 New (and free) VSCode themes to make your VSCode look better.&lt;/p&gt;

&lt;p&gt;A month ago I wrote a post on 8 Rad themes for VSCode.&lt;/p&gt;

&lt;p&gt;You can check it out here:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/code2rithik" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tEZ9q5q6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--rDH0zdaa--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/571318/4f34864f-834d-464e-a51a-e1e62aead649.gif" alt="code2rithik image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/code2rithik/8-rad-themes-for-visual-studio-code-57f5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;8 Rad Themes for Visual Studio Code&lt;/h2&gt;
      &lt;h3&gt;Rithik Samanthula ・ Apr 10 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#vscode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#theme&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#color&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aesthetic&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Anyways, are you ready to install it...&lt;/p&gt;

&lt;p&gt;It's on the marketplace!&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#1-neon-blue-drive"&gt;
  &lt;/a&gt;
  1. Neon Blue Drive
&lt;/h1&gt;

&lt;p&gt;An Awesome Neon Blue Theme Inspired by The Best Theme&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xWH2IeUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26uqwjpqamhhaj7zaop8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xWH2IeUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/26uqwjpqamhhaj7zaop8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=RithikDev.neon-blue-drive"&gt;Install&lt;/a&gt;&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#2-blazes-abyss"&gt;
  &lt;/a&gt;
  2. Blazes Abyss
&lt;/h1&gt;

&lt;p&gt;This is a theme based on the CodeSandbox Theme&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TdCoDjVU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ry9zpsrxt1qshlbetraa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TdCoDjVU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ry9zpsrxt1qshlbetraa.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=RithikDev.blazesabyss"&gt;Install&lt;/a&gt;&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#3-purple-star"&gt;
  &lt;/a&gt;
  3. Purple Star
&lt;/h1&gt;

&lt;p&gt;This is a nice purple theme with a radical theme&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SMkf35Kj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xx7mqsogf2so2m2o50z2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SMkf35Kj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xx7mqsogf2so2m2o50z2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=RithikDev.purple-star"&gt;Install&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please do write reviews on the marketplace!&lt;/p&gt;




&lt;p&gt;Thank You for Reading and Remember...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#keep-coding-yall"&gt;
  &lt;/a&gt;
  Keep Coding Y'All 👨🏻‍💻
&lt;/h1&gt;

</description>
      <category>vscode</category>
      <category>theme</category>
      <category>color</category>
    </item>
    <item>
      <title>What should I do in the future?</title>
      <author>UnixByX</author>
      <pubDate>Tue, 18 May 2021 14:03:59 +0000</pubDate>
      <link>https://dev.to/unixbyx/what-should-i-do-in-the-future-4c25</link>
      <guid>https://dev.to/unixbyx/what-should-i-do-in-the-future-4c25</guid>
      <description>&lt;p&gt;I'm bored and I really don't know what to do.&lt;br&gt;
I want to help everyone but I have no ideas...&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>javascript</category>
      <category>python</category>
    </item>
  </channel>
</rss>
