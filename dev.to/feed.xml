<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What is The Serverless Edge?</title>
      <author>The Serverless Edge</author>
      <pubDate>Wed, 10 Nov 2021 11:10:16 +0000</pubDate>
      <link>https://dev.to/serverlessedge/what-is-the-serverless-edge-1cl7</link>
      <guid>https://dev.to/serverlessedge/what-is-the-serverless-edge-1cl7</guid>
      <description>&lt;p&gt;Originally published on &lt;a href="http://www.theserverlessedge.com"&gt;www.theserverlessedge.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reading Time: 4 minutes&lt;/p&gt;

&lt;p&gt;Serverless computing has become a term for how we build software. It is more than the compute; it is a mindset. A DataDog survey in 2020 stated that 50% of AWS users had serverless components, and container users are flocking to Lambda – one of the AWS Serverless Services. &lt;/p&gt;

&lt;p&gt;Many experts and leaders are still not convinced that Serverless will lead to the Future of Work and Emerging Technology. People don’t make the connection. What part does it play in the Future of Work and the 4th Industrial Revolution? We will explore this to help you learn in our blog content and case studies.&lt;/p&gt;

&lt;p&gt;We believe serverless is a gateway into many new ways of working – a technology-led, low friction, and high-value future. &lt;/p&gt;

&lt;p&gt;Why serverless?&lt;br&gt;
It represents the cutting edge of how we build business and web applications. Every business needs software, it needs it fast, and it must be cheap. Imagine if you could combine that with the ability to create a fast feedback flow and have an unlimited selection of tech to use? This is what Serverless means for business leaders. Unfortunately, the serverless term is quite technical and low-level. &lt;/p&gt;

&lt;p&gt;We want to change that. We want to support the leading edge of software development to create business capability and performance. No immense complexity security problems or large data centers. Just give it to me straight, quickly and don’t make me spend loads of money on code.&lt;/p&gt;

&lt;p&gt;Many think of Serverless as a new method of compute, which is incorrect. It is not comparable to containers. The first Serverless service in AWS was S3 – the Simple Storage Service. The definition of Serverless gets quite opinionated, so it’s explored further in this article by Ben Kehoe.&lt;/p&gt;

&lt;p&gt;How is it linked to the Future of work?&lt;br&gt;
Software is eating the World – a famous quote from Andersson in 2011. Digital is not just a channel; it’s a new mindset and will continue to redefine our workplaces into the ’20s and the ’30s. Unthinkable new business capability can be co-created with the Serverless mindset. This leads to different ways of working, collaboration patterns, the ability to reimagine work and reinvent how we deliver value to our customers. There are new business models that are generating millions of dollars, and textbooks cannot keep up.&lt;/p&gt;

&lt;p&gt;Scale down to scale up&lt;br&gt;
Technical Change for this future has already happened. Organizational change is still behind – people move slower than technology. This is fact and not criticism. The days of having 300 people in a massive programme of work are fading out. It’s wasteful (many people are in coordination roles) and slow. Imagine you could shrink down to a single, cross-functional team that included everyone required to create the vision, discover, decide, build and deliver? Serverless gives you the ability to develop software with minimal hand-offs, so you can scale down to scale up.&lt;/p&gt;

&lt;p&gt;Technology of tomorrow&lt;br&gt;
We are living in fascinating times. Artificial Intelligence has never been more accessible and powerful. We can achieve results now that we didn’t dream of a year ago. IoT and the sensor revolution expands weekly, touching every industry. Connectivity and networks invent every few years as standards evolve. Interfaces with computers created in the 1960s are finally starting to see a revolution. It has taken us around 50 years to get voice to a state that it feels natural. Quantum compute, capable of incredible speeds, is supposedly around the corner. What does this mind-boggling list have in common? Only ten years ago, if you wanted to bring in one of these capabilities into your business, the first step was to request and write a substantial cheque and wait several months. Today a student at college can integrate any of these technologies with her Serverless application in minutes, and the cost is minimal. &lt;/p&gt;

&lt;p&gt;Yes, you can use serverless to build a webpage and process payments for your business. You can also think of software as a series of events and start introducing exciting new technology into your business. An IoT use case? Need to process lots of data? Need a Voice Assistant? Need to connect many disparate systems? Serverless can make all of this a lot easier.&lt;/p&gt;

&lt;p&gt;The Serverless Edge&lt;br&gt;
The Serverless Edge title implies that we will keep on the leading edge of business. We will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;focus on business&lt;/li&gt;
&lt;li&gt;explain how the latest technology is evolving and join the 
dots for you&lt;/li&gt;
&lt;li&gt;make predictions about the Future of Work and how new 
technology will change the game, and&lt;/li&gt;
&lt;li&gt;comment on the ever-complex challenges of running efficient 
engineering functions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Serverless brings all this together as it’s a mindset, a serverless edge mindset that encourages Simplicity, Speed, Innovation, Value and the Customer. We understand the details, but we are not going to focus on Functions, Cloud Configurations or Containers – these are critical, but other sites are more comprehensive. We will retain a Serverless mindset and focus on Business Value.&lt;/p&gt;

&lt;p&gt;The Serverless Edge will stay ahead and give you insights into the Serverless Mindset, the Future of Work for business and engineers and the impact of new technology. We will look at all of this through the lens of business value and (hopefully) use plain English.&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>devops</category>
      <category>aws</category>
      <category>leadership</category>
    </item>
    <item>
      <title>Benefits of Remote Teaching in Microsoft Office 365 Education</title>
      <author>Bruce Banner</author>
      <pubDate>Wed, 10 Nov 2021 11:07:46 +0000</pubDate>
      <link>https://dev.to/bruce_banner/benefits-of-remote-teaching-in-microsoft-office-365-education-3kbe</link>
      <guid>https://dev.to/bruce_banner/benefits-of-remote-teaching-in-microsoft-office-365-education-3kbe</guid>
      <description>&lt;p&gt;Cloud-Based Access and Storage&lt;br&gt;
&lt;a href="https://www.o365cloudexperts.com/office-365-education/"&gt;Microsoft 365 Education&lt;/a&gt; is a cloud-based app, stored and supported by Microsoft, which means that teachers and educational institutes don’t own it; they only subscribe to it. This feature makes it easier for students and educators to afford and scale up the app, if necessary. Cloud-storage makes it easier for both students and teachers to access their data from remote locations. They also get unlimited space for storing data, which means that educational institutes don’t have to worry about building an in-house storage server. Under normal circumstances, teachers and students store their data on flash drives to bring it to school, and if they lose the flash drive, they lose hours of hard work. Thanks to cloud storage, teachers and students don’t have to carry a flash drive from school to home or vice versa; they can easily access the stored data from anywhere they want. In times of distance learning and remote teaching, this feature is integral and helps students and educators to stay productive while quarantining in their homes. The data stored on the cloud is protected by advanced encryption, which ensures the safety of the stored data.&lt;/p&gt;

&lt;p&gt;Auto Updates&lt;br&gt;
Updating systems and programs is a technically challenging process that consumes a lot of time and requires a substantial amount of resources. This can be a problem for both students and educators working with a limited budget, and in remote learning, it can be even more challenging to bring everyone on the same page.&lt;/p&gt;

&lt;p&gt;Office 365 for education is looked after by Microsoft and is stored on the cloud, which means that it gets automatically updated for everyone. Both students and teachers can enjoy the latest technology without depending on the IT team for continuously updating the systems and solutions, which is a great aspect of using Office 365 Education for distance learning and remote teaching.&lt;/p&gt;

&lt;p&gt;Career Skills&lt;br&gt;
One of the main goals of education is to prepare students to smoothly transition from the classroom to the workforce, which requires baseline technology skills. Using Office 365 for education enables students to use training tools to learn these baseline technology skills, such as learning how to use teams for meetings, create powerful presentations using PowerPoint, etc. All these baseline technology skills help students to become attractive prospects in today’s competitive job market.&lt;/p&gt;

&lt;p&gt;Global Collaboration&lt;br&gt;
With Office 365 Education, teachers, and students get the opportunity to collaborate and comminute with their peers around the world. Using PowerPoint, Word, or Excel, teachers can share information with a school in a different country; for instance, they can create a guide based on their remote teaching experience and share it with teachers that are just beginning to teach remotely. Using SharePoint or Teams, they can enable real-time collaboration and distance learning.&lt;/p&gt;

&lt;p&gt;Free Services&lt;br&gt;
As mentioned earlier, the A1 plan of Office 365 Education is free for students and educators; this plan allows teachers and students to continue classes during the coronavirus lockdowns. Basic apps and services are part of the Office 365 Education; teachers and students also get unlimited storage after five subscribers, and they can scale the platform whenever they can if the A1 plan doesn’t meet their needs.&lt;/p&gt;

&lt;p&gt;Security and Data Control&lt;br&gt;
Another benefit of using Office 365 for education is that it has built-in security and data control, which helps teachers and students to keep their data safe. Microsoft monitors their server 24/7 for threats and uses anti-malware and anti-spam protection so people can be sure that their data won’t be compromised.&lt;/p&gt;

&lt;p&gt;Office 365 Education also enables teachers to organize educational material and set up data control features for the material. For instance, teachers are creating a test for the students using SharePoint, they can set up data control, or privacy features for the file, assigning read and write privileges to only the teachers responsible for creating the test.&lt;/p&gt;

&lt;p&gt;To know more about &lt;a href="https://www.o365cloudexperts.com/o365-education-a1-a3-a5-comparison/"&gt;Office 365 Education Plans&lt;/a&gt; or &lt;a href="https://www.o365cloudexperts.com/blog/how-to-migrate-from-godaddy-email-to-office-365"&gt;GoDaddy Office 365 Email&lt;/a&gt; visit O365CloudExperts.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Code owners and review in GitHub</title>
      <author>Vesin Dusko</author>
      <pubDate>Wed, 10 Nov 2021 11:07:11 +0000</pubDate>
      <link>https://dev.to/vesindusko/code-owners-and-review-in-github-31lk</link>
      <guid>https://dev.to/vesindusko/code-owners-and-review-in-github-31lk</guid>
      <description>&lt;p&gt;Code review is one of the standards for good code quality and knowledge sharing inside teams. During my carrier, I have seen a lot of different setups, and some of them are better than others.&lt;/p&gt;

&lt;p&gt;We are using GithHub PRs as a moment for quality control. It allows us to establish rules when a code from a working branch can be merged with the development branch. &lt;/p&gt;

&lt;p&gt;One of the basic rules is code review. All PRs have this type of protection. At least one member of the architect team should give its approval and at least two other developers. &lt;/p&gt;

&lt;p&gt;The other gate is that at least one of the code owners of changed files should also do a code review. The concept of code owners is not a well-known functionality of GitHub, but we found it very powerful and valuable. &lt;/p&gt;

&lt;p&gt;Details about this functionality you can find on &lt;a href="https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners"&gt;GitHub&lt;/a&gt; and examples you can see at &lt;a href="https://github.com/alchemycloud/todo/blob/master/CODEOWNERS"&gt;todo example&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Y3R34nr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnagfauhb3gvrema7r11.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Y3R34nr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnagfauhb3gvrema7r11.png" alt="Example" width="704" height="288"&gt;&lt;/a&gt;&lt;br&gt;
No alt text provided for this image&lt;br&gt;
The good thing about code owners is that any file or folder in the code can have different owners or GitHub groups, and by it, you can make sure that the right people have done code reviews.&lt;/p&gt;

&lt;p&gt;Also, in the case of the larger PRs, the reviewer can adjust the filter to see only files you are responsible for, speeding up the review process.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fbtDm8FE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2x7n4z1m9x9lve0ybauq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fbtDm8FE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2x7n4z1m9x9lve0ybauq.png" alt="Filter" width="616" height="528"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>codereview</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Select HTML Elements in CSS using attributes</title>
      <author>Elijah Trillionz</author>
      <pubDate>Wed, 10 Nov 2021 11:06:36 +0000</pubDate>
      <link>https://dev.to/elijahtrillionz/select-html-elements-in-css-using-attributes-jhb</link>
      <guid>https://dev.to/elijahtrillionz/select-html-elements-in-css-using-attributes-jhb</guid>
      <description>&lt;p&gt;Hey friends. Let's take a look at an awesome feature in CSS.&lt;/p&gt;

&lt;p&gt;In this article, we will select HTML elements in CSS using the element's attributes. For example&lt;/p&gt;

&lt;p&gt;You can select and style all &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags with a secured URL (https), you can select and style all &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; tags that are passwords only, and so much more.&lt;/p&gt;

&lt;p&gt;The syntax is simple to learn and easy to master. Follow along.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-cases"&gt;
  &lt;/a&gt;
  Use Cases
&lt;/h2&gt;

&lt;p&gt;Let's say I have a list of links, and in this list, I want to specify a different color for links that are not secured.&lt;/p&gt;

&lt;p&gt;Traditionally assigning classes to each unsecured list will come to mind.&lt;/p&gt;

&lt;p&gt;But this can be full of bugs especially if it's a long list. Worst case scenario it is a WordPress site and styling unsecured links will have to be done dynamically.&lt;/p&gt;

&lt;p&gt;So instead of classes, this is what will help&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;^=&lt;/span&gt;&lt;span class="s2"&gt;'http://'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, I have selected all &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; elements that have their URLs starting with http://. Now we can apply any style.&lt;/p&gt;

&lt;p&gt;Cool right?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The square brackets are the &lt;strong&gt;syntax of selecting attributes in CSS&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The "href" represents the attribute you want to select.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The caret (^) is the operator, there are others (I will list them below); the caret simply means "starts with"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And of course the value ("http://")&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the syntax &lt;code&gt;element[attr operator="value"]&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-more-examples"&gt;
  &lt;/a&gt;
  Some more examples
&lt;/h3&gt;

&lt;p&gt;Selecting all elements with titles that begin with "sam"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="o"&gt;^=&lt;/span&gt;&lt;span class="s1"&gt;"sam"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This means&lt;br&gt;
&lt;code&gt;&amp;lt;p title="samandsong"&amp;gt;Hello sam&amp;lt;/p&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;h2 title="samama"&amp;gt;Hey Sam&amp;lt;/h2&amp;gt;&lt;/code&gt; will be blue.&lt;/p&gt;

&lt;p&gt;The example above can be rewritten as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="o"&gt;^=&lt;/span&gt;&lt;span class="s1"&gt;"sam"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that you know the syntax let's see the most used of the operators&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#operators"&gt;
  &lt;/a&gt;
  Operators
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#no-operator"&gt;
  &lt;/a&gt;
  no operator
&lt;/h3&gt;

&lt;p&gt;When no operator is specified it selects all elements with matching attributes and values. For example&lt;/p&gt;

&lt;p&gt;&lt;code&gt;input[type="password"]&lt;/code&gt; means select only input elements with a type (attribute) of password&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#asterisk-"&gt;
  &lt;/a&gt;
  asterisk (*)
&lt;/h3&gt;

&lt;p&gt;We use this operator to select all elements whose attributes contain at least one occurrence of the specified value. For example&lt;/p&gt;

&lt;p&gt;&lt;code&gt;input[type*="e"]&lt;/code&gt; will select &lt;strong&gt;all&lt;/strong&gt; input elements with a value of "e" as its type.&lt;/p&gt;

&lt;p&gt;This means email, text but not password will be selected.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#caret-"&gt;
  &lt;/a&gt;
  caret (^)
&lt;/h3&gt;

&lt;p&gt;With this operator, we can select all elements whose attributes' values begin with the specified value. For example&lt;/p&gt;

&lt;p&gt;&lt;code&gt;a[href^="http://"]&lt;/code&gt; will select &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; elements that has its "href" attribute start with "http://"&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dollar-"&gt;
  &lt;/a&gt;
  dollar ($)
&lt;/h3&gt;

&lt;p&gt;We use this operator to select all elements whose attributes` values end with the specified value. For example&lt;/p&gt;

&lt;p&gt;&lt;code&gt;a[href^=".org"]&lt;/code&gt; will select &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; elements that has its "href" attribute end with ".org"&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tilde-"&gt;
  &lt;/a&gt;
  tilde (~)
&lt;/h3&gt;

&lt;p&gt;With this operator, we can select all elements whose white-space separated attributes' values contain the specified value. For example&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[title~="mark"]&lt;/code&gt; will select all elements that have a "title" of "mark".&lt;/p&gt;

&lt;p&gt;For this operator to work, the values of the attributes should be white-space separated.&lt;/p&gt;

&lt;p&gt;If "mark" is joined with another value or word, it will not be selected for example&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;p title="mark-clean-sheet"&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt; will not be selected, rather &lt;code&gt;&amp;lt;p title="mark clean-sheet"&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt; will be selected.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#caseinsensitive"&gt;
  &lt;/a&gt;
  Case-insensitive
&lt;/h3&gt;

&lt;p&gt;Sometimes attribute values casing can vary. And these selectors in CSS are case-sensitive.&lt;/p&gt;

&lt;p&gt;To make it case-insensitive add an "i" before the closing bracket i.e &lt;code&gt;[title*="mark" i]&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;There is one more operator that is used for matching language subcode. It is rarely used, but you should check it out on &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors"&gt;MDN&lt;/a&gt;. It can come in handy anytime.&lt;/p&gt;

&lt;p&gt;This article is from one of my threads on Twitter. You can &lt;a href="https://twitter.com/elijahtrillionz"&gt;follow me&lt;/a&gt; there to get a daily digest on web development.&lt;/p&gt;

&lt;p&gt;Hope you learned something, if you did, shoot me a comment to let me know. If you think I did something wrong, please also let me know in the comments.&lt;/p&gt;

&lt;p&gt;Happy styling.&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>CSS Flexbox: A Complete Guide with Examples</title>
      <author>Creative Tim</author>
      <pubDate>Wed, 10 Nov 2021 11:06:23 +0000</pubDate>
      <link>https://dev.to/creativetim_official/css-flexbox-a-complete-guide-with-examples-3m17</link>
      <guid>https://dev.to/creativetim_official/css-flexbox-a-complete-guide-with-examples-3m17</guid>
      <description>&lt;p&gt;In this article, we will cover what Flexbox is, a few applications where flexbox is used, how to get started with flexbox, and what properties are available to use.  In case that you don't know exactly how the content in your webpage is going to look at the end, but you want to have a clean project where all the items are fitted perfectly, learn that flexbox is the ideal layout system that you would want to use. We hope that this article will come in handy to realize beautiful projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-what-is-flexbox"&gt;
  &lt;/a&gt;
  1. What is Flexbox?
&lt;/h2&gt;

&lt;p&gt;The Flexible Box Module, generally referred to as Flexbox, was introduced in 2009 as a new way to organize elements easily and to design responsive web pages. In the following years, it gained so much popularity that today is used as the main layout system for most web pages. In order to have this module applied to your project, you will have to create a main container and use the &lt;code&gt;display: flex&lt;/code&gt; property on it.&lt;/p&gt;

&lt;p&gt;Flexbox layout is appreciated because it allows building designs based on two axes: the main axis and the cross axis. This feature gives the container the power to dynamically set the width/height of its items in order to fill all the available space.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How Flexbox 'works'&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jZphTxGU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/How-flexbox--works-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jZphTxGU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/How-flexbox--works-.png" alt="how flexbox works" width="691" height="291"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;main axis – This axis is the primary one. The flex items are displayed along the main axis.&lt;/li&gt;
&lt;li&gt;main-start | main-end – The flex items will be displayed from the 'main-start' to the 'main-end'.&lt;/li&gt;
&lt;li&gt;cross axis – This axis is perpendicular to the main axis.&lt;/li&gt;
&lt;li&gt;cross-start | cross-end – The flex items inside a container will fill the flex lines starting from the 'cross-start' and heading to the 'cross-end'.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#supported-browsers"&gt;
  &lt;/a&gt;
  Supported browsers
&lt;/h3&gt;

&lt;p&gt;If you want to check on which browsers and versions Flexbox is supported, you can have a look at &lt;a href="https://caniuse.com/?search=flexbox"&gt;&lt;/a&gt;&lt;a href="https://caniuse.com/?search=flexbox"&gt;https://caniuse.com/?search=flexbox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BhULwuzQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/supported_browsers_flexbox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BhULwuzQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/supported_browsers_flexbox.png" alt="supported browers for flexbox" width="880" height="204"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-flexbox-applications"&gt;
  &lt;/a&gt;
  2. Flexbox Applications
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#bootstrap"&gt;
  &lt;/a&gt;
  Bootstrap
&lt;/h3&gt;

&lt;p&gt;This open-source front-end toolkit helps you design and customize responsive web pages using Sass variables and mixings, a responsive grid system, and more. The pre-build full suite of responsive flexbox utilities gives you the power to manage the layout, alignment, sizing of grid columns, and many others, making Bootstrap one of the most popular CSS frameworks.&lt;/p&gt;

&lt;p&gt;If you want to create complex and innovative designs, check our latest Premium Bootstrap 5 UI Kit: &lt;a href="https://www.creative-tim.com/product/soft-ui-design-system-pro"&gt;https://www.creative-tim.com/product/soft-ui-design-system-pro&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#tailwindcss"&gt;
  &lt;/a&gt;
  Tailwindcss
&lt;/h3&gt;

&lt;p&gt;This utility-first CSS framework based on Flexbox helps you to build any design directly in your markup. Its biggest advantage is that you can rapidly create modern websites without leaving your HTML code. It’s also easy to customize and adapt to any design.&lt;/p&gt;

&lt;p&gt;If you need a components library for tailwind css, you can check the below product: &lt;a href="https://www.creative-tim.com/product/notus-pro-react"&gt;https://www.creative-tim.com/product/notus-pro-react&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#bulma"&gt;
  &lt;/a&gt;
  Bulma
&lt;/h3&gt;

&lt;p&gt;This open-source CSS framework is built with Sass, and it’s based on Flexbox. Among its advantages is that it’s available for free and be used to build 100% responsive web pages. It’s also fully modular, which allows you to import only what you need from the 29 SASS files that you can import individually.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-get-started-with-flexbox"&gt;
  &lt;/a&gt;
  3. Get started with Flexbox
&lt;/h2&gt;

&lt;p&gt;In the next section, we will show you how to use Flexbox by presenting its properties and the most commonly used values for them, structured into categories. Firstly, we will cover the properties that apply to the parent (container), and then we will move on to the ones applying to the children (items).&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#31-parent-properties-container"&gt;
  &lt;/a&gt;
  3.1. Parent properties (container)
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;display&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In order to get started with Flexbox, first, you will need to set the container's display property to flex.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;display: flex;&lt;/code&gt; property example&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jSPyTffD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/display_flex.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSPyTffD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/display_flex.png" alt="set container’s display property to flex" width="880" height="160"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container {
    display: flex;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container {
    display: inline-flex;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;flex-direction&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This property allows you to decide on the main axis direction in your container. By default, the main axis is from left to right.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;flex-direction: row-reverse;&lt;/code&gt; property example&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OS-pV5nV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/flex-direction_row-reverse.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OS-pV5nV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/flex-direction_row-reverse.png" alt="flex-direction" width="880" height="161"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container {
    flex-direction: row | row-reverse | column | column-reverse;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;row (default): left to right&lt;/li&gt;
&lt;li&gt;row-reverse: right to left&lt;/li&gt;
&lt;li&gt;column: top to bottom&lt;/li&gt;
&lt;li&gt;column-reverse: bottom to top&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;justify-content&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Determines how the actual element (content) is distributed across the main axis.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;justify-content: flex-end;&lt;/code&gt; property example&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6aWV_o9H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/justify-content_flex-end.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6aWV_o9H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/justify-content_flex-end.png" alt="justify-content" width="880" height="165"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container {
    justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;flex-start (default): items are moved toward the start of the main axis&lt;/li&gt;
&lt;li&gt;flex-end: items are moved toward the end of the main axis&lt;/li&gt;
&lt;li&gt;center: items are centered along the main axis&lt;/li&gt;
&lt;li&gt;space-between: items are evenly distributed along the main axis, with the mention that the first and the last items are pushed to the extremities of the main axis&lt;/li&gt;
&lt;li&gt;space-around: items are evenly distributed along the main axis, with the mention that all the items have equal space on both sides, which will visually create unequal space between the items&lt;/li&gt;
&lt;li&gt;space-evenly: items are evenly distributed along the main axis, with the mention that all the spaces will be equal (including the spaces from the extremities to the item)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;flex-wrap&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It determines whether your items are going to wrap along the main axis onto a new line if it's horizontal or a new column if it's a vertical main axis.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;flex-wrap: nowrap;&lt;/code&gt; property example&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eu27a6NC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/flex-wrap_default.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eu27a6NC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/flex-wrap_default.png" alt="flex-wrap" width="880" height="180"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;flex-wrap: wrap;&lt;/code&gt; property example&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NkxAunkU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/flex-wrap_wrap.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NkxAunkU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/flex-wrap_wrap.png" alt="flex-wrap property example" width="880" height="246"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container {
    flex-wrap: nowrap | wrap | wrap-reverse; 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;nowrap (default): all items will be on one line&lt;/li&gt;
&lt;li&gt;wrap: items will wrap onto multiple lines, from top to bottom&lt;/li&gt;
&lt;li&gt;wrap-reverse: items will wrap onto multiple lines from bottom to top&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;align-items&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This property is going to distribute the items along the cross axis.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;align-items: flex-start;&lt;/code&gt; property example&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gUrdcFBl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/align-items_flex-start.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gUrdcFBl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/align-items_flex-start.png" alt="align-items" width="880" height="236"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;align-items: flex-end;&lt;/code&gt; property example&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tBQyLJ7m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/align-items_flex-end.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tBQyLJ7m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/align-items_flex-end.png" alt="align-items property example" width="880" height="233"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container {
    align-items: stretch | flex-start | flex-end | center | baseline;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;stretch (default): items are stretched to fill the container&lt;/li&gt;
&lt;li&gt;flex-start: items are placed at the start of the cross axis&lt;/li&gt;
&lt;li&gt;flex-end: items are placed at the end of the cross axis&lt;/li&gt;
&lt;li&gt;center: items are centered in the cross-axis&lt;/li&gt;
&lt;li&gt;baseline: items are aligned such as their baselines align&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;align-content&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Used to control or distribute space along the cross axis, but only when you have multiple rows or columns.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;align-content: center;&lt;/code&gt; property example&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FjzlV0rD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/align-content_center.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FjzlV0rD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/align-content_center.png" alt="align-content center" width="880" height="548"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container {
    align-content: flex-start | flex-end | center | space-between | space-around | space-evenly;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;flex-start: items are pushed to the start of the container&lt;/li&gt;
&lt;li&gt;flex-end: items are pushed to the end of the container&lt;/li&gt;
&lt;li&gt;center: items are centered in the container&lt;/li&gt;
&lt;li&gt;space-between: items are evenly distributed; the first line is at the start of the container while the last one is at the end&lt;/li&gt;
&lt;li&gt;space-around: items are evenly distributed with equal space around each line&lt;/li&gt;
&lt;li&gt;space-evenly: elements are evenly distributed with equal space around them&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;gap, row-gap, column-gap&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This property allows you to control the space between flex items. Please note that it applies only to the space &lt;strong&gt;between items&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gap: 25px;&lt;/code&gt; property example&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rsDKobXC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/control-the-space-between-flex-items.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rsDKobXC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blogct.creative-tim.com/blog/content/images/2021/11/control-the-space-between-flex-items.png" alt="property example" width="880" height="269"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container {
    gap: 25px; /* both row-gap and column-gap */
    gap: 25px 50px; /* both row-gap and column-gap */
    row-gap: 25px;
    column-gap: 50x;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#32-children-properties-items-inside-a-container"&gt;
  &lt;/a&gt;
  3.2. Children Properties (items inside a container)
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;order&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This property allows you to change the order of the items displayed inside a container. The default value for each item is '0'.&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.item {
    order: 5;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;flex-grow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As the name suggests, this property will make the item grow to fill the container's free space. The default value for each item is '0'.&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.item {
    flex-grow: 4;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;flex-shrink&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is similar to the previous property with the difference that the item will shrink, not grow, in order to fit the container's space. The default value for each item is '1'.&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.item {
    flex-shrink: 3;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;flex-basis&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This property will allow you to set the initial size of an item. The default value is 'auto'.&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.item { 
    flex-basis: content;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;flex&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is actually a shorthand property for: flex-grow, flex-shrink and flex-basis. The default value is '0 1 auto'.&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.item {
    flex: 0 1 100px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;align-self&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This property allows you to override the alignment of an item even if the 'align-items' property is used.&lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.item {
    align-self: center;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We know that creating responsive designs and accomodating UI in different screen sizes can be a real struggle, so we hope you will find this article useful for your future projects. Flexbox can ease up your work for creating beautiful designs by manipulating the elements' width, height, and order. The process of creating the layouts for your websites will be a ‘piece of cake’ if you learn to take advantage of all the benefits that Flexbox can offer.&lt;/p&gt;

</description>
      <category>css</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>NgRx Tips I Needed in the Beginning</title>
      <author>Marko Stanimirović</author>
      <pubDate>Wed, 10 Nov 2021 10:51:06 +0000</pubDate>
      <link>https://dev.to/this-is-angular/ngrx-tips-i-needed-in-the-beginning-4hno</link>
      <guid>https://dev.to/this-is-angular/ngrx-tips-i-needed-in-the-beginning-4hno</guid>
      <description>&lt;p&gt;&lt;em&gt;Cover photo by &lt;a href="https://unsplash.com/photos/c1Jp-fo53U8"&gt;Léonard Cotte&lt;/a&gt; on Unsplash.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This article contains a list of tips and best practices for using the &lt;code&gt;@ngrx/store&lt;/code&gt; and &lt;code&gt;@ngrx/effects&lt;/code&gt; libraries. The list is based on the usual NgRx mistakes I've seen many times (some of which I've made myself) and on the great talks and articles that you can find in the &lt;a href="#resources"&gt;resources&lt;/a&gt; section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contents"&gt;
  &lt;/a&gt;
  Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#store-tips"&gt;Store Tips&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#put-global-state-in-a-single-place"&gt;Put global state in a single place&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dont-put-the-local-state-in-the-global-store"&gt;Don't put the local state in the global store&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-selectors-for-the-derived-state"&gt;Use selectors for the derived state&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-view-model-selectors"&gt;Use view model selectors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#treat-actions-as-unique-events"&gt;Treat actions as unique events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#group-actions-by-source"&gt;Group actions by source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dont-dispatch-actions-conditionally"&gt;Don't dispatch actions conditionally&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-reusable-reducers"&gt;Create reusable reducers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#be-careful-with-facades"&gt;Be careful with facades&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#effects-tips"&gt;Effects Tips&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#name-effects-like-functions"&gt;Name effects like functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#keep-effects-simple"&gt;Keep effects simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dont-create-boiler-effects"&gt;Don't create "boiler" effects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#apply-single-responsibility-principle"&gt;Apply single responsibility principle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#apply-good-action-hygiene"&gt;Apply good action hygiene&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#resources"&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#peer-reviewers"&gt;Peer Reviewers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#store-tips"&gt;
  &lt;/a&gt;
  Store Tips
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#put-global-state-in-a-single-place"&gt;
  &lt;/a&gt;
  Put global state in a single place
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Try to keep a global state of your application in a single place - NgRx store.&lt;/strong&gt; Having state spread across multiple stateful services makes an application harder to maintain. It also frequently leads to these services "re-storing" a derived state, which makes it harder to understand where the actual source of truth for a specific data lives.&lt;/p&gt;

&lt;p&gt;However, if you are in the process of migrating your application to NgRx, then it's fine to keep legacy stateful services as a temporary solution.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#dont-put-the-local-state-in-the-global-store"&gt;
  &lt;/a&gt;
  Don't put the local state in the global store
&lt;/h3&gt;

&lt;p&gt;The local state is tied to the lifecycle of a particular component. It is initialized and managed during the component lifetime and cleaned up when the component is destroyed.&lt;/p&gt;

&lt;p&gt;It's completely fine to store the local state in the component and manage it imperatively. However, if you're already using a reactive global state management solution such as NgRx store, then consider using a reactive solution for the local state management such as &lt;code&gt;@ngrx/component-store&lt;/code&gt;. It has many powerful features and fits perfectly with the global NgRx store.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#use-selectors-for-derived-state"&gt;
  &lt;/a&gt;
  Use selectors for derived state
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Don't put the derived state in the store, use selectors instead.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's first see the reducer that manages the state with the derived value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;musiciansReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musiciansPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// `filteredMusicians` is derived from `musicians` and `query`&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filteredMusicians&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;musicians&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;filteredMusicians&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The value of &lt;code&gt;filteredMusicians&lt;/code&gt; is derived from the &lt;code&gt;query&lt;/code&gt; and &lt;code&gt;musicians&lt;/code&gt; array. If you decide to keep the derived value in the store, then you should update it every time one of the values from which it is derived changes. The state will be larger, the reducer will contain additional logic, and you can easily forget to add filtering logic in another reducer that updates &lt;code&gt;query&lt;/code&gt; or &lt;code&gt;musicians&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The right way to handle the derived state is via selectors.&lt;/strong&gt; The selector that returns filtered musicians will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selectFilteredMusicians&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;selectAllMusicians&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;selectMusicianQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musicians&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;musicians&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And &lt;code&gt;musiciansReducer&lt;/code&gt; will now be much simpler:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;musiciansReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musiciansPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#use-view-model-selectors"&gt;
  &lt;/a&gt;
  Use view model selectors
&lt;/h3&gt;

&lt;p&gt;View model selector combines other selectors to return all state chunks required for a particular view. It's a great way to make a container component cleaner by having a single selector per container. Besides that, view model selectors provide additional benefits.&lt;/p&gt;

&lt;p&gt;Let's first see what the container component will look like without the view model selector:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="c1"&gt;// the value of each Observable is unwrapped via `async` pipe&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;musician-search [query]="query$ | async"&amp;gt;&amp;lt;/musician-search&amp;gt;

    &amp;lt;musician-list
      [musicians]="musicians$ | async"
      [activeMusician]="activeMusician$ | async"
    &amp;gt;&amp;lt;/musician-list&amp;gt;

    &amp;lt;musician-details
      [musician]="activeMusician$ | async"
    &amp;gt;&amp;lt;/musician-details&amp;gt;
  `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MusiciansComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// select all state chunks required for the musicians container&lt;/span&gt;
  &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;musicians$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectFilteredMusicians&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;query$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectMusiciansQuery&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;activeMusician$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectActiveMusician&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are several drawbacks of this approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The size of the container component increases with the number of required state chunks.&lt;/li&gt;
&lt;li&gt;Testing is harder - there can be many selectors to mock.&lt;/li&gt;
&lt;li&gt;There are multiple subscriptions in the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's now create a view model selector for this container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selectMusiciansPageViewModel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createSelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;selectFilteredMusicians&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;selectMusiciansQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;selectActiveMusician&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musicians&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;activeMusician&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;musicians&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;activeMusician&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the container now looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="c1"&gt;// single subscription in the template via `async` pipe&lt;/span&gt;
  &lt;span class="c1"&gt;// access to the view model properties via `vm` alias&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;ng-container *ngIf="vm$ | async as vm"&amp;gt;
      &amp;lt;musician-search [query]="vm.query"&amp;gt;&amp;lt;/musician-search&amp;gt;

      &amp;lt;musician-list
        [musicians]="vm.musicians"
        [activeMusician]="vm.activeMusician"
      &amp;gt;&amp;lt;/musician-list&amp;gt;

      &amp;lt;musician-details
        [musician]="vm.activeMusician"
      &amp;gt;&amp;lt;/musician-details&amp;gt;
    &amp;lt;/ng-container&amp;gt;
  `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MusiciansComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// select the view model&lt;/span&gt;
  &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;vm$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectMusiciansPageViewModel&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The component is now smaller and easier for testing. Also, there is a single subscription in the template.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#treat-actions-as-unique-events"&gt;
  &lt;/a&gt;
  Treat actions as unique events
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Treat NgRx actions as unique events, not as commands, and don't reuse them.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Commands can be fine for simple and isolated features. However, they can lead to dirty code and imply performance issues for complex functionalities that consume multiple feature states. Let's now walk through the example, to understand the importance of treating actions as unique events (a.k.a. good action hygiene).&lt;/p&gt;

&lt;p&gt;There is a straightforward NgRx flow for pages that display a list of entities:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Dispatch the action to load the entity collection on component initialization.&lt;/li&gt;
&lt;li&gt;Listen to this action in effect, load entities from the API, and return new action with loaded entities as a payload.&lt;/li&gt;
&lt;li&gt;Create a case reducer that will listen to the action returned from the effect and add loaded entities to the state.&lt;/li&gt;
&lt;li&gt;Finally, select entities from the store and display them in the template:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SongsComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// select songs from the store&lt;/span&gt;
  &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;songs$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectSongs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// dispatch the `loadSongs` action on component initialization&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Songs] Load Songs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this works fine. There is no need to change anything at first. However, what if we want to load another collection that is needed for a particular container component. In this example, imagine that we want to show the composer for each loaded song. If we treat actions as commands, then the &lt;code&gt;ngOnInit&lt;/code&gt; method of &lt;code&gt;SongsComponent&lt;/code&gt; will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Songs] Load Songs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Composers] Load Composers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we come to another very important rule: &lt;strong&gt;Don't dispatch multiple actions sequentially.&lt;/strong&gt; Sequentially dispatched actions can lead to unexpected intermediate states and cause unnecessary event loop cycles.&lt;/p&gt;

&lt;p&gt;It would be much better to dispatch single action indicating that the user has opened the songs page, and listen to that action in both &lt;code&gt;loadSongs$&lt;/code&gt; and &lt;code&gt;loadComposers$&lt;/code&gt; effects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Songs Page] Opened&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;"Songs Page" is the source of this action (it's dispatched from the songs page) and "Opened" is the name of the event (the songs page is opened).&lt;/p&gt;

&lt;p&gt;This brings us to a new rule: &lt;strong&gt;Be consistent in naming actions, use "[Source] Event" pattern.&lt;/strong&gt; Also, be descriptive in naming actions. It could help a lot in application maintenance, especially for catching bugs.&lt;/p&gt;

&lt;p&gt;If we check the Redux DevTools for this example when actions are treated as unique events, we'll see something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[Login Page] Login Form Submitted
[Auth API] User Logged in Successfully
[Songs Page] Opened
[Songs API] Songs Loaded Successfully
[Composers API] Composers Loaded Successfully
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we see a list of well-described actions, we can easily conclude what happened in our application:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The user submitted a login form.&lt;/li&gt;
&lt;li&gt;Auth API responded that the login was successful.&lt;/li&gt;
&lt;li&gt;The user opened the songs page.&lt;/li&gt;
&lt;li&gt;Songs successfully loaded from the Song API.&lt;/li&gt;
&lt;li&gt;Composers successfully loaded from the Composers API.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Unfortunately, this is not the case with commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[Auth] Login
[Auth] Login Success
[Songs] Load Songs
[Composers] Load Composers
[Songs] Load Songs Success
[Composers] Load Composers Success
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Commands can be dispatched from multiple places, so we can't figure out what their source is.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#group-actions-by-source"&gt;
  &lt;/a&gt;
  Group actions by source
&lt;/h3&gt;

&lt;p&gt;We saw in the previous example that one action can cause changes in multiple feature states. Therefore, do not group actions by feature state, but group them by source.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create action file per source.&lt;/strong&gt; Here are some examples of action files grouped by source:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// songs-page.actions.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;opened&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Songs Page] Opened&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;searchSongs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Songs Page] Search Songs Button Clicked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addComposer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Songs Page] Add Composer Form Submitted&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;composer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Composer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// songs-api.actions.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;songsLoadedSuccess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Songs API] Songs Loaded Successfully&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Song&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;songsLoadedFailure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Songs API] Failed to Load Songs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;errorMsg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// composers-api.actions.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;composerAddedSuccess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Composers API] Composer Added Successfully&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;composer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Composer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;composerAddedFailure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Composers API] Failed to Add Composer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;errorMsg&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// composer-exists-guard.actions.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canActivate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[Composer Exists Guard] Can Activate Entered&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;composerId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#dont-dispatch-actions-conditionally"&gt;
  &lt;/a&gt;
  Don't dispatch actions conditionally
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Don't dispatch actions conditionally based on the state value.&lt;/strong&gt; Move the condition to the effect or reducer instead. This tip also relates to good action hygiene.&lt;/p&gt;

&lt;p&gt;Let's first look at the case when an action is dispatched based on the state value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SongsComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectSongs&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// if the songs are not loaded&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// then dispatch the `loadSongs` action&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songsActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadSongs&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
      &lt;span class="nx"&gt;take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, the &lt;code&gt;loadSongs&lt;/code&gt; action is dispatched if the songs have not already been loaded. However, there is a better way to achieve the same result but to keep the component clean. We can move this condition to the effect:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;loadSongsIfNotLoaded$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// when the songs page is opened&lt;/span&gt;
    &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songsPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="c1"&gt;// then select songs from the store&lt;/span&gt;
    &lt;span class="nx"&gt;concatLatestFrom&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectSongs&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="c1"&gt;// and check if the songs are loaded&lt;/span&gt;
    &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(([,&lt;/span&gt; &lt;span class="nx"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="c1"&gt;// if not, load songs from the API&lt;/span&gt;
    &lt;span class="nx"&gt;exhaustMap&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;songsService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSongs&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;songsApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;songsLoadedSuccess&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;songs&lt;/span&gt; &lt;span class="p"&gt;})),&lt;/span&gt;
        &lt;span class="nx"&gt;catchError&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songsApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;songsLoadedFailure&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, the component will look much cleaner:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SongsComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songsPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#create-reusable-reducers"&gt;
  &lt;/a&gt;
  Create reusable reducers
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Use a single case reducer when multiple actions trigger the same state change:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;composersReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// case reducer can listen to multiple actions&lt;/span&gt;
  &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;composerExistsGuardActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canActivate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;composersPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;songsPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, if any of these actions require a different state change, don't add additional logic to the existing case reducer as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;composersReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;composerExistsGuardActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canActivate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;composersPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;songsPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="c1"&gt;// `composerExistsGuardActions.canActivate` action requires&lt;/span&gt;
      &lt;span class="c1"&gt;// different state change&lt;/span&gt;
      &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;composerExistsGuardActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canActivate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entities&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;composerId&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead, create a new case reducer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;composersReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;composersPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;songsPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="c1"&gt;// `composerExistsGuardActions.canActivate` action is moved&lt;/span&gt;
  &lt;span class="c1"&gt;// to a new case reducer&lt;/span&gt;
  &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;composerExistsGuardActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canActivate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;composerId&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entities&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;composerId&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#be-careful-with-facades"&gt;
  &lt;/a&gt;
  Be careful with facades
&lt;/h3&gt;

&lt;p&gt;I used facades as NgRx store wrappers before, but I stopped, and here are several reasons why:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the Redux pattern is not your cup of tea and you have a need to wrap it in services, then you should take a look at service-based state management solutions such as Akita or NGXS (or use &lt;code&gt;@ngrx/component-store&lt;/code&gt; for the global state as well).&lt;/li&gt;
&lt;li&gt;Using facades doesn't make much sense when view model selectors are used and when good action hygiene is applied. You will have an extra layer for testing and maintenance, without any benefit.&lt;/li&gt;
&lt;li&gt;Without strict rules in the coding guide, facades leave plenty of space for abuse (e.g. performing side effects).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, if a container component has a local state but also uses a global state, then consider using the ComponentStore as a dedicated facade for that container. In that case, ComponentStore will manage the local state, but will also select global state slices and/or dispatch actions to the global store.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#effects-tips"&gt;
  &lt;/a&gt;
  Effects Tips
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#name-effects-like-functions"&gt;
  &lt;/a&gt;
  Name effects like functions
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Name the effects based on what they are doing, not based on the action they are listening to.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If we name the effect based on the action it listens to, it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// the name of the effect is the same as the action it listens to&lt;/span&gt;
&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;addComposerSuccess$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;composersApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;composerAddedSuccess&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Composer saved successfully!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are at least two drawbacks of this approach. The first is that we cannot conclude what this effect does based on its name. The second is that it is not in accordance with open-closed principle - if we want to trigger the same effect for another action, we should change its name. However, if we name this effect as a function (&lt;code&gt;showSaveComposerSuccessAlert&lt;/code&gt;), the previously mentioned drawbacks will be solved.&lt;/p&gt;

&lt;p&gt;For example, if we want to display the same success alert when the composer is successfully updated, we only need to pass the &lt;code&gt;composerUpdatedSuccess&lt;/code&gt; action to the &lt;code&gt;ofType&lt;/code&gt; operator, without having to change the effect name:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// the effect name describes what the effect does&lt;/span&gt;
&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;showSaveComposerSuccessAlert$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;composersApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;composerAddedSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// new action is added here&lt;/span&gt;
        &lt;span class="c1"&gt;// the rest of the effect remains the same&lt;/span&gt;
        &lt;span class="nx"&gt;composersApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;composerUpdatedSuccess&lt;/span&gt;
      &lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Composer saved successfully!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#keep-effects-simple"&gt;
  &lt;/a&gt;
  Keep effects simple
&lt;/h3&gt;

&lt;p&gt;There are cases when we need to invoke multiple API calls to perform a side effect, or when the format of API response is not appropriate, so we need to restructure it. However, putting all that logic into the NgRx effect can lead to very unreadable code.&lt;/p&gt;

&lt;p&gt;Here is an example of an effect that requires two API calls to get all the necessary data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;loadMusician$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// when the musician details page is opened&lt;/span&gt;
    &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musicianDetailsPage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="c1"&gt;// then select musician id from the route&lt;/span&gt;
    &lt;span class="nx"&gt;concatLatestFrom&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectMusicianIdFromRoute&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;concatMap&lt;/span&gt;&lt;span class="p"&gt;(([,&lt;/span&gt; &lt;span class="nx"&gt;musicianId&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// and load musician from the API&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;musiciansResource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMusician&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musicianId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="c1"&gt;// wait for musician to load&lt;/span&gt;
        &lt;span class="nx"&gt;mergeMap&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;musician&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// then load band from the API&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bandsResource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musician&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bandId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="c1"&gt;// append band name to the musician&lt;/span&gt;
            &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;band&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;musician&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;bandName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;band&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
          &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="c1"&gt;// if the musician is successfully loaded&lt;/span&gt;
        &lt;span class="c1"&gt;// then return success action and pass musician as a payload&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;musician&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;musiciansApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;musicianLoadedSuccess&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;musician&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="c1"&gt;// if an error occurs, then return error action&lt;/span&gt;
        &lt;span class="nx"&gt;catchError&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musiciansApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;musicianLoadedFailure&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is large and unreadable effect, even with comments. However, we can move API calls to the service and make the effect more readable. The service method for getting the musician will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MusiciansService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;getMusician&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musicianId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Musician&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;musiciansResource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMusician&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musicianId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;mergeMap&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;musician&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bandsResource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musician&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bandId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;band&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;musician&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;bandName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;band&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It can be used from the &lt;code&gt;loadMusician$&lt;/code&gt; effect, but also from other parts of the application. The &lt;code&gt;loadMusician$&lt;/code&gt; effect now looks much more readable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;loadMusician$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musicianDetailsPage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;concatLatestFrom&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectMusicianIdFromRoute&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;concatMap&lt;/span&gt;&lt;span class="p"&gt;(([,&lt;/span&gt; &lt;span class="nx"&gt;musicianId&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// API calls are moved to the `getMusician` method&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;musiciansService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMusician&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musicianId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;musician&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;musiciansApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;musicianLoadedSuccess&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;musician&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;catchError&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musiciansApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;musicianLoadedFailure&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're working with legacy APIs, you're probably having trouble with an API that doesn't return responses in the format your application needs, so you need to convert them. Apply the same principle described above: move the API call along with the mapping logic to the service method and use it from the effect.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#dont-create-boiler-effects"&gt;
  &lt;/a&gt;
  Don't create "boiler" effects
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Don't create effects that map multiple related actions into a single action:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// this effect returns the `loadMusicians` action&lt;/span&gt;
&lt;span class="c1"&gt;// when current page or page size is changed&lt;/span&gt;
&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;invokeLoadMusicians$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;musiciansPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;changeCurrentPage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;musiciansPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;changePageSize&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;musiciansActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadMusicians&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// this effect loads musicians from the API&lt;/span&gt;
&lt;span class="c1"&gt;// when the `loadMusicians` action is dispatched&lt;/span&gt;
&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;loadMusicians$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;musiciansAction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadMusicians&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;concatLatestFrom&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectMusiciansPagination&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;switchMap&lt;/span&gt;&lt;span class="p"&gt;(([,&lt;/span&gt; &lt;span class="nx"&gt;pagination&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;musiciansService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMusicians&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pagination&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="cm"&gt;/* ... */&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt; 
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because the &lt;code&gt;ofType&lt;/code&gt; operator can accept a sequence of actions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;loadMusicians$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// `ofType` accepts a sequence of actions&lt;/span&gt;
    &lt;span class="c1"&gt;// and there is no need for "boiler" effects (and actions)&lt;/span&gt;
    &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;musiciansPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;changeCurrentPage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;musiciansPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;changePageSize&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;concatLatestFrom&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectMusiciansPagination&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;switchMap&lt;/span&gt;&lt;span class="p"&gt;(([,&lt;/span&gt; &lt;span class="nx"&gt;pagination&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;musiciansService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMusicians&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pagination&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="cm"&gt;/* ... */&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt; 
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#apply-single-responsibility-principle"&gt;
  &lt;/a&gt;
  Apply single responsibility principle
&lt;/h3&gt;

&lt;p&gt;In other words, &lt;strong&gt;don't perform multiple side effects within a single NgRx effect.&lt;/strong&gt; Effects with single responsibility are more readable and easier to maintain.&lt;/p&gt;

&lt;p&gt;Let's first see the NgRx effect that preforms two side effects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;deleteSong$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songsPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteSong&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;concatMap&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;songId&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// side effect 1: delete the song&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;songsService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteSong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;songsApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;songDeletedSuccess&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;songId&lt;/span&gt; &lt;span class="p"&gt;})),&lt;/span&gt;
        &lt;span class="nx"&gt;catchError&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// side effect 2: display an error alert in case of failure&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songsApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;songDeletedFailure&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we apply the single responsibility principle, we'll have two NgRx effects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// effect 1: delete the song&lt;/span&gt;
&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;deleteSong$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songsPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteSong&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;concatMap&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;songId&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;songsService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteSong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;songsApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;songDeletedSuccess&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;songId&lt;/span&gt; &lt;span class="p"&gt;})),&lt;/span&gt;
        &lt;span class="nx"&gt;catchError&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songsApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;songDeletedFailure&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// effect 2: show an error alert&lt;/span&gt;
&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;showErrorAlert$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;songsApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteSongFailure&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here is another advantage: &lt;strong&gt;Effects with single responsibility are reusable.&lt;/strong&gt; We can use the &lt;code&gt;showErrorAlert$&lt;/code&gt; effect for any action that requires an error alert to be shown.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#apply-good-action-hygiene"&gt;
  &lt;/a&gt;
  Apply good action hygiene
&lt;/h3&gt;

&lt;p&gt;The same principles described for actions that are dispatched via store should be applied to the effects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don't return an array of actions (commands) from the effect.&lt;/li&gt;
&lt;li&gt;Return an unique action that can be handled by multiple reducers and/or effects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's first see an example where multiple actions are returned from the effect:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;loadAlbum$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;albumsActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadCurrentAlbum&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;concatLatestFrom&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectAlbumIdFromRoute&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="nx"&gt;concatMap&lt;/span&gt;&lt;span class="p"&gt;(([,&lt;/span&gt; &lt;span class="nx"&gt;albumId&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;albumsService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAlbum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;albumId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="c1"&gt;// an array of actions is returned on successful load&lt;/span&gt;
        &lt;span class="c1"&gt;// then, `loadSongsSuccess` is handled by `songsReducer`&lt;/span&gt;
        &lt;span class="c1"&gt;// and `loadComposersSuccess` is handled by `composersReducer`&lt;/span&gt;
        &lt;span class="nx"&gt;mergeMap&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;composers&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="nx"&gt;songsActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadSongsSuccess&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;songs&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
          &lt;span class="nx"&gt;composersActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadComposersSuccess&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;composers&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="p"&gt;]),&lt;/span&gt;
        &lt;span class="nx"&gt;catchError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have seen similar effects many times. This happens when actions are treated as commands. You can see the drawbacks of this approach in the &lt;a href="#treat-actions-as-unique-events"&gt;Treat actions as unique events&lt;/a&gt; section.&lt;/p&gt;

&lt;p&gt;However, if we apply good action hygiene, the &lt;code&gt;loadAlbum$&lt;/code&gt; effect will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;loadAlbum$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// when the album details page is opened&lt;/span&gt;
    &lt;span class="nx"&gt;ofType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;albumDetailsPageActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;opened&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="c1"&gt;// then select album id from the route&lt;/span&gt;
    &lt;span class="nx"&gt;concatLatestFrom&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selectAlbumIdFromRoute&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="nx"&gt;concatMap&lt;/span&gt;&lt;span class="p"&gt;(([,&lt;/span&gt; &lt;span class="nx"&gt;albumId&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// and load current album from the API&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;albumsService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAlbum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;albumId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="c1"&gt;// return unique action when album is loaded successfully&lt;/span&gt;
        &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;composers&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;albumsApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;albumLoadedSuccess&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;composers&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;catchError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* ... */&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, the &lt;code&gt;albumLoadedSuccess&lt;/code&gt; action can be handled by the reducer(s) and/or other effects. In this example, it will be handled by &lt;code&gt;songsReducer&lt;/code&gt; and &lt;code&gt;composersReducer&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// songs.reducer.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;songsReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;albumsApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;albumLoadedSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;songs&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}))&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// composers.reducer.ts&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;composersReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;albumsApiActions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;albumLoadedSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;composers&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;composers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}))&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;NgRx provides the ability to implement the same functionality in many different ways. However, some of the ways have emerged over time as best practices and you should consider applying them in your project to increase code quality, performance, and maintainability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/JmnsEvoy-gY"&gt;Good Action Hygiene with NgRx&lt;/a&gt; by Mike Ryan&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/v5WSUE1_YHM?t=129"&gt;Rethinking State in Angular Applications&lt;/a&gt; by Alex Okrushko&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://youtu.be/RXuSDiLmcN0"&gt;Building Sub States with NgRx Selectors&lt;/a&gt; by Brandon Roberts&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://brandonroberts.dev/blog/posts/2020-12-14-maximizing-simplifying-component-views-ngrx-selectors"&gt;Maximizing and Simplifying Component Views with NgRx Selectors&lt;/a&gt; by Brandon Roberts&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://timdeschryver.dev/blog/solving-angular-slow-renders-with-ngrx-selectors"&gt;Solving Angular Slow Renders with NgRx Selectors&lt;/a&gt; by Tim Deschryver&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://timdeschryver.dev/blog/start-using-ngrx-effects-for-this"&gt;Start Using NgRx Effects for This&lt;/a&gt; by Tim Deschryver&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#peer-reviewers"&gt;
  &lt;/a&gt;
  Peer Reviewers
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/AlexOkrushko"&gt;Alex Okrushko&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/tim_deschryver"&gt;Tim Deschryver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/brandontroberts"&gt;Brandon Roberts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Big thanks to my teammates Brandon, Tim, and Alex for giving me helpful suggestions on this article!&lt;/p&gt;

</description>
      <category>angular</category>
      <category>ngrx</category>
      <category>rxjs</category>
      <category>redux</category>
    </item>
    <item>
      <title>Building Apps With Bubble.io</title>
      <author>Linda Sebastian</author>
      <pubDate>Wed, 10 Nov 2021 10:50:19 +0000</pubDate>
      <link>https://dev.to/rocklinda/building-apps-with-bubbleio-289e</link>
      <guid>https://dev.to/rocklinda/building-apps-with-bubbleio-289e</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2PFtZ2z5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdsrrz7h4tdycrquz9nq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2PFtZ2z5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdsrrz7h4tdycrquz9nq.png" alt="low code icon" width="880" height="165"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to build an app but don't have any skills for coding or maybe you just know little, I think bubble.io is one of the answers. Bubble.io is one of the low-code development platforms, this amazing tool allows you to create a website application with just a few steps.&lt;/p&gt;

&lt;p&gt;You can go to the website [&lt;a href="https://bubble.io/welcome"&gt;https://bubble.io/welcome&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;Bubble Also provides you step by step how to use this platform, for websites and mobile web.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LJl-Lp7i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uf4xois350n18ljeli3a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LJl-Lp7i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uf4xois350n18ljeli3a.png" alt="Bubble lesson" width="880" height="405"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bubble Pricing is cheaper compared to other platforms.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JulxHSHa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8idkdjpkgpyrdwavwthe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JulxHSHa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8idkdjpkgpyrdwavwthe.png" alt="Bubble pricing" width="880" height="289"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even though bubble.io is a great platform but there is some concerns about scalability, speed performance, and security. I have my list of pros and cons about this platform.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Very easy just drag and drop&lt;/li&gt;
&lt;li&gt;Building apps faster compare than traditional hand-coding&lt;/li&gt;
&lt;li&gt;There are s many free plugins that you can use&lt;/li&gt;
&lt;li&gt;You don't have to set up a server or hosting&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Speed performance is not so good&lt;/li&gt;
&lt;li&gt;I'm not sure if bubble.io can handle such complex logic&lt;/li&gt;
&lt;li&gt;There's no versioning! If you did something wrong in production there's no going back.&lt;/li&gt;
&lt;li&gt;Scalability. The capacity limit for production planning is just 50 GB.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I think that's my impression of bubble.io. Cheers!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>WebAssembly. How to make the web faster than light</title>
      <author>Sergii Lischuk</author>
      <pubDate>Wed, 10 Nov 2021 10:45:49 +0000</pubDate>
      <link>https://dev.to/leefrost/webassembly-how-to-make-the-web-faster-than-light-3bl2</link>
      <guid>https://dev.to/leefrost/webassembly-how-to-make-the-web-faster-than-light-3bl2</guid>
      <description>&lt;p&gt;Today is very important to work with the information in fast and understandable manner. If in case of desktop application situation is fine with it, in case of Web we get some troubles - all data are under control of JS, which is fast but not in the top of the performance charts. Here, on the scene, we meet WebAssembly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-future-is-coming"&gt;
  &lt;/a&gt;
  The future is coming.
&lt;/h3&gt;

&lt;p&gt;Evolution is everywhere. Even in web stack, there are changes which were made to update the current status of development up to the new edge. We are involved in this process not only as spectators but as an essential users - we got async/await, promises, iterators, etc. Now, from March 2017 (for Chrome) we can use WebAssembly directly in our web apps. But let’s start from the beginning - "Why?", "What?" and "How?" are our best friends in our way as WebAssembly ambassadors.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-webassembly"&gt;
  &lt;/a&gt;
  What is WebAssembly?
&lt;/h3&gt;

&lt;p&gt;WebAssembly (WASM) - its a new binary format which allows us to run our code directly in our browsers.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem
&lt;/h4&gt;

&lt;p&gt;Why it was invented and what are the problems that was solved by WASM? In general - our code should be faster in our browsers. But it is not a full problem - it consists of next sub-problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Our code should be faster for JS (almost like a native code in CPU);&lt;/li&gt;
&lt;li&gt;Zero configuration - solution should be “out of the box” - no special installations, the only browser required;&lt;/li&gt;
&lt;li&gt;Security - new technology should be safe and run inside sandbox
Cross-platform - desktop, mobile, tablet;&lt;/li&gt;
&lt;li&gt;Easy to use and develop;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#what-is-wrong-with-js"&gt;
  &lt;/a&gt;
  What is wrong with JS?
&lt;/h4&gt;

&lt;p&gt;Nothing. But due to its design, it is not possible to make it faster. A long way of development and combination of interpreter and compiler at runtime makes JS ‘hardly predictable’ in execution. &lt;/p&gt;

&lt;p&gt;For example, you have a function &lt;code&gt;foo(a, b)&lt;/code&gt;. And you run this function a lot of times only with numbers. After some time of execution, interpreter push this code to the compiler, and the compiler provides machine code, which is super fast for calculation. But! If you pass a string as parameter to &lt;code&gt;foo(a, b)&lt;/code&gt;, an engine will make ‘de-optimization’: this function will be shifted back to an interpreter and ready-state machine code will be thrown away.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4eJD1kKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ly4z7o3ehodljxejztun.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4eJD1kKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ly4z7o3ehodljxejztun.png" alt="JS runtime" width="480" height="285"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-webassembly-will-help-us"&gt;
  &lt;/a&gt;
  How WebAssembly will help us?
&lt;/h3&gt;

&lt;p&gt;If web app performance is our main goal then we are speaking about code optimizations. If it is not enough, and we are limited by JS engine, we should move code responsible for the high-pressure operation to the WASM module. We re-write this code part to C or Rust and after compilation, we will get some &lt;em&gt;.wasm&lt;/em&gt; file. This file we will leave on the server and provide access to it from the browser. “Ok. But how it will work in browser?” — right question now. Next, inside our JS code, we request this module from the server. When it will be loaded and available, JS engine will call methods from &lt;em&gt;.wasm&lt;/em&gt; as well as the functions from other modules. The code in this &lt;em&gt;.wasm&lt;/em&gt; module will be executed in its own sandbox and result will be returned back to JS. &lt;/p&gt;

&lt;p&gt;We can think about the WASM like about native modules in JS — but in this case code inside WASM module is executed not in JS engine.&lt;/p&gt;

&lt;p&gt;WASM has some restrictions — it is only can be accessible via JS. So, here is a bottleneck — heavyweight operations will be executed faster, but we got some costs for passing and receiving data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;WASM is aimed to fix troubles, described above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Speed: WASM executed almost with the speed of machine code on the CPU;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Effectively: binary format, fast parsing, and compilation. All heavyweight operation will be hidden in WASM module;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Security: sandbox model of execution;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An open standard: WASM has its own format and specification. They are available with RFC on the Internet;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The code, inside of the module can be debugged natively from the browser console.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On my opinion WASM is the great feature. With smart usage, working with complicated calculation will be painless for us and for the browser as well. So, apps, which are working with Graphics or CV becomes a native part of the web - and it is really cool news.&lt;/p&gt;

&lt;p&gt;Stay tuned!&lt;/p&gt;

</description>
      <category>webassembly</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Why Chatwoot is My Favorite Open Source Project? Integrations, Integrations, and Integrations.</title>
      <author>Mohmed Ishak</author>
      <pubDate>Wed, 10 Nov 2021 10:44:57 +0000</pubDate>
      <link>https://dev.to/ishakmohmed/why-chatwoot-is-my-favorite-open-source-project-integrations-integrations-and-integrations-4b81</link>
      <guid>https://dev.to/ishakmohmed/why-chatwoot-is-my-favorite-open-source-project-integrations-integrations-and-integrations-4b81</guid>
      <description>&lt;p&gt;&lt;a href="https://aviyel.com/post/1328/why-chatwoot-is-my-favorite-open-source-project-integrations-integrations-and-integrations"&gt;Full article available on Aviyel for free (leave a like here before you check it out on Aviyel)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you’re a business owner or you work in a large team, you’ll probably be overwhelmed by the number of messages that you receive from customers via mail, Telegram, Twitter, Facebook (recently rebranded to Meta) Messenger, and so on. &lt;a href="https://aviyel.com/post/184/the-ultimate-open-source-alternative-to-manage-customer-engagement-chatwoot-is-here"&gt;Chatwoot&lt;/a&gt; solves this problem by &lt;a href="https://aviyel.com/post/802/how-to-integrate-facebook-whatsapp-and-slack-into-your-customer-engagement-platform"&gt;integrating all your social media platforms&lt;/a&gt; into a single dashboard so you can connect with your customers from one app. It is an open-source project so you can be assured with engineers working 24/7 to improve this product from all over the world. Moreover, the live chat feature allows your agents to communicate with the customers instantly, leaving no chance for user dissatisfaction.&lt;/p&gt;

&lt;p&gt;Plus, it ensures that all customers from all different types of social media would not be neglected. This is important because the success of a business in my opinion starts with you taking care of the customer and working backward.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You never build fancy software without knowing whether the customers need it first.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this post, I’ll take you through Chatwoot’s architecture and how you can integrate the self-hosting &lt;a href="https://aviyel.com/post/751/beginning-with-chatwoot-an-open-source-customer-engagement-platform"&gt;customer engagement platform&lt;/a&gt; with your social media channels.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#chatwoot-architecture"&gt;
  &lt;/a&gt;
  Chatwoot Architecture
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xYJ26Lxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipexwqsgguca3y9g7007.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xYJ26Lxw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipexwqsgguca3y9g7007.png" alt="Mohmed Ishak" width="760" height="428"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To know more, you may refer to the &lt;a href="https://www.chatwoot.com/docs/self-hosted/deployment/architecture"&gt;architecture written in official docs&lt;/a&gt;. To run Chatwoot in production (means to deploy it live for public use), you need these components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chatwoot web servers (built using Ruby or Node.js)&lt;/li&gt;
&lt;li&gt;Chatwoot workers (such as Sidekiq for Ruby)&lt;/li&gt;
&lt;li&gt;PostgreSQL database&lt;/li&gt;
&lt;li&gt;Email service (such as SendGrid by Twilio)&lt;/li&gt;
&lt;li&gt;Object storage (such as AWS S3)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have got these parts in your application (which might look complicated in my article but I can assure you it’s not), Chatwoot will do its magic and allow you to seamlessly interact with a whole lot of customers effortlessly. There are two recommended methods for deploying Chatwoot which I don’t want to write here because they’re documented clearly in the official docs, and they are using &lt;a href="https://www.chatwoot.com/docs/self-hosted/deployment/heroku"&gt;Heroku&lt;/a&gt; or &lt;a href="https://www.chatwoot.com/docs/self-hosted/deployment/caprover"&gt;Caprover&lt;/a&gt;. You can also use &lt;a href="https://www.chatwoot.com/docs/self-hosted/deployment/docker"&gt;Docker&lt;/a&gt; which may get slightly complicated for beginners, but if you are a little friendly towards docker-compose and Nginx, you’re good to go.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-choose-chatwoot"&gt;
  &lt;/a&gt;
  Why Choose Chatwoot?
&lt;/h3&gt;

&lt;p&gt;Chatwoot doesn’t have any bloatware features, but only the ones you need. Here are some of the features of Chatwoot that bought me in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Integrations with platforms that businesses really use in 2021 include &lt;a href="https://aviyel.com/post/264/how-to-integrate-chatwoot-with-slack-rasa-dialogflow-and-deploy-on-facebook-whatsapp-or-twilio"&gt;Slack, Dialogflow, Calendly,&lt;/a&gt; Shopify, WooCommerce, WordPress, Stripe, FullContact, and so on.&lt;/li&gt;
&lt;li&gt;Create &lt;a href="https://www.chatwoot.com/docs/product/features/campaigns"&gt;campaigns&lt;/a&gt;: That means when you have a lot of contacts (customers) saved, you can select a list of users and send a one-time message such as festive greetings, promotions, etc. On the other hand, you can also create ongoing campaigns where Chatwoot would take a much personalized approach where you can send a certain message if a user stayed on your page for x minutes (and there’s a lot of variations of conditions you can create) by just clicking a couple of buttons in the simple UI.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kdecxzF1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99q1gxcopdzc9s2st3x6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kdecxzF1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99q1gxcopdzc9s2st3x6.png" alt="Mohmed Ishak" width="760" height="389"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.chatwoot.com/docs/user-guide/features/canned-responses"&gt;Canned responses&lt;/a&gt;: Basically, you don’t want to manually type out the repetitive responses to your customers. So you can set type ‘/’ followed by a shortcode which you will set such as “greet” to automatically fill the input box with the long greeting message.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.chatwoot.com/docs/product/others/interactive-messages"&gt;Interactive messages&lt;/a&gt;: With this, your customers wouldn’t only get text messages but also interactive ones where they can make selections, order a product, and so on in the chatbox itself.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D2b8jZd4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/meq1ij2lw9cjruad1f9r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D2b8jZd4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/meq1ij2lw9cjruad1f9r.png" alt="Mohmed Ishak" width="760" height="734"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;And a lot of other features like managing contacts easily, conversation workflow (users say something like ‘hi’ and a certain reply is given and the conversation is carried in this manner without you having to answer them), &lt;a href="https://aviyel.com/post/399/try-chatwoot-an-open-source-customer-engagement-suite-to-set-up-multilingual-live-chat-support"&gt;multilingual support&lt;/a&gt;, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#integrations-in-chatwoot"&gt;
  &lt;/a&gt;
  Integrations in Chatwoot
&lt;/h3&gt;

&lt;p&gt;First, let me show you how to integrate all your social media to Chatwoot’s powerful dashboard.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, register to Chatwoot &lt;a href="https://app.chatwoot.com/app/auth/signup"&gt;here&lt;/a&gt;. I believe there’s no need for me to explain this step-by-step as it could bore you (and I’m sure you would know how to register). You can also &lt;a href="https://aviyel.com/post/801/how-to-contribute-to-chatwoot-on-github"&gt;contribute to Chatwoot on Github&lt;/a&gt; easily.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oBHKon33--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zowtzzhhwkrsxkkdzg41.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oBHKon33--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zowtzzhhwkrsxkkdzg41.png" alt="Mohmed Ishak" width="760" height="427"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Upon registration, you will see your dashboard. If this dashboard looks complicated, trust me, this looks very clean compared to other alternatives to Chatwoot. Click “Inboxes” in the column to your left and then click “Integrations”.&lt;/li&gt;
&lt;li&gt;You’ll see options(s) such as Slack integrations and so on. As of writing this article, I only saw the Slack option being displayed as the other platforms are set to be integrated in the near future. If you want to integrate your Slack account, click connect for the Slack option. You can also use &lt;a href="https://aviyel.com/post/323/use-chatwoot-to-set-up-a-chatbot-with-rasa-and-dialogflow"&gt;Chatwoot with Rasa&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Enter your Slack URL in the displayed form, grant the required permission, and that’s it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/d4gwpPJGXtc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;With this, you can sync your Slack messages with Chatwoot in its dashboard. To connect with WhatsApp, Twitter, or other social platforms, you should click the same &lt;strong&gt;“Inboxes”&lt;/strong&gt; button like in the previous step and then click &lt;strong&gt;“Add Inbox”&lt;/strong&gt;. The rest of the steps are easy, just provide the information that is asked. For instance, if you select WhatsApp, you need to provide your phone number, Twilio Account SID, and a little more data and you’re good to go.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-chatwoot-to-your-system"&gt;
  &lt;/a&gt;
  Installing Chatwoot to Your System
&lt;/h3&gt;

&lt;p&gt;Now, I’ll explain how to install &lt;a href="https://aviyel.com/post/263/chatwoot-with-next-js"&gt;Chatwoot using Next.js&lt;/a&gt; because I believe that Next.js is most likely to be used by companies in 2021 to build websites as it has a bunch of powerful features such out of the box as code-splitting, server-side rendering, image optimization, etc.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Anyway, just like previous instructions that I’ve written in this article, click the same “Inboxes” button in the left column on your Chatwoot app and click “Add Inbox”. Then click “Website” because you want to integrate Chatwoot to your site.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rvKvAedK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqgjma6ye38q73l2rm8d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rvKvAedK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqgjma6ye38q73l2rm8d.png" alt="Mohmed Ishak" width="760" height="427"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fill up the necessary details such as your website URL, and so on. At the end of the step, you’ll be given a short script based on the information you’ve given like the following image. Refer to this &lt;a href="https://aviyel.com/post/263/chatwoot-with-next-js"&gt;source&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YDlcx_Mw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/040pur21afnjcurcmzuo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YDlcx_Mw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/040pur21afnjcurcmzuo.png" alt="Mohmed Ishak" width="760" height="417"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Remember the script Chatwoot gave you? In your project folder, add a file named chatwoot.js or whatever you want to call and paste the script (without script tag because we’re using Next.js, not vanilla JavaScript).&lt;/li&gt;
&lt;li&gt;Go to index.js file and add the script. Here’s a simple template.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Script&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/script&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;​​&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;​​&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="err"&gt;​​ &lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;​​ &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
         &lt;span class="nx"&gt;All&lt;/span&gt; &lt;span class="nx"&gt;implementation&lt;/span&gt; &lt;span class="nx"&gt;stay&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;usual&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;but&lt;/span&gt; &lt;span class="nx"&gt;just&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;script&lt;/span&gt; 
         &lt;span class="nx"&gt;below&lt;/span&gt;
       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
​​ &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/chatwoot.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="err"&gt;​​ &lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
​​&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;​​&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;​​&lt;/span&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Done. You’ll see a clickable blue button at the bottom right of your site which will pull up Chatwoot’s chat box and Chatwoot will be up and running in no time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ETh0yFTI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxlnw6jrbddqdlthluzh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ETh0yFTI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxlnw6jrbddqdlthluzh.png" alt="Mohmed Ishak" width="399" height="638"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s all for today. As you can see, Chatwoot is very powerful and convenient to use. Even if you don’t need this tool right now, do remember it as you’ll surely need it in the future when you build bigger projects or work in a larger team. If you find this article useful, drop a like and share this with your friends and the tech community that you’re in.&lt;/p&gt;

&lt;p&gt;Also, Aviyel is partnering with Chatwoot to scale open source projects within communities. You can checkout &lt;a href="https://aviyel.com/discussions"&gt;Aviyel discussions&lt;/a&gt; and follow their &lt;a href="https://twitter.com/aviyelhq?lang=en"&gt;Twitter&lt;/a&gt; space.&lt;/p&gt;

</description>
      <category>chatwoot</category>
      <category>react</category>
      <category>nextjs</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Build a Machine Learning API With Django Rest Framework: </title>
      <author>paulsaul621</author>
      <pubDate>Wed, 10 Nov 2021 10:40:24 +0000</pubDate>
      <link>https://dev.to/paulwababu/build-a-machine-learning-api-with-django-rest-framework-1fb</link>
      <guid>https://dev.to/paulwababu/build-a-machine-learning-api-with-django-rest-framework-1fb</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Finding the proper treatment, especially drug treatment, can be a difficult task. Whether you're looking for drugs to treat seasonal allergies, or you're treating a serious illness, collecting data on various aspects of patients and what treatments they best respond to can be vital for saving lives and increasing patient convenience. Here, we'll act as a data analyst compiling medical data on a set of patients all suffering from the same illness. During their treatment, each patient responded to one of five drug treatments&lt;/p&gt;

&lt;p&gt;In this article, we'll:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build a simple Decision Tree model to predict Drug Treatment with relatively high accuracy.&lt;/li&gt;
&lt;li&gt;Create an API with &lt;a href="https://www.django-rest-framework.org/"&gt;Django Rest Framework&lt;/a&gt; that will be used to consume the Decision Tree Model created.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#build-a-model"&gt;
  &lt;/a&gt;
  Build a Model
&lt;/h2&gt;

&lt;p&gt;Let us start by building and saving a machine learning model that will be later used to make predictions for our API.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dataset"&gt;
  &lt;/a&gt;
  Dataset
&lt;/h3&gt;

&lt;p&gt;Find the dataset for this model on my &lt;a href="https://raw.githubusercontent.com/paulwababu/datasets/main/drug200.csv"&gt;Github repo&lt;/a&gt;. The file is a CSV with data from different patients who received treatment for the same disease. The different drugs can be drugA, drugB, drugC, drugX, or drugY.&lt;/p&gt;

&lt;p&gt;Let’s get started with the exploration of the dataset.&lt;/p&gt;

&lt;p&gt;The first thing that should be done is to import dependencies. If you do not have the libraries installed, kindly do so before proceeding.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import pandas
from sklearn import tree
import pydotplus
from sklearn.tree import DecisionTreeClassifier
import matplotlib.pyplot as plt
import matplotlib.image as pltimg
from sklearn.metrics import classification_report, plot_confusion_matrix, plot_roc_curve
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import joblib
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we load the dataset using pandas:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;df = pandas.read_csv("https://raw.githubusercontent.com/paulwababu/datasets/main/drug200.csv")
print(df.head())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   Age Sex      BP Cholesterol  Na_to_K   Drug
0   23   F    HIGH        HIGH   25.355  drugY
1   47   M     LOW        HIGH   13.093  drugC
2   47   M     LOW        HIGH   10.114  drugC
3   28   F  NORMAL        HIGH    7.798  drugX
4   61   F     LOW        HIGH   18.043  drugY
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To make a decision tree, all data has to be numerical.&lt;/p&gt;

&lt;p&gt;We have to convert the non-numerical columns 'Gender', 'Cholesterol', and 'BP' into numerical values.&lt;/p&gt;

&lt;p&gt;Pandas have a map() method that takes a dictionary with information on how to convert the values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#Change string values into numerical values:
d = {'M': 1, 'F': 0}
df['Sex'] = df['Sex'].map(d)

d = {'HIGH': 0, 'LOW': 1, 'NORMAL': 2}
df['BP'] = df['BP'].map(d)

d = {'HIGH': 0, 'LOW': 1, 'NORMAL': 2}
df['Cholesterol'] = df['Cholesterol'].map(d)
print(df.head())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   Age  Sex  BP  Cholesterol  Na_to_K   Drug
0   23    0   0            0   25.355  drugY
1   47    1   1            0   13.093  drugC
2   47    1   1            0   10.114  drugC
3   28    0   2            0    7.798  drugX
4   61    0   1            0   18.043  drugY
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we have to separate the feature columns(independent variables) from the target column(dependent variable).&lt;/p&gt;

&lt;p&gt;The feature columns are the columns that we try to predict from, and the target column is the column with the values we try to predict.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#independent variables
features = ['Age', 'Sex', 'BP', 'Cholesterol', 'Na_to_K']
X = df[features]

#dependent variable
y = df['Drug']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;     Age  Sex  BP  Cholesterol  Na_to_K
0     23    0   0            0   25.355
1     47    1   1            0   13.093
2     47    1   1            0   10.114
3     28    0   2            0    7.798
4     61    0   1            0   18.043
..   ...  ...  ..          ...      ...
195   56    0   1            0   11.567
196   16    1   1            0   12.006
197   52    1   2            0    9.894
198   23    1   2            2   14.020
199   40    0   1            2   11.349

[200 rows x 5 columns]
0      drugY
1      drugC
2      drugC
3      drugX
4      drugY
       ...  
195    drugC
196    drugC
197    drugX
198    drugX
199    drugX
Name: Drug, Length: 200, dtype: object
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can create the actual decision tree, fit it with our details, and save a .png file on the computer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dtree = DecisionTreeClassifier()
dtree = dtree.fit(X, y)
data = tree.export_graphviz(dtree, out_file=None, feature_names=features)
graph = pydotplus.graph_from_dot_data(data)
graph.write_png('mydecisiontree2.png')

img=pltimg.imread('mydecisiontree2.png')
imgplot = plt.imshow(img)
plt.show()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#results-explained"&gt;
  &lt;/a&gt;
  Results Explained
&lt;/h2&gt;

&lt;p&gt;The decision tree uses your earlier decisions. Let us read the different aspects of the decision tree:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2nN8AEls--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636529767060/1QVk4HHoK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2nN8AEls--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636529767060/1QVk4HHoK.png" alt="mydecisiontree2.png" width="847" height="636"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#salt-to-potassium-ratio-natok"&gt;
  &lt;/a&gt;
  Salt to Potassium ratio (Na_to_K)
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Na_to_K &amp;lt;= 14.829&lt;/strong&gt; means that every patient with a sodium-potassium of 14.829 or lower will follow the True arrow (to the left), and the rest will follow the False arrow (to the right).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;gini = 0.694&lt;/strong&gt; refers to the quality of the split, where 0.0 would mean all of the samples got the same result, and 0.5 would mean that the split is done exactly in the middle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;samples = 200&lt;/strong&gt; means that there are 200 patients left at this point in the decision, which is all of them since this is the first step.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;value = [23, 16, 16, 54, 91]&lt;/strong&gt; means that of these 200 patients, 23 will get "drugY", 16 will get "drugB", 16 will get "drugC", 54 will get "drugX" and 91 will get "drugY",&lt;/p&gt;

&lt;p&gt;Note, to know these values, we ran:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print(df['Drug'].value_counts())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;drugY    91
drugX    54
drugA    23
drugB    16
drugC    16
Name: Drug, dtype: int64
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#predict-values"&gt;
  &lt;/a&gt;
  Predict Values
&lt;/h2&gt;

&lt;p&gt;We can use the Decision Tree to predict new values.&lt;/p&gt;

&lt;p&gt;Example: What prescription(among the five drugs: Y X A B and C) should a 68-year-old female with normal levels of cholesterol and BP and has salt to potassium level of 27.10 take?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print(dtree.predict([[68, 0, 2, 2, 27.10]]))
# ['drugY'] will be the output
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The system predicts drugY. If you follow the decision tree implemented above, you will arrive at drugY to! Sorry I cannot explain every aspect of the decision tree, its quite lengthy and is not within the scope of this tutorial. Let us now proceed to saving the model built&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Save the model
joblib_file = "DecisionTreeModel.joblib"
joblib.dump(dtree, joblib_file) 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can start the Django section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-an-api-with-django-rest-framework"&gt;
  &lt;/a&gt;
  Create an API With Django Rest Framework
&lt;/h2&gt;

&lt;p&gt;Following Python best practices, we will create a virtual environment for our project, and install the required packages.&lt;/p&gt;

&lt;p&gt;First, create the project directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir djangoapp
$ cd djangoapp

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, create a virtual environment and install the required packages.&lt;/p&gt;

&lt;p&gt;For macOS and Unix systems:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ python3 -m venv myenv
$ source myenv/bin/activate
(myenv) $ pip install django requests djangorestframework numpy joblib scikit-learn

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For Windows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ python3 -m venv myenv
$ myenv\Scripts\activate
(myenv) $ pip install django requests djangorestframework numpy joblib scikit-learn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-your-django-application"&gt;
  &lt;/a&gt;
  Setting Up Your Django Application
&lt;/h2&gt;

&lt;p&gt;First, navigate to the directory djangoapp we created and establish a Django project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(myenv) $ django-admin startproject mainapp

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will auto-generate some files for your project skeleton:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mainapp/
    manage.py
    mainapp/
        __init__.py
        settings.py
        urls.py
        asgi.py
        wsgi.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, navigate to the directory you just created (make sure you are in the same directory as manage.py) and create your app directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(myenv) $ python manage.py startapp monitor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;monitor/
    __init__.py
    admin.py
    apps.py
    migrations/
        __init__.py
    models.py
    tests.py
    views.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the mainapp/settings.py file, look for the following line and add the app we just created above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',#new line
    'monitor', #new line
]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ensure you are in the monitor directory then create a new directory called templates and a new file called urls.py. Your directory structure of monitor application should look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;monitor/
    __init__.py
    admin.py
    apps.py
    migrations/
    templates/
        __init__.py
    models.py
    tests.py
    urls.py
    views.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ensure your mainapp/urls.py file, add our monitor app URL to include the URLs we shall create next on the monitor app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    #path('admin/', admin.site.urls),
    path('', include('monitor.urls')),#monitor app url
]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, on the monitor/urls.py file, add our website there:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.urls import path
from .views import *

urlpatterns = [
    path('', Prediction.as_view(), name = 'prediction'),
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s create another directory to store our machine learning model. I’ll also add the dataset to the project for those who want to achieve the whole dataset. (It is not compulsory to create a data folder.)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(venv)$ mkdir ml
(venv)$ mkdir ml/models
(venv)$ mkdir ml/data
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also need to tell Django where our machine learning model is located. Add these lines to settings.py file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import os
MODELS = os.path.join(BASE_DIR, 'ml/models')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#load-model-through-appspy"&gt;
  &lt;/a&gt;
  Load Model through apps.py
&lt;/h2&gt;

&lt;p&gt;Load your machine learning models in apps.py so that when the application starts, the trained model is loaded only once. Otherwise, the trained model is loaded each time an endpoint is called, and then the response time will be slower. &lt;/p&gt;

&lt;p&gt;Let’s update apps.py&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import os
import joblib
from django.apps import AppConfig
from django.conf import settings


class ApiConfig(AppConfig):
    name = 'api'
    MODEL_FILE = os.path.join(settings.MODELS, "DecisionTreeModel.joblib")
    model = joblib.load(MODEL_FILE)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#edit-viewspy"&gt;
  &lt;/a&gt;
  Edit views.py
&lt;/h2&gt;

&lt;p&gt;The last step is to update views.py. The views will be mainly responsible for two tasks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Process incoming POST requests.&lt;/li&gt;
&lt;li&gt;Make a prediction with the incoming data and give the result as a Response.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import numpy as np
import pandas as pd
from .apps import *
from rest_framework.views import APIView
from rest_framework.response import Response


class Prediction(APIView):
    def post(self, request):
        #data = request.data
        age= request.GET.get('age')
        gender = request.GET.get('gender')
        bp = request.GET.get('bp')
        cholesterol = request.GET.get('cholesterol')
        salt = request.GET.get('salt')
        dtree = ApiConfig.model
        #predict using independent variables
        PredictionMade = dtree.predict([[age, gender, cholesterol, bp, salt]])
        response_dict = {"Predicted drug": PredictionMade}
        print(response_dict)
        return Response(response_dict, status=200)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#test-the-api"&gt;
  &lt;/a&gt;
  Test the API
&lt;/h2&gt;

&lt;p&gt;To test our API, I’ll use &lt;a href="https://docs.python-requests.org/en/latest/"&gt;requests&lt;/a&gt; library, which is the de facto standard for making HTTP requests in Python. You can also use &lt;a href="https://www.postman.com/"&gt;Postman&lt;/a&gt; or &lt;a href="https://insomnia.rest/"&gt;Insomnia&lt;/a&gt; for making the requests.&lt;/p&gt;

&lt;p&gt;Let’s predict what drug prescription(among the five drugs: Y X A B and C) should a 68-year-old female with normal levels of cholesterol and BP and has salt to potassium level of 27 take?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests
predict = requests.post("http://127.0.0.1:8000/?age=68&amp;amp;gender=0&amp;amp;bp=2&amp;amp;cholesterol=2&amp;amp;salt=27")
print(predict.json())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{'Predicted drug': ['drugY']}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks for staying tuned! In case of any questions, feel free to ask in the comment section below.&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>django</category>
      <category>webdev</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>10 Programs for Video Editing on Smartphones and PCs</title>
      <author>Explain Ninja</author>
      <pubDate>Wed, 10 Nov 2021 10:21:05 +0000</pubDate>
      <link>https://dev.to/explain_ninja/10-programs-for-video-editing-on-smartphones-and-pcs-3nl4</link>
      <guid>https://dev.to/explain_ninja/10-programs-for-video-editing-on-smartphones-and-pcs-3nl4</guid>
      <description>&lt;p&gt;When the video is shot, an exciting production stage to begin next is editing. Choosing an ideal editor is the first problem you will have to face if you do it on your favorite smartphone or your pc. We have collected ten editing programs for videos that will come in handy in processing &lt;a title="https://explain.ninja/blog/promotional-video-production-cost/" href="https://explain.ninja/blog/promotional-video-production-cost/" rel="noreferrer noopener"&gt;your videos&lt;/a&gt; asap. Check them out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kp8h6SvQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/image_processing20200508-12292-d36i9w.gif" class="article-body-image-wrapper"&gt;&lt;img title="10 Programs for Video Editing on Smartphones and PCs 1" src="https://res.cloudinary.com/practicaldev/image/fetch/s--kp8h6SvQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/image_processing20200508-12292-d36i9w.gif" alt="10 Programs for Video Editing on Smartphones and PCs 1" width="800" height="600"&gt;&lt;/a&gt;&lt;/p&gt;
Incredible motion design by &lt;a title="https://explain.ninja/contact-us/" href="https://explain.ninja/contact-us/" rel="noreferrer noopener"&gt;Explain Ninja&lt;/a&gt;



&lt;h2&gt;How to choose some useful edit programs for videos?&lt;/h2&gt;

&lt;p&gt;For cool videos for TikTok or Instagram, it may be enough to use smartphone apps designed for editing on Android or iOS. Their functionality will be enough for basic editing and even simple work sound processing.&lt;/p&gt;

&lt;p&gt;And if you plan to shoot &amp;amp; edit &lt;a href="https://explain.ninja/video-for-business/" rel="noreferrer noopener"&gt;professional video explainers&lt;/a&gt;, advertisements, or other hour-long videos and want to work with video on a wide computer monitor, go to check some solid programs for PC.&lt;/p&gt;

&lt;h2&gt;Choose your top program for video edit&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;span&gt;Here are some ideas for mobile video lovers:&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;1) InShot&lt;/h3&gt;

&lt;p&gt;InShot today is one of the most famous and popular mobile video apps. It has every function you may need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cutting clips.&lt;/li&gt;
&lt;li&gt;Cropping a picture for different formats.&lt;/li&gt;
&lt;li&gt;Adding music and the ability to cut it into pieces to adjust the volume at the right moments, and so much more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also record voice directly in the application – for example, for &lt;a title="https://explain.ninja/process/" href="https://explain.ninja/process/" rel="noreferrer noopener"&gt;voiceover&lt;/a&gt;, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FgDkqJst--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/inshot.jpg" class="article-body-image-wrapper"&gt;&lt;img title="10 Programs for Video Editing on Smartphones and PCs 2" src="https://res.cloudinary.com/practicaldev/image/fetch/s--FgDkqJst--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/inshot.jpg" alt="10 Programs for Video Editing on Smartphones and PCs 2" width="770" height="530"&gt;&lt;/a&gt;&lt;/p&gt;
Source: InShot



&lt;h3&gt;2) KineMaster&lt;/h3&gt;

&lt;p&gt;Try one of the most powerful mobile video editors out there. It is instead an advanced but, at the same time, quite easy-to-use video editor. You may work with several video tracks simultaneously, superimposing them on top of each other. You may also add handwritten text and record voice-overs in real-time. And, of course, all the basic set of options for a good video processing program: color settings, handy tools for cropping and scaling, as well as a variety of effects, stickers, and transitions are out there. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zefz9OVP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/kinemaster.jpg" class="article-body-image-wrapper"&gt;&lt;img title="10 Programs for Video Editing on Smartphones and PCs 3" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zefz9OVP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/kinemaster.jpg" alt="10 Programs for Video Editing on Smartphones and PCs 3" width="770" height="530"&gt;&lt;/a&gt;&lt;/p&gt;
Source: KineMaster



&lt;h3&gt;3) Magisto&lt;/h3&gt;

&lt;p&gt;You don’t have to bother. Immediately create a video with a given theme in three easy steps. It’s easy to use, you simply import videos and photos, choose an editing style, add music from the app’s library, etc. Though some experienced users may not have enough editing control, this app will be a godsend for those new to video editing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--abZRUQwq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/magisto.jpg" class="article-body-image-wrapper"&gt;&lt;img title="10 Programs for Video Editing on Smartphones and PCs 4" src="https://res.cloudinary.com/practicaldev/image/fetch/s--abZRUQwq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/magisto.jpg" alt="10 Programs for Video Editing on Smartphones and PCs 4" width="789" height="527"&gt;&lt;/a&gt;&lt;/p&gt;
Source: Magisto



&lt;h3&gt;4) FilmoraGo&lt;/h3&gt;

&lt;p&gt;FilmoraGo is an excellent editor for quick editing on the go. This app provides everything you may need. In addition to cutting videos or gluing pictures, you may apply filters, add music and change the speed. The video will be saved with a 1280 × 720 resolution. FilmoraGo is a great choice for editing videos for social media or home archives.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DwJiBYgF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/fimora.jpg" class="article-body-image-wrapper"&gt;&lt;img title="10 Programs for Video Editing on Smartphones and PCs 5" src="https://res.cloudinary.com/practicaldev/image/fetch/s--DwJiBYgF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/fimora.jpg" alt="10 Programs for Video Editing on Smartphones and PCs 5" width="775" height="521"&gt;&lt;/a&gt;&lt;/p&gt;
Source: FilmoraGo



&lt;h3&gt;5) Adobe Premiere Rush&lt;/h3&gt;

&lt;p&gt;Adobe Premiere Rush is a complete editing studio on your smartphone. If you’ve ever worked with Adobe Creative Suite programs, you know what it is.&lt;/p&gt;

&lt;p&gt;Adobe Premiere Rush is available for both smartphones and PCs for editing on multiple devices. All the essential professional tools for video editing, color adjustments, and audio work are included.&lt;/p&gt;

&lt;p&gt;And for an additional fee, you may download a variety of effects and titles from Adobe Stock.&lt;/p&gt;

&lt;p&gt;It will also be ideal for advanced video editor users and those already working with Adobe products. It is suitable for creating almost any content, except for stories and photo collages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GHe7Mnn---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/rush.jpg" class="article-body-image-wrapper"&gt;&lt;img title="10 Programs for Video Editing on Smartphones and PCs 6" src="https://res.cloudinary.com/practicaldev/image/fetch/s--GHe7Mnn---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/rush.jpg" alt="10 Programs for Video Editing on Smartphones and PCs 6" width="880" height="522"&gt;&lt;/a&gt;&lt;/p&gt;
Source: Adobe



&lt;p&gt;&lt;em&gt;&lt;span&gt;Here are also some ideas for those who need professional programs for PC in addition to effective mobile video editing apps:&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;6) PowerDirector&lt;/h3&gt;

&lt;p&gt;PowerDirector is a powerful video editor for working with videos and photos integrated with Google Disk cloud storage. In addition to standard tools, PowerDirector allows you to use chroma key and export video in 4K format. You can access an entire library of filters, titles, and effects for extra money, but the free selection is impressive.&lt;/p&gt;

&lt;p&gt;It will be an ideal tool for advanced editing software users and those working with professional video material.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UU0V_VeP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/director.jpg" class="article-body-image-wrapper"&gt;&lt;img title="10 Programs for Video Editing on Smartphones and PCs 7" src="https://res.cloudinary.com/practicaldev/image/fetch/s--UU0V_VeP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/director.jpg" alt="10 Programs for Video Editing on Smartphones and PCs 7" width="695" height="320"&gt;&lt;/a&gt;&lt;/p&gt;
Source: PowerDirector



&lt;h3&gt;7) Splice&lt;/h3&gt;

&lt;p&gt;Here you may use multiple audio tracks, add music from the built-in collection, and select the appropriate quality when exporting. The app is an excellent functional and intuitive video editor for all the rest. In the app, you may crop videos, overlay text, add transitions, and add professional touches.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PIh9nqF3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/splice.jpg" class="article-body-image-wrapper"&gt;&lt;img title="10 Programs for Video Editing on Smartphones and PCs 8" src="https://res.cloudinary.com/practicaldev/image/fetch/s--PIh9nqF3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/splice.jpg" alt="10 Programs for Video Editing on Smartphones and PCs 8" width="880" height="537"&gt;&lt;/a&gt;&lt;/p&gt;
Source: Splice



&lt;h3&gt;8) DaVinci Resolve&lt;/h3&gt;

&lt;p&gt;The interface looks complicated for a beginner, but you can get used to it. Originally it was developed for color correction. Today it offers many tools for adjusting the picture and sound. If you need to progress video editing, DaVinci Resolve is a great starting point.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2t870nxc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/davinci.jpg" class="article-body-image-wrapper"&gt;&lt;img title="10 Programs for Video Editing on Smartphones and PCs 9" src="https://res.cloudinary.com/practicaldev/image/fetch/s--2t870nxc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/davinci.jpg" alt="10 Programs for Video Editing on Smartphones and PCs 9" width="880" height="545"&gt;&lt;/a&gt;&lt;/p&gt;
Source: DaVinci Resolve



&lt;h3&gt;9) Final Cut Pro&lt;/h3&gt;

&lt;p&gt;Final Cut Pro is a powerful professional video editor created by Apple. The program has a simple, high-speed, and very smooth interface. Naturally, it is only available for Mac owners; there are no versions for Windows and Linux. Final Cut Pro may also offer you the most advanced organizing tools of any professional video editing application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QRVOhjW1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/pro.jpg" class="article-body-image-wrapper"&gt;&lt;img title="10 Programs for Video Editing on Smartphones and PCs 10" src="https://res.cloudinary.com/practicaldev/image/fetch/s--QRVOhjW1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/pro.jpg" alt="10 Programs for Video Editing on Smartphones and PCs 10" width="880" height="552"&gt;&lt;/a&gt;&lt;/p&gt;
Source: Final Cut Pro



&lt;h3&gt;10) Adobe Premiere Pro&lt;/h3&gt;

&lt;p&gt;Adobe Premiere Pro is known as one of the top video editing software. If you are familiar with any other Adobe products, you may quickly master the interface. Almost all operations can be performed using hot keyboard commands. If you are new to the program, immediately set them up for those installation operations that you use most often – over time this will save a lot of time working. Good luck!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hlKRgQxb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/adobe-1.jpg" class="article-body-image-wrapper"&gt;&lt;img title="10 Programs for Video Editing on Smartphones and PCs 11" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hlKRgQxb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://explain.ninja/wp-content/uploads/2021/11/adobe-1.jpg" alt="10 Programs for Video Editing on Smartphones and PCs 11" width="773" height="514"&gt;&lt;/a&gt;&lt;/p&gt;
Source: Adobe



&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;If you still don’t like editing videos on your phone, you just haven’t tried an ideal app for this yet. You may process your incredible videos on your smartphone – including making films, doing professional editing, and producing expensive advertising content. Or you may edit your video material on your favorite machine.&lt;/p&gt;

&lt;p&gt;With a selection of the best programs for video editing for smartphones based on Android and iOs or PCs running on Windows or Linux, or Apple devices, it will be easier for you to test, experiment, and choose what you like the most.&lt;/p&gt;

&lt;p&gt;Anyway, you are always welcome to hire us for &lt;a href="https://explain.ninja/contact-us/"&gt;professional business video editing&lt;/a&gt;.&lt;/p&gt;



&lt;br&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>„Niewidzialne” podatności – czyli nowa technika ataku: Trojan Source</title>
      <author>Michał Giza</author>
      <pubDate>Wed, 10 Nov 2021 10:12:06 +0000</pubDate>
      <link>https://dev.to/gizamichal/niewidzialne-podatnosci-czyli-nowa-technika-ataku-trojan-source-4mb3</link>
      <guid>https://dev.to/gizamichal/niewidzialne-podatnosci-czyli-nowa-technika-ataku-trojan-source-4mb3</guid>
      <description>&lt;p&gt;&lt;a href="https://sekurak.pl/niewidzialne-podatnosci-czyli-nowa-technika-ataku-trojan-source/"&gt;https://sekurak.pl/niewidzialne-podatnosci-czyli-nowa-technika-ataku-trojan-source/&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
