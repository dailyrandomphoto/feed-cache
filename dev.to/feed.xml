<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>A minimalistic Notion template to count your blessings üå∏and being grateful üôèfor them </title>
      <author>Sarthak Sharma</author>
      <pubDate>Fri, 02 Jul 2021 12:51:14 +0000</pubDate>
      <link>https://dev.to/xenoxdev/a-minimalistic-notion-template-to-count-your-blessings-and-being-grateful-for-them-5bhm</link>
      <guid>https://dev.to/xenoxdev/a-minimalistic-notion-template-to-count-your-blessings-and-being-grateful-for-them-5bhm</guid>
      <description>&lt;p&gt;Hey folks üëãüèº&lt;/p&gt;

&lt;p&gt;We just launched another Product on Product Hunt. It's a notion template that lets you Note down everything that you are grateful forüå∏.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#notion-gratitude-journal"&gt;
  &lt;/a&gt;
  Notion Gratitude Journal
&lt;/h3&gt;

&lt;p&gt;This minimalist digital journal is designed to provide you with the most efficient and focus-oriented approach towards viewing life from the lens of a grateful being. Take our words for it: Once you start with Gratitude journaling, you won't stop.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/HjfyuJ7rwKY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It includes the following:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#list-to-track-things-you-are-grateful-for"&gt;
  &lt;/a&gt;
  List to track things you are grateful for
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H1snc5JW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/orouz2x0683ioylgc5rj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H1snc5JW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/orouz2x0683ioylgc5rj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#recurring-list-feature"&gt;
  &lt;/a&gt;
  Recurring List Feature
&lt;/h3&gt;

&lt;p&gt;Research shows that using lists instead of a paragraph at the end of your day/week makes you feel more grateful, and in turn - happier. This is because we appreciate lists and structure. The more you fill up, the happier you will be - looking back!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cLCqvYIm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4ft8ju8pazzwg8wnxw0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cLCqvYIm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4ft8ju8pazzwg8wnxw0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#archive-feature-to-save-all-your-previous-lists"&gt;
  &lt;/a&gt;
  Archive Feature to save all your Previous Lists
&lt;/h3&gt;

&lt;p&gt;This is the crown-jewel of this template. No need to make lists and clutter your minimalist space all over. This list can be regenerated as soon as you click on this tab and a new list will be added.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OfVkWIpe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tylurnzo4b020dhaotzr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OfVkWIpe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tylurnzo4b020dhaotzr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You don't need to create a new list all over again, but who will take care of storing all of your previous gratitude lists? We will.&lt;br&gt;
Whenever you create a new list, the previous list will go into the archives and be stored in a neat pile. That way, you can always view all your gratitudes at the end of the week/month or even the year, and feel proud for how far you have come, and how many times you were grateful for others &amp;lt;3&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jys1pNvL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3v4mdqy2b636f2ex2dij.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jys1pNvL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3v4mdqy2b636f2ex2dij.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#want-one"&gt;
  &lt;/a&gt;
  Want One?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/fsc7c7TYKulQ4lmmAo/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/fsc7c7TYKulQ4lmmAo/giphy.gif" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Here is your link&lt;/em&gt;&lt;/strong&gt; üëâ &lt;a href="https://prototion.com/notion-template/Notion_Gratitude_Journal_"&gt;&lt;strong&gt;&lt;em&gt;Notion Gratitude Journal&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are on Producthunt today. Go show some love hereüî•&lt;br&gt;
&lt;a href="https://www.producthunt.com/posts/notion-gratitude-journal"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WDNZW4ZC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4lyj1l7dn02k684hypf.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Amazing JS Notes App With Pure Html CSS And JS</title>
      <author>Krenil Kshatriya</author>
      <pubDate>Fri, 02 Jul 2021 12:50:49 +0000</pubDate>
      <link>https://dev.to/krenill/amazing-js-notes-app-with-pure-html-css-and-js-2iaf</link>
      <guid>https://dev.to/krenill/amazing-js-notes-app-with-pure-html-css-and-js-2iaf</guid>
      <description>&lt;p&gt;Amazing JS Notes App With Pure Html CSS And JS With Each Line of Explained in a simple and fun way &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Op_Krenil/embed/QWvbYaK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>How to Trigger an AWS Lambda from SQS</title>
      <author>Alex Kates</author>
      <pubDate>Fri, 02 Jul 2021 11:55:34 +0000</pubDate>
      <link>https://dev.to/aws-builders/how-to-trigger-an-aws-lambda-from-sqs-2lkc</link>
      <guid>https://dev.to/aws-builders/how-to-trigger-an-aws-lambda-from-sqs-2lkc</guid>
      <description>&lt;p&gt;In this post we are going to use the AWS CDK to build an AWS Lambda Function that triggers from an AWS SQS message.&lt;/p&gt;

&lt;p&gt;All of the code &lt;a href="https://github.com/alexkates/how-to-trigger-lambda-from-sqs"&gt;can be found in this repository&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;We need to run a few commands to setup our CDK app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;how-to-trigger-lambda-from-sqs
&lt;span class="nb"&gt;cd &lt;/span&gt;how-to-trigger-lambda-from-sqs
npx cdk init app &lt;span class="nt"&gt;--language&lt;/span&gt; typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should give you the following directory structure.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lKvFj8YG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4lf9fs5o0upyhyegl7lb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lKvFj8YG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4lf9fs5o0upyhyegl7lb.png" alt="Directory structure after running the CDK init command"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also make sure you have your AWS CLI configured. For more information follow &lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html"&gt;the AWS CLI quickstart guide&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-an-sqs-queue"&gt;
  &lt;/a&gt;
  Create an SQS Queue
&lt;/h2&gt;

&lt;p&gt;Install the SQS CDK package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i @aws-cdk/aws-sqs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open &lt;code&gt;lib/how-to-trigger-lambda-from-sqs-stack.ts&lt;/code&gt;, add a new SQS queue, and deploy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;sqs&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-sqs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;HowToTriggerLambdaFromSqsStack&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Stack&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Construct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StackProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;sqs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;OurSqsQueue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;queueName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;OurSQSQueue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nice! Let's deploy the stack.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm run cdk deploy&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-lambda"&gt;
  &lt;/a&gt;
  Create a Lambda
&lt;/h2&gt;

&lt;p&gt;Install the Lambda CDK package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i @aws-cdk/aws-lambda
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Deploying a Lambda function requires bootstrapping your CDK app which gives us an S3 bucket where our Lambda's source code will live. This is a one time operation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run cdk bootstrap
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create src/index.js and paste the following code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Records&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;record&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Record: %j&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;record&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open &lt;code&gt;lib/how-to-trigger-lambda-from-sqs-stack.ts&lt;/code&gt;, add a new Lambda function, and deploy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;sqs&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-sqs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-lambda&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;HowToTriggerLambdaFromSqsStack&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Stack&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Construct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StackProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;sqs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;OurSqsQueue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;queueName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;OurSQSQueue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lambdaFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Function&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromAsset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index.handler&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;functionName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SqsMessageHandler&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODEJS_12_X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Deploy again ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run cdk deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may need to confirm some IAM changes.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q53g4bGT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zut9dl578rw83dzquyel.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q53g4bGT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zut9dl578rw83dzquyel.png" alt="IAM changes after deploying stack with Lambda function"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-the-event-source"&gt;
  &lt;/a&gt;
  Create the Event Source
&lt;/h2&gt;

&lt;p&gt;Install the Lambda Event Sources CDK package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i @aws-cdk/aws-lambda-event-sources
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open lib/how-to-trigger-lambda-from-s3-stack.ts, add a new S3EventSource to the Lambda Function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;sqs&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-sqs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-lambda&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;lambdaEventSources&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-lambda-event-sources&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;HowToTriggerLambdaFromSqsStack&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Stack&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Construct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StackProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;sqs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;OurSqsQueue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;queueName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;OurSQSQueue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lambdaFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Function&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromAsset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index.handler&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;functionName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SqsMessageHandler&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;runtime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODEJS_12_X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;eventSource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;lambdaEventSources&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SqsEventSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;lambdaFunction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;eventSource&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One more deployment ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run cdk deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One last time, you may need to approve IAM changes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CZwMiQyk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ravbq38s56ebywsuvh7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CZwMiQyk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ravbq38s56ebywsuvh7.png" alt="IAM changes approval after deploying the SQS event source"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h2&gt;

&lt;p&gt;We are going to make use of the AWS CLI to test our stack.&lt;/p&gt;

&lt;p&gt;First, we need the Queue URL of our SQS queue, which you can get using the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws sqs get-queue-url &lt;span class="nt"&gt;--queue-name&lt;/span&gt; OurSQSQueue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, using the Queue URL from the previous command, use the AWS CLI to send a new message to &lt;code&gt;OurSQSQueue&lt;/code&gt;. Your Queue URL  may vary, but for me this command looks like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws sqs send-message &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--message-body&lt;/span&gt; &lt;span class="s2"&gt;"Hello, world"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--queue-url&lt;/span&gt; https://sqs.us-east-2.amazonaws.com/472331918655/OurSQSQueue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Verify that the Lambda executed by looking in CloudWatch. Find the LogGroup named &lt;code&gt;/aws/lambda/SqsMessageHandler&lt;/code&gt; and open up the latest LogStream. You should see some log messages that look similar to this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h2sERtds--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2p2ijddlslxptfx0c8c2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h2sERtds--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2p2ijddlslxptfx0c8c2.png" alt="CloudWatch results after sending a new SQS message"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#clean-up"&gt;
  &lt;/a&gt;
  Clean Up
&lt;/h2&gt;

&lt;p&gt;Don't forget to delete your stack when you are finished!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run cdk destroy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks for reading! If you found this useful, please follow me here &lt;br&gt;
&lt;a href="https://dev.to/thealexkates"&gt;https://dev.to/thealexkates&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/thealexkates"&gt;https://twitter.com/thealexkates&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>tutorial</category>
      <category>eventdriven</category>
      <category>beginners</category>
    </item>
    <item>
      <title>5 star rating system - ACTUALLY accessible, no JS, no WAI-ARIA! ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê</title>
      <author>InHuOfficial</author>
      <pubDate>Fri, 02 Jul 2021 11:49:11 +0000</pubDate>
      <link>https://dev.to/inhuofficial/5-star-rating-system-actually-accessible-no-js-no-wai-aria-3idl</link>
      <guid>https://dev.to/inhuofficial/5-star-rating-system-actually-accessible-no-js-no-wai-aria-3idl</guid>
      <description>&lt;p&gt;In this article I will explain how I built a star rating system that is &lt;strong&gt;ACTUALLY&lt;/strong&gt; accessible, easy to style for your own needs and easy to integrate into any framework as it uses semantic HTML.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you are busy just skip &lt;a href="#example1"&gt;straight to the first example&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;I have seen several star rating systems shared recently which are &lt;strong&gt;completely inaccessible&lt;/strong&gt; to people using a screen reader (a device that allows websites to be read out loud to people or converted to braille) or people who rely on a keyboard (people with movement disorders / accuracy issues such as Parkinson's Disease, Cerebral Palsy etc.).&lt;/p&gt;

&lt;p&gt;I get frustrated by this lack of thought from authors as they release code into the world that contributes to a lack of accessibility.&lt;/p&gt;

&lt;p&gt;Then people just copy and paste example code with no thought (or they may be new to development and not know about accessibility yet) and accessibility issues perpetuate forever (hence why &lt;a href="https://dev.to/inhuofficial/they-just-won-t-learn-a-button-is-a-lt-button-gt-accessibility-rants-k1b"&gt;we still have people using &lt;code&gt;&amp;lt;a href="#"&lt;/code&gt; for buttons&lt;/a&gt;...an overhang from 13 years ago when we couldn't style &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;s...that is how long it takes to kill a bad practice!)&lt;/p&gt;

&lt;p&gt;Anyway, this isn't one of my angry rants, so here it is, my first contribution to trying to fix this problem, a truly accessible star rating system. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-accessible-star-rating-system"&gt;
  &lt;/a&gt;
  An accessible star rating system
&lt;/h2&gt;

&lt;p&gt;Why is this better than the other examples you have seen before?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It uses semantically correct elements - &lt;code&gt;radio&lt;/code&gt; inputs as this is a choice between ratings.&lt;/li&gt;
&lt;li&gt;By using semantically correct elements it has &lt;a href="https://www.powermapper.com/tests/screen-readers/aria/"&gt;no need for WAI-ARIA which doesn't actually have as much support as people think&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;It can be made to &lt;a href="#accessible-star-rating-system-ie9"&gt;work all the way back to IE9&lt;/a&gt; with a couple of minor adjustments, which is important as there are &lt;a href="https://webaim.org/projects/screenreadersurvey8/#browsers"&gt;still a lot of screen reader users (12.4%!) using IE9, 10 and 11&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;No JavaScript so it will be lightning fast even on cheap hardware. &lt;/li&gt;
&lt;li&gt;Works on any framework...you can simply just hook into the radio group value as if it was a standard radio group (because essentially it is)!&lt;/li&gt;
&lt;li&gt;You can style it pretty much however you want by simply changing the SVGs for checked, unchecked and hover states and the display size. I would encourage you to create some nicer SVGs as these are rough and ready for demo purposes!&lt;/li&gt;
&lt;li&gt;It will support as many stars as you want (albeit you have to adjust a couple of things and add a couple of rules to the CSS)&lt;/li&gt;
&lt;li&gt;You can safely copy paste the CSS and HTML and know that it is accessible!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessible-star-rating-system-example"&gt;
  &lt;/a&gt;
  Accessible star rating system Example
&lt;/h2&gt;

&lt;p&gt;Try it with a keyboard, mouse, screen reader (if you know how to use one) etc. It should work flawlessly.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/s0c35pqw//embedded/result,html,css,js//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ie9-ie10-and-ie11-compatibility"&gt;
  &lt;/a&gt;
  IE9, IE10 and IE11 compatibility
&lt;/h2&gt;

&lt;p&gt;There are only two things that won't work in IE9, IE10 and IE11.&lt;/p&gt;

&lt;p&gt;The first is using CSS variables - so simply swap those out for the actual values.&lt;/p&gt;

&lt;p&gt;The second is &lt;code&gt;focus-within&lt;/code&gt; to put the focus around the box. Instead for IE we just put focus indicators around the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; that contains the stars.&lt;/p&gt;

&lt;p&gt;The beauty of this second example is it lets you see how everything works if you use a keyboard to focus the item! (you can see how the labels are stacked on top of each other and different widths to achieve our star rating effect).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accessible-star-rating-system-ie9"&gt;
  &lt;/a&gt;
  Accessible star rating system IE9+
&lt;/h3&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/s0c35pqw/1//embedded/result,html,css,js//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-explanation-of-the-logic"&gt;
  &lt;/a&gt;
  An explanation of the logic.
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;fieldset&amp;gt;&lt;/code&gt; is a semantically correct way of grouping controls. As the radio "buttons" all relate to the same item (your star rating) this lets screen reader users know what they are answering.&lt;/p&gt;

&lt;p&gt;We use &lt;code&gt;&amp;lt;input type="radio"&amp;gt;&lt;/code&gt; as that is the most logical HTML form element. You should use &lt;code&gt;radio&lt;/code&gt; buttons whenever there are multiple choices but only one can be selected at a time.&lt;/p&gt;

&lt;p&gt;To ensure the inputs have a label that is correctly associated I use &lt;code&gt;for&lt;/code&gt; on the label to point to the relevant input with that ID. This is important as screen reader users need a correctly associated label so they know what an input is for. Otherwise they just hear "input" - which is not very useful! &lt;/p&gt;

&lt;p&gt;Just for reference, you can do the same (correctly associate a label with an input) using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But apparently &lt;a href="https://a11ysupport.io/tech/html/label_element"&gt;Dragon Naturally Speaking struggles with implicit labels&lt;/a&gt; so I went for maximum compatibility.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-with-the-raw-ltspangt-endraw-s-inside-the-label-though"&gt;
  &lt;/a&gt;
  What is with the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;s inside the label though?
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; is for screen reader users. &lt;/p&gt;

&lt;p&gt;I hide the text visually using a class called &lt;a href="https://stackoverflow.com/a/62109988/2702894"&gt;visually hidden text&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This text is invisible on the screen but is still readable by screen reader users.&lt;/p&gt;

&lt;p&gt;This way when they focus the star rating system and select an option they will hear "Your rating: 3", "Your rating: 4" etc. or similar.&lt;/p&gt;

&lt;p&gt;Without this they would have the same issue of just hearing "input" as although I provided a label there would be no text within it.&lt;/p&gt;

&lt;p&gt;You will notice I apply the same styles to the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; as well to make it invisible visually but still accessible for screen readers. &lt;/p&gt;

&lt;p&gt;This is the biggest problem most star rating systems have, they hide the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; with &lt;code&gt;display: none&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This means you cannot focus it anymore with Tab and so it is completely unusable for people who only use a keyboard.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#colour-is-important-too"&gt;
  &lt;/a&gt;
  Colour is important too
&lt;/h2&gt;

&lt;p&gt;Super quick one here - colour contrast is important.&lt;/p&gt;

&lt;p&gt;A lot of star rating systems use yellow stars with no border. This provides terrible contrast with the background and can be an issue for people with low contrast perception.&lt;/p&gt;

&lt;p&gt;As such I have a dark grey border around my stars so they stand out even for people with contrast perception impairments (or people trying to use the site in direct sunlight....I am sure you know how annoying that can be on low contrast sites!).&lt;/p&gt;

&lt;p&gt;I also went an extra step of making the border on the stars different sizes depending on their current state. This allows for a visual difference that doesn't rely on colour at all! &lt;strong&gt;If you create your own SVGs I would encourage you to do something similar to provide visual distinction that doesn't rely on colour alone!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simple-to-adapt-to-your-own-needs"&gt;
  &lt;/a&gt;
  Simple to adapt to your own needs
&lt;/h2&gt;

&lt;p&gt;If you want to use a different icon that is super simple.&lt;/p&gt;

&lt;p&gt;You need three versions of your star as SVGs, a filled version, an unfilled version and a hovered version. Ideally they should be square to avoid having to alter the CSS.&lt;/p&gt;

&lt;p&gt;Then just &lt;a href="https://codepen.io/elliz/details/ygvgay"&gt;copy the SVG text into this converter press "convert" and then copy the result.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Paste the resulting CSS after "background-image: " into the variables &lt;code&gt;--unchecked-image&lt;/code&gt; (for no star), &lt;code&gt;--checked-image&lt;/code&gt; (for star selected) and &lt;code&gt;--hovered-image&lt;/code&gt; (for hover state).&lt;/p&gt;

&lt;p&gt;You can also have a ten star system if you want, in this example I have changed the &lt;code&gt;--max-stars&lt;/code&gt; CSS variable to 10.&lt;/p&gt;

&lt;p&gt;You can have between 2 and 10 stars by simply adding the right number of radio buttons and then changing the &lt;code&gt;--max-stars&lt;/code&gt; CSS variable to match.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/s0c35pqw/2//embedded/result,html,css//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And as a final note I have designed the CSS so it will not leak into your document (unless you happen to use the same CSS variable names!) so you should be able to just copy paste and go without any Cascade issues.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summing-up"&gt;
  &lt;/a&gt;
  Summing up
&lt;/h2&gt;

&lt;p&gt;I think the above is about as simple as you can get for a rating system that is accessible and has very high browser coverage.&lt;/p&gt;

&lt;p&gt;Now as I am preaching about accessibility if &lt;strong&gt;anyone does notice a mistake please do call me an idiot and point it out!&lt;/strong&gt; Hopefully I haven't made a mistake somewhere ü§û.&lt;/p&gt;

&lt;p&gt;With that being said, I am quite confident the above is truly accessible and I would be confident in saying that you can use it in your own projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#share-this-and-spread-the-word-please"&gt;
  &lt;/a&gt;
  Share this and spread the word please!
&lt;/h2&gt;

&lt;p&gt;If enough people read this article that is one component on the web that hopefully will be accessible to everybody. &lt;/p&gt;

&lt;p&gt;To make it easy you can just click the share button below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/intent/tweet?url=https://dev.to/inhuofficial/5-star-rating-system-actually-accessible-no-js-no-wai-aria-3idl&amp;amp;text=%22A%20star%20rating%20system%20that%20is%20**ACTUALLY**%20accessible,%20easy%20to%20style%20for%20your%20own%20needs%20and%20easy%20to%20integrate%20into%20any%20framework%20as%20it%20uses%20semantic%20HTML.%20You%20should%20check%20it%20out!%22%20-%20@InHuOfficial%20"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zMVeXrbG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8loauc7jmnh40xqa4dh.jpg" alt='Click to Tweet: "A star rating system that is **ACTUALLY** accessible, easy to style for your own needs and easy to integrate into any framework as it uses semantic HTML. You should check it out!"'&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>css</category>
      <category>html</category>
      <category>codepen</category>
    </item>
    <item>
      <title>Creating adaptive layouts with Flutter</title>
      <author>Tour√© Holder</author>
      <pubDate>Fri, 02 Jul 2021 11:39:55 +0000</pubDate>
      <link>https://dev.to/toureholder/creating-adaptive-layouts-with-flutter-56oa</link>
      <guid>https://dev.to/toureholder/creating-adaptive-layouts-with-flutter-56oa</guid>
      <description>&lt;p&gt;In this tutorial you'll learn how to easily make a UI layout for your flutter app that adapts to different screen sizes with the &lt;a href="https://pub.dev/packages/adaptive_layout"&gt;&lt;code&gt;adaptive_layout&lt;/code&gt;&lt;/a&gt; package.&lt;/p&gt;

&lt;p&gt;The next few sections show how to build a simple UI that displays a list of movie posters and titles and allows the user to see more details of the movie when they tap an item in the list.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#small-screen-ui"&gt;
  &lt;/a&gt;
  Small screen UI
&lt;/h2&gt;

&lt;p&gt;On small, phone-sized, screens when the user taps an item they will navigate to a different screen with the details.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2aTCF19S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/toureholder/flutter_adaptive_layout_tutorial/main/docs/small_screen_ui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2aTCF19S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/toureholder/flutter_adaptive_layout_tutorial/main/docs/small_screen_ui.png" alt='"small screen ui"' title="small screen ui"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#large-screen-ui"&gt;
  &lt;/a&gt;
  Large screen UI
&lt;/h2&gt;

&lt;p&gt;On large screens, when the user taps a list item the details are displayed on the right side of the list and there is no navigation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6yRb8ETL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/toureholder/flutter_adaptive_layout_tutorial/main/docs/large_screen_ui_better_738.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6yRb8ETL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/toureholder/flutter_adaptive_layout_tutorial/main/docs/large_screen_ui_better_738.png" alt='"large screen ui"' title="large screen ui"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#live-demo"&gt;
  &lt;/a&gt;
  Live demo
&lt;/h2&gt;

&lt;p&gt;Even better than an image, &lt;a href="https://flutter-adaptive-layout-tutorial.surge.sh/"&gt;see a live demo of what we'll be building&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-go"&gt;
  &lt;/a&gt;
  Let's go!
&lt;/h2&gt;

&lt;p&gt;We'll take care of the behavior expected for small screens first, then adapt our implementation for larger screens. These are the steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#1-create-a-new-app"&gt;1. Create a new app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-provide-the-data-set"&gt;2. Provide the data set&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-create-the-model"&gt;3. Create the model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4-create-the-movie-list-page"&gt;4. Create the movie list page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5-create-the-movie-detail-page"&gt;5. Create the movie detail page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#6-navigate-to-the-detail-screen-when-an-item-is-tapped"&gt;6. Navigate to the detail screen when an item is tapped&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#7-convert-movie-list-page-into-home-page"&gt;7. Convert movie list page into home page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#8-make-the-home-page-adaptive-with-the-adaptive_layout-package"&gt;8. Make the home page adaptive with the &lt;code&gt;adaptive_layout&lt;/code&gt; package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#9-display-the-detail-view-when-an-item-is-tapped-on-large-screens"&gt;9. Display the detail view when an item is tapped on large screens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bonus-make-it-look-a-little-better-on-large-screens"&gt;BONUS: Make it look a little better on large screens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bonus-tests"&gt;BONUS: Tests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#1-create-a-new-app"&gt;
  &lt;/a&gt;
  1. Create a new app
&lt;/h2&gt;

&lt;p&gt;Go ahead and &lt;code&gt;create&lt;/code&gt; a new flutter app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;flutter create adaptive_layout_example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-provide-the-data-set"&gt;
  &lt;/a&gt;
  2. Provide the data set
&lt;/h2&gt;

&lt;p&gt;We'll be using a hard-coded data set, so we can focus our efforts on the UI layout.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Under the &lt;code&gt;lib&lt;/code&gt; folder, create a folder called &lt;code&gt;data&lt;/code&gt; with a file named &lt;code&gt;data.dart&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Copy the contents of &lt;a href="https://github.com/toureholder/flutter_adaptive_layout_tutorial/tree/main/lib/data/data.dart"&gt;this file&lt;/a&gt; into your file.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://github.com/toureholder/flutter_adaptive_layout_tutorial/commit/f5e4e5592276aeaa7547f722d06187120f7809d3"&gt;See the changes&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-create-the-model"&gt;
  &lt;/a&gt;
  3. Create the model
&lt;/h2&gt;

&lt;p&gt;Create a &lt;code&gt;Movie&lt;/code&gt; class with a static function that parses the data into a list of &lt;code&gt;Movie&lt;/code&gt;s and returns the list.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Under the &lt;code&gt;lib&lt;/code&gt; folder, create a folder called &lt;code&gt;model&lt;/code&gt; with a file &lt;code&gt;movie.dart&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Paste the following content into the file.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'../data/data.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Movie&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;overview&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;posterPath&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;Movie&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;
    &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;overview&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;posterPath&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Movie&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getList&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Movie&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;id:&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt;
          &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'title'&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt;
          &lt;span class="nl"&gt;overview:&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'overview'&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt;
          &lt;span class="nl"&gt;posterPath:&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'poster_path'&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;LARGE_POSTER_BASE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://image.tmdb.org/t/p/w300"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;SMALL_POSTER_BASE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://image.tmdb.org/t/p/w92"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://github.com/toureholder/flutter_adaptive_layout_tutorial/commit/96096fe65ed390e4e3c7bd979f7c2e890da95ec2"&gt;See the changes&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-create-the-movie-list-page"&gt;
  &lt;/a&gt;
  4. Create the movie list page
&lt;/h2&gt;

&lt;p&gt;Now let's create a page that will display the list of movies:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new folder under &lt;code&gt;lib&lt;/code&gt; called &lt;code&gt;pages&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;Within the &lt;code&gt;pages&lt;/code&gt; folder create a file named &lt;code&gt;movie_list_page.dart&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;movie_list_page.dart&lt;/code&gt; create two &lt;code&gt;StatelessWidget&lt;/code&gt;s: one called &lt;code&gt;MovieListPage&lt;/code&gt; and another called &lt;code&gt;MovieListView&lt;/code&gt;, with this content.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MovieListPage&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;MovieListPage&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;movies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Movie&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Scaffold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;appBar:&lt;/span&gt; &lt;span class="n"&gt;AppBar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Movies'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;MovieListView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;movies:&lt;/span&gt; &lt;span class="n"&gt;movies&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;onTapItem:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Movie&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// TODO: Navigate to detail screen&lt;/span&gt;
        &lt;span class="o"&gt;},&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MovieListView&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Movie&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;movies&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Movie&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;onTapItem&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;MovieListView&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;
    &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;movies&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onTapItem&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ListView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;itemCount:&lt;/span&gt; &lt;span class="n"&gt;movies&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;itemBuilder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;movies&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ListTile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'list_item_&lt;/span&gt;&lt;span class="si"&gt;$index&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="nl"&gt;leading:&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;network&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SMALL_POSTER_BASE_URL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;posterPath&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;${movie.title}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="nl"&gt;contentPadding:&lt;/span&gt; &lt;span class="n"&gt;EdgeInsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;12.0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="nl"&gt;onTap:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;onTapItem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;call&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
          &lt;span class="o"&gt;},&lt;/span&gt;
        &lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;},&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Observe that &lt;code&gt;MovieListPage&lt;/code&gt; is a container widget for the presentational &lt;code&gt;MovieListView&lt;/code&gt; widget.&lt;/p&gt;

&lt;p&gt;Now, remove the framework generated &lt;code&gt;MyHomePage&lt;/code&gt; and &lt;code&gt;_MyHomePageState&lt;/code&gt; classes from &lt;code&gt;lib/main.dart&lt;/code&gt; and use &lt;code&gt;MovieListPage()&lt;/code&gt; as the &lt;code&gt;home&lt;/code&gt; widget for the &lt;code&gt;MaterialApp&lt;/code&gt;. The &lt;code&gt;lib/main.dart&lt;/code&gt; file should now look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;runApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyApp&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;MaterialApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="s"&gt;'Adaptive Layout Tutorial'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;theme:&lt;/span&gt; &lt;span class="n"&gt;ThemeData&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;primarySwatch:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;blue&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="c1"&gt;// Use `MovieListPage()` as the `home` widget&lt;/span&gt;
      &lt;span class="nl"&gt;home:&lt;/span&gt; &lt;span class="n"&gt;MovieListPage&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The list page should now be displayed when the app starts:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GRjieR0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/toureholder/flutter_adaptive_layout_tutorial/main/docs/movie_list_page_326.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GRjieR0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/toureholder/flutter_adaptive_layout_tutorial/main/docs/movie_list_page_326.png" alt='"movie list page"' title="movie list page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/toureholder/flutter_adaptive_layout_tutorial/commit/8e87521759a3f383cd175265cb4cfa9f147d9788"&gt;See the changes&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-create-the-movie-detail-page"&gt;
  &lt;/a&gt;
  5. Create the movie detail page
&lt;/h2&gt;

&lt;p&gt;Now let's create a page that will display more details of a given movie:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Within the &lt;code&gt;pages&lt;/code&gt; folder create a file named &lt;code&gt;movie_detail_page.dart&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Similarly, in &lt;code&gt;movie_detail_page.dart&lt;/code&gt; create two &lt;code&gt;StatelessWidget&lt;/code&gt;s: a container widget called &lt;code&gt;MovieDetailPage&lt;/code&gt; and a presentational &lt;code&gt;MovieDetailView&lt;/code&gt; widget, with this content:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MovieDetailPage&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Movie&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;MovieDetailPage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Scaffold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;appBar:&lt;/span&gt; &lt;span class="n"&gt;AppBar&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
      &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;MovieDetailView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MovieDetailView&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Movie&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;MovieDetailView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;SingleChildScrollView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;padding:&lt;/span&gt; &lt;span class="n"&gt;EdgeInsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;24.0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;crossAxisAlignment:&lt;/span&gt; &lt;span class="n"&gt;CrossAxisAlignment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
          &lt;span class="n"&gt;ClipRRect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;borderRadius:&lt;/span&gt; &lt;span class="n"&gt;BorderRadius&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;circular&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;network&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LARGE_POSTER_BASE_URL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;posterPath&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="n"&gt;SizedBox&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;height:&lt;/span&gt; &lt;span class="mf"&gt;24.0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="nl"&gt;style:&lt;/span&gt; &lt;span class="n"&gt;Theme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;textTheme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;headline4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="nl"&gt;textAlign:&lt;/span&gt; &lt;span class="n"&gt;TextAlign&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="n"&gt;SizedBox&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;height:&lt;/span&gt; &lt;span class="mf"&gt;24.0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;overview&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="nl"&gt;style:&lt;/span&gt; &lt;span class="n"&gt;Theme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;textTheme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;subtitle1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="nl"&gt;textAlign:&lt;/span&gt; &lt;span class="n"&gt;TextAlign&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;],&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For simplicity, we are just displaying the poster image, title and overview of the movie in the detail view.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/toureholder/flutter_adaptive_layout_tutorial/commit/e05d2e71c7fee7b0ddbfa2aeac13e536395b7b59"&gt;See the changes&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-navigate-to-the-detail-screen-when-an-item-is-tapped"&gt;
  &lt;/a&gt;
  6. Navigate to the detail screen when an item is tapped
&lt;/h2&gt;

&lt;p&gt;Update the &lt;code&gt;onTapItem()&lt;/code&gt; callback of the &lt;code&gt;MovieListView&lt;/code&gt; in the &lt;code&gt;MovieListPage&lt;/code&gt; widget, so we can navigate to the detail screen and back.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Within the `MovieListPage` widget&lt;/span&gt;
&lt;span class="nl"&gt;onTapItem:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Movie&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Navigator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;MaterialPageRoute&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;builder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;MovieDetailPage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;)),&lt;/span&gt;
  &lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that, our small screen UI is done! You should now be able to navigate to the detail screen and back:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2aTCF19S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/toureholder/flutter_adaptive_layout_tutorial/main/docs/small_screen_ui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2aTCF19S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/toureholder/flutter_adaptive_layout_tutorial/main/docs/small_screen_ui.png" alt='"small screen ui"' title="small screen ui"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/toureholder/flutter_adaptive_layout_tutorial/commit/427abcb49341d9276fe34506cb842067a501e5e4"&gt;See the changes&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-convert-movie-list-page-into-home-page"&gt;
  &lt;/a&gt;
  7. Convert movie list page into home page
&lt;/h2&gt;

&lt;p&gt;As a first step to making our layout adaptive to different screen sizes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Convert &lt;code&gt;MovieListPage&lt;/code&gt; to a &lt;code&gt;StatefulWidget&lt;/code&gt;. (In VS Code place the cursor on &lt;code&gt;StatelessWidget&lt;/code&gt;, press CTRL/CMD + . and select "Convert to StatefulWidget".)&lt;/li&gt;
&lt;li&gt;For semantic's sake rename it to &lt;code&gt;HomePage&lt;/code&gt; and the file to &lt;code&gt;home_page.dart&lt;/code&gt;. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;On small screens the &lt;code&gt;HomePage&lt;/code&gt; widget will contain only the &lt;code&gt;MovieListView&lt;/code&gt;. On large screens the &lt;code&gt;HomePage&lt;/code&gt; widget will contain the &lt;code&gt;MovieListView&lt;/code&gt; and the &lt;code&gt;MovieDetailView&lt;/code&gt; side by side. You'll understand why we converted the widget to a &lt;code&gt;StatefulWidget&lt;/code&gt; in just a bit.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/toureholder/flutter_adaptive_layout_tutorial/commit/a1b006b874539150b5ca681f58f1c0f023030290"&gt;See the changes&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-make-the-home-page-adaptive-with-the-raw-adaptivelayout-endraw-package"&gt;
  &lt;/a&gt;
  8. Make the home page adaptive with the &lt;code&gt;adaptive_layout&lt;/code&gt; package
&lt;/h2&gt;

&lt;p&gt;To help us implement us display different layouts on different screen sizes we'll use the &lt;a href="https://pub.dev/packages/adaptive_layout"&gt;&lt;code&gt;adaptive_layout&lt;/code&gt;&lt;/a&gt; package.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install it with
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;flutter pub add adaptive_layout
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will add a line like this to your package's pubspec.yaml (and run an implicit dart pub get).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;dependencies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;adaptive_layout&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;^0.1.3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Now in &lt;code&gt;home_page.dart&lt;/code&gt;, import the package:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:adaptive_layout/adaptive_layout.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Update the &lt;code&gt;body&lt;/code&gt; of the &lt;code&gt;Scaffold&lt;/code&gt; of &lt;code&gt;HomePage&lt;/code&gt; to be an &lt;code&gt;AdaptiveLayout&lt;/code&gt; with a &lt;code&gt;smallLayout&lt;/code&gt; and a &lt;code&gt;largeLayout&lt;/code&gt; like so:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HomePage&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatefulWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;HomePage&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;_HomePageState&lt;/span&gt; &lt;span class="n"&gt;createState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_HomePageState&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_HomePageState&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HomePage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;movies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Movie&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Scaffold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;appBar:&lt;/span&gt; &lt;span class="n"&gt;AppBar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Movies'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="c1"&gt;// Now using an `AdaptiveLayout` as the `body`&lt;/span&gt;
      &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;AdaptiveLayout&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="c1"&gt;// Provide `MovieListView` as the `smallLayout`&lt;/span&gt;
        &lt;span class="nl"&gt;smallLayout:&lt;/span&gt; &lt;span class="n"&gt;MovieListView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;movies:&lt;/span&gt; &lt;span class="n"&gt;movies&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;onTapItem:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Movie&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Navigator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="n"&gt;MaterialPageRoute&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;builder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;MovieDetailPage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;)),&lt;/span&gt;
            &lt;span class="o"&gt;);&lt;/span&gt;
          &lt;span class="o"&gt;},&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="c1"&gt;// Provide a `Row` as the `largeLayout`&lt;/span&gt;
        &lt;span class="nl"&gt;largeLayout:&lt;/span&gt; &lt;span class="n"&gt;Row&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;Expanded&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;MovieListView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="nl"&gt;movies:&lt;/span&gt; &lt;span class="n"&gt;movies&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="nl"&gt;onTapItem:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Movie&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                  &lt;span class="c1"&gt;// TODO: Update detail view to the right&lt;/span&gt;
                &lt;span class="o"&gt;},&lt;/span&gt;
              &lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;Expanded&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                  &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                    &lt;span class="s"&gt;'Select a movie from the list on the left to see the details here.'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                  &lt;span class="o"&gt;),&lt;/span&gt;
                &lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="o"&gt;)&lt;/span&gt;
          &lt;span class="o"&gt;],&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;smallLayout&lt;/code&gt; is just our &lt;code&gt;MovieListView&lt;/code&gt; and the &lt;code&gt;largeLayout&lt;/code&gt; is a 2-column &lt;code&gt;Row&lt;/code&gt; with the &lt;code&gt;MovieListView&lt;/code&gt; in the first &lt;code&gt;Expanded&lt;/code&gt; column.&lt;/p&gt;

&lt;p&gt;At this point, on small screens the app should have the same behavior as before of navigating to the detail page when a list item is tapped. On large screens we should now see the list on the left-hand side of the screen and the message "Select a movie from the list on the left to see the details here" in the center of the right-hand side of the screen: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U48uG1CN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/toureholder/flutter_adaptive_layout_tutorial/main/docs/large_screen_ui_initial_738.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U48uG1CN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/toureholder/flutter_adaptive_layout_tutorial/main/docs/large_screen_ui_initial_738.png" alt='"large screen ui"' title="large screen ui"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, nothing happens when we tap a list item on large screens. Let's tackle that next.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-display-the-detail-view-when-an-item-is-tapped-on-large-screens"&gt;
  &lt;/a&gt;
  9. Display the detail view when an item is tapped on large screens
&lt;/h2&gt;

&lt;p&gt;With a few new lines of code in the &lt;code&gt;home_page.dart&lt;/code&gt; file we can display the detail view on the right hand side when an item is tapped on large screens.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a private property of the &lt;code&gt;_HomePageState&lt;/code&gt; of type &lt;code&gt;Movie?&lt;/code&gt; named &lt;code&gt;_selectedMovie&lt;/code&gt;.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_HomePageState&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;HomePage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Movie&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;_selectedMovie&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Update the &lt;code&gt;onTapItem()&lt;/code&gt; callback of the &lt;code&gt;MovieListView&lt;/code&gt; in the &lt;strong&gt;&lt;code&gt;largeLayout&lt;/code&gt;&lt;/strong&gt; of the &lt;code&gt;AdaptiveLayout&lt;/code&gt; widget to update the &lt;code&gt;_selectedMovie&lt;/code&gt; property with &lt;code&gt;setState&lt;/code&gt;. This is why we converted the widget to a &lt;code&gt;StatefulWidget&lt;/code&gt; a few steps ago.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Within the `largeLayout`&lt;/span&gt;
&lt;span class="nl"&gt;onTapItem:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Movie&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;setState&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;_selectedMovie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;});&lt;/span&gt;
&lt;span class="o"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Update the second &lt;code&gt;Expandable&lt;/code&gt; of the &lt;code&gt;Row&lt;/code&gt; to display the message if &lt;code&gt;_selectedMovie&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; and the &lt;code&gt;MovieDetailView&lt;/code&gt; otherwise.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Expanded&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
  &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;_selectedMovie&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
        &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="s"&gt;'Select a movie from the list on the left to see the details here.'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MovieDetailView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;_selectedMovie&lt;/span&gt;&lt;span class="o"&gt;!,&lt;/span&gt;
          &lt;span class="o"&gt;),&lt;/span&gt;
  &lt;span class="o"&gt;),&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And... we're done! üéâ&lt;/p&gt;

&lt;p&gt;On small, phone-sized, screens when the user taps an item they will navigate to a different screen with the details and on larger screens the details are displayed on the right side of the list and there is no navigation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hJ326EwV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/toureholder/flutter_adaptive_layout_tutorial/main/docs/large_screen_ui_done_738.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hJ326EwV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/toureholder/flutter_adaptive_layout_tutorial/main/docs/large_screen_ui_done_738.png" alt='"large screen ui"' title="large screen ui"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/toureholder/flutter_adaptive_layout_tutorial/commit/5df19896e44c182059598f886bf55660bae37ae5"&gt;See the changes&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#bonus-make-it-look-a-little-better-on-large-screens"&gt;
  &lt;/a&gt;
  BONUS: Make it look a little better on large screens
&lt;/h2&gt;

&lt;p&gt;To make our app look a little better, let's leave the selected list item highlighted and put a divider line between the list view and the detail view with a few new lines of code in the &lt;code&gt;home_page.dart&lt;/code&gt; file.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add a new attribute &lt;code&gt;selectedId&lt;/code&gt; attribute to &lt;code&gt;MovieListView&lt;/code&gt;, so it knows which item a selected.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MovieListView&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Movie&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;movies&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Movie&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;onTapItem&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;selectedId&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;MovieListView&lt;/span&gt;&lt;span class="o"&gt;({&lt;/span&gt;
    &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;movies&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;required&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onTapItem&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;selectedId&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;})&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Update the &lt;code&gt;itemBuilder&lt;/code&gt; of the &lt;code&gt;ListView.builder&lt;/code&gt; to wrap the &lt;code&gt;ListTile&lt;/code&gt; in a &lt;code&gt;Container&lt;/code&gt; and give the &lt;code&gt;Container&lt;/code&gt; color if the &lt;code&gt;ListTile&lt;/code&gt;'s movie is the selected one.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="nl"&gt;itemBuilder:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;movies&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

  &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;selectedId&lt;/span&gt;
      &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Theme&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;primaryColor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withOpacity&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.25&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;transparent&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;ListTile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;key:&lt;/span&gt; &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'list_item_&lt;/span&gt;&lt;span class="si"&gt;$index&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="nl"&gt;leading:&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;network&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SMALL_POSTER_BASE_URL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;posterPath&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;${movie.title}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="nl"&gt;contentPadding:&lt;/span&gt; &lt;span class="n"&gt;EdgeInsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;12.0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="nl"&gt;onTap:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;onTapItem&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;call&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="o"&gt;},&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;
  &lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Update the first &lt;code&gt;Expandable&lt;/code&gt; of the &lt;code&gt;Row&lt;/code&gt; in the &lt;code&gt;largeLayout&lt;/code&gt; of the &lt;code&gt;AdaptiveLayout&lt;/code&gt; to provide the selected movie's &lt;code&gt;id&lt;/code&gt; to the &lt;code&gt;MovieListView&lt;/code&gt;.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Expanded&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
  &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;MovieListView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;movies:&lt;/span&gt; &lt;span class="n"&gt;movies&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nl"&gt;onTapItem:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Movie&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;setState&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_selectedMovie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;});&lt;/span&gt;
    &lt;span class="o"&gt;},&lt;/span&gt;
    &lt;span class="nl"&gt;selectedId:&lt;/span&gt; &lt;span class="n"&gt;_selectedMovie&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;),&lt;/span&gt;
&lt;span class="o"&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Lastly, let's add a border to the left-hand side of the detail view's &lt;code&gt;Container&lt;/code&gt; with some &lt;code&gt;BoxDecoration&lt;/code&gt;.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Expanded&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
  &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;decoration:&lt;/span&gt; &lt;span class="n"&gt;BoxDecoration&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;border:&lt;/span&gt; &lt;span class="n"&gt;Border&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;left:&lt;/span&gt; &lt;span class="n"&gt;BorderSide&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;grey&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="o"&gt;]!,&lt;/span&gt;
          &lt;span class="nl"&gt;width:&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;_selectedMovie&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
        &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="s"&gt;'Select a movie from the list on the left to see the details here.'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MovieDetailView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;_selectedMovie&lt;/span&gt;&lt;span class="o"&gt;!,&lt;/span&gt;
          &lt;span class="o"&gt;),&lt;/span&gt;
  &lt;span class="o"&gt;),&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course the sky's the limit with the design, but I think our app is minimally presentable now:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6yRb8ETL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/toureholder/flutter_adaptive_layout_tutorial/main/docs/large_screen_ui_better_738.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6yRb8ETL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/toureholder/flutter_adaptive_layout_tutorial/main/docs/large_screen_ui_better_738.png" alt='"large screen ui"' title="large screen ui"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/toureholder/flutter_adaptive_layout_tutorial/commit/270ee50594899df6456cdf0440257d117bc043ab"&gt;See the changes&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-tests"&gt;
  &lt;/a&gt;
  BONUS: Tests
&lt;/h2&gt;

&lt;p&gt;I chose not to TDD this so we could focus on the layout, but you can find &lt;a href="https://github.com/toureholder/flutter_adaptive_layout_tutorial/tree/main/test/"&gt;the tests&lt;/a&gt; here in the source code.&lt;/p&gt;

&lt;p&gt;Note in the tests that I use &lt;code&gt;WidgetTester&lt;/code&gt; to specify a small screen size in a &lt;code&gt;setUp&lt;/code&gt; function like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;setUp&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;physicalSizeTestValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;AdaptiveLayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getBreakpoints&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;mediumScreenMinWidth&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;devicePixelRatioTestValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and to specify a large screen size like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;setUp&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;physicalSizeTestValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;AdaptiveLayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getBreakpoints&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;largeScreenMinWidth&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;binding&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;devicePixelRatioTestValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Head over the the &lt;a href="https://github.com/toureholder/flutter_adaptive_layout_tutorial"&gt;Github repo&lt;/a&gt; to see the complete source code with a separate commit for each step üòâ.&lt;/p&gt;

&lt;p&gt;Congrats on making it to the end and thanks for following along! üëè ‚ù§Ô∏è ‚≠ê ü¶Ñ üîñ&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How I failed to create an audience twice (and succeeded the third time)</title>
      <author>Pasca Vlad</author>
      <pubDate>Fri, 02 Jul 2021 11:34:08 +0000</pubDate>
      <link>https://dev.to/pascavld/how-i-failed-to-create-an-audience-twice-and-succeeded-the-third-time-4dh9</link>
      <guid>https://dev.to/pascavld/how-i-failed-to-create-an-audience-twice-and-succeeded-the-third-time-4dh9</guid>
      <description>&lt;p&gt;&lt;em&gt;If you found value in this thread you will most likely enjoy my tweets too so make sure you follow me on &lt;a href="https://twitter.com/VladPasca5"&gt;Twitter&lt;/a&gt;  for more information about web development and how to improve as a developer. This article was first published on my &lt;a href="https://vladpasca.hashnode.dev/"&gt;Blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It all started one year ago&lt;/p&gt;

&lt;p&gt;I was following @andres_vidoza on Instagram and I liked how he was documenting his web development journey&lt;/p&gt;

&lt;p&gt;So I thought "I can do this too"&lt;/p&gt;

&lt;p&gt;The next day I took a photo of my laptop while I was coding and talked a bit about what I learned that day under it&lt;/p&gt;

&lt;p&gt;After one hour only 10 people saw it but nobody liked it&lt;/p&gt;

&lt;p&gt;I was ok with that and I continued posting&lt;/p&gt;

&lt;p&gt;After 2-3 weeks of posting every day I was getting 5 likes at most on each post I made but I wasn't enjoying that at all&lt;/p&gt;

&lt;p&gt;I hated taking pictures. I only wanted to code and then write about what I learned&lt;/p&gt;

&lt;p&gt;So I slowly became very inconsistent until I stopped posting&lt;/p&gt;

&lt;p&gt;At that time I also discovered Twitter&lt;/p&gt;

&lt;p&gt;After a few weeks of lurking, I decided to give it a try&lt;/p&gt;

&lt;p&gt;So one day I announced that I'm doing the 100 Days of Code challenge &lt;/p&gt;

&lt;p&gt;I did that for almost 2 months and nobody was seeing my posts&lt;/p&gt;

&lt;p&gt;I gained less than 100 followers in 2 months which made me really unmotivated&lt;/p&gt;

&lt;p&gt;Now when I look back I realize that the way I was formatting my tweets was really bad&lt;/p&gt;

&lt;p&gt;Lots of hashtags, no white spaces&lt;/p&gt;

&lt;p&gt;So as you probably guessed after those 2 months I quit Twitter too&lt;/p&gt;

&lt;p&gt;It was the beginning of September 2020 at that time and school was about to start so I stopped coding too&lt;/p&gt;

&lt;p&gt;Then somewhere around the 1st of October, I read an article from @catalinmpit &lt;/p&gt;

&lt;p&gt;He was talking about how important an online presence is for a developer&lt;/p&gt;

&lt;p&gt;That article motivated me to start tweeting again&lt;/p&gt;

&lt;p&gt;So I made that public once again and I also bought a Twitter course...&lt;/p&gt;

&lt;p&gt;(will talk more about this later)&lt;/p&gt;

&lt;p&gt;One week went by and I started to fall in love with it&lt;/p&gt;

&lt;p&gt;I saw that as I was applying the learnings from that course my tweets were getting more and more likes&lt;/p&gt;

&lt;p&gt;A few months later of tweeting every day I hit 1000 followers&lt;/p&gt;

&lt;p&gt;From there everything got a lot easier&lt;/p&gt;

&lt;p&gt;All I did was follow what I learned in that course and post tweets every day&lt;/p&gt;

&lt;p&gt;And here we are now&lt;/p&gt;

&lt;p&gt;After 2 failures and 6 months of hard work, I managed to build an amazing audience of 18,000+ people&lt;/p&gt;

&lt;p&gt;So, what can you learn from this story?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Find the platform that works the best for you&lt;/li&gt;
&lt;li&gt;Create a schedule and post something everyday&lt;/li&gt;
&lt;li&gt;Get a growth course to speed up the process&lt;/li&gt;
&lt;li&gt;Stay consistent for at least 3 months&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Btw, this is the Twitter course I was talking about&lt;/p&gt;

&lt;p&gt;aff&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gumroad.com/a/886314099"&gt;https://gumroad.com/a/886314099&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The end
&lt;/h3&gt;

&lt;p&gt;_I hope found this useful and if you did please let me know. If you have any question feel free to DM me &lt;/p&gt;

</description>
      <category>twitter</category>
      <category>audience</category>
      <category>story</category>
      <category>failures</category>
    </item>
    <item>
      <title>[Cybersecurity] Most common web security vulnerabilities!</title>
      <author>Yuma-Tsushima </author>
      <pubDate>Fri, 02 Jul 2021 11:34:05 +0000</pubDate>
      <link>https://dev.to/yumatsushima07/cybersecurity-most-common-web-security-vulnerabilities-3g7f</link>
      <guid>https://dev.to/yumatsushima07/cybersecurity-most-common-web-security-vulnerabilities-3g7f</guid>
      <description>&lt;p&gt;OWASP or Open Web Security Project is a non-profit charitable organization focused on improving the security of software and web applications.&lt;/p&gt;

&lt;p&gt;The organization publishes a list of top web security vulnerabilities based on the data from various security organizations.&lt;/p&gt;

&lt;p&gt;The web security vulnerabilities are prioritized depending on exploitability, detectability and impact on software.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Exploitability&lt;/strong&gt; - What is needed to exploit the security vulnerability? Highest exploitability when the attack needs only web browser and lowest being advanced programming and tools.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Detectability&lt;/strong&gt; - How easy is it to detect the threat? Highest being the information displayed on URL, Form or Error message and lowest being source code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Impact or Damage&lt;/strong&gt; - How much damage will be done if the security vulnerability is exposed or attacked? Highest being complete system crash and lowest being nothing at all.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main aim of OWASP Top 10 is to educate the developers, designers, managers, architects and organizations about the most important security vulnerabilities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Top 10 security vulnerabilities as per OWASP Top 10 are:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SQL Injection&lt;/li&gt;
&lt;li&gt;Cross Site Scripting&lt;/li&gt;
&lt;li&gt;Broken Authentication and Session Management&lt;/li&gt;
&lt;li&gt;Insecure Direct Object References&lt;/li&gt;
&lt;li&gt;Cross Site Request Forgery&lt;/li&gt;
&lt;li&gt;Security Misconfiguration&lt;/li&gt;
&lt;li&gt;Insecure Cryptographic Storage&lt;/li&gt;
&lt;li&gt;Failure to restrict URL Access&lt;/li&gt;
&lt;li&gt;Insufficient Transport Layer Protection&lt;/li&gt;
&lt;li&gt;Unvalidated Redirects and Forwards&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#sql-injection"&gt;
  &lt;/a&gt;
  SQL Injection
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  Description
&lt;/h3&gt;

&lt;p&gt;Injection is a security vulnerability that allows an attacker to alter backend &lt;a href="https://www.w3schools.com/sql/sql_injection.asp"&gt;SQL&lt;/a&gt; statements by manipulating the user supplied data.&lt;/p&gt;

&lt;p&gt;Injection occurs when the user input is sent to an interpreter as part of command or query and trick the interpreter into executing unintended commands and gives access to unauthorized data.&lt;/p&gt;

&lt;p&gt;The SQL command which when executed by web application can also expose the back-end database.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implication"&gt;
  &lt;/a&gt;
  Implication
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;An attacker can inject malicious content into the vulnerable fields.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sensitive data like User Names, Passwords, etc. can be read from the database.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Database data can be modified (Insert/Update/ Delete).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Administration Operations can be executed on the database&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#vulnerable-objects"&gt;
  &lt;/a&gt;
  Vulnerable Objects
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Input Fields&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;URLs interacting with the database.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;SQL injection on the Login Page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Logging into an application without having valid credentials.&lt;/p&gt;

&lt;p&gt;Valid &lt;code&gt;userName&lt;/code&gt; is available, and password is not available.&lt;/p&gt;

&lt;p&gt;User Name: &lt;code&gt;sjones&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Password: &lt;code&gt;1=1' or pass123&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;SQL query created and sent to Interpreter as below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;Users&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;User_Name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sjones&lt;/span&gt; &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;Password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="s1"&gt;' or pass123;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#recommendations"&gt;
  &lt;/a&gt;
  Recommendations
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;White listing the input fields&lt;/li&gt;
&lt;li&gt;Avoid displaying detailed error messages that are useful to an attacker.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#cross-site-scripting"&gt;
  &lt;/a&gt;
  Cross Site Scripting
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  Description
&lt;/h3&gt;

&lt;p&gt;Cross Site Scripting is also shortly known as XSS.&lt;/p&gt;

&lt;p&gt;XSS vulnerabilities target scripts embedded in a page that are executed on the client side i.e. user browser rather then at the server side. These flaws can occur when the application takes untrusted data and send it to the web browser without proper validation.&lt;/p&gt;

&lt;p&gt;Attackers can use XSS to execute malicious scripts on the users in this case victim browsers. Since the browser cannot know if the script is trusty or not, the script will be executed, and the attacker can hijack session cookies, deface websites, or redirect the user to an unwanted and malicious websites.&lt;/p&gt;

&lt;p&gt;XSS is an attack which allows the attacker to execute the scripts on the victim's browser.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#implication"&gt;
  &lt;/a&gt;
  Implication:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Making the use of this security vulnerability, an attacker can inject scripts into the application, can steal session cookies, deface websites, and can run malware on the victim's machines.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#vulnerable-objects"&gt;
  &lt;/a&gt;
  Vulnerable Objects
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Input Fields&lt;/li&gt;
&lt;li&gt;URLs&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;

&lt;p&gt;1.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;http://www.example.com/home?"&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;xss&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The above script when run on a browser, a message box will be displayed if the site is vulnerable to XSS.&lt;/p&gt;

&lt;p&gt;The more serious attack can be done if the attacker wants to display or store session cookie.&lt;/p&gt;

&lt;p&gt;2.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;http://example.net/search.aspx?txtSearch &lt;span class="nt"&gt;&amp;lt;iframe&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;src&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="na"&gt;http:&lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="na"&gt;google.com&lt;/span&gt; &lt;span class="na"&gt;width = &lt;/span&gt;&lt;span class="s"&gt;500&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt; &lt;span class="err"&gt;500&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The above script when run, the browser will load an invisible frame pointing to &lt;code&gt;http://google.com&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The attack can be made serious by running a malicious script on the browser.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#recommendations"&gt;
  &lt;/a&gt;
  Recommendations
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;White Listing input fields&lt;/li&gt;
&lt;li&gt;Input Output encoding&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#broken-authentication-and-session-management"&gt;
  &lt;/a&gt;
  Broken Authentication and Session Management
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  Description
&lt;/h3&gt;

&lt;p&gt;The websites usually create a session cookie and session ID for each valid session, and these cookies contain sensitive data like username, password, etc. When the session is ended either by logout or browser closed abruptly, these cookies should be invalidated i.e. for each session there should be a new cookie.&lt;/p&gt;

&lt;p&gt;If the cookies are not invalidated, the sensitive data will exist in the system. For example, a user using a public computer (Cyber Cafe), the cookies of the vulnerable site sits on the system and exposed to an attacker. An attacker uses the same public computer after some time, the sensitive data is compromised.&lt;/p&gt;

&lt;p&gt;In the same manner, a user using a public computer, instead of logging off, he closes the browser abruptly. An attacker uses the same system, when browses the same vulnerable site, the previous session of the victim will be opened. The attacker can do whatever he wants to do from stealing profile information, credit card information, etc.&lt;/p&gt;

&lt;p&gt;A check should be done to find the strength of the authentication and session management. Keys, session tokens, cookies should be implemented properly without compromising passwords.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#vulnerable-objects"&gt;
  &lt;/a&gt;
  Vulnerable Objects
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Session IDs exposed on URL can lead to session fixation attack.&lt;/li&gt;
&lt;li&gt;Session IDs same before and after logout and login.&lt;/li&gt;
&lt;li&gt;Session Timeouts are not implemented correctly.&lt;/li&gt;
&lt;li&gt;Application is assigning same session ID for each new session.&lt;/li&gt;
&lt;li&gt;Authenticated parts of the application are protected using SSL and passwords are stored in hashed or encrypted format.&lt;/li&gt;
&lt;li&gt;The session can be reused by a low privileged user.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#implication"&gt;
  &lt;/a&gt;
  Implication
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Making use of this vulnerability, an attacker can hijack a session, gain unauthorized access to the system which allows disclosure and modification of unauthorized information.&lt;/li&gt;
&lt;li&gt;The sessions can be high jacked using stolen cookies or sessions using XSS.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Airline reservation application supports URL rewriting, putting session IDs in the URL:
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;http://Examples.com/sale/saleitems;jsessionid=2P0OC2oJM0DPXSNQPLME34SERTBG/dest=Maldives
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;br&gt;
 (Sale of tickets to Maldives)&lt;/p&gt;

&lt;p&gt;An authenticated user of the site wants to let his friends know about the sale and sends an email across. The friends receive the session ID and can be used to do unauthorized modifications or misuse the saved credit card details.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;An application is vulnerable to XSS, by which an attacker can access the session ID and can be used to hijack the session.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Applications timeouts are not set properly. The user uses a public computer and closes the browser instead of logging off and walks away. The attacker uses the same browser some time later, and the session is authenticated.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#recommendations"&gt;
  &lt;/a&gt;
  Recommendations
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;All the authentication and session management requirements should be defined as per OWASP Application Security Verification Standard.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Never expose any credentials in URLs or Logs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Strong efforts should be also made to avoid XSS flaws which can be used to steal session IDs.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#insecure-direct-object-references"&gt;
  &lt;/a&gt;
  Insecure Direct Object References
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  Description
&lt;/h3&gt;

&lt;p&gt;It occurs when a developer exposes a reference to an internal implementation object, such as a file, directory, or database key as in URL or as a FORM parameter. The attacker can use this information to access other objects and can create a future attack to access the unauthorized data.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#implication"&gt;
  &lt;/a&gt;
  Implication
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Using this vulnerability, an attacker can gain access to unauthorized internal objects, can modify data or compromise the application.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#vulnerable-objects"&gt;
  &lt;/a&gt;
  Vulnerable Objects
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;In the URL.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples:
&lt;/h3&gt;

&lt;p&gt;Changing &lt;code&gt;"userid"&lt;/code&gt; in the following URL can make an attacker to view other user's information.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://www.vulnerablesite.com/userid=123
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;modified to&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://www.vulnerablesite.com/userid=124
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;An attacker can view others information by changing user id value.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#recommendations"&gt;
  &lt;/a&gt;
  Recommendations:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Implement access control checks.&lt;/li&gt;
&lt;li&gt;Avoid exposing object references in URLs.&lt;/li&gt;
&lt;li&gt;Verify authorization to all reference objects.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#cross-site-request-forgery"&gt;
  &lt;/a&gt;
  Cross Site Request Forgery
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  Description
&lt;/h3&gt;

&lt;p&gt;Cross Site Request Forgery is a forged request came from the cross site.&lt;/p&gt;

&lt;p&gt;CSRF attack is an attack that occurs when a malicious website, email, or program causes a user's browser to perform an unwanted action on a trusted site for which the user is currently authenticated.&lt;/p&gt;

&lt;p&gt;A CSRF attack forces a logged-on victim's browser to send a forged HTTP request, including the victim's session cookie and any other automatically included authentication information, to a vulnerable web application.&lt;/p&gt;

&lt;p&gt;A link will be sent by the attacker to the victim when the user clicks on the URL when logged into the original website, the data will be stolen from the website.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#implication"&gt;
  &lt;/a&gt;
  Implication
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Using this vulnerability as an attacker can change user profile information, change status, create a new user on admin behalf, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#vulnerable-objects"&gt;
  &lt;/a&gt;
  Vulnerable Objects
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;User Profile page&lt;/li&gt;
&lt;li&gt;User account forms&lt;/li&gt;
&lt;li&gt;Business transaction page&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;

&lt;p&gt;The victim is logged into a bank website using valid credentials. He receives mail from an attacker saying "Please click here to donate $1 to cause."&lt;/p&gt;

&lt;p&gt;When the victim clicks on it, a valid request will be created to donate $1 to a particular account.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://www.vulnerablebank.com/transfer.do?account=cause&amp;amp;amount=1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The attacker captures this request and creates below request and embeds in a button saying "I Support Cause."&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://www.vulnerablebank.com/transfer.do?account=Attacker&amp;amp;amount=1000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Since the session is authenticated and the request is coming through the bank website, the server would transfer $1000 dollars to the attacker.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#recommendation"&gt;
  &lt;/a&gt;
  Recommendation
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Mandate user's presence while performing sensitive actions.&lt;/li&gt;
&lt;li&gt;Implement mechanisms like CAPTCHA, Re-Authentication, and Unique Request Tokens.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#security-misconfiguration"&gt;
  &lt;/a&gt;
  Security Misconfiguration
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  Description
&lt;/h3&gt;

&lt;p&gt;Security Configuration must be defined and deployed for the application, frameworks, application server, web server, database server, and platform. If these are properly configured, an attacker can have unauthorized access to sensitive data or functionality.&lt;/p&gt;

&lt;p&gt;Sometimes such flaws result in complete system compromise. Keeping the software up to date is also good security.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#implication"&gt;
  &lt;/a&gt;
  Implication
&lt;/h3&gt;

&lt;p&gt;Making use of this vulnerability, the attacker can enumerate the underlying technology and application server version information, database information and gain information about the application to mount few more attacks.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#vulnerable-objects"&gt;
  &lt;/a&gt;
  Vulnerable objects
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;URL&lt;/li&gt;
&lt;li&gt;Form Fields&lt;/li&gt;
&lt;li&gt;Input fields&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The application server admin console is automatically installed and not removed. Default accounts are not changed. The attacker can log in with default passwords and can gain unauthorized access.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Directory Listing is not disabled on your server. Attacker discovers and can simply list directories to find any file.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#insecure-cryptographic-storage"&gt;
  &lt;/a&gt;
  Insecure Cryptographic Storage
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  Description
&lt;/h3&gt;

&lt;p&gt;Insecure Cryptographic storage is a common vulnerability which exists when the sensitive data is not stored securely.&lt;/p&gt;

&lt;p&gt;The user credentials, profile information, health details, credit card information, etc. come under sensitive data information on a website.&lt;/p&gt;

&lt;p&gt;This data will be stored on the application database. When this data are stored improperly by not using encryption or hashing*, it will be vulnerable to the attackers.&lt;/p&gt;

&lt;p&gt;(*Hashing is transformation of the string characters into shorter strings of fixed length or a key. To decrypt the string, the algorithm used to form the key should be available)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#implication"&gt;
  &lt;/a&gt;
  Implication
&lt;/h3&gt;

&lt;p&gt;By using this vulnerability, an attacker can steal, modify such weakly protected data to conduct identity theft, credit card fraud or other crimes.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#vulnerable-objects"&gt;
  &lt;/a&gt;
  Vulnerable objects
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Application database.
### Examples&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In one of the banking application, password database uses unsalted hashes * to store everyone's passwords. An SQL injection flaw allows the attacker to retrieve the password file. All the unsalted hashes can be brute forced in no time whereas, the salted passwords would take thousands of years.&lt;/p&gt;

&lt;p&gt;(*Unsalted Hashes ‚Äì Salt is a random data appended to the original data. Salt is appended to the password before hashing)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#recommendations"&gt;
  &lt;/a&gt;
  Recommendations
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Ensure appropriate strong standard algorithms. Do not create own cryptographic algorithms. Use only approved public algorithms such as AES, RSA public key cryptography, and SHA-256, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ensure offsite backups are encrypted, but the keys are managed and backed up separately.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#failure-to-restrict-url-access"&gt;
  &lt;/a&gt;
  Failure to restrict URL Access
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  Description
&lt;/h3&gt;

&lt;p&gt;Web applications check URL access rights before rendering protected links and buttons. Applications need to perform similar access control checks each time these pages are accessed.&lt;/p&gt;

&lt;p&gt;In most of the applications, the privileged pages, locations and resources are not presented to the privileged users.&lt;/p&gt;

&lt;p&gt;By an intelligent guess, an attacker can access privilege pages. An attacker can access sensitive pages, invoke functions and view confidential information.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#implication"&gt;
  &lt;/a&gt;
  Implication
&lt;/h3&gt;

&lt;p&gt;Making use of this vulnerability attacker can gain access to the unauthorized URLs, without logging into the application and exploit the vulnerability. An attacker can access sensitive pages, invoke functions and view confidential information.&lt;br&gt;
Vulnerable objects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;URLs&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Attacker notices the URL indicates the role as "/user/getaccounts." He modifies as "/admin/getaccounts".&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An attacker can append role to the URL.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://www.vulnerablsite.com 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;can be modified as&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; http://www.vulnerablesite.com/admin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#recommendations"&gt;
  &lt;/a&gt;
  Recommendations
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Implement strong access control checks.&lt;/li&gt;
&lt;li&gt;Authentication and authorization policies should be role-based.&lt;/li&gt;
&lt;li&gt;Restrict access to unwanted URLs.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#insufficient-transport-layer-protection"&gt;
  &lt;/a&gt;
  Insufficient Transport Layer Protection
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  Description
&lt;/h3&gt;

&lt;p&gt;Deals with information exchange between the user (client) and the server (application). Applications frequently transmit sensitive information like authentication details, credit card information, and session tokens over a network.&lt;/p&gt;

&lt;p&gt;By using weak algorithms or using expired or invalid certificates or not using SSL can allow the communication to be exposed to untrusted users, which may compromise a web application and or steal sensitive information.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#implication"&gt;
  &lt;/a&gt;
  Implication
&lt;/h3&gt;

&lt;p&gt;Making use of this web security vulnerability, an attacker can sniff legitimate user's credentials and gaining access to the application.&lt;br&gt;
Can steal credit card information.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#vulnerable-objects"&gt;
  &lt;/a&gt;
  Vulnerable objects
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Data sent over the network.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#recommendations"&gt;
  &lt;/a&gt;
  Recommendations
&lt;/h3&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enable secure HTTP and enforce credential transfer over HTTPS only.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ensure your certificate is valid and not expired.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples:
&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;An application not using SSL, an attacker will simply monitor network traffic and observes an authenticated victim session cookie. An attacker can steal that cookie and perform Man-in-the-Middle attack.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#unvalidated-redirects-and-forwards"&gt;
  &lt;/a&gt;
  Unvalidated Redirects and Forwards
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  Description
&lt;/h3&gt;

&lt;p&gt;The web application uses few methods to redirect and forward users to other pages for an intended purpose.&lt;/p&gt;

&lt;p&gt;If there is no proper validation while redirecting to other pages, attackers can make use of this and can redirect victims to phishing or malware sites, or use forwards to access unauthorized pages.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#implication"&gt;
  &lt;/a&gt;
  Implication
&lt;/h3&gt;

&lt;p&gt;An attacker can send a URL to the user that contains a genuine URL appended with encoded malicious URL. A user by just seeing the genuine part of the attacker sent URL can browse it and may become a victim.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h3&gt;

&lt;p&gt;1.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://www.vulnerablesite.com/login.aspx?redirectURL=ownsite.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Modified to&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http://www.vulnerablesite.com/login.aspx?redirectURL=evilsite.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#recommendations"&gt;
  &lt;/a&gt;
  Recommendations
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Simply avoid using redirects and forwards in the application. If used, do not involve using user parameters in calculating the destination.&lt;/li&gt;
&lt;li&gt;If the destination parameters can't be avoided, ensure that the supplied value is valid, and authorized for the user.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Question: What other common web vulnerabilities do you know? How do we use them? Write a comment below!&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Yuma-Tsushima07"&gt;
        Yuma-Tsushima07
      &lt;/a&gt; / &lt;a href="https://github.com/Yuma-Tsushima07/Yuma-Tsushima07"&gt;
        Yuma-Tsushima07
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Readme file
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
      &lt;h1&gt;
Welcome to Yuma-Tsushima's Github page!&lt;/h1&gt;
  &lt;p&gt;
  &lt;b&gt;Visitor count &lt;/b&gt;&lt;br&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/57a70d5f50ac5d203e9b6bd912fc9e4b01c8d40c215b656821b455d1f18f928f/68747470733a2f2f70726f66696c652d636f756e7465722e676c697463682e6d652f59756d612d5473757368696d6130372f636f756e742e737667"&gt;&lt;img src="https://camo.githubusercontent.com/57a70d5f50ac5d203e9b6bd912fc9e4b01c8d40c215b656821b455d1f18f928f/68747470733a2f2f70726f66696c652d636f756e7465722e676c697463682e6d652f59756d612d5473757368696d6130372f636f756e742e737667"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.patreon.com/Order_of_the_Black_Knights_C2_bot" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6a6769e2d2eb0567975317a589549beaa5db99df73ce9d6f5f9004ec12eee28e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f537570706f72742d42757925323075732532306125323050697a7a612d6f72616e67652e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d70617472656f6e" alt="Support"&gt;&lt;/a&gt;
&lt;a href="https://disboard.org/server/711260885531885648" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/018986f113096a2680c8fa03f313cdf0b8adf24be6d7b9df04b81f14e7897680/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f43322773253230506c6163652d4a6f696e2532307573253230666f7225323061253230636861742d626c75652e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d646973636f7264" alt="Discord"&gt;&lt;/a&gt;
&lt;a href="https://discord.gg/mNAWykv67W" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b3b2ffae6fa2d5de61341af99a4e69ce1546047acebcb5039aa106a8411b2209/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4a6f696e253230746f253230636861742d4379626572417274427974652d626c75652e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d646973636f7264" alt="Discord"&gt;&lt;/a&gt;
&lt;a href="https://soundcloud.com/0c7av3h4ck5" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b8ae02d15a55c4261d919a7dd81f80335cf71d017eb6b737cc32698877f322f9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f536f756e642d436c6f75642d7265642e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d736f756e64636c6f7564" alt="SoundCloud"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/Yuma-Tsushima07/Yuma-Tsushima07/blob/main/assets/terminalpython.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--30kNr2f4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Yuma-Tsushima07/Yuma-Tsushima07/raw/main/assets/terminalpython.png"&gt;&lt;/a&gt;&lt;/p&gt;

      &lt;h3&gt;
About Myself&lt;/h3&gt;
      &lt;p&gt;Hello, my name is Yuma-Tsushima (frequently shortened to Yuma). I am an ambitious coder, and I enjoy coding in JavaScript (mainly). I also love making websites using HTML, CSS and (of course) JS! I started programming (self taught) at the age of 13. Originally, I came from the creative field ; I draw/sing/animate/make music.  &lt;/p&gt;
   

&lt;h3&gt;
Talents and Hobbies&lt;/h3&gt;
&lt;p&gt;I love drawing (I have been drawing all of my life). I play strategy games, I code and I do CTFs! I am also good at animation, making AMVs and image editing. My favourite game is Mindustry, followed by Flow Free and Sudoku. I love watching anime (I love Code Geass - I relate to Lelouch a lot) and I aspire to create my own anime!&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/2ee6b04a74d2e5f3c133f042cf9a4c517c12de84f3b843a716694fc09474e417/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233653334633236266d6573736167653d44726177696e67253230253743253230412a"&gt;&lt;img src="https://camo.githubusercontent.com/2ee6b04a74d2e5f3c133f042cf9a4c517c12de84f3b843a716694fc09474e417/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233653334633236266d6573736167653d44726177696e67253230253743253230412a" alt="Drawing"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/9107ed8d09376ce206e2398fd0513fae0bb422cf18f2c863fdeb4cff1da69c42/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233353633643763266d6573736167653d4d7573696325323025374325323042"&gt;&lt;img src="https://camo.githubusercontent.com/9107ed8d09376ce206e2398fd0513fae0bb422cf18f2c863fdeb4cff1da69c42/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233353633643763266d6573736167653d4d7573696325323025374325323042" alt="Music"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/0f8e7c7e97a090de494030cec5e9c53271971a05cc99cc1877be133211103b2f/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233326237343839266d6573736167653d4469676974616c253230417274776f726b253230253743253230383025"&gt;&lt;img src="https://camo.githubusercontent.com/0f8e7c7e97a090de494030cec5e9c53271971a05cc99cc1877be133211103b2f/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233326237343839266d6573736167653d4469676974616c253230417274776f726b253230253743253230383025" alt="Digital Artwork"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/e00451d5e1f51b60407fef6ea1383867d43e4520e2ba2b9e90a10defea549d16/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363841303633266d6573736167653d49435425323025374325323041"&gt;&lt;img src="https://camo.githubusercontent.com/e00451d5e1f51b60407fef6ea1383867d43e4520e2ba2b9e90a10defea549d16/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363841303633266d6573736167653d49435425323025374325323041" alt="ICT"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/06f4f740a9fa9a5b4bc25b358d6e98df500cccd4f936b4a8bb020ce509b12e23/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363144424642266d6573736167653d456c656374726f6e69637325323025374325323041"&gt;&lt;img src="https://camo.githubusercontent.com/06f4f740a9fa9a5b4bc25b358d6e98df500cccd4f936b4a8bb020ce509b12e23/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363144424642266d6573736167653d456c656374726f6e69637325323025374325323041" alt="Electronics"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/f4a546b3fe39d4cfad9b832e36d1383b539c29e2876293b13466c3cfd6881a68/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d333036393938266d6573736167653d44657369676e73253230253743253230383525"&gt;&lt;img src="https://camo.githubusercontent.com/f4a546b3fe39d4cfad9b832e36d1383b539c29e2876293b13466c3cfd6881a68/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d333036393938266d6573736167653d44657369676e73253230253743253230383525" alt="Desgins"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8e0c219dec1ad0f1a1e6567edcbd25c8df8afddc0952dcd3f4e328f7d2074d65/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363032433530266d6573736167653d576562253230446576656c6f706d656e74253230253743253230383025"&gt;&lt;img src="https://camo.githubusercontent.com/8e0c219dec1ad0f1a1e6567edcbd25c8df8afddc0952dcd3f4e328f7d2074d65/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363032433530266d6573736167653d576562253230446576656c6f706d656e74253230253743253230383025" alt="Web dev"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/307207f36ded5f349f64978e2c8c68c08cd2f1474639832722a0ff0eff976491/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d373634616263266d6573736167653d5374726174656779253230253743253230393525"&gt;&lt;img src="https://camo.githubusercontent.com/307207f36ded5f349f64978e2c8c68c08cd2f1474639832722a0ff0eff976491/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d373634616263266d6573736167653d5374726174656779253230253743253230393525" alt="Strategy"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt; Check out my work!: &lt;/b&gt; &lt;br&gt;
‚ùØ Soundcloud : &lt;a href="https://soundcloud.com/0c7av3h4ck5" rel="nofollow"&gt;0c7av3h4ck5&lt;/a&gt; &lt;br&gt;
‚ùØ Discord : &lt;a href="https://discord.gg/mNAWykv67W" rel="nofollow"&gt;{CyberArtByte}&lt;/a&gt;  &lt;br&gt;
‚ùØ Artwork : &lt;a href="https://medibang.com/u/AcceleratorArts07/" rel="nofollow"&gt;AcceleratorArts07&lt;/a&gt; &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Recent Medium&lt;/b&gt;‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Yuma-Tsushima07/Yuma-Tsushima07"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#follow-me"&gt;
  &lt;/a&gt;
  Follow me!
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Github: &lt;a href="https://github.com/Yuma-Tsushima07"&gt;https://github.com/Yuma-Tsushima07&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Medium: &lt;a href="https://0xv37r1x3r.medium.com/"&gt;https://0xv37r1x3r.medium.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;SoundCloud: &lt;a href="https://soundcloud.com/0c7av3h4ck5"&gt;https://soundcloud.com/0c7av3h4ck5&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#discord-servers"&gt;
  &lt;/a&gt;
  Discord Servers!!
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Bounty Hunters&lt;/strong&gt;: An amazing bug hunting community full of developers and exploiters!!!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Link: &lt;a href="https://discord.gg/J5PsgKqdWq"&gt;https://discord.gg/J5PsgKqdWq&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;CyberArtByte&lt;/strong&gt;: My server full of bling and joy!!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Link: &lt;a href="https://discord.com/invite/mNAWykv67W"&gt;https://discord.com/invite/mNAWykv67W&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#new-soundcloud-track"&gt;
  &lt;/a&gt;
  New Soundcloud Track!!
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="100%" height="166" src="https://w.soundcloud.com/player/?url=https://soundcloud.com/0c7av3h4ck5/giornos-theme-edm-0c7av3h4ck5&amp;amp;auto_play=false&amp;amp;color=%23000000&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;show_teaser=true"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>cybersecurity</category>
      <category>sql</category>
      <category>websecurity</category>
    </item>
    <item>
      <title>Why do computers suck at math?</title>
      <author>Rohit Singh</author>
      <pubDate>Fri, 02 Jul 2021 11:26:20 +0000</pubDate>
      <link>https://dev.to/rohitsingh/why-do-computers-suck-at-math-3nn2</link>
      <guid>https://dev.to/rohitsingh/why-do-computers-suck-at-math-3nn2</guid>
      <description>&lt;p&gt;I always thought computers were better at math than people until I tried to add 0.1 to 0.2 and got an answer of 0.3000000004 üòï&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bni3hkOc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pz2ti3d1ctabs3cf2b10.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bni3hkOc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pz2ti3d1ctabs3cf2b10.gif" alt="what the hell"&gt;&lt;/a&gt;&lt;br&gt;
JavaScript is just a toy language so I figured it was a bug and tried the same thing in python but it also gave me the same wrong answer then I discovered that these languages aren't actually broken they just do floating point arithmetic ‚ú® &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--svSGHWzz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tv5xqrigbfo8k0313v8p.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--svSGHWzz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tv5xqrigbfo8k0313v8p.gif" alt="smart"&gt;&lt;/a&gt;&lt;br&gt;
Computers have a limited amount of memory and need to make a trade-off between range and precision in JavaScript all numbers must be stored within 64 bits that means we can have integers accurate up to 15 digits and a max of 17 numbers after the decimal point it's called a floating point because there are no fixed number of digits before or after the decimal point allowing it to represent a wide range of numbers both big and small &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bn1_C-BH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4mah7q0s3qncb7ypl4c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bn1_C-BH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4mah7q0s3qncb7ypl4c.png" alt="js error"&gt;&lt;/a&gt;&lt;br&gt;
The problem is that computers use a base 2 system binary while humans use a base 10 system that leads to rounding errors when all the memory has been used up and that's why your computer sucks at math ü§ï&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>mathematics</category>
    </item>
    <item>
      <title>How To Set Up ESLint &amp; Prettier In VS Code</title>
      <author>Rahul Shaw</author>
      <pubDate>Fri, 02 Jul 2021 11:15:53 +0000</pubDate>
      <link>https://dev.to/rahulshawdev/how-to-set-up-eslint-prettier-in-vs-code-1dc1</link>
      <guid>https://dev.to/rahulshawdev/how-to-set-up-eslint-prettier-in-vs-code-1dc1</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  INTRODUCTION
&lt;/h3&gt;

&lt;p&gt;ESLint and prettier are the most popular tools which are used almost everywhere so today we will be talking about what eslint and prettier are and we will see how easy it is to set it up in vs code without getting any errors.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-eslint"&gt;
  &lt;/a&gt;
  What is ESLint
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://eslint.org/"&gt;ESLint&lt;/a&gt;  is a tool used for identifying bugs and errors in your typescript/javascript code to make code more consistent and easy to read. It is also known as linters. ESLint statically analyzes your code to quickly find problems. Many problems ESLint finds can be automatically fixed. And the best part is you can customize ESLint to work exactly the way you need it for your project.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-prettier"&gt;
  &lt;/a&gt;
  What is Prettier
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://prettier.io/"&gt;Prettier&lt;/a&gt; is a tool that helps you to format your code. It supports many languages. It saves you time and energy since you don't have to format code on your own.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#difference-between-prettier-amp-eslint"&gt;
  &lt;/a&gt;
  Difference between Prettier &amp;amp; ESLint
&lt;/h4&gt;

&lt;p&gt;Many people think eslint &amp;amp; prettier work same but there is a huge difference. Prettier is a code formatter. In the below case, you can see that the code, &lt;em&gt;before prettier&lt;/em&gt;, is pretty messy and very hard to read as compared to &lt;em&gt;after prettier&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Before Prettier&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/svg+xml"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"favicon.svg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Vite App&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/main.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After Prettier&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/svg+xml"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"favicon.svg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Vite App&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"app"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/main.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And, eslint is a linter. As in the case below you can see eslint is giving us an error that 'hello' is declared but its value is never read.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./style.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;WASSUP GUYS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// 'hello' is declared but its value is never read&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see it will make our project free of unused variables or functions which we create but don't use it and forget to remove them.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#setup-eslint-amp-prettier-with-vite"&gt;
  &lt;/a&gt;
  Setup ESLint &amp;amp; Prettier with Vite
&lt;/h4&gt;

&lt;p&gt;We are going to use to vite to create our project if you don't know what vite is then read my previous &lt;a href="https://rahulshaw.hashnode.dev/why-you-should-use-vite"&gt;blog&lt;/a&gt;. To create a vite project open your terminal and navigate to your specific directory and paste the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init @vitejs/app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Give the name of your project and choose vanilla js as it is a tutorial project. And then change your directory to that folder and install all the modules.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt;your project name&lt;span class="k"&gt;*&lt;/span&gt;
npm &lt;span class="nb"&gt;install
&lt;/span&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, copy the below code and paste it into your terminal. Make sure you are in your project folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-D&lt;/span&gt; eslint prettier eslint-config-prettier
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After downloading it you can see in the package.json file all your dependencies. Install eslint and prettier extensions from vs code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vite"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vite build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"serve"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"vite preview"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eslint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^7.29.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"eslint-config-prettier"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^8.3.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"prettier"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.3.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"vite"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.3.8"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that run &lt;code&gt;npx eslint --init&lt;/code&gt; on the terminal. And follow the following steps.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;How would you like to use ESLint? ¬∑ To check syntax and find problems 
‚àö What &lt;span class="nb"&gt;type &lt;/span&gt;of modules does your project use? ¬∑ JavaScript modules &lt;span class="o"&gt;(&lt;/span&gt;import/export&lt;span class="o"&gt;)&lt;/span&gt;
‚àö Which framework does your project use? ¬∑ none
‚àö Does your project use TypeScript? ¬∑ No
‚àö Where does your code run? ¬∑ browser
‚àö What format &lt;span class="k"&gt;do &lt;/span&gt;you want your config file to be &lt;span class="k"&gt;in&lt;/span&gt;? ¬∑ JavaScript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, you will notice that a .eslintrc.js file has been created in your project directory. Open it and add &lt;strong&gt;&lt;em&gt;prettier&lt;/em&gt;&lt;/strong&gt; in the extends property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// eslint-disable-next-line no-undef&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;es2021&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;extends&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eslint:recommended&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prettier&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;parserOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;ecmaVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;sourceType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;module&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that create a &lt;code&gt;.prettierrc&lt;/code&gt; file in your project directory and for testing, we will add these two rules.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;semi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;singleQuote&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are lots of rules that you can add in your prettier file as well as in eslint check out the documentation for it. After that when you try to add a double quote in your javascript file it will automatically change to a single quote.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./style.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hello&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;WASSUP GUYS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  CONCLUSION
&lt;/h3&gt;

&lt;p&gt;So, we talked about how to set up eslint and prettier in vs code without getting any errors. If you have any problem please write in the comment section. If you think I missed something then feel free to comment. If I made a mistake comment and I will fix it as soon as possible.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>21 Premium Backend Interview Questions and Preparatory Answers</title>
      <author>femolacaster</author>
      <pubDate>Fri, 02 Jul 2021 10:59:26 +0000</pubDate>
      <link>https://dev.to/femolacaster/21-premium-backend-interview-questions-and-preparatory-answers-2oo9</link>
      <guid>https://dev.to/femolacaster/21-premium-backend-interview-questions-and-preparatory-answers-2oo9</guid>
      <description>&lt;p&gt;1). What is the impact of having two for loops nested in a code and how do you reduce this impact?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Well, nested for loops are not so ideal for large data. So, let‚Äôs use the big O notation to analyze this. You would notice that a single loop would run for as much the size of the array. So here, worst-case scenario, the first loop is going to run for n times. Now that we have another for loop nested, it is going to run for n* n times. And that is n square which is a quadratic time complexity and it is not a good threshold for a large application. Imagine you have billions of records you want to iterate over. Although the good part is that its space complexity is 0(1) because there are no key-value pairs. &lt;br&gt;
A solution to reduce the impact is to use a data structure such as a dictionary or map because with dictionaries you can iterate once within the key-value pairs reducing the time complexity to linear complexity0(n). However the space complexity now increases since for every key, it would need a space of n for the value, so we have 0(n) as its space complexity.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2). Explain database indexes&lt;/p&gt;

&lt;p&gt;&lt;code&gt;DB indexes are very handy. Without it, you are left to heaped storage which is not an efficient way of storing data. With indexes, your select queries would be faster as it uses this approach. Let us assume a library is our database and the books are the tables. If those books are arranged in rows just like a row on a DB without appropriate pagination, it would be harder to search for a book if there are lots of books in the library. So, DB indexing is like adding pages to your DB. You can add this to unique columns such as your primary key and unique keys and also for columns/objects that have a high data variance such as username. There are various best practices to indexes. One of which is not to add too many indexes as it can slow down performance and increase the time for Insert and update operations.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3). Explain the SOLID concept in terms of OOP. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;SOLID guides you to an efficient object thinking approach and writing better object-oriented code. Single responsibility states that a class should have only one job.  A class is a blueprint and should be a blueprint for what is defined. Doing more than what is defined is wrong and should be separated into another class. The open-closed principle is just saying classes or entities should rather be built to be extensible than modifiable just to ensure re-usability. The Linskov substitution principle encourages the use of an interface to build two entities or classes of similar sets. So if we have a square that is a subset of a rectangle, we should be able to define an interface that would serve as a blueprint of implementing the two entities instead of writing the implementation in their respective classes. Interface segregation says a client should never be forced to implement an interface/object it doesn‚Äôt use while the dependency inversion doesn‚Äôt want higher modules to be dependent on lower modules. Just like MySQL connection class depending on your custom connection class by passing it directly in the constructor. Instead, an interface should be used to fix or invert the dependency to scale.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;4). Explain the concept of ACID as regards transactions? &lt;/p&gt;

&lt;p&gt;&lt;code&gt;A transaction is a logical unit of processing in a DBMS(mostly relational DB but some document-oriented DBS are starting to use it). Mongo from version 4.0 uses it for instance. A transaction is said to be successful if it is ACID compliant where A is for atomicity where all or none of the transaction is either executed. So let‚Äôs say I want to transfer 3000 dollars to my online wallet. It‚Äôs either the whole 3000 is sent or none is sent. You cant have 2000 sent for instance. So, in short, transactions cannot be incomplete unless they would not occur at all. For isolation, it just makes sure that execution is separated from another. Let‚Äôs say a promotion website says the first person to visit their site today would get free cash and two users visit at the same time. The DB processing is still meant to process each instruction differently so that one does not affect the other. The concurrency control unit in DBMS is responsible for this. At the end of the day, we might have 2 winners based on the timestamps but for the DB, they were both processed differently. This is quite similar to multithreading. Durability says as long as execution has been committed, no matter what happens. Server failure, downtime no matter what, the commit would still have registered. So, you pay your money to your online wallet and it hits the account. And maybe 5 minutes later your financial institution‚Äôs server is down. The money should still be in the wallet if the transaction has been processed. The recovery management component is responsible for that in DBMS. An atomic, isolated, and durable, transaction would eventually be consistent because consistency means that the transaction must follow the defined rules and restrictions of the database which are what is in the AID of ACID.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;5). Define some API best practices and sample requests?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;So, one rule is not to use verbs in defining APIs.&lt;/code&gt; &lt;br&gt;
Sample requests are:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET xyzapi/v1/customers 
Get xyzapi/v1/customers/1 
Get xyzapi/v1/customers/:id?field={field}  
POST xyz/customers 
PUT xyzapi/v1/customers/:id 
PATCH xyzapi/v1/customers/:id  
DELETE xyzapi/v1/customers/:id. 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Other practices include: you should never pass sensitive information via a query string; there is no use for query string in POST requests as the body is a better approach to receive inputs; versioning should be maintained; also use authentication methods such as jwt, ssl and oauth2; have an API key; never store passwords or sensitive data in a plain format; prevent brute force by returning 429 for many bad requests; sanitize inputs before processing; return appropriate and valid HTTP error responses&lt;/code&gt; e.g:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[
{
‚Äúerror‚Äù: unauthorized,
‚Äústatus‚Äù: 401
 }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;6). What does backend development mean to you? &lt;/p&gt;

&lt;p&gt;&lt;code&gt;This could be a subjective question. But it could be key to note that backend development is building the services, tools that touch on the application‚Äôs logic. Also, it would be good to state the role of backend development in the software engineering process and its importance. And you can also add your reason for your tailored interest in backend development. &lt;br&gt;
For instance: I developed an interest in software engineering because I wanted to make games. So about 11 years ago, I watched a tutorial on Youtube on a guy making a ping pong game with Java. I was not enthused with the beautiful board design or the pretty bouncing ball, I was more amazed at the logic that powered the movement and how the computer knows when to increase the score, make the ball go faster, and all of those kinetics. Little did I know that this was the start of my backend development journey.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;7). What does cloud hosting mean?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Cloud hosting simply means renting a server that is accessible via the internet where you ‚Äúpay-as-you-go‚Äù i.e. you pay according to the number of resources you use which are majorly computing power/storage. There are majorly IAAS(Infrastructure as-a-service) and PAAS(Platform as-a-service) where the former allows you to manage your infrastructure such as EC2/digital ocean and the latter provides a layer of control where you can customize and do your server control on the fly just like Heroku and Elastix beanstalk where you need little DevOps experience. Other types of deployment include FASS(Function as-a-service) used for serverless and SASS(Software-as-a-service)  where neither infrastructure nor platform-based services are provided. It‚Äôs cool to run automated tests before deployment and deploy putting in mind that there might be room for horizontal and vertical scaling in the future.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;8).What is test driven and behavioral driven development? &lt;/p&gt;

&lt;p&gt;&lt;code&gt;TDD is when you do tests and verify that it works before you even start coding. While BDD is the same thing with a difference that the tests are more user-focused.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;9). What  is Agile Development?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Talk on collaboration, communication, flexibility, teamwork, iteration, change, value as a motivation for change, independence, less documentation. Talk on the various types: SCRUM, KANBAN, XP. The various roles involved such as product owner, scrum master, service delivery manager, service request manager etc. Talk on enabler tools such as JIRA, slack, etc.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;10). Define a database schema for a real-life scenario? &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Define a schema with the best form of normalization you can go if it is an operational scenario. If it is a reporting scenario, make sure schema is denormalized. Add the right foreign keys, including generic columns and columns that the interviewer is not thinking about. Make sure you add audit columns. Specify columns that could be used for indexing and you could also define some triggers alongside.&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;11). What are some backend programming best practices?&lt;br&gt;
&lt;code&gt;Give examples of how you can KISS, YANGI,and DRY.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;12). What language do you prefer to use to write code and why?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Of course, say the language used by the interviewer‚Äôs company. Your points should revolve around the programming architecture in the case of NodeJS for javascript, RAD in the case of ruby on rails for ruby, and other use-cases such as not reinventing the wheel, security, flexibility, and maintainability. Even less popular languages such as Perl have their advantages. Perl for instance is a domain expert in network automation.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;13). What should be the content of a log file and how will you search a log file with billions of records in terms of best practices? &lt;/p&gt;

&lt;p&gt;&lt;code&gt;All log files should have different logs with these identifiers: The error level. Whether trace or debug which should not be in production logs anyways or maybe information logs if you don‚Äôt have a monitoring tool where you can log events for this. Then error logs are another level that should be caught (refer to my article).&lt;/code&gt;&lt;br&gt;
&lt;a href="https://dev.to/femolacaster/error-driven-development-2b9c"&gt;here: error-driven development?&lt;/a&gt; &lt;br&gt;
&lt;code&gt;Then critical logs such as runtime exceptions, your try, and catch for instance should be logged as critical. You should have all logs classified in this manner from a global configuration. Maybe in your Web.config or appsettings.json . If you have a lot of logs, you might not want to store them locally. You might want to store it in a distributed manner. You can also use log tools such as serielog or elastic search, then you can now index your logs just like a database indexing. So when searching through it rather than using grep&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;grep [options] [pattern] [file]  e.g. grep ‚ÄìI ‚Äòerror‚Äô babel.log.&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;You can then do an advanced search using your indexing. This is called data ingestion. Or distributed logging.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Remember the 5 log levels: Trace, debug, information, warning, error, critical.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;14). Explain some design patterns and architecture you know. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Talk about DAO, singleton, ORM, MVC, MVVM, MTV, observer, event-driven architecture, API-led architecture, monolith, micro-services etc.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;15). Explain web security &lt;br&gt;
&lt;code&gt;Talk on Sql injection, session hijacking, CRSF, CORS, bot attack, brute force etc.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;16). What are background services as regards queueing system?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;A queuing system means first in first out. So Amazon S3 for instance where you can store images has what you call a bucket. So a client uploads a file, a background service picks up and notifies the web process that a job is to be performed. The web process then puts it in a queue and returns a response to the client that the job is pending while the worker process picks it up. Once the worker process finishes the job, it persists the outcome of the task. For instance, the S3 URL is persisted. The client keeps polling constantly until the task is completed and can then finish the upload file process. Back then in PHP, to do something like this PHP holds the image in a temporary file. But this is a better approach to handling file upload. Apache Kafka, Apache Upstart and Sidekiq are some tools to handle background services and queuing systems.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;17). How do you prevent SQL injection &lt;/p&gt;

&lt;p&gt;&lt;code&gt;User inputs should be sanitized and one way to do this is using a prepared statement. When you stack your queries, it is a way of getting all the contents of your database. You may never want to use staked queries. Also, you should never show your SQL errors to the user hence it can be penetrated if the hacker knows the table name and what the error is saying to inject your tables. You can also use abstraction layers such as an ORM which reduces the risk of this happening. Although sanitizing your inputs can pull out some edge cases, so it might not be the best approach. The best would be prepared statements and ORM. Error disabling from users and prevention of multiple stacked query statements is also a way of preventing SQL injections.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;18). What is the ideal process if a bug is reported by a user of an application&lt;/p&gt;

&lt;p&gt;&lt;code&gt;The ideal process is for the first-level support to have tried the basic things to help the user so as not to waste time and collected the necessary information such as pictures or recorded video which second-level support can use to debug in any case has to be escalated. Some first-level support helpers could be pinging to see things that are up or not. While second-level resolution techniques could be checking the APM or NPM(Application or Network Performance Monitoring) tools to see CPU, memory, code-level performance, web services, caches, database, logs, etc. New R5elics, Datadog, net-data, Solarwinds are some nice APM/NPM tools. If you detect a fault that requires a change, then it should be followed by a change management process. But it should never get to a stage where the user starts complaining of problems before the necessary modifications which ought to be done are done. The monitoring tools should also be monitored daily to check even before a fault is detected.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;19). How will you ensure your database is optimal in cases of multiple asynchronous requests?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;So on the application side, you can make sure your database connection is a singleton. On the app and even the database side, you can cache your queries to return stored results. You can have stored procedures for regular queries or scale your database maybe through clustering and indexing. Just to make sure your querying or your requests are regulated. Even besides that, it gives your database more durability so latency is increased and performance is not reduced. And ensure that you close open connections in your script. So that unnecessary connections would not be propagating with time.&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;20). What are some Advanced OOP concepts?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Talk about demeter, abstraction, dependency injection/isolation, and interfaces.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;21). How do you improve your database queries&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Select only columns you need; use case instead of update; make use of temporary tables often when writing join statement; break operations that involve several tables into routine instead of one transaction; use stored procedures; edit your ORM to use your stored procedure instead of using the default; keyword distinct can slow down performance; don‚Äôt write queries that favor negative searches instead write queries that favor the positive. Avoid using * on aggregate functions unless you need to. Also, you won‚Äôt want to use nested views because they cause lags and lags are not good either. I swear lags are never good for the soul. That is the gospel truth.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note: Never forget to ask your own premium questions!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>coding</category>
      <category>backend</category>
      <category>oop</category>
    </item>
    <item>
      <title>Clean Code Part 1: Meaningful Names</title>
      <author>Tanisha Sabherwal</author>
      <pubDate>Fri, 02 Jul 2021 10:54:32 +0000</pubDate>
      <link>https://dev.to/tanisha03/clean-code-part-1-meaningful-names-4khp</link>
      <guid>https://dev.to/tanisha03/clean-code-part-1-meaningful-names-4khp</guid>
      <description>&lt;p&gt;Naming variables, functions, classes, arguments, and packages is an art not everyone understands. Those who understand, live a technical debt-free life. But few simple pointers can help you reach this goal. While most of these will sound obvious but are not completely implemented by a lot of developers. Read ahead to crack the code for writing meaningful names.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reveal-the-intent"&gt;
  &lt;/a&gt;
  Reveal the Intent
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Choosing good names takes time but saves more than it takes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The names of variables, functions, classes should answer three broad questions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Why it exists&lt;/li&gt;
&lt;li&gt;What it does&lt;/li&gt;
&lt;li&gt;How it is used
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var d;  //does not reveal anything

var daysSinceCreation; // clearly reveals what it stores
var isModalOpen; // depicts the variable is a boolean
const getUserID; // denotes a function or task
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hence, focus on the simplicity of the code rather than simplicity. If a variable requires a comment, it does not reveals its intent well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoid-disinformation"&gt;
  &lt;/a&gt;
  Avoid Disinformation
&lt;/h2&gt;

&lt;p&gt;Avoid names which leave false clues which might obscure the meaning of code. Treat it as an honourable human, it should say what it means and mean what it says.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don't name a group of accounts as

&lt;code&gt;AccountList&lt;/code&gt;

unless it is a list.&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
&lt;li&gt;Avoid two names with subtle differences like

&lt;code&gt;isAccountInformationOfUserRequired&lt;/code&gt;

and

&lt;code&gt;isAccountInformationOfAdminRequired&lt;/code&gt;

.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#make-meaningful-distinctions"&gt;
  &lt;/a&gt;
  Make Meaningful Distinctions
&lt;/h2&gt;

&lt;p&gt;Number-series naming like &lt;strong&gt;a1, a2, ...., an&lt;/strong&gt; makes the code non-informative and does not reveals anything about the intention.&lt;/p&gt;

&lt;p&gt;Another avoidable typing of naming is using noise words. Words like variable, NameString, Customer, does not reveal anything and so should be avoided.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-pronounceable-and-searchable-names"&gt;
  &lt;/a&gt;
  Use Pronounceable and Searchable Names
&lt;/h2&gt;

&lt;p&gt;Use words that are pronounceable so that others can use it for communication. This will enable better collaboration because &lt;strong&gt;"Programming is a Social Activity"&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Imagine someone calling you to fix the bug and mentions using the &lt;strong&gt;&lt;em&gt;function getmddh&lt;/em&gt;&lt;/strong&gt; which gets month, date, day and hour for the post. Saying "get-M-D-D-H" is both frustrating and confusing, so rather just call it getPostTimeStamp.&lt;/p&gt;

&lt;p&gt;Similarly names should be searchable. Single or double letter names are hard to search in a codebase. In this case Ctrl+Shift+F will no longer be at rescue and is such a bade case for giving meaningful names.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defining-roles"&gt;
  &lt;/a&gt;
  Defining Roles
&lt;/h2&gt;

&lt;p&gt;Names should be such that it reveals the role of the variable, this specially is very important in languages like JavaScript everything is either a var, const or let.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Class and Object names should be a noun or noun phrase like AddressParser, WikiPage, and CustomerDetails.&lt;/li&gt;
&lt;li&gt;Method names should be a verb or verb phase like deleteUserEntry, getUserDetails and savePostData.&lt;/li&gt;
&lt;li&gt;Booleans should have prefix like "is" to communicate binary or 0-1 behaviour.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#add-meaningful-context"&gt;
  &lt;/a&gt;
  Add Meaningful Context
&lt;/h2&gt;

&lt;p&gt;Sometimes variable names require additional data to give context to generic variable names like firstName, LastName, city, zipcode etc. In such a case adding a prefix like addrfirstName and addrLastName will denote it being a part of a larger Address class.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scope-length-rule"&gt;
  &lt;/a&gt;
  Scope Length Rule
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Variables with shorter scope should have shorter name and vice-versa because ones with longer scope at used at multiple locations and should be descriptive.&lt;/li&gt;
&lt;li&gt;For classes/functions, the opposite is true because the longer the scope, easier should be the access for class/functions names. It should be short and crisp however for shorter scopes, longer and descriptive names can be helpful to reveal the intent.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#ending-notes"&gt;
  &lt;/a&gt;
  Ending Notes
&lt;/h2&gt;

&lt;p&gt;Quoting from the book,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Any fool can write code a computer can understand, but it takes a good programmer to write code that humans can understand.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Stay tuned in, for Part 2 of the series.&lt;/p&gt;

</description>
      <category>codequality</category>
      <category>codereview</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Cross-device testing of web applications with Blisk</title>
      <author>Blisk.io</author>
      <pubDate>Fri, 02 Jul 2021 10:43:05 +0000</pubDate>
      <link>https://dev.to/bliskio/cross-device-testing-of-web-applications-with-blisk-1l8c</link>
      <guid>https://dev.to/bliskio/cross-device-testing-of-web-applications-with-blisk-1l8c</guid>
      <description>&lt;p&gt;This article will educate you all about &lt;a href="https://blisk.io"&gt;Blisk&lt;/a&gt;. Blisk is a Chromium-based web browser that improves productivity and code quality by providing a wide array of tools for web development and testing. The main feature of this application is that it offers virtual mobiles, tablets, laptops, and desktops for web development and testing purposes.&lt;/p&gt;

&lt;p&gt;Blisk offers two types of licenses: free license with daily limited usage and paid license with unlimited usage. After installing Blisk you get two weeks of free unlimited testing.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/570241605" width="710" height="399"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Preconditions:&lt;/strong&gt;&lt;br&gt;
In this tutorial, we'll be working with the GeeksforGeeks website as an example. You can use your own website at any stage: localhost/staging/production.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stepbystep-guide"&gt;
  &lt;/a&gt;
  Step-by-step guide:
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#step-1-install-blisk-application"&gt;
  &lt;/a&gt;
  Step 1: Install Blisk application
&lt;/h4&gt;

&lt;p&gt;Blisk is available for Windows, macOS, and Linux (Ubuntu, Debian, Fedora, OpenSUSE). Download Blisk from the official website: &lt;a href="https://blisk.io"&gt;https://blisk.io&lt;/a&gt; and install it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rT4L38JE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pjn9i4eb9lrqulaslhmd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rT4L38JE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pjn9i4eb9lrqulaslhmd.png" alt="Download Blisk"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-2-create-a-blisk-account"&gt;
  &lt;/a&gt;
  Step 2: Create a Blisk account
&lt;/h4&gt;

&lt;p&gt;Creating an account is optional but recommended. Blisk account allows using extra features (screenshots and screen recorder, cloud storage) and adds an extra week of the unlimited usage of all features for free.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y0mzbnPb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iezj3bd8ab8872b4lqod.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y0mzbnPb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iezj3bd8ab8872b4lqod.png" alt="Create Blisk account"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-3-open-a-website-that-you-will-work-with"&gt;
  &lt;/a&gt;
  Step 3: Open a website that you will work with
&lt;/h4&gt;

&lt;p&gt;Paste a Url &lt;a href="https://www.geeksforgeeks.org/"&gt;https://www.geeksforgeeks.org/&lt;/a&gt; into the address bar and navigate to this website.&lt;br&gt;
Click the button &lt;em&gt;Toggle Developer Mode&lt;/em&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UKqAt3mI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nne13i9wmu22onk4fcps.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UKqAt3mI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nne13i9wmu22onk4fcps.jpg" alt="Toggle Developer Mode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-4-select-the-devices"&gt;
  &lt;/a&gt;
  Step 4: Select the devices
&lt;/h4&gt;

&lt;p&gt;Blisk launches &lt;em&gt;Device Manager&lt;/em&gt; where you can select the devices. You can select different types of devices: mobiles, tablets, laptops, and desktops. In addition, Blisk offers a Chrome-like view that represents a regular web view, just like any tab in your browser. Depending on your needs, you can mix different devices to use them simultaneously. &lt;/p&gt;

&lt;p&gt;In this tutorial, we will select &lt;em&gt;iPhone 12 Mini&lt;/em&gt; and &lt;em&gt;Chrome-like view&lt;/em&gt; to check how GeekforGeeks works in regular browsers compared to mobile. Click the button Launch Devices when your device set is ready.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--maMErrX7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/696u457ayytqg4q1jp04.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--maMErrX7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/696u457ayytqg4q1jp04.png" alt="Device Manager"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-5-browse-in-developer-mode"&gt;
  &lt;/a&gt;
  Step 5: Browse in Developer Mode
&lt;/h4&gt;

&lt;p&gt;Blisk launches the device set with previously selected devices and now we can perform checks on mobile and desktop simultaneously. Let's scroll down and browse across the GeekforGeeks website. You will notice that scrolls are synced from mobile to desktop which helps to browse faster and compare two views visually.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yPioiYR3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f49b7unllhtf7263ed5u.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yPioiYR3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f49b7unllhtf7263ed5u.jpg" alt="Using Developer Mode"&gt;&lt;/a&gt;&lt;br&gt;
Next, let's open any article to check how it behaves. When navigating to any Url, you will notice that the device and desktop follow each other by Url.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-6-perform-checks"&gt;
  &lt;/a&gt;
  Step 6: Perform checks
&lt;/h4&gt;

&lt;p&gt;Now, you can check whatever you need. In addition, you can: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Test portrait vs landscape orientation.&lt;/li&gt;
&lt;li&gt;Check Javascript errors that appear in each device.&lt;/li&gt;
&lt;li&gt;Simulate slow connection.&lt;/li&gt;
&lt;li&gt;Use DevTools for each device independently.&lt;/li&gt;
&lt;li&gt;Switch to another device.&lt;/li&gt;
&lt;li&gt;Check dark theme.&lt;/li&gt;
&lt;li&gt;Take screenshots of issues.&lt;/li&gt;
&lt;li&gt;Record a video with the steps to reproduce the issue.&lt;/li&gt;
&lt;li&gt;Save screenshots and videos to the cloud storage.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final words
&lt;/h3&gt;

&lt;p&gt;The application was created for web developers and QA engineers. You can use Blisk in your daily work to create web applications and test them across multiple devices simultaneously to speed up your productivity and deliver high-quality products to your customers faster than before.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>css</category>
    </item>
  </channel>
</rss>
