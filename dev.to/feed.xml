<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What is AssemblyScript?</title>
      <author>Jairus Tanaka</author>
      <pubDate>Mon, 12 Jul 2021 18:34:40 +0000</pubDate>
      <link>https://dev.to/assemblyscript/what-is-assemblyscript-3gfl</link>
      <guid>https://dev.to/assemblyscript/what-is-assemblyscript-3gfl</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KhUFBZnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4uj09a30exiqxep28hd.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KhUFBZnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4uj09a30exiqxep28hd.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
  AssemblyScript — a variant of TypeScript that compiles to WebAssembly. Since it is compiled, it outperforms JavaScript in some cases. AS follows the TypeScript syntax as closely as possible and even adds more features to it. AssemblyScript allows us to write fast WebAssembly for the Web and Server without learning another language.&lt;/p&gt;

&lt;p&gt;AssemblyScript is very easy to use. All you need to do is install it via NPM.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ npm i assemblyscript &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
~ npx asinit &lt;span class="nb"&gt;.&lt;/span&gt;
~ npm i
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What did that do? First of all, it installed both the loader and the compiler. Secondly, it made a template project with an add function. Now, we just need to compile it to WebAssembly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ npm run asbuild
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, if you check out the /build folder, there are the .wasm files that were built. NodeJS and JavaScript both provide a way to run WebAssembly files and AssemblyScript provides its own loader to work with the code. To start our code, we need another file&lt;/p&gt;

&lt;p&gt;&lt;em&gt;test.js&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wasmModule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./index&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// This works just like a normal module&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wasmModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// -- 11&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, run it!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ node test.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should have outputted the number 11.&lt;/p&gt;

&lt;p&gt;JavaScript code for the add function would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The AssemblyScript code looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;i32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pretty similar, right? When we compile it, we can require it just like a normal JavaScript file. Keep in mind that WebAssembly is sandboxed which means it can’t access the system, make HTTP requests, or log to the console. However, AssemblyScript supports both WASI and JS bindings (calling JS from AS).&lt;/p&gt;

&lt;p&gt;If you have any questions or comments, feel free to comment or join the AssemblyScript Discord. Or, check out the website.😉&lt;/p&gt;

&lt;p&gt;P.S: There is a tutorial at &lt;a href="https://jtanaka.gitbook.io/guide/"&gt;https://jtanaka.gitbook.io/guide/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webassembly</category>
      <category>typescript</category>
    </item>
    <item>
      <title>My blockchain 🧑‍🚀</title>
      <author>ItsTheGuy</author>
      <pubDate>Mon, 12 Jul 2021 18:02:22 +0000</pubDate>
      <link>https://dev.to/itstheguy/my-blockchain-257c</link>
      <guid>https://dev.to/itstheguy/my-blockchain-257c</guid>
      <description>&lt;p&gt;Hello, what’s going on? Before you start reading more, I have to thank you about reading this post, this is my first one, and this makes me feel nervous 😯&lt;/p&gt;

&lt;p&gt;4 months ago, I was bored in the free times of my free times, so I started reading articles about blockchain, and I found very interesting that concept. After finishing reading all the pages of Wikipedia related to blockchain, I started to feel bored again, so I decided to develop my own blockchain as experiment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-purpose"&gt;
  &lt;/a&gt;
  My purpose 🚀
&lt;/h2&gt;

&lt;p&gt;I think that Singular (that’s the blockchain’s name) is a really cool project, but aside of that, it has a few purposes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make me learn more about blockchain technology and decentralized networks (I haven’t still implemented the distributed network because I’m on research of the best one! You can suggest one at the project’s discussions if you want!)&lt;/li&gt;
&lt;li&gt;The second one is to share my ideas, and contribute to the open source archive of the humanity 👽&lt;/li&gt;
&lt;li&gt;The third one is because is really cool 🧑‍💻&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I’m so excited about it, and I hope that Singular could help other people find inspiration.&lt;br&gt;
By the way you could find &lt;a href="https://github.com/ItsTheGuy/Singular"&gt;Singular&lt;/a&gt; in my GitHub profile 🐙&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>opensource</category>
      <category>showdev</category>
    </item>
    <item>
      <title>9 Neat JavaScript Snippets For Algorithms And More</title>
      <author>Mike Cronin</author>
      <pubDate>Mon, 12 Jul 2021 17:52:20 +0000</pubDate>
      <link>https://dev.to/mostlyfocusedmike/9-neat-javascript-snippets-for-algorithms-and-more-539k</link>
      <guid>https://dev.to/mostlyfocusedmike/9-neat-javascript-snippets-for-algorithms-and-more-539k</guid>
      <description>&lt;p&gt;Knowing certain JavaScript one liners can save you valuable time while developing or interviewing. Here are some of my favorite “once you know, you know” snippets that I have actually used while coding. Only one of them is a bit code golf-y, and unsurprisingly it uses reduce.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-around-a-list"&gt;
  &lt;/a&gt;
  Wrap around a list
&lt;/h2&gt;

&lt;p&gt;Spinning is a neat trick, but so is wrapping. A lot of times in algorithms you will need to wrap around a list. Meaning move a number of spaces, and if you reach the end of the list, go back to the first index. So if a list is 8 values long, but you have to move 10, you would need to land on the second index. You could use a bunch of complicated if statements, OR…&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wrap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// a &lt;/span&gt;
&lt;span class="nx"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// b&lt;/span&gt;
&lt;span class="nx"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// c&lt;/span&gt;
&lt;span class="nx"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// a &lt;/span&gt;
&lt;span class="c1"&gt;// etc ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can implement this differently based off steps, but the key thing to understand is &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder"&gt;the modulo&lt;/a&gt;. It’s a handy little operator, keep it in mind when looking at “overflow” type problems like this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#log-a-variable-with-its-name"&gt;
  &lt;/a&gt;
  Log a variable with its name
&lt;/h2&gt;

&lt;p&gt;This is such a great trick when debugging. Thanks to &lt;a href="https://alligator.io/js/object-property-shorthand-es6/"&gt;object shorthand notation&lt;/a&gt; we can log out variables with names by default.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;someVar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;someVar&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;// logs out { someVar: 1 }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you put in a bunch of logs (and you totally will when debugging), it can be hard to keep track of which is which with all the asyncs, fetches, and loops flying around. Instead of having to take the time to type multiple args like &lt;code&gt;console.log('some var', someVar)&lt;/code&gt;, toss in some curly brackets and call it a day.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#optional-properties-in-objects"&gt;
  &lt;/a&gt;
  Optional properties in objects
&lt;/h2&gt;

&lt;p&gt;If you don’t want properties pointing to undefined or null , you might use some if statements to optionally add properties:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;whatever&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ok&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, it’s verbose and I’ve always hated it. It may be clear, but it’s clunky. Well, thanks to object spreading, it’s a thing of the past:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Whatever&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;...(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ok&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"&gt;spread&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND#short-circuit_evaluation"&gt;&amp;amp;&amp;amp; logical short circuiting&lt;/a&gt; to dynamically check whether or not to add the property by spreading it. This comes most in handy when you just want to return an object, and don’t want to create a temporary variable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sleep-in-javascript"&gt;
  &lt;/a&gt;
  Sleep in JavaScript
&lt;/h2&gt;

&lt;p&gt;A few times I had to deal with a terrible API that was slow and didn’t have a hook to say when it finished. So, we just had to wait a second to make sure it loaded. We also wanted to use promises instead of setTimeout callbacks, so using a sleep function was ideal. We could simply await for a second and then move on. No need for callbacks!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sleep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here’s how to &lt;a href="https://levelup.gitconnected.com/how-to-turn-settimeout-and-setinterval-into-promises-6a4977f0ace3?sk=80ad1ba261951e1a6cb422db1e51e6c0"&gt;promisify setInterval&lt;/a&gt; as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#swap-variable-values"&gt;
  &lt;/a&gt;
  Swap variable values
&lt;/h2&gt;

&lt;p&gt;Before modern JS, if you wanted to switch the values of two variables, you’d have to introduce a 3rd ‘temp’ value. Now that we have &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"&gt;array destructuring and assignment&lt;/a&gt;, we can do it in one line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="c1"&gt;// a is 5, b is 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#round-to-nearest-10-100-1000"&gt;
  &lt;/a&gt;
  Round to nearest 10, 100, 1000…
&lt;/h2&gt;

&lt;p&gt;This one is useful in algorithms if you need to rough out numbers to various levels. Basically, what you’re doing is dividing first to move the decimal up. With the “useless” numbers now decimals, you can round them off. To get the number back up to its desired size, you multiply it. The ignored numbers now become zeros. It’s a neat trick for dealing with money or logarithm-like scales where after a certain point, small numbers can be rounded off.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rounder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;place&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;place&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;place&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;rounder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1549&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1500&lt;/span&gt;
&lt;span class="nx"&gt;rounder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15590&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 16000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#remove-duplicates-with-set"&gt;
  &lt;/a&gt;
  Remove duplicates with Set
&lt;/h2&gt;

&lt;p&gt;I just wrote about &lt;a href="https://medium.com/geekculture/should-you-use-javascript-maps-and-sets-1660647b55da?sk=e558f84be27e19e91426e03750fd56ef"&gt;Sets&lt;/a&gt;, and apparently this is kind of their only use. If you have an array and you want to remove the duplicates, you can do so with a Set.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])];&lt;/span&gt;
&lt;span class="c1"&gt;// [ 1, 2, 3, 4 ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don’t forget to spread the new Set back into a regular array. Note: be careful with massive lists, as this may not be the most performant solution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#count-character-instances"&gt;
  &lt;/a&gt;
  Count character instances
&lt;/h2&gt;

&lt;p&gt;If you have an array (or array from a string) and want to know how many times characters appear, there’s a super slick way to do this with reduce.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;charTotals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;totals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; 
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;totals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;totals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;
&lt;span class="nx"&gt;charTotals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hi there!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// { H: 1, i: 1, ' ': 1, t: 1, h: 1, e: 2, r: 1, '!': 1 }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This one might not be all that useful, but there are 2 techniques that I want to make sure you know: &lt;a href="https://www.samanthaming.com/tidbits/37-dynamic-property-name-with-es6/"&gt;dynamic object properties&lt;/a&gt; and implicit &lt;a href="https://mariusschulz.com/blog/returning-object-literals-from-arrow-functions-in-javascript"&gt;returns with an object&lt;/a&gt;. Both of those things are crucial knowledge, and if you don’t &lt;a href="https://levelup.gitconnected.com/javascript-has-a-reduce-method-you-should-use-it-ff4dd29d6c9d?sk=da559dd1a04170eb124f10e2f43cebae"&gt;understand reduce, then read this&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#id-makercounter"&gt;
  &lt;/a&gt;
  ID maker/counter
&lt;/h2&gt;

&lt;p&gt;I think I needed to dynamically create non-db temp ids for react components and squished a &lt;a href="https://www.w3schools.com/js/js_function_closures.asp"&gt;classic counter&lt;/a&gt; into one line. Each time the function is called, the counter increases, and no other function can alter its internal state. It uses a &lt;a href="https://itnext.io/a-beginners-guide-to-understanding-javascript-closures-b5eb57fdbeb4?sk=921273adc0bc6e1f2d9dd87310913401"&gt;closure&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE"&gt;Immediately Invoked Function Expression&lt;/a&gt;, and a default value to keep things tight.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;
&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also bonus tip to use default values in function parameters to avoid needing a new line. And you can stop making it an IIFE if you actually want to make the starting number dynamic:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;startCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counter100&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;startCounter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;counter100&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 100&lt;/span&gt;
&lt;span class="nx"&gt;counter100&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 101&lt;/span&gt;
&lt;span class="nx"&gt;counter100&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 102&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a-word-on-readability"&gt;
  &lt;/a&gt;
  A word on readability
&lt;/h2&gt;

&lt;p&gt;Look, I’m all about &lt;a href="https://itnext.io/tips-for-writing-self-documenting-code-e54a15e9de2?sk=02d1d7a2f1bb798dc0227cb56485e98b"&gt;readable code&lt;/a&gt; and I’ll be the first person to say that some of these snippets aren’t super straightforward. What you get in brevity you lose in readability. Now, personally, I don’t think any of these are too wild, but others might disagree. That’s why you should try to use small, named functions and descriptive variables. These pieces can be the crucial tip to help your code click for others. But, ultimately it comes down to what you and your team like, so feel free to modify or expand anything here. And if you have any clever one liners you love, please show them off in the comments!&lt;/p&gt;

&lt;p&gt;happy coding everyone,&lt;/p&gt;

&lt;p&gt;mike&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Getting Started with Git</title>
      <author>Christopher Glikpo</author>
      <pubDate>Mon, 12 Jul 2021 17:44:37 +0000</pubDate>
      <link>https://dev.to/cglikpo/getting-started-with-git-524j</link>
      <guid>https://dev.to/cglikpo/getting-started-with-git-524j</guid>
      <description>&lt;p&gt;&lt;code&gt;Git&lt;/code&gt; is an Open Source Distributed Version Control System.&lt;br&gt;
Let me break it down and explain the wording:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Control System: This basically means that &lt;code&gt;Git&lt;/code&gt; is a content tracker. So &lt;code&gt;Git&lt;/code&gt; can be used to store content — it is mostly used to store code due to the other features it provides.&lt;/li&gt;
&lt;li&gt;Version Control System: The code which is stored in &lt;code&gt;Git&lt;/code&gt; keeps changing as more code is added. Also, many developers can add code in parallel. So &lt;code&gt;Version Control System&lt;/code&gt; helps in handling this by maintaining a history of what changes have happened. Also, &lt;code&gt;Git&lt;/code&gt; provides features like branches and merges, which I will be covering later.&lt;/li&gt;
&lt;li&gt;Distributed Version Control System: &lt;code&gt;Git&lt;/code&gt; has a remote repository which is stored in a server and a local repository which is stored in the computer of each developer. This means that the code is not just stored in a central server, but the full copy of the code is present in all the developers’ computers. Git is a &lt;code&gt;Distributed Version Control System&lt;/code&gt; since the code is present in every developer’s computer.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#installation-of-git"&gt;
  &lt;/a&gt;
  Installation of Git
&lt;/h2&gt;

&lt;p&gt;Installation of Git is straightforward using the installer package available at Git official web site.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download the installer from &lt;a href="https://git-scm.com/"&gt;Git WebSite&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Run the installer.&lt;/li&gt;
&lt;li&gt;Follow the installer steps, agree the license agreement and click the next button.&lt;/li&gt;
&lt;li&gt;Restart your system/machine&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;NB:Mac users can install it with brew: &lt;code&gt;brew install git&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, test Git by printing its version using the following command in Command Prompt:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git --version
# git version 2.31.0.windows.1

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configure-git"&gt;
  &lt;/a&gt;
  Configure Git
&lt;/h2&gt;

&lt;p&gt;Now let &lt;code&gt;Git&lt;/code&gt; know who you are. This is important for version control systems, as each &lt;code&gt;Git&lt;/code&gt; commit uses this information:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global user.name "James Brown"
git config --global user.email "jamesbrown@gmail.com"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change the user name and e-mail address to your own. You will probably also want to use this when registering to GitHub later on.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Use &lt;code&gt;global&lt;/code&gt; to set the username and e-mail for every repository on your computer.If you want to set the username/e-mail for just the current repo, you can remove &lt;code&gt;global&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can see current global configuration with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global --list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-git-folder"&gt;
  &lt;/a&gt;
  Creating Git Folder
&lt;/h2&gt;

&lt;p&gt;Now, let's create a new folder for our project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir myproject
cd myproject
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;mkdir&lt;/code&gt; makes a new directory.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; changes the current working directory.&lt;/p&gt;

&lt;p&gt;Now that we are in the correct directory. We can start by initializing Git!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: If you already have a folder/directory you would like to use for Git: Navigate to it in command line, or open it in your file explorer, right-click and select "Git Bash here"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#initialize-git"&gt;
  &lt;/a&gt;
  Initialize Git
&lt;/h2&gt;

&lt;p&gt;Once you have navigated to the correct folder, you can initialize Git on that folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git init 
Initialized empty Git repository in /Users/user/myproject/.git/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You just created your first Git Repository!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Git now knows that it should watch the folder you initiated it on.Git creates a hidden folder to keep track of changes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#git-adding-new-files"&gt;
  &lt;/a&gt;
  Git Adding New Files
&lt;/h2&gt;

&lt;p&gt;You just created your first local Git repo. But it is empty.&lt;/p&gt;

&lt;p&gt;So let's add some files, or create a new file using your favourite text editor. Then save or move it to the folder you just created.&lt;/p&gt;

&lt;p&gt;For this example, I am going to use a simple HTML file like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;Getting Started with Git!&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;h1&amp;gt;Hello world!&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;This is the first file in my new Git Repo.&amp;lt;/p&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And save it to our new folder as &lt;code&gt;index.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's go back to the terminal and list the files in our current working directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ls
index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;ls&lt;/code&gt; will list the files in the directory. We can see that &lt;code&gt;index.html&lt;/code&gt; is there.&lt;/p&gt;

&lt;p&gt;Then we check the Git &lt;code&gt;status&lt;/code&gt; and see if it is a part of our repo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git status
On branch master

No commits yet

Untracked files:
  (use "git add ..." to include in what will be committed)
    index.html

nothing added to commit but untracked files present (use "git add" to track)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now Git is &lt;code&gt;aware&lt;/code&gt; of the file, but has not &lt;code&gt;added&lt;/code&gt; it to our repository!&lt;/p&gt;

&lt;p&gt;Files in your Git repository folder can be in one of 2 states:&lt;/p&gt;

&lt;p&gt;Tracked - files that Git knows about and are added to the repository&lt;br&gt;
Untracked - files that are in your working directory, but not added to the repository&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#git-staging-environment"&gt;
  &lt;/a&gt;
  Git Staging Environment
&lt;/h2&gt;

&lt;p&gt;The ideas of the Staging Environment and the Commit are two of Git's most important features.&lt;/p&gt;

&lt;p&gt;You may be adding, modifying, and deleting files while working. However, you should add the files to a Staging Environment whenever you reach a milestone or complete a section of the project.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Staged&lt;/code&gt; files are files that are ready to be &lt;code&gt;committed&lt;/code&gt; to the repository you are working on. You will learn more about &lt;code&gt;commit&lt;/code&gt; shortly.&lt;/p&gt;

&lt;p&gt;For now, we are done working with index.html. So we can add it to the Staging Environment:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add index.html

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The file should be &lt;code&gt;Staged&lt;/code&gt;. Let's check the status:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached ..." to unstage)
    new file: index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the file has been added to the Staging Environment.We are ready to do our first &lt;code&gt;commit&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#git-commit"&gt;
  &lt;/a&gt;
  Git Commit
&lt;/h2&gt;

&lt;p&gt;We are ready to go from &lt;code&gt;stage&lt;/code&gt; to &lt;code&gt;commit&lt;/code&gt; for our repo(folder) now that we have completed our work.&lt;/p&gt;

&lt;p&gt;As we work, adding commits allows us to keep track of our progress and modifications. Each commit is treated as a "save point" by Git. It's a moment in the project where you can go back and fix an issue or make a modification.&lt;/p&gt;

&lt;p&gt;We should always provide a message when we commit.&lt;/p&gt;

&lt;p&gt;By adding clear messages to each commit, it is easy for yourself (and others) to see what has changed and when&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit -m "My First git commit"
[master (root-commit) c7da65d] My first git commit
 1 file changed, 12 insertions(+)
 create mode 100644 index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;commit&lt;/code&gt; command performs a commit, and the &lt;code&gt;-m "message"&lt;/code&gt; adds a message.&lt;/p&gt;

&lt;p&gt;The Staging Environment has been committed to our repo, with the message:&lt;br&gt;
"My first git commit"&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#git-commit-log"&gt;
  &lt;/a&gt;
  Git Commit Log
&lt;/h2&gt;

&lt;p&gt;To view the history of commits for a repository, you can use the log command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git log
commit c7da65d981ce205dfadbeedec4e36a5e1625c558 (HEAD -&amp;gt; master)
Author: jamesbrown &amp;lt;jamesbrown@gmail.com&amp;gt;
Date:   Mon Jul 12 17:34:54 2021 -0700

    My first git commit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you've reached this point, thank you very much. I hope that this tutorial has been helpful for you and I'll see you all in the next.&lt;/p&gt;

&lt;p&gt;If you like my work, please consider&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/cglikpo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c23TxQOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jm11knj7d8zwcvo150q2.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;br&gt;
so that I can bring more projects, more articles for you&lt;/p&gt;

&lt;p&gt;If you  want to learn more about Web Development don't forget to to &lt;a href="https://www.youtube.com/c/ChristopherGlikpo/featured"&gt;follow me on Youtube!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>git</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Ads kill performance and Ux</title>
      <author>Julien Maury</author>
      <pubDate>Mon, 12 Jul 2021 17:40:09 +0000</pubDate>
      <link>https://dev.to/jmau111/ads-kill-performance-and-ux-32mb</link>
      <guid>https://dev.to/jmau111/ads-kill-performance-and-ux-32mb</guid>
      <description>&lt;p&gt;I've been working with ads like any web/app/web app developer. I've seen how much it can harm performance and User experience, and I wonder where big companies are on this point.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h2&gt;

&lt;p&gt;Privacy is such a big issue, but let's skip it here. I'm considering only performance and User experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-said-ads"&gt;
  &lt;/a&gt;
  You said Ads?
&lt;/h2&gt;

&lt;p&gt;By adding some third-party scripts to your website, you allow other brands to use your traffic for advertising in exchange for money.&lt;/p&gt;

&lt;p&gt;It's not uncommon to find ads in various areas: top, side, bottom, interstitial, skin ads, etc.&lt;/p&gt;

&lt;p&gt;It usually consists of clickable images, animated or not. It can also be a video.&lt;/p&gt;

&lt;p&gt;Google is a major actor with worldwide services such as AdSense, Admanager, or Google Tag Manager. They are ultra-dominant in this business.&lt;/p&gt;

&lt;p&gt;I know it's a bit more complex than that, but that should give an overview.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#buzzkill"&gt;
  &lt;/a&gt;
  Buzzkill
&lt;/h2&gt;

&lt;p&gt;Ads are part of the business. The problem is the current solutions.&lt;/p&gt;

&lt;p&gt;Even if you have a robust architecture, advanced frontend optimizations, static cache, and other performance leverage, ads will probably kill them all, loading tones of external js, unoptimized assets, and sometimes worse.&lt;/p&gt;

&lt;p&gt;It's not uncommon to open a website and get more ads than valuable content. Some websites even hide content if you have &lt;a href="https://adblockplus.org/"&gt;adblock&lt;/a&gt; enabled!&lt;/p&gt;

&lt;p&gt;When you open the network tab in DevTools, you see many external requests and kilobytes of JavaScript. In most cases, it harms the scroll experience, and you lose focus. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wheres-google"&gt;
  &lt;/a&gt;
  Where's Google?
&lt;/h2&gt;

&lt;p&gt;Shockingly, Google does not push better practices for ads, while the same company deeply enforces perf requirements for websites and apps, for example, with its core vitals.&lt;/p&gt;

&lt;p&gt;Using Google Tag Manager has a significant impact on performance. Of course, it may vary from one website to another, depending on the usage. Still, it encourages non-technical people to copy/paste scripts that automatically load the website, which can quickly turn nasty.&lt;/p&gt;

&lt;p&gt;I sometimes get the impression this business is the &lt;em&gt;Wild West&lt;/em&gt; where everything is permitted, including the worst practices. At the same time, websites and apps must meet ever-stricter criteria to get a decent score in web vitals.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope it sounds like a rant cause it is. If big companies want to raise the general quality, that's great, but please don't neglect ads.&lt;/p&gt;

&lt;p&gt;The COVID-19 Pandemic has accelerated the shift to online spending. A significant part of the global economy is on Internet, and while advertising is a thriving business, it's a colossus with feet of clay.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@carlesrgm?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Carles Rabada&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/fat?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>performance</category>
      <category>ux</category>
    </item>
    <item>
      <title>Linear Search in JavaScript | Must-Know Beginner Algorithms</title>
      <author>Danny Adams</author>
      <pubDate>Mon, 12 Jul 2021 17:26:25 +0000</pubDate>
      <link>https://dev.to/doabledanny/linear-search-in-javascript-must-know-beginner-algorithms-4gbp</link>
      <guid>https://dev.to/doabledanny/linear-search-in-javascript-must-know-beginner-algorithms-4gbp</guid>
      <description>&lt;p&gt;This article was originally posted on &lt;a href="https://www.doabledanny.com/linear-search-in-javascript"&gt;DoableDanny.com&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;Linear search is a very common searching algorithm; It is implemented under the hood in the JavaScript built-in methods &lt;code&gt;indexOf()&lt;/code&gt;, &lt;code&gt;includes()&lt;/code&gt;, &lt;code&gt;find()&lt;/code&gt;, and &lt;code&gt;findIndex()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is also the most straight-forward searching algorithm: it simply loops over each element in an array and stops if that element equals our target value.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linear-search-steps"&gt;
  &lt;/a&gt;
  Linear Search steps
&lt;/h2&gt;

&lt;p&gt;I think that with this algorithm, the gif below explains it all. But here are the steps in words:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Linear search will accept an array and a target value.&lt;/li&gt;
&lt;li&gt;Start searching from the beginning of the array.&lt;/li&gt;
&lt;li&gt;Check if that value equals the target:

&lt;ul&gt;
&lt;li&gt;If so, stop and return that values index.&lt;/li&gt;
&lt;li&gt;If not, move onto the next element.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Repeat step 3 until all elements are checked. If target not found, return -1.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O1NkHtaP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucuj7xc3u0m69xeuglp0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O1NkHtaP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucuj7xc3u0m69xeuglp0.gif" alt="Linear search steps gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Source of the above gif: &lt;a href="https://bournetocode.com/projects/GCSE_Computing_Fundamentals/pages/3-1-3-searc_alg.html"&gt;bournetocode.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And if you ever find yourself looking for a specific length of French fry:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eVPP_Ldc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0h4lmu4k6lpb3cniqpw3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eVPP_Ldc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0h4lmu4k6lpb3cniqpw3.gif" alt="Linear searching for a french fry"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linear-search-in-javascript"&gt;
  &lt;/a&gt;
  Linear Search in JavaScript
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;linearSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;linearSearch&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;linearSearch&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;linearSearch&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// -1&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;linearSearch&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We simply loop over each element in the array, and check to see if the current element is equal to the target; if so, we return that elements index. If the target isn’t found, then we simply return -1 at the end of the function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#time-complexity-of-linear-search"&gt;
  &lt;/a&gt;
  Time complexity of Linear Search
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#bestcase-time-complexity-of-linear-search"&gt;
  &lt;/a&gt;
  Best-case time complexity of Linear Search
&lt;/h3&gt;

&lt;p&gt;If our target value is at the beginning of the array, the algorithm will always run at constant time, O(1). The algorithm will always only have to perform one comparison, no matter what the size of the array.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#worstcase-time-complexity-of-linear-search"&gt;
  &lt;/a&gt;
  Worst-case time complexity of Linear Search
&lt;/h3&gt;

&lt;p&gt;If our target is the last element in the array, then the algorithm will have to make n comparisons (n being the length of the input array). This means that the &lt;a href="https://www.doabledanny.com/big-o-notation-in-javascript"&gt;Big O notation&lt;/a&gt; of Linear Search is Big O(n) – linear time complexity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#averagecase-time-complexity-of-linear-search"&gt;
  &lt;/a&gt;
  Average-case time complexity of Linear Search
&lt;/h3&gt;

&lt;p&gt;If our target element is somewhere in the middle of the array, then the time complexity will be approximately O(n/2), which simplifies to O(n) – linear time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#space-complexity-of-linear-search"&gt;
  &lt;/a&gt;
  Space complexity of Linear Search
&lt;/h2&gt;

&lt;p&gt;Linear Search has a space complexity of O(1) – constant space. It uses no auxiliary data structures to find the target value.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#performance-summary-table"&gt;
  &lt;/a&gt;
  Performance summary table
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fEMSjT0U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u36lxour4eynkvxh0efy.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fEMSjT0U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u36lxour4eynkvxh0efy.PNG" alt="time and space complexity of linear search summary table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-linear-search"&gt;
  &lt;/a&gt;
  When to use Linear Search
&lt;/h2&gt;

&lt;p&gt;Linear search is the best we can do when searching in unsorted arrays, such as [2, 3, 1].&lt;/p&gt;

&lt;p&gt;Whilst there are searching algorithms that can perform faster, such as &lt;a href="https://www.doabledanny.com/binary-search-javascript"&gt;Binary Search&lt;/a&gt;, they can only search through sorted arrays.&lt;/p&gt;

&lt;p&gt;If you enjoyed this post, subscribe to &lt;a href="https://www.doabledanny.com/newsletter-signup/"&gt;my newsletter&lt;/a&gt;. I write on topics such as algorithms, UI design and freelancing. I’ll email you once per week with my latest article and bonus tips and tricks. I like to dive deeply into topics to give you all the information you need in one place!&lt;/p&gt;

&lt;p&gt;Also, check out and subscribe to my &lt;a href="https://www.youtube.com/channel/UC0URylW_U4i26wN231yRqvA"&gt;coding YouTube Channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And if you want to further your knowledge of algorithms and data structures, check out: &lt;a href="https://ad.admitad.com/g/05dgete24sfa55577a70b3e3b7aadc/?ulp=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fjs-algorithms-and-data-structures-masterclass%2F"&gt;JavaScript Algorithms and Data Structures Masterclass by Colt Steele&lt;/a&gt;. It’s the best Udemy course I’ve ever taken 👌.&lt;/p&gt;

&lt;p&gt;Thanks for reading,&lt;/p&gt;

&lt;p&gt;Have a great day!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>How to send email using SMTP server in django?</title>
      <author>Shubham Singh Kshatriya</author>
      <pubDate>Mon, 12 Jul 2021 17:06:38 +0000</pubDate>
      <link>https://dev.to/shubhamkshatriya25/how-to-send-email-using-smtp-server-in-django-131f</link>
      <guid>https://dev.to/shubhamkshatriya25/how-to-send-email-using-smtp-server-in-django-131f</guid>
      <description>&lt;p&gt;Remember when you we signed-up to an application and received a welcome email or you once forgot your password and got an email with password reset link. This small things adds weight to User Experience.&lt;/p&gt;

&lt;p&gt;In this article, we will see how to send emails to our users using Django framework and SMTP server. Without wasting any minute let’s jump to the interesting part.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-gmail-for-django-mail-api"&gt;
  &lt;/a&gt;
  Setting up Gmail for django mail API:
&lt;/h3&gt;

&lt;p&gt;In order to use Google SMTP, you should have a gmail account. Next thing you need is to enable &lt;strong&gt;Allow less secure app feature&lt;/strong&gt; under account security settings. This feature is used for securing your google account from the apps that are less secure to use it in order to prevent hackers from muddle into your account.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dw-iGxhR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8wyo9wwqz16h25ritzy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dw-iGxhR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8wyo9wwqz16h25ritzy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#configuring-settingspy"&gt;
  &lt;/a&gt;
  Configuring settings.py:
&lt;/h3&gt;

&lt;p&gt;In your settings.py file, add the following configurations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = 'your gmail account'
EMAIL_HOST_PASSWORD = 'your account’s password'
EMAIL_USE_SSL = False
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Let’s understand these terminologies:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EMAIL_BACKEND:&lt;/strong&gt; &lt;br&gt;
This setting specifies the backend that we will  use for sending an email in Django.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EMAIL_HOST:&lt;/strong&gt; &lt;br&gt;
This setting is to specify the email service provider.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EMAIL_USE_TLS:&lt;/strong&gt; &lt;br&gt;
This setting specifies whether the Email uses a TLS connection or not. It is True for Gmail.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EMAIL_PORT:&lt;/strong&gt; &lt;br&gt;
This is the default setting for Gmail. It is the port used by the SMTP server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EMAIL_HOST_USER:&lt;/strong&gt; &lt;br&gt;
The name of the email account which will be used.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EMAIL_HOST_PASSWORD:&lt;/strong&gt;&lt;br&gt;
The password of the email account which will be used.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EMAIL_USE_SSL:&lt;/strong&gt; False for Gmail.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Your password is visible here so before deploying it encrypt your password or place in a file or server, where only have access.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#configuring-viewspy"&gt;
  &lt;/a&gt;
  Configuring views.py:
&lt;/h3&gt;

&lt;p&gt;Django provides a module named &lt;strong&gt;send_mail&lt;/strong&gt;, that we will use to send email to the users. There are many options available for the send_mail but for simplicity we will use only 4 fields.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;subject:&lt;/strong&gt;&lt;br&gt;
It contains the subject of the email&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;message:&lt;/strong&gt; &lt;br&gt;
It contains the body of the email&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;email_from:&lt;/strong&gt; &lt;br&gt;
It is the sender’s mail address.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;recipient_list:&lt;/strong&gt; &lt;br&gt;
It is the receiver’s email address.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.core.mail import send_mail
from django.conf import settings

def mail(request):
    ...
    subject = 'your subject'
    message = 'your message'
    email_from = settings.EMAIL_HOST_USER
    recipient_list = ['receiver's mail address', ]
    return render(request,'some_page.html')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#configuring-urlspy"&gt;
  &lt;/a&gt;
  Configuring urls.py:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;urlpatterns = [
    path('mail', views.mail, name ='mail'),
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this your code is ready for sending the email to the users. All you need now is to run the server and check whether your methods are functioning properly. &lt;/p&gt;

&lt;p&gt;That’s was it for this article. Thanks for reading.&lt;/p&gt;

&lt;p&gt;You can connect with me on &lt;a href="https://twitter.com/shubhHAM_"&gt;Twitter&lt;/a&gt; for any discussions.&lt;/p&gt;

&lt;p&gt;Adios.&lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Não corra. Pode doer.</title>
      <author>Júlio Guedes</author>
      <pubDate>Mon, 12 Jul 2021 17:02:58 +0000</pubDate>
      <link>https://dev.to/opendevufcg/nao-corra-pode-doer-1165</link>
      <guid>https://dev.to/opendevufcg/nao-corra-pode-doer-1165</guid>
      <description>&lt;p&gt;Nós temos um grande potencial dentro de cada um de nós, e muitas vezes escolhemos o curso superior tentando atingir o máximo que somos capazes, e também provar que somos. Experimentamos novas áreas, aprendemos coisas novas, nos dispomos como voluntários, pesquisamos, desenvolvemos e analisamos coisas.&lt;/p&gt;

&lt;p&gt;É engraçado perceber que tudo isso acontece naquele minúsculo espaço, entre nós e o computador. Nós lemos, tentamos, assistimos aulas, perguntamos e, acima de tudo, nos esforçamos. Até conseguirmos. Quantas vezes não repetimos esse ciclo num único dia?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L4Icech3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/STroE7bTBLTzxQUrZc/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L4Icech3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media0.giphy.com/media/STroE7bTBLTzxQUrZc/giphy.gif" alt="Gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Durante a jornada da graduação, enfrentamos problemas, e começamos a buscar liberdades e alívios. Problemas financeiros, com a família, com amigos, de saúde, entre tantos outros. Alguns veem no estudo e no trabalho uma fuga, já que essa realidade não é confrontada no ambiente profissional ou universitário. Urge a necessidade de se formar, como primeiro passo pra libertação. &lt;/p&gt;

&lt;p&gt;Mas para se formar bem, é preciso experiência, afinal, que empresa legal e que pode pagar um salário bacana iria contratar um recém-formado com currículo em branco? Ainda nos primeiros períodos do curso, surge a necessidade de preencher o currículo com monitorias, pesquisas, projetos e estágios. Mesmo que, a princípio, sejam voluntários. Tudo isso sem baixar as notas.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bJfleoDs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/www.incubadoraliberato.com.br/wp-content/uploads/2017/05/writing-in-notebook.jpg%3Fssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bJfleoDs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/www.incubadoraliberato.com.br/wp-content/uploads/2017/05/writing-in-notebook.jpg%3Fssl%3D1" alt="Estudando"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A cada dia que passa, enxergamos o quanto é difícil. Aos poucos se vai abdicando pequenas coisas: assistir um filme com a família, fazer as refeições no mesmo horário, encontrar com os amigos, conversar com eles sobre coisas além da universidade. Seus hobbies se transformam em estudos, já que você ainda não conseguiu o tão sonhado estágio que vai garantir algumas portas abertas depois. A cada mês ou semestre, novas coisas começam a deixadas de lado: dormir bem, praticar exercícios ou esportes, a relação com seus amigos, e até um relacionamento.&lt;/p&gt;

&lt;p&gt;É claro que nessa jornada você conseguiu muita coisa, afinal, nenhum esforço grande assim passa despercebido pelo mundo, principalmente quando você quer ser notado. Você consegue oportunidades em estágios, projetos ou pesquisas, e é exemplar em cada um deles. Então, começa a se questionar porquê não é notado por aqueles que você queria. E aposta mais coisas nessa busca.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O13xfOBt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn2.hubspot.net/hubfs/419889/blue%2520light%2520computer%2520night%2520negative%2520effects.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O13xfOBt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn2.hubspot.net/hubfs/419889/blue%2520light%2520computer%2520night%2520negative%2520effects.jpg" alt="Computador de noite"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Não é mais um problema trabalhar e estudar à noite, nos finais de semana e feriados. É o que precisa ser feito. A carga é grande demais pra não fazê-lo. E, diminuindo a carga, você sabe que não chegará onde quer.&lt;/p&gt;

&lt;p&gt;Cada vez é um fator a mais, um estresse a mais, que surge de uma oportunidade boa demais pra negar. E aceitamos a vida assim. Por um ou dois anos, vai valer a pena esse sacrifício. É um investimento no futuro.&lt;/p&gt;

&lt;p&gt;As decepções começam a aparecer, suas expectativas de ser notado continuam não se cumprindo a cada dia, e essa carga de trabalho tão pesada se transforma no seu dia. Você acorda e dorme para cumprir o que acha que os outros esperam de você, adiando a esperança de que vai dar certo. Cada vez mais você acumula rejeições nos estágios dos sonhos. Não desiste de lutar. E meses se passam.&lt;/p&gt;

&lt;p&gt;Até que você quebra.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vqL69rFl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.phocuswire.com/uploadedImages/Articles/Opinion/2019/September/broken-marketing-funnel.jpg%3Forigwidth%3D800%26origheight%3D400%26origmode%3Dcrop%26Anchor%3DMiddleCenter%26width%3D640%26height%3D480%26scale%3Dboth%26mode%3Dcrop" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vqL69rFl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.phocuswire.com/uploadedImages/Articles/Opinion/2019/September/broken-marketing-funnel.jpg%3Forigwidth%3D800%26origheight%3D400%26origmode%3Dcrop%26Anchor%3DMiddleCenter%26width%3D640%26height%3D480%26scale%3Dboth%26mode%3Dcrop" alt="Quebrado"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Você está cansado. Olha para o lado e seus amigos, que antes se divertiam tanto juntos, não estão diariamente ao seu lado. Não estão ao seu lado há algum tempo, e você sequer tinha notado. Você não está satisfeito com seu corpo, sua aparência. Pensa em fazer outra coisa pra desestressar, mas o que fazer? Você deixou seus hobbies pra trás há muito tempo.&lt;/p&gt;

&lt;p&gt;Estar no computador começa a causar dor, e aos poucos você começa a abdicar de algumas das obrigações. Mesmo sem ter alcançado nada do que imaginava ser possível. Sair de um projeto, não se inscrever em mais uma monitoria. Surge o medo de se formar e estar desempregado, seu pior pesadelo.&lt;/p&gt;

&lt;p&gt;Mas existe a possibilidade de continuar na universidade, numa pós graduação, e extender esse tempo de se decidir. Com suas notas e seus esforços, deve ser possível. Mas foi pra isso que você lutou tanto? Pra continuar no mesmo lugar que você está? Sabendo que uma vez ouviu que "a pós-graduação é onde ficam aqueles que não conseguem um emprego"?&lt;/p&gt;

&lt;p&gt;Você sabe que isso não é verdade. Mas você correu demais. Esqueceu de aproveitar a graduação. Viver o dia a dia de um projeto, de uma monitoria. Divertir-se com seus amigos, ao invés de tentar agarrar o mundo com seus braços. Esqueceu de cursar uma disciplina e conversar com o professor após a aula, sobre como aquele conteúdo se aplica num problema, mesmo que você não fosse fazê-lo. Sua curiosidade e seu interesse sumiram, pois não havia mais tempo para novas coisas. &lt;/p&gt;

&lt;p&gt;Aos poucos, você foi murchando. E, só agora, percebeu que estava murcho.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6AZG9oO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/4683/39355517851_0353a16705_b.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6AZG9oO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://live.staticflickr.com/4683/39355517851_0353a16705_b.jpg" alt="Flor murcha"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Não é possível voltar no tempo e reparar tudo, você sabe muito bem. Mas sempre é possível reconsiderar o que está fazendo agora, ponderar melhor e entender suas prioridades. Saúde, tempo, amigos, rir, sorrir, brincar. Assistir um filme ruim só pra dizer que é ruim mesmo, e então rir com seus amigos por vocês escolhido passar por isso. Se reaproximar daqueles que importam, das coisas que te faziam sorrir.&lt;/p&gt;

&lt;p&gt;A relação com o seu trabalho e seus estudos precisa ser saudável pra dar certo, afinal, você escolheu tudo isso por gostar. Mas sua vida não se resume a um emprego, um título, um trabalho. Escolher esse caminho pode te isolar. Pode doer.&lt;/p&gt;

&lt;p&gt;Pare, pense, reflita.&lt;br&gt;
Sempre.&lt;br&gt;
Para só então saber como continuar.&lt;/p&gt;

</description>
      <category>ptbr</category>
      <category>motivation</category>
      <category>career</category>
    </item>
    <item>
      <title>Automate your workflow with Microsoft Power Automate</title>
      <author>arnu515</author>
      <pubDate>Mon, 12 Jul 2021 16:50:41 +0000</pubDate>
      <link>https://dev.to/arnu515/automate-your-workflow-with-microsoft-power-automate-3m7i</link>
      <guid>https://dev.to/arnu515/automate-your-workflow-with-microsoft-power-automate-3m7i</guid>
      <description>&lt;p&gt;The most tedious part of development is doing the same tasks over and over again. Don't you feel bored having to mention someone on Slack when they get assigned a Github Issue, or having to send an email to your newsletter when you post a tweet.&lt;/p&gt;

&lt;p&gt;Sure, you can setup integrations, webhooks and CI jobs to do these tasks, but they're often tedious, require signups to hundreds of services, and all of them might not have the same steps.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href="https://flow.microsoft.com"&gt;Microsoft Power Automate&lt;/a&gt;, also called Microsoft Flow, which allows you to automate almost everything in your tech stack. Want to send a message on Slack or Teams, sure, want to SMS a number with Twilio, you can do that too. It also has many listeners, like when a new Tweet is posted, or when a Github Issue is assigned to you.&lt;/p&gt;

&lt;p&gt;In this tutorial, we'll take a look at how we can automate a few common tasks with Microsoft Flow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;An Office365 Microsoft Account&lt;/li&gt;
&lt;li&gt;Accounts for the services we'll be automating (Github, Slack, etc).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#flow-1-mail-me-when-a-github-issue-is-assigned-to-me"&gt;
  &lt;/a&gt;
  Flow 1 - Mail me when a Github Issue is assigned to me
&lt;/h2&gt;

&lt;p&gt;First, create a new Automated Cloud flow and give it a name.&lt;/p&gt;

&lt;p&gt;Add the &lt;code&gt;When an issue is assigned to me&lt;/code&gt; trigger from Github. You will now be asked to sign in to Github, which you should do.&lt;/p&gt;

&lt;p&gt;Next, add the &lt;code&gt;Mail&lt;/code&gt; action, which uses Sendgrid under the hood.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KZ0q027Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/XbgBN01/Screenshot-from-2021-07-09-14-48-42.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KZ0q027Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/XbgBN01/Screenshot-from-2021-07-09-14-48-42.png" alt="How your flow looks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can notice that I've added some dynamic elements that were provided to me by the Github Trigger.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can add more things to your flow, for example, add an item on Microsoft Todo, create a Trello card, or message yourself on Slack.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CjgHiX62--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/g4DGNVs/Screenshot-from-2021-07-09-14-53-15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CjgHiX62--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/g4DGNVs/Screenshot-from-2021-07-09-14-53-15.png" alt="Added a Todo action"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;code&gt;Save&lt;/code&gt; when done, and you will now be emailed whenever an issue's been assigned to you!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flow-2-post-your-websites-status-to-your-twitter-everyday-at-6-am"&gt;
  &lt;/a&gt;
  Flow 2 - Post your website's status to your Twitter everyday at 6 AM
&lt;/h2&gt;

&lt;p&gt;Create a Scheduled Cloud Flow, since this event is based on time.&lt;/p&gt;

&lt;p&gt;Make sure the date is set to this date, and the time is set to &lt;code&gt;6:00 AM&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also set the task to repeat every 1 day. See the below image if you get confused.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CHzopPVL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/0Bf8qqL/Screenshot-from-2021-07-09-14-58-28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CHzopPVL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/0Bf8qqL/Screenshot-from-2021-07-09-14-58-28.png" alt="Flow creation dialog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add a HTTP action that'll query your website's status page. My website uses Cachet to display its status, so I'll tailor my flow to Cachet's API response.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9cxFSuPr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Lbm4ZML.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9cxFSuPr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Lbm4ZML.png" alt="HTTP action"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, you need to parse the data down to access the &lt;code&gt;status_name&lt;/code&gt; field in the JSON response. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pwA5XZrz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/PwNrtPK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pwA5XZrz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/PwNrtPK.png" alt="Data actions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, you can tweet out the status of the website. You'll need to sign in to Twitter for this flow to work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1dvX25Ba--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/HujqhpF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1dvX25Ba--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/HujqhpF.png" alt="Tweet action"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;code&gt;Save&lt;/code&gt; when done, and now, at 6 AM daily, your followers will be notified of your website's status.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;See how easy it is to automate the small things? The best part is that Microsoft Flow is included with the Office365 subscription, so along with Excel, Word and PowerPoint, you also get this monster of an automation tool that really, nobody cares about! So go ahead and share this article with your friends, so they can also use this wonderful tool.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>azure</category>
      <category>automation</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How To Structure a Massive Vuex Store for a Production App</title>
      <author>Domagoj Vidovic</author>
      <pubDate>Mon, 12 Jul 2021 16:47:22 +0000</pubDate>
      <link>https://dev.to/domagojvidovic/how-to-structure-a-massive-vuex-store-for-a-production-app-97a</link>
      <guid>https://dev.to/domagojvidovic/how-to-structure-a-massive-vuex-store-for-a-production-app-97a</guid>
      <description>&lt;p&gt;When looking at Vuex tutorials, you can see most of them are quite simple.&lt;/p&gt;

&lt;p&gt;The logic is explained well, but scalability suffers. How will this work in my production app?&lt;/p&gt;

&lt;p&gt;Here’s a simple store example from &lt;a href="https://vuex.vuejs.org/guide/#the-simplest-store"&gt;Vuex official docs&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vuex&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vuex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Vuex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Vuex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;increment&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
A simple store





&lt;p&gt;There’s no need to explain this. I assume that you already have some Vue and Vuex knowledge prior to this article.&lt;/p&gt;

&lt;p&gt;My goal is not to explain what a store, state, or mutations are.&lt;/p&gt;

&lt;p&gt;Instead, I want to show you a massive store with 1,000+ state attributes, mutations, actions, and getters.&lt;/p&gt;

&lt;p&gt;I want to teach you how to structure the store for the best maintainability, readability, and reusability.&lt;/p&gt;

&lt;p&gt;It can have 100,000+ attributes. It would still be clear.&lt;/p&gt;

&lt;p&gt;Let’s dive in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#meet-modules"&gt;
  &lt;/a&gt;
  Meet Modules
&lt;/h2&gt;

&lt;p&gt;As we already said, keeping everything in one file will create a mess. You don’t want a 50,000+ LOC file. It’s the same as keeping your app in one component.&lt;/p&gt;

&lt;p&gt;Vuex helps us here by dividing the store into modules.&lt;/p&gt;

&lt;p&gt;For the purpose of this example, I will create a store with two modules. Note that the process is the same for 100+ modules, as well as 100+ actions, getters, and mutations within every module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userModule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;namespaced&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({}),&lt;/span&gt;
  &lt;span class="na"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="na"&gt;getters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;organisationModule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;namespaced&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({}),&lt;/span&gt;
  &lt;span class="na"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;VueX&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;organisation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;organisationModule&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; `userModule`'s state&lt;/span&gt;
&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;organisation&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; `organisationModule`'s state&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
Updated store







&lt;p&gt;The &lt;code&gt;namespaced&lt;/code&gt; attribute is incredibly important here. Without it, actions, mutations, and getters would still be registered at the global namespace.&lt;/p&gt;

&lt;p&gt;With the &lt;code&gt;namespaced&lt;/code&gt; attribute set to true, we divide actions, mutations, and getters into the modules as well.&lt;/p&gt;

&lt;p&gt;This is really helpful if you have two actions with the same name. Having them in a global namespace would create clashes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userModule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;namespaced&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({}),&lt;/span&gt;
  &lt;span class="na"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET_USER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET_USER_LOCATION&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;getters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET_USER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="c1"&gt;// correct ✅&lt;/span&gt;

&lt;span class="nx"&gt;stote&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET_USER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="c1"&gt;// wrong ❌&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
Namespaced module







&lt;p&gt;As you can see, the module is completely “local” right now. We can access it only through the user object on the state.&lt;/p&gt;

&lt;p&gt;Exactly what we want for our massive application.&lt;/p&gt;




&lt;p&gt;Cool, now we have a store divided into modules!&lt;/p&gt;

&lt;p&gt;However, I don’t like the hardcoded strings for actions. It’s definitely not maintainable. Let’s address this issue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types-to-save-you-from-headaches"&gt;
  &lt;/a&gt;
  Types To Save You From Headaches
&lt;/h2&gt;

&lt;p&gt;We don’t just want to access every property from every module in every file. That sentence sounds like hell.&lt;/p&gt;

&lt;p&gt;We want to import them first. Then use &lt;code&gt;mapGetters&lt;/code&gt;, &lt;code&gt;mapActions&lt;/code&gt;, or &lt;code&gt;mapMutations&lt;/code&gt; to achieve that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// userModule.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SET_USER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET_USER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SET_USER_LOCATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET_USER_LOCATION&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userModule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;namespaced&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({}),&lt;/span&gt;
  &lt;span class="na"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;SET_USER&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;SET_USER_LOCATION&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;getters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// vue file&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;mapActions&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vuex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SET_USER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SET_USER_LOCATION&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./userModule.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;mapActions&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SET_USER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;setUserLocation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SET_USER_LOCATION&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
Access actions with mapActions







&lt;p&gt;This gives you a clear view of store attributes used by your Vue file.&lt;/p&gt;

&lt;p&gt;But that’s not enough. Everything is still in one file. Let’s see what we can do to scale it properly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#folder-structure"&gt;
  &lt;/a&gt;
  Folder Structure
&lt;/h2&gt;

&lt;p&gt;Ideally, we want to split modules into different folders. Within those modules, we want to split their mutations, actions, getters, state attributes, and types across different files.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vHbc-1vs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jumfdh6gb3wedgtg8rrk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vHbc-1vs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jumfdh6gb3wedgtg8rrk.png" alt="The desired folder structure"&gt;&lt;/a&gt;&lt;/p&gt;
The desired folder structure





&lt;p&gt;Folder &lt;code&gt;store&lt;/code&gt; will be created in the root folder of our project.&lt;/p&gt;

&lt;p&gt;It will contain two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;index.js&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;modules&lt;/code&gt; folder&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Before explaining the &lt;code&gt;index.js&lt;/code&gt; file, let’s see how we divide a single module. Let’s check the &lt;code&gt;user&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;All of its actions, mutations, and getters should be listed in the &lt;code&gt;types.js&lt;/code&gt; file. So, something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// actions&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SET_USER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET_USER&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SET_USER_LOCATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SET_USER_LOCATION&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// mutations&lt;/span&gt;

&lt;span class="c1"&gt;// getters&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
store/modules/user/types.js







&lt;p&gt;We’ll have a clear view by importing those consts every time we want to use them.&lt;/p&gt;

&lt;p&gt;Let’s look at the actions now. We want to move them to the &lt;code&gt;actions.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;To do so, we only need to copy the &lt;code&gt;actions&lt;/code&gt; object within the module and &lt;code&gt;export default&lt;/code&gt; it, while importing the types:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SET_USER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SET_USER_LOCATION&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./types.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;SET_USER&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;SET_USER_LOCATION&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
store/modules/user/actions.js







&lt;p&gt;We will do the same thing for mutations and getters. The state attributes will remain in &lt;code&gt;index.js&lt;/code&gt; (within the user module folder):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./actions.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;mutations&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./mutations.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;getters&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./getters.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;namespaced&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;getters&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
store/modules/user/index.js







&lt;p&gt;Now we have all of our modules divided into multiple files.&lt;/p&gt;

&lt;p&gt;The one thing remaining is to link all those modules in the &lt;code&gt;index.js&lt;/code&gt; file within the &lt;code&gt;store&lt;/code&gt; folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vuex&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vuex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Modules import&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;UserModule&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;modules/user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;OrganisationModule&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;modules/organisation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Vuex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({})&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mutations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({})&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({})&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;modules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;userModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;organisation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;organisationModule&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Vuex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;getters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;modules&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
store/index.js







&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;By using this architecture, we had zero problems with scalability in our massive production app.&lt;/p&gt;

&lt;p&gt;Everything is so easy to find.&lt;/p&gt;

&lt;p&gt;We know exactly where all the actions are triggered.&lt;/p&gt;

&lt;p&gt;The system is highly maintainable.&lt;/p&gt;

&lt;p&gt;If you have any recommendations for the improvements, please let me know. I would love to hear your opinion.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Welcome to TypeScript In 6 mins</title>
      <author>Kinanee Samson</author>
      <pubDate>Mon, 12 Jul 2021 16:30:22 +0000</pubDate>
      <link>https://dev.to/kalashin1/welcome-to-typescript-in-6-mins-47g6</link>
      <guid>https://dev.to/kalashin1/welcome-to-typescript-in-6-mins-47g6</guid>
      <description>&lt;p&gt;TypeScript, a superset of JavaScript that is loaded with superpowers how many times you wrote something only for you to have a deep to find bug because a variable that was supposed to be a string actually stores a number? TypeScript is a useful tool for avoiding bugs like this, if you were actually working with TypeScript this kind of bug would have been discovered before runtime. But TypeScript provides much more than just this. &lt;/p&gt;

&lt;p&gt;TypeScript also allows us to use cool features of JavaScript that is not available on vanilla JavaScript. How??? TypeScript being a super set of JavaScript actually compiles down to JavaScript, it is the TypeScript compiler that gives us all of it's cool features. The TypeScript compiler itself is written in TypeScript and compiled down to JavaScript. &lt;/p&gt;

&lt;p&gt;This should give you a basic idea of how important TypeScript can be for the developers. This said, it doesn't mean that using TypeScript is all rosy and doesn't come with any trade offs, however you will find out that using TypeScript has many benefits and it outweighs any potential drawbacks you could encounter while using it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;Ensure that you have node js installed on your machine first if not head to &lt;a href="https://nodejs.org"&gt;nodejs&lt;/a&gt; website and get the latest version. Open up an empty terminal session and install TypeScript by running &lt;code&gt;npm i typescript -g&lt;/code&gt; to install the typeScript compiler. Note this installs it globally on our machine.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-typescript"&gt;
  &lt;/a&gt;
  What is TypeScript?
&lt;/h3&gt;

&lt;p&gt;The docs say that "TypeScript is an open-source language which builds on JavaScript, one of the world's most used tools, by adding static type definitions.". Don't let this fool you, this simple aspect of TypeScript is arguably one of it's greatest advantage over JavaScript. &lt;/p&gt;

&lt;p&gt;Static Type Definitions in our code provides a way to describe the shape of an object, providing better documentation, and allowing TypeScript to validate that your code is working correctly. That's why bugs like the one described above, are caught while we are writing our code rather than after we deploy it. But if you like me and you are quite lazy writing types can be optional in TypeScript, because type inference allows you to get a lot of power without writing additional code.&lt;/p&gt;

&lt;p&gt;Since TypeScript is a superset of JavaScript, valid JavaScript is TypeScript! And this automatically makes you feel at home, we could write plain JavaScript and save it with the &lt;code&gt;.ts&lt;/code&gt; extension. And compile it to JavaScript it would still get the job done.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Valid JavaScript is Typescript&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bruce&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// adding types&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Burger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;380&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;instock&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;burger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;instock&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;burger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if you compile this code to JavaScript by running &lt;code&gt;tsc filename.ts&lt;/code&gt;. The typescript compiler will compile this code down to vanilla JavaScript for us and if you inspect it, you will find out that it reads to plain JavaScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#types"&gt;
  &lt;/a&gt;
  Types
&lt;/h3&gt;

&lt;p&gt;We saw a basic demonstration of how TypeScript extends JavaScript by adding static types, we can use this advantage and compose unique types for objects. We can explicitly declare the type for a variable or we can let typescript infer the type based on the value we assign the variable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Explicit Typing&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;greetings&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Name can only store strings&lt;/span&gt;
&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sam&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// age can only store numbers&lt;/span&gt;
&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;

&lt;span class="c1"&gt;// functions can also have types&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="nx"&gt;greet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;

&lt;span class="c1"&gt;// Implicit Typing&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Thor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2500&lt;/span&gt;

&lt;span class="nx"&gt;greetings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;samson&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// NOT POSSIBLE&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;greetings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// hello samson&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But TypeScript is not too restrictive and we can opt of static typing by annotating the variable with the type any. This allows us to assign values of different type to the variable.&lt;/p&gt;

&lt;p&gt;Functions are also typed in TypeScript, we annotate the parameters that the functions expects to be of a particular type to ensure that the right kind of values are passed in to it when called. We also specify the return type of the function, If we invoke the function and pass in the correct arguments, TypeScript will automatically infer the return type to any variable we store it in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Thor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Thor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also declare union types or restrict the actual value that a variable can hold.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Union types&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Thor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Thor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Restricting Values for variables&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;universe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DCU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MCU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// universe can only be DCU or MCU&lt;/span&gt;
&lt;span class="nx"&gt;universe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DCU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Not Possible&lt;/span&gt;
&lt;span class="nx"&gt;universe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Something else&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we have been declaring types for simple variables, we can also declare types for objects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;universe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DCU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MCU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;superman&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;superman&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;universe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DCU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One of the cool benefits of this typing system is that, our IDE will provide us with rich auto-completion and intellisense. This can help with documentation purposes. rather than use types for Object personally i prefer using interfaces to describe the shape of Classes which in turn affects the Object.&lt;/p&gt;

&lt;p&gt;TypeScript supports OOP and has many tools up it's belt that i uses to achieve OOP. You could also go with functional approach or whatever programming paradigm you see fit. Let's touch up &lt;code&gt;Interfaces&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interfaces"&gt;
  &lt;/a&gt;
  Interfaces
&lt;/h3&gt;

&lt;p&gt;We can use types for objects as we did but i prefer using interfaces. Interfaces provides a contract that all clients that implements it must satisfy before it is valid. Interfaces are really great OOP tool in TypeScript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Hero&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;universe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DCU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MCU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;superman&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Hero&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;superman&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;universe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DCU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One thing with interfaces is that they can implement other interfaces or classes, we can take advantage of this feature when working with external libraries and frameworks, by extending our interfaces to implement other interfaces.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Human&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Hero&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;Human&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;powers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="nx"&gt;uninverse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DCU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;MCU&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// ALl heroes must have the same &lt;/span&gt;
&lt;span class="c1"&gt;// properties as humans&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you observed, the &lt;code&gt;powers&lt;/code&gt; properties on a hero is an array, but we add the string type before the array, this tells TypeScript that the powers property is an array of strings, we can also have arrays of any type. If we want more control over what element is in what position in an array the we could use a tuple.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arrays"&gt;
  &lt;/a&gt;
  Arrays
&lt;/h3&gt;

&lt;p&gt;Arrays can be typed such that it only a specific type of value or restricted types of values can be stored inside the array. We can have an array of strings or numbers. Even better we can have an array of both strings and numbers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// array of numbers;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;heroes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Hero&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mixedArr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="nx"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// Valid&lt;/span&gt;
&lt;span class="nx"&gt;mixedArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sam&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// Valid&lt;/span&gt;

&lt;span class="nx"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sam&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// Not possible&lt;/span&gt;
&lt;span class="nx"&gt;mixedArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;hero&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;supes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt; &lt;span class="c1"&gt;// Not possible&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tuples are arrays where each index in the array is typed and cannot store a value whose type do not match the type we specified for that index. Tuples are useful when we use spread operators.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// TUPLES&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;tup&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;tup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sam&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;superman&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have barely touched the features of TypeScript and what we can do with it. But this is a friendly intro and not to scare you. We will look more in depth about the features of TypeScript and what we can do with it. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cli-commands"&gt;
  &lt;/a&gt;
  CLI Commands
&lt;/h3&gt;

&lt;p&gt;To compile your TypeScript code to JavaScript, just run &lt;code&gt;tsc ./file_name&lt;/code&gt;, file_name should be the name of the file you are trying to compile to JavaScript. If there are no errors, TypeScript will sipt out a JavaScript version of your TypeScript code, even if there are certain bugs in your code it will still spit out the compiled code.&lt;/p&gt;

&lt;p&gt;One cool thing with working with TypeScript is that we can customize the behavior of the compiler as we see fit, we can either do this in the command line or through a &lt;code&gt;tsconfig.json&lt;/code&gt; file. The config file is the best way to do this because there is a handful of compiler options that we can customize.&lt;/p&gt;

&lt;p&gt;To compile your code whenever you save a change you can run &lt;code&gt;tsc --w&lt;/code&gt; and this will compile your file in watch mode, anytime there is a change to the source code the TypeScript compiler will automatically compile the code again. To generate a blank config file run &lt;code&gt;tsc --init&lt;/code&gt; and TypeScript will give us a blank &lt;code&gt;tsconfig.json&lt;/code&gt; file.  &lt;/p&gt;

&lt;p&gt;To get a run down of all the compiler options run &lt;code&gt;tsc --all&lt;/code&gt; and it will print all compiler options in your command line . To throw of the version of TypeScript you have installed in your computer run &lt;code&gt;tsc --version&lt;/code&gt;. There is a handful of more CLI commands we can but discuss here and that fits into it's own article&lt;/p&gt;

&lt;p&gt;Hope you enjoyed this and also found it useful, feel free to leave a comment below. I will be making a series of articles about TypeScript so stay tuned.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Top 10 Coding Principles Every Developer Must Know</title>
      <author>Mr. Unity Buddy</author>
      <pubDate>Mon, 12 Jul 2021 16:08:04 +0000</pubDate>
      <link>https://dev.to/unitybuddy/top-10-coding-principles-every-developer-must-know-2gk4</link>
      <guid>https://dev.to/unitybuddy/top-10-coding-principles-every-developer-must-know-2gk4</guid>
      <description>&lt;p&gt;Hello, buddies! I would like to get into our topic without wasting time.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It's easy to write code. It's challenging to write good code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Bad code comes in many forms. Messy code, massive if-else chains, programs that break with one adjustment, variables that don't make sense. The program might work once but will never hold up to any scrutiny.&lt;/p&gt;

&lt;p&gt;If you want to be a programmer, don't settle for shortcuts. Aim to write code that is easy to maintain. Easy for you to maintain, and easy for any other developer on your team to maintain. How do you write effective code?  You write good code by being disciplined with programming principles. So Today we're going see some programming principles that can help you to be a Good Developer&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-keep-it-simple-stupid-kiss"&gt;
  &lt;/a&gt;
  1. Keep It Simple, Stupid (KISS)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_CKoWwXv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839631378/G7BJWiSsV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_CKoWwXv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839631378/G7BJWiSsV.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
It sounds a little harsh, but it's a coding principle to live by. What does this mean?&lt;/p&gt;

&lt;p&gt;It means you should be writing code as simple as possible. Don't get caught up in trying to be overly clever or showing off with a paragraph of advanced code. If you can write a script in one line, write it in one line.&lt;/p&gt;

&lt;p&gt;Here's a simple function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; function addNumbers(num1,num2){
 return num1 + num2;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pretty simple. It's easy to read and you know exactly what is going on.&lt;/p&gt;

&lt;p&gt;Use clear variable names. Take advantage of coding libraries to use existing tools. Make it easy to come back after six months and get right back to work. Keeping it simple will save you the headache.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-dry-dont-repeat-yourself"&gt;
  &lt;/a&gt;
  2. DRY (Don’t repeat yourself)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o6nupxoX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839516565/DWbKqEcoa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o6nupxoX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839516565/DWbKqEcoa.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
DRY (don’t repeat yourself) means don’t write duplicate code, instead use Abstraction to abstract everyday things in one place.&lt;/p&gt;

&lt;p&gt;If you have a block of code in more than two places, consider making it a separate method, or if you use a hard-coded value more than one time, make them public final constant. The benefit of this Object-oriented design principle is in maintenance.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It’s important not to abuse it, duplication is not for code, but for functionality.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It means if you have used standard code to validate OrderId and SSN, it doesn’t mean they are the same, or they will remain the same in the future.&lt;/p&gt;

&lt;p&gt;By using standard code for two different functionality or thing, you tightly couple them forever, and when your OrderId changes its format, your SSN validation code will break.&lt;/p&gt;

&lt;p&gt;So beware of such coupling and don’t combine anything which uses similar code but is not related. You can further check out the Basics of Software Architecture &amp;amp; Design Patterns in Java course on Udemy to learn more about writing the right code and best practices to follow while designing a system.&lt;/p&gt;

&lt;p&gt;DRY code is easy to maintain. It's easier to debug one loop that handles 50 repetitions than 50 blocks of code that handle one repetition.&lt;/p&gt;

&lt;p&gt;To learn more about DRY, You should &lt;a href="https://h.daily-dev-tips.com/software-design-principles-dry"&gt;read this article&lt;/a&gt; be thankful to @&lt;a href="https://dev.to@dailydevtips"&gt;Chris Bongers&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-openclosed"&gt;
  &lt;/a&gt;
  3. Open/Closed
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wk151-2L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839692847/IBMAh3ear.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wk151-2L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839692847/IBMAh3ear.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
This principle means you should aim to make your code open to extension but closed to modification. This is an important principle when releasing a library or framework that others will use.&lt;/p&gt;

&lt;p&gt;For example, suppose you're maintaining a GUI framework. You could release for coders to directly modify and integrate your released code. But what happens when you release a major update four months later?&lt;/p&gt;

&lt;p&gt;Their code will break. This will make engineers unhappy. They won't want to use your library for much longer, no matter how helpful it may be.&lt;/p&gt;

&lt;p&gt;Instead, release code that prevents direct modification and encourages extension. This separates core behavior from modified behavior. The code is more stable and easier to maintain.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#4-composition-over-inheritance"&gt;
  &lt;/a&gt;
  4. Composition Over Inheritance
&lt;/h2&gt;

&lt;p&gt;If you write code using object-oriented programming you're going to find this useful. The composition over inheritance principle states: objects with complex behaviors should contain instances of objects with individual behaviors. They should not inherit a class and add new behaviors.&lt;/p&gt;

&lt;p&gt;Relying on inheritance causes two major issues. First, the inheritance hierarchy can get messy in a hurry. You also have less flexibility for defining special-case behaviors. Let's say you want to implement behaviors to share:&lt;/p&gt;

&lt;p&gt;Composition programming is a lot cleaner to write, easier to maintain and allows flexibility defining behaviors. Each individual behavior is its own class. You can create complex behaviors by combining individual behaviors.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#5-you-arent-going-to-need-it-yagni"&gt;
  &lt;/a&gt;
  5. You Aren't Going to Need It (YAGNI)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uKg4jAFa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839742341/hQjL6AL7c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uKg4jAFa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839742341/hQjL6AL7c.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
This principle means you should never code for functionality on the chance that you may need in the future. Don't try and solve a problem that doesn't exist.&lt;/p&gt;

&lt;p&gt;In an effort to write DRY code, programmers can violate this principle. Often inexperienced programmers try to write the most abstract and generic code they can. Too much abstraction causes bloated code that is impossible to maintain.&lt;/p&gt;

&lt;p&gt;Only apply the DRY principle only when you need to. If you notice chunks of code written over and over, then abstract them. Don't think too far out at the expense of your current code batch.&lt;/p&gt;

&lt;p&gt;There are two main reasons to practice YAGNI,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You save time because you avoid writing code that you turn out not to need.&lt;/li&gt;
&lt;li&gt;Your code is better because you avoid polluting it with 'guesses' that turn out to be more or less wrong but stick around anyway.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#6-single-responsibility"&gt;
  &lt;/a&gt;
  6. Single Responsibility
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lakfs1aV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839801179/DPn7sNIbM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lakfs1aV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839801179/DPn7sNIbM.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
As you start writing code, over a long period of time, your code would become clumsy. You will have classes/modules that perform several functionalities. This will end up with classes that are hundreds and thousands of lines of code.&lt;br&gt;
This principle says that every class or module in a program should only have specific functionality. In other words, a class or module in a program should only be responsible for tasks regarding one particular function. This helps you keep your modules minimal and clean.&lt;/p&gt;

&lt;p&gt;Both Open/Closed and Single Responsibility principles are in under the SOLID Principle. &lt;a href="https://francescociulla.com/solid-principles-around-you-in-javascript"&gt;In this article&lt;/a&gt;, @&lt;a href="https://dev.to@FrancescoCiulla"&gt;Francesco Ciulla&lt;/a&gt; has wonderfully explained about each principle in SOLID.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#7-document-your-code"&gt;
  &lt;/a&gt;
  7. Document Your Code
&lt;/h2&gt;

&lt;p&gt;Any senior developer will stress the importance of documenting your code with proper comments. All languages offer them and you should make it a habit to write them. Leave comments to explain objects, enhance variable definitions, and make functions easier to understand.&lt;/p&gt;

&lt;p&gt;Here's a Python function with comments guiding you through the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_odd&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
       &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Enter&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;..))&lt;/span&gt; &lt;span class="c1"&gt;# Get a number
&lt;/span&gt;       &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Divide number by 2. If no remains,
&lt;/span&gt;                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"This is a even number"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Print it is not a odd number
&lt;/span&gt;       &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Here is the odd number!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# If 1 remains, print it is a odd number
&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Leaving comments is a little more work while you're coding, and you understand your code pretty well right?&lt;/p&gt;

&lt;p&gt;Leave comments anyway!&lt;/p&gt;

&lt;p&gt;Try writing a program, leaving it alone for six months, and come back to modify it. You'll be glad you documented your program instead of having to pour over every function to remember how it works. Work on a coding team? Don't frustrate your fellow developers by forcing them to decipher your syntax.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-separation-of-concerns"&gt;
  &lt;/a&gt;
  8. Separation of Concerns
&lt;/h2&gt;

&lt;p&gt;The separation of concerns principle is an abstract version of the single responsibility principle. This idea states that a program should be designed with different containers, and these containers should not have access to each other.&lt;/p&gt;

&lt;p&gt;A well-known example of this is the model-view-controller (MVC) design. MVC separates a program into three distinct areas: the data (model), the logic (controller), and what the page displays (view). Variations of MVC are common in today's most popular web frameworks.&lt;/p&gt;

&lt;p&gt;For example, the code that handles the database doesn't need to know how to render the data in the browser. The rendering code takes input from the user, but the logic code handles the processing. Each piece of code is completely independent.&lt;/p&gt;

&lt;p&gt;The result is code that is easy to debug. If you ever need to rewrite the rendering code, you can do so without worrying about how the data gets saved or the logic gets processed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-refactor"&gt;
  &lt;/a&gt;
  9. Refactor
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uHZInLSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839823516/DYVuQxQcR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uHZInLSq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839823516/DYVuQxQcR.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
It's hard to accept, but your code isn't going to be perfect the first time. Refactoring code means reviewing your code and looking for ways to optimize it. Make it more efficient while keeping the results exactly the same.&lt;/p&gt;

&lt;p&gt;Codebases are constantly evolving. It's completely normal to revisit, rewrite, or even redesign entire chunks of code. It doesn't mean you didn't succeed the first time you wrote your program. You're going to get more familiar with a project over time. Use that knowledge to adjust your existing code to be DRY, or following the KISS principle.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-clean-code-at-all-costs"&gt;
  &lt;/a&gt;
  10. Clean Code At All Costs
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NJ7bMWWs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839871256/bIzvjl-ln.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NJ7bMWWs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1620839871256/bIzvjl-ln.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Leave your ego at the door and forget about writing clever code. The kind of code that looks more like a riddle than a solution. You're not coding to impress strangers.&lt;/p&gt;

&lt;p&gt;Don't try to pack a ton of logic into one line. Leave clear instructions in comments and documentation. If your code is easy to read it will be easy to maintain.&lt;/p&gt;

&lt;p&gt;Good programmers and readable code go hand-in-hand. Leave comments when necessary. Adhere to style guides, whether dictated by a language or your company. @&lt;a href="https://dev.to@macerub"&gt;Mario Cervera&lt;/a&gt; has beutifully explained about Clean Code &lt;a href="https://mariocervera.com/the-essence-of-clean-code"&gt;in this article&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mr-unity-buddy.hashnode.dev/top-10-coding-principles-every-developer-must-know"&gt;Originally&lt;/a&gt; published on Hashnode&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
