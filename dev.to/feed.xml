<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>I'll Be Writing PHP Functions In Here Just For Fun!</title>
      <author>Shoaiyb Sysa</author>
      <pubDate>Sun, 21 Nov 2021 07:46:06 +0000</pubDate>
      <link>https://dev.to/shoaiyb/php-for-fun-2kc9</link>
      <guid>https://dev.to/shoaiyb/php-for-fun-2kc9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#strsprintf"&gt;
  &lt;/a&gt;
  STR_SPRINTF
&lt;/h2&gt;

&lt;p&gt;An alternative to the default function &lt;code&gt;sprintf&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;_sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$format&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;mixed&lt;/span&gt; &lt;span class="mf"&gt;...&lt;/span&gt;&lt;span class="nv"&gt;$values&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$values&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str_replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'%'&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$format&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$format&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nf"&gt;_sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'I am %0 and so %1 now!'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'tired'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'hungry'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// returns: I am tired and so hungry now!&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#search"&gt;
  &lt;/a&gt;
  _SEARCH
&lt;/h2&gt;

&lt;p&gt;What I use to add search functionality to my php sites!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$in&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;$_search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;strtolower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$search&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$in&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;strtolower&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;str_contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$_search&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;is_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'Ohh no! No search result have been found!'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nb"&gt;print_r&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Old'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'New Post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Old Post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'New Page'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Old Page'&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>php</category>
    </item>
    <item>
      <title>"`&lt;!--&lt;script&gt;`" in &lt;script&gt; will break your front end</title>
      <author>Labnan</author>
      <pubDate>Sun, 21 Nov 2021 07:21:43 +0000</pubDate>
      <link>https://dev.to/labnan/a-string-that-might-break-your-front-end-1pgp</link>
      <guid>https://dev.to/labnan/a-string-that-might-break-your-front-end-1pgp</guid>
      <description>&lt;p&gt;Lets say you have this string in a variable (case insensitive):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;`etc etc etc&amp;lt;!-- etc etc&amp;lt;scRipT&amp;gt; etc`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will break any html tag after it.&lt;/p&gt;

&lt;p&gt;Or lets say you divided that into some variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const first = `etc etc etc &amp;lt;!--`;
const second = `anything`;
const third = `&amp;lt;script&amp;gt;`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will also break the html page.&lt;/p&gt;

&lt;p&gt;Therefore please carefully assign any string that contains&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;`&amp;lt;!--&amp;lt;script&amp;gt;` 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or similar into a variable, if it is inside &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;Feel free to ask any question related to this in the comments :)&lt;/p&gt;

</description>
      <category>security</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>Bitcoin Technology Fundamentals - Tutorial 4 – Bitcoin Improvement Proposals</title>
      <author>AMITESH RAIKWAR</author>
      <pubDate>Sun, 21 Nov 2021 07:10:46 +0000</pubDate>
      <link>https://dev.to/amiteshraikwar/bitcoin-technology-fundamentals-tutorial-4-bitcoin-improvement-proposals-2o1</link>
      <guid>https://dev.to/amiteshraikwar/bitcoin-technology-fundamentals-tutorial-4-bitcoin-improvement-proposals-2o1</guid>
      <description>&lt;p&gt;Youtube video - &lt;a href="https://www.youtube.com/watch?v=5Dpxk5f6BaA"&gt;https://www.youtube.com/watch?v=5Dpxk5f6BaA&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bitcoin-cryptocurrencies-cryptocurrency-cryptonews-cryptotrading-cryptocurrencies-cryptoadoption-bitcointrading-bitcoinmining-bitcoins-bitcoincash-bitcoinvalue-bitcoin"&gt;
  &lt;/a&gt;
  Bitcoin, #cryptocurrencies, #cryptocurrency, #cryptonews, #cryptotrading, #cryptocurrencies, #cryptoadoption, #bitcointrading, #bitcoinmining, #bitcoins, #bitcoincash, #bitcoinvalue, #Bitcoin,
&lt;/h1&gt;

&lt;p&gt;Bitcoin Technology Fundamentals&lt;/p&gt;

&lt;p&gt;In this video series, we will cover Basic to advanced bitcoin technology.&lt;/p&gt;




&lt;p&gt;I am Amitesh Raikwar.&lt;br&gt;
Master of Technology in Electronics &amp;amp; Communication Engineering&lt;br&gt;
Bachelor of Engineer in Electronics &amp;amp; Communication Engineering&lt;/p&gt;

&lt;p&gt;I also have Blockchain certification from IBM.&lt;/p&gt;

&lt;p&gt;Issued on: 06 JAN 2019 | Issued by: IBM&lt;br&gt;
Verify: &lt;a href="https://www.credly.com/go/Ulzl1eEi"&gt;https://www.credly.com/go/Ulzl1eEi&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you wanna support our channel please donate in the below-given link of Paypal / Paytm&lt;/p&gt;




&lt;p&gt;Paypal&lt;br&gt;
:- &lt;a href="https://paypal.me/amiteshraikwar?coun"&gt;https://paypal.me/amiteshraikwar?coun&lt;/a&gt;...&lt;/p&gt;

&lt;p&gt;Paytm &lt;br&gt;
:-  Rs. 100/-   - &lt;a href="https://paytm.me/d-OGoZn"&gt;https://paytm.me/d-OGoZn&lt;/a&gt;&lt;br&gt;
  Rs. 1001/-  &lt;a href="https://paytm.me/MgL-psh"&gt;https://paytm.me/MgL-psh&lt;/a&gt;&lt;br&gt;
  Rs. 5000/-  &lt;a href="https://paytm.me/PR-YL5c"&gt;https://paytm.me/PR-YL5c&lt;/a&gt;&lt;/p&gt;

</description>
      <category>bitcoin</category>
      <category>blockchain</category>
      <category>cryptocurrency</category>
      <category>digitalcurrency</category>
    </item>
    <item>
      <title>Bitcoin Technology Fundamentals - Tutorial 3 – Bitcoin Mining</title>
      <author>AMITESH RAIKWAR</author>
      <pubDate>Sun, 21 Nov 2021 07:10:26 +0000</pubDate>
      <link>https://dev.to/amiteshraikwar/bitcoin-technology-fundamentals-tutorial-3-bitcoin-mining-49hm</link>
      <guid>https://dev.to/amiteshraikwar/bitcoin-technology-fundamentals-tutorial-3-bitcoin-mining-49hm</guid>
      <description>&lt;p&gt;Youtube video - &lt;a href="https://www.youtube.com/watch?v=WZv7G3j1dN8&amp;amp;t=95s"&gt;https://www.youtube.com/watch?v=WZv7G3j1dN8&amp;amp;t=95s&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bitcoin-cryptocurrencies-cryptocurrency-cryptonews-cryptotrading-cryptocurrencies-cryptoadoption-bitcointrading-bitcoinmining-bitcoins-bitcoincash-bitcoinvalue-bitcoin"&gt;
  &lt;/a&gt;
  Bitcoin, #cryptocurrencies, #cryptocurrency, #cryptonews, #cryptotrading, #cryptocurrencies, #cryptoadoption, #bitcointrading, #bitcoinmining, #bitcoins, #bitcoincash, #bitcoinvalue, #Bitcoin
&lt;/h1&gt;

&lt;p&gt;Bitcoin Technology Fundamentals&lt;/p&gt;

&lt;p&gt;In this video series, we will cover Basic to advanced bitcoin technology.&lt;/p&gt;




&lt;p&gt;I am Amitesh Raikwar.&lt;br&gt;
Master of Technology in Electronics &amp;amp; Communication Engineering&lt;br&gt;
Bachelor of Engineer in Electronics &amp;amp; Communication Engineering&lt;/p&gt;

&lt;p&gt;I also have Blockchain certification from IBM.&lt;/p&gt;

&lt;p&gt;Issued on: 06 JAN 2019 | Issued by: IBM&lt;br&gt;
Verify: &lt;a href="https://www.credly.com/go/Ulzl1eEi"&gt;https://www.credly.com/go/Ulzl1eEi&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you wanna support our channel please donate in the below-given link of Paypal / Paytm&lt;/p&gt;




&lt;p&gt;Paypal&lt;br&gt;
:- &lt;a href="https://paypal.me/amiteshraikwar?coun"&gt;https://paypal.me/amiteshraikwar?coun&lt;/a&gt;...&lt;/p&gt;

&lt;p&gt;Paytm &lt;br&gt;
:-  Rs. 100/-   - &lt;a href="https://paytm.me/d-OGoZn"&gt;https://paytm.me/d-OGoZn&lt;/a&gt;&lt;br&gt;
  Rs. 1001/-  &lt;a href="https://paytm.me/MgL-psh"&gt;https://paytm.me/MgL-psh&lt;/a&gt;&lt;br&gt;
  Rs. 5000/-  &lt;a href="https://paytm.me/PR-YL5c"&gt;https://paytm.me/PR-YL5c&lt;/a&gt;&lt;/p&gt;

</description>
      <category>bitcoin</category>
      <category>blockchain</category>
      <category>cryptocurrency</category>
      <category>digitalcurrency</category>
    </item>
    <item>
      <title>Ways to create Singletons and the tradeoffs between them</title>
      <author>Abhinav Pandey</author>
      <pubDate>Sun, 21 Nov 2021 07:00:03 +0000</pubDate>
      <link>https://dev.to/abh1navv/ways-to-create-singletons-and-the-tradeoffs-between-them-ofd</link>
      <guid>https://dev.to/abh1navv/ways-to-create-singletons-and-the-tradeoffs-between-them-ofd</guid>
      <description>&lt;p&gt;The singleton pattern is used to ensure that a class has only one instance, and provide a global point of access to it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#common-use-cases"&gt;
  &lt;/a&gt;
  Common use cases
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Logging&lt;/strong&gt; - A singleton logger is used to log messages to a file.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Database connection&lt;/strong&gt; - A singleton database connection is used to connect to a database.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Configuration&lt;/strong&gt; - A singleton configuration object is used to store application configuration.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cache&lt;/strong&gt; - A singleton cache is used to store application data.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you are able to see a pattern here, these are all system-wide concerns. &lt;br&gt;
This makes understanding Singletons very important for any developer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/5rjEsJnmsUF2CxGg5e/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/5rjEsJnmsUF2CxGg5e/giphy.gif" alt="There can be only one" width="480" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ways-to-implement-the-singleton-pattern"&gt;
  &lt;/a&gt;
  Ways to implement the singleton pattern:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#the-simplest-way-to-create-a-singleton-private-static-instance"&gt;
  &lt;/a&gt;
  The simplest way to create a singleton - Private static instance
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// data fields&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="nf"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// more public methods&lt;/span&gt;
   &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doSomething&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This means that a static singleton instance is created when the class is loaded.&lt;br&gt;
This is the most common implementation but it is not memory efficient. If the class is not used, the singleton will still be created and if the singleton is heavy, it will consume a lot of memory.&lt;/p&gt;

&lt;p&gt;Let's look at some of the important concerns while creating a singleton.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Thread safety&lt;/strong&gt; - Since singletons are created to be used by multiple threads, they need to be thread safe. Being thread safe can be viewed in two ways.

&lt;ul&gt;
&lt;li&gt;Ensure that the singleton is not created more than once&lt;/li&gt;
&lt;li&gt;If the singleton holds data, like in a cache, ensure that the data is thread safe. Methods that update the data should be synchronized.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Efficiency&lt;/strong&gt; - We need to ensure optimal memory usage and performance.

&lt;ul&gt;
&lt;li&gt;Memory leaks - If the singleton is heavy and is not used, it will consume a lot of memory. &lt;/li&gt;
&lt;li&gt;Resource usage - If the singleton consumes system resources, it will consume a lot of CPU cycles. In this case, unless the singleton is used, the system will be underutilized.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Deserialization&lt;/strong&gt; - If the singleton is serialized and deserialized, it will be recreated in which case multiple instances will be created. It is not common to serialize singletons however, it is important to understand this.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So let's see if our earlier singleton implementation takes these concerns into account.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Thread safe in terms of instance creation - Yes, because static instances are only created once when the class is loaded.&lt;/li&gt;
&lt;li&gt;Memory usage is not optimal since the singleton is created when the class is loaded and not when it is used.&lt;/li&gt;
&lt;li&gt;Does not prevent the singleton from being serialized and deserialized.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now let's see some other ways one by one.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#private-static-instance-with-lazy-initialization"&gt;
  &lt;/a&gt;
  Private static instance with lazy initialization
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="nf"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More memory efficient.&lt;br&gt;
This means that the singleton is not created until the first time it is accessed. &lt;/p&gt;

&lt;p&gt;However, this does not take care of the other concerns and loses out on thread safety.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#private-static-instance-with-synchronized-getinstance-method"&gt;
  &lt;/a&gt;
  Private static instance with synchronized getInstance() method
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;synchronized&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="nf"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Memory efficient + thread safe instantiation.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This solves the problem of multiple threads trying to create the singleton at the same time. However, this also has a small trade-off. The synchronized method will make the singleton slower because it will block the calling thread if another thread is currently requesting the singleton.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's improve on this.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#private-static-instance-with-doublechecked-locking"&gt;
  &lt;/a&gt;
  Private static instance with double-checked locking
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="nf"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;synchronized&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Memory efficient + thread safe.&lt;br&gt;
This is more efficient because the synchronized block is only entered once and not when an already created instance is accessed.&lt;/p&gt;

&lt;p&gt;Another way to implement this is by using the Singleton Holder pattern.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#singleton-holder-pattern"&gt;
  &lt;/a&gt;
  Singleton Holder Pattern
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SingletonHolder&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="nf"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;SingletonHolder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Focus on the SingletonHolder.instance call. When it is first called, the SingletonHolder class is loaded. &lt;br&gt;
The class loader will then create the static singleton instance and return it.&lt;br&gt;
This makes the SingletonHolder class thread safe since it holds a static instance.&lt;/p&gt;

&lt;p&gt;A common pitfall of all the above implementations is that they are not immune to serialization or reflection.&lt;/p&gt;

&lt;p&gt;There are two ways to prevent this:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implementing-readresolve"&gt;
  &lt;/a&gt;
  Implementing readResolve()
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="nf"&gt;getInstance&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;synchronized&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;Object&lt;/span&gt; &lt;span class="nf"&gt;readResolve&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By implementing a &lt;code&gt;readResolve()&lt;/code&gt; method, the singleton will be deserialized as the same instance which is already created.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enum-singleton"&gt;
  &lt;/a&gt;
  Enum singleton
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;enum&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="no"&gt;INSTANCE&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doSomething&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Enums can only have a certain number of instances/variations. This makes it possible to implement a singleton with an enum with only one possible instance.&lt;/li&gt;
&lt;li&gt;Enums are immune to serialization and reflection. When an enum is deserialized, the instance will be the same as the only possible instance which already exists.&lt;/li&gt;
&lt;li&gt;Enum instantiation is thread-safe by design.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Trade-off - Enums are not memory efficient.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#which-singleton-implementation-is-best-for-your-use-case"&gt;
  &lt;/a&gt;
  Which singleton implementation is best for your use case?
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;If memory is not an issue or the singleton instance is light, simply use an enum singleton. &lt;/li&gt;
&lt;li&gt;If memory is an issue, use a lazy initialization singleton.

&lt;ul&gt;
&lt;li&gt;Further if thread safety is an issue, use a double-checked locking singleton or a holder pattern.&lt;/li&gt;
&lt;li&gt;Further if you need to prevent the singleton from being serialized, use a double-checked locking singleton with readResolve().&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Thanks for reading! Hope this provides you different ways to implement a singleton in Java and the trade-offs associated with them.&lt;br&gt;
If you want to connect with me, you can find me on Twitter &lt;a href="https://twitter.com/abh1navv"&gt;@abh1navv&lt;/a&gt; &lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>codequality</category>
      <category>oop</category>
    </item>
    <item>
      <title>Best Open Source Programs For Students to Participate</title>
      <author>Sumeet Vishwakarma</author>
      <pubDate>Sun, 21 Nov 2021 06:58:38 +0000</pubDate>
      <link>https://dev.to/legendsumeet/best-open-source-programs-for-students-to-participate-3d83</link>
      <guid>https://dev.to/legendsumeet/best-open-source-programs-for-students-to-participate-3d83</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uMoZ78gT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75pfjx9kac2doowavvck.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uMoZ78gT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75pfjx9kac2doowavvck.png" alt="Image description" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Contributing to open source is a really great way to get real-world software development and other domain experience from the comfort of your home even if you’re a beginner and don’t have a job in the industry. You don’t really need to be an expert to get started with open source and you’re going to get all these benefits of what it’s like to work in a team, collaborate with other people and work on a large codebase. One can test their skills, gain knowledge, and bond with the community in order to produce quality code that helps people around the world.&lt;/p&gt;

&lt;p&gt;Digital Ocean Hacktoberfest&lt;/p&gt;

&lt;p&gt;Hacktoberfest is a really popular open-source program that is hosted by Digital Ocean and is open to everyone across the world. Here, you need to submit four or more quality pull requests and you’ll either get a chance to plant a tree or get a limited-edition t-shirt. The main idea over here is that there’s no such thing as a selection criterion in this particular program. So, this is very useful for individuals, in particular, who are just starting out with open source. You can contribute to participating projects on GitHub and even if you’re not able to make a large major contribution what you can get out of it is how to use Git and Github.&lt;/p&gt;

&lt;p&gt;Google Summer of Code (GSoC)&lt;/p&gt;

&lt;p&gt;Google Summer of Code program is a program started by Google and has completed 16 years. It is a program that aims to promote open-source software development among university students. There are a few organizations and these organizations have mentors. First, the organizations apply to Google and after the organizations are selected then the students apply to the organizations. Bear in mind that you are not an employee of Google or even not an intern at Google. You’re working with that organization that you applied to or got selected in. It is a paid program with a stipend of 1500 USD.&lt;/p&gt;

&lt;p&gt;Timeline: January-August&lt;/p&gt;

&lt;p&gt;MLH Fellowship&lt;/p&gt;

&lt;p&gt;Major League Hacking (MLH), founded in 2013, is a global community for student developers. MLH recently launched a program known as MLH fellowship which is a 12-week remote program where students collaborate on Open Source projects that align their personal interests with the general requirements of the industry and students can participate from their homes. It has mainly three tracks – Software Engineering, Open Source, and Production Engineering. Here you will gain those skills that you require to be a successful engineer like writing good documentation, open-source best practices, communication, etc. Also, make sure you meet the eligibility criteria before applying for the program.&lt;/p&gt;

&lt;p&gt;Google Season of Docs (GSoD)&lt;/p&gt;

&lt;p&gt;One thing that an open-source project cannot get enough of is good documentation. However, Google Season of Docs is a new program by Google where technical writers and open source organizations come together and work on open source projects. The technical writers write documentation for open source organizations and also get paid by Google. It is a worthwhile platform for students to learn from industry experts and to work on open-source projects. Also, you need to remember that you must be aged 18 or more at the time of registration to become eligible for Google Season of Docs.&lt;/p&gt;

&lt;p&gt;Outreachy&lt;/p&gt;

&lt;p&gt;The Outreachy is also a really great program for students that aims to support diversity in open source. It is sort of a remote internship of 3 months and only a handful number of students are selected across the world. The Outreachy internship projects focus on programming, documentation, project marketing, etc. During the application process, you need to show some genuine eagerness that why you want to be an Outreachy intern and in turn, what you’re going to accomplish, and then how you plan to promote diversity and all sorts of things. It is a paid internship in which you are paid an amount of 5500 USD.&lt;/p&gt;

&lt;p&gt;Season of KDE&lt;/p&gt;

&lt;p&gt;The Season of KDE, hosted by the KDE community, is an outreach program for all individuals across the world. KDE is an international free software community that develops free and open-source software and you can contribute to KDE through the Season of KDE program. The participants of the Season of KDE program have not only contributed new features, but they are also responsible for developing KDE Continuous Integration System, ported KDE Applications, documentation, and various other things. Also, it is somehow similar to another prestigious program, Google Summer of Code&lt;/p&gt;

&lt;p&gt;GirlScript Summer of Code (GSSoC)&lt;/p&gt;

&lt;p&gt;GirlScript Summer of Code is the 3 month-long Open Source program during summers conducted by GirlScript Foundation, started in 2018, with an aim to help beginners get started with Open Source Development while encouraging diversity. Throughout the program, participants contribute to different projects under the guidance of experienced mentors. Top participants get exciting goodies and opportunities.&lt;/p&gt;

&lt;p&gt;Apart from these, there are several universities, institutes that organize their own SoC programs to encourage newcomers.&lt;/p&gt;

&lt;p&gt;E.g. NJACK Winter of Code by Indian Institute of Technology, Patna, KWoC by Kharagpur Open Source Society, IIT Kharagpur (KOSS), BOSS – Bountiful Open Source Summer by Coding Blocks, etc.&lt;/p&gt;

&lt;p&gt;You don’t need to wait for a particular program to start in order to contribute to open source. So it is not like when Google Summer of Code will open up applications that will be the only time you can contribute. If you know a particular tech stack you can start right NOW!! And most importantly, open-source is not something that you do for a stipend. You do it to make an impact, it should be your passion. True “open-source contributors” find the idea of creating value for people and impacting the world through their work gratifying.&lt;/p&gt;

&lt;p&gt;FOSSASIA Codeheat&lt;/p&gt;

&lt;p&gt;FOSSASIA is a non-profit organization supporting developers and makers of free and open-source technologies. FOSSASIA Codeheat is one of such programs run by it. Codeheat is a coding contest and here the mentors are developers, professors, or contributors who like to share and become a part of the FOSSASIA open source community. Codeheat is separated into two-month periods and after each period winners of the period are announced. &lt;/p&gt;

</description>
      <category>opensource</category>
      <category>beginners</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Bitcoin Technology Fundamentals - Tutorial 2 – Bitcoin Network</title>
      <author>AMITESH RAIKWAR</author>
      <pubDate>Sun, 21 Nov 2021 06:54:37 +0000</pubDate>
      <link>https://dev.to/amiteshraikwar/bitcoin-technology-fundamentals-tutorial-2-bitcoin-network-307e</link>
      <guid>https://dev.to/amiteshraikwar/bitcoin-technology-fundamentals-tutorial-2-bitcoin-network-307e</guid>
      <description>&lt;p&gt;Youtube video -  &lt;a href="https://www.youtube.com/watch?v=TyajsRb9vqQ&amp;amp;t=8s"&gt;https://www.youtube.com/watch?v=TyajsRb9vqQ&amp;amp;t=8s&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bitcoin-cryptocurrencies-cryptocurrency-cryptonews-cryptotrading-cryptocurrencies-cryptoadoption-bitcointrading-bitcoinmining-bitcoins-bitcoincash-bitcoinvalue"&gt;
  &lt;/a&gt;
  Bitcoin, #cryptocurrencies, #cryptocurrency #cryptonews #cryptotrading #cryptocurrencies #cryptoadoption #bitcointrading #bitcoinmining #bitcoins #bitcoincash #bitcoinvalue
&lt;/h1&gt;

&lt;p&gt;Bitcoin Technology Fundamentals&lt;/p&gt;

&lt;p&gt;In this video series, we will cover Basic to advanced bitcoin technology.&lt;/p&gt;

&lt;p&gt;I am Amitesh Raikwar.&lt;br&gt;
Master of Technology in Electronics &amp;amp; Communication Engineering&lt;br&gt;
Bachelor of Engineer in Electronics &amp;amp; Communication Engineering&lt;br&gt;
I also have Blockchain certification from IBM.&lt;br&gt;
Issued on: 06 JAN 2019 | Issued by: IBM&lt;br&gt;
Verify: &lt;a href="https://www.credly.com/go/Ulzl1eEi"&gt;https://www.credly.com/go/Ulzl1eEi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you wanna support our channel please donate in the below-given link of Paypal / Paytm&lt;/p&gt;

&lt;p&gt;Paypal&lt;br&gt;
:- &lt;a href="https://paypal.me/amiteshraikwar?coun"&gt;https://paypal.me/amiteshraikwar?coun&lt;/a&gt;...&lt;/p&gt;

&lt;p&gt;Paytm&lt;br&gt;
:- Rs. 100/- - &lt;a href="https://paytm.me/d-OGoZn"&gt;https://paytm.me/d-OGoZn&lt;/a&gt;&lt;br&gt;
Rs. 1001/- &lt;a href="https://paytm.me/MgL-psh"&gt;https://paytm.me/MgL-psh&lt;/a&gt;&lt;br&gt;
Rs. 5000/- &lt;a href="https://paytm.me/PR-YL5c"&gt;https://paytm.me/PR-YL5c&lt;/a&gt;&lt;/p&gt;

</description>
      <category>bitcoin</category>
      <category>blockchain</category>
      <category>cryptocurrency</category>
      <category>digitalcurrency</category>
    </item>
    <item>
      <title>Learning Svelte Part # 5</title>
      <author>Alessandro</author>
      <pubDate>Sun, 21 Nov 2021 06:54:07 +0000</pubDate>
      <link>https://dev.to/alessandrogiuzio/learning-svelte-part-5-ici</link>
      <guid>https://dev.to/alessandrogiuzio/learning-svelte-part-5-ici</guid>
      <description>&lt;h2&gt;
  &lt;a href="#arrays-amp-objects"&gt;
  &lt;/a&gt;
  Arrays &amp;amp; Objects
&lt;/h2&gt;

&lt;p&gt;Hello developers and welcome back to this series about how i am learning Svelte.&lt;br&gt;
In today's post i will explain how to update Arrays and Objects, the update happen reactively when we change values.&lt;/p&gt;

&lt;p&gt;Let’s try with an example:&lt;/p&gt;

&lt;p&gt;First of all, we’re going to declare a new variable called frameworks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
let frameworks = ["Vue", "React","Angular", "Ember"];
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we will loop trough it, in th HTML section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
{#each frameworks as framework}
  &amp;lt;li&amp;gt;{framework}&amp;lt;/li&amp;gt;
{/each}
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Essentially we are creating a new list item for each one out of our Frameworks, the result in our html file:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iXUgMFfS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cmls1iq8bsi73l1rytrm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iXUgMFfS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cmls1iq8bsi73l1rytrm.png" alt="Html result" width="289" height="146"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now to demonstrate the reactivity we are going to add another item to our list, let’s say after a 3 seconds delay.&lt;/p&gt;

&lt;p&gt;To do that we need a new function:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fwbzecCT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mlermz72ru999rq999p7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fwbzecCT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mlermz72ru999rq999p7.png" alt="Function" width="630" height="150"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We would expect now to have the last item added to our list, but it's not the case, we need another step before accomplishing the result.&lt;/p&gt;

&lt;p&gt;Svelte it's not able to catch the change yet, so it's not reflected inside the list.&lt;/p&gt;

&lt;p&gt;To make Svelte to pick up the change we only need to write another line of code on our function, that it's going to work because we will use an equal operator that it's re-assigning the value of &lt;strong&gt;frameworks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The new function: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_xo2_QSK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2de7v4twalx7t8rmlcna.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_xo2_QSK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2de7v4twalx7t8rmlcna.png" alt="frameworks" width="438" height="163"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now the result is the one expected:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NmKFfkWL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ngsx20m05ducxf46owy0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NmKFfkWL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ngsx20m05ducxf46owy0.png" alt="Adde Svelte" width="135" height="201"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another way to achieve the same result it's using the spread syntax in our variable: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VtPvcR85--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92ojyqx7fxuzksoc0uof.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VtPvcR85--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92ojyqx7fxuzksoc0uof.png" alt="spread operator" width="447" height="109"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the equivalent to using "push", also we use the equal operator.&lt;/p&gt;

&lt;p&gt;For the Objects it's the same but just a little bit easier: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hsdynTzr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7q6yztykg0bwxt180dlx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hsdynTzr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7q6yztykg0bwxt180dlx.png" alt="Object operator" width="334" height="265"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is it for my weekly update, see you next Sunday, until then you can find me on &lt;a href="https://twitter.com/giuzioale"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>How to easily install Odoo on Ubuntu</title>
      <author>Salah Elhossiny</author>
      <pubDate>Sun, 21 Nov 2021 06:46:09 +0000</pubDate>
      <link>https://dev.to/salah856/how-to-easily-install-odoo-on-ubuntu-14f4</link>
      <guid>https://dev.to/salah856/how-to-easily-install-odoo-on-ubuntu-14f4</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Run the following commands to install the main dependencies:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get update

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;git python3-pip build-essential wget
python3-dev python3-venv python3-wheel libxslt-dev
libzip-dev libldap2-dev libsasl2-dev python3-setuptools
libpng12-0 libjpeg-dev gdebi &lt;span class="nt"&gt;-y&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Download and install wkhtmltopdf :
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;wget https://github.com/wkhtmltopdf/wkhtmltopdf/
releases/download/0.12.5/wkhtmltox_0.12.5-1.trusty_amd64.
deb

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;dpkg &lt;span class="nt"&gt;-i&lt;/span&gt; wkhtmltox_0.12.5-1.trusty_amd64.deb

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you find errors in a previous command, force install the dependencies with the&lt;br&gt;
following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Now, install the PostgreSQL database:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;postgresql &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt; Configure PostgreSQL:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo&lt;/span&gt; &lt;span class="nt"&gt;-u&lt;/span&gt; postgres createuser &lt;span class="nt"&gt;--superuser&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;whoami&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Configure git :
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.name &lt;span class="s2"&gt;"Your Name"&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git config &lt;span class="nt"&gt;--global&lt;/span&gt; user.email youremail@example.com

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create an odoo-14.0 virtual environment and activate it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python3 &lt;span class="nt"&gt;-m&lt;/span&gt; venv ~/venv-odoo-14.0
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; ~/venv-odoo-14.0/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Install the Python dependencies of Odoo in venv :
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/odoo-dev/odoo/
&lt;span class="nv"&gt;$ &lt;/span&gt;pip3 &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Create and start your first Odoo instances:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;createdb odoo-test
&lt;span class="nv"&gt;$ &lt;/span&gt;python3 odoo-bin &lt;span class="nt"&gt;-d&lt;/span&gt; odoo-test –i base &lt;span class="nt"&gt;--addons-path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;addons &lt;span class="nt"&gt;--db-filter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;odoo-test&lt;span class="err"&gt;$&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Clone the Odoo code base:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; ~/odoo-dev
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/odoo-dev
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone &lt;span class="nt"&gt;-b&lt;/span&gt; 14.0 &lt;span class="nt"&gt;--single-branch&lt;/span&gt; &lt;span class="nt"&gt;--depth&lt;/span&gt; 1 https://github.com/odoo/odoo.git

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Point your browser to &lt;a href="http://localhost:8069"&gt;http://localhost:8069&lt;/a&gt; and authenticate it by using
the admin account and using admin as the password&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note
&lt;/h3&gt;

&lt;p&gt;If you need RTL support, please install node and rtlcss via the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;nodejs npm &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;span class="nb"&gt;sudo &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; rtlcss

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>opensource</category>
      <category>ubuntu</category>
      <category>python</category>
    </item>
    <item>
      <title>Some Cool GitHub Actions You Won't Believe Exists</title>
      <author>Astrodevil</author>
      <pubDate>Sun, 21 Nov 2021 06:39:01 +0000</pubDate>
      <link>https://dev.to/astrodevil/some-cool-github-actions-you-wont-believe-exists-46a3</link>
      <guid>https://dev.to/astrodevil/some-cool-github-actions-you-wont-believe-exists-46a3</guid>
      <description>&lt;p&gt;With GitHub Actions, you can automate, customize, and execute your software development workflows right in your repository. You may find, create, and distribute actions for any job you want to do, including CI/CD, and combine actions in a fully customized workflow.&lt;/p&gt;

&lt;p&gt;In this Article, I am going to discuss &lt;strong&gt;Some Cool GitHub Actions You Won't Believe Exists&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#for-bloggers"&gt;
  &lt;/a&gt;
  For Bloggers
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/marketplace/actions/hashnode-blog"&gt;Hashnode Blog&lt;/a&gt;: You can use this GitHub Action to fetch &amp;amp; display your latest blog posts From Hashnode on your profile or project README.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/marketplace/actions/medium-post"&gt;Medium Post&lt;/a&gt;: You can use this GitHub Action for posting a markdown post to Medium.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/marketplace/actions/post-to-medium-action"&gt;Post to Medium Action&lt;/a&gt;: This GitHub Action allows you to automatically create a new Medium post with Markdown or HTML. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/marketplace/actions/publish-to-dev-to"&gt;Publish to dev.to&lt;/a&gt;: You can use this GitHub Action to publish markdown files as articles on dev.to platform, with assets hosted on GitHub.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/marketplace/actions/theactiondev"&gt;TheActionDev&lt;/a&gt;: This GitHub Action allows you to write &amp;amp; maintain dev.to articles without touching the dev.to UI.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#for-content-creators"&gt;
  &lt;/a&gt;
  For Content Creators
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/marketplace/actions/youtube-videos-as-posts"&gt;YouTube-Videos-As-Posts&lt;/a&gt;: This GitHub Action update all the videos, title, and description available inside the channel into the posts in Jekyll site structure everyday automatically. No need to manually do any step after posting any new video in YouTube, it will be updated in website on next day.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/marketplace/actions/upload-episode-from-youtube-to-anchor-fm"&gt;Upload Episode from YouTube To Anchor.Fm&lt;/a&gt;: This GitHub Action will upload an audio file from a given YouTube video automatically to your Anchor.fm account. It is very useful in a scenario where you have a YouTube account and also a podcast over Spotify, Anchor.fm, Play Music, iTunes etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/marketplace/actions/ebook-convert-action"&gt;Ebook convert action&lt;/a&gt;: You can use this GitHub Action for converting eBooks in several formats. The action supports conversions between many file types i.e.: DOCX, EPUB, HTML, PDF, RTF, TXT...&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#some-more-actions"&gt;
  &lt;/a&gt;
  Some More Actions
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/marketplace/actions/push-notification-on-whatsapp"&gt;Push notification on Whatsapp&lt;/a&gt;: A GitHub action which sends a WhatsApp message when code is pushed to a repository.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/marketplace/actions/twitter-together"&gt;Twitter, together!&lt;/a&gt;: This GitHub Action uses text files to post tweets from a GitHub repository for Open Source or event maintainers who share a project Twitter account. GitHub's pull request review mechanism, rather than tweeting directly, encourages increased collaboration, Twitter engagement, and editorial input by allowing anyone to submit a tweet draft to a project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/marketplace/actions/notion2github"&gt;Notion2Github&lt;/a&gt;: Automatic synchronization from Notion to GitHub.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/marketplace/actions/profile-readme-development-stats"&gt;Profile Readme Development Stats&lt;/a&gt;: Are you an early bird or a night owl? When are you most productive during the day? What are languages you code in? This GitHub Action updates everything in your profile README.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GitHub Actions are such a productive tool that I have decided to use one of the above Actions in my GitHub while writing this blog. Could You guess? Which one.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#if-you-my-content-connect-me-on-twitter-or-supports-me-by-buying-me-a-coffee"&gt;
  &lt;/a&gt;
  If You ❤️ My Content! Connect Me on  &lt;a href="https://mobile.twitter.com/Astrodevil_"&gt;Twitter&lt;/a&gt; or Supports Me By Buying Me A Coffee☕👇🏼
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/Astrodevil"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rZDB_RRW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-orange.png" alt="Buy Me A Coffee" width="545" height="153"&gt; &lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>productivity</category>
      <category>actionshackathon</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Cryptocurrency dashboard App with Streamlit [Python]</title>
      <author>Bek Brace</author>
      <pubDate>Sun, 21 Nov 2021 06:23:48 +0000</pubDate>
      <link>https://dev.to/bekbrace/cryptocurrency-dashboard-app-with-streamlit-python-5ann</link>
      <guid>https://dev.to/bekbrace/cryptocurrency-dashboard-app-with-streamlit-python-5ann</guid>
      <description>&lt;p&gt;Streamlit is an open-source Python library that makes it easy to create and share beautiful, custom web apps for machine learning and data science.&lt;/p&gt;

&lt;p&gt;This is the 10th time I use Streamlit to create simple yet powerful web apps, but in this special tutorial, you will see how in just a few minutes you can build a cryptocurrency dashboard to present the various crypto values [in this case I retrieved data for the dataframe and charts for : &lt;strong&gt;&lt;em&gt;Bitcoin, Ethereum, Ripple &amp;amp; Bitcoin-Cash&lt;/em&gt;&lt;/strong&gt; ]  in any period of time that you determine in the code.&lt;/p&gt;

&lt;p&gt;Streamlit turns data scripts into shareable web apps in minutes; and the best part is that it's all in Python, and it's open source which means all for free. No front‑end experience required. So to create animation sliders, rendering charts/graphs, animating download bars and much more is done without any HTML/CSS/JS , just Python.&lt;/p&gt;

&lt;p&gt;To try it out, go ahead to your terminal and type:&lt;/p&gt;

&lt;p&gt;$ pip install streamlit&lt;br&gt;
then fire the server for demo apps:&lt;br&gt;
$ streamlit hello&lt;/p&gt;

&lt;p&gt;If you want to know who to create and customize this cryptocurrency dashboard application, check out the latest video tutorial on the channel :&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/5f1SLsvL8us"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Hope you enjoy it, and I will see in next video posts :)&lt;/p&gt;

&lt;p&gt;✨ Streamlit Website: &lt;a href="https://streamlit.io"&gt;https://streamlit.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🔗 Social Media&lt;br&gt;
Facebook : &lt;a href="https://www.facebook.com/bekbrace%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B"&gt;https://www.facebook.com/bekbrace​​​​&lt;/a&gt;&lt;br&gt;
Twitter : &lt;a href="https://twitter.com/BekBrace"&gt;https://twitter.com/BekBrace&lt;/a&gt;&lt;br&gt;
Instagram : &lt;a href="https://www.instagram.com/bek_brace/"&gt;https://www.instagram.com/bek_brace/&lt;/a&gt;&lt;br&gt;
GitHub profile : &lt;a href="https://github.com/BekBrace%E2%80%8B%E2%80%8B%E2%80%8B"&gt;https://github.com/BekBrace​​​&lt;/a&gt;&lt;br&gt;
Website : &lt;a href="https://bekbrace.com"&gt;https://bekbrace.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>python</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Scaling Airflow – Astronomer Vs Cloud Composer Vs Managed Workflows For Apache Airflow</title>
      <author>SeattleDataGuy</author>
      <pubDate>Sun, 21 Nov 2021 06:19:44 +0000</pubDate>
      <link>https://dev.to/seattledataguy/scaling-airflow-astronomer-vs-cloud-composer-vs-managed-workflows-for-apache-airflow-4ppb</link>
      <guid>https://dev.to/seattledataguy/scaling-airflow-astronomer-vs-cloud-composer-vs-managed-workflows-for-apache-airflow-4ppb</guid>
      <description>&lt;p&gt;Over the last 3 months, I have taken on two different migrations that involved taking companies from manually managing Airflow VMs to going over to using Cloud Composer and MWAA (Managed Workflows For Apache Airflow).&lt;/p&gt;

&lt;p&gt;These are two great options when it comes to starting your first &lt;a href="https://medium.com/coriers/airflow-vs-luigi-building-your-data-pipeline-f27c9bf5d398"&gt;Airflow&lt;/a&gt; project. They help reduce a lot of issues such as scaling workloads across workers and managing all the other various components required to run Airflow at scale.&lt;/p&gt;

&lt;p&gt;Of course, both Cloud Composer and &lt;a href="https://seattledataguy.substack.com/p/what-is-managed-workflows-for-apache"&gt;MWAA&lt;/a&gt; are services provided by two of the larger cloud providers. But there is a third option called &lt;a href="https://www.astronomer.io/"&gt;Astronomer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this article, I want to discuss some of the benefits and limitations of &lt;a href="https://cloud.google.com/composer"&gt;Cloud Composer &lt;/a&gt;and MWAA as well as discuss why Astronomer might be a better fit for many companies.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-use-a-managed-instance-of-airflow"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Why Use A Managed Instance Of Airflow?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Maintenance and management of services and databases often hold many data teams back. We already deal with daily pipeline failures due to the engineering team updating that one column or removing a table altogether without telling us.&lt;/p&gt;

&lt;p&gt;On top of that, trying to manage your Airflow instance generally means you need to have a meta database like Postgres, Redis, a logging location like S3, and several other components to manage your workers as they scale.&lt;/p&gt;

&lt;p&gt;Each of these components increases technical complexity and the opportunity for failures. If your team is small or just needs to prioritize other work, then managed versions of Airflow are often a good choice.&lt;/p&gt;

&lt;p&gt;But which managed Airflow service works best for you?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#comparing-composer-and-mwaa-to-astronomer"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Comparing Composer And MWAA to Astronomer&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;I want to start with the fact that this article may come across as very positive towards one specific product. The truth is if you're just getting started. Cloud Composer and MWAA are great.&lt;/p&gt;

&lt;p&gt;They can help set up a POC as well as an MVP without needing to set up too many external logistical components or agreements. Just click create an environment.&lt;/p&gt;

&lt;p&gt;Where you will notice Astronomer shines is as you set up more complex jobs and need more flexibility. So let's dive into some of the benefits and challenges you will face with all of these solutions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ease-of-setup"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Ease Of Set-Up&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Without a doubt. Setting up MWAA or Cloud Composer is easier than setting up Astronomer. Really.&lt;/p&gt;

&lt;p&gt;It's just a few clicks and you have a fully managed Airflow instance that is easy to scale at your fingertips. It does take about 20-30 minutes to wait for the entire system to spin up.&lt;/p&gt;

&lt;p&gt;Astronomer takes a little more lift. But personally, it's still far easier than trying to set up your own VMs to scale.&lt;/p&gt;

&lt;p&gt;Overall, what you gain in ease of set-up you will lose in customizability.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-you-lose-in-ease-of-setup-you-gain-in-customizability"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What You Lose In Ease Of Set-Up You Gain In Customizability&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Solutions are all about trade-offs. What Cloud Composer and MWAA give you in ease of set-up they take away in the difficulty of editing much more than your Python libraries.&lt;/p&gt;

&lt;p&gt;I found this out first hand as I migrated a project over to Cloud Composer. My first question. How do I update my docker image?&lt;/p&gt;

&lt;p&gt;Of course, there were other issues such as adding in drivers for older databases, and other plugins that were less straightforward. What might seem like an easy to solve problem like installing a driver can become very taxing and require complex workarounds.&lt;/p&gt;

&lt;p&gt;At the end of the day your team will need to assess their overall goals in order to know whether they need a lot of flexibility or need to deploy DAGs fast.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#docker-image-limitations"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Docker Image Limitations&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;One of the biggest challenges you will run into when you are working with Cloud Composer or MWAA is you won't be able to go into the docker image that is being created and edited.&lt;/p&gt;

&lt;p&gt;This is fine if your DAGs are very simple and don't require complex drivers or external dependencies. However, as soon as your DAGs require complex technical dependencies you will likely have to perform a lot of workarounds.&lt;/p&gt;

&lt;p&gt;For example, I saw a StackOverflow answer where a developer had to go to the cluster running the VM and manually force certain components to run on it. Which kind of defeats the purpose of Docker if you now have a manual step you will need to remember in future deployments.&lt;/p&gt;

&lt;p&gt;Now let's compare that to Astronomer.&lt;/p&gt;

&lt;p&gt;How would you customize the image of your Docker image?&lt;/p&gt;

&lt;p&gt;Easy, here is an&lt;a href="https://www.astronomer.io/docs/cloud/stable/develop/customize-image"&gt; article&lt;/a&gt; on the topic. Yes, Astronomer has a steeper learning curve, but the trade-off is that you will have the ability to perform much more complex integrations with other systems to your Airflow instance. Like integrating with DBT or including an IBM driver file.&lt;/p&gt;

&lt;p&gt;All easy to do.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#executor-limitations"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Executor Limitations&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;When it comes to how you run your Airflow instance, &lt;a href="https://airflow.apache.org/docs/apache-airflow/stable/executor/index.html"&gt;Executors&lt;/a&gt; are a key component in determining how jobs are managed. Choosing the wrong Executor means your system may fail to scale and it won't be able to run your jobs fast enough.&lt;/p&gt;

&lt;p&gt;The problem is in some cases you might find that you want to use a very specific Executor. Astronomer lets you use the Local, Celery and Kubernetes executors. In comparison MWAA only supports the &lt;a href="https://airflow.apache.org/docs/apache-airflow/stable/executor/celery.html"&gt;Celery Executor&lt;/a&gt; and Cloud Composer also has many &lt;a href="https://cloud.google.com/composer/docs/concepts/airflow-configurations"&gt;blocked configurations&lt;/a&gt;. This limitation of executors has become a major pain-point for some companies who are having to create massive work-arounds in order to run their jobs the way they need to with their managed service.&lt;/p&gt;

&lt;p&gt;In the end, this can be very limiting depending on how you want to deploy your DAGs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#astronomer-works-closely-with-airflow"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Astronomer Works Closely With Airflow&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;To also add to the many benefits of Astronomer. I will say that they focus on Airflow a lot. They contribute heavily to the Airflow code base as well as work closely with the Airflow team in general.&lt;/p&gt;

&lt;p&gt;This leads to many of the Employees being experts in Airflow. They work heavily to understand the current needs of their end-users and truly have a great understanding of best practices when it comes to Airflow. The difference is that Astronomer is Airflow only.&lt;/p&gt;

&lt;p&gt;They aren't looking to sell you on S3 or Cloud Storage. Instead, they want to figure out how to best deliver Airflow as a service.&lt;/p&gt;

&lt;p&gt;In contrast, AWS and GCP focus on everything. Meaning their product will always lag. This is notable as MWAA is still back on 2.0.1 while &lt;a href="https://airflow.apache.org/blog/airflow-2.2.0/"&gt;Airflow had been updated to 2.2.0&lt;/a&gt;. which Astronomer can support.&lt;/p&gt;

&lt;p&gt;If you call an AWS solutions architect to give you advice on how to better set up your MWAA, then you might just get generalized advice. It's hard to be a master of every tool and solution AWS has to offer. Again, compared to Astronomer that focuses only on Airflow.&lt;/p&gt;

&lt;p&gt;Astronomer is always step in toe with Airflow updates and they are usually ready to utilize the most recent version of Airflow almost immediately.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-what"&gt;
  &lt;/a&gt;
  &lt;strong&gt;When To Use What&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;MWAA and Cloud Composers are great solutions when you have pretty simple DAGs that you want to build. You don't want to involve too many extra components and it's honestly a great place to start your Airflow journey. If you're trying to build use for Airflow or just trying to prove that it works, then go ahead, build it on Composer or MWAA.&lt;/p&gt;

&lt;p&gt;Of course, more than likely, as your company grows and you have more complex needs, you might find yourself needing to migrate to Astronomer. Also, if you work in an industry that has tighter regulations, requirements around private PyPI setups, or if it's important to have more fine-grained access and controls then Astronomer shines here as well.&lt;/p&gt;

&lt;p&gt;I am a little surprised that AWS and GCP have made it so difficult to update your Docker Image or customize too much in terms of launching your Airflow instance. Perhaps they just want to make sure the tools are just as optimal as possible.&lt;/p&gt;

&lt;p&gt;Also, it is just easier to launch.&lt;/p&gt;

&lt;p&gt;Finding the right version of managed Airflow doesn't have to be hard. Start by looking at what use cases you have now, and what the future holds. You should be able to easily start with a tool like Cloud Composer and then eventually switch to Astronomer. You will lose out on some of the best practices. But on the flip side, you will already have some of your use cases set up and then can work with their team to improve your DAGs as you go.&lt;/p&gt;

&lt;p&gt;If you enjoyed this article, then please check out these articles and videos:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://seattledataguy.substack.com/p/how-to-improve-your-data-analytics"&gt;How To Improve Your Data Analytics Strategy For 2022 - Reducing Costs And Improving Insights&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=uEPCxBaRf6A"&gt;Data Engineer Vs Analytics Engineer Vs Analyst&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.theseattledataguy.com/why-migrate-to-the-modern-data-stack-and-where-to-start/"&gt;Why Migrate To The Modern Data Stack And Where To Start&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://youtube.com/watch?v=s40MptE20Tc&amp;amp;t=1s"&gt;5 Great Data Engineering Tools For 2021 -- My Favorite Data Engineering Tools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=kSt9NV-qZkc&amp;amp;t=1s"&gt;4 SQL Tips For Data Scientists&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logitanalytics.com/what-are-the-benefits-cloud-data-warehousing-and-why-you-should-migrate/"&gt;What Are The Benefits Of Cloud Data Warehousing And Why You Should Migrate&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>aws</category>
      <category>python</category>
      <category>datascience</category>
    </item>
  </channel>
</rss>
