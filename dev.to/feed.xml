<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Documenting Express REST APIs with OpenAPI and JSDoc</title>
      <author>Essential Randomness</author>
      <pubDate>Sun, 18 Jul 2021 21:25:06 +0000</pubDate>
      <link>https://dev.to/essentialrandom/documenting-express-rest-apis-with-openapi-and-jsdoc-m68</link>
      <guid>https://dev.to/essentialrandom/documenting-express-rest-apis-with-openapi-and-jsdoc-m68</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;As usual, this article isn't meant as an in-depth guide, as much as a documentation of the what, why, and how of certain architectural choices. If you're trying to achieve the same thing and need help, leave a comment!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#goals-amp-constraints"&gt;
  &lt;/a&gt;
  Goals &amp;amp; Constraints
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;To document &lt;a href="https://www.bobaboard.com"&gt;BobaBoard&lt;/a&gt;'s REST API.&lt;/li&gt;
&lt;li&gt;Standardize (and document) both the parameters and the return values of various endpoints.&lt;/li&gt;
&lt;li&gt;The documentation should be as close as possible to the source code it describes.&lt;/li&gt;
&lt;li&gt;The documentation should be served through a &lt;a href="https://docusaurus.io/"&gt;docusaurus&lt;/a&gt; instance hosted on a different server.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#final-result"&gt;
  &lt;/a&gt;
  Final Result
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#architecture"&gt;
  &lt;/a&gt;
  Architecture
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8KZvHyxI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3f5exhtdj0qzi71nkq27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8KZvHyxI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3f5exhtdj0qzi71nkq27.png" alt="How everything interacts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n-lbeJtJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1c30ttwqldflprww9zt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n-lbeJtJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1c30ttwqldflprww9zt.png" alt="The BobaBoard Rest API Documentation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to"&gt;
  &lt;/a&gt;
  How To
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#packages-used"&gt;
  &lt;/a&gt;
  Packages used
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/swagger-jsdoc"&gt;SwaggerJSDoc&lt;/a&gt;: to turn JSDocs into the final OpenAPI spec (served at &lt;code&gt;/open-api.json&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/redocusaurus"&gt;Redocusaurus&lt;/a&gt;: to embed &lt;a href="https://github.com/Redocly/redoc"&gt;Redoc&lt;/a&gt; into Docusaurus. There are other options for documentation, like any OpenAPI/Swagger compatible tool (e.g. &lt;a href="https://swagger.io/tools/swagger-ui/"&gt;SwaggerUI&lt;/a&gt;), but Redoc is the nicest feeling one.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#configuration-express"&gt;
  &lt;/a&gt;
  Configuration (Express)
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#openapi-options"&gt;
  &lt;/a&gt;
  OpenAPI Options
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;definition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;openapi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3.1.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;BobaBoard's API documentation.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0.0.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="c1"&gt;// Note: indenting the description will cause the markdown not to format correctly.&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
# Intro
Welcome to the BobaBoard's backend API. This is still a WIP.

# Example Section
This is just to test that sections work. It will be written better later.
        `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;contact&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ms. Boba&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://www.bobaboard.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ms.boba@bobaboard.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;servers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:4200/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Development server&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;// These are used to group endpoints in the sidebar&lt;/span&gt;
    &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/posts/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;All APIs related to the /posts/ endpoints.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/boards/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;All APIs related to the /boards/ endpoints.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;APIs whose documentation still needs work.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;// Special Redoc section to control how tags display in the sidebar.&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x-tagGroups&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;general&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/posts/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/boards/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="c1"&gt;// Which paths to parse the API specs from.&lt;/span&gt;
  &lt;span class="na"&gt;apis&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./types/open-api/*.yaml&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./server/*/routes.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#open-api-endpoint"&gt;
  &lt;/a&gt;
  Open API endpoint
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;swaggerJsdoc&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;swagger-jsdoc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;specs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;swaggerJsdoc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/open-api.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;specs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#type-spec"&gt;
  &lt;/a&gt;
  Type Spec
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;/types/open-api/contribution.yaml&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Note the /components/schemas/[component name] hierarchy.&lt;/span&gt;
&lt;span class="c1"&gt;# This is used to refer to these types in the endpoint&lt;/span&gt;
&lt;span class="c1"&gt;# documentation.&lt;/span&gt;
&lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;schemas&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Contribution&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;object&lt;/span&gt;
      &lt;span class="na"&gt;properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;post_id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
          &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;uuid&lt;/span&gt;
        &lt;span class="na"&gt;parent_thread_id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
          &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;uuid&lt;/span&gt;
        &lt;span class="na"&gt;parent_post_id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
          &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;uuid&lt;/span&gt;
        &lt;span class="na"&gt;secret_identity&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="s"&gt;$ref&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;#/components/schemas/Identity"&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;post_id&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;parent_thread_id&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;secret_identity&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#endpoint-documentation"&gt;
  &lt;/a&gt;
  Endpoint Documentation
&lt;/h3&gt;

&lt;p&gt;This should be repeated for every API endpoint you wish to document.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * @openapi
 * posts/{postId}/contribute:
 *   post:
 *     summary: Replies to a contribution
 *     description: Posts a contribution replying to the one with id {postId}.
 *     tags:
 *       - /posts/
 *       - todo
 *     parameters:
 *       - name: postId
 *         in: path
 *         description: The uuid of the contribution to reply to.
 *         required: true
 *         schema:
 *           type: string
 *           format: uuid
 *     responses:
 *       403:
 *         description: User is not authorized to perform the action.
 *       200:
 *         description: The contribution was successfully created.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 contribution:
 *                   $ref: "#/components/schemas/Contribution"
 *                   description: Finalized details of the contributions just posted.
 */&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/:postId/contribute&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// The endpoint code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configuration-docusaurus"&gt;
  &lt;/a&gt;
  Configuration (Docusaurus)
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;docusaurus.config.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// other config stuff&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
  &lt;span class="na"&gt;presets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="c1"&gt;// other presets,&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;redocusaurus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;specs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;routePath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;docs/engineering/rest-api/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="c1"&gt;// process.env.API_SPEC is used to serve from localhost during development&lt;/span&gt;
            &lt;span class="na"&gt;specUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;API_SPEC&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
              &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[prod_server_url]/open-api.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="na"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// See options at https://github.com/Redocly/redoc#redoc-options-object&lt;/span&gt;
          &lt;span class="na"&gt;redocOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;expandSingleSchemaField&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;expandResponses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;200&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;pathInMiddlePanel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;requiredPropsFirst&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;hideHostname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>express</category>
      <category>documentation</category>
      <category>javascript</category>
      <category>docusaurus</category>
    </item>
    <item>
      <title>NextJS With Redux</title>
      <author>YossefMohamed</author>
      <pubDate>Sun, 18 Jul 2021 20:54:39 +0000</pubDate>
      <link>https://dev.to/yossefmohamed/nextjs-with-redux-eeg</link>
      <guid>https://dev.to/yossefmohamed/nextjs-with-redux-eeg</guid>
      <description>&lt;p&gt;Hey Guys,&lt;br&gt;
I need a help :((&lt;br&gt;
How can I use Redux With Nextjs , Is it recommended to use with the pattern of the NextJs ??&lt;br&gt;
If there's any projects with NextJs and Redux can you give them to me to review the usage of the redux with next &lt;br&gt;
Thanks in advance &amp;lt;3&lt;/p&gt;

</description>
      <category>help</category>
      <category>nextjs</category>
      <category>redux</category>
      <category>react</category>
    </item>
    <item>
      <title>JSX ! </title>
      <author>Mayank Kumar</author>
      <pubDate>Sun, 18 Jul 2021 20:39:59 +0000</pubDate>
      <link>https://dev.to/mayank0508/jsx-4cfh</link>
      <guid>https://dev.to/mayank0508/jsx-4cfh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#so-first-of-all-let-me-tell-you-what-actually-is-a-jsx-"&gt;
  &lt;/a&gt;
  So first of all let me tell you what actually is a &lt;em&gt;JSX&lt;/em&gt; !
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#a-jsxjavascript-xml-is-a-syntax-extension-to-javascript-it-is-used-with-react-to-describe-what-the-ui-should-look-like-jsx-may-remind-you-of-a-template-language-but-it-comes-with-the-full-power-of-javascript"&gt;
  &lt;/a&gt;
  A JSX(JavaScript XML) is a syntax extension to JavaScript. It is used with React to describe what the UI should look like. JSX may remind you of a template language, but it comes with the full power of JavaScript.
&lt;/h4&gt;

&lt;p&gt;Here is an Example :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;world&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is pretty similar to HTML syntax. 🐱‍👤&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xCwbMS0B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gyn697ikcp3xwhxowofw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xCwbMS0B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gyn697ikcp3xwhxowofw.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-need-jsx-"&gt;
  &lt;/a&gt;
  Why do we need JSX ??
&lt;/h2&gt;

&lt;p&gt;React embraces the fact that rendering logic is inherently coupled with other UI logic: how events are handled, how the state changes over time, and how the data is prepared for display.&lt;/p&gt;

&lt;p&gt;Instead of artificially separating technologies by putting &lt;em&gt;markup and logic in separate files&lt;/em&gt;, React separates concerns with loosely coupled units called &lt;strong&gt;“components”&lt;/strong&gt; that contain both. ~ &lt;em&gt;React 😎&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This is what was said by react developers when it was first announced, in my opinion this is a very useful syntax extension to JavaScript, it has made things very easy to configure and manage in a very large code base.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It makes it easier for us to create templates.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-main-difference-between-html-and-jsx"&gt;
  &lt;/a&gt;
  The main difference between HTML and JSX 🤯
&lt;/h2&gt;

&lt;p&gt;1)  HTML is a Hypertext Markup Language, the standard markup   language for documents designed to display and view on the web in a web browser.&lt;/p&gt;

&lt;p&gt;2) JSX JSX (JavaScript + XML) is an extension of JavaScript that permits you to write down HTML directly within JavaScript&lt;/p&gt;

&lt;p&gt;3) HTML elements have attributes where as JSX elements have props.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#attributes-in-jsx"&gt;
  &lt;/a&gt;
  Attributes in JSX
&lt;/h2&gt;

&lt;p&gt;JSX allows us to use attributes with the HTML elements just like we do with normal HTML. But instead of the normal naming convention of HTML, JSX uses camelCase convention for attributes &lt;/p&gt;

&lt;p&gt;&lt;em&gt;THIS WAS A BASIC PREVIEW OF WHAT IS THE MAIN USE OF JSX, IF YOU WANT TO GO IN DEPTH OF THIS TOPIC THEN CHECK OUT THE FOLLOWING BLOG&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/docs/introducing-jsx.html"&gt;https://reactjs.org/docs/introducing-jsx.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Bonus Meme 😂&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yDZYSMbp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/izunz3s5le0v266rdqvk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yDZYSMbp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/izunz3s5le0v266rdqvk.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Happy Coding 🚀&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>html</category>
    </item>
    <item>
      <title>A CSS-only reaction component using emoji</title>
      <author>Temani Afif</author>
      <pubDate>Sun, 18 Jul 2021 20:35:45 +0000</pubDate>
      <link>https://dev.to/afif/a-css-only-reaction-component-using-emoji-28i4</link>
      <guid>https://dev.to/afif/a-css-only-reaction-component-using-emoji-28i4</guid>
      <description>&lt;p&gt;Like &lt;a href="https://dev.to/afif/series/13564"&gt;star rating&lt;/a&gt;, reactions is something widely used in many websites so here I am with my own implementation: A CSS-only reaction component that works with emojis or any kind of custom icons. &lt;/p&gt;

&lt;p&gt;No need to bother yourself dealing with SVG or PNG images. Grab you favorite emoji and build your own component.&lt;/p&gt;

&lt;p&gt;See it in play:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/NWjgqWK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In the above you will find no &lt;code&gt;@keyframes&lt;/code&gt;. All the animations are done using only CSS transition&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h2&gt;

&lt;p&gt;The above rely on the very basic HTML code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"r1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"r1"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"react"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;data-icon=&lt;/span&gt;&lt;span class="s"&gt;"💯"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Nothing complex. An &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; with its corresponding &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; and a &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; element having our Emoji as data attribute. That's it!&lt;/p&gt;

&lt;p&gt;All the magic is done using CSS and we have different layers illustrated like below:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"r1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"r1"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"react"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  ::before [1]
  &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;data-icon=&lt;/span&gt;&lt;span class="s"&gt;"💯"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ::before [2]
    ::after [3]
  &lt;span class="nt"&gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
  ::after [4]
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kRReJXh7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1anl77vd11djvpx5s5t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kRReJXh7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1anl77vd11djvpx5s5t.png" alt="reactions layers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All the layers are above each other thanks to the use of &lt;code&gt;display:inline-grid&lt;/code&gt; and &lt;code&gt;grid-area:1/1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vBBfun6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m1r3byqgb9fksjvggvg4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vBBfun6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m1r3byqgb9fksjvggvg4.png" alt="All layers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[1]&lt;/strong&gt; is a basic circle created like below:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.react&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;orange&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--r&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Its transition is a scale one (from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt;) then a &lt;code&gt;border-width&lt;/code&gt; (from &lt;code&gt;calc(var(--r)/2)&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt;)&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;transform&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;border-width&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;--r&lt;/code&gt; is the variable that will control all the sizing of our component. Yes it's a scalable one! You only need to adjust one variable to control the overall size.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[2]&lt;/strong&gt; is our emoji. Nothing complex here:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.react&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data-icon&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.6&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--r&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The fun start with &lt;strong&gt;[3]&lt;/strong&gt; and &lt;strong&gt;[4]&lt;/strong&gt;. Those small circles are built using multiple &lt;code&gt;radial-gradient&lt;/code&gt;. The difference between [3] and [4] is the circle size and a small rotation to avoid the overlap:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.react&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.react&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--r&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;-2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;--c1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;red&lt;/span&gt;    &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;#0000&lt;/span&gt; &lt;span class="m"&gt;60%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;--c2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;radial-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;orange&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;#0000&lt;/span&gt; &lt;span class="m"&gt;60%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--c1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--c1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--c1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--c1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--c2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--c2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--c2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--c2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--r&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--r&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
  &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--r&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--r&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--r&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--r&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--r&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--r&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--r&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--r&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt;  &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;0.707&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;0.707&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt;  &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;0.707&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt;  &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt;  &lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;0.707&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background-repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;no-repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.react&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--r&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--r&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;60deg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Each one is made with 8 circles (4 red &amp;amp; 4 orange) placed in a circular shape. The Math-folks will notice the value of &lt;code&gt;sin()&lt;/code&gt; and &lt;code&gt;cos()&lt;/code&gt; for the angles &lt;code&gt;N*45deg&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Their transition is a scale one (from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt;) then a &lt;code&gt;background-size&lt;/code&gt; one (from the value defined above to &lt;code&gt;0&lt;/code&gt;) combined with &lt;code&gt;opacity&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;transform&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;opacity&lt;/span&gt;   &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;4&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;9&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;background-size&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;9&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Finally we have the transition applied to the &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; element that will affect both &lt;strong&gt;[2]&lt;/strong&gt; and &lt;strong&gt;[3]&lt;/strong&gt;. We have the filter one that allow us to have the grey coloration that transition to the original color of the emoji and a scale one.&lt;/p&gt;

&lt;p&gt;For the scale one I am using a magic &lt;code&gt;cubic-bezier&lt;/code&gt; function to create a transtion from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
     &lt;span class="nt"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
     &lt;span class="nt"&gt;transform&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="nt"&gt;cubic-bezier&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;26&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;67&lt;/span&gt;&lt;span class="o"&gt;,.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;26&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;67&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;I am detailing this technique in the below post:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/this-is-learning" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SV2c6g9T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--TcsNlUvs--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/3314/dc73eb74-08f9-4592-b599-c08f2bb14b4d.png" alt="This is Learning"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSZolrIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5k2bquNj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/577896/343fde9f-609b-419b-95d1-07d16b320a37.png" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/this-is-learning/advanced-css-animation-using-cubic-bezier-nho" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Advanced CSS Animation Using cubic-bezier()&lt;/h2&gt;
      &lt;h3&gt;Temani Afif for This is Learning ・ May 19 ・ 12 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codepen&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;I am also adding a shake effect on hover where I am using another &lt;code&gt;cubic-bezier&lt;/code&gt; detailed in the same post.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;transition&lt;/span&gt;&lt;span class="nd"&gt;:transform&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;25&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="nt"&gt;cubic-bezier&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;400&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;-400&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h3&gt;

&lt;p&gt;All you have to do is to pick your emoji or an icon from Font Awesome and adjust the &lt;code&gt;--r&lt;/code&gt; to control the size.&lt;/p&gt;

&lt;p&gt;I made some trivial changes to the initial code to be able to use Font Awesome icons as we don't need to define &lt;code&gt;content&lt;/code&gt; since the CSS of Font Awesome will do it for us.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/gOWRLGN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;PS: The idea was inspired from a Stack Overflow question I answered a while ago: &lt;a href="https://stackoverflow.com/a/54600583/8620333"&gt;How to make a sparkling button animation?&lt;/a&gt;. It's the same effect with few a adjustments to my old code.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>2 Simple ways you can truncate text using CSS</title>
      <author>Kritika</author>
      <pubDate>Sun, 18 Jul 2021 19:54:17 +0000</pubDate>
      <link>https://dev.to/kritikapattalam/2-simple-ways-you-can-truncate-text-using-css-1n18</link>
      <guid>https://dev.to/kritikapattalam/2-simple-ways-you-can-truncate-text-using-css-1n18</guid>
      <description>&lt;p&gt;As part of this blog lets see two ways in which you can truncate a text using CSS&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-truncate-a-single-line-text-using-ellipsis"&gt;
  &lt;/a&gt;
  1) Truncate a single line text using ellipsis
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.truncate-ellipsis {
  width: 350px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  display: block;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With text-overflow , ellipsis can be applied to single line of text, provided the following conditions are met. [ For truncating after multiple lines, keep reading  😉 ].&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the element  must have 
&amp;gt; width , max-width or flex-basis(if using flex)&lt;/li&gt;
&lt;li&gt;the element must have property 
&amp;gt; word-wrap: nowrap
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;overflow&lt;/em&gt; property should have &lt;em&gt;value other than visible&lt;/em&gt; . 
&amp;gt; eg: overflow: hidden;&lt;/li&gt;
&lt;li&gt;must have display value as &lt;em&gt;block, inline-block&lt;/em&gt; or any other equivalent such as flex item etc.  display:inline will not work here.
&amp;gt; eg: display: inline-block;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Did you know that you can reverse the direction of the truncation using the CSS direction property?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;direction: rtl; //show from right to left
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The direction property will truncate the text in the start of the line and show the end of the paragraph instead. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7VUvxJWw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efla7iem8u1o556wc9xm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7VUvxJWw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efla7iem8u1o556wc9xm.png" alt="Truncate text single line with direction right to left"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-truncate-text-after-multiple-lines-using-lineclamp"&gt;
  &lt;/a&gt;
  2) Truncate text after multiple lines using line-clamp
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.truncate-line-clamp {
  display: -webkit-box;
  -webkit-line-clamp: 4;
  -webkit-box-orient: vertical; 
  width: 250px;
  overflow: hidden;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With line-clamp text can be truncated after multiple lines, whats even more interesting is you can truncate it by specifying the line number where you want to truncate it.&lt;br&gt;
eg: -webkit-line-clamp: 3; will truncate start truncating the text from the third line.&lt;/p&gt;

&lt;p&gt;Below are the list of conditions which should be met in order to make this work.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;display&lt;/em&gt; property should be &lt;em&gt;webkit-box&lt;/em&gt;
&amp;gt; eg: display: -webkit-box;&lt;/li&gt;
&lt;li&gt;webkit-line-clamp value should be specified , value should be greater than 0.
&amp;gt; eg: webkit-line-clamp: 3;&lt;/li&gt;
&lt;li&gt;  box-orient should be set to vertical 
&amp;gt; eg: -webkit-box-orient: vertical;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;overflow&lt;/em&gt; property should have &lt;em&gt;value hidden&lt;/em&gt; . 
&amp;gt; eg: overflow: hidden;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Browser Compatability:&lt;/strong&gt; webkit-line-clamp at the moment is not supported in IE.&lt;br&gt;
For detailed information refer:  &lt;a href="https://caniuse.com/?search=webkit-line-clamp"&gt;caniuse.com&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#codepen"&gt;
  &lt;/a&gt;
  Codepen:
&lt;/h3&gt;

&lt;p&gt;The below codepen will show you a live preview of the above two methods will look.&lt;br&gt;
&lt;a href="https://codepen.io/kpattalam/pen/jOBXvyg"&gt;https://codepen.io/kpattalam/pen/jOBXvyg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kpattalam/embed/jOBXvyg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references-mdn-docs"&gt;
  &lt;/a&gt;
  References - MDN docs
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-line-clamp"&gt;webkit-line-clamp&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/white-space"&gt;white-space: nowrap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/text-overflow"&gt; text-overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lets connect on  &lt;a href="https://twitter.com/KritikaPattalam"&gt;Twitter&lt;/a&gt;  | &lt;a href="https://www.linkedin.com/in/kritika-p-296739155/"&gt;LinkedIn&lt;/a&gt; for more web development related chats.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>Becoming a Better Programmer with a Chronometer</title>
      <author>Alexandro Castro</author>
      <pubDate>Sun, 18 Jul 2021 19:48:59 +0000</pubDate>
      <link>https://dev.to/alexcastrodev/becoming-a-better-programmer-with-a-chronometer-4fe8</link>
      <guid>https://dev.to/alexcastrodev/becoming-a-better-programmer-with-a-chronometer-4fe8</guid>
      <description>&lt;p&gt;An article for people who want to become a better developer&lt;br&gt;
You care about code. You're passionate about programming. You're the kind of developer who likes to craft truly great software. And you're reading this article because you want to do it even better. Good call. 👌&lt;/p&gt;




&lt;p&gt;3 Months ago, april, 2021, I started a project called Chronometer React, to help my brazilian friend to improve his ability to code, and learn about some tools like: Contexts, Hooks and TypeScript. We had started this small project, and about ~4 days it was done. Great! &lt;br&gt;
What we made? A Simple UI that just start, pause, and reset chronometer.&lt;/p&gt;

&lt;p&gt;This small project were enough to understand some concepts, and we realize our aim.&lt;br&gt;
Should we improve this project, even though we have accomplish our aim?&lt;/p&gt;

&lt;p&gt;It depends. In my case, this is just one more hundreds project i've made. but if you need to build a good project, good enough to impress a Technical Leader who's looking for a awesome developer!? or you are just trying your first job? or do you have a loadsa unfinished projects ?&lt;/p&gt;




&lt;p&gt;Pretty early in any programmer's career comes the realisation that there's more to being a great coder than a simple understanding of syntax and a mastery of basic design. The awesome programmers, those productive people who craft beautiful code and work effectively with other people, know far more.&lt;/p&gt;




&lt;p&gt;I realized that for me it was not enough. So, i start to improve this project, coding some features like:&lt;br&gt;
Offline first with Service workers (PWA)&lt;br&gt;
Implement a editable table with laps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/AlexcastroDev/chronometer-react"&gt;https://github.com/AlexcastroDev/chronometer-react&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Maybe you think… &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Well, okay. good job! You've dedicated too much time in it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;3 months after built it, i realized that it's not enough for me. Let's improve it more! But how should we ?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First - Being an user&lt;/strong&gt;&lt;br&gt;
 I stop using my Apple Chronometer, and started to use my chronometer. Guess what i found ? A interesting bug !&lt;/p&gt;

&lt;p&gt;If you don't know, Google Chromer 57+ [and others navigation], stop running workers like setInterval when tab is inactive, just to optimize CPU usage.&lt;/p&gt;

&lt;p&gt;And it make all sense, of course! We needn't this to increase second a second.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second - Remove useless logic, and refact.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If useless, remove it so.&lt;br&gt;
Remove useless logic, and refact it. &lt;/p&gt;

&lt;p&gt;In this case, i chose [It's opcional, you can do it in your own project] to build a package just to handle with Chronometer basic functions, and just consume it in my App.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/castroclock"&gt;https://www.npmjs.com/package/castroclock&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And after publish my package in NPM, i wrote all documentation in portuguese and english [It's opcional too, but a good package have support and must be understandable]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://alexcastrodev.github.io/castroclock-documentation/#/"&gt;https://alexcastrodev.github.io/castroclock-documentation/#/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Third - Write tests&lt;/strong&gt;&lt;br&gt;
I noticed that some functions are dumbly and stupid wrong. Like start chronometer twice, or pause / reset, before start. &lt;/p&gt;

&lt;p&gt;Look at the tests. Test successul and exceptions. Work out how to add a new unit test, and how to add a new test file to the suite. How do the tests get run? A great trick is to try adding a single, one-line, failing test. Does the test suite immediately fail? This smoke test proves that the tests are not actively being ignored. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;You should learn about TDD well.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fourth - Learn by Doing&lt;/strong&gt;&lt;br&gt;
You can continue reading article as you like about the theory of riding a bicycle. You can study bicycles, take them apart, reassemble them, investigate the physics and engineer‐ ing behind them. &lt;/p&gt;

&lt;p&gt;But you may as well be learning to ride a fish. Until you get on a bicycle, put your feet on the pedals and try to ride it for real, you'll never advance. &lt;br&gt;
You'll learn more by falling off a few times than from days of reading about how to balance. &lt;/p&gt;

&lt;p&gt;It's the same with code. Reading code, Unit test, End2End tests, User expericence, call stacks and etc, will only get you so far. You can bacome a [better] developer by getting on it, by trying to ride it, by making mistakes and falling off. &lt;/p&gt;

&lt;p&gt;Don't let inactivity prevent you from moving on. Don't erect an intellectual barrier to prevent you from working on the code.&lt;/p&gt;

&lt;p&gt;Don't be so apathetic ! doesn't matter your carrear, apathetic people are who they are, just apathetic. &lt;br&gt;
If you think that something can be better, go ahead and become a great professional.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Insights - How i became a better developer with a chronometer app ?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I wrote my first english article&lt;/li&gt;
&lt;li&gt;I wrote my first documentation ( Multi language )&lt;/li&gt;
&lt;li&gt;I wrote my package with documentation&lt;/li&gt;
&lt;li&gt;I improve my technical skills to test codes&lt;/li&gt;
&lt;li&gt;I improve my technical skills to refact code&lt;/li&gt;
&lt;li&gt;I improve my technical skills to write in english&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;I hope to inpire you to be better, have a nice day&lt;/strong&gt; 👋&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>node</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Passing Data Between React Components</title>
      <author>Thomas(Tripp) White </author>
      <pubDate>Sun, 18 Jul 2021 19:35:21 +0000</pubDate>
      <link>https://dev.to/turpp/passing-data-between-react-components-af7</link>
      <guid>https://dev.to/turpp/passing-data-between-react-components-af7</guid>
      <description>&lt;p&gt;React is a JavaScript library for building user interfaces. React utilizes reusable components. This allows you to reuse your code, control how the components update, and control how they communicate with each other.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#props"&gt;
  &lt;/a&gt;
  Props
&lt;/h2&gt;

&lt;p&gt;Props allows us to pass data between React components. We can pass callback functions and other pieces of data. We can attach multiple props to each component. Passing props and accessing them is very simple. Lets look at some examples.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Greeting&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above we have a functional component &lt;code&gt;Home&lt;/code&gt; that renders a second function component &lt;code&gt;Greeting&lt;/code&gt;. Right now this is just a simple render. There is no passing of information between the two components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parents-and-children"&gt;
  &lt;/a&gt;
  Parents and Children
&lt;/h3&gt;

&lt;p&gt;To understand how props work, we must first understand the relationship between parent and children components. React allows you to pass props but only down the family tree. A parent can only pass information to the children. Children can not pass props up to the parent. This is the one way data flow of React. It will always pass props down the component hierarchy unless your use a separate state manager like Redux. Redux is a topic for a different article.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#passing-props"&gt;
  &lt;/a&gt;
  Passing Props
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      //passing name prop to greeting component
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Greeting&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="na"&gt;Tripp&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Greeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    //using prop passed down
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hi there &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to pass a prop to a component all we have to do is name the prop and set it equal to some value. In the example above, we are passing a prop called name that is equal to a string. Passing a prop gives us access to the information in our Greeting component. To access the prop in our functional component we use &lt;code&gt;props.name&lt;/code&gt;. (If this was a  Class component we would use &lt;code&gt;this.props.name&lt;/code&gt;. &lt;code&gt;props.(name of prop being passed)&lt;/code&gt; will give us access to our prop just like an argument of a function. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#callbacks"&gt;
  &lt;/a&gt;
  Callbacks
&lt;/h3&gt;

&lt;p&gt;Remember that React is a one way data flow. We can only pass props from parents to children. What if we have some logic that happens in our children component and we want it to change data in our parent component? We can do this by using callback functions. Props allows us to not only pass data but we can also pass functions as a prop. When we use this callback function in our children component it can then preform actions that will effect our parent component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
   &lt;span class="c1"&gt;//useState establishes state in a functional component&lt;/span&gt;
   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;showSecret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShowSecret&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Greeting&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="na"&gt;Tripp&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt; &lt;span class="na"&gt;displaySecrete&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setShowSecret&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* will show a message once state is true */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;showSecret&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Secret: You just went Against the Flow&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Greeting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hi there &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/&amp;gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/*clicking button will update state of the parent component and show the secret in the parent component */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;displaySecrete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Show&lt;/span&gt; &lt;span class="nx"&gt;Secret&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;)
&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;React has a one way data flow. Parent components pass props down to its children. Children components can not pass props up to their parent component.&lt;/li&gt;
&lt;li&gt;The Passing of callback functions as a prop allows children components to make changes in their parent component. &lt;/li&gt;
&lt;li&gt;When ever a prop is updated it will trigger a re render. &lt;/li&gt;
&lt;li&gt;Pass in props when you initialize your component. &lt;code&gt;&amp;lt;Greeting name=‘Tripp’ /&amp;gt;&lt;/code&gt; The Prop is called name with the value of ‘Tripp’&lt;/li&gt;
&lt;li&gt;To access a prop in the the children component: &lt;code&gt;props.name&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope this short and sweet article on props was helpful. These are simple examples of passing data between components. Once you’ve master this you will be able to quickly enhance the data flow among your components and make more complex applications.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>JavaScript loading techniques &amp; Performance </title>
      <author>Bharati Subramanian</author>
      <pubDate>Sun, 18 Jul 2021 18:09:50 +0000</pubDate>
      <link>https://dev.to/bharati21/javascript-loading-techniques-performance-56lp</link>
      <guid>https://dev.to/bharati21/javascript-loading-techniques-performance-56lp</guid>
      <description>&lt;p&gt;Adding external script files to your HTML document is simple that you could do it in your sleep.&lt;/p&gt;

&lt;p&gt;But this is not as trivial as you think. Where and how you add your script file majorly influences the performance of your website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-this-blog-post-about"&gt;
  &lt;/a&gt;
  What is this blog post about?
&lt;/h2&gt;

&lt;p&gt;In this post, we will go through the techniques to include external script files to your HTML and look at how this can affect the performance.&lt;/p&gt;

&lt;p&gt;We will compare which technique is preferable and efficient over others in varying situations. &lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;This blog post assumes you are familiar with basic HTML, CSS and JavaScript syntax. &lt;br&gt;
We will also learn about the attributes: &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;defer&lt;/code&gt;.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;As you might already know, external JavaScript files can be included in the:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;head&lt;/li&gt;
&lt;li&gt;body&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Before we continue and discuss about these techniques in depth, let's understand what happens when a browser loads a webpage. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;ol&gt;
&lt;li&gt;The browser fetches the requested HTML file, and it is parsed.&lt;/li&gt;
&lt;li&gt;The parsed HTML contains references to external scripts and stylesheets.&lt;/li&gt;
&lt;li&gt;These external references are fetched, and are parsed/ loaded.&lt;/li&gt;
&lt;li&gt;Once loaded, the styles from the sheet are applied to the DOM elements, and &lt;/li&gt;
&lt;li&gt;Then the loaded scripts are executed and applied to the page, and the user views the completed visual structure.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;Essentially, this should be the order in which fetching, parsing, loading and execution happens.&lt;/li&gt;
&lt;li&gt;JavaScript files are meant to be applied finally once DOM is complete. But this might vary depending on where you add the script file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now enough with all this! Let's get to the actual post!!&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#including-script-in-the-body"&gt;
  &lt;/a&gt;
  Including Script in the body
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;This is the most preferred technique since this strategy ensures that the HTML parses before the script file.&lt;/li&gt;
&lt;li&gt;This order becomes necessary when your script manipulates the DOM element.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt; &lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;JavaScript reference inside body&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
     &lt;span class="c"&gt;&amp;lt;!-- DOCUMENT CONTENT --&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./src/main.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Since I started learning JavaScript, I have always added the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; within the HTML body.&lt;/li&gt;
&lt;li&gt;But I did not know, until recently, that this is an old-fashioned way and surprisingly not the recommended way anymore.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/n5bn2qnHEp3bO/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/n5bn2qnHEp3bO/giphy.gif" alt="RDJ Surprised"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adding the script reference in the body may give time for the DOM content to load, but a major problem is that the JavaScript loading is blocked.&lt;/li&gt;
&lt;li&gt;When you have multiple (and huge!) scripts in your website it might turn into a nightmare since users will have to wait for scripts to be loaded AND then executed.&lt;/li&gt;
&lt;li&gt;Not only does this degrade the performance of the website, it also frustrates users. &lt;/li&gt;
&lt;li&gt;Because users hate waiting for websites to load!
&lt;img src="https://i.giphy.com/media/OiC5BKaPVLl60/giphy.gif" alt="Monkey frustrated with computer"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How do we manage to load JavaScript files, and at the same time retain user experience and optimize website performance? &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The simple answer to this is: &lt;strong&gt;Add script references inside the head&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/aqUzXfaJ2dElJGQeDw/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/aqUzXfaJ2dElJGQeDw/giphy.gif" alt='Jimmy Fallon "This is a joke right?"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#including-script-in-the-head"&gt;
  &lt;/a&gt;
  Including Script in the head
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Yes, you read it right. Add script references within the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt; &lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;JavaScript reference inside body&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
     &lt;span class="c"&gt;&amp;lt;!-- Add script file source here --&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./src/main.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
     &lt;span class="c"&gt;&amp;lt;!-- DOCUMENT CONTENT --&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;But then it's not that simple. Yet another problem is that when you add the script files to your &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;, the script files are fetched &lt;em&gt;before&lt;/em&gt; the HTML DOM is parsed and loaded completely. &lt;/li&gt;
&lt;li&gt;Below shown image depicts an example webpage that displays a message in &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; when user clicks the button. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;Look what happens when you add the script source in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2zlxxx43--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9ntjags559akwtj2vtz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2zlxxx43--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9ntjags559akwtj2vtz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You get an error &lt;strong&gt;"cannot read property addEventListener of null"&lt;/strong&gt;. This happens because the DOM is loaded &lt;em&gt;&lt;em&gt;after&lt;/em&gt;&lt;/em&gt; JavaScript is fetched, and hence there is no reference to the button. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;But this could be avoided as well. How? By doing this:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DOMContentLoaded&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You clicked me!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The above code adds an event listener to the body which listens for DOM content to be loaded. &lt;/li&gt;
&lt;li&gt;Once the contents are loaded, all the code within the handler function gets executed thud ensuring that JavaScript is executed only after the DOM is loaded completely. &lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;And now if user clicks the buton, there is no error:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hMQburEL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6za8c61z9ehyvwg7a9b4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hMQburEL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6za8c61z9ehyvwg7a9b4.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
This is yet again an old technique. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript provides two new, modern features that prevents blocking of HTML parse and JavaScript load.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The two attributes: &lt;code&gt;async&lt;/code&gt; and (or) &lt;code&gt;defer&lt;/code&gt; are added to the script tag when it is included in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Both the attributes ask the browser to load the script file in a separate thread without blocking the HTML file from being parsed.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#1-async"&gt;
  &lt;/a&gt;
  1. async
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt; &lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;JavaScript reference inside body&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
     &lt;span class="c"&gt;&amp;lt;!-- Add script file source here --&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./src/main.js"&lt;/span&gt; &lt;span class="na"&gt;async&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
     &lt;span class="c"&gt;&amp;lt;!-- DOCUMENT CONTENT --&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;This attribute ensures that the script file is loaded without affecting the HTML from being parsed.&lt;/li&gt;
&lt;li&gt;That is, the browser loads/ fetches the script file simultaneously while the HTML is being parsed.&lt;/li&gt;
&lt;li&gt;The HTML parse is not paused, and hence loading of script file does not block the DOM from loading.&lt;/li&gt;
&lt;li&gt;But once the script file is loaded completely, the HTML parse is paused and the script is immediately executed, now blocking the DOM from loading.&lt;/li&gt;
&lt;li&gt;When your webpage has multiple scripts, there is no guarantee that the order in which scripts are fetched, loaded and executed is the same order in which the scripts appear in HTML file.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;Thus use this attribute when:

&lt;ol&gt;
&lt;li&gt;Script fetching, loading and execution are independent of each other. That is code in one script does not affect code in another.&lt;/li&gt;
&lt;li&gt;When you need scripts to perform initialization tasks that are required before the actual execution begins.
&lt;/li&gt;
&lt;li&gt;When you have scripts that do not manipulate the DOM.
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;   &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
     &lt;span class="c"&gt;&amp;lt;!-- Add script file source here --&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://code.jquery.com/jquery-3.6.0.min.js"&lt;/span&gt; &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4="&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt; &lt;span class="na"&gt;async&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js"&lt;/span&gt; &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF"&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt; &lt;span class="na"&gt;async&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./src/init.js"&lt;/span&gt; &lt;span class="na"&gt;async&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;For example: in the above code, there is no guarantee that jQuery will be fetched and executed first, then Bootstrap and then the init script.&lt;/li&gt;
&lt;li&gt;The order could be say: Bootstrap is executed first, then init and finally jQuery script.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#2-defer"&gt;
  &lt;/a&gt;
  2. defer
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt; &lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;JavaScript reference inside body&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
     &lt;span class="c"&gt;&amp;lt;!-- Add script file source here --&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./src/main.js"&lt;/span&gt; &lt;span class="na"&gt;defer&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
     &lt;span class="c"&gt;&amp;lt;!-- DOCUMENT CONTENT --&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;defer, as the name suggests, loads the script file in a separate thread, but defers the execution of the script file.&lt;/li&gt;
&lt;li&gt;Unlike &lt;code&gt;async&lt;/code&gt;, script is not executed immediately once the file is loaded, and the DOM load is not blocked. &lt;/li&gt;
&lt;li&gt;This attribute ensures the script is executed only when the DOM is completely loaded. &lt;/li&gt;
&lt;li&gt;The order in which the scripts are fetched, loaded, and executed, is the same order in which they appear in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;
br/&amp;gt;&lt;/b&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Thus use this attribute when:

&lt;ol&gt;
&lt;li&gt;The script files in your web page are dependent on each other, and the execution of one script affects the other.&lt;/li&gt;
&lt;li&gt;When your script manipulates the DOM content.
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;   &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
     &lt;span class="c"&gt;&amp;lt;!-- Add script file source here --&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://code.jquery.com/jquery-3.6.0.min.js"&lt;/span&gt; &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4="&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt; &lt;span class="na"&gt;async&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js"&lt;/span&gt; &lt;span class="na"&gt;integrity=&lt;/span&gt;&lt;span class="s"&gt;"sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF"&lt;/span&gt; &lt;span class="na"&gt;crossorigin=&lt;/span&gt;&lt;span class="s"&gt;"anonymous"&lt;/span&gt; &lt;span class="na"&gt;async&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./src/main.js"&lt;/span&gt; &lt;span class="na"&gt;async&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The execution of scripts in the above code is in the following order: &lt;strong&gt;jQuery script, Bootstrap, and finally the main script file&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;As a thumb rule, I would suggest to add script sources within the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; only if the script your website uses is minimal.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you have multiple scripts that are heavy, refer to it within the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; as sourcing within the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; blocks JavaScript from loading, thereby affecting the performance of your website.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use async in case the scripts in your website are independent of each other, and you want to execute code before the main JavaScript loads.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use defer when you have scripts that rely on parsing of HTML and manipulation of DOM elements. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;Here's a visual representation of HTML parsing, and  JavaScript loading and execution from the &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/What_is_JavaScript"&gt;MDN docs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xnQtd0ab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yhb4xxe0xij69o8syu84.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xnQtd0ab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yhb4xxe0xij69o8syu84.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Thank you so much for your support and reading this blog post.&lt;br&gt;
Help me out by sharing this to your friends, and comment down what you felt about this post.&lt;/p&gt;

&lt;p&gt;Do heart, save, unicorn, or do all of it if you enjoyed and learned rom this post!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>performance</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Cross-site scripting (XSS) attack - Part 1</title>
      <author>Mariam Reba Alexander</author>
      <pubDate>Sun, 18 Jul 2021 18:00:19 +0000</pubDate>
      <link>https://dev.to/ms_74/cross-site-scripting-xss-attack-part-1-3d9a</link>
      <guid>https://dev.to/ms_74/cross-site-scripting-xss-attack-part-1-3d9a</guid>
      <description>&lt;p&gt;As frontend developers we are constantly adding and releasing new features or fixing bugs as per business requirements, and it's hard to keep vigilance on the security side of things. It has become a secondary concern and we are far behind the backend and Devops engineers for whom this is a primary and regular part of their thinking in development process. Today security attacks are on the rise and we need to take measures from both server side and client side before its too late. &lt;/p&gt;

&lt;p&gt;With this post I am starting a new series called &lt;strong&gt;'What a frontend developer should know about web security'&lt;/strong&gt;. Here I will cover about &lt;em&gt;Cross-site scripting (XSS) attacks&lt;/em&gt; and how to defend your client-side code from this attack as a frontend developer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-this-crosssite-scripting-xss-"&gt;
  &lt;/a&gt;
  What is this Cross-site scripting (XSS) ?
&lt;/h2&gt;

&lt;p&gt;In simple terms, this is a type of code injection attack where an attacker finds a way to inject malicious javascript into the user's browser while the user views your website.&lt;/p&gt;

&lt;p&gt;As you very well know javascript can absolutely do anything with  a web page, alter page content, steal cookies, hijack user sessions, trick them into logging and thereby passing the attacker the user's login information unknowingly and so on. &lt;/p&gt;

&lt;p&gt;There are different types of Cross site scripting attacks :&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-stored-xss-attacks"&gt;
  &lt;/a&gt;
  1. Stored XSS attacks
&lt;/h3&gt;

&lt;p&gt;Websites generate content in the HTML using the stored data from the database. For example we are able to display the users address on the profile settings page by making an api call and fetching the response to display the address details that we need. &lt;/p&gt;

&lt;p&gt;Let's say an attacker injected a malicious script within the comment section and submitted it on a web page. The comment with the javascript gets stored in the database and gets executed in the browser when an unsuspecting victim views it on the site. This type of attack is called &lt;em&gt;stored cross-site scripting attack&lt;/em&gt; .&lt;/p&gt;

&lt;p&gt;Any user controlled content can be used for this type of attack. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nDqlwpqO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u180t0ev73x6txt7a07z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nDqlwpqO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u180t0ev73x6txt7a07z.png" alt="An attacker injects JavaScript through a comment."&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_AVbFQIt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5ygvd32pnx389umzabz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_AVbFQIt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5ygvd32pnx389umzabz.png" alt="An attacker’s &amp;lt;script&amp;gt; tag is written out to the victim’s browser and executed"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Picture courtesy: Web security for developers (Book)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's look at how we can defend against such attacks.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#defence-1-escape"&gt;
  &lt;/a&gt;
  Defence # 1 - Escape..
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/12pWOEeKbbfdio/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/12pWOEeKbbfdio/giphy.gif" alt="escape gift"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sorry, not that escape, I mean &lt;strong&gt;Escape HTML characters&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;To prevent stored XSS attack, we could escape all dynamic content coming from the database so that the browser will treat the escaped characters (&lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Entity"&gt;entity encodings&lt;/a&gt;) as content within HTML tags.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="comment"&amp;gt;
  &amp;amp;lt;script&amp;amp;gt;alert(&amp;amp;quot;HAXXED&amp;amp;quot;)&amp;amp;lt;/script&amp;amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In javascript one can escape characters on a string using the function &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI"&gt;encodeURI()&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const data = {
  comment: "Hi, there &amp;lt;script&amp;gt;console.log('you are hacked')&amp;lt;/script&amp;gt;"
}
console.log(encodeURI(data.comment)); // =&amp;gt; Hi,%20there%20%3Cscript%3Econsole.log('you%20are%20hacked')%3C/script%3E
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thankfully, most of the modern frameworks take care of this automatically. But if you want to unescape for some reason, then escape the data before it is put into HTML. &lt;/p&gt;

&lt;p&gt;Note: The following examples are ways to unescape in different frameworks. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React - &lt;code&gt;return &amp;lt;div dangerouslySetInnerHTML={createMarkup()} /&amp;gt;;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Angular - &lt;code&gt;&amp;lt;div [innerHTML]='&amp;lt;a href="#"&amp;gt;Unescaped link&amp;lt;/a&amp;gt;'&amp;lt;/div&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Vue - &lt;code&gt;&amp;lt;div v-html="htmlData"&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above doesn't mean they are unprotected from script injection, for example in Vue.js, if you try to put a script tag into &lt;code&gt;v-html&lt;/code&gt; it does not execute. Measures may be already taken by these frameworks, but be careful, it is better to avoid unescaped dynamic content within HTML tags. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#defence-2-content-security-policy-csp"&gt;
  &lt;/a&gt;
  Defence # 2 - Content Security Policy (CSP)
&lt;/h4&gt;

&lt;p&gt;Content Security Policy or CSP is a security layer that can be set on modern browsers, telling the browser which scripts should be trusted. &lt;/p&gt;

&lt;p&gt;XSS attacks rely on injecting script somewhere with the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag of a web page (known as inline script). CSP tells the browser to never execute inline scripts unless it is imported via &lt;code&gt;src&lt;/code&gt;attribute in the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag.  &lt;/p&gt;

&lt;p&gt;CSP can be either set in your HTTP response headers..&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Content-Security-Policy: script-src 'self' https://api.foo.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or in a &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tag in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; element of the HTML.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;meta http-equiv="Content-Security-Policy" content="script-src 'self' https://api.foo.com"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example the browser will load script only from the domain &lt;code&gt;api.foo.com&lt;/code&gt; even if say the website's domain is &lt;code&gt;https://foowebsite.com&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#unsafe-inline-script"&gt;
  &lt;/a&gt;
  Unsafe inline script
&lt;/h4&gt;

&lt;p&gt;Inline script can be permitted if the policy includes the keyword &lt;code&gt;unsafe-inline&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Content-Security-Policy: script-src 'unsafe-inline';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In case you want to include a specific &lt;code&gt;inline-script&lt;/code&gt; like google tag manager and still want to block any other suspicious inline scripts being added, cryptographic &lt;code&gt;nonce&lt;/code&gt; can be added&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script nonce=E9h3sdfn3f03nce9DNnIOefn3fa&amp;gt;
        (function googleTagFunction(){....})();
      !&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Content-Security-Policy: script-src 'nonce-E9h3sdfn3f03nce9DNnIOefn3fa'

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To know more about ways of adding &lt;code&gt;unsafe-inline&lt;/code&gt; read &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src#unsafe_inline_script"&gt;#unsafe inline script documentation&lt;/a&gt;. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#reporting-csp-violations"&gt;
  &lt;/a&gt;
  Reporting CSP violations
&lt;/h4&gt;

&lt;p&gt;If you want to block the scripts and also report when scripts are attempted to inject,  you can add a &lt;code&gt;report-uri&lt;/code&gt; directive ( multiple directives are separated by semi-colon) and include a URI where the report should be sent.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Content-Security-Policy: default-src 'self'; report-uri http://reportcollector.example.com/collector.cgi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you would only collect violation reports and not block the scripts being executed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Content-Security-Policy-Report-Only: default-src 'self'; report-uri http://reportcollector.example.com/collector.cgi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To know more about other directives check &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy"&gt;#Content-Security-Policy documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the coming post we will look into another type of XSS attack - &lt;strong&gt;Reflected Cross-site Scripting attack&lt;/strong&gt;. Stay tuned!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>security</category>
    </item>
    <item>
      <title>Creating Patterns with CSS simplified.</title>
      <author>Akshaya Venkatesh</author>
      <pubDate>Sun, 18 Jul 2021 17:58:28 +0000</pubDate>
      <link>https://dev.to/venkyakshaya/creating-patterns-with-css-simplified-5a60</link>
      <guid>https://dev.to/venkyakshaya/creating-patterns-with-css-simplified-5a60</guid>
      <description>&lt;p&gt;Did you know you can create really cool patterns using just the CSS background properties? This blog will get you started on how to approach patterns with CSS and you'll be able to create this 👇 simple bookmark pattern at the end of this article.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LaxbFd5l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fjsjegimxinwqzh5ayi0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LaxbFd5l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fjsjegimxinwqzh5ayi0.png" alt="A pattern that looks like a cut ribbon"&gt;&lt;/a&gt;&lt;br&gt;
Before we begin, let's understand why its worth knowing how to create patterns with CSS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your webpage will load considerably faster when you use a pattern instead of an image&lt;/li&gt;
&lt;li&gt;Patterns unlike images never have sizing issues as the sizes are completely under your control &lt;/li&gt;
&lt;li&gt;You can create more than just basic shapes with a good understanding of backgrounds.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are a few places, a CSS background can be preferred over an image:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use a pattern as a background instead of an image when the foreground is going to have a lot of content and little unused space&lt;/li&gt;
&lt;li&gt;Banner on your Portfolio site: once again, saves load time and shows off your css skills.&lt;/li&gt;
&lt;li&gt;When your site supports themes(light/dark modes etc): Using a background pattern over background image will make it more theme-friendly because you simply change the colours in the pattern to match your theme.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's dive in!&lt;/p&gt;

&lt;p&gt;To create our pattern (or any pattern) we need to understand the following 4 background properties:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;background-image&lt;/strong&gt;: This property, although commonly used for assigning images, is where we will use gradient functions to create our patterns.&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;background-image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;linear-gradient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;180&lt;/span&gt;&lt;span class="nt"&gt;deg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;black&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;pink&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;linear-gradient()&lt;/strong&gt; - this commonly used gradient method will let us specify a direction(in degrees, radians, or simply words) and a bunch of colours which it will arrange in the form of a gradient. For instance,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;background-image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;linear-gradient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;90&lt;/span&gt;&lt;span class="nt"&gt;deg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;red&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;orange&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;yellow&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;green&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;blue&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;indigo&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;violet&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;gives us the following gradient,&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KciCHinM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ae0g268vlmiupwdv2uw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KciCHinM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ae0g268vlmiupwdv2uw.png" alt="Rainbow gradient"&gt;&lt;/a&gt;&lt;br&gt;
For patterns we often use multiple gradients in combinations. While using more than one gradient(simply separated by commas) we use the shorthand &lt;strong&gt;background&lt;/strong&gt; property instead of &lt;em&gt;background-image&lt;/em&gt;. For instance, the code below -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;linear-gradient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="nt"&gt;deg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;blanchedalmond&lt;/span&gt; &lt;span class="err"&gt;33&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;3&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="nt"&gt;transparent&lt;/span&gt; &lt;span class="err"&gt;33&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;3&lt;/span&gt;&lt;span class="o"&gt;%),&lt;/span&gt; 
            &lt;span class="nt"&gt;linear-gradient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="nt"&gt;deg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;pink&lt;/span&gt; &lt;span class="err"&gt;66&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;6&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="nt"&gt;transparent&lt;/span&gt; &lt;span class="err"&gt;66&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;6&lt;/span&gt;&lt;span class="o"&gt;%),&lt;/span&gt; 
            &lt;span class="nt"&gt;lightblue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;creates the following background:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vhrsd0f_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5qg6f2qq8671vd9hndd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vhrsd0f_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5qg6f2qq8671vd9hndd.png" alt="Striped background with lightblue, blanched almond and pink colours"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#few-important-things-to-note-here"&gt;
  &lt;/a&gt;
  Few important things to note here
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;We must understand that the background property stacks the gradients in a bottom up fashion. In the above example - first the entire box is filled with light blue(bottom most value) above which we have a pink box(2/3rd of the total height) and above all a blanchedalmond box(1/3rd of the total height). &lt;/li&gt;
&lt;li&gt;To achieve sharp or absolute color transitions (unlike the blended colors in the above Rainbow) we specify the exact percentage of space a color occupies. &lt;/li&gt;
&lt;li&gt;We use the color value &lt;strong&gt;transparent&lt;/strong&gt; if we do not wish to include a specific color. We create the effect that the pink box only occupies 2/3rd the height we simply say pink 66.6%, transparent 66.6% i.e., pink upto 66.6% and transparent from &lt;/li&gt;
&lt;li&gt;The direction in which the degrees are evaluated is always clockwise.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;background-position&lt;/strong&gt;: This property lets us move around the gradients within the containing element. It takes values in CSS units for the x and y axes as follows&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;background-position&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;10&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="err"&gt;20&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;background-size&lt;/strong&gt;: This property lets us define the size within which the pattern is to be created. This is a complex CSS property as it can take multiple types of values. However, with respect to this blog we will need only to understand the following type.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;background-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;60&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="err"&gt;60&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we have simply defined the width and height of the background i.e. the background is now contained to a 60*60 box in the element.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;background-repeat&lt;/strong&gt;: This property controls how the background gets repeated in the container. Since we are attempting to create a symmetrical pattern we will ensure the value reads:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;background-repeat&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;repeat&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To understand them all better look at the following snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;background-image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;linear-gradient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;180&lt;/span&gt;&lt;span class="nt"&gt;deg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;black&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;pink&lt;/span&gt; &lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;background-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;60&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="err"&gt;60&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;background-position&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;60&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="err"&gt;60&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;background-repeat&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;no-repeat&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we have given a &lt;code&gt;no-repeat&lt;/code&gt; we will see a single box of dimension 60*60px with a gradient at a position of 60px from the top-left of the container as follows.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fkI5dXv1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6m574slbp548vxs10sde.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fkI5dXv1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6m574slbp548vxs10sde.png" alt="A box with black-pink gradient"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To construct the bookmark pattern let's break it down to simple shapes first&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_rOW6vCT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vaxqmchlh0rhb3kjvb2h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_rOW6vCT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vaxqmchlh0rhb3kjvb2h.png" alt="Book mark shape break down"&gt;&lt;/a&gt;&lt;br&gt;
We first set the background to be white. Assign a background-size, for example lets take 40px*40px. To create each triangle we will be using the &lt;strong&gt;linear-gradient()&lt;/strong&gt; function &lt;br&gt;
Triangle 1:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;linear-gradient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;120&lt;/span&gt;&lt;span class="nt"&gt;deg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;black&lt;/span&gt; &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="nt"&gt;transparent&lt;/span&gt; &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%),&lt;/span&gt; 
            &lt;span class="nt"&gt;white&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Triangle 2:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;linear-gradient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;60&lt;/span&gt;&lt;span class="nt"&gt;deg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;black&lt;/span&gt; &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="nt"&gt;transparent&lt;/span&gt; &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%),&lt;/span&gt; 
            &lt;span class="nt"&gt;white&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Put together we have&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="nt"&gt;linear-gradient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;120&lt;/span&gt;&lt;span class="nt"&gt;deg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;black&lt;/span&gt; &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="nt"&gt;transparent&lt;/span&gt; &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%),&lt;/span&gt; 
             &lt;span class="nt"&gt;linear-gradient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;60&lt;/span&gt;&lt;span class="nt"&gt;deg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;transparent&lt;/span&gt; &lt;span class="err"&gt;49&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="nt"&gt;black&lt;/span&gt; &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%),&lt;/span&gt; 
             &lt;span class="nt"&gt;white&lt;/span&gt;
&lt;span class="nt"&gt;background-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;40&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="err"&gt;40&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code creates 40*40 boxes with 2 triangles placed one above the other but the background looks like this 👇 due to background repeat.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4YJ8Sh0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/anzhtso9uko662lcykhx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4YJ8Sh0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/anzhtso9uko662lcykhx.png" alt="Black background with white triangles"&gt;&lt;/a&gt;&lt;br&gt;
To create the bookmark effect we add horizontal and vertical white stripes as separators i.e.,&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dgZ6-u0C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6abcz28v3lu7pksmtbzk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dgZ6-u0C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6abcz28v3lu7pksmtbzk.png" alt="Bookmark construction as a combination of stripes and triangles"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The white stripes can be created with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;linear-gradient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="nt"&gt;deg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;white&lt;/span&gt; &lt;span class="err"&gt;15&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="nt"&gt;transparent&lt;/span&gt; &lt;span class="err"&gt;15&lt;/span&gt;&lt;span class="o"&gt;%)&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="err"&gt;6&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;linear-gradient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;90&lt;/span&gt;&lt;span class="nt"&gt;deg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;white&lt;/span&gt; &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="nt"&gt;transparent&lt;/span&gt; &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%)&lt;/span&gt; &lt;span class="nt"&gt;-10px&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that here, we have specified a background position for each of the gradient right after the function. Now we put it all together as follows,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;linear-gradient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="nt"&gt;deg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;white&lt;/span&gt; &lt;span class="err"&gt;15&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="nt"&gt;transparent&lt;/span&gt; &lt;span class="err"&gt;15&lt;/span&gt;&lt;span class="o"&gt;%)&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="err"&gt;6&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
            &lt;span class="nt"&gt;linear-gradient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;90&lt;/span&gt;&lt;span class="nt"&gt;deg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;white&lt;/span&gt; &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="nt"&gt;transparent&lt;/span&gt; &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%)&lt;/span&gt; &lt;span class="nt"&gt;-10px&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
            &lt;span class="nt"&gt;linear-gradient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;120&lt;/span&gt;&lt;span class="nt"&gt;deg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;black&lt;/span&gt; &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="nt"&gt;transparent&lt;/span&gt; &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%),&lt;/span&gt; 
            &lt;span class="nt"&gt;linear-gradient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;60&lt;/span&gt;&lt;span class="nt"&gt;deg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;transparent&lt;/span&gt; &lt;span class="err"&gt;49&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="nt"&gt;black&lt;/span&gt; &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%),&lt;/span&gt; 
            &lt;span class="nt"&gt;white&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;background-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;40&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt; &lt;span class="err"&gt;40&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This gives us the complete pattern. Codepen demo below 👇&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/akshaya-venkatesh8/embed/ZEKyQPW?height=600&amp;amp;default-tab=css,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I was inspired to learn CSS patterns after visiting &lt;a href="http://projects.verou.me/css3patterns/"&gt;Lea Verou's Pattern Gallery&lt;/a&gt;. Check it out for some amazing patterns 🤩. &lt;br&gt;
I was further inspired to create my own pattern gallery which is live &lt;a href="https://akshaya-venkatesh8.github.io/css-patterns/"&gt;here&lt;/a&gt; and the code can be found on &lt;a href="https://github.com/akshaya-venkatesh8/css-patterns"&gt;github&lt;/a&gt;. Thanks for reading. I'd love to see the patterns that you create. Please feel free to share them with me on &lt;a href="https://twitter.com/venkyakshaya"&gt;twitter&lt;/a&gt; or in the comments below!&lt;/p&gt;

</description>
      <category>css</category>
      <category>tutorial</category>
      <category>ui</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to build a Email Newsletter Subscriber in Django?</title>
      <author>Shubham Singh Kshatriya</author>
      <pubDate>Sun, 18 Jul 2021 17:44:37 +0000</pubDate>
      <link>https://dev.to/shubhamkshatriya25/how-to-build-a-email-newsletter-subscriber-in-django-j2p</link>
      <guid>https://dev.to/shubhamkshatriya25/how-to-build-a-email-newsletter-subscriber-in-django-j2p</guid>
      <description>&lt;p&gt;An email newsletter is an email that is sent out on a regular basis (e.g. weekly or monthly) to certain users. As you’ll probably know by looking at your inboxes, email newsletters are a popular medium for businesses. Stats says that &lt;strong&gt;85% of B2B marketers send email newsletters&lt;/strong&gt; as part of their content marketing strategy.&lt;/p&gt;

&lt;p&gt;In this article we will build our own email newsletter subscriber using Django and AJAX.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Requirements: Basics of Django and AJAX. You can refer to &lt;a href="https://dev.to/shubhamkshatriya25/working-with-ajax-request-and-django-4ncg"&gt;this&lt;/a&gt; article if you wanna learn how to use AJAX in Django.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-ui"&gt;
  &lt;/a&gt;
  Setting up UI
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is the HTML file which will contain the UI. As you may have noticed, we will use bootstrap 4 components and some custom CSS. PS: Make sure to include csrf_token in the form :)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{% load static %}
&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"&amp;gt;
    &amp;lt;link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
        integrity="sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z" crossorigin="anonymous"&amp;gt;
    &amp;lt;link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"
        crossorigin="anonymous"&amp;gt;
    &amp;lt;title&amp;gt;Newsletter Subscribtion Example&amp;lt;/title&amp;gt;
    &amp;lt;link rel="stylesheet" href="{% static 'assets/app.css' %}"&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div class="col-lg-6 col-md-6" style="margin: 100px auto; display: block;"&amp;gt;
        &amp;lt;form enctype="multipart/form-data" method="POST" action="" style="text-align: center;"&amp;gt;
            {% csrf_token %}
            &amp;lt;div class="form-group"&amp;gt;
                &amp;lt;label&amp;gt;Subscribe to our Newsletter.&amp;lt;/label&amp;gt;
                &amp;lt;input type="email" class="form-control" id="userEmail" placeholder="Enter email" required&amp;gt;
                &amp;lt;small style="font-weight: 600;color: red;" class="error"&amp;gt;&amp;lt;/small&amp;gt;
                &amp;lt;input type="text" class="form-control mt-2" id="userName" placeholder="Enter name" required&amp;gt;
                &amp;lt;small style="font-weight: 600;color: green;" class="success"&amp;gt;&amp;lt;/small&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;input type="submit" value="Subscribe" id="submit" class="btn"&amp;gt;     
        &amp;lt;/form&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src="{% static 'assets/app.js' %}"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;app.css&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's add some of our own CSS to make our UI more aligned.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;label {
    font-size: 22px;
    font-weight: bold;
}

.btn {
    padding: 7px 21px;
    background-color: rgb(143, 1, 1);
    color: white;
    font-size: 18px;
}

body {
    background-color: azure;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how our UI will appear.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cN1qsGtf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7z03w3bl3j59smsiw2yl.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cN1qsGtf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7z03w3bl3j59smsiw2yl.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;app.js&lt;/strong&gt;&lt;br&gt;
We will retrieve the values that are entered by user in input box and check if the email entered by user is valid or already exists in our database. &lt;/p&gt;

&lt;p&gt;We will use AJAX request to validate the email as soon as user enters the email by binding a &lt;strong&gt;change&lt;/strong&gt; event on email input box. If the email and name of the user are valid we will add it to our database using another AJAX request.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const validateEmail = function(email) {
    var formData = new FormData();
    formData.append('email', email)
    $.ajaxSetup({
        headers: {
            "X-CSRFToken": document.querySelector('[name=csrfmiddlewaretoken]').value,
        }
    });
    $.ajax({
        url: '/validate/',
        type: 'POST',
        dataType: 'json',
        cache: false,
        processData: false,
        contentType: false,
        data: formData,
        error: function (xhr) {
            console.error(xhr.statusText);
        },
        success: function (res) {
            $('.error').text(res.msg);
        }
    });
};

const subscribeUser = function(email, name) {
    var formData = new FormData();
    formData.append('email', email);
    formData.append('name', name);
    $.ajaxSetup({
        headers: {
            "X-CSRFToken": document.querySelector('[name=csrfmiddlewaretoken]').value,
        }
    });
    $.ajax({
        url: '/newsletter/',
        type: 'POST',
        dataType: 'json',
        cache: false,
        processData: false,
        contentType: false,
        data: formData,
        error: function (xhr) {
            console.error(xhr.statusText);
        },
        success: function (res) {
            $('.success').text(res.msg);
            $('#userEmail').val(' ');
            $('#userName').val(' ');
        }
    });
};

(function ($) {
    $('#submit').on('click', () =&amp;gt; {
        event.preventDefault();
        const userEmail = $('#userEmail').val();
        const userName = $('#userName').val();
        if (userEmail &amp;amp;&amp;amp; userName) {
            subscribeUser(userEmail, userName);
        }
    });

    $('#userEmail').on('change', (event) =&amp;gt; {
        event.preventDefault();
        const email = event.target.value;
        validateEmail(email);
    });
})(jQuery);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this we are done with the front end. Now let's build a model and a server to try this code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-server"&gt;
  &lt;/a&gt;
  Setting up server
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;urls.py&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The url where the request will be made&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.urls import path
from . import views

urlpatterns = [
    path('newsletter/', views.index, name='index'),
    path('validate/', views.validate_email, name='validate_email'),
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;views.py&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The request made to the server are handled by function defined in views.py. When we get a POST request, we retrieve the data and add them to the database.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;validate_email: to validate the email entered by user&lt;/li&gt;
&lt;li&gt;index: to add user to database &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will also send a confirmation mail to the user using Google's SMTP server. If you want to know how it works, you can check &lt;a href="https://dev.to/shubhamkshatriya25/how-to-send-email-using-smtp-server-in-django-131f"&gt;this&lt;/a&gt; article.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.shortcuts import render
from django.http import JsonResponse
import re
from .models import SubscribedUsers
from django.core.mail import send_mail
from django.conf import settings

def index(request):
    if request.method == 'POST':
        post_data = request.POST.copy()
        email = post_data.get("email", None)
        name = post_data.get("name", None)
        subscribedUsers = SubscribedUsers()
        subscribedUsers.email = email
        subscribedUsers.name = name
        subscribedUsers.save()
        # send a confirmation mail
        subject = 'NewsLetter Subscription'
        message = 'Hello ' + name + ', Thanks for subscribing us. You will get notification of latest articles posted on our website. Please do not reply on this email.'
        email_from = settings.EMAIL_HOST_USER
        recipient_list = [email, ]
        send_mail(subject, message, email_from, recipient_list)
        res = JsonResponse({'msg': 'Thanks. Subscribed Successfully!'})
        return res
    return render(request, 'index.html')

def validate_email(request): 
    email = request.POST.get("email", None)   
    if email is None:
        res = JsonResponse({'msg': 'Email is required.'})
    elif SubscribedUsers.objects.get(email = email):
        res = JsonResponse({'msg': 'Email Address already exists'})
    elif not re.match(r"^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$", email):
        res = JsonResponse({'msg': 'Invalid Email Address'})
    else:
        res = JsonResponse({'msg': ''})
    return res
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;models.py&lt;/p&gt;

&lt;p&gt;We cannot store data until we have a model. Let's create one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.db import models

class SubscribedUsers(models.Model):
    email = models.CharField(unique=True, max_length=50)
    name = models.CharField(max_length=50)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run these commands in the terminal to migrate your model&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python manage.py makemigrations
python manage.py  migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are all set to test our application. Go to your browser, run the serving URL and test your app.&lt;/p&gt;

&lt;p&gt;This are few snapshots of the output.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yaGHCpZ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0dpr6at2ttumt6cdekv.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yaGHCpZ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0dpr6at2ttumt6cdekv.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gb9ouTRw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zus3zuagqu3weyissqcn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gb9ouTRw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zus3zuagqu3weyissqcn.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hEPt-RiE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z35dnk50s5gbk8nb3dyt.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hEPt-RiE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z35dnk50s5gbk8nb3dyt.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, that's how we create an email newsletter subscriber using Django. Thanks for reading.&lt;/p&gt;

&lt;p&gt;You can also connect with me on &lt;a href="https://twitter.com/shubhHAM_"&gt;Twitter&lt;/a&gt; for any discussion.&lt;/p&gt;

&lt;p&gt;Adios!&lt;/p&gt;

</description>
      <category>python</category>
      <category>django</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The (new) Software Architecture Foundation Curriculum</title>
      <author>Dr. Gernot Starke</author>
      <pubDate>Sun, 18 Jul 2021 17:42:26 +0000</pubDate>
      <link>https://dev.to/gernotstarke/the-new-software-architecture-foundation-curriculum-373f</link>
      <guid>https://dev.to/gernotstarke/the-new-software-architecture-foundation-curriculum-373f</guid>
      <description>&lt;p&gt;(this post was originally published on the &lt;a href="https://www.isaqb.org/blog/the-new-software-architecture-foundation-curriculum/"&gt;iSAQB blog&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Want to learn Software Architecture? Look no further – the recently released &lt;a href="https://isaqb-org.github.io/curriculum-foundation/"&gt;iSAQB Foundation Curriculum&lt;/a&gt; covers all your needs!&lt;/p&gt;

&lt;p&gt;A group of international software architecture experts has been working on optimizing and streamlining this systematic education path, resulting in the most systematic and practical curriculum ever.&lt;/p&gt;

&lt;p&gt;The 2021 update is the result of nearly 12 months of work by more than a dozen experienced practitioners and researchers, who collected, curated and incorporated more than 190 change requests and proposals. You can find more details on the update and release process in the appendix.&lt;/p&gt;

&lt;p&gt;This article provides an overview of the curriculum. Its sources are maintained and published via &lt;a href="https://github.com/isaqb-org/curriculum-foundation"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#goals"&gt;
  &lt;/a&gt;
  Goals
&lt;/h2&gt;

&lt;p&gt;The iSAQB Foundation Level Curriculum aims to be the authoritative and leading source for all accredited software architecture education. If you are attending a training course and aim for the CPSA-F certification, knowledge of this curriculum is essential(CPSA-F: Certified Professional for Software Architecture, Foundation Level). More than 20.000 professional software developers have already been certified.&lt;/p&gt;

&lt;p&gt;iSAQB software architecture education will provide you with the necessary knowledge to design and communicate a software architecture. Based upon your individual practical experience and existing skills, you will learn to derive architecture decisions from system goals and requirements.&lt;br&gt;
CPSA-F trainings teach methods and principles for creating, designing, communicating, analyzing and evaluating software architectures.&lt;/p&gt;

&lt;p&gt;Prior to a training course, an overview of the curriculum will give you a good idea of what to expect of such a training.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overall-structure"&gt;
  &lt;/a&gt;
  Overall Structure
&lt;/h2&gt;

&lt;p&gt;The curriculum consists of five strongly interrelated parts – based upon solid and proven terminology.  A (free!) glossary, published at Leanpub ([glossary]) provides definitions of key terms and concepts for your convenience and reference.&lt;br&gt;
About 40 different learning objectives structure the required skills and knowledge of software architecture in a practical and pragmatic way.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GPp8_Mzf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o38an7wfm6lsy79308a6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GPp8_Mzf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o38an7wfm6lsy79308a6.png" alt="Overall Curriculum Structure"&gt;&lt;/a&gt;&lt;br&gt;
Fig. 1: Curriculum Structure&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-1-the-fundamentals"&gt;
  &lt;/a&gt;
  Part 1: The Fundamentals
&lt;/h2&gt;

&lt;p&gt;This part of the curriculum facilitates a common understanding of our subject by defining and explaining basic concepts – the what and why of software architecture. You will learn agreed-upon definitions of software architecture, its goals and benefits. &lt;br&gt;
My personal take on this fundamental part: There is no silver bullet or one single approach that solves all kinds of problems - as decisions will always depend on various influencing factors.&lt;/p&gt;

&lt;p&gt;Furthermore, this part explains the role of architects and architecture within the complete lifecycle of software systems. It focuses on the major tasks and responsibilities of software architects, in cooperation and collaboration with other stakeholders, such as management, business, development teams and others.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eUYdjW-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prawgcqncnopcs6s5sqx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eUYdjW-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/prawgcqncnopcs6s5sqx.png" alt="Architects Role - the Spectrum"&gt;&lt;/a&gt;&lt;br&gt;
Fig. 2: Architects' Role - the Spectrum&lt;/p&gt;

&lt;p&gt;When discussing the role, you need to consider the size and complexity of the system, organizational factors, team composition, and other constraints. Knowing the pros and cons of these options will help you find an appropriate setup for your teams and projects.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--42JeCj_l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ci066q31jqd46y4vi7p8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--42JeCj_l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ci066q31jqd46y4vi7p8.jpg" alt="Architecture Activities"&gt;&lt;/a&gt;&lt;br&gt;
Fig. 3: Architecture Activities&lt;/p&gt;

&lt;p&gt;Personally, I like the focus on communication and feedback that the curriculum proposes for the architecture role: explicit communication and feedback are essential ingredients of successful system development. Communication helps to identify risks and agree trade-offs with the stakeholders involved.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-2-architecture-design-approaches"&gt;
  &lt;/a&gt;
  Part 2 -- Architecture design approaches
&lt;/h2&gt;

&lt;p&gt;Architecture work should always start with an appropriately clear understanding of both functional and quality requirements -- and the curriculum addresses these alongside with constraints and other influencing factors.&lt;/p&gt;

&lt;p&gt;Designing systems is a highly creative (and sometimes difficult) endeavour -- supported by several architectural approaches, methods, patterns, and principles. In this part of your architecture education, you will learn about several of these approaches, such as view-based, incremental development, bottom-up and top-down approaches, domain-driven design and evolutionary architecture. &lt;br&gt;
Most of the approaches require intensive feedback and therefore are a perfect fit for modern and iterative development and management approaches.&lt;/p&gt;

&lt;p&gt;Architecture patterns should be part of your personal toolbox when deciding on system structures, so the most important and established patterns will be covered in foundation courses: from layers and tiers to pipes-and-filters, microservices and self-contained systems, the clean-architecture patterns (also called hexagonal- or onion architecture) to interfacing and integration patterns.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qBkgDloT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dnkj6napljzi0xqca9sg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qBkgDloT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dnkj6napljzi0xqca9sg.png" alt="Approaches to Design Architectures"&gt;&lt;/a&gt;&lt;br&gt;
Fig. 4: Some approaches to systematically design software architectures&lt;/p&gt;

&lt;p&gt;Architects must pay particular attention to system qualities, such as performance, flexibility, maintainability, and security. The curriculum addresses these qualities from different angles (see also Part-4 below). Proven architectural tactics will help you to achieve the desired or required qualities -- related to both externally visible and internal properties of systems..&lt;/p&gt;

&lt;p&gt;To assess the consequences of your design decisions, you need to be aware of the timeless underlying principles of software design -- such as abstraction, modularization, black-/white-box, coupling, cohesion, conceptual integrity, and a few others.  Even the architectural relevance of the SOLID principles will be covered. Learning to apply them in practice will definitely improve your decisions.&lt;/p&gt;

&lt;p&gt;Special attention will be paid to dependencies between architectural building blocks: You will analyze the challenges of relationships and dependencies between elements of your architecture, and systematically design and define interfaces that are easy to learn, use and extend.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-3-architecture-communication"&gt;
  &lt;/a&gt;
  Part 3 -- Architecture communication
&lt;/h2&gt;

&lt;p&gt;Since you need to interact with a variety of different stakeholders (see Fig 5 for some examples), it is therefore crucial to learn how to communicate your architecture, its structures, concepts and decisions effectively and efficiently.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kDLqjJM6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ufy6ag49cl9up9rxz2gs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kDLqjJM6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ufy6ag49cl9up9rxz2gs.png" alt="Architects communicate"&gt;&lt;/a&gt;&lt;br&gt;
Fig. 5: Architects communicate with many stakeholders&lt;/p&gt;

&lt;p&gt;You will learn how to use architectural views (like context- or building-block view) to verbally communicate structural decisions and justify them. &lt;br&gt;
Additionally, you will learn how to apply these skills to&lt;br&gt;
(written) documentation too -- balancing accuracy, attention to detail and the time required to keep documentation up to date.&lt;/p&gt;

&lt;p&gt;A (very) small part of the curriculum is devoted to architecture modeling notations, like UML. Expect an iSAQB foundation training course to include a highly condensed summary of practically useful modeling constructs -- and pragmatic advice on how to create useful architecture&lt;br&gt;
diagrams.&lt;/p&gt;

&lt;p&gt;Although I am one of the core committers of the &lt;a href="https://arc42.org"&gt;arc42&lt;/a&gt; template, I personally favor a lean and relaxed style of documentation. &lt;br&gt;
In case your systems require strict and detailed documentation, the curriculum has you covered too!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-4-architecture-and-quality"&gt;
  &lt;/a&gt;
  Part 4 -- Architecture and quality
&lt;/h2&gt;

&lt;p&gt;Achieving quality characteristics and quality attributes belongs to the core tasks of software architects. This part of the curriculum dives deeper into the intricacies of the term &lt;em&gt;quality&lt;/em&gt; and explains its characteristics. &lt;/p&gt;

&lt;p&gt;You will learn about quality models, such as the well-known ISO 25010 standard, from a practical viewpoint.&lt;/p&gt;

&lt;p&gt;Specifically, clarifying quality requirements is addressed, e.g. by using quality scenarios. In addition, the analysis of quality is covered -- together with its methodical brethren, the quantitative approaches to analyzing and evaluating software architectures.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-5-practical-examples"&gt;
  &lt;/a&gt;
  Part 5 -- Practical examples
&lt;/h2&gt;

&lt;p&gt;Examples are the best learning tool: Only through examples does architectural knowledge become tangible and visible. Experienced iSAQB trainers are able to complement the conceptual background from the learning objectives with real life situations and experiences.&lt;/p&gt;

&lt;p&gt;Using examples, you will be able to understand the relationship between requirements and the technical and architectural solution. &lt;br&gt;
In addition, you will be able to understand the rationale behind specific architectural decisions (aka &lt;em&gt;design rationale&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Please note -- every trainer is free to select their own examples that fit a particular training situation. Think about what kind of examples you want to see and experience prior to attending a training!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#education-needs-practice"&gt;
  &lt;/a&gt;
  Education needs practice
&lt;/h2&gt;

&lt;p&gt;iSAQB training courses always include intensive practice sessions, where you will tackle specific architectural challenges in small and focused groups. Such exercises help impart knowledge and skills.&lt;/p&gt;

&lt;p&gt;Similar to the practical architecture examples from part-5 of the curriculum, the contents of these exercises is up to your trainers. Hands-on exercises are mandatory for parts 1 to 4 of the curriculum and ensure that the key learning objectives are covered.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#supporting-material"&gt;
  &lt;/a&gt;
  Supporting material
&lt;/h2&gt;

&lt;p&gt;Due to the complex nature of software architecture, it is recommended that you attend accredited training classes in case you aim for the iSAQB CPSA-Foundation certification. Such courses have a minimum duration of 3 days, which makes them efficient educational events. In case you want to supplement your training, there are several (free) publications that complement the curriculum:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A comprehensive glossary of terms. A free ebook, defining the terms used in iSAQB curricula. It's available both as eBook from Leanpub and as an &lt;a href="https://leanpub.com/isaqbglossary"&gt;online reference&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;An annotated collection of software architecture books and references. Compiled by iSAQB contributors, freely available on &lt;a href="https://leanpub.com/isaqbreferences"&gt;Leanpub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://isaqb-org.github.io/"&gt;mock (&lt;em&gt;sample&lt;/em&gt;) examination&lt;/a&gt;, containing approx 40 sample questions plus answers, for optimum preparation for the CPSA-F examination.&lt;/li&gt;
&lt;li&gt;A companion study guidebook, perfect to prepare for the CPSA-F certification is the exam preparation guide: "Software Architecture Foundation -- CPSA-F Exam Preparation". &lt;a href="https://www.vanharen.store/software-architecture-foundation"&gt;VanHaren International&lt;/a&gt;, 2021. This book explains all 40 learning goals in details, helping you to prepare for the CPSA-F certification. Disclaimer: I am co-author of this book.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;Cover image:  Photo by &lt;a href="https://unsplash.com/@timmossholder?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Tim Mossholder&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/education?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>isaqb</category>
      <category>architecture</category>
      <category>education</category>
    </item>
  </channel>
</rss>
