<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to create a form app with the Notion API </title>
      <author>Ryan</author>
      <pubDate>Mon, 24 Jan 2022 14:23:07 +0000</pubDate>
      <link>https://dev.to/up_to_nonsense/how-to-create-a-form-app-with-the-notion-api-1o2</link>
      <guid>https://dev.to/up_to_nonsense/how-to-create-a-form-app-with-the-notion-api-1o2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#a-tutorial-using-reactjs-and-expressjs"&gt;
  &lt;/a&gt;
  A tutorial using React.js and Express.js
&lt;/h2&gt;

&lt;p&gt;The Notion API officially came out of beta on May 13, 2021, enabling web developers to create cool apps that integrate with your Notion workspace, an example being ourselves, Commotion. For our form tool, we use the Notion API to save form responses to a connected Notion database. In this tutorial, we’re gonna show you how to create a simple form tool like ours that accepts emails with an html form and saves it to your Notion workspace. Let’s get started!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-setup-the-notion-stuff"&gt;
  &lt;/a&gt;
  1. Setup the Notion stuff
&lt;/h3&gt;

&lt;p&gt;First, create a Notion account (obviously). Then create a Database table (typing in ‘/database’) and add a column called Email that is of type email, like below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sF_-RxwQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/reslant.appspot.com/o/forums%252F418b1%252Fposts%252Fc67b7991-d19d-49b9-931e-d5aeb71acbc8%252Fcbef53ff-b0d1-46f7-9136-d906e815b15e%3Falt%3Dmedia%26token%3D5b3588ef-0654-409e-a0af-145d5d03065d" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sF_-RxwQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/reslant.appspot.com/o/forums%252F418b1%252Fposts%252Fc67b7991-d19d-49b9-931e-d5aeb71acbc8%252Fcbef53ff-b0d1-46f7-9136-d906e815b15e%3Falt%3Dmedia%26token%3D5b3588ef-0654-409e-a0af-145d5d03065d" alt="Sample Notion Database" width="880" height="557"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open the database object as its own page by clicking the expand icon. We’ll come back to this in a second.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k6vwmEKY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/reslant.appspot.com/o/forums%252F418b1%252Fposts%252Fc67b7991-d19d-49b9-931e-d5aeb71acbc8%252F950ab2ac-b5d5-429c-920d-d9b1ace3c6a7%3Falt%3Dmedia%26token%3D88cddaa4-5ea7-4a09-9b2b-026c3df9ad77" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6vwmEKY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/reslant.appspot.com/o/forums%252F418b1%252Fposts%252Fc67b7991-d19d-49b9-931e-d5aeb71acbc8%252F950ab2ac-b5d5-429c-920d-d9b1ace3c6a7%3Falt%3Dmedia%26token%3D88cddaa4-5ea7-4a09-9b2b-026c3df9ad77" alt="Expand Notion Database" width="880" height="227"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Then go to &lt;a href="https://www.notion.so/my-integrations"&gt;https://www.notion.so/my-integrations&lt;/a&gt; and select “Create new integration” and give it the name “Basic Form” or something.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pyv7ODdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/reslant.appspot.com/o/forums%252F418b1%252Fposts%252Fc67b7991-d19d-49b9-931e-d5aeb71acbc8%252F50d01d00-813f-4152-8653-ec4245af61b8%3Falt%3Dmedia%26token%3De1f8351d-57bf-4174-b1fc-1e5d75ddd48b" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pyv7ODdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/reslant.appspot.com/o/forums%252F418b1%252Fposts%252Fc67b7991-d19d-49b9-931e-d5aeb71acbc8%252F50d01d00-813f-4152-8653-ec4245af61b8%3Falt%3Dmedia%26token%3De1f8351d-57bf-4174-b1fc-1e5d75ddd48b" alt="Notion integrations page" width="880" height="580"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Go back to your database’s Notion page and share the database with the app you just created by hitting Share on the top right, clicking the Invite input in the dropdown, and selecting your app from the popup. This makes sure that the API actually has access to this database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fkuyzPMH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/reslant.appspot.com/o/forums%252F418b1%252Fposts%252Fc67b7991-d19d-49b9-931e-d5aeb71acbc8%252F47fd8cd5-a0d4-4bc2-a4fc-5274032c4dc4%3Falt%3Dmedia%26token%3D61ea072d-e2c8-4e8d-854b-b03cd6701527" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fkuyzPMH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/reslant.appspot.com/o/forums%252F418b1%252Fposts%252Fc67b7991-d19d-49b9-931e-d5aeb71acbc8%252F47fd8cd5-a0d4-4bc2-a4fc-5274032c4dc4%3Falt%3Dmedia%26token%3D61ea072d-e2c8-4e8d-854b-b03cd6701527" alt="Notion share with API" width="880" height="595"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-setup-your-backend-with-expressjs"&gt;
  &lt;/a&gt;
  2. Setup your backend with Express.js
&lt;/h3&gt;

&lt;p&gt;For this tutorial, we need to setup a backend, so we’re going with Express. You can read how to set it up here, but the gist of it is to go to a new folder and input the following commands in your terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir form-tool-backend
$ cd form-tool-backend
$ npm install express
$ npm install axios
$ npm install cors
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Within the form-tool-backend folder, create a file app.js and paste the following into it just to get things going.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// form-tool-backend/app.js

const express = require('express')
const axios = require('axios')
const app = express()
const port = 3002

app.listen(port, () =&amp;gt; {
  console.log(`Example app listening on port ${port}`)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why do we need a backend? Because we need to use secret keys that we don’t want to leak out. If someone were to get your secret key, that would be able to read and and write anything to your Notion workspace! Very scary.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-retrieve-database-information-with-the-notion-api"&gt;
  &lt;/a&gt;
  3. Retrieve Database Information with the Notion API
&lt;/h3&gt;

&lt;p&gt;Finally, let’s actually start building! I’d open up &lt;a href="https://developers.notion.com/reference"&gt;https://developers.notion.com/reference&lt;/a&gt; cause we’ll be referencing this page a lot. First, we need to get our secret key, so let’s go back to &lt;a href="https://www.notion.so/my-integrations"&gt;https://www.notion.so/my-integrations&lt;/a&gt;, select our app, then copy our Internal Integration Token. Make sure to not leak this!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HGjV3fhX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1sr44ecnf7dkr5z68n5a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HGjV3fhX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1sr44ecnf7dkr5z68n5a.png" alt="Get secret key" width="880" height="514"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Paste the following code below into your app.js and replace the secretKey variable with the token you just copied. We’ll then create a route that fetches the database data with axios.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// form-tool-backend/app.js

const express = require('express')
const axios = require('axios')
const app = express()
const port = 3002

// REPLACE! Retrieved from https://www.notion.so/my-integrations
const secretKey = 'secret_***************'

// What we'll pass into axios
const headers = {
  'Content-Type': 'application/json',
  Authorization: `Bearer ${secretKey}`,
  'Notion-Version': '2021-08-16',
}

// Route to fetch database data
app.get('/:database_id', async (req, res) =&amp;gt; {
  const { database_id } = req.params;
  const resp = await axios({
    method: 'GET',
    url: 'https://api.notion.com/v1/databases/' + database_id,
    headers
  });
  return res.json(resp.data);
})

app.use(cors())
app.use(express.json())
app.listen(port, () =&amp;gt; {
  console.log(`Example app listening on port ${port}`)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have something to test! Within your form-tool-backend folder, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ node app.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go back to your Notion database in your browser and copy your database_id from your Notion url, marked as the part here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r9mn3aqn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ag6c49r4h2o4ytnbavq1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r9mn3aqn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ag6c49r4h2o4ytnbavq1.png" alt="Get Database ID" width="880" height="595"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now if your run the following in a different terminal tab:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl http://localhost:3002/REPLACE_THIS_WITH_DATABASE_ID
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should get the data from your database!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-setup-your-frontend-with-reactjs"&gt;
  &lt;/a&gt;
  4. Setup your frontend with React.js
&lt;/h3&gt;

&lt;p&gt;Next, we need to create our frontend. In this case, we’re using React. Go to your terminal, go to the folder you want to put all your code in, and input the following command to create a sample app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npx create-react-app form-tool
$ cd form-tool
$ npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q6f0ctyk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9usq1pqcvdzsuoj49d02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q6f0ctyk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9usq1pqcvdzsuoj49d02.png" alt="Empty React app" width="880" height="557"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Let’s make some changes, shall we? Replace the contents of the App.js with the below, and replace the database_id value with the one you copied earlier from the Notion URL.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// form-tool/src/App.js

import { useEffect, useState } from 'react';

const database_id = REPLACE_WITH_YOUR_DATABASE_ID;

function App() {
  const [db, setDB] = useState({});

  useEffect(() =&amp;gt; {
    // We fetch the data from the local server that we're running
    fetch('http://localhost:3002/' + database_id).then(async (resp) =&amp;gt; {
      setDB(await resp.json())
    });
  }, []);

  return (
    &amp;lt;div&amp;gt;
      {db.title?.[0]?.plain_text}
    &amp;lt;/div&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This just gets the data that our backend retrieves and brings it into our frontend. The schema for a database object is a little unique, so checkout the official documentation here. If we run npm start, we should get the following.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_h0sPsc3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtnxz5501k8j5hy3nt6a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_h0sPsc3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtnxz5501k8j5hy3nt6a.png" alt="Bare bones site" width="880" height="580"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We’ve officially fetched data from our Notion workspace! Hooray!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-save-form-response-to-notion"&gt;
  &lt;/a&gt;
  5. Save form response to Notion
&lt;/h3&gt;

&lt;p&gt;Finally, what we’ve all been waiting for, let’s actually take some information and save it to our database shall we? We’ll start by adding a simple form in our frontend React project that sends the email + name to our backend to send to Notion.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useEffect, useState } from 'react';

const database_id = REPLACE_WITH_YOUR_DATABASE_ID;

function App() {
  const [db, setDB] = useState({});

  // NEW! This will send the form information to our backend we setup
  const onSubmit = (e) =&amp;gt; {
    e.preventDefault();
    fetch('http://localhost:3002/' + database_id, {
      method: 'POST',
      body: JSON.stringify({ email: e.target.email.value, name: e.target.name.value }),
      headers: { "Content-Type": 'application/json' }
    });
  }

  useEffect(() =&amp;gt; {
    fetch('http://localhost:3002/' + database_id).then(async (resp) =&amp;gt; {
      setDB(await resp.json());
    });
  }, []);

  return (
    &amp;lt;div&amp;gt;
      {db.title?.[0]?.plain_text}
      {/* NEW! This is an extremely simple form to collect the information */}
      &amp;lt;form onSubmit={onSubmit}&amp;gt;
        &amp;lt;input name="name" placeholder="Name" required /&amp;gt;
        &amp;lt;input name="email" placeholder="Email" type="email" required /&amp;gt;
        &amp;lt;button&amp;gt;Submit&amp;lt;/button&amp;gt;
      &amp;lt;/form&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RVq8XgPi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/li39c1t52p8mh4tsk94e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RVq8XgPi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/li39c1t52p8mh4tsk94e.png" alt="Add simple form" width="880" height="557"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We now have an extremely simple form. Right now, nothing actually happens if we submit the form. That’s cause we need to build the backend function! If we switch back to our Express app, we can create a POST route that accepts our data, the name and email, and sends it to our Notion database. Entries in a database are equivalent to a Notion “page”, so we need to create a page where the database_id is the parent. You can reference &lt;a href="https://developers.notion.com/reference/post-page"&gt;https://developers.notion.com/reference/post-page&lt;/a&gt; to get a better sense of what this means.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express')
const axios = require('axios')
const cors = require('cors')
const app = express()
const port = 3002

// REPLACE! Retrieved from https://www.notion.so/my-integrations
const secretKey = 'secret_***************'

// What we'll pass into axios
const headers = {
  'Content-Type': 'application/json',
  Authorization: `Bearer ${secretKey}`,
  'Notion-Version': '2021-08-16',
}

// NEW! This is a new route that will actually send the information to Notion
app.post('/:database_id', async (req, res) =&amp;gt; {
  const { database_id } = req.params
  const { name, email } = req.body
  await axios({
    method: 'POST',
    url: 'https://api.notion.com/v1/pages',
    headers,
    data: {
      parent: { database_id },
      properties: {
        "Name": { "title": [{ text: { content: name } }] },
        "Email": { "email": email }
      }
    }
  })
})

// Route to fetch 
app.get('/:database_id', async (req, res) =&amp;gt; {
  const { database_id } = req.params;
  const resp = await axios({
    method: 'GET',
    url: 'https://api.notion.com/v1/databases/' + database_id,
    headers
  });
  return res.json(resp.data)
})

app.use(cors())
app.use(express.json())
app.listen(port, () =&amp;gt; {
  console.log(`Example app listening on port ${port}`)
})

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we get this up and running and we restart our backend by quitting and rerunning node app.js , we can input a name and email into our form and it will save to our Notion database! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nDkYC8if--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gn53w7ivnlitpehgy01n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nDkYC8if--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gn53w7ivnlitpehgy01n.png" alt="Saved database" width="880" height="595"&gt;&lt;/a&gt;   &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-bonus-for-next-time"&gt;
  &lt;/a&gt;
  6. Bonus: For next time
&lt;/h3&gt;

&lt;p&gt;So this has been a tutorial on how to save form responses to YOUR Notion database, but this doesn’t explain how we at Commotion are able to save responses to ANYONE’s Notion database. This requires making your integration a public one and having your user connect their Notion account like how we do it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UN7bN2Fb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2byeys7a40thc8q6ajy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UN7bN2Fb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2byeys7a40thc8q6ajy.png" alt="Connect with Notion" width="880" height="603"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bCJrBQky--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cgvzxaf1ii75z7gwiotj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bCJrBQky--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cgvzxaf1ii75z7gwiotj.png" alt="Notion connector" width="880" height="696"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We’ll save this for another time, but it’s not actually too bad. We’re 75% of the way there already. In the mean time, please check out Commotion if you need to create forms that work with your Notion workspace or want to send emails to contacts in a Notion database, mail merge style. We hope that this was informative!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Top 5 essential skills for fresh parents</title>
      <author>TomislavNovacicBF</author>
      <pubDate>Mon, 24 Jan 2022 14:06:58 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/top-5-essential-skills-for-fresh-parents-2jne</link>
      <guid>https://dev.to/bornfightcompany/top-5-essential-skills-for-fresh-parents-2jne</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;This article is all about work-life "balance" and how to continue progressing in your career after the baby comes. I will write about my conclusions and organisation in this new environment. We will wrap things up with 5 essential skills you can work on to prepare yourself for the arrival of the newcomer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-comfort-zone"&gt;
  &lt;/a&gt;
  The comfort zone
&lt;/h2&gt;

&lt;p&gt;Things are going great, you are learning new stuff and reading work-related articles on a daily basis. You are as motivated as ever, advancing really quickly and on your way to become a ninja developer (or other equivalent role). Your diet is on check and you are getting your workouts in. Nothing can stop you! And then one day you become a parent...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-chaos"&gt;
  &lt;/a&gt;
  The chaos
&lt;/h2&gt;

&lt;p&gt;At the beginning things are going good, but as the baby grows you start to realise that your free time becomes shorter and shorter, and soon enough you will have practically no free time. You now don’t have time for your partner or working out, let alone for personal development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What to do now? How to continue working on your goals and be there for your child at the same time?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;People always talk about work-life balance and you always thought it was some nonsense that lazy people say? Yeah, me too. Well there is some truth in that approach, because now you just have to make things work somehow. Save yourself a few months (or a year) of getting the hang on things and start working on this skills immediately if you are expecting kids any time soon.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#top-5-skills-ambitious-parent-needs"&gt;
  &lt;/a&gt;
  Top 5 skills ambitious parent needs
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. Time management&lt;/strong&gt;&lt;br&gt;
Day only has 24 hours so try to get the best out of every minute. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Read whenever you have a few minutes to spare.&lt;/strong&gt; Read while your partner is playing with the baby, when you're in the rest room, in the bed after everyone is asleep and you have few atoms of energy left.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Get up early&lt;/strong&gt;. Wake up first and start your day in a complete peace (and use that time wisely).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Work from home&lt;/strong&gt;. If you have the option to work from home, just take it - you’ll save a bunch of commute and getting-ready hours, and you can use that in a better way. If that is not a possibility for you, then travel to work with public transportation so you can do some work while you are on your way to the office. If you, for some reason, prefer the car over public transportation then you can listen to audio books or podcasts while driving.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Don't sacrifice sleep&lt;/strong&gt;, it's counter productive after some time and it's not worth it in the end. Fresh mind = more focus = better productivity and more growth.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2. Organization&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Try to plan every minute of your day up front&lt;/strong&gt;. This enables you to see how much literature you can consume in a day. According to that you can set realistic goals and don't get frustrated thinking you've done too little that day. When you precisely estimate every action in your day, you unknowingly start to do repetitive tasks even more quickly (eating for example).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3. Multitasking&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Incorporate learning in any activity that does not require your complete focus&lt;/strong&gt;. Listen to audio books while you are grocery shopping, cleaning, cooking, in the gym or walking a dog. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;4. Focus&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Focus 110% while working&lt;/strong&gt;. That is the only time of the day that is strictly dedicated for your work and personal growth. It’s also the only time when you’ll have complete peace and no distractions. You’ll start to appreciate those hours more.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Start adjusting to working in non-ideal environments&lt;/strong&gt;. There will be times when you have to work or read and kids are screaming and running around, and you have to get used to it (it gets better over time I promise).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;5. Dedication&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Prioritise&lt;/strong&gt;. Not all things you stumble upon on your go-to reading materials are important for your line of work. Read only about stuff that is applicable to your work and future aspirations, skip the rest. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Delete your social media accounts&lt;/strong&gt; (or leave them but use them responsibly). The same goes for TV and gaming consoles. Time spent on these platforms is valuable and cannot be returned.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;P.S. Don't forget to spend quality time with your family, don't be a stranger. This article focuses on the parts of the day you are "free".&lt;/p&gt;

&lt;p&gt;Did I forget anything? Does any of this sound familiar to you? Feel free to react and comment down below.&lt;/p&gt;

</description>
      <category>engineeringmonday</category>
      <category>productivity</category>
      <category>learning</category>
      <category>motivation</category>
    </item>
    <item>
      <title>CSS Pseudo-classes: Element states</title>
      <author>Chris Bongers</author>
      <pubDate>Mon, 24 Jan 2022 13:41:37 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/css-pseudo-classes-element-states-1gim</link>
      <guid>https://dev.to/dailydevtips1/css-pseudo-classes-element-states-1gim</guid>
      <description>&lt;p&gt;So far, we have already had a look at links and form pseudo-classes. In this article, we'll dive into element states.&lt;/p&gt;

&lt;p&gt;Element states reflect on a specific condition an element could have. This can, for instance, be &lt;code&gt;first-of-type&lt;/code&gt; or the &lt;code&gt;last-child&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I've split this up into a series of four, where this is the third part about form pseudo-states.&lt;/p&gt;

&lt;p&gt;The other parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://daily-dev-tips.com/posts/css-pseudo-classes-links/"&gt;Link pseudo-states&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://daily-dev-tips.com/posts/css-pseudo-classes-forms/"&gt;Form pseudo-states&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Element state selectors&lt;/em&gt; (this one 💖)&lt;/li&gt;
&lt;li&gt;Other pseudo states (coming soon)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#element-state-selectors"&gt;
  &lt;/a&gt;
  Element state selectors
&lt;/h2&gt;

&lt;p&gt;Element state selectors are pseudo-classes I've used a lot in my articles.&lt;br&gt;
They are a great way to select a particular matching element and apply specific styling.&lt;/p&gt;

&lt;p&gt;We get the following options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:first-child&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:last-child&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:only-child&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:first-of-type&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:last-of-type&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:nth-child&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:nth-of-type&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:only-of-type&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:empty&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#-raw-firstchild-endraw-raw-lastchild-endraw-amp-raw-onlychild-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;:first-child&lt;/code&gt;, &lt;code&gt;:last-child&lt;/code&gt;, &amp;amp; &lt;code&gt;:only-child&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;These are great if you want to apply specific styling to the first or last elements.&lt;/p&gt;

&lt;p&gt;They are often used to offset margin on a list, for instance.&lt;/p&gt;

&lt;p&gt;Let's try out something simple and change the colors of the first and last elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nd"&gt;:first-child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hotPink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nd"&gt;:last-child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;teal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And for the only-child, we can use the following selector.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nd"&gt;:only-child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;crimson&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Be careful when using these as they fire in order.&lt;br&gt;
If you have all three, the only-=child technically also is valid for the first &amp;amp; last-child selector!&lt;/p&gt;

&lt;p&gt;You can see what happens in this CodePen.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/PoJVmWO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-firstoftype-endraw-amp-raw-lastoftype-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;:first-of-type&lt;/code&gt; &amp;amp; &lt;code&gt;:last-of-type&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;These are very close to the above, but with one distinct difference.&lt;/p&gt;

&lt;p&gt;For instance, &lt;code&gt;first-child&lt;/code&gt; needs the element to be the first element in the selector.&lt;br&gt;
As &lt;code&gt;first-of-type&lt;/code&gt; it styles the first occurrence of that element.&lt;/p&gt;

&lt;p&gt;The easiest way to showcase this is by having an HTML structure where we want the first &lt;code&gt;strong&lt;/code&gt; element to be thicker than the rest.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Line one&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;Important line&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Line two&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;Slightly less important line&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Line three&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;strong&lt;/span&gt;&lt;span class="nd"&gt;:first-child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hotPink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;strong&lt;/span&gt;&lt;span class="nd"&gt;:first-of-type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;purple&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll be able to see the first strong being purple and not pink because that won't fire!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: You can even try and remove the &lt;code&gt;first-of-type&lt;/code&gt; line.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And the same can be done with &lt;code&gt;last-of-type&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;strong&lt;/span&gt;&lt;span class="nd"&gt;:last-child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;gold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;strong&lt;/span&gt;&lt;span class="nd"&gt;:last-of-type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;crimson&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see what happens in the CodePen below.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/VwMgbrp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-nthchild-endraw-amp-raw-nthoftype-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;nth-child&lt;/code&gt; &amp;amp; &lt;code&gt;nth-of-type&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;These two are fantastic, and I use these quite often.&lt;br&gt;
If even dedicated a complete article on &lt;a href="https://daily-dev-tips.com/posts/css-nth-child-selector-basics/"&gt;CSS &lt;code&gt;nth-child&lt;/code&gt; selectors&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;They can be used the select the &lt;code&gt;x&lt;/code&gt;th item.&lt;/p&gt;

&lt;p&gt;For instance you can to style the second item:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;gold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The cool part with this selector is that it doesn't just have one static value. You can use values like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;odd&lt;/code&gt;/&lt;code&gt;even&lt;/code&gt;: Select odd or even numbers&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;2n+2&lt;/code&gt;: Select every 2nd item&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: &lt;a href="https://css-tricks.com/examples/nth-child-tester/"&gt;CSS-tricks has this cool nth-tester tool&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's try them out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hotPink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;odd&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hotPink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="nt"&gt;n&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hotPink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And again, we can use the &lt;code&gt;nth-of-type&lt;/code&gt; selector to target types instead of actual first items.&lt;br&gt;
This can be super useful for images, for instance, if you want them left/right based on their occurrence.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/ExwrmRV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-onlyoftype-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;only-of-type&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;This is quite a funny one. It fires if the selector is only one of a type.&lt;/p&gt;

&lt;p&gt;Where the &lt;code&gt;only-child&lt;/code&gt; can only have one child, this one can say if an element only has 1 of this child.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;strong&lt;/span&gt;&lt;span class="nd"&gt;:only-of-type&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hotPink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which will result in the following:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/BawMROP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-empty-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;:empty&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The last one is the empty selector. It can be used to indicate empty elements.&lt;/p&gt;

&lt;p&gt;Some people even use this as a way to find misplaced elements.&lt;/p&gt;

&lt;p&gt;You can also use this when using WYSIWYG editors that add empty &lt;code&gt;p&lt;/code&gt; tags.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:empty&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/yLzZbQm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to schedule (start and stop) EC2 instances easily</title>
      <author>Federico Navarrete</author>
      <pubDate>Mon, 24 Jan 2022 13:24:05 +0000</pubDate>
      <link>https://dev.to/fanmixco/how-to-schedule-ec2-instances-easily-dnh</link>
      <guid>https://dev.to/fanmixco/how-to-schedule-ec2-instances-easily-dnh</guid>
      <description>&lt;p&gt;Everyone would like to schedule EC2 instances and save a couple of bucks. Today, I'm bringing you a small Python that can help you. The steps are the following ones:&lt;/p&gt;

&lt;p&gt;1) Create a lambda function called: &lt;strong&gt;ec2_scheduler&lt;/strong&gt;&lt;br&gt;
2) Copy and paste the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;boto3&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="n"&gt;region&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'REGION'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ec2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'ec2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;region_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;region&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;instances&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;lambda_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Action'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ec2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;describe_instances&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Filters&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;'Name'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'instance-state-name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'Values'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'Name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'tag-key'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Values'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'auto-scheduled'&lt;/span&gt;&lt;span class="p"&gt;]}])&lt;/span&gt;
    &lt;span class="n"&gt;reservations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Reservations'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;reservation&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;reservations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;reservation&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Instances'&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="n"&gt;instanceId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'InstanceId'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Tags'&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Key'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'auto-scheduled'&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Value'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'true'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;instances&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instanceId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'stopped'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instances&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;ec2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_instances&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InstanceIds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;instances&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instances&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;ec2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop_instances&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InstanceIds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;instances&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3) Set a tag to your EC2 instance called: &lt;strong&gt;auto-scheduled&lt;/strong&gt; that has a value assigned as &lt;strong&gt;true&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;4) Add a new &lt;strong&gt;Policy&lt;/strong&gt; in the configuration and permission section of your Lambda that contains:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2012-10-17"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Statement"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Effect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Allow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"logs:CreateLogGroup"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"logs:CreateLogStream"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"logs:PutLogEvents"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Resource"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"arn:aws:logs:*:*:*"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Effect"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Allow"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"ec2:Start*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"ec2:Stop*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"ec2:Describe*"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Resource"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"*"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;5) Schedule your Lambda as triggers with a cron expressions like these ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For &lt;strong&gt;starting&lt;/strong&gt;: cron(0 6 ? * MON-FRI *)&lt;/li&gt;
&lt;li&gt;For &lt;strong&gt;stopping&lt;/strong&gt;: cron(0 16 ? * MON-FRI *)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;6) Set a JSON that contains the following expression to know if it's starting or stopping:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For &lt;strong&gt;starting&lt;/strong&gt;:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"stopped"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;For &lt;strong&gt;stopping&lt;/strong&gt;:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Action"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"running"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's all!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/fanmixco"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wSo9h5tu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/FANMixco/Xamarin-SearchBar/master/bmc-rezr5vpd.gif" alt="sponsor me" width="300" height="100"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cover credits:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tridentsys.net/howto-schedule-ec2/"&gt;https://tridentsys.net/howto-schedule-ec2/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>ec2</category>
      <category>lambda</category>
      <category>python</category>
    </item>
    <item>
      <title>Vote for what you want to learn! YouTube Channel for Shopify Developers!</title>
      <author>Daniel Kolb</author>
      <pubDate>Mon, 24 Jan 2022 13:20:49 +0000</pubDate>
      <link>https://dev.to/danielkolb/im-creating-a-youtube-channel-for-shopify-developers-536l</link>
      <guid>https://dev.to/danielkolb/im-creating-a-youtube-channel-for-shopify-developers-536l</guid>
      <description>&lt;p&gt;Hi all!&lt;/p&gt;

&lt;p&gt;I’ll start a YouTube channel about code/design/product management shortly. For the first few months, I’ll focus on Coding with Shopify.&lt;/p&gt;

&lt;p&gt;Currently I’m in the process of picking the right topics. I will include Tutorials, Live Code streams and “XXX in 100 seconds” videos.&lt;/p&gt;

&lt;p&gt;I’ve already prepared a couple of ideas here and would like you to &lt;strong&gt;VOTE&lt;/strong&gt; them and also add more to the list. This can be done anonymously, so please don’t break it.&lt;/p&gt;

&lt;p&gt;Here you go: &lt;a href="https://daniel-kolb-youtube-ideas.nolt.io/top"&gt;https://daniel-kolb-youtube-ideas.nolt.io/top&lt;/a&gt; . &lt;/p&gt;

&lt;p&gt;Thanks to everyone who want to participate!&lt;/p&gt;

</description>
      <category>shopify</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>How to make fully working ecom website part 2 [ Source code ]</title>
      <author>Modern Web</author>
      <pubDate>Mon, 24 Jan 2022 13:06:48 +0000</pubDate>
      <link>https://dev.to/kunaal438/sign-uplogin-learn-to-make-a-working-ecom-website-in-2022-source-code--4l0</link>
      <guid>https://dev.to/kunaal438/sign-uplogin-learn-to-make-a-working-ecom-website-in-2022-source-code--4l0</guid>
      <description>&lt;p&gt;Hello guys, welcome here. In today's article we'll see to create a working ecom website. Well this is a second part of it. So if you haven't watched the &lt;a href="https://youtu.be/vHCSnaUdNkE"&gt;first part&lt;/a&gt; where we made the home page, product page, search page and 404 page. Then I'll recommend you watch that part first.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zPE9-LLi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1nblsbkqbjbblj7mb5p6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zPE9-LLi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1nblsbkqbjbblj7mb5p6.png" alt="Image" width="880" height="453"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;So in the second, we'll learn to create a working sign up page. We will make our own localhost server using &lt;code&gt;express.js&lt;/code&gt;. We'll also learn to validate the form data using &lt;code&gt;if &amp;amp; else&lt;/code&gt; in JS. We'll learn to manipulate CSS styles from JS and make dynamic HTML elements from JS. Basically we'll learn a lot of stuff in this part. Well all the code was about backend with little bit of front end. I thought not write a blog on it, instead you can watch the coding tutorial below in the video where I explained each and everything step by step. If don't want to watch the video, no worry you can download the source code from &lt;a href="https://www.patreon.com/posts/61574565/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/SB-oPvvd6F4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you do like the tutorial make sure to give it a thumbs up and also consider subscribing my channel.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/c/modern_web?sub_confirmation=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5gs5zBA7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jeitpawvax07cx7r9yoa.png" width="334" height="90"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Your best vsc setup</title>
      <author>lukas</author>
      <pubDate>Mon, 24 Jan 2022 13:02:34 +0000</pubDate>
      <link>https://dev.to/lukasw12v/your-best-vsc-setup-4nd7</link>
      <guid>https://dev.to/lukasw12v/your-best-vsc-setup-4nd7</guid>
      <description>&lt;p&gt;Hey guys,&lt;br&gt;
this is my first post after reading hundreds.&lt;/p&gt;

&lt;p&gt;Today, I want to share with you my vsc setup with all my extensions I find useful. I created the public gist to have a fast vsc setup out of the box ready in under a minute and to not always install the extensions by hand.&lt;/p&gt;

&lt;p&gt;From color themes, formatters and assistens to docker, git and bookmarks.&lt;/p&gt;

&lt;p&gt;Maybe this setup doesn't fit your needs or it inlcudes to many extensions but it is defenetly a good overview of the top vsc extensions out there to accelerate your development.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/lukasw12V/02676ed1c28922c5d72671c2af81d07b"&gt;Get the VSC Setup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To use this setup you need to config your vsc:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install &lt;a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync"&gt;Settings Sync&lt;/a&gt; in vsc&lt;/li&gt;
&lt;li&gt;(optional) Connect your github account by creating a new access token or use your current one (&lt;a href="https://github.com/settings/tokens"&gt;https://github.com/settings/tokens&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Copy the public gist-id &lt;strong&gt;02676ed1c28922c5d72671c2af81d07b&lt;/strong&gt; and paste it in the 'Gist-ID' Settings Sync input field.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rTNSUhr5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkl20fvwksdgd5ufcqas.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rTNSUhr5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkl20fvwksdgd5ufcqas.png" alt="Demo Image" width="880" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Used extensions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;auto-close-tag&lt;/li&gt;
&lt;li&gt;auto-complete-tag&lt;/li&gt;
&lt;li&gt;auto-rename-tag&lt;/li&gt;
&lt;li&gt;ayu v1.0.5better-comments&lt;/li&gt;
&lt;li&gt;blox&lt;/li&gt;
&lt;li&gt;Bookmarks&lt;/li&gt;
&lt;li&gt;bracket-pair-colorizer-2&lt;/li&gt;
&lt;li&gt;code-settings-sync&lt;/li&gt;
&lt;li&gt;code-spell-checker&lt;/li&gt;
&lt;li&gt;color-highlight&lt;/li&gt;
&lt;li&gt;csharp&lt;/li&gt;
&lt;li&gt;dart-code&lt;/li&gt;
&lt;li&gt;dotenv&lt;/li&gt;
&lt;li&gt;es7-react-js-snippets&lt;/li&gt;
&lt;li&gt;file-icons&lt;/li&gt;
&lt;li&gt;flutter&lt;/li&gt;
&lt;li&gt;git-graph&lt;/li&gt;
&lt;li&gt;githistory&lt;/li&gt;
&lt;li&gt;gitignore&lt;/li&gt;
&lt;li&gt;gitlens&lt;/li&gt;
&lt;li&gt;go&lt;/li&gt;
&lt;li&gt;html-css-class-completion&lt;/li&gt;
&lt;li&gt;html-snippets&lt;/li&gt;
&lt;li&gt;html5-boilerplate&lt;/li&gt;
&lt;li&gt;indent-rainbow&lt;/li&gt;
&lt;li&gt;JavaScriptSnippets&lt;/li&gt;
&lt;li&gt;json&lt;/li&gt;
&lt;li&gt;LiveServer&lt;/li&gt;
&lt;li&gt;LogFileHighlighter&lt;/li&gt;
&lt;li&gt;markdown-all-in-one&lt;/li&gt;
&lt;li&gt;material-icon-theme&lt;/li&gt;
&lt;li&gt;night-owl&lt;/li&gt;
&lt;li&gt;npm-intellisense&lt;/li&gt;
&lt;li&gt;path-intellisense&lt;/li&gt;
&lt;li&gt;prettier-vscode&lt;/li&gt;
&lt;li&gt;project-manager&lt;/li&gt;
&lt;li&gt;refactor&lt;/li&gt;
&lt;li&gt;remote-containers&lt;/li&gt;
&lt;li&gt;sass-indented&lt;/li&gt;
&lt;li&gt;shades-of-purple&lt;/li&gt;
&lt;li&gt;shell-format&lt;/li&gt;
&lt;li&gt;tokyo-night&lt;/li&gt;
&lt;li&gt;typescript-hero&lt;/li&gt;
&lt;li&gt;vetur&lt;/li&gt;
&lt;li&gt;vscode-color&lt;/li&gt;
&lt;li&gt;vscode-css-formatter&lt;/li&gt;
&lt;li&gt;vscode-css-peek&lt;/li&gt;
&lt;li&gt;vscode-docker&lt;/li&gt;
&lt;li&gt;vscode-eslint&lt;/li&gt;
&lt;li&gt;vscode-github&lt;/li&gt;
&lt;li&gt;vscode-gutter-preview&lt;/li&gt;
&lt;li&gt;vscode-html-css&lt;/li&gt;
&lt;li&gt;vscode-kubernetes-tools&lt;/li&gt;
&lt;li&gt;vscode-tailwindcss&lt;/li&gt;
&lt;li&gt;vscode-yaml&lt;/li&gt;
&lt;li&gt;vue-snippets&lt;/li&gt;
&lt;li&gt;vue-vscode-snippets&lt;/li&gt;
&lt;li&gt;wvsc-serendipity&lt;/li&gt;
&lt;li&gt;xml&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>opensource</category>
      <category>vscode</category>
    </item>
    <item>
      <title>APACHE APISIX: As an API Gateway in Microservices
</title>
      <author>Dule Martins</author>
      <pubDate>Mon, 24 Jan 2022 12:36:38 +0000</pubDate>
      <link>https://dev.to/dulemart/apache-apisix-as-an-api-gateway-in-microservices-4c4b</link>
      <guid>https://dev.to/dulemart/apache-apisix-as-an-api-gateway-in-microservices-4c4b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of Content
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Microservices and Its Impact.&lt;/li&gt;
&lt;li&gt;API Gateway.&lt;/li&gt;
&lt;li&gt;How API Gateway Works.&lt;/li&gt;
&lt;li&gt;Integration of APISIX.&lt;/li&gt;
&lt;li&gt;Conclusion.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;When building your application as a set of microservices, you’d decide how your application’s clients will interact with the microservices. With a monolithic application there is just one set of touchpoints of communication between an API and a server. &lt;/p&gt;

&lt;p&gt;In a microservices architecture, however, each microservice exposes a set of what are typically fine‑grained endpoints. &lt;br&gt;
In this article, you’ll walk through how microservices impacts client‑to‑application communication and the integration of an API Gateway called &lt;strong&gt;&lt;a href="//www.apisix.apache.org"&gt;APISIX&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#microservices-and-its-impact"&gt;
  &lt;/a&gt;
  Microservices and Its Impact
&lt;/h2&gt;

&lt;p&gt;Designing an application that is multi-lingual and easily scalable, easy to maintain and deploy while minimizing failure, microservices are used to achieve such results. Microservice is the process of designing and developing separated components that come together to form a more functional system.&lt;/p&gt;

&lt;p&gt;Tasks are separately handled in microservice applications and its communication between clients and servers are handled using lightweight mechanisms. The communication between these services occurs through protocols such as HTTP, AMQP, and TCP. HTTP/REST and asynchronous messaging are the most widely used protocols. &lt;/p&gt;

&lt;p&gt;You can design your application as a collection of loosely coupled services that are connected together via an API Gateway.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-api-gateway"&gt;
  &lt;/a&gt;
  What is API Gateway
&lt;/h2&gt;

&lt;p&gt;The word API is an acronym for Application Programming Interface as you may already know, and it is a means of communication between clients and server. &lt;br&gt;
API gateway is a tool that manages clients and collection of backend services, it acts as an overturned proxy to accept all API calls made by the clients.&lt;/p&gt;

&lt;p&gt;It accumulates all requests made and provides the accurate result needed, an API gateway is one part of the API management system that handles all requests processed, and gives back it’s result, ensuring they continuously meet high performance and security standards.&lt;/p&gt;

&lt;p&gt;Enabling an API Gateway, you can create any type of APIs be it RESTful APIs and WebSocket APIs that foster real-time communication between applications. API Gateway supports containerized and serverless workloads, as well as web applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-api-gateway-works"&gt;
  &lt;/a&gt;
  How API Gateway Works
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9ayePaJV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20gob78hpn1ck8ez3apr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ayePaJV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20gob78hpn1ck8ez3apr.png" alt="API Gateway Pattern" width="870" height="498"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Cloud native architectures bring a whole new level of challenges, as does traffic from websites, mobile and IoT applications.”&lt;br&gt;
Based on the adaptation of architecture like microservice the APISIX Gateway was designed to handle more traffic from different sources.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mGY3Y0-X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/srn9bpzswd9uh3gfqb7c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mGY3Y0-X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/srn9bpzswd9uh3gfqb7c.png" alt="API Gateway Microservices" width="791" height="421"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integration-of-apisix"&gt;
  &lt;/a&gt;
  Integration of APISIX
&lt;/h2&gt;

&lt;p&gt;&lt;a href="//www.apisix.Apache.org"&gt;Apache APISIX&lt;/a&gt; is a dynamic, real-time, high-performance API gateway that provides rich traffic management features such as load balancing, dynamic upstream, canary release, service meltdown, authentication, observability, and other rich traffic management features.&lt;/p&gt;

&lt;p&gt;With the adoption of microservices over monolithic applications development, Apache APISIX is providing a more maintainable and scalable gateway system. For developers that are yet to be familiar with Apache APISIX, let me create this impression; APISIX is a dynamic version of Nginx. Using Lua to scale the development of plugins that has innovated the approach of traffic management.&lt;/p&gt;

&lt;p&gt;Apache APISIX don’t relate with database, it handles traffic from L4 and L7 Network services, playing the role of load balancing over these network protocols. Apache APISIX is more like an all in one solution for L7 traffic. There are other Open Source projects that are designed and developed to handle similar issues related with L7 traffic; Nginx, Envoy, Kubernetes (K8s): ingressive controller, and Service Mesh.&lt;/p&gt;

&lt;p&gt;Nginx is used in handling the movement of data packets that are initially entering a network from the clients, and while traffic within the data center – i.e server to server -- is also handled by Envoy. APISIX is one technology that handles both clients and server traffic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apisix-solution"&gt;
  &lt;/a&gt;
  APISIX SOLUTION
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tX8racJ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ohi7fo86dko1ngw6lzm1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tX8racJ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ohi7fo86dko1ngw6lzm1.png" alt="APISIX Solution" width="880" height="290"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#used-case"&gt;
  &lt;/a&gt;
  USED CASE
&lt;/h2&gt;

&lt;p&gt;Banks uses Java Spring Cloud gateway to manage their data processes, and openID connects plugins for Apache APISIX to configure &lt;a href="https://www.okta.com/products/authentication/"&gt;Okta authentication&lt;/a&gt;. &lt;br&gt;
“Unlike the traditional authentication model, the centralized authentication model takes user authentication out of the application service. &lt;/p&gt;

&lt;p&gt;Take Apache APISIX as an example, the centralized authentication process is shown in the following diagram: first, the user initiates a request, and then the front gateway is responsible for the user authentication process, interfacing with the identity provider and sending the identity provider an authorization) request to the identity provider. The identity provider returns user info. After the gateway identifies the user, it forwards the user identity information to the back-end application in the form of a request header.”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UljwrhPb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oglepd1b8a9euji994kb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UljwrhPb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oglepd1b8a9euji994kb.png" alt="APISIX Modern Authentication" width="292" height="173"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Enterprises worldwide have used Apache APISIX to handle business-critical traffic, covering finance, Internet, manufacturing, retail, carriers, and more, such as NASA, the EU's Digital Factory, China Airlines, China Mobile, Tencent, Huawei, Sina Weibo, NetEase, Ke, 360, Taikang, Nayuki, and more. You can get started &lt;a href="https://apisix.apache.org/docs/apisix/getting-started/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qpk76Ht3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/apache/apisix" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qpk76Ht3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/apache/apisix" alt="Github:" width="" height=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D_7MfnTL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://apisix.apache.org" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D_7MfnTL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://apisix.apache.org" alt="Official website:" width="" height=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>microservices</category>
      <category>cloudnative</category>
      <category>apigateway</category>
      <category>devops</category>
    </item>
    <item>
      <title>JavaScript Arrays &amp; Array Methods | Everything you need to know</title>
      <author>Chaoo Charles</author>
      <pubDate>Mon, 24 Jan 2022 12:26:18 +0000</pubDate>
      <link>https://dev.to/chaoocharles/javascript-arrays-array-methods-everything-you-need-to-know-3dal</link>
      <guid>https://dev.to/chaoocharles/javascript-arrays-array-methods-everything-you-need-to-know-3dal</guid>
      <description>&lt;p&gt;In the following video, I will teach you everything that you need to know about JavaScript &lt;code&gt;Arrays&lt;/code&gt; and &lt;code&gt;Array Methods&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The following are the topics covered:&lt;/p&gt;

&lt;p&gt;🚀 Arrays core concepts&lt;br&gt;
🤯 18 most common array methods &lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;push&lt;/li&gt;
&lt;li&gt;pop&lt;/li&gt;
&lt;li&gt;shift&lt;/li&gt;
&lt;li&gt;unshift&lt;/li&gt;
&lt;li&gt;splice&lt;/li&gt;
&lt;li&gt;slice&lt;/li&gt;
&lt;li&gt;concat&lt;/li&gt;
&lt;li&gt;indexOf&lt;/li&gt;
&lt;li&gt;lastIndexOf&lt;/li&gt;
&lt;li&gt;includes&lt;/li&gt;
&lt;li&gt;find&lt;/li&gt;
&lt;li&gt;findIndexOf&lt;/li&gt;
&lt;li&gt;filter&lt;/li&gt;
&lt;li&gt;forEach&lt;/li&gt;
&lt;li&gt;map&lt;/li&gt;
&lt;li&gt;sort&lt;/li&gt;
&lt;li&gt;reverse&lt;/li&gt;
&lt;li&gt;reduce&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;🔥 queue vs stack data structure in arrays&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#video-tutorial"&gt;
  &lt;/a&gt;
  Video Tutorial 👇
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4Dak03G-67k"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Amazon Elastic Block Storage (EBS)</title>
      <author>Ashutosh Mallick</author>
      <pubDate>Mon, 24 Jan 2022 12:19:50 +0000</pubDate>
      <link>https://dev.to/atm_06/amazon-elastic-block-storage-ebs-4m5a</link>
      <guid>https://dev.to/atm_06/amazon-elastic-block-storage-ebs-4m5a</guid>
      <description>&lt;p&gt;&lt;strong&gt;What is Instance storage?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Block-level storage volumes behave like physical hard drives.&lt;/li&gt;
&lt;li&gt;An instance store provides temporary block-level storage for an Amazon EC2 instance. &lt;/li&gt;
&lt;li&gt;An instance store is disk storage that is physically attached to the host computer for an EC2 instance, and therefore has the same 
lifespan as the instance. When the instance is terminated, you lose any data in the instance store.&lt;/li&gt;
&lt;li&gt;Let's create two ec2 instances such as "Ticked-server" and "Unticked-server" based upon their delete on termination protection for instance storage is kept on or off.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4wUvpdB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2bjkepnnnmxd8a01gi1o.png" alt="Image description" width="880" height="495"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XhCfOkfx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/icpv7c5ua19lbs0yslp2.png" alt="Image description" width="880" height="495"&gt;
-But if we terminate instances we are likely to lose our instance volumes.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UxhnhYMM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rppziz7dq2bip5vc1lgy.PNG" alt="Image description" width="473" height="481"&gt; 
-Now let's terminate both the instances. After termination we can see that the volume for unticked server remains as such. Thus even on termination we can have our data secured if we untick the "delete on termination section".
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2u_qmND6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7w6an6yt010tkafz5xs2.png" alt="Image description" width="880" height="495"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jtNXtWtC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvoau2iw2rgo3l1zpvaf.png" alt="Image description" width="880" height="495"&gt;
&lt;strong&gt;Amazon Elastic Block Store (EBS)&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;EBS is a block storage system used to store persistent data. &lt;/li&gt;
&lt;li&gt;Amazon EBS is suitable for EC2 instances by providing highly available block level storage volumes. &lt;/li&gt;
&lt;li&gt;It has three types of volume, i.e. General Purpose (SSD), Provisioned IOPS (SSD), and Magnetic. These three volume types differ in performance, characteristics, and cost.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;EBS General Purpose (SSD)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This volume type is suitable for small and medium workloads like Root disk EC2 volumes, small and medium database workloads, frequently logs accessing workloads, etc. By default, SSD supports 3 IOPS (Input Output Operations per Second)/GB means 1 GB 
volume will give 3 IOPS, and 10 GB volume will give 30 IOPS. Its storage capacity of one volume ranges from 1 GB to 1 TB. The cost of one volume is $0.10 per GB for one month.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Provisioned IOPS (SSD)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This volume type is suitable for the most demanding I/O intensive, transactional workloads. By default, IOPS SSD supports 30 IOPS/GB, means 10GB volume will give 300 IOPS. Its storage capacity of one volume ranges from 10GB to 1TB. The cost of one volume is $0.125 per GB for one month for
provisioned storage.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;EBS Magnetic Volumes&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It was formerly known as standard volumes. This volume type is suitable for ideal workloads like infrequently accessing data, i.e. data backups for recovery, logs storage. Its storage capacity of one volume ranges from 10GB to 1TB. The cost of one volume 
is $0.05 per GB for one month for provisioned storage and $0. 05 per million I/O requests. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Amazon EBS Benefits&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reliable and secure storage: Each of the EBS volume will automatically respond to its Availability Zone to protect from component failure.&lt;/li&gt;
&lt;li&gt;Secure: Amazon’s flexible access control policies allows to specify who can access which EBS volumes. &lt;/li&gt;
&lt;li&gt;Higher performance: Amazon EBS uses SSD technology to deliver data results with consistent I/O performance of application.&lt;/li&gt;
&lt;li&gt;Easy data backup: Data backup can be saved by taking point-in-time snapshots of Amazon EBS volumes. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Adding an EBS volume to an instance&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Let's create an instance "Test-1" and connect it via SSH using Xshell.&lt;/li&gt;
&lt;li&gt;In Xshell type "sudo su" to login using root user.&lt;/li&gt;
&lt;li&gt;Now to add extra volume to the instance, create an EBS volume of size say(15GB) and the volume should be created in the same region as that of the instance.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8h1obW04--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8hz1z1ea1grc4g4ksewh.png" alt="Image description" width="880" height="495"&gt;
&lt;/li&gt;
&lt;li&gt;Now attach the extra volume to your instance "Test-1". If you type "lsblk" on Xshell, you can see your 15GB vol. is addaed to your instance but it's not mounted yet.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PCwx9Jf9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7s57g711ffrjd140u8n7.png" alt="Image description" width="880" height="495"&gt;
-To mount the Extra-vol, first make a directory in the root then change path to  that directory and mount your volume there.&lt;/li&gt;
&lt;li&gt;In order to mount your EBS volume, first format the ddisk "india" using command "mkfs.ext4 /dev/xvdf". After formatting the disk mount your vol. using the command "mount /dev/xvdf /india".&lt;/li&gt;
&lt;li&gt;You can list the volumes attached to your disk by running "df -h" in Xshell.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HHbFeaBu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t9n7d0ughv0ttztovfwi.png" alt="Image description" width="880" height="495"&gt;
-Now create 100 files inside your folder using command "touch abc{1..100}&lt;/li&gt;
&lt;li&gt;Now let's shutdown and restart the instance, we can observe that the particular volume that we mounted (15GB vol.) will be unmounted from the disk.&lt;/li&gt;
&lt;li&gt;If we again mount the volume to our disk, we can't see our files listed. Hence, In order to make the changes permanent, we'll use Vi editor in fstab. It's for permanently mounting the volume to the disk.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To use the vi editor use the command "vi /etc/fstab". Enter i to insert. In the editor write " /dev/xvdf    /india   ext4 defaults 0 0". Then press esc and :wq to save the file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;now if we again restart our instance, we can see our 100 files listed in india folder as we made the changes permanent.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VBGme8Cp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/znz63dp808dg3441ftyj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VBGme8Cp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/znz63dp808dg3441ftyj.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>ebs</category>
    </item>
    <item>
      <title>Open sourcing a privacy-friendly and customizable Disqus alternate 🚀🔥</title>
      <author>devrsi0n</author>
      <pubDate>Mon, 24 Jan 2022 12:04:22 +0000</pubDate>
      <link>https://dev.to/devrsi0n/open-sourcing-a-privacy-friendly-and-customizable-disqus-alternate-mp9</link>
      <guid>https://dev.to/devrsi0n/open-sourcing-a-privacy-friendly-and-customizable-disqus-alternate-mp9</guid>
      <description>&lt;p&gt;We're so excited to announce that Chirpy has been open-sourced now. 🚀&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR 🙈
&lt;/h2&gt;

&lt;p&gt;Chirpy is a &lt;strong&gt;privacy-friendly&lt;/strong&gt; and &lt;strong&gt;customizable&lt;/strong&gt; &lt;a href="https://disqus.com/"&gt;Disqus&lt;/a&gt; alternate. With Chirpy, you can reach your audience quickly and build a better community. Check out our &lt;a href="https://github.com/devrsi0n/chirpy"&gt;GitHub repo&lt;/a&gt; to learn how it works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preview"&gt;
  &lt;/a&gt;
  Preview 👀
&lt;/h2&gt;

&lt;p&gt;The comment widget supports Rich Text Editing and &lt;a href="https://dev.to/docs/features/markdown"&gt;Markdown Shortcuts&lt;/a&gt; 📝:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m5hbWQ30--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/35ya5bscuwjneu3h9y6j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m5hbWQ30--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/35ya5bscuwjneu3h9y6j.png" alt="Chirpy comment editor" width="880" height="726"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Theme editor 🎨:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0RE_9gxE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qwpyfvk6pq8hhw3qqxj0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0RE_9gxE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qwpyfvk6pq8hhw3qqxj0.png" alt="Chirpy theme" width="880" height="622"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Widget analytics 📈:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FIYXWNvq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/55rk6k4fhxg9yy4kdqkk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FIYXWNvq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/55rk6k4fhxg9yy4kdqkk.png" alt="Widget analytics" width="880" height="622"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation 🤔
&lt;/h2&gt;

&lt;p&gt;You may wonder why we build a Disqus alternate in 2022. Well, here are the answers:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/martingund/status/1207327648093003777"&gt;Disqus shared the personal data of tens of millions of users without them or the websites knowing about it.&lt;/a&gt; 😡&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iHRmYfie--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0wxulz85czqohgv6xci7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iHRmYfie--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0wxulz85czqohgv6xci7.png" alt="Disqus' agreement to use privacy info" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UyfjUknd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fuyojfb393at51nhgxgz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UyfjUknd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fuyojfb393at51nhgxgz.png" alt="Disqus' tracking options" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And &lt;a href="https://techcrunch.com/2021/05/05/disqus-facing-3m-fine-in-norway-for-tracking-users-without-consent/"&gt;Disqus facing $3M fine in Norway for tracking users without consent&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Disqus also encumbers your website's &lt;strong&gt;performance&lt;/strong&gt;: &lt;a href="https://supunkavinda.blog/disqus"&gt;Disqus makes 76 HTTP Requests per load.&lt;/a&gt; 😱&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yfKdaB0Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/myp3my2guufg26upetai.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yfKdaB0Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/myp3my2guufg26upetai.png" alt="A Disqus widget use 76 requests" width="674" height="504"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find a ton of &lt;a href="https://www.google.com.hk/search?q=disqus+privacy&amp;amp;oq=disqus+privacy"&gt;privacy&lt;/a&gt; and &lt;a href="https://www.google.com.hk/search?q=disqus+performance"&gt;performance&lt;/a&gt; related issues of Disqus if you google it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution 💡
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#privacy"&gt;
  &lt;/a&gt;
  Privacy 🔐
&lt;/h3&gt;

&lt;p&gt;To avoid such privacy issues, we chose our business model with privacy-friendly in mind. First, we'll be honest: money is necessary for keeping the project development going. A price is always exacted for what free services bestow. You see Ads or you lose privacy. We pick a transparent pricing model — You pay, and you get the service. Nothing more.&lt;/p&gt;

&lt;p&gt;We also decided our tech stacks carefully, and we prefer to use self-hosted versions of third-party services. For example, for analytics, we self-hosted a &lt;a href="https://plausible.io/"&gt;plausible&lt;/a&gt; instance to avoid sharing your data with third-party companies. Plausible is an &lt;a href="https://github.com/plausible/analytics/"&gt;open-source&lt;/a&gt; and &lt;a href="https://plausible.io/privacy-focused-web-analytics"&gt;privacy-friendly&lt;/a&gt; software as well, we have the same privacy goal.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance 🚀
&lt;/h3&gt;

&lt;p&gt;For performance issues, we built our services with modern technologies, e.g., &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt;. We generate comment pages during the building process, so user will see the UI immediately instead of waiting for a bunch of JavaScript &amp;amp; CSS and API calls to render the UI. The performance boost is even more noticeable on slow mobile devices.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tech-stacks-%F0%9F%9B%A0"&gt;
  &lt;/a&gt;
  Tech stacks 🛠
&lt;/h2&gt;

&lt;p&gt;We choose modern tech stacks with privacy and performance in mind:&lt;/p&gt;

&lt;p&gt;Language: &lt;a href="https://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Full-stack framework: &lt;a href="https://nextjs.org"&gt;Next.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Data server:&lt;a href="https://graphql.org"&gt;GraphQL&lt;/a&gt; &lt;a href="https://github.com/hasura/graphql-engine"&gt;Hasura&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;API client: &lt;a href="https://github.com/FormidableLabs/urql"&gt;urql&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Authentication: &lt;a href="https://github.com/nextauthjs/next-auth"&gt;next-auth&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Style: &lt;a href="https://tailwindcss.com"&gt;TailwindCSS&lt;/a&gt; &lt;a href="https://github.com/ben-rogerson/twin.macro"&gt;twin.macro&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Testing:  &lt;a href="https://www.cypress.io"&gt;Cypress&lt;/a&gt; &lt;a href="https://jestjs.io"&gt;Jest&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Analytics: &lt;a href="https://github.com/plausible/analytics"&gt;Plausible&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#current-state"&gt;
  &lt;/a&gt;
  Current state 🤟
&lt;/h2&gt;

&lt;p&gt;Currently, we're in the public beta phase, all basic features should work, e.g.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Social login&lt;/li&gt;
&lt;li&gt;Create a project and integrate a widget into your website&lt;/li&gt;
&lt;li&gt;Comment with Rich Text Formatting and &lt;a href="http://chirpy.dev/docs/features/markdown"&gt;markdown shortcuts&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Comment moderation&lt;/li&gt;
&lt;li&gt;&lt;a href="http://chirpy.dev/docs/features/theme"&gt;Widget customization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://chirpy.dev/docs/features/analytics"&gt;Widget analytics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;More to come!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please note: you may lose your data if there are some hard conflicts during our database migration, but that should be rare.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#community-%F0%9F%8F%98"&gt;
  &lt;/a&gt;
  Community 🏘
&lt;/h2&gt;

&lt;p&gt;The community is at the core of how we build chirpy. Community members are at best a channel for evangelism. We want to empower you to participate directly in the creation of Chirpy ecosystems. Chirpy only get more accomplished and pleasing as the surrounding communities grow, enabling a broader range of audiences and use cases.&lt;/p&gt;

&lt;p&gt;Chirpy is available on &lt;a href="https://github.com/devrsi0n/chirpy"&gt;GitHub&lt;/a&gt;, it has been released under the &lt;a href="https://github.com/devrsi0n/chirpy/blob/main/LICENSE"&gt;Apache-2.0 License&lt;/a&gt; that lets you inspect, modify, and re-purpose it as you would like. You can also check our &lt;a href="https://github.com/devrsi0n/chirpy"&gt;GitHub repo&lt;/a&gt; for roadmaps or discussions. Of course, contributions are welcome! 🙌&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion 🥳
&lt;/h2&gt;

&lt;p&gt;Please feel free to try &lt;a href="https://chirpy.dev/"&gt;our service&lt;/a&gt;! We're working hard to add more features to make it easier to use, stay tuned!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>opensource</category>
    </item>
    <item>
      <title>DarkMode in TailWind</title>
      <author>Shashank sharma</author>
      <pubDate>Mon, 24 Jan 2022 12:00:18 +0000</pubDate>
      <link>https://dev.to/shashannkbawa/darkmode-in-tailwind-1i1n</link>
      <guid>https://dev.to/shashannkbawa/darkmode-in-tailwind-1i1n</guid>
      <description>&lt;p&gt;So I am writing this post as I have faced some problems while using dark mode in my website with the help of TailwindCSS.&lt;/p&gt;

&lt;p&gt;I wanted to toggle between light mode and dark mode manually.&lt;/p&gt;

&lt;p&gt;So please allow me to tell the whole story behind creation of simple Dark mode.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#list-of-contents"&gt;
  &lt;/a&gt;
  List of Contents
&lt;/h3&gt;

&lt;p&gt;1.&lt;a href="#prerequisite-things-that-you-have-to-do-before-using-darkmode"&gt;Prerequiste (things that you have to do before using darkmode)&lt;/a&gt;&lt;br&gt;
2.&lt;a href="#toggle-button"&gt;Toggle button&lt;/a&gt;&lt;br&gt;
3.&lt;a href="#toggle-theme-functionality"&gt;Toggle Theme (Functionality)&lt;/a&gt;&lt;br&gt;
4.&lt;a href="#what-changes-can-we-make-to-raw-classname-endraw-for-darkmode"&gt;What changes can we make to &lt;code&gt;className&lt;/code&gt; for darkmode&lt;/a&gt;&lt;br&gt;
5.&lt;a href="#temprory-functioning"&gt;Temprory Functioning&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#prerequisite-things-that-you-have-to-do-before-using-darkmode"&gt;
  &lt;/a&gt;
  Prerequisite (things that you have to do before using darkmode)
&lt;/h2&gt;

&lt;p&gt;As it has also been stated in the Tailwind documentaion of darkmode . Add &lt;code&gt;darkMode: 'class',&lt;/code&gt; in your tailwind.config.js like this below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = {
  darkMode: 'class',
  // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It basically add &lt;code&gt;class=" "&lt;/code&gt; into your HTML.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Bro, but why ain't we using &lt;code&gt;media&lt;/code&gt; instead of &lt;code&gt;class&lt;/code&gt;?&lt;/em&gt; .&lt;br&gt;
 The thing is &lt;code&gt;media&lt;/code&gt; will take your OS color scheme into consideration and &lt;code&gt;class&lt;/code&gt; will let you add it manually. So,  that's the theory behind it.👍&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#toggle-button"&gt;
  &lt;/a&gt;
  Toggle button
&lt;/h2&gt;

&lt;p&gt;It basically makes a button that listens to a &lt;code&gt;onClick&lt;/code&gt; function on clicking it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div className='flex items-center justify-center inline-flex '&amp;gt;
      &amp;lt;label className='pt-0 pb-1 w-10 mb-6 ' &amp;gt;
             &amp;lt;div className='w-12 h-5 border-2 justify-center 
                             items-center rounded-lg bg-#172d42 
                             mt-1 absolute' type='checkbox' /&amp;gt;
             &amp;lt;input onClick={theme} className='bg-[#ffffff] w-7 h-7
                                              flex justify-center items-center
                                              duration-500 checked:translate-x-6
                                              checked:bg-black appearance-none
                                              rounded-full absolute ease-in-out' type='checkbox' &amp;gt;
             &amp;lt;/input&amp;gt;
      &amp;lt;/label&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;You can change the &lt;code&gt;className&lt;/code&gt; values according to your CSS. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So here, &lt;code&gt;checked&lt;/code&gt; means that, when the checkbox input is checked, it will &lt;code&gt;translate-x-6&lt;/code&gt; translate in x-axis i.e. toward right. And the rest is basic tailwind CSS. You can search the meaning of the values of &lt;code&gt;className&lt;/code&gt; in their &lt;a href="https://tailwindcss.com/"&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Main Thing&lt;/strong&gt; We have passed &lt;code&gt;theme&lt;/code&gt; to the &lt;code&gt;onClick&lt;/code&gt; function. About which, we will talk later. &lt;/p&gt;

&lt;p&gt;The button will look like this ...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_-SeB8mO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u23xcoxo0hly25qngyxi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_-SeB8mO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u23xcoxo0hly25qngyxi.png" alt="Image description" width="75" height="43"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#toggle-theme-functionality"&gt;
  &lt;/a&gt;
  Toggle Theme (Functionality)
&lt;/h2&gt;

&lt;p&gt;Here, you are required to use &lt;code&gt;useState&lt;/code&gt; hooks from &lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;react&lt;/a&gt;. But first, let me introduce you to my code then we will talk about it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [theme, setTheme] = useState('light');

const toggleTheme = () =&amp;gt; {

    if (theme === 'dark') {
      document.documentElement.classList.remove('dark')
      setTheme('light')
      localStorage.theme = 'dark'
    } else {
      document.documentElement.classList.add('dark')
      setTheme('dark')
      localStorage.theme = 'light'
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Initially, I have set the &lt;code&gt;theme&lt;/code&gt; state to 'light'. I wanted that user must first see the light mode and then toggle to the dark mode. But, if you want the user to see the dark mode first then set it to 'dark'.&lt;br&gt;
 &lt;code&gt;const [theme, setTheme] = useState('dark');&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I used normal if else statement, for beginners understanding. You can also use ternary operator {  ? &amp;lt;&amp;gt; : &amp;lt;&amp;gt; } .&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You have plenty of options with JavaScript. That's the beauty of it. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;But dude, tell us more, what does&lt;/em&gt; &lt;code&gt;document.documentElement.classList.add('dark')&lt;/code&gt; &lt;em&gt;do&lt;/em&gt;.&lt;br&gt;
 It basically adds &lt;code&gt;class="dark"&lt;/code&gt; into your HTML.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9HyNvVcR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ezbp8bjcp442fon7m4xi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9HyNvVcR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ezbp8bjcp442fon7m4xi.png" alt="Image description" width="446" height="41"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And &lt;code&gt;document.documentElement.classList.remove('dark')&lt;/code&gt; will make it back to the normal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z19BWR6c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/imt4fyoxqhlpsftyq8jm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z19BWR6c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/imt4fyoxqhlpsftyq8jm.png" alt="Image description" width="469" height="31"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, next comes the &lt;code&gt;localStorage.theme = 'dark'&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API"&gt;localStorage&lt;/a&gt; ,an API that allows you to store key-value pairs of data that persist with page reloads as well as when the browser window is closed and reopened.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can read the official documentation of &lt;code&gt;localStorage&lt;/code&gt; from Mozilla. Basically, it will store the value of the &lt;code&gt;theme&lt;/code&gt; in your browser for local reference.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The main monopoly behind this &lt;code&gt;toggleTheme&lt;/code&gt; is&lt;/strong&gt;&lt;br&gt;
 The user clicks on the button. That will invoke &lt;code&gt;toggleTheme&lt;/code&gt; and it will check, if the theme is dark, then remove 'dark' from HTML and &lt;code&gt;setTheme&lt;/code&gt; to 'light' and set &lt;code&gt;localStorage.theme&lt;/code&gt; to light.&lt;br&gt;
And, if user again clicks on the button, then it will again invoke &lt;code&gt;toggleTheme&lt;/code&gt; and this time the theme is set to 'light' then the else part will execute. That will add 'dark' to HTML and &lt;code&gt;setTheme&lt;/code&gt; to 'dark' and set &lt;code&gt;localStorage.theme&lt;/code&gt; to dark.&lt;/p&gt;

&lt;p&gt;So, now I think you would be comfortable with the functioning behind &lt;code&gt;toggleTheme&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Then, where to put this&lt;/em&gt; &lt;code&gt;toggleTheme&lt;/code&gt; &lt;em&gt;function?&lt;/em&gt; React comes to the rescue &lt;br&gt;
&lt;a href="https://i.giphy.com/media/iJHzVfDR5WXPVgZJyS/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/iJHzVfDR5WXPVgZJyS/giphy.gif" alt="rescue" width="480" height="270"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://i.giphy.com/media/f8VxRaHxaTqkOUgywz/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/f8VxRaHxaTqkOUgywz/giphy.gif" alt="rescue" width="480" height="270"&gt;&lt;/a&gt;&lt;br&gt;
I wrote this in my &lt;code&gt;App.jsx&lt;/code&gt;. So that, it would be easy to pass the props to the other components.&lt;/p&gt;

&lt;p&gt;You have to pass the theme into your components. I did it like this&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;Navbar theme={toggleTheme} /&amp;gt;&lt;/code&gt; in my App.jsx&lt;/p&gt;

&lt;p&gt;My Navbas.jsx&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Navbar = ({ theme }) =&amp;gt; {
    return(
        &amp;lt;&amp;gt;
        &amp;lt;/&amp;gt;
        //rest of the code
    )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and used it in my &lt;code&gt;onClick&lt;/code&gt; function, about that I have mentioned earlier.&lt;br&gt;
&lt;code&gt;&amp;lt;input onClick={theme} className='bg-[#ffffff]' type='checkbox' &amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-changes-can-we-make-to-raw-classname-endraw-for-darkmode"&gt;
  &lt;/a&gt;
  What changes can we make to &lt;code&gt;className&lt;/code&gt; for darkmode
&lt;/h2&gt;

&lt;p&gt;If you wanted to change the text, background and other values, with the help of darkmode of TailwindCSS, you can do it simply by adding &lt;code&gt;dark:text-white&lt;/code&gt; in your &lt;code&gt;className&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div className='text-black dark:text-white'&amp;gt;

&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it folks, you will now be able to see the button and toggle between the light theme and dark theme.🎉&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#temprory-functioning"&gt;
  &lt;/a&gt;
  Temprory Functioning
&lt;/h2&gt;

&lt;p&gt;A basic illustration of dark mode with ReactJS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState } from 'react';

const DarkMode = () =&amp;gt; {

    const [theme, setTheme] = useState('light');

    const toggleTheme = () =&amp;gt; {

        if (theme === 'dark') {
            document.documentElement.classList.remove('dark')
            setTheme('light')
            localStorage.theme = 'dark'
        } else {
            document.documentElement.classList.add('dark')
            setTheme('dark')
            localStorage.theme = 'light'
        }
    }
    return &amp;lt;div className='mt-7 max-w-full m-h-full bg-black dark:bg-slate-700 flex items-center justify-center  '&amp;gt;
        &amp;lt;label className='pt-0 pb-1 w-10 mb-6 ' &amp;gt;

            &amp;lt;div className='w-12 h-5 border-2 justify-center items-center rounded-lg bg-#172d42 mt-1 absolute' type='checkbox' /&amp;gt;
            &amp;lt;input onClick={toggleTheme} className='bg-yellow-200 w-7 h-7  flex justify-center items-center duration-500 checked:translate-x-6 checked:bg-black appearance-none rounded-full absolute ease-in-out' type='checkbox' &amp;gt;
            &amp;lt;/input&amp;gt;


        &amp;lt;/label&amp;gt;
        &amp;lt;h1 className='mx-5 text-white dark:text-red-900'&amp;gt;Heyyy there&amp;lt;/h1&amp;gt;

    &amp;lt;/div&amp;gt;
        ;
};

export default DarkMode;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NYtBmaWq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://play.vidyard.com/zvU5319QsCAUaWshwh9kqD.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NYtBmaWq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://play.vidyard.com/zvU5319QsCAUaWshwh9kqD.jpg" alt="Dark Mode" width="640" height="305"&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;If you wanted to see the functioning of dark and light mode, then you can check this website &lt;a href="https://shashannkbawa.github.io/Shanks-Web3.0/"&gt;https://shashannkbawa.github.io/Shanks-Web3.0/&lt;/a&gt;&lt;br&gt;
And can also refer to the code in my &lt;a href="https://github.com/shashannkbawa/Shanks-Web3.0"&gt;Github repo&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Let me know if there is a better approach. For now this works. Refer the tailwind docs for more info. &lt;a href="https://tailwindcss.com/"&gt;TailwindCSS&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>tailwindcss</category>
      <category>darkmode</category>
      <category>react</category>
    </item>
  </channel>
</rss>
