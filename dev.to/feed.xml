<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>I APPRECIATE all of you.</title>
      <author>computer_geek77</author>
      <pubDate>Wed, 04 Aug 2021 15:31:16 +0000</pubDate>
      <link>https://dev.to/computergeek/i-appreciate-all-of-you-135k</link>
      <guid>https://dev.to/computergeek/i-appreciate-all-of-you-135k</guid>
      <description>&lt;p&gt;Thankyou,all the developers and enthusiasts from diverse countries which read my content.I hope you like it. 😄😄&lt;/p&gt;

</description>
      <category>thankyou</category>
    </item>
    <item>
      <title>Scroll restoration in Next.js</title>
      <author>Matteo Mazzarolo</author>
      <pubDate>Wed, 04 Aug 2021 14:53:00 +0000</pubDate>
      <link>https://dev.to/mmazzarolo/scroll-restoration-in-next-js-ckc</link>
      <guid>https://dev.to/mmazzarolo/scroll-restoration-in-next-js-ckc</guid>
      <description>&lt;p&gt;While working on &lt;a href="https://remotebear.io/"&gt;Remotebear&lt;/a&gt;, I recently discovered that Next.js doesn’t handle scroll restoration automatically. So, for example, if you navigate back to a previous page of your app, Next.js will always show it scrolled to the top, regardless of the scroll position it had when you left it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#experimental-scroll-restoration-flag"&gt;
  &lt;/a&gt;
  Experimental scroll restoration flag
&lt;/h3&gt;

&lt;p&gt;Luckily, Next.js has &lt;a href="https://github.com/vercel/next.js/commit/38bd1a024cb25923d8ea15f269a7294d073684d8"&gt;an experimental &lt;code&gt;scrollRestoration&lt;/code&gt; flag&lt;/a&gt; that you can enable to automatically restore the scroll positions.&lt;br&gt;&lt;br&gt;
You can enable it in your &lt;code&gt;next.config.js&lt;/code&gt; file this way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;experimental&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;scrollRestoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#nextrouterscroll"&gt;
  &lt;/a&gt;
  next-router-scroll
&lt;/h3&gt;

&lt;p&gt;For my use case, this solution is working fine, but there are some cases where you need to take control of how your application scroll is handled; namely, you may want to restore scroll when the user is navigating within your application pages, but you need to do extra work before or after the page has changed, either by using some sort of page transition or any other feature.&lt;br&gt;&lt;br&gt;
In these cases, I’d suggest you give &lt;code&gt;@moxy/next-router-scroll&lt;/code&gt; a try: This package is built on top of &lt;a href="https://www.npmjs.com/package/scroll-behavior"&gt;&lt;code&gt;scroll-behavior&lt;/code&gt;&lt;/a&gt; and it actively listens to Next.js router events, writing the scroll values associated with the current location in the Session Storage and reading these values whenever &lt;code&gt;updateScroll()&lt;/code&gt; is called.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#completely-disabling-scroll-restoration"&gt;
  &lt;/a&gt;
  Completely disabling scroll restoration
&lt;/h3&gt;

&lt;p&gt;There’s one inconsistency I noticed around not making scroll restoration work automatically in Next.js: by default, scroll restoration doesn’t work when the navigation logic is being handled by JavaScript, but it works fine when it’s handled by the browser (e.g.: on a full-refresh or while navigating whit JavaScript disabled).&lt;/p&gt;

&lt;p&gt;So, in the rare occasions where you want to fully disable scroll restoration, remember to add this snippet to the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of your project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ScrollRestorationDisabler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Tell the browser to never restore the scroll position on load */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;
        &lt;span class="nx"&gt;dangerouslySetInnerHTML&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
          &lt;span class="na"&gt;__html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`history.scrollRestoration = "manual"`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Head&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>nextjs</category>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Observing the Reliability of your Java Apps and Services with Spring Boot, Micrometer, Prometheus &amp; Reliably</title>
      <author>Russ Miles</author>
      <pubDate>Wed, 04 Aug 2021 14:49:16 +0000</pubDate>
      <link>https://dev.to/reliably/observing-the-reliability-of-your-java-apps-and-services-with-spring-boot-micrometer-prometheus-reliably-27od</link>
      <guid>https://dev.to/reliably/observing-the-reliability-of-your-java-apps-and-services-with-spring-boot-micrometer-prometheus-reliably-27od</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FZtnCg0F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/9216/1%2Abd7UX4O4EL3clA4mFxeLEw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FZtnCg0F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/9216/1%2Abd7UX4O4EL3clA4mFxeLEw.jpeg" alt="Photo by [Marten Newhall](https://unsplash.com/@laughayette?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/magnifying-glass?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here at Reliably we are huge fans of &lt;a href="https://spring.io/projects/spring-boot"&gt;Spring Boot&lt;/a&gt; and the &lt;a href="https://micrometer.io"&gt;Micrometer&lt;/a&gt; dimensional metrics instrumentation library for providing the rich set of possible metrics that can be a great foundation for the Service Level Indicators that provide coverage for your &lt;a href="https://reliably.com/docs/getting-started/slos/"&gt;Reliably Service Level Objectives as Code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As of Spring Boot 2.0, Micrometer became the default instrumentation library for the huge range of Spring Boot applications, from monoliths to microservices. With Micrometer bakes in by default, we started to explore just how easy it would be to bring Reliably's "Developer-First" SLOs to bear on your Spring Boot apps and services.&lt;/p&gt;

&lt;p&gt;In this article we share our findings including how Reliably really can work "Bootifully" (TM, Josh Long :) ) with all your Spring Boot apps and services, out of the box and with no extra code required!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: The full coded sample for this article is &lt;a href="https://github.com/Lawouach/spring-boot-prometheus-reliably"&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-setup-spring-boot-prometheus-amp-reliably"&gt;
  &lt;/a&gt;
  The Setup: Spring Boot, Prometheus &amp;amp; Reliably
&lt;/h2&gt;

&lt;p&gt;The exercise we wanted to conduct was to show how you could define and collaborate on Reliably Service Level Objectives that were measuring the availability of a simple Spring Boot service. To do this we needed three pieces in the mix:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yQodKv4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3576/1%2A6E8cWoNwVH_ogyCjZml-lw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yQodKv4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3576/1%2A6E8cWoNwVH_ogyCjZml-lw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With this approach, Spring Boot and Micrometer would push dimensional metrics to Prometheus. Then Reliably would use Prometheus queries to collate Service Level Indicators to back the Service Level Objectives being observed. Simple? Actually, it is…&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: We chose Prometheus for this particular article but we could just have easily picked on of the other tools supported by Micrometer and Reliably, such as &lt;a href="https://dev.to/reliably/bringing-reliability-closer-to-you-with-reliably-and-datadog-2jbm"&gt;DataDog&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#sourcing-metrics-from-our-spring-boot-service"&gt;
  &lt;/a&gt;
  Sourcing Metrics from our Spring Boot Service
&lt;/h2&gt;

&lt;p&gt;To get things built as quickly and easily as possible, we used the &lt;a href="https://start.spring.io"&gt;Spring Initializr&lt;/a&gt; to generate a very simple HTTP-based application that did nothing more than provide a default root / response of "Greetings from Spring Boot!" to provide the service that we'd look to observe our SLOs on.&lt;/p&gt;

&lt;p&gt;As mentioned in the introduction, by default Spring Boot applications come with all the power of Micrometer by default, the only thing we needed to do was make sure that our Spring Boot service's metrics could be scraped by Prometheus by adding a single line to our service's application.properties:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#setting-up-prometheus-to-scrape-the-metrics"&gt;
  &lt;/a&gt;
  Setting up Prometheus to Scrape the Metrics
&lt;/h2&gt;

&lt;p&gt;Next we added a simple Scraper configuration to our instance of Prometheus to periodically grab all the Micrometer metrics for our Spring Boot service from the endpoint we configured in the previous step:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
With this config in place, Prometheus will grab the metrics from our Spring Boot service every 15 seconds.

&lt;h2&gt;
  &lt;a href="#creating-and-observing-the-reliably-slos-as-code"&gt;
  &lt;/a&gt;
  Creating and Observing the Reliably SLOs as Code
&lt;/h2&gt;

&lt;p&gt;The final step was for us to use the new Prometheus support in the Reliably CLI v0.23.0 to create our SLO with an SLI implemented as an appropriate Prometheus query:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
And that's it, we're done! With our Spring Boot service running and receiving requests, our Prometheus instance scraping the available metrics, and Reliably monitoring the above SLO, we have successfully defined and observed a Java Spring Boot application with as little code as possible!

&lt;h2&gt;
  &lt;a href="#where-to-go-next-we-need-you"&gt;
  &lt;/a&gt;
  Where to go next: We need … You!
&lt;/h2&gt;

&lt;p&gt;Our goal is to shift reliability left by making it as easy as possible for you and your team to be able to define, observe and learn how to make your system's reliable.  As such we are constantly looking to make it easier for people to collaborate, code and observe Service Level Objectives and Indicators for their own bespoke needs. &lt;/p&gt;

&lt;p&gt;You can check out all the different tools that we currently integrate with in &lt;a href="https://reliably.com/docs/"&gt;our docs&lt;/a&gt;, but if there's something you don't see then please &lt;a href="https://reliably.com/contact/"&gt;get in touch&lt;/a&gt; or maybe even raise a ticket and PR yourself on our &lt;a href="https://github.com/reliablyhq/cli"&gt;free and open source Reliably CLI project&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>sre</category>
      <category>prometheus</category>
      <category>spring</category>
    </item>
    <item>
      <title>New to programming? Let's setup VSCode</title>
      <author>Brad Westfall</author>
      <pubDate>Wed, 04 Aug 2021 14:37:09 +0000</pubDate>
      <link>https://dev.to/bradwestfall/new-to-programming-let-s-setup-vscode-2cio</link>
      <guid>https://dev.to/bradwestfall/new-to-programming-let-s-setup-vscode-2cio</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This is a preview from my &lt;a href="https://cssbootcamp.com"&gt;CSSBootcamp.com&lt;/a&gt; course.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There's lots of professional code editor options out there. In my time doing development, it seems like there's a new "best code editor" that's even better than all the previous ones every 3-6 years. Don't be surprised if you start your career using one editor and then switch to a newer better one later.&lt;/p&gt;

&lt;p&gt;Today, VSCode is the most popular editor to use. I'm not a fan of using something simply because it's popular, but VSCode happens to be popular because it's very good.&lt;/p&gt;

&lt;p&gt;If you want, you can use Sublime Text or Atom which were the very popular ones before VSCode. Some of you might be coming to this course with previous experience coding and you already have your preferred code editor. That's totally fine too, but since I use VSCode and it does have the market share right now, all the setup and editor advice that I give for these courses will be for VSCode.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://code.visualstudio.com/"&gt;Download VSCode&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you're using Linux or Windows, you might need to check your system settings to see which download option is most appropriate for you.&lt;/p&gt;

&lt;p&gt;Once it's installed, you'll be greeted by a "Getting Started" screen. You don't really need to do their whole introduction thing unless you want to. Notice they have this "Getting Started" content as a tab. You can just close that tab to exit.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/qrXRkppmQ5s"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Once you have it setup, you're ready to start using it like a professional. The next step is to learn how to customize settings and use all the cool keyboard shortcuts:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#snippets-emmet-and-shortcuts"&gt;
  &lt;/a&gt;
  Snippets, Emmet, and Shortcuts
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/FsCXdySGGQE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Snippets are a way for you to write a little piece of code and then you hit the Tab key and it will trigger a bigger chuck of code. The whole idea is to make writing some repetitive code faster so you don't have to type as much. Emmet is a big library of snippets that's already built into VSCode. If you're using other code editors, you might need to install Emmet separately.&lt;/p&gt;

&lt;p&gt;Snippets are great, but sometimes you just need to be a good keyboard user with the wide array of available shortcuts you have on your computer. Shortcuts generally come in two types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Operating System Based&lt;/li&gt;
&lt;li&gt;Application Based&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the video above, we show you some common OS based shortcuts that we think you should learn. We also showed some VSCode based (Application Based) shortcuts. Here are the official "cheat sheets" for VSCode's shortcuts. Don't try to learn all of these, it's too much. But if you focus on just a few at a time it can make a big difference.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mac"&gt;
  &lt;/a&gt;
  Mac
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf"&gt;https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#windows"&gt;
  &lt;/a&gt;
  Windows
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf"&gt;https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#linux"&gt;
  &lt;/a&gt;
  Linux
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf"&gt;https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vscode-settings"&gt;
  &lt;/a&gt;
  VSCode Settings
&lt;/h3&gt;

&lt;p&gt;Here are the settings we showed you in the video above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"explorer.confirmDelete"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"editor.tabSize"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Subtle Match Brackets"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;instead&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;boxy&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;ones&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;built-in&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"editor.matchBrackets"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"none"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"editor.renderIndentGuides"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"editor.renderLineHighlight"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"gutter"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"editor.minimap.enabled"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"editor.formatOnPaste"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"workbench.startupEditor"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"newUntitledFile"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"workbench.colorTheme"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"One Monokai"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"workbench.iconTheme"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"files.restoreUndoStack"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;prevents&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"quick suggestions"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;menu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;from&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;popping&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;up&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;all&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;which&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;something&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;I&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;don't&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;like&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;see&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;but&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;that&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;menu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;also&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;makes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Emmet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;behave&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;oddly.&lt;/span&gt;&lt;span class="w"&gt; 
  &lt;/span&gt;&lt;span class="nl"&gt;"editor.quickSuggestions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"other"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"comments"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"strings"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;With&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;turning&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;off&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;quickSuggestions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;now&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;we&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;need&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;to&lt;/span&gt;&lt;span class="w"&gt; 
  &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;tell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Emmet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;how&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;we&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;want&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;start&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;our&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;snippet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;triggers&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"emmet.triggerExpansionOnTab"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#extensions"&gt;
  &lt;/a&gt;
  Extensions
&lt;/h3&gt;

&lt;p&gt;The extension we installed for our setting to use "Subtle Match Brackets" was &lt;a href="https://marketplace.visualstudio.com/items?itemName=rafamel.subtle-brackets"&gt;https://marketplace.visualstudio.com/items?itemName=rafamel.subtle-brackets&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;This is a preview from my &lt;a href="https://cssbootcamp.com"&gt;CSSBootcamp.com&lt;/a&gt; course.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>beginners</category>
      <category>css</category>
      <category>html</category>
      <category>javascript</category>
    </item>
    <item>
      <title>tmux new-session</title>
      <author>Waylon Walker</author>
      <pubDate>Wed, 04 Aug 2021 14:35:39 +0000</pubDate>
      <link>https://dev.to/waylonwalker/tmux-new-session-2dfp</link>
      <guid>https://dev.to/waylonwalker/tmux-new-session-2dfp</guid>
      <description>&lt;p&gt;This one starts a new chapter in our series that is going to open up a whole new set of workflow productivity options, understanding how the &lt;code&gt;new-session&lt;/code&gt; command is a critical command in our adventure into tmux glory.  This is going to open the door for some seriously game changing hotkeys and scripting.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# create a new session&lt;/span&gt;
tmux new-session

&lt;span class="c"&gt;# create a new session detached&lt;/span&gt;
tmux new-session &lt;span class="nt"&gt;-d&lt;/span&gt;


&lt;span class="c"&gt;# create a new session and name it&lt;/span&gt;
tmux new-session &lt;span class="nt"&gt;-s&lt;/span&gt; me

&lt;span class="c"&gt;# create a new named session and attach to it if one exists&lt;/span&gt;
tmux new-session &lt;span class="nt"&gt;-As&lt;/span&gt; me
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;for more information on how I navigate tmux, check out this full post&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also check out the full YouTube&lt;br&gt;
&lt;a href="https://www.youtube.com/playlist?list=PLTRNG6WIHETB4reAxbWza3CZeP9KL6B"&gt;tmux-playlist&lt;/a&gt;&lt;br&gt;
to see all of the videos in this series.&lt;/p&gt;

</description>
      <category>cli</category>
      <category>linux</category>
      <category>tmux</category>
    </item>
    <item>
      <title>Rust BDD tests with Cucumber</title>
      <author>Roger Torres Paes (he/him/ele)</author>
      <pubDate>Wed, 04 Aug 2021 14:31:01 +0000</pubDate>
      <link>https://dev.to/rogertorres/rust-bdd-with-cucumber-4p68</link>
      <guid>https://dev.to/rogertorres/rust-bdd-with-cucumber-4p68</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;TL;DR: I will show the basics of how to use Cucumber (and its language, Gherking) alongside Rust.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Cucumber&lt;/strong&gt; is a tool for &lt;em&gt;behavior-driven development&lt;/em&gt; (BDD) that uses a language called &lt;strong&gt;Gherkin&lt;/strong&gt; to specify test scenarios with a syntax that is very close to natural language, using key-words such as &lt;code&gt;When&lt;/code&gt; and &lt;code&gt;Then&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here I will not explain the particularities of neither Cucumber nor Gherkin, just show you how to use them with Rust. If you know nothing about them, I recommend you to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Watch this &lt;a href="https://www.youtube.com/watch?v=lC0jzd8sGIA"&gt;soft introduction&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;And refer to the &lt;a href="https://cucumber.io/docs/cucumber/"&gt;documentation&lt;/a&gt;, specially the &lt;a href="https://cucumber.io/docs/gherkin/reference/"&gt;Gherkin reference guide&lt;/a&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That being said, the examples I am using are elementary, so you should have no problem following along even if you have never seen Cucumber and Gherkin before.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#sample-project"&gt;
  &lt;/a&gt;
  Sample project
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The code used in this tutorial can be found &lt;a href="https://github.com/rogertorres/dev.to/tree/main/cucumber"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To focus on how to use Cucumber with Rust, I decided to code a dummy multiplication function, so you don't get distracted by the idiosyncrasies of a particular project.&lt;/p&gt;

&lt;p&gt;First, create a library crate:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cargo new --lib bdd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, remove the mod &lt;code&gt;tests&lt;/code&gt; from &lt;code&gt;lib.rs&lt;/code&gt; and code this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;mult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's all for &lt;code&gt;lib.rs&lt;/code&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#setting-up-the-manifest"&gt;
  &lt;/a&gt;
  Setting up the manifest
&lt;/h2&gt;

&lt;p&gt;The manifest (&lt;code&gt;Cargo.toml&lt;/code&gt;) require these entries:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[[test]]&lt;/span&gt;
&lt;span class="py"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"cucumber"&lt;/span&gt;
&lt;span class="py"&gt;harness&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;

&lt;span class="nn"&gt;[dependencies]&lt;/span&gt;
&lt;span class="nn"&gt;tokio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"1.9.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="py"&gt;features&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"rt-multi-thread"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"macros"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"time"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nn"&gt;[dev-dependencies]&lt;/span&gt;
&lt;span class="py"&gt;cucumber_rust&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.9"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;[[test]]&lt;/code&gt; we have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;name&lt;/code&gt;, which is the name of the file where we will put the BDD tests that we will run.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;harness&lt;/code&gt; is set to false, allowing us to provide our own &lt;code&gt;main&lt;/code&gt; function to handle the test run. This &lt;code&gt;main&lt;/code&gt; function will be placed inside the &lt;code&gt;cucumber.rs&lt;/code&gt; file specified above.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In &lt;code&gt;[dependencies]&lt;/code&gt; we have &lt;code&gt;tokio&lt;/code&gt;, which is an &lt;em&gt;async&lt;/em&gt; runtime required to work with cucumber-rust (even if you are not testing anything &lt;em&gt;async&lt;/em&gt;). You may use another runtime.&lt;/p&gt;

&lt;p&gt;And in &lt;code&gt;[dev-dependencies]&lt;/code&gt; we have &lt;code&gt;cucumber_rust&lt;/code&gt;, the star of this show.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#project-structure"&gt;
  &lt;/a&gt;
  Project structure
&lt;/h2&gt;

&lt;p&gt;We have to create a couple of files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;tests/cucumber.rs&lt;/code&gt;, where we will have the &lt;code&gt;main&lt;/code&gt; function that will run the tests.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;features/operations.feature&lt;/code&gt;, where we will code our test scenario using Gherkin (more on this later).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the end, we have this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bdd
├── features
│   └── operations.feature
├── src
│   └── lib.rs
├── tests
│   └── cucumber.rs
└── Cargo.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#coding-the-test-with-gherkin"&gt;
  &lt;/a&gt;
  Coding the test with Gherkin
&lt;/h2&gt;

&lt;p&gt;This is how the &lt;code&gt;operation.feature&lt;/code&gt; file looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;&lt;span class="kd"&gt;Feature&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; Arithmetic operations

  &lt;span class="c"&gt;# Let's start with addition. BTW, this is a comment.&lt;/span&gt;
  &lt;span class="kn"&gt;Scenario&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; User wants to multiply two numbers
    &lt;span class="nf"&gt;Given &lt;/span&gt;the numbers &lt;span class="s"&gt;"2"&lt;/span&gt; and &lt;span class="s"&gt;"3"&lt;/span&gt;
    &lt;span class="nf"&gt;When &lt;/span&gt;the User adds them
    &lt;span class="nf"&gt;Then &lt;/span&gt;the User gets 6 as result
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we have a context set by &lt;code&gt;Given&lt;/code&gt;, an event described by &lt;code&gt;When&lt;/code&gt; and an expected result expressed by &lt;code&gt;Then&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Although my purpose is not to teach Cucumber, I have to say that this is &lt;strong&gt;not&lt;/strong&gt; a good BDD scenario. Not so much because it is dead simple, but because it is a unit test in disguise. I have, nevertheless, kept it here because it has the virtue of making things crystal clear regarding how we are going to interpret this scenario with Rust. For best practices, check &lt;a href="https://support.smartbear.com/cucumberstudio/docs/tests/best-practices.html#testing-process-write-test-scenarios-at-early-st"&gt;this&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#handle-the-scenario-with-rust"&gt;
  &lt;/a&gt;
  Handle the scenario with Rust
&lt;/h2&gt;

&lt;p&gt;From now on, we stick with &lt;a href="https://twitter.com/lunasorcery/status/1402372190033563650"&gt;&lt;del&gt;the mighty Crabulon&lt;/del&gt;&lt;/a&gt; Rust.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#world-object"&gt;
  &lt;/a&gt;
  World object
&lt;/h3&gt;

&lt;p&gt;The first thing we need is a &lt;code&gt;World&lt;/code&gt;, an object that will hold the state of our test during execution.&lt;/p&gt;

&lt;p&gt;Let's start coding &lt;code&gt;cucumber.rs&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;cucumber_rust&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;async_trait&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Cucumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;World&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Infallible&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;MyWorld&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Init&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nf"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nf"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;#[async_trait(&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="nd"&gt;Send)]&lt;/span&gt;
&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;World&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;MyWorld&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Infallible&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Infallible&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;Self&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Init&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For now, we created a &lt;code&gt;enum&lt;/code&gt; named &lt;code&gt;MyWorld&lt;/code&gt; that will be our "World object", holding the data between steps. &lt;code&gt;Init&lt;/code&gt; is its initial value.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;MyWorld&lt;/code&gt; object implements the trait &lt;code&gt;World&lt;/code&gt; provided by the &lt;code&gt;cucumber_rust&lt;/code&gt;, which in turn gives us the methods to map the steps (&lt;code&gt;Given&lt;/code&gt;, &lt;code&gt;When&lt;/code&gt;, &lt;code&gt;Then&lt;/code&gt;, etc.). &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Error&lt;/code&gt; type is a requirement from this trait, as is the attribute &lt;code&gt;#[async_trait(?Send)]&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-builder"&gt;
  &lt;/a&gt;
  Step builder
&lt;/h3&gt;

&lt;p&gt;Now it is time to actually code the interpreter. I will explain the code block by block, so it might be useful to also have the &lt;a href="https://github.com/rogertorres/dev.to/blob/main/cucumber/tests/cucumber.rs"&gt;complete code&lt;/a&gt; open, so you don't lose sight of the whole picture.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#given"&gt;
  &lt;/a&gt;
  Given
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="n"&gt;test_steps&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;crate&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;MyWorld&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;cucumber_rust&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Steps&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;bdd&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;mult&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Steps&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyWorld&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Steps&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyWorld&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Steps&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="nf"&gt;.given_regex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="c"&gt;// This will match the "given" of multiplication&lt;/span&gt;
            &lt;span class="s"&gt;r#"^the numbers "(\d)" and "(\d)"$"#&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="c"&gt;// and store the values inside context, &lt;/span&gt;
            &lt;span class="c"&gt;// which is a Vec&amp;lt;String&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c"&gt;// With regex we start from [1]&lt;/span&gt;
                &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;MyWorld&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="py"&gt;.matches&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="py"&gt;.parse&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="py"&gt;.matches&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="py"&gt;.parse&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                &lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;world&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c"&gt;// The rest of the code will go here.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After declaring the &lt;code&gt;mod&lt;/code&gt;, we created our &lt;code&gt;builder&lt;/code&gt;, a &lt;code&gt;Steps&lt;/code&gt; struct that will store our steps.&lt;/p&gt;

&lt;p&gt;The crate &lt;code&gt;cucumber_rust&lt;/code&gt; provides three variations for the main Gherkin prefixes (&lt;code&gt;Given&lt;/code&gt;, &lt;code&gt;When&lt;/code&gt;, &lt;code&gt;Then&lt;/code&gt;):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The "normal" one that matches fixed values (e.g. &lt;code&gt;when()&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;regex&lt;/em&gt; version that parses the &lt;em&gt;regex&lt;/em&gt; input (e.g. &lt;code&gt;when_regex()&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;async&lt;/em&gt; version to handle &lt;em&gt;async&lt;/em&gt; tests, something I am not covering here (e.g. &lt;code&gt;when_async()&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;async&lt;/em&gt;+&lt;em&gt;regex&lt;/em&gt;, which is a combination of the last two (e.g. &lt;code&gt;when_regex_async()&lt;/code&gt;), also not covered here.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I am using &lt;code&gt;given_regex()&lt;/code&gt; to parse the two numbers. Remember that in &lt;code&gt;operations.feature&lt;/code&gt; I specified this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight gherkin"&gt;&lt;code&gt;&lt;span class="nf"&gt;Given &lt;/span&gt;the numbers &lt;span class="s"&gt;"2"&lt;/span&gt; and &lt;span class="s"&gt;"3"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you call a step function such as &lt;code&gt;given_regex()&lt;/code&gt; you get a &lt;a href="https://doc.rust-lang.org/rust-by-example/fn/closures.html"&gt;closure&lt;/a&gt; containing the &lt;code&gt;World&lt;/code&gt; object and a &lt;code&gt;Context&lt;/code&gt;. The latter have a field called &lt;code&gt;matches&lt;/code&gt; that is a &lt;code&gt;Vec&amp;lt;String&amp;gt;&lt;/code&gt; containing the &lt;em&gt;regex&lt;/em&gt; matches (if you're not using a &lt;code&gt;_regex&lt;/code&gt; step, the Vector will be empty). In this case, as I am using &lt;em&gt;regex&lt;/em&gt;, it has three values: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[0] has the entire match, &lt;code&gt;the numbers "2" and "3"&lt;/code&gt; in this case.&lt;/li&gt;
&lt;li&gt;[1] has the first group, &lt;code&gt;2&lt;/code&gt; in this case.&lt;/li&gt;
&lt;li&gt;[2] has the first group, &lt;code&gt;3&lt;/code&gt; in this case.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;This is the &lt;em&gt;regex&lt;/em&gt; "normal" behavior. If you are not familiar with &lt;em&gt;regex&lt;/em&gt;, &lt;a href="https://www.youtube.com/watch?v=sa-TUpSx1JA"&gt;this is a good intro&lt;/a&gt; (thank you YouTube for holding my &lt;em&gt;watch history&lt;/em&gt; for so long).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With these values, I return my &lt;code&gt;World&lt;/code&gt; object now set as &lt;code&gt;Input&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Before we move to &lt;code&gt;when&lt;/code&gt;, I have two quick remarks to make:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I am not checking the &lt;code&gt;unrwap()&lt;/code&gt; because the &lt;em&gt;regex&lt;/em&gt; is only catching numbers with &lt;code&gt;(\d)&lt;/code&gt;. Sometimes you might want to capture everything with something like &lt;code&gt;(.*)&lt;/code&gt; and validate the content inside your code.&lt;/li&gt;
&lt;li&gt;If you want to change your &lt;code&gt;World&lt;/code&gt; object (for example, if it is a struct holding multiple values and/or states), just place &lt;code&gt;mut&lt;/code&gt; before &lt;code&gt;world&lt;/code&gt; in the closure, and you will get a mutable object.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#when"&gt;
  &lt;/a&gt;
  When
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="nf"&gt;.when&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"the User multiply them"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;|{&lt;/span&gt;
        &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nn"&gt;MyWorld&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;MyWorld&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
            &lt;span class="mi"&gt;_&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;MyWorld&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This one is very straightforward. I use &lt;code&gt;match&lt;/code&gt; to get the &lt;code&gt;enum&lt;/code&gt; inner value, multiply both inputs and return the World object with a new value.&lt;/p&gt;

&lt;p&gt;The function &lt;code&gt;mult&lt;/code&gt; is ratter useless, but it has a role to play here: to show you how to import what we declared within the library crate.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#then"&gt;
  &lt;/a&gt;
  Then
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;
&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="nf"&gt;.then_regex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;r#"^the User gets "(\d)" as result$"#&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;|{&lt;/span&gt;
        &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nn"&gt;MyWorld&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="py"&gt;.matches&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
            &lt;span class="mi"&gt;_&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nd"&gt;panic!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Invalid world state"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="nn"&gt;MyWorld&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Init&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;builder&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here I use &lt;em&gt;regex&lt;/em&gt; again to compare the value that was calculated in the &lt;code&gt;Then&lt;/code&gt; step with the value provided by Gherkin (which is, as I said, a very suspicious BDD scenario). &lt;/p&gt;

&lt;p&gt;At the very end, I return &lt;code&gt;builder&lt;/code&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-substitute-raw-main-endraw-function"&gt;
  &lt;/a&gt;
  The substitute &lt;code&gt;main&lt;/code&gt; function
&lt;/h2&gt;

&lt;p&gt;After the &lt;code&gt;mod&lt;/code&gt;, we declare our &lt;code&gt;main&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[tokio::main]&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nn"&gt;Cucumber&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyWorld&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;.features&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"./features"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="nf"&gt;.steps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;test_steps&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="nf"&gt;.run_and_exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;.await&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Creating a &lt;code&gt;World&lt;/code&gt; object&lt;/li&gt;
&lt;li&gt;Pointing to the &lt;code&gt;.feature&lt;/code&gt; file containing the Gherkin test.&lt;/li&gt;
&lt;li&gt;Adding the steps defined with &lt;code&gt;cucumber_rust&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Running and exiting once it is done.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;await&lt;/code&gt; because &lt;code&gt;cucumber_rust&lt;/code&gt; requires the whole thing to be &lt;em&gt;async&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's it! To test it, all you have to do is to run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cargo test
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Rust will run the &lt;code&gt;main&lt;/code&gt; function found in the file specified in the manifest: &lt;code&gt;cucumber.rs&lt;/code&gt;. This is the result.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3IbBW2yg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d6euyxd80lhvblcfyqwj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3IbBW2yg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d6euyxd80lhvblcfyqwj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I recommend you to mess with the values and run the tests, so you can see how the errors are captured.&lt;/p&gt;




&lt;p&gt;Much more can be done with &lt;code&gt;cucumber_rust&lt;/code&gt;. I hope this tutorial helps you get started with it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cover image by &lt;em&gt;&lt;a href="https://unsplash.com/photos/4jqhNG5SDtU"&gt;Roman Fox&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>rust</category>
      <category>cucumber</category>
      <category>testing</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Learning Python- Intermediate course: Day 2, returning values from methods.</title>
      <author>Aatmaj</author>
      <pubDate>Wed, 04 Aug 2021 14:30:23 +0000</pubDate>
      <link>https://dev.to/aatmaj/learning-python-intermediate-course-day-2-returning-values-from-methods-4bhn</link>
      <guid>https://dev.to/aatmaj/learning-python-intermediate-course-day-2-returning-values-from-methods-4bhn</guid>
      <description>&lt;h2&gt;
  &lt;a href="#today-we-will-learn-how-to-return-values-from-user-defined-functions"&gt;
  &lt;/a&gt;
  Today we will learn how to return values from user defined functions.
&lt;/h2&gt;




&lt;p&gt;In the &lt;a href="https://dev.to/aatmaj/learning-python-intermediate-course-day-1-user-defined-functions-1kg7"&gt;previous part&lt;/a&gt;, we covered user-defined functions which did not return any value. But today we will learn how to make functions that return Python data types. This means that now instead of just printing the values, we will now use them in our main code!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#returning-values"&gt;
  &lt;/a&gt;
  Returning values.
&lt;/h3&gt;

&lt;p&gt;When we say return a value, it simply means- give the final result back to the part of code which called the function.&lt;br&gt;
The return statements can be only called from within a function. After the return statement is called, the function code terminates. This means that the statements after the return statement are not run!&lt;br&gt;
Here is the syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def fun(..,..,..):
    ...
    ...
    ...
    return ...

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#sample-question-write-a-function-isodd-to-check-parity-of-numbers"&gt;
  &lt;/a&gt;
  Sample question - Write a function isodd() to check parity of numbers.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;isodd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isodd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;False
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run the code yourself and check for different values.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#exercise-1-what-will-happen-if-the-else-statement-is-removed-in-the-above-code-answer"&gt;
  &lt;/a&gt;
  Exercise 1- What will happen if the else statement is removed in the above code? &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/cdf5cd5424ec5c5b6bd9fc0d05a9ddac42bcc17b/Intermediate/Day%202/Exercise%20solutions/Exercise%201.md"&gt;Answer&lt;/a&gt;
&lt;/h4&gt;




&lt;h3&gt;
  &lt;a href="#returning-multiple-values"&gt;
  &lt;/a&gt;
  Returning multiple values
&lt;/h3&gt;

&lt;p&gt;We cannot directly return multiple values in Python, but there are many &lt;a href="https://www.geeksforgeeks.org/g-fact-41-multiple-return-values-in-python/"&gt;hacks&lt;/a&gt; The best among them is returning a list of values.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#sample-question-2-write-a-function-to-return-the-smallest-two-entries-from-a-given-list"&gt;
  &lt;/a&gt;
  Sample question 2- Write a function to return the smallest two entries from a given list
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;SmallestTwo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="n"&gt;myList&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SmallestTwo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myList&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[1, 3]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#exercise-2-write-a-function-to-reverse-a-string-answer"&gt;
  &lt;/a&gt;
  Exercise 2- Write a function to reverse a string. &lt;a href="https://github.com/Aatmaj-Zephyr/Learning-Python/blob/77f9ed8e74f21dbadd14e9296a093338a113558e/Intermediate/Day%202/Exercise%20solutions/Exercise%202.py"&gt;Answer&lt;/a&gt;
&lt;/h3&gt;

</description>
      <category>learningpython</category>
      <category>python</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Python f-strings can do more than you thought</title>
      <author>Envoy-VC</author>
      <pubDate>Wed, 04 Aug 2021 14:17:34 +0000</pubDate>
      <link>https://dev.to/envoy_/python-f-strings-can-do-more-than-you-thought-23ag</link>
      <guid>https://dev.to/envoy_/python-f-strings-can-do-more-than-you-thought-23ag</guid>
      <description>&lt;p&gt;In this Article I'm going to be talking about f-strings and some of the cool things that you can do with them. so most of you are probably already aware of what f strings are.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fstrings"&gt;
  &lt;/a&gt;
  🎯 f-strings
&lt;/h2&gt;

&lt;p&gt;
Also called “formatted string literals,” f-strings are string literals that have an f at the beginning and curly braces containing expressions that will be replaced with their values.
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1put-a-sign-afterwards"&gt;
  &lt;/a&gt;
  1.Put a '='  Sign afterwards
&lt;/h2&gt;

&lt;p&gt;One of the really cool things that you can do is just put an equals sign afterwards,eg-&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-"&gt;
  &lt;/a&gt;
  Code -
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Hello World'&lt;/span&gt;
&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;152&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'The value of word is f&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'The value of num is f&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#output-"&gt;
  &lt;/a&gt;
  Output -
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;The value of word is Hello World
word='Hello World'
The value of num is f152
num=152
num + 8 =160
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2conversions"&gt;
  &lt;/a&gt;
  2.Conversions
&lt;/h2&gt;

&lt;p&gt;
So if you're not aware,  inside the curly braces of an f string after the expression you can put a

 ```!a ,!s , !r ```

 , and 
what these do is instead of printing the value of this thing, it will additionally do some extra thing on top of that.
&lt;/p&gt;



&lt;p&gt;
!r - repr() 'The repr() method returns a string containing a printable representation of an object.'
&lt;br&gt;
&lt;br&gt;
!a - ascii 'all the non ascii characters get replaced with an ascii safe escaped version of it'
&lt;br&gt; 
&lt;br&gt;
!s - string conversion operator 'formating'
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-"&gt;
  &lt;/a&gt;
  Code -
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;conversion&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;str_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello World 😀"&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;str_value&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;str_value&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;str_value&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;conversion&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#output-"&gt;
  &lt;/a&gt;
  Output -
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'Hello World 😀'
'Hello World \U0001f600'
Hello World 😀
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3formatting"&gt;
  &lt;/a&gt;
  3.Formatting
&lt;/h2&gt;

&lt;p&gt;
':' after the variable 
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-"&gt;
  &lt;/a&gt;
  Code -
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;formatting&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;num_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;475.2486&lt;/span&gt;
    &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;#Formats the datee in the given format
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;-%&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;-%&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Rounds the decimal to 2 digits
&lt;/span&gt;    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;num_value&lt;/span&gt;&lt;span class="p"&gt;:.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;formatting&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#output-"&gt;
  &lt;/a&gt;
  Output -
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;now=2021-08-04
475.25
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>python</category>
      <category>programming</category>
      <category>todayilearned</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to learn devops</title>
      <author>Ajit Singh</author>
      <pubDate>Wed, 04 Aug 2021 14:10:03 +0000</pubDate>
      <link>https://dev.to/ajitsinghkaler/how-to-learn-devops-48pc</link>
      <guid>https://dev.to/ajitsinghkaler/how-to-learn-devops-48pc</guid>
      <description>&lt;p&gt;So from the past few months I've been learning about AWS and a lot about Hashicorp stack too I've tried some projects deployed Forem, ghost, basic applications but it still seems I'm getting no where with devops. So what projects do you think I should do to be better at cloud deployment and SRE(software reliability engineering). Are thee some Github repo that I can follow or is there any curated list of articles or resources that should be followed I'm stumped here. If someone can help me in the comments?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>devops</category>
      <category>cloud</category>
      <category>help</category>
    </item>
    <item>
      <title>Make anchors in links work in EmberJS</title>
      <author>Michal Bryxí</author>
      <pubDate>Wed, 04 Aug 2021 13:54:26 +0000</pubDate>
      <link>https://dev.to/michalbryxi/make-anchors-in-links-work-in-emberjs-51l9</link>
      <guid>https://dev.to/michalbryxi/make-anchors-in-links-work-in-emberjs-51l9</guid>
      <description>&lt;p&gt;Every web app starts with an &lt;a href="https://en.wikipedia.org/wiki/URL"&gt;URL&lt;/a&gt;. And commonly used URLs for web apps usually look something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://domain.com/path?query=value#fragment
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last bit (&lt;code&gt;fragment&lt;/code&gt;) can be used to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#linking_to_an_element_on_the_same_page"&gt;instruct the browser&lt;/a&gt; to scroll the page to the element that has the same &lt;code&gt;id&lt;/code&gt; as said fragment. Those are usually called &lt;em&gt;anchors&lt;/em&gt; or &lt;em&gt;in-page-anchors&lt;/em&gt;. Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- &amp;lt;a&amp;gt; element links to the section below --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#Section_further_down"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Jump to the heading below
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Heading to link to --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"Section_further_down"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Section further down&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The scrolling works when the user clicks on a link on current page and also when the user opens the URL from bookmarks or other app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h2&gt;

&lt;p&gt;Unfortunately with the advent of &lt;a href="https://en.wikipedia.org/wiki/Single-page_application"&gt;Single-page applications&lt;/a&gt; (SPAs), this nifty feature of the browsers stopped working. &lt;/p&gt;

&lt;p&gt;Why? Because initially, SPA has minimal HTML with a link to a big JavaScript bundle that will eventually get parsed by the browser and &lt;em&gt;the JS code&lt;/em&gt; will populate the DOM with respective elements based on URL, data, code logic, etc.&lt;/p&gt;

&lt;p&gt;So at the initial page load when the browser checks in the DOM for the presence of an &lt;em&gt;tag&lt;/em&gt; that has the same &lt;em&gt;id&lt;/em&gt; as the &lt;em&gt;fragment&lt;/em&gt; in the &lt;em&gt;URL&lt;/em&gt; it will find nothing because the DOM is almost empty.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The solution
&lt;/h2&gt;

&lt;p&gt;Luckily &lt;a href="https://emberjs.com/"&gt;EmberJS&lt;/a&gt; has an addon (&lt;a href="https://github.com/CrowdStrike/ember-url-hash-polyfill"&gt;ember-url-hash-polyfill&lt;/a&gt;) that solves exactly this kind of problem in a very elegant way. From the addon README:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Navigating to URLs with &lt;code&gt;#hash-targets&lt;/code&gt; in them is not supported by most single-page-app frameworks due to the async rendering nature of modern web apps -- the browser can't scroll to a &lt;code&gt;#hash-target&lt;/code&gt; on page load/transition because the element hasn't been rendered yet.&lt;/p&gt;

&lt;p&gt;This addon provides a way to support the behaviour that is normally native to browsers where an anchor tag with &lt;code&gt;href="#some-id-or-name"&lt;/code&gt; would scroll down the page when clicked.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once you install it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ember &lt;span class="nb"&gt;install &lt;/span&gt;ember-url-hash-polyfill
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You just have to adjust your app &lt;code&gt;router.js&lt;/code&gt; and add a &lt;code&gt;withHashSupport&lt;/code&gt; decorator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app/router.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;withHashSupport&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ember-url-hash-polyfill&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;withHashSupport&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;EmberRouter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;locationType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;rootURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rootURL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And after that all URLs with &lt;em&gt;in-page-anchors&lt;/em&gt; in them should just work™.&lt;/p&gt;




&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@lucassankey?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Lucas Sankey&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/anchor?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;br&gt;
  Make anchors in links work in EmberJS&lt;/p&gt;

</description>
      <category>ember</category>
    </item>
    <item>
      <title>S3 types of Storage</title>
      <author>Ajit Singh</author>
      <pubDate>Wed, 04 Aug 2021 13:43:43 +0000</pubDate>
      <link>https://dev.to/this-is-learning/s3-types-of-storage-1535</link>
      <guid>https://dev.to/this-is-learning/s3-types-of-storage-1535</guid>
      <description>&lt;p&gt;We store files in S3 but we may need different types of storage based on our needs. Like some files that are infrequently accessed some that are needed once a year so paying the same charges as a normal storage does not make sense for these. So, based on our needs AWS has given us various types of storage based on needs.There are 6 types of storage types in AWS S3 &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;S3 Standard&lt;/strong&gt; for general-purpose storage of frequently accessed data&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;S3 Intelligent-Tiering&lt;/strong&gt; for data with unknown or changing access patterns&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;S3 Standard-Infrequent Access&lt;/strong&gt; (S3 Standard-IA)for long-lived, but less frequently accessed data&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;S3 One Zone-Infrequent Access&lt;/strong&gt; (S3 One Zone-IA) for long-lived, but less frequently accessed data&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Amazon S3 Glacier&lt;/strong&gt; (S3 Glacier) for archives&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Amazon S3 Glacier Deep Archive&lt;/strong&gt; (S3 Glacier Deep Archive) for long-term archive and digital preservation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All these storage classes varies on the availability of our objects in our S3 buckets for usage. Let us study each one of them in detail&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#s3-standard"&gt;
  &lt;/a&gt;
  S3 Standard
&lt;/h2&gt;

&lt;p&gt;This is the storage type we have been using until now,it is the default for our S3 buckets. It has low latency and high availability. This is used when the data has a very frequent access. It has very high availability and AWS is bound by the &lt;a href="https://aws.amazon.com/s3/sla/"&gt;SLA agreement&lt;/a&gt; on this which makes sure its always highly available. It is used for dynamic websites, content distribution, mobile and gaming applications, and big data analytics.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#s3-standardinfrequent-access"&gt;
  &lt;/a&gt;
  S3 Standard-Infrequent Access
&lt;/h2&gt;

&lt;p&gt;This has 99.9% percent availability. Suitable for data when is accessed less but requires immediate access when needed. It requires less money for storage but whenever we retrieve the objects under this class we have to pay a fee so its not good for frequent access. It is mainly used for  long-term storage, backups, and as a data store for disaster recovery files. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#s3-intelligenttiering"&gt;
  &lt;/a&gt;
  S3 Intelligent-Tiering
&lt;/h2&gt;

&lt;p&gt;If you don't know where to put your data in standard access or Infrequent Access. We have this storage class in which S3 automatically stores data according to pour retrieval rates. If data is frequently accessed then it is put in standard storage other wise in Infrequent Access . This is the most cost optimized class if you don't want to think in which class to put your data. It is the ideal storage class for data sets with unknown storage access patterns, like new applications, or unpredictable access patterns, like data lakes. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#s3-one-zoneinfrequent-access"&gt;
  &lt;/a&gt;
  S3 One Zone-Infrequent Access
&lt;/h2&gt;

&lt;p&gt;One Zone-Infrequent Access it has all the same properties of Infrequent access except all the above storage are in 3 availability zones but this storage class is only in one AZ so is prone to disasters. It is ideal for customers who want a lower-cost option for infrequently accessed data but do not require the availability and resilience of S3 Standard or S3 Standard-IA. It’s a good choice for storing secondary backup copies of on-premises data or easily re-creatable data. You can also use it as cost-effective storage for data that is replicated from another AWS Region using S3 Cross-Region Replication. It is normally used for data that you want ti copy across regions as copying it across 3 AZ may not make sense.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazon-s3-glacier"&gt;
  &lt;/a&gt;
  Amazon S3 Glacier
&lt;/h2&gt;

&lt;p&gt;S3 glacier is a very low cost storage available on S3. Normally data stored here is kept for years. you normally use it for data archiving. You can reliably store any amount of data at costs that are competitive with or cheaper than on-premises solutions. It has 3 sub classes of data retrievals available in S3 glacier &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Expedited - Data retrieval in 1 to 5 min&lt;/li&gt;
&lt;li&gt;Standard - Data retrieval in 3 to 5 hours&lt;/li&gt;
&lt;li&gt;Bulk - Data retrieval in 5 to 12 hours&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#amazon-s3-deep-glacier"&gt;
  &lt;/a&gt;
  Amazon S3 Deep Glacier
&lt;/h2&gt;

&lt;p&gt;S3 Glacier Deep Archive is Amazon S3’s lowest-cost storage class and supports long-term retention and digital preservation for data that may be accessed once or twice in a year. It is designed for customers — particularly those in highly-regulated industries, such as the Financial Services, Healthcare, and Public Sectors — that retain data sets for 7-10 years or longer to meet regulatory compliance requirements. S3 Glacier Deep Archive can also be used for backup and disaster recovery use cases, and is a cost-effective and easy-to-manage alternative to magnetic tape systems, whether they are on-premises libraries or off-premises services. S3 Glacier Deep Archive complements Amazon S3 Glacier, which is ideal for archives where data is regularly retrieved and some of the data may be needed in minutes. It has 3 sub classes of data retrievals available in S3 deep glacier &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Standard - Data retrieval in 12 hours&lt;/li&gt;
&lt;li&gt;Bulk - Data retrieval in 48 hours&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;

&lt;tbody&gt;

&lt;tr&gt;

&lt;th&gt; &lt;/th&gt;

&lt;th&gt;S3 Standard&lt;/th&gt;

&lt;th&gt;S3 Intelligent-Tiering*&lt;/th&gt;

&lt;th&gt;S3 Standard-IA&lt;/th&gt;

&lt;th&gt;S3 One Zone-IA†&lt;/th&gt;

&lt;th&gt;S3 Glacier&lt;/th&gt;

&lt;th&gt;S3 Glacier Deep Archive&lt;/th&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;Designed for durability&lt;/td&gt;

&lt;td&gt;99.999999999% (11 9’s)&lt;/td&gt;

&lt;td&gt;99.999999999% (11 9’s)&lt;/td&gt;

&lt;td&gt;99.999999999% (11 9’s)&lt;/td&gt;

&lt;td&gt;99.999999999% (11 9’s)&lt;/td&gt;

&lt;td&gt;99.999999999% (11 9’s)&lt;/td&gt;

&lt;td&gt;99.999999999% (11 9’s)&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;Designed for availability&lt;/td&gt;

&lt;td&gt;99.99%&lt;/td&gt;

&lt;td&gt;99.9%&lt;/td&gt;

&lt;td&gt;99.9%&lt;/td&gt;

&lt;td&gt;99.5%&lt;/td&gt;

&lt;td&gt;99.99%&lt;/td&gt;

&lt;td&gt;99.99%&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;Availability SLA&lt;/td&gt;

&lt;td&gt;99.9%&lt;/td&gt;

&lt;td&gt;99%&lt;/td&gt;

&lt;td&gt;99%&lt;/td&gt;

&lt;td&gt;99%&lt;/td&gt;

&lt;td&gt;99.9%&lt;/td&gt;

&lt;td&gt;99.9%&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;Availability Zones&lt;/td&gt;

&lt;td&gt;≥3&lt;/td&gt;

&lt;td&gt;≥3&lt;/td&gt;

&lt;td&gt;≥3&lt;/td&gt;

&lt;td&gt;1&lt;/td&gt;

&lt;td&gt;≥3&lt;/td&gt;

&lt;td&gt;≥3&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;Minimum capacity charge per object&lt;/td&gt;

&lt;td&gt;N/A&lt;/td&gt;

&lt;td&gt;N/A&lt;/td&gt;

&lt;td&gt;128KB&lt;/td&gt;

&lt;td&gt;128KB&lt;/td&gt;

&lt;td&gt;40KB&lt;/td&gt;

&lt;td&gt;40KB&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;Minimum storage duration charge&lt;/td&gt;

&lt;td&gt;N/A&lt;/td&gt;

&lt;td&gt;30 days&lt;/td&gt;

&lt;td&gt;30 days&lt;/td&gt;

&lt;td&gt;30 days&lt;/td&gt;

&lt;td&gt;90 days&lt;/td&gt;

&lt;td&gt;180 days&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;Retrieval fee&lt;/td&gt;

&lt;td&gt;N/A&lt;/td&gt;

&lt;td&gt;N/A&lt;/td&gt;

&lt;td&gt;per GB retrieved&lt;/td&gt;

&lt;td&gt;per GB retrieved&lt;/td&gt;

&lt;td&gt;per GB retrieved&lt;/td&gt;

&lt;td&gt;per GB retrieved&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;First byte latency&lt;/td&gt;

&lt;td&gt;milliseconds&lt;/td&gt;

&lt;td&gt;milliseconds&lt;/td&gt;

&lt;td&gt;milliseconds&lt;/td&gt;

&lt;td&gt;milliseconds&lt;/td&gt;

&lt;td&gt;select minutes or hours&lt;/td&gt;

&lt;td&gt;select hours&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;Storage type&lt;/td&gt;

&lt;td&gt;Object&lt;/td&gt;

&lt;td&gt;Object&lt;/td&gt;

&lt;td&gt;Object&lt;/td&gt;

&lt;td&gt;Object&lt;/td&gt;

&lt;td&gt;Object&lt;/td&gt;

&lt;td&gt;Object&lt;/td&gt;

&lt;/tr&gt;

&lt;tr&gt;

&lt;td&gt;Lifecycle transitions&lt;/td&gt;

&lt;td&gt;Yes&lt;/td&gt;

&lt;td&gt;Yes&lt;/td&gt;

&lt;td&gt;Yes&lt;/td&gt;

&lt;td&gt;Yes&lt;/td&gt;

&lt;td&gt;Yes&lt;/td&gt;

&lt;td&gt;Yes&lt;/td&gt;

&lt;/tr&gt;

&lt;/tbody&gt;

&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;In this article we studies about the various S3 classes in the next article we will study how to use them and move various things into different storage classes.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>beginners</category>
      <category>cloud</category>
      <category>devops</category>
    </item>
    <item>
      <title>
Best Practices for Cloud Disaster Recovery in Microsoft Azure</title>
      <author>We are IOD</author>
      <pubDate>Wed, 04 Aug 2021 13:36:57 +0000</pubDate>
      <link>https://dev.to/iod/best-practices-for-cloud-disaster-recovery-in-microsoft-azure-2dg0</link>
      <guid>https://dev.to/iod/best-practices-for-cloud-disaster-recovery-in-microsoft-azure-2dg0</guid>
      <description>&lt;p&gt;In today’s cloud era, the ability to bounce back after downtime can make or break your business. Disaster recovery (DR) capabilities should therefore be a key consideration when choosing a cloud platform. Leveraging the cloud as a secondary data center for DR is often the first step in cloud adoption, and disaster recovery as a service (DRaaS) offerings from various cloud service providers underline this fact.&lt;/p&gt;

&lt;p&gt;Azure packs a punch with multiple DR options for services like VMs, storage, databases, and containers. In this blog post, I’ll explore these options and discuss how you can develop a robust business continuity and disaster recovery (BCDR) strategy for your workloads hosted in Azure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-consider-when-creating-your-dr-plan-in-azure"&gt;
  &lt;/a&gt;
  What to Consider When Creating Your DR Plan in Azure
&lt;/h2&gt;

&lt;p&gt;Contrary to popular belief, applications hosted in the cloud are not foolproof—failures happen. Since application downtime can be disastrous for your business, you need a well-defined DR strategy to be prepared to handle failures. This strategy should cover the entire application stack, not just the services you think are important.&lt;/p&gt;

&lt;p&gt;You might need to manually trigger the DR process yourself in order to differentiate between transient failures and actual downtimes. However, the failover process in Azure should be automated as much as possible. &lt;a href="https://stagemarketer.wpengine.com/blog/monitoring-in-azure-the-high-level-fundamentals/"&gt;Configure alerts&lt;/a&gt; so you can stay informed about failures and take necessary actions to trigger your DR plan.&lt;/p&gt;

&lt;p&gt;With Azure, you can choose to deploy application components across Azure regions to protect from regional failures. If applications are regional, you can deploy them in availability zones (physically separated zones within a region) to protect from data center failures. Your choice will depend on the type of resiliency you want to deliver for your application. In addition to a DR strategy that protects from cateroscopic failures, you should have a backup strategy for  preventing unavailability due to data corruption or application configuration.&lt;/p&gt;

&lt;p&gt;Your DR strategy should also clearly define the DR process, which activities will be completed when the plan is triggered, and who will be responsible for executing the plan. However, a detailed DR strategy won’t really help unless you test and fine-tune it regularly. This is where services that offer non-disruptive DR testing, such as Azure’s DR solution, come into play. Similarly, executing a regular test restore of backups in a test environment will help avoid surprises during an eventuality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disaster-recovery-in-azure-what-are-your-options"&gt;
  &lt;/a&gt;
  Disaster Recovery in Azure: What Are Your Options?
&lt;/h2&gt;

&lt;p&gt;Before developing a DR strategy, you should be clear about the recovery point objective (RPO) and recovery time objective (RTO) for your workloads. For example, if a bit of downtime is okay with you (i.e., non-prod and test environments), a complete redeployment of applications is a good choice. You can also choose to adopt an active/passive or warm-spare approach, where a &lt;a href="https://stagemarketer.wpengine.com/blog/cost-optimization-in-azure-the-building-blocks-part-1/"&gt;scaled-down secondary service&lt;/a&gt; is ready to take over in the event of a failure. It’s most effective to use an active/active or hot-spare architecture, where instances of the application are available in multiple regions in order to accept production traffic.&lt;/p&gt;

&lt;p&gt;Azure offers native capabilities built into most of its services, which can be leveraged to develop a well-rounded DR strategy. Note that it’s important to start from the ground up (i.e., covering infrastructure, if applicable, as well as data and application layers) in order to develop a comprehensive solution. Below I’ll explore the DR options for common Azure services.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#virtual-machines"&gt;
  &lt;/a&gt;
  Virtual Machines
&lt;/h2&gt;

&lt;p&gt;Azure Site Recovery, Azure’s DRaaS offering, helps protect your VMs from outages by continuously replicating them to a different paired region. In the event of a disaster, the VMs can be failed over to the secondary region, and you can enable access from there. You can also fail back to the primary region once the outage is over. Organizations often use Azure Site Recovery to leverage Azure as their DR site, as it supports replicating VMs in VMware/Hyper-V or in physical machines to Azure.&lt;/p&gt;

&lt;p&gt;Azure Backup is another solution you can include in the BCDR strategy for your VMs. You can use this cloud-based backup service to take point-in-time copies of data in the VMs. The backup copies can then be restored to bring your application back online in the event of data loss or corruption. For the highest level of availability and resiliency from failure, use a &lt;a href="https://docs.microsoft.com/en-us/azure/architecture/reference-architectures/n-tier/multi-region-sql-server"&gt;multi-region architecture&lt;/a&gt;, in which both primary and secondary regions are factored into the design.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#storage"&gt;
  &lt;/a&gt;
  Storage
&lt;/h2&gt;

&lt;p&gt;An Azure Storage account can be deployed as geo-redundant, allowing data in the storage account to be replicated to the secondary region asynchronously. In case of an outage that renders the primary end point unavailable, you can initiate an account failover for &lt;a href="https://docs.microsoft.com/en-us/azure/backup/azure-file-share-backup-overview"&gt;Azure Storage&lt;/a&gt;. The failover process will cause the secondary endpoint to become the primary one so that applications can continue to use the storage. &lt;/p&gt;

&lt;p&gt;For Azure Blob, you can use snapshots to create read-only point-in-time copies of the data. Azure files can be protected through a scheduled Azure backup. You can also use the snapshot feature to create point-in-time copies of the data, similar to Azure Blob. If your application is utilizing Azure Table storage, use the &lt;a href="https://docs.microsoft.com/en-us/azure/storage/common/storage-use-azcopy-v10"&gt;AzCopy&lt;/a&gt; tool to copy the data to a different storage account in another Azure region for DR purposes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#databases"&gt;
  &lt;/a&gt;
  Databases
&lt;/h2&gt;

&lt;p&gt;Your DR strategy for databases will depend on whether you are using IaaS or PaaS as the deployment approach. For SQL Server and SAP HANA databases hosted in VMs, you can use the integrated Azure Backup feature to discover and configure regular backup without deploying any additional infrastructure. &lt;/p&gt;

&lt;p&gt;There are also managed databases like Azure SQL, MySQL, PostgreSQL, and Cosmos DB, delivered as PaaS services. For those databases, Azure offers an automated backup service that takes regular snapshot-based backups of the database to a separate storage account. If you need the backups to be retained for a longer period of time, Azure SQL offers a &lt;a href="https://docs.microsoft.com/en-us/azure/azure-sql/database/long-term-retention-overview"&gt;long-term backup retention feature&lt;/a&gt; that allows you to store your backup copies in a storage account for up to 10 years.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#containers"&gt;
  &lt;/a&gt;
  Containers
&lt;/h2&gt;

&lt;p&gt;Azure provides a robust ecosystem of services to support &lt;a href="https://stagemarketer.wpengine.com/blog/what-you-should-know-about-containers-in-azure/"&gt;container-based workloads&lt;/a&gt;, including: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Azure Kubernetes Service (AKS)&lt;/li&gt;
&lt;li&gt;Azure Container Instances (ACI)&lt;/li&gt;
&lt;li&gt;Azure App Service&lt;/li&gt;
&lt;li&gt;Azure Container Registry (ACR)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AKS uses VM scale sets that can protect your workloads from node failures. However, to protect from regional outages, you should consider multi-region deployments that &lt;a href="https://docs.microsoft.com/en-us/azure/aks/operator-best-practices-multi-region#use-azure-traffic-manager-to-route-traffic"&gt;leverage Azure Traffic Manager&lt;/a&gt; to route traffic to available regions.&lt;/p&gt;

&lt;p&gt;It’s also important to segregate the process of recovering your application and data. You can leverage Azure Storage solutions like disks and file shares to create &lt;a href="https://docs.microsoft.com/en-us/azure/aks/concepts-storage#persistent-volumes"&gt;persistent volumes&lt;/a&gt; for applications hosted in containers, then protect that data using Azure Backup. ACR’s geo-replication feature allows you to access your container images from a secondary region, should the primary endpoint go down due to a regional outage. &lt;/p&gt;

&lt;p&gt;In addition, you should have a well-defined DevOps process for redeploying infrastructure to a different region through IAC, and for redeploying applications through a CI/CD process, should there be a downtime due to a cloud outage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#azure-app-service"&gt;
  &lt;/a&gt;
  Azure App Service
&lt;/h2&gt;

&lt;p&gt;For Azure App Service, &lt;a href="https://docs.microsoft.com/en-us/azure/architecture/reference-architectures/app-service-web-app/multi-region"&gt;multi-region deployment&lt;/a&gt; is the best way to minimize application downtime. You can also leverage the backup and restore feature of Azure App Service, which automatically creates a backup of your application configuration, file content, and databases connected to the app. In case of regional outages, applications hosted in Azure App Service will be placed in DR mode. In this mode, you can restore your app contents to a destination app in a different Azure region.&lt;/p&gt;

&lt;p&gt;With a mature DevOps practice in place, you can also restore the application by redeploying the code targeting the new destination app. For serverless apps like Azure Functions and microservices-based deployments, it’s best to separate the configuration from the code in cloud-scale deployments. You can use &lt;a href="https://docs.microsoft.com/en-us/azure/azure-app-configuration/overview"&gt;Azure App Configuration&lt;/a&gt; to store configuration information that can be accessed during runtime. This approach also helps fast-track the redeployment process of applications during a disaster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The modern cloud-scale applications deployed in Azure offer multiple options for DR. Be it end-to-end replication using Azure Site Recovery for VMs, leveraging CI/CD pipelines for redeployment, or the more traditional backup/restore approach for services like Azure apps, databases, and containers, the best solution for you will depend on your RPO and RTO. In most cases, you can create an effective solution using Azure-native tools and services and by integrating elements of DR into your application architecture.&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>azure</category>
    </item>
  </channel>
</rss>
