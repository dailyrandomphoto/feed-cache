<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Estamos de volta!</title>
      <author>Iele Passos</author>
      <pubDate>Mon, 21 Jun 2021 17:00:02 +0000</pubDate>
      <link>https://dev.to/opendevufcg/estamos-de-volta-2ndk</link>
      <guid>https://dev.to/opendevufcg/estamos-de-volta-2ndk</guid>
      <description>&lt;p&gt;
&lt;a href="https://i.giphy.com/media/3oEjI99ZdyZRE9Dw5O/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3oEjI99ZdyZRE9Dw5O/giphy.gif"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;√â isso mesmo! Sentiram a nossa falta?&lt;/p&gt;

&lt;p&gt;N√£o h√° nada melhor do que poder tirar um tempo para descansar e refletir a respeito do rumo que queremos tomar, n√©?&lt;br&gt;
Como resultado dessa nossa "hiberna√ß√£o", definimos que teremos postagens constantes (1x por semana) com os mais variados temas feitas por membros e convidados da nossa comunidade.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#durante-esse-tempo-que-o-blog-esteve-parado-n%C3%B3s-n%C3%A3o-est%C3%A1vamos"&gt;
  &lt;/a&gt;
  Durante esse tempo que o blog esteve parado, n√≥s n√£o est√°vamos:
&lt;/h1&gt;

&lt;p&gt;¬†&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#-criamos-o-andromedev"&gt;
  &lt;/a&gt;
  - Criamos o Andromedev!!üöÄüöÄüöÄ
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4QEOulRQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://svgshare.com/i/QTp.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4QEOulRQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://svgshare.com/i/QTp.svg"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Pensando em fortalecer a comunidade nesse per√≠odo de pandemia, criamos o primeiro evento de mentoria organizado pela OpenDevUFCG  com o intuito de incentivar a participa√ß√£o de estudantes em projetos open source!&lt;/p&gt;

&lt;p&gt;O evento ocorreu em um per√≠odo de nove semanas, onde estudantes colaboraram com projetos open source atrav√©s de um sistema de mentoria. Cada projeto teve uma pessoa respons√°vel, que tinha a miss√£o de orientar a pessoa aprendiz durante o evento, ajudando a realizar as contribui√ß√µes open source.&lt;/p&gt;

&lt;p&gt;Na inscri√ß√£o, foram disponibilizados diversos projetos que conseguimos atrav√©s de parcerias com laborat√≥rios da universidade, organiza√ß√µes e empresas que estejam dispostas a ensinar alunos. Dentre elas, contamos com empresas de renome internacional, como a &lt;a href="https://www.redhat.com/pt-br"&gt;RedHat&lt;/a&gt; e a &lt;a href="https://vtex.com/br-pt/"&gt;VTEX&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ao fim do evento, foi realizada uma apresenta√ß√£o dos resultados dos projetos participantes do evento, que est√° dispon√≠vel em nosso &lt;a href="https://www.youtube.com/c/OpenDevUFCG/videos"&gt;canal do YouTube&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Ao todo, na edi√ß√£o de 2020, foram &lt;strong&gt;49&lt;/strong&gt; projetos, &lt;strong&gt;145&lt;/strong&gt; inscritos para aprendiz e &lt;strong&gt;22&lt;/strong&gt; organiza√ß√µes!&lt;/p&gt;

&lt;p&gt;Amasse? &lt;a href="https://andromedev.opendevufcg.org/"&gt;https://andromedev.opendevufcg.org/&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#-teve-hacktoberfest-online"&gt;
  &lt;/a&gt;
  - Teve Hacktoberfest online!
&lt;/h3&gt;

&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--asyijcG0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://opendevufcg.org/hacktoberfest/assets/img/logo.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--asyijcG0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://opendevufcg.org/hacktoberfest/assets/img/logo.svg"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;O Hacktoberfest √© um evento realizado ao longo de todo o m√™s de outubro, engajando estudantes e desenvolvedores em atividades e iniciativas voltadas ao open source ao redor do mundo todo.&lt;/p&gt;

&lt;p&gt;Com toda a situa√ß√£o causada pelo COVID-19, tivemos que repensar totalmente a estrutura do evento para conseguirmos engajar e passar conhecimentos sobre programa√ß√£o e cultura open source ao mesmo tempo que respeitamos √†s recomenda√ß√µes de isolamento social.&lt;/p&gt;

&lt;p&gt;Assim, fizemos o Hacktoberfest Home Edition!!&lt;br&gt;
O evento durou o M√äS INTEIRO!! √â isso mesmo que voc√™ leu, foram 4 semanas abordando v√°rios temas distintos atrav√©s de Palestras e Workshops com v√°rios convidados e membros da OpenDevUFCG. Falamos de conceitos iniciais, open source, an√°lise de dados, frontend, design e muito mais, e o melhor, TUDO DE GRA√áA!&lt;/p&gt;

&lt;p&gt;Na edi√ß√£o online de 2020, tivemos o &lt;strong&gt;m√™s inteiro&lt;/strong&gt; de programa√ß√£o, &lt;strong&gt;10&lt;/strong&gt; palestras/minicursos, &lt;strong&gt;mais de 2.000&lt;/strong&gt; visualiza√ß√µes, &lt;strong&gt;mais de 900&lt;/strong&gt; minutos de conte√∫do e parceria com a &lt;a href="https://vtex.com/br-pt/"&gt;VTEX&lt;/a&gt; e a &lt;a href="https://www.behance.net/ovnidesign"&gt;Ovni Design&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Quer saber mais? &lt;a href="https://opendevufcg.org/hacktoberfest/#about"&gt;https://opendevufcg.org/hacktoberfest/#about&lt;/a&gt;  &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#-nossa-comunidade-cresceu"&gt;
  &lt;/a&gt;
  - Nossa comunidade cresceu!!
&lt;/h3&gt;

&lt;p&gt;
&lt;a href="https://i.giphy.com/media/fgLKQtTw54Hk8bRaXD/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/fgLKQtTw54Hk8bRaXD/giphy.gif"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No nosso discord, temos mais de &lt;strong&gt;370&lt;/strong&gt; membros, onde &lt;strong&gt;mais 14&lt;/strong&gt; pessoas entraram no CoreTeam;&lt;/li&gt;
&lt;li&gt;No nosso &lt;a href="https://www.instagram.com/opendevufcg/"&gt;Instagram&lt;/a&gt;, temos mais de &lt;strong&gt;600&lt;/strong&gt; seguidores;&lt;/li&gt;
&lt;li&gt;E em nosso &lt;a href="https://twitter.com/OpenDevUFCG"&gt;Twitter&lt;/a&gt; temos mais de &lt;strong&gt;300&lt;/strong&gt; seguidores!!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#-agora-temos-um-perfil-na-open-collective"&gt;
  &lt;/a&gt;
  - Agora temos um perfil na Open Collective!!
&lt;/h3&gt;

&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gCIL1mAA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://opensource.org/files/opencollective.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gCIL1mAA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://opensource.org/files/opencollective.png"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;A &lt;a href="https://opencollective.com/"&gt;Open Collective&lt;/a&gt; √© uma ferramenta open source que permite que voc√™ gerencie suas finan√ßas para que todos possam ver de onde vem o dinheiro e aonde ele vai. &lt;/p&gt;

&lt;p&gt;Ou seja, agora fica mais f√°cil patrocinar/apoiar/doar para a nossa comunidade e ver onde e como o dinheiro foi gasto!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://opencollective.com/opendevufcg"&gt;&lt;strong&gt;Confira nosso perfil!&lt;/strong&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mas-o-que-ser%C3%A1-que-vem-ai"&gt;
  &lt;/a&gt;
  Mas o que ser√° que vem ai??
&lt;/h2&gt;

&lt;p&gt;
&lt;a href="https://i.giphy.com/media/xGdvlOVSWaDvi/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/xGdvlOVSWaDvi/giphy.gif"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Al√©m dos posts semanais por aqui, teremos eventos, minicursos, novos projetos...boatos que vai ser tuudo!&lt;br&gt;
E para saber quando o qu√™ vai acontecer √© facinho facinho: Nos acompanhem em nossas redes!!&lt;br&gt;
&lt;a href="https://twitter.com/opendevufcg"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.instagram.com/opendevufcg"&gt;Instagram&lt;/a&gt; e, claro, no &lt;a href="https://github.com/OpenDevUFCG"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;Muito obrigada pela leitura!&lt;br&gt;
Meu nome √© Iele Passos e sou contribuidora do OpenDevUFCG. Se desejar entrar em contato comigo, √© s√≥ me mandar uma mensagem no Discord (iele#7381) ou no &lt;a href="https://www.linkedin.com/in/ielepassos/"&gt;LinkedIn&lt;/a&gt; e, se quiser ver um pouco do meu trabalho, d√° uma olhada no meu &lt;a href="https://github.com/ielepassos"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Fiquem atentos: em breve, teremos novos artigos de contribuidores do OpenDevUFCG aqui no dev.to (inclusive meus hehehe)&lt;/p&gt;

</description>
      <category>ptbr</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Headless CMS: Building apps with Nuxt and Sanity</title>
      <author>Joel Olawanle</author>
      <pubDate>Mon, 21 Jun 2021 16:25:09 +0000</pubDate>
      <link>https://dev.to/sanity-io/headless-cms-building-apps-with-nuxt-and-sanity-2ba1</link>
      <guid>https://dev.to/sanity-io/headless-cms-building-apps-with-nuxt-and-sanity-2ba1</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Sanity is one of the most flexible platforms for building data-driven content solutions. This article explains what Sanity is all about and how to build a simple books list app. Sanity CMS stores our content, which will be editable in &lt;a href="https://www.sanity.io/studio"&gt;Sanity Studio&lt;/a&gt;. We will make this app with Nuxt and style it using pure CSS. &lt;/p&gt;

&lt;p&gt;This three-in-one article will show you how to: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set up Sanity Studio &lt;/li&gt;
&lt;li&gt;Set up Sanity on Nuxt &lt;/li&gt;
&lt;li&gt;Deploy both Sanity Studio and the Nuxt app so the app can work online &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can see the deployed app &lt;a href="https://booksnote.netlify.app/"&gt;on Netlify&lt;/a&gt; and see the final code &lt;a href="http://on%20github/"&gt;on GitHub&lt;/a&gt;. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#requirementsprerequisites"&gt;
  &lt;/a&gt;
  Requirements/Prerequisites
&lt;/h1&gt;

&lt;p&gt;To follow this guide, you should have: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic understanding of HTML, CSS, and JavaScript &lt;/li&gt;
&lt;li&gt;At least little experience or knowledge of &lt;a href="https://vuejs.org/"&gt;Vue.js&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Node and npm or yarn installed on your computer &lt;/li&gt;
&lt;li&gt;Basic knowledge of how the terminal works &lt;/li&gt;
&lt;li&gt;A &lt;a href="https://www.sanity.io/"&gt;Sanity.io&lt;/a&gt; account 
# What is Sanity?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;According to official &lt;a href="https://www.sanity.io/docs/a-short-introduction-to-sanity-io"&gt;Sanity documentation&lt;/a&gt;, Sanity.io  structured content platform enables you to manage your text, images, and other media with APIs. Sanity Studio helps you quickly set up a customizable editing environment. Sanity also gives you access to many APIs, libraries, and tooling that help you have all your content available as a single source of truth. &lt;/p&gt;

&lt;p&gt;One significant advantage of Sanity is its flexibility. You get the full privilege of setting up your dashboard and even the ability to customize it to your taste. You can invite new or add existing user accounts to access your projects by assigning different roles and access rights. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sanity-studio"&gt;
  &lt;/a&gt;
  Sanity studio
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.sanity.io/docs/sanity-studio"&gt;Sanity Studio&lt;/a&gt; is where you can edit and manage your content when using  Sanity. You set up your schemas in plain JavaScript then Sanity Studio builds the editing environment. &lt;/p&gt;

&lt;p&gt;This open-source CMS  connects to Sanity.io's datastore and is a single-page application written in React and published on npm. It also enables users to deploy  Sanity Studio to their server. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started-with-sanitysetup"&gt;
  &lt;/a&gt;
  Getting started with Sanity/setup
&lt;/h2&gt;

&lt;p&gt;To get started, let's install the &lt;a href="https://www.npmjs.com/package/@sanity/cli"&gt;Sanity C&lt;/a&gt;LI globally. To do this, you first need to install Node and npm. &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g @sanity/cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;As soon as the CLI finishes installing, it can create a new project. Run the following command wherever you store codes on your local computer. &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sanity init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;If this is your first time, this will log you into Sanity and then you would be able to create a project, set up a dataset, and generate files which are necessary to run the editing environment locally. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;If you don't have an account, Sanity will direct you on how to get one. Or, visit Sanity's website to create an account.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;Once that is done, Sanity prompts you to create a new project. Tap &lt;strong&gt;Enter&lt;/strong&gt;. Name your project &lt;strong&gt;books-note&lt;/strong&gt; and choose the default dataset configuration by typing &lt;code&gt;Y&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oecmltdl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622112420852_cl-1.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oecmltdl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622112420852_cl-1.JPG" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, confirm the project path and choose a schema for your Studio. For this demo, you'll need to start with the "Clean project with no predefined schemas" option. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nsrYeAJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622112502384_cl-2.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nsrYeAJx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622112502384_cl-2.JPG" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Start the Studio by first moving into the folder by running the following command in the terminal: &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd studio
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;You can now start the studio with the following command:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sanity start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;After compiling, Sanity Studio will open on &lt;a href="http://localhost:3333"&gt;http://localhost:3333&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can also use commands like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;sanity docs&lt;/code&gt; : This is used to open sanity‚Äôs documentation in the browser &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sanity manage&lt;/code&gt; : This helps to open the project settings in your browser&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sanity help&lt;/code&gt; : This is used to explore the CLI manual&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This project is clean and has no predefined schemas, so we have a dashboard like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--205o2eHS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622114993479_Capture.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--205o2eHS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622114993479_Capture.JPG" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-mad-lib-schema-from-scratch"&gt;
  &lt;/a&gt;
  Creating the mad lib schema from scratch
&lt;/h2&gt;

&lt;p&gt;A schema describes the different field types in a document. You can choose from various &lt;a href="https://www.sanity.io/docs/schema-types"&gt;types of schema&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;For this guide, we'll create a schema for a books note app, which will just have five fields and one schema. This will be simple for a beginner to understand before creating many schemas, requiring organizing. &lt;/p&gt;

&lt;p&gt;For now, when you open the Sanity file you created, the directory looks like this: &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ config
‚îú‚îÄ‚îÄ node_modules
‚îú‚îÄ‚îÄ plugins
‚îú‚îÄ‚îÄ sanity-schema.txt
‚îú‚îÄ‚îÄ sanity.json
‚îú‚îÄ‚îÄ schemas // content model lives here
‚îú‚îÄ‚îÄ static
‚îú‚îÄ‚îÄ tsconfig.json
‚îî‚îÄ‚îÄ yarn.lock
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;When Sanity Studio starts, it looks for the schema in a file named &lt;code&gt;schema.js&lt;/code&gt; in your project's schemas folder. For now, since you don't have any schema, you will find something like this in your &lt;code&gt;schema.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="c1"&gt;// First, we must import the schema creator&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;createSchema&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;part:@sanity/base/schema-creator&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// Then import schema types from any plugins that might expose them&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;schemaTypes&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;all:part:@sanity/base/schema-type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// Then we give our schema to the builder and provide the result to Sanity&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;createSchema&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="c1"&gt;// We name our schema&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="c1"&gt;// Then proceed to concatenate our document type&lt;/span&gt;
      &lt;span class="c1"&gt;// to the ones provided by any plugins that are installed&lt;/span&gt;
      &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;schemaTypes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="cm"&gt;/* Your types here! */&lt;/span&gt;
      &lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All your schemas go into the types array by defining the schema's title, name, type, and others like a description. &lt;/p&gt;

&lt;p&gt;Finally, you will also define the fields. For our books schema, we will use something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Books&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;books&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;document&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Book Name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bookname&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter book name here&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Author&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;author&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter Author's name here&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter book name here&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;slug&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Slug&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;slug&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bookname&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;maxLength&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;96&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Book cover&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bookcover&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Upload appropriate book cover image here&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;hotspot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Notes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mynotes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;array&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Type notes as you learn something new about this book here&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save and check your browser, you will find something like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S-fWCsdj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622118523622_Captur1.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S-fWCsdj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622118523622_Captur1.JPG" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One last thing, lets load our studio with contents which we will be fetching into the app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j64M2Fms--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622119573319_Captur2.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j64M2Fms--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622119573319_Captur2.JPG" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-nuxtjs"&gt;
  &lt;/a&gt;
  What is Nuxt.js
&lt;/h1&gt;

&lt;p&gt;Nuxt.js is a free, open-source, modern web application framework based on Vue.js, Node.js, webpack, and Babel, enabling us to create static pages, single-page applications (SPAs), and server-side rendered (SSR) applications, depending on our build‚Äôs purpose. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-a-nuxtjs-app"&gt;
  &lt;/a&gt;
  Setting up a Nuxt.js app
&lt;/h2&gt;

&lt;p&gt;We can create our Nuxt app using the scaffolding tool  &lt;code&gt;create-nuxt-app&lt;/code&gt;  or build from scratch. For this app, we will use the &lt;a href="https://nuxtjs.org/docs/2.x/get-started/installation/#using-create-nuxt-app"&gt;CLI&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;To get started, run the following using your package manager of choice: &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-nuxt-app &amp;lt;project-name&amp;gt;
//or
yarn create nuxt-app &amp;lt;project-name&amp;gt;
//or
npm init nuxt-app &amp;lt;project-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Ensure you replace &lt;code&gt;&amp;lt;project-name&amp;gt;&lt;/code&gt; with the name of your project (app). &lt;/p&gt;

&lt;p&gt;Once installation is complete, Nuxt will present you with a series of questions to help configure your application for development, including name, Nuxt options, user interface (UI) framework, TypeScript, linter, testing framework, and the like. &lt;/p&gt;

&lt;p&gt;Pick what you love to use but ensure you select rendering mode "Universal (SSR / SSG)" and deployment target "Static (Static/JAMStack hosting)." &lt;/p&gt;

&lt;p&gt;Once you've completed your project, &lt;code&gt;cd&lt;/code&gt; into your new project and start a local development server by running &lt;code&gt;yarn dev&lt;/code&gt;. &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd blog
yarn dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#connecting-sanity-with-nuxtjs-app"&gt;
  &lt;/a&gt;
  Connecting Sanity with Nuxt.js App
&lt;/h2&gt;

&lt;p&gt;To use Sanity data in Nuxt, you need to install Sanity's @sanity/nuxt plugin to your Nuxt project, and few dependencies, by running the following command in your project's root directory: &lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add @nuxtjs/sanity @sanity/client @sanity/image-url
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;@nuxtjs/sanity&lt;/code&gt; ‚Äî &lt;a href="https://sanity.nuxtjs.org/"&gt;nuxt/sanity&lt;/a&gt; enables us to access text, images, and other media with Nuxt and the Sanity headless CMS.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;@sanity/client&lt;/code&gt; ‚Äî &lt;a href="https://www.npmjs.com/package/@sanity/client"&gt;Sanity Client&lt;/a&gt; is the official JavaScript client by Sanity. You can use it both in Node.js and modern browsers.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;@sanity/image-url&lt;/code&gt; ‚Äî This &lt;a href="https://sanity.nuxtjs.org/helpers/images#using-sanityimage-url"&gt;helper library&lt;/a&gt; generates image URLs and performs helpful image transformations through the Sanity asset pipeline. Read more in the official &lt;a href="https://www.sanity.io/docs/image-url"&gt;docs&lt;/a&gt;. There is also an easier-to-install &lt;a href="https://sanity.nuxtjs.org/helpers/images"&gt;alternative&lt;/a&gt; that works for Nuxt.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once these packages are installed, we'll have to enable the module in our Nuxt configuration (&lt;code&gt;nuxt.config.js&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;buildModules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@nuxtjs/sanity/module&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To get started, we need to add the Sanity configuration. @nuxtjs/sanity looks for a sanity.json file in your project root directory. Just copy over the sanity.json from your CMS, and you're fully configured. You can learn more about this in the official &lt;a href="https://sanity.nuxtjs.org/getting-started/quick-start"&gt;documents&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Finally, we need to update the Cross-Origin Resource Sharing (CORS) origin for our app to work. Visit &lt;a href="https://www.sanity.io/teams"&gt;Sanity Teams&lt;/a&gt; and click on your Sanity project. On your project's dashboard, click on &lt;strong&gt;Settings ‚Üí API settings,&lt;/strong&gt; then add your site address to the CORS origins field. For example, &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yaj-GSIf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622184705119_04.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yaj-GSIf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622184705119_04.JPG" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You're now good to go! &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#building-a-books-list-app"&gt;
  &lt;/a&gt;
  Building a books list app
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Es8_VRBo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622128392688_Travel%2Band%2BGuide%2BFacebook%2BCover.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Es8_VRBo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622128392688_Travel%2Band%2BGuide%2BFacebook%2BCover.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this app, we use two pages: the index page for all books and the slug page to display each book. We also added the about page, but it's not necessary for this tutorial. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#display-all-books-on-the-homepage"&gt;
  &lt;/a&gt;
  Display all books on the Homepage
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;pages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vue&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;head&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Logo&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Books&lt;/span&gt; &lt;span class="nx"&gt;Note&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/b&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/header&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;top-label&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;You&lt;/span&gt; &lt;span class="nx"&gt;currently&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;strong&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/strong&amp;gt; Books&lt;/span&gt;&lt;span class="err"&gt;!
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;books&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book in books&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book.id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NuxtLink&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;link&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book.slug.current&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;
                    &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$urlFor(book.bookcover)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                    &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book.bookname&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                    &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lazy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                    &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book-img&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
                  &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
                  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book-info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bookname&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/b&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;author&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;desc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                      &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/NuxtLink&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/section&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;footer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NuxtLink&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;abt-icon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/NuxtLink&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/footer&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;groq&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@nuxtjs/sanity&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;asyncData&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;$sanity&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;groq&lt;/span&gt;&lt;span class="s2"&gt;`*[_type == "books"]`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;$sanity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;According to official &lt;a href="https://www.sanity.io/docs/groq"&gt;Sanity documentation&lt;/a&gt;, Sanity uses Graph-Relational Object Queries (GROQ) to query data. GROQ is a declarative language designed to query collections of largely schema-less JSON documents.  &lt;/p&gt;

&lt;p&gt;In the above code, in the script section, the first thing we did was import the GROQ from &lt;code&gt;@nuxtjs/sanity&lt;/code&gt;. We then fetched all books from Sanity so we can loop the array using a &lt;code&gt;v-for directive&lt;/code&gt; (which you can find in the template section).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;asyncData&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;$sanity&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;groq&lt;/span&gt;&lt;span class="s2"&gt;`*[_type == "books"]`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;$sanity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;books&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, we have successfully  fetched all our books from Sanity and rendered them to our template section. However, if you attempt running this code, the image won't show and might even log an error in the console. &lt;/p&gt;

&lt;p&gt;Let's see how to display images in Nuxt from Sanity. You can do this using the &lt;code&gt;@sanity/image-url&lt;/code&gt;, which we installed earlier. The &lt;code&gt;@sanity/image-url&lt;/code&gt; is a plugin, and we register it globally in Nuxt since we use it in two different files. &lt;/p&gt;

&lt;p&gt;To register this plugin globally, you need to create a file in the plugins directory of your Nuxt project, then import &lt;code&gt;imageUrlBuilder&lt;/code&gt; from &lt;code&gt;@sanity/image-url&lt;/code&gt;. Finally, configure this plugin. &lt;/p&gt;

&lt;p&gt;We created a file and named it ‚Äú&lt;code&gt;sanity-image-builder.js&lt;/code&gt;‚Äù in the plugins folder. Once you have created the file &lt;code&gt;plugins/sanity-image-builder.js&lt;/code&gt;, paste the code below into the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;imageUrlBuilder&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@sanity/image-url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;$sanity&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;builder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;imageUrlBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$sanity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;urlFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;format&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;urlFor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;urlFor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this, your image will work properly, but you will bind &lt;code&gt;src&lt;/code&gt; and use of &lt;code&gt;*$urlFor*&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;
      &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$urlFor(book.bookcover)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book.bookname&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lazy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book-img&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;You can give your file any name, but so you don't get confused when you use many plugins, this convention might be the best.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;Finally, we use the slug and create a dedicated &lt;code&gt;_slug&lt;/code&gt; file in our pages folder to have dynamic routes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NuxtLink&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;link&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book.slug.current&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/NuxtLink&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should Output something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rpINkXVH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622182291313_02.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rpINkXVH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622182291313_02.JPG" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-dynamic-routes-for-books"&gt;
  &lt;/a&gt;
  Create dynamic routes for books
&lt;/h2&gt;

&lt;p&gt;On our &lt;code&gt;index&lt;/code&gt; page, we rendered a &lt;code&gt;NuxtLink&lt;/code&gt; for each book in our dataset, using the slug value to set the URL for each book. This means if we create a blog post called "heroes only" and set the slug to &lt;code&gt;heroes-only&lt;/code&gt;, our Nuxt application should handle a request to the &lt;code&gt;page/heros-only&lt;/code&gt; and retrieve the corresponding book information from Sanity. &lt;/p&gt;

&lt;p&gt;Nuxt makes this possible by building in support for these kinds of pages. You create a new file in pages in the format &lt;code&gt;_slug.vue&lt;/code&gt;. In your page's &lt;code&gt;asyncData&lt;/code&gt; function, you can then use the &lt;code&gt;params&lt;/code&gt; argument to reference the slug. Let's try this and see if it will work:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;pages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;_slug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vue&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;asyncData&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$sanity&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// { slug: "heros-only" }&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's now use the code below to query Sanity and fetch only content related to this &lt;code&gt;slug&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;pages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;_slug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;vue&lt;/span&gt;

    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;click&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$router.back()&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Back&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;head&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;
              &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$urlFor(book.bookcover)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
              &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book.bookname&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
              &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lazy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
              &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book-img&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book-info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bookname&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/b&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;author&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;desc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/header&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;top-label&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;My&lt;/span&gt; &lt;span class="nx"&gt;Notes&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book.mynotes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SanityContent&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;blocks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book.mynotes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;No&lt;/span&gt; &lt;span class="nx"&gt;notes&lt;/span&gt; &lt;span class="nx"&gt;available&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/section&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;footer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NuxtLink&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;abt-icon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/NuxtLink&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/footer&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;groq&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@nuxtjs/sanity&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SanityContent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@nuxtjs/sanity/dist/components/sanity-content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SanityContent&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;asyncData&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$sanity&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;groq&lt;/span&gt;&lt;span class="s2"&gt;`*[_type == "books" &amp;amp;&amp;amp; slug.current == "&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"][0]`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;$sanity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above, the only major difference is the query line where we check for both the &lt;code&gt;_type&lt;/code&gt; of books (meaning the book database ) and also the &lt;code&gt;slug&lt;/code&gt; which is unique to only one book.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;asyncData&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$sanity&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;groq&lt;/span&gt;&lt;span class="s2"&gt;`*[_type == "books" &amp;amp;&amp;amp; slug.current == "&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"][0]`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;$sanity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also use &lt;code&gt;block contents&lt;/code&gt;, though a simple one. You can learn more about Portable texts &lt;a href="https://www.sanity.io/guides/3-things-you-need-to-know-when-getting-started-with-portable-text"&gt;on&lt;/a&gt; Santiy's website. We imported &lt;code&gt;SanityContent&lt;/code&gt; from &lt;code&gt;@nuxtjs/sanity&lt;/code&gt;, making the process simple compared to using plugins, which also exists for images making the whole process of image rendering easier. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;The approach also exists for images, but we decided to use both. You can check out the&lt;/em&gt; &lt;code&gt;*@nuxtjs/sanity*&lt;/code&gt; &lt;em&gt;image formatting docs&lt;/em&gt; &lt;a href="https://sanity.nuxtjs.org/helpers/images"&gt;&lt;em&gt;on&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Sanity's website.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;After you  import &lt;code&gt;SanityContent&lt;/code&gt; from &lt;code&gt;@nuxtjs/sanity&lt;/code&gt;, you can now use it in that page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book.mynotes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SanityContent&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;blocks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;book.mynotes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;No&lt;/span&gt; &lt;span class="nx"&gt;notes&lt;/span&gt; &lt;span class="nx"&gt;available&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We only used &lt;code&gt;SanityContent&lt;/code&gt; on line two. We used an &lt;code&gt;if-else&lt;/code&gt; statement to make the app more friendly. &lt;/p&gt;

&lt;p&gt;This should output something like this when you click on any book: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zoqkemPr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622182369876_03.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zoqkemPr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622182369876_03.JPG" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#styling-our-app"&gt;
  &lt;/a&gt;
  Styling our app
&lt;/h2&gt;

&lt;p&gt;We have explained how to do this without styling the app, so your results may not match what you see in the images above. To style this app, you can check out &lt;a href="https://github.com/olawanlejoel/books-note"&gt;this repository&lt;/a&gt; to get the styling we used for each page, component, and even the images. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#deploy-nuxt-app-to-netlify"&gt;
  &lt;/a&gt;
  Deploy Nuxt App To Netlify
&lt;/h1&gt;

&lt;p&gt;Finally, to round up this guide, let's deploy both Sanity Studio and our Nuxt.js app, so this is available online for everybody to access. &lt;/p&gt;

&lt;p&gt;Netlify is a Git-based workflow and serverless platform to build, deploy, and collaborate on web apps. This all-in-one platform automates modern web projects. You can use many other platforms instead, for example, Vercel, Cloudflare Pages, and more. &lt;/p&gt;

&lt;p&gt;To deploy to Netlify, we must first push our codes to GitHub. For this, we will use our terminal and some Git commands. In case you are not familiar with Git, you can check out this &lt;a href="https://dev.to/olawanle_joel/git-github-explained-like-i-m-five-58f2"&gt;series on DEV Community&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;First, let's create a repository on GitHub by clicking the New button or the plus on the top right corner. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qiSaZw_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622183437814_04.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qiSaZw_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622183437814_04.JPG" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, fill in the necessary information and click "create repository." &lt;/p&gt;

&lt;p&gt;Next, open your terminal. Let's start by creating a new branch, then stage all our files so we can commit our changes using the following commands: &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git init #initialize repository
git checkout -b main # create a main branch 
git add . # stage all files for this commit 
git commit -m "first commit" # commit the changes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Once this completes, we can now push to the created remote repository using the following commands: &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git branch -M main
git remote add origin https://github.com/olawanlejoel/books-note.git #this would be differnt based on your created repository
git push -u origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;When you refresh your repository, your code should show up!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4sDr0Rvo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622183949626_04.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4sDr0Rvo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622183949626_04.JPG" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's deploy to Netlify. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://netlify.com/"&gt;Log in to Netlify or sign up&lt;/a&gt; if it's your first time with your GitHub account. Once that is successful, Netlify will redirect you to your team page, where you can get a repo from GitHub and deploy. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O3UIh4pW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_6C91798C13448244909037C6046123F9B02B69694614F12E40B9600F204F1C81_1620370035403_5.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O3UIh4pW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_6C91798C13448244909037C6046123F9B02B69694614F12E40B9600F204F1C81_1620370035403_5.JPG" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on "New site from Git." A new page will appear to choose the Git provider where your site's source code is hosted. In our case, we choose GitHub. Once it's authorized, you can now search for the GitHub repository. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5hYl32k8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622184178603_04.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5hYl32k8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622184178603_04.JPG" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you click on the repository, it brings you to a page where you set your site settings, change the build command to Nuxt generate, and click the "Deploy Site" button. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P_yFCmC8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622187469245_04.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P_yFCmC8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622187469245_04.JPG" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When your deployment is successful, you should get a URL for anyone to access your app. You can now deploy your Sanity Studio. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploy-sanity-studio-and-update-the-cors-origin"&gt;
  &lt;/a&gt;
  Deploy sanity studio and update the CORS origin
&lt;/h2&gt;

&lt;p&gt;Sanity enables you to host your Studio, giving you a nice my-company.Sanity.studio URL. Since the Studio runs in a browser and communicates with the Sanity API, you can also host it yourself or on your favorite hosting service. &lt;/p&gt;

&lt;p&gt;To host with Sanity, run the following command in your studio folder. &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sanity deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Once you run this command, Sanity asks you to choose a unique hostname for your Studio. &lt;/p&gt;

&lt;p&gt;Finally, we need to update the CORS origin for our app to work.  &lt;/p&gt;

&lt;p&gt;Visit &lt;a href="https://www.sanity.io/teams"&gt;https://www.sanity.io/teams&lt;/a&gt; and click on your Sanity project. On your project's dashboard, click on &lt;strong&gt;Settings ‚Üí API settings,&lt;/strong&gt; then add your site address to the CORS origins field. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JCRmqQ4B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622187774270_04.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JCRmqQ4B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_F7CFB39699BD1AAA7EC1C60D617ED97343D10788FF04D44E5E03B84C1B6A75F8_1622187774270_04.JPG" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Sometimes, this happens automatically. You can confirm using&lt;/em&gt; &lt;a href="https://www.sanity.io/teams"&gt;&lt;em&gt;https://www.sanity.io/teams&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! Our application is now running smoothly online. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In this guide, we built a book note application using Nuxt.js and Sanity. We used  Sanity Studio to edit our data. &lt;/p&gt;

&lt;p&gt;This guide will help you set up your own version of this project to improve and add more features and functions. &lt;/p&gt;

&lt;p&gt;Here are a few ideas to get you started: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a category schema and link to the books &lt;/li&gt;
&lt;li&gt;Add filter, sort, and search functionality, making use of categories &lt;/li&gt;
&lt;li&gt;Style the app using UI libraries like &lt;a href="https://vuetifyjs.com/en/"&gt;Vuetify&lt;/a&gt;, &lt;a href="https://bootstrap-vue.org/"&gt;BootstrapVue&lt;/a&gt;, or Tailwind &lt;/li&gt;
&lt;li&gt;Make specific schema fields required &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get started making this or another Nuxt.js Sanity project, explore the resources below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useful-resources"&gt;
  &lt;/a&gt;
  Useful resources:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/vue-sanity"&gt;vue-sanity - Composition API methods to incorporate Sanity into a Vue project.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sanity.io/blog/headless-cms-explained"&gt;Headless CMS explained in 2 minutes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sanity.io/guides/the-event-template"&gt;Get started with the Nuxt.js event website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sanity.nuxtjs.org/"&gt;Nuxt Sanity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>nuxt</category>
      <category>javascript</category>
      <category>sanity</category>
      <category>headlesscms</category>
    </item>
    <item>
      <title>10 npm Commands that every developer must know</title>
      <author>Gurshehzad Singh</author>
      <pubDate>Mon, 21 Jun 2021 16:22:00 +0000</pubDate>
      <link>https://dev.to/gurshehzadsingh/10-npm-commands-that-every-developer-must-know-4gmn</link>
      <guid>https://dev.to/gurshehzadsingh/10-npm-commands-that-every-developer-must-know-4gmn</guid>
      <description>&lt;p&gt;&lt;strong&gt;NPM&lt;/strong&gt; stands for &lt;strong&gt;Node Package Manager&lt;/strong&gt; and it is the package manager for the Node JavaScript platform. It put modules in place so that node can find them, and manages dependency conflicts intelligently. Most commonly, it is used to publish, discover, install, and develop node programs.&lt;/p&gt;

&lt;p&gt;Some Important npm commands every developer should know are:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) npm i&lt;/strong&gt;&lt;br&gt;
 Here i stands for &lt;em&gt;install&lt;/em&gt;. It installs all the packages &lt;br&gt;
 mentioned in package.json.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) npm install -production&lt;/strong&gt;&lt;br&gt;
 It installs all the packages mentioned in package.json, except &lt;br&gt;
 the dev dependencies.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) npm i lodash&lt;/strong&gt;&lt;br&gt;
 It installs a package with name of &lt;em&gt;"lodash"&lt;/em&gt;, you can use your &lt;br&gt;
 favorite package name.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4) npm install --save-dev lodash&lt;/strong&gt;&lt;br&gt;
 It installs the specific package as a dev dependency, in my case &lt;br&gt;
 the name is &lt;em&gt;"lodash"&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5) npm list&lt;/strong&gt;&lt;br&gt;
 It lists the versions and name of all dependencies in the current &lt;br&gt;
 directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6) npm update&lt;/strong&gt;&lt;br&gt;
 It updates all the production packages in the current directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7) npm install -g nodemon&lt;/strong&gt;&lt;br&gt;
 It installs a package globally on your machine, with -g flag. In &lt;br&gt;
 my case, nodemon will be installed globally.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8) npm remove lodash&lt;/strong&gt;&lt;br&gt;
 It uninstalls / removes a previously installed node module in the &lt;br&gt;
 current directory.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9) npm -v&lt;/strong&gt;&lt;br&gt;
 It displays the npm version installed on your system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10) npm doctor&lt;/strong&gt;&lt;br&gt;
 It checks our environment so that our npm installation has what &lt;br&gt;
 it needs to manage our JavaScript packages.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>npm</category>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Building a Reading List web app with Node, Preact, and Tailwind CSS</title>
      <author>Ingo Steinke</author>
      <pubDate>Mon, 21 Jun 2021 16:18:33 +0000</pubDate>
      <link>https://dev.to/ingosteinke/building-a-reading-list-web-app-with-node-preact-and-tailwind-css-44pa</link>
      <guid>https://dev.to/ingosteinke/building-a-reading-list-web-app-with-node-preact-and-tailwind-css-44pa</guid>
      <description>&lt;p&gt;&lt;strong&gt;This is a work in progress&lt;/strong&gt;, last updated on 21 June 2021. I will only highlight a few code examples and helpful links in this article. You can see the full code and commit messages &lt;a href="https://github.com/openmindculture/bookstack-reading-list-app"&gt;on GitHub&lt;/a&gt;. I will add a link to a live demo once (if ever) I have published a working draft.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;I finally wanted to take some time for proper research (and some lazy trial and error based on tutorials and example code) to set up a proper full-stack application.&lt;/p&gt;

&lt;p&gt;Beginning with a &lt;a href="https://github.com/openmindculture/tailwind-jit-mern"&gt;general example / starter setup&lt;/a&gt; useful for several projects, forking the actual side project (&lt;strong&gt;bookstack-reading-list-app&lt;/strong&gt;) once things get more specific.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-bother"&gt;
  &lt;/a&gt;
  Why bother?
&lt;/h2&gt;

&lt;p&gt;In the past, I had worked with legacy code or did not take the time for proper research, which even made me suspect I did not like React or even JavaScript single page applications at all. But as many other developers pointed out, there is more than one way to do things, especially when it comes to React.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finding-out"&gt;
  &lt;/a&gt;
  Finding out
&lt;/h2&gt;

&lt;p&gt;When I am free to decide everything on my own (thus having to do so) I swing back and forth between joy of discovery and getting stressed out. So many technologies and buzzwords, so much apparent over-complexity.&lt;/p&gt;

&lt;p&gt;Fueled by my stress, I find the energy not to simply reproduce some outdated tutorials from 2018, but to try and build only what is actually reasonable now.&lt;/p&gt;

&lt;p&gt;Besides learning, experience, and hopefully some fun, the result should be an actual project to show, plus a scaffold that might save me some time in future projects. Time that I already invested when researching and building my side project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-build-an-spa-that-does-not-suck"&gt;
  &lt;/a&gt;
  How to Build an SPA that does not suck
&lt;/h2&gt;

&lt;p&gt;Trying to use &lt;a href="https://tailwindcss.com"&gt;Tailwind&lt;/a&gt;, &lt;a href="https://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt;, and &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt; in a proper way, or at least in a way that fits my experience and requirements seems a good way to make up my own mind about technology that seems to elicit a lot of controversy in the web developer community.&lt;/p&gt;

&lt;p&gt;Thanks to my friend &lt;a href="https://github.com/retinafunk"&gt;Andy Weisner (Retinafunk)&lt;/a&gt; for convincing me that Utility CSS can be nice and useful even (or especially) for experienced web developers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#slow-pace-applications"&gt;
  &lt;/a&gt;
  Slow Pace Applications
&lt;/h3&gt;

&lt;p&gt;Many single page applications turn out to be "slow pace applications" built with a back-end development mindset that fails to care about usability, accessibility, and page speed / web performance. Add arbitrary syntax rules like AirBnB's version of ES6, bloated syntax horror like ReactPropTypes or styled components, and try to "fix" the mess by adding pre-rendering which optimizes for largest content paint on the cost of first input delay and making built time so slow that it feels like developing a monolithic Java application.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href="https://twitter.com/merelyanna"&gt;Anna Backs&lt;/a&gt; and &lt;a href="https://twitter.com/merelyChristina"&gt;Christina Zenzes&lt;/a&gt; for the term "slow pace application" and for giving me back some hope that it's possible to write an SPA that does not suck!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-dont-create-react-app"&gt;
  &lt;/a&gt;
  I don't "Create React App"
&lt;/h2&gt;

&lt;p&gt;Originally intended to use tailwind with create-react-app,&lt;br&gt;
after trying to solve conflicts and incompatibilities,&lt;br&gt;
I rebased the starter on &lt;a href="https://github.com/retinafunk/tailwind-jit"&gt;retinafunk's tailwind-jit-starter&lt;/a&gt; and decided to drop old technology like webpack in favour of smaller, more elegant solutions, which in consequence lead to the decision to drop React in favour of &lt;a href="https://preactjs.com"&gt;preact&lt;/a&gt;, &lt;a href="https://dev.to/aalises/preact--typescript--parcel--redux-zero-rebuilding-the-qmenta-front-end-focusing-on-performance-and-minimalism-1lnp"&gt;focussing on performance and minimalism&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#zero-configuration-unless-"&gt;
  &lt;/a&gt;
  "Zero Configuration" unless ...
&lt;/h2&gt;

&lt;p&gt;After trying parcel, which claims to be a "zero configuration" bundler, we ended up using snowpack. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#parcel"&gt;
  &lt;/a&gt;
  Parcel üì¶
&lt;/h3&gt;

&lt;p&gt;I started with parcel 1, after too many deprecation warnings of required node dependencies, tried parcel 2 although it is still labelled beta (but then again, open vpn used to be "beta" for ages, while working fine in production).&lt;/p&gt;

&lt;p&gt;At that step, my starter project had become a combination of at least three different projects, so copying and pasting from one tutorial is not guaranteed to work in another setup. I got a lot of warnings about missing types and missing support for the "experimental syntax 'jsx'".&lt;/p&gt;

&lt;p&gt;"Support for the experimental syntax 'jsx' isn't currently enabled"&lt;/p&gt;

&lt;p&gt;The suggestions how to fix were misleading in my case, as the crucial part was using .jsx or .tsx file extensions for every file that contains JSX. As I never actually used preact before, it was also unclear to that the seemingly unused import { h } from 'preact' actually makes sense once JSX is internally transpiled to an h() function.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#snowpack"&gt;
  &lt;/a&gt;
  Snowpack ‚ùÑÔ∏è
&lt;/h3&gt;

&lt;p&gt;Switching from parcel to snowpack, we were able to simplify the setup according the snowpack's preact typescript template.&lt;/p&gt;

&lt;p&gt;Now the preact typescript server was running, we had to bring back our tailwind configuration from the original template&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;remove non-tailwind css&lt;/li&gt;
&lt;li&gt;configure postcss to use tailwind&lt;/li&gt;
&lt;li&gt;adapt build and include paths&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#frontend-app-based-on-3-templates"&gt;
  &lt;/a&gt;
  Frontend App based on 3 templates
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Preact Default using preact router created by&lt;br&gt;
&lt;code&gt;preact cli default&lt;/code&gt; ?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;snowpack preact type script starter&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tailwind jit starter by retinafunk&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#next"&gt;
  &lt;/a&gt;
  next
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#finish-frontend-app"&gt;
  &lt;/a&gt;
  finish front-end app
&lt;/h3&gt;

&lt;p&gt;Cleanup, fix typescript warnings (missing types for components), configure production build, add tests and ensure accessibility and performance.&lt;/p&gt;

&lt;p&gt;"Could not find a declaration file for module" is another misleading error message, as we don't need to provide &lt;code&gt;.d.ts&lt;/code&gt; files when we can provide type information directly in our code.&lt;/p&gt;

&lt;p&gt;Converting preact default example code to typescript was easy. Functional components without any properties only need a definition as a function component. Once provided, our editors already tells us to rename the file to .tsx which does not break any import statement, as file extensions have to be left out anyway (so everything still works after implicit transpiling from tsx back to jsx internally).&lt;/p&gt;

&lt;p&gt;Simple property type definitions can be provided inline, without creating interfaces. Our TypeScript code is much more compact than the same definition written using React.PropTypes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FunctionComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FunctionComponent&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also make sure the application will work in a sub folder as part of a monorepo, as some configurations were said to work "only in the root directory" of a project (which does not make sense, as I never save anything to "/", and any application should not care where its root folder is mounted).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-our-app-more-accessible-performing-and-search-engine-friendly-by-design"&gt;
  &lt;/a&gt;
  Making our app more accessible, performing, and search engine friendly by design:
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#purge-tailwind-css"&gt;
  &lt;/a&gt;
  purge tailwind css
&lt;/h2&gt;

&lt;p&gt;so that only styles are exported which are actually used,&lt;br&gt;
make sure purge finds all file,&lt;br&gt;
make sure not to write dynamic styles in an undectable way (add example),&lt;br&gt;
load css in html head, not in javascript, this might unblock load speed by allowing parallel download of css and javascript, and it also allows us to define styled static page elements outside of our (p)react app, like a footer with links to external or static resources. This also allows search engines which do not run javascript, to find some content apart from the noscript text, which we also want to change into something that our customers might find helpful on search engine result page.&lt;/p&gt;

&lt;p&gt;We can define "critical" ("above the fold") CSS (todo link) and load web fonts in the head as well. Our HTML markup now looks like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;src/index.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Tailwind JIT MERN App Starter&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;style &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;/* critical "above the fold" styles to prevent layout shift */&lt;/span&gt;
    &lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Alegreya'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#7fb71e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"preconnect"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.gstatic.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.googleapis.com/css2?family=Alegreya:wght@400;700&amp;amp;display=swap"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"index.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"index.js"&lt;/span&gt; &lt;span class="na"&gt;defer&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- add meta information like favicon, twitter cards etc. here --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"root"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;footer&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bg-black text-white"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      Static footer content
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://example.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;example.com&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;aside&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;noscript&amp;gt;&lt;/span&gt;You need to enable JavaScript to run this app.&lt;span class="nt"&gt;&amp;lt;/noscript&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#you-need-to-enable-javascript-to-run-this-app"&gt;
  &lt;/a&gt;
  You need to enable JavaScript to run this app?
&lt;/h3&gt;

&lt;p&gt;This is technically true, but probably not helpful to anyone. There should at least be any information about the app, maybe even a statically rendered snapshot of some highlighted content, which will help real people and could benefit search engine optimization as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#looking-up-class-names"&gt;
  &lt;/a&gt;
  Looking up class names
&lt;/h3&gt;

&lt;p&gt;Styling my app, I had to look up Tailwind's class names instead of writing CSS directly, which I mostly know without looking up, but not all of the time.&lt;/p&gt;

&lt;p&gt;Do I still think it was a good idea to choose Tailwind? Yes, because the resulting code ist easieer to maintain, while hand-coded CSS can turn into a mess quite easily, even in a very small project.&lt;/p&gt;

&lt;p&gt;Es gibt so ein paar Dinge, die an Frontend Apps nerven. Frontend Routing = reload einer URL funktioniert nicht im Preview Server (und muss vermutlich auch an nginx / Apache / AWS irgendwie exportiert oder aber prerendered werden), und durch JSX oder falsches Minification funktioniert line break nicht mehr als whitespace character, so dass einige Elemente ungewollte aneinanderkleben. Aber das sind halt auch nur Details...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-and-story-driven-design"&gt;
  &lt;/a&gt;
  Test and Story Driven Design üå≤üå∏
&lt;/h3&gt;

&lt;p&gt;Storybook: &lt;a href="https://storybook.js.org/docs/preact/get-started/install"&gt;https://storybook.js.org/docs/preact/get-started/install&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Test setup: todo&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;unit tests&lt;/li&gt;
&lt;li&gt;integration tests&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#web-components"&gt;
  &lt;/a&gt;
  Web Components
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://preactjs.com/guide/v10/web-components/"&gt;Preact's tiny size and standards-first approach make it a great choice for building web components.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#go-fullstack"&gt;
  &lt;/a&gt;
  go full-stack
&lt;/h3&gt;

&lt;p&gt;Then add the back-end application. After moving our front-end code in a folder of its own, I learned that you can't simple make a script defined in a top-level package.json execute another script defined in another package.json which is inside a sub folder (is it not called directory anymore?)&lt;/p&gt;

&lt;p&gt;We will solve this using workspaces to create a so-called monorepo later. Once we are inside our sub folder, the front-end app still works as it used to, like when called by&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd client &amp;amp;&amp;amp; yarn start&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#express-server"&gt;
  &lt;/a&gt;
  Express Server
&lt;/h2&gt;

&lt;p&gt;Jatin's tutorial suggests to set up Babel to use ES6 syntax in node, which I could not believe is still true in 2021, and luckily it isn't! But what about TypeScript, or do node (or deno) offer native typing without any extensions?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#es6-and-typescript-in-nodejs-without-babel"&gt;
  &lt;/a&gt;
  ES6 and TypeScript in NodeJS without Babel
&lt;/h2&gt;

&lt;p&gt;While deno supports TypeScript "out of the box", I was still curious how to use modern syntax in node. While the web is full of answers stating to "simply" start node with the &lt;code&gt;--harmony&lt;/code&gt;&lt;code&gt;flag, little was written about how to achieve this descriptively inside our&lt;/code&gt;package.json`.&lt;/p&gt;

&lt;p&gt;But no surprise, this is all just oudated code? Node already supports ES6 by default, and modern modules once we specify &lt;code&gt;"type": "module"&lt;/code&gt; in our &lt;code&gt;package.json&lt;/code&gt;? So what about types(cript) then?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#builtin-middleware"&gt;
  &lt;/a&gt;
  builtin middleware
&lt;/h3&gt;

&lt;p&gt;Any common use case is probably built into latest express core. Apart from &lt;code&gt;CORS&lt;/code&gt; (see below), a classic tutorial boilerplate code to install &lt;code&gt;bodyParser&lt;/code&gt; as an extra module is also obsolete for common cases. Thanks to &lt;a href="https://dev.to/taylorbeeston/you-probably-don-t-need-body-parser-in-your-express-apps-3nio"&gt;Taylor Beeston for pointing it out&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connecting-both-apps-locally"&gt;
  &lt;/a&gt;
  Connecting both apps locally
&lt;/h2&gt;

&lt;p&gt;For al local development dsetup&lt;/p&gt;

&lt;p&gt;adding a fetch() method to the frontend. Copy and paste boilerplate code &lt;code&gt;const asJson = r =&amp;gt; r.json();&lt;/code&gt;. Reading the warning that &lt;code&gt;r&lt;/code&gt; implicitly "has the 'any' type" makes me wonder, what type to expect anyway. First google result:&lt;/p&gt;

&lt;p&gt;"The response of a fetch() request is a Stream object, which means that when we call the json() method, a Promise is returned since the reading of the stream will happen asynchronously."&lt;/p&gt;

&lt;p&gt;Still wondering, without any real TS experience, how to specify it? Simply write new Stream, or more simply, &lt;code&gt;asJson&amp;lt; r: stream&amp;gt;&lt;/code&gt; or rather &lt;code&gt;r: Stream&lt;/code&gt; as this is surely no simple type? But, not so quickly: "Cannot find name 'Stream'. Did you mean 'MSStream'"?&lt;/p&gt;

&lt;p&gt;Anscheinend ist es aber auch gar nicht √ºblich, jede Variable zu typen, wenn ich mir mal Code Examples mit TypeScript anschaue. Das implicit any scheint doch toleriert zu werden. &lt;/p&gt;

&lt;p&gt;Also don't forget CORS&lt;br&gt;
&lt;code&gt;res.header("Access-Control-Allow-Origin", "*");&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and do we really need to restart the server after each change? Sure there is some sort of preview watcher available? Das war eine der beiden Aufgaben von nodemon, aber hier k√∂nnte man auch rollup einsetzen vgl. &lt;a href="https://hoangvvo.com/blog/node-es6-rollup"&gt;https://hoangvvo.com/blog/node-es6-rollup&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#production-grade"&gt;
  &lt;/a&gt;
  Production grade?
&lt;/h2&gt;

&lt;p&gt;A first glance at our simple server looks too naive in any possible way. While in a classic LAMPP stack we would probably use Apache or NGINX as a server and provide nothing but configuration to control some headers and rewrites and use a back-end language for the logic, it seems as if we wanted to reinvent the wheel when using node.&lt;/p&gt;

&lt;p&gt;Currently we only need to call one undefined or invalid route to make the server crash completely after putting out a detailled error message to a potential attacker.&lt;/p&gt;

&lt;p&gt;For a production setup we could use NGINX to serve both client and server app on the same domain, same (default public) port, routing all &lt;code&gt;/api&lt;/code&gt; requests to the backend, like &lt;a href="https://dev.to/asim_ansari7/deploy-a-react-node-app-to-production-on-aws-2gdf"&gt;Asim describes in the article on how to deploy a React + Node app to production on AWS&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#universal-shared-code"&gt;
  &lt;/a&gt;
  Universal / shared Code
&lt;/h2&gt;

&lt;p&gt;Why use back-end JavaScript at all? PHP has improved a lot in the past 10 years, and there are other popular languages like Go and Python, so why bother? We can avoid redundant code and share common business logic between front-end and back-end by using the same programming language inside the same repository (monorepo).&lt;/p&gt;

&lt;p&gt;What struck me was that I was not able to find much about how to avoid redundancy by providing a common data model instead of writing at least 2x, mongoose in the back-end and javascript in the front-end spa. Either nobody cares, or there is a good reason not to do it. I can imagine that this would introduce technical debt, coupling or even unintended downsides concerning front-end business logic. But why do I have to find out by trial and error?&lt;/p&gt;

&lt;p&gt;Hope to provide an answer and share my results of research and experiment after doing so, but maybe I will be just too lazy and give up. In a real-life customer project, I would not dare to try and rather stick to the proven ways for the sake of stability, but hey, this is one thing that side projects are for.&lt;/p&gt;

&lt;p&gt;It's probably not &lt;a href="https://stackoverflow.com/questions/36642065/data-models-and-business-logic-in-isomorphic-react-redux-express-mongo-app"&gt;"isomorphic" but "universal"&lt;/a&gt; btw.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#database"&gt;
  &lt;/a&gt;
  Database
&lt;/h2&gt;

&lt;p&gt;In Jatin's tutorial, shortly after stating that one reason for using MongoDB is to go full stack using only JavaScript, he suggests installing mongodb using homebrew on a mac.  While I understand that he was just talking about languages used (thus no SQL) I would not install anything natively at that point. So when npm does not offer mongo, why not try docker - that might even already be the solution how to manage that both locally for development now, and on aws in production later...&lt;/p&gt;

&lt;p&gt;Why do we even need a node server? We need a layer to ensure authentication and authorization, and probably simplify query syntax to provide either a REST API or a GraphQL middleware.&lt;/p&gt;

&lt;p&gt;We could also insert a proxy layer with haproxy, nginx, and ...cache (with the dotted logo) for load balancing and caching, but then again our backend should only provide light-weight JSON. Page rendering will be handled in the client. Assets should be hosted on a content delivery network.&lt;/p&gt;

&lt;p&gt;Also, if we use an existing cloud infrastructure like AWS, they will probably handle load balancing and caching in a better way than any hand-coded setup could do.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#architecture"&gt;
  &lt;/a&gt;
  Architecture
&lt;/h2&gt;

&lt;p&gt;So, after having started a proof of concept, we are ready to define our requirements. We want to build a partially isomorphic app without redundancy in data models, validation, formatting, and basic business logic.&lt;/p&gt;

&lt;p&gt;We want to adhere to standards and proven / best practices to prevent reinventing the wheel, using configuration and description over coding. Server security and stability, routing, RESTful communication should probably be available as standard solutions by now.&lt;/p&gt;

&lt;p&gt;Our app should be deployed in a distributed, scalable way to the "cloud", for example on Amazon Web Services.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#integrating-backend-stack"&gt;
  &lt;/a&gt;
  Integrating back-end stack
&lt;/h2&gt;

&lt;p&gt;After trying for several days (!) to use mongoose schemata, express and node together with TypeScript, I gave up for the moment, as literally no backend tutorial seems to use TS and it confused me a lot to get the types and interfaces right.&lt;/p&gt;

&lt;p&gt;As I want to concentrate on the front-end anyway, I will use TypeScript in the frontend only in the first version.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installing-typescript"&gt;
  &lt;/a&gt;
  Installing typescript
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
yarn add -D typescript&lt;br&gt;
yarn add -D ts-node \@types/node \@types/express \@types/cors \@types/mongoose&lt;br&gt;
yarn tsc --init --target esnext --rootDir src --outDir build&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/57998762/run-nodemon-with-typescript-compiling"&gt;"Nodemon will detect and run .ts files with ts-node automatically now"&lt;/a&gt; triggered by the file extension, so we have to rename &lt;code&gt;server.js&lt;/code&gt; to &lt;code&gt;server.ts&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#react-annoyances"&gt;
  &lt;/a&gt;
  React Annoyances
&lt;/h2&gt;

&lt;p&gt;One of the most annoying misfeatures of typical react apps, in my personal view as an old-school web developer, is the concept of "Controlled Input".&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#controlled-input-wtf"&gt;
  &lt;/a&gt;
  Controlled Input WTF?!
&lt;/h3&gt;

&lt;p&gt;There are plenty of posts explaining what Controlled Input is and how to use it, but all of them fail to give me a valid reason WHY (actually they do, they want the SPA to be the "single source of truth" while in my view, the DOM should be the single source of truth at least for any user input.&lt;/p&gt;

&lt;p&gt;Controlled Components in my experience add a minimal delay i.e. sluggishness to the front-end and make working with form elements less straightforward and less accessible, as they basically throw away what the browser already has to offer only to rebuild it in an often worse way.&lt;/p&gt;

&lt;p&gt;Appealing about Preact, there is no virtual DOM, .... TODO eleborate and prove my point why we should not use Controlled Components, but in another article of its own ....&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#acknowledgements"&gt;
  &lt;/a&gt;
  Acknowledgements
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/retinafunk/tailwind-jit"&gt;Retinafunk's tailwind-jit-starter&lt;/a&gt; as well as Andy's support and suggestions saved me from abandoning tailwind before I even made it work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Anna and Christina's talk "Slow Pace Application" (a follow-up to &lt;a href="https://www.youtube.com/watch?v=JdEFlBtdK9s"&gt;"Anleitung zum Ungl√ºcklichsein: How not to JavaScript"&lt;/a&gt; ("The Pursuit of Unhappiness: How not to JavaScript", one of the best talks about JavaScript performance optimization ever! Why does everybody else have to be so serious?)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/JdEFlBtdK9s"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;StackOverflow: while I'm still not happy about the smart Alecs that keep closing and downvoting my questions instead of deleting outdated "works for me" answers, I can't help to say that StackOverflow does hold some valuable answers to every day problems. Hopefully that will not change after the acquisition by Prosus, but if it does, we will get over it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;dev.to: without abitrary gatekeeping (like StackOverflow) nor pay-for-free-content (like medium.com), there is finally a community for in-depth coding discussion and exchange of ideas. Thanks for everyone who take their time to write and edit articles. Hope that I can add something, too.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;(as to the cover image) also a big shout out to all the friendly and open-minded people I met while travelling in the UK in 2018 and 2019, very lucky to have done this before Brexit and Covid, so I have some nice memories to remember while sitting at my home office desk. This article's cover image was taken in the little town of Settle in Yorkshire, UK and you can see it here in my &lt;a href="https://www.flickr.com/photos/fraktalisman/48553616282/in/album-72157710307925122/"&gt;flickr photostream&lt;/a&gt;  and &lt;a href="https://www.open-mind-culture.org/en/1500/travelling-by-train-by-bus-by-foot-to-experience-scotland-without-plane-nor-car/"&gt;read more about the trip in my blog&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;About me: I am Ingo Steinke, a creative web developer, creating sustainable software and websites. If you like my &lt;a href="https://www.ingo-steinke.com/#talks-events"&gt;talks&lt;/a&gt; and articles, feel free to &lt;a href="https://www.patreon.com/ingosteinke"&gt;support me on patreon&lt;/a&gt;, &lt;a href="https://www.buymeacoffee.com/ingosteinke"&gt;buy me a coffee&lt;/a&gt; or &lt;a href="https://www.ingo-steinke.com/#contact"&gt;hire me as a freelancer&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>showdev</category>
      <category>tailwindcss</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Provisioning an EC2 Instance with CloudFormation (part 1)</title>
      <author>Jenna Pederson</author>
      <pubDate>Mon, 21 Jun 2021 16:12:04 +0000</pubDate>
      <link>https://dev.to/aws/provisioning-an-ec2-instance-with-cloudformation-part-1-443f</link>
      <guid>https://dev.to/aws/provisioning-an-ec2-instance-with-cloudformation-part-1-443f</guid>
      <description>&lt;p&gt;As a full-stack developer, you don‚Äôt have time to deal with infrastructure, environment inconsistencies, manual testing, and manual deployment of your team‚Äôs web app. It‚Äôs time-consuming, frustrating, and requires yet another skill-set, especially since you‚Äôre part of a small development team at a budding startup.&lt;/p&gt;

&lt;p&gt;You know that as your app takes off, your infrastructure and processes need to scale with it. Inconsistencies between environments are creating problems down the pipeline, costing your small team time and money. Today, your build and deploy process is manual and done infrequently. Mistakes are made, bugs are introduced to production code when they are more difficult and expensive to fix and your customers ultimately suffer.&lt;/p&gt;

&lt;p&gt;It‚Äôs time to fix some of these gaps so you can deliver smaller changes more quickly, offer your customers a higher level of quality, and scale when you need to. You‚Äôve decided to use infrastructure as code (IaC) to automate your infrastructure.&lt;/p&gt;

&lt;p&gt;Today, you have an Amazon EC2 instance hosting your web app and a Postgresql database running on the same instance. Sometimes the web app traffic impacts the database and vice versa. You want to manage the EC2 instance with IaC and start using a managed database instead of running it on the same instance. Since you‚Äôre already using AWS, you‚Äôve decided on Amazon RDS for a managed Postgresql database. Because RDS is a managed service, you won‚Äôt have to do operating system patches or database patches ‚Äî it‚Äôs all managed for you. And finally, you want to introduce a continuous integration/continuous deployment (CI/CD) pipeline to automate the build, test, and deploy phases of your release process.&lt;/p&gt;

&lt;p&gt;In the next three posts, you‚Äôll learn how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;automate the provisioning of your Amazon EC2 instance using AWS CloudFormation (this post, part 1),&lt;/li&gt;
&lt;li&gt;add an Amazon RDS Postgresql database to your stack with CloudFormation (part 2), and&lt;/li&gt;
&lt;li&gt;create an AWS CodePipeline with CloudFormation (part 3).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;To work through the examples in this post, you‚Äôll need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;an AWS account (you can create your account &lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/"&gt;here&lt;/a&gt; if you don‚Äôt already have one),&lt;/li&gt;
&lt;li&gt;the AWS CLI installed (you can find instructions for installing the AWS CLI &lt;a href="https://aws.amazon.com/cli/"&gt;here&lt;/a&gt;), and&lt;/li&gt;
&lt;li&gt;a key-pair to use for SSH (you can create a key-pair following &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#having-ec2-create-your-key-pair"&gt;these instructions&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unfamiliar with CloudFormation or feeling a little rusty? Check out my &lt;a href="https://jennapederson.com/blog/2021/5/10/introduction-to-aws-cloudformation/"&gt;Intro to CloudFormation post&lt;/a&gt; before getting started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-cloudformation-template"&gt;
  &lt;/a&gt;
  Creating the CloudFormation Template
&lt;/h2&gt;

&lt;p&gt;I‚Äôm of the mindset of ‚ÄúMake it work. Make it right. Make it fast.‚Äù so we‚Äôll iterate to get to our final template and and make it better at the end. At the end of this post, we‚Äôll delete the stack we‚Äôve created so that you don‚Äôt incur any charges and then you can (quickly) recreate the stack when we move on to the next post.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Make it work. Make it right. Make it fast. ‚Äî Kent Beck&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Just want the code? Grab it &lt;a href="https://github.com/jennapederson/cloudformation-examples"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let‚Äôs get started!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-create-basic-amazon-ec2-instance"&gt;
  &lt;/a&gt;
  1. Create Basic Amazon EC2 Instance
&lt;/h3&gt;

&lt;p&gt;First, we‚Äôll create a basic EC2 instance with CloudFormation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# 01_ec2.yaml&lt;/span&gt;
&lt;span class="na"&gt;AWSTemplateFormatVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2010-09-09&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Part 1 - Build a webapp stack with CloudFormation&lt;/span&gt;

&lt;span class="na"&gt;Resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;WebAppInstance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::EC2::Instance&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;ImageId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ami-0d5eff06f840b45e9&lt;/span&gt; &lt;span class="c1"&gt;# ImageID valid only in us-east-1 region&lt;/span&gt;
      &lt;span class="na"&gt;InstanceType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;t2.micro&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the template above, we have one resource with a type of AWS::EC2::Instance. We‚Äôve hardcoded both the &lt;code&gt;ImageId&lt;/code&gt; (AMI) and &lt;code&gt;InstanceType&lt;/code&gt;. Note this &lt;code&gt;ImageId&lt;/code&gt; will only work in the us-east-1 region.&lt;/p&gt;

&lt;p&gt;To create the stack using this template, run the &lt;code&gt;create-stack&lt;/code&gt; command-line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;aws cloudformation create-stack &lt;span class="nt"&gt;--stack-name&lt;/span&gt; ec2-example &lt;span class="nt"&gt;--template-body&lt;/span&gt; file://01_ec2.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You now have an EC2 instance in the us-east-1 region! But we have no way to access this instance. We cannot SSH into it yet because we didn‚Äôt assign it a security group allowing SSH traffic or specify a key-pair name. There‚Äôs nothing running on HTTP or HTTPS ports yet, but even if there were, we wouldn‚Äôt be able to access that either. Let‚Äôs fix that now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-enable-ssh-and-httphttps-traffic"&gt;
  &lt;/a&gt;
  2. Enable SSH and HTTP/HTTPS Traffic
&lt;/h3&gt;

&lt;p&gt;Now, we‚Äôll update the CloudFormation template to add a security group resource that allows traffic in on port 22 for SSH and ports 80 and 443 for HTTP and HTTPS traffic. Here, we‚Äôve allowed all IP addresses to access these ports, but you may want to lock this down further (especially the SSH rule) to IP addresses you trust.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# 02_ec2.yaml&lt;/span&gt;
&lt;span class="na"&gt;AWSTemplateFormatVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2010-09-09&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Part 1 - Build a webapp stack with CloudFormation&lt;/span&gt;

&lt;span class="na"&gt;Resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;WebAppInstance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::EC2::Instance&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;ImageId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ami-0d5eff06f840b45e9&lt;/span&gt; &lt;span class="c1"&gt;# ImageID valid only in us-east-1 region&lt;/span&gt;
      &lt;span class="na"&gt;InstanceType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;t2.micro&lt;/span&gt;
      &lt;span class="na"&gt;KeyName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;jenna&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;-- Change to use your key-pair name&lt;/span&gt;
      &lt;span class="na"&gt;SecurityGroupIds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;WebAppSecurityGroup&lt;/span&gt;

  &lt;span class="na"&gt;WebAppSecurityGroup&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::EC2::SecurityGroup&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;GroupName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Join&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;-'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;webapp-security-group&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dev&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
      &lt;span class="na"&gt;GroupDescription&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Allow&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;HTTP/HTTPS&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;and&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;SSH&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;inbound&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;and&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;outbound&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;traffic'&lt;/span&gt;
      &lt;span class="na"&gt;SecurityGroupIngress&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;IpProtocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tcp&lt;/span&gt;
          &lt;span class="na"&gt;FromPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
          &lt;span class="na"&gt;ToPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
          &lt;span class="na"&gt;CidrIp&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;0.0.0.0/0&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;IpProtocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tcp&lt;/span&gt;
          &lt;span class="na"&gt;FromPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;443&lt;/span&gt;
          &lt;span class="na"&gt;ToPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;443&lt;/span&gt;
          &lt;span class="na"&gt;CidrIp&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;0.0.0.0/0&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;IpProtocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tcp&lt;/span&gt;
          &lt;span class="na"&gt;FromPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;
          &lt;span class="na"&gt;ToPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;
          &lt;span class="na"&gt;CidrIp&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;0.0.0.0/0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, we‚Äôve hardcoded some values in our template, but we‚Äôll fix that up soon. Before updating the stack with this template, you‚Äôll need to make one small change to use your key-pair name.&lt;/p&gt;

&lt;p&gt;You can update your stack using the &lt;code&gt;update-stack&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;aws cloudformation update-stack &lt;span class="nt"&gt;--stack-name&lt;/span&gt; ec2-example &lt;span class="nt"&gt;--template-body&lt;/span&gt; file://02_ec2.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now your EC2 instance should be accessible with SSH using your key-pair. To test this out, first navigate to your new stack in the AWS CloudFormation Console to find the instance you created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VPP7mV-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pk4u7yr1gcy2hf32wpf3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VPP7mV-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pk4u7yr1gcy2hf32wpf3.png" alt="Resources in the CloudFormation stack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then go to the instance and copy the public DNS for your instance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bl00CWiE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1fefp18k8en2i6x6x69h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bl00CWiE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1fefp18k8en2i6x6x69h.png" alt="EC2 instance details"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, SSH into the instance like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="s2"&gt;"YOUR_KEY_PAIR_NAME.pem"&lt;/span&gt; ec2-user@PUBLIC_DNS
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your command will look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="s2"&gt;"jenna.pem"&lt;/span&gt; ec2-user@ec2-18-212-186-244.compute-1.amazonaws.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Hint:&lt;/em&gt; You can also grab the command directly by viewing the "Connect" details at the top of the instance and copying the example command at the bottom of the "SSH client" tab.&lt;/p&gt;

&lt;p&gt;There is nothing being served on port 80 or 443 yet, so you won‚Äôt be able to test HTTP/HTTPS access yet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-assign-an-ip-address-and-output-the-website-url"&gt;
  &lt;/a&gt;
  3. Assign an IP Address and Output the Website URL
&lt;/h3&gt;

&lt;p&gt;We also need to give our EC2 instance an elastic IP address (EIP). An elastic ip address is a static IP address that won‚Äôt change every time we re-provision the instance. We‚Äôll also output the website URL.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# 03_ec2.yaml&lt;/span&gt;
&lt;span class="na"&gt;AWSTemplateFormatVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2010-09-09&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Part 1 - Build a webapp stack with CloudFormation&lt;/span&gt;

&lt;span class="na"&gt;Resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;WebAppInstance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::EC2::Instance&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;ImageId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ami-0d5eff06f840b45e9&lt;/span&gt; &lt;span class="c1"&gt;# ImageID valid only in us-east-1 region&lt;/span&gt;
      &lt;span class="na"&gt;InstanceType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;t2.micro&lt;/span&gt;
      &lt;span class="na"&gt;KeyName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;jenna&lt;/span&gt;
      &lt;span class="na"&gt;SecurityGroupIds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;WebAppSecurityGroup&lt;/span&gt;

  &lt;span class="na"&gt;WebAppSecurityGroup&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::EC2::SecurityGroup&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;GroupName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Join&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;-'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;webapp-security-group&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dev&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
      &lt;span class="na"&gt;GroupDescription&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Allow&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;HTTP/HTTPS&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;and&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;SSH&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;inbound&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;and&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;outbound&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;traffic'&lt;/span&gt;
      &lt;span class="na"&gt;SecurityGroupIngress&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;IpProtocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tcp&lt;/span&gt;
          &lt;span class="na"&gt;FromPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
          &lt;span class="na"&gt;ToPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
          &lt;span class="na"&gt;CidrIp&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;0.0.0.0/0&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;IpProtocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tcp&lt;/span&gt;
          &lt;span class="na"&gt;FromPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;443&lt;/span&gt;
          &lt;span class="na"&gt;ToPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;443&lt;/span&gt;
          &lt;span class="na"&gt;CidrIp&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;0.0.0.0/0&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;IpProtocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tcp&lt;/span&gt;
          &lt;span class="na"&gt;FromPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;
          &lt;span class="na"&gt;ToPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;
          &lt;span class="na"&gt;CidrIp&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;0.0.0.0/0&lt;/span&gt;

  &lt;span class="na"&gt;WebAppEIP&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::EC2::EIP&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Domain&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;vpc&lt;/span&gt;
      &lt;span class="na"&gt;InstanceId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;WebAppInstance&lt;/span&gt;
      &lt;span class="na"&gt;Tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Name&lt;/span&gt;
          &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Join&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;-'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;webapp-eip&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;dev&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;Outputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;WebsiteURL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="s"&gt;http://${WebAppEIP}&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;WebApp URL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this template update, we‚Äôve created a resource AWS::EC2::EIP for an elastic IP address and assigned it to our EC2 instance. We also added the &lt;code&gt;Outputs&lt;/code&gt; section and out the website URL, which at this point is our elastic IP address.&lt;/p&gt;

&lt;p&gt;You can run the same &lt;code&gt;update-stack&lt;/code&gt; command from above (make sure to reference the right file name). When it completes (the EIP takes a few minutes to provision), your EC2 instance will have a static IP address and you‚Äôll be able to see both the IP address and URL in the Outputs section of the CloudFormation stack in the Console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qBmCMFAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hkg9ndmp6bjp1ktnir1a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qBmCMFAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hkg9ndmp6bjp1ktnir1a.png" alt="Outputs for the CloudFormation stack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-make-the-template-dynamic"&gt;
  &lt;/a&gt;
  4. Make the Template Dynamic
&lt;/h3&gt;

&lt;p&gt;Now that we‚Äôve made it work, the last task we have to do is to make it better. Remember that our template has hardcoded values for a number of configurations that should really be dynamic. We want these values to be dynamic for a few reasons. Maybe we want our development team to create a stack in their own AWS account for development purposes. And because it‚Äôs development, maybe we only want t2.micro instances, whereas in production we need t2.medium instances. We also might want to create this stack in other regions, so we‚Äôll need to use the region-specific &lt;code&gt;ImageId&lt;/code&gt; (AMI).&lt;/p&gt;

&lt;p&gt;We can make our template more dynamic by using parameters and mappings. Let‚Äôs add them now!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# 04_ec2.yaml&lt;/span&gt;
&lt;span class="na"&gt;AWSTemplateFormatVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2010-09-09&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Part 1 - Build a webapp stack with CloudFormation&lt;/span&gt;

&lt;span class="na"&gt;Parameters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;AvailabilityZone&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::EC2::AvailabilityZone::Name&lt;/span&gt;
  &lt;span class="na"&gt;EnvironmentType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Specify&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;the&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Environment&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;type&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;of&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;the&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;stack.'&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;String&lt;/span&gt;
    &lt;span class="na"&gt;Default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dev&lt;/span&gt;
    &lt;span class="na"&gt;AllowedValues&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;dev&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;test&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;prod&lt;/span&gt;
  &lt;span class="na"&gt;AmiID&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::SSM::Parameter::Value&amp;lt;AWS::EC2::Image::Id&amp;gt;&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;The&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ID&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;of&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;the&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;AMI.'&lt;/span&gt;
    &lt;span class="na"&gt;Default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2&lt;/span&gt;
  &lt;span class="na"&gt;KeyPairName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;String&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;The name of an existing Amazon EC2 key pair in this region to use to SSH into the Amazon EC2 instances.&lt;/span&gt;

&lt;span class="na"&gt;Mappings&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;EnvironmentToInstanceType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;dev&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;InstanceType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;t2.nano&lt;/span&gt;
    &lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;InstanceType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;t2.micro&lt;/span&gt;
    &lt;span class="na"&gt;prod&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;InstanceType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;t2.small&lt;/span&gt;

&lt;span class="na"&gt;Resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;WebAppInstance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::EC2::Instance&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;AvailabilityZone&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;AvailabilityZone&lt;/span&gt;
      &lt;span class="na"&gt;ImageId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;AmiID&lt;/span&gt;
      &lt;span class="na"&gt;InstanceType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!FindInMap&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;EnvironmentToInstanceType&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="nv"&gt;EnvironmentType&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;InstanceType&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
      &lt;span class="na"&gt;KeyName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;KeyPairName&lt;/span&gt;
      &lt;span class="na"&gt;SecurityGroupIds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;WebAppSecurityGroup&lt;/span&gt;

  &lt;span class="na"&gt;WebAppSecurityGroup&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::EC2::SecurityGroup&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;GroupName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Join&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;-'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;webapp-security-group&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="nv"&gt;EnvironmentType&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
      &lt;span class="na"&gt;GroupDescription&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Allow&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;HTTP/HTTPS&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;and&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;SSH&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;inbound&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;and&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;outbound&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;traffic'&lt;/span&gt;
      &lt;span class="na"&gt;SecurityGroupIngress&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;IpProtocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tcp&lt;/span&gt;
          &lt;span class="na"&gt;FromPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
          &lt;span class="na"&gt;ToPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
          &lt;span class="na"&gt;CidrIp&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;0.0.0.0/0&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;IpProtocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tcp&lt;/span&gt;
          &lt;span class="na"&gt;FromPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;443&lt;/span&gt;
          &lt;span class="na"&gt;ToPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;443&lt;/span&gt;
          &lt;span class="na"&gt;CidrIp&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;0.0.0.0/0&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;IpProtocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tcp&lt;/span&gt;
          &lt;span class="na"&gt;FromPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;
          &lt;span class="na"&gt;ToPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;
          &lt;span class="na"&gt;CidrIp&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;0.0.0.0/0&lt;/span&gt;

  &lt;span class="na"&gt;WebAppEIP&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::EC2::EIP&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Domain&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;vpc&lt;/span&gt;
      &lt;span class="na"&gt;InstanceId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;WebAppInstance&lt;/span&gt;
      &lt;span class="na"&gt;Tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Name&lt;/span&gt;
          &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Join&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;-'&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;webapp-eip&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="nv"&gt;EnvironmentType&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;Outputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;WebsiteURL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="s"&gt;http://${WebAppEIP}&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;WebApp URL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We‚Äôve added parameters for &lt;code&gt;AvailabilityZone&lt;/code&gt;, &lt;code&gt;EnvironmentType&lt;/code&gt;, &lt;code&gt;AmiID&lt;/code&gt;, and &lt;code&gt;KeyPairName&lt;/code&gt;. &lt;code&gt;AvailabilityZone&lt;/code&gt; will pull from AWS::EC2::AvailabilityZone::Name. &lt;code&gt;EnvironmentType&lt;/code&gt; will be one of dev, test, or prod and default to dev. The &lt;code&gt;ImageId&lt;/code&gt; will be an AWS::SSM::Parameter::ValueAWS::EC2::Image::Id type. By using the public parameter &lt;code&gt;/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2&lt;/code&gt;, it will use the region-specific AMI, the value of which is stored in the AWS Systems Manager Parameter Store. In this case, we'll rely on the default value. And the &lt;code&gt;KeyPairName&lt;/code&gt; is the name of an existing key-pair.&lt;/p&gt;

&lt;p&gt;The other section we‚Äôve added is the &lt;code&gt;Mappings&lt;/code&gt; section. We‚Äôll use the &lt;code&gt;EnvironmentToInstanceType&lt;/code&gt; mapping to lookup the instance type for the selected environment.&lt;/p&gt;

&lt;p&gt;You can update the stack with this command, passing in the parameter values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;aws cloudformation update-stack &lt;span class="nt"&gt;--stack-name&lt;/span&gt; ec2-example &lt;span class="nt"&gt;--template-body&lt;/span&gt; file://04_ec2.yaml &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--parameters&lt;/span&gt; &lt;span class="nv"&gt;ParameterKey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;AvailabilityZone,ParameterValue&lt;span class="o"&gt;=&lt;/span&gt;us-east-1a &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;ParameterKey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;EnvironmentType,ParameterValue&lt;span class="o"&gt;=&lt;/span&gt;dev &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;ParameterKey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;KeyPairName,ParameterValue&lt;span class="o"&gt;=&lt;/span&gt;jenna
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now it will be easier to reuse this template for other environments and in other regions!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#delete-your-stack"&gt;
  &lt;/a&gt;
  Delete Your Stack
&lt;/h3&gt;

&lt;p&gt;Don‚Äôt forget to delete your stack so you don‚Äôt accrue charges. You can do that with the &lt;code&gt;delete-stack&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;aws cloudformation delete-stack &lt;span class="nt"&gt;--stack-name&lt;/span&gt; ec2-example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-you-learned"&gt;
  &lt;/a&gt;
  What You Learned
&lt;/h3&gt;

&lt;p&gt;In this post, we created a CloudFormation template that provisions an EC2 instance in any region for your different environments, enables SSH, HTTP, and HTTPS inbound traffic, and we assigned a static IP address to the instance. We created and updated the stack from the command line using the AWS CLI. You can grab the final CloudFormation template created &lt;a href="https://github.com/jennapederson/cloudformation-examples"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the next post we'll add an Amazon RDS Postgresql database to our template and configure it for traffic from the EC2 instance.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Like what you read? Follow me here on &lt;a href="https://dev.to/jennapederson"&gt;Dev.to&lt;/a&gt; or on &lt;a href="https://twitter.com/jennapederson"&gt;Twitter&lt;/a&gt; to stay updated!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloudformation</category>
      <category>iac</category>
      <category>ec2</category>
    </item>
    <item>
      <title>6 Awesome Tools that turn code snippets to images</title>
      <author>Esther Agbaje</author>
      <pubDate>Mon, 21 Jun 2021 15:48:24 +0000</pubDate>
      <link>https://dev.to/estheragbaje/6-awesome-tools-that-turn-code-snippets-to-images-54fo</link>
      <guid>https://dev.to/estheragbaje/6-awesome-tools-that-turn-code-snippets-to-images-54fo</guid>
      <description>&lt;p&gt;You've probably seen images like this on Twitter, Instagram, blogs e.t.c. But have you ever wondered how these images are created?&lt;/p&gt;

&lt;p&gt;Well, today I'm going to be sharing 6 tools that can help you create beautiful code snippets, so you too can begin to share them online üíÉüíÉüíÉ&lt;br&gt;
¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-snappifyio"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://snappify.io/"&gt;Snappify.io&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Snappify comes with 6 predefined styles to create aesthetic snapshots of your code without the need to spend hours of styling. You can also adjust the background and code theme to your needs if desired.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EMFWU-Lj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjggdpr4b0mowtytta3p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EMFWU-Lj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjggdpr4b0mowtytta3p.png" alt="Snappify"&gt;&lt;/a&gt;&lt;br&gt;
¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-carbon"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://carbon.now.sh/"&gt;Carbon&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Create and share beautiful images of your source code using Carbon. With Carbon, you can customize your image by changing the syntax theme, background color/image, window theme, or padding.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XD0XMjV9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qez20g434gncjrrxep6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XD0XMjV9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qez20g434gncjrrxep6.png" alt="Carbon"&gt;&lt;/a&gt;&lt;br&gt;
¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-rayso"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://ray.so/"&gt;Ray.so&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;With Ray.so, you can choose from a range of syntax colors, hide or show the background, and toggle between a dark and light window when creating images of your code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fCKVADq3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gr8k2yxrnc12zvnrswts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fCKVADq3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gr8k2yxrnc12zvnrswts.png" alt="Ray"&gt;&lt;/a&gt;&lt;br&gt;
¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-codekeep"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://codekeep.io/screenshot"&gt;CodeKeep&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;CodeKeep is a great way to create and share code snippets. You can also organize code snippets by creating labels and filtering snippets by label.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sM8ptDKg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2u6n86n3eyn8e08abb6o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sM8ptDKg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2u6n86n3eyn8e08abb6o.png" alt="CodeKeep"&gt;&lt;/a&gt;&lt;br&gt;
¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-codeimg"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://codeimg.io/"&gt;CodeImg&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;CodeImg enables you not only to create these code snippets but also change the dimensions of the output image to fit different platforms like Facebook, Twitter, Instagram, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4MfMIGq---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xf9r7f7jiqexdgspvjcn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4MfMIGq---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xf9r7f7jiqexdgspvjcn.png" alt="CodeImg"&gt;&lt;/a&gt;&lt;br&gt;
¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-instacode"&gt;
  &lt;/a&gt;
  6. &lt;a href="http://instaco.de/"&gt;InstaCode&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Instacode allows you to create Instagram-like images of your code snippet. You can also add filters or give these images a custom perspective by adjusting and rotating it. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kMubsY3k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6jktl7a99euyqo9za8a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kMubsY3k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6jktl7a99euyqo9za8a.png" alt="InstaCode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I personally use and love Snappify &amp;amp; Carbon.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;¬†&lt;br&gt;
Do you know any other amazing tool used to create beautiful code snippets? Please share them below üíñ&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>writing</category>
      <category>tooling</category>
    </item>
    <item>
      <title>Website chia s·∫ª th·ªß thu·∫≠t facebook h·ªØu √≠ch n√™n tham kh·∫£o</title>
      <author>Joney</author>
      <pubDate>Mon, 21 Jun 2021 15:44:42 +0000</pubDate>
      <link>https://dev.to/jonynguyen/website-chia-s-th-thu-t-facebook-h-u-ich-nen-tham-kh-o-1gin</link>
      <guid>https://dev.to/jonynguyen/website-chia-s-th-thu-t-facebook-h-u-ich-nen-tham-kh-o-1gin</guid>
      <description>&lt;p&gt;Ng√†y nay vi·ªác ng∆∞·ªùi d√πng m·∫°ng x√£ h·ªôi facebook ƒë√£ tr·ªü n√™n v√¥ c√πng, v√¥ c√πng nhi·ªÅu. ƒêi·ªÅu n√†y t∆∞∆°ng ·ª©ng v·ªõi vi·ªác ng∆∞·ªùi d√πng b·∫Øt ƒë·∫ßu t√¨m hi·ªÉu nh·ªØng ƒëi·ªÅu li√™n quan ƒë·∫øn n√≥. Th·∫ø nh∆∞ng vi·ªác h√†ng ng√†y b·∫°n s·ª≠ d·ª•ng Facebook v√†i gi·ªù ƒë·ªìng h·ªì tr√™n m√°y t√≠nh hay di ƒë·ªông ƒë·ªÉ gi·∫£i tr√≠, l√†m vi·ªác nh∆∞ng c≈©ng ch∆∞a ch·∫Øc ƒë√£ bi·∫øt h·∫øt nh·ªØng th·ªß thu·∫≠t c·∫ßn thi·∫øt ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng hi·ªáu qu·∫£ h∆°n. Ch√≠nh v√¨ v·∫≠y, vi·ªác t√¨m ki·∫øm m·ªôt Website chia s·∫ª th·ªß thu·∫≠t facebook h·ªØu √≠ch l√† ƒëi·ªÅu m√† &lt;a href="https://dev.to/jonynguyen"&gt;jonynguyen&lt;/a&gt; trong dev.to mu·ªën mang ƒë·∫øn cho b·∫°n nh·∫±m gi√∫p m·ªçi ng∆∞·ªùi c√≥ nh·ªØng m·∫πo facebook hay nh·∫•t khi s·ª≠ d·ª•ng m·∫°ng x√£ h·ªôi n√†y&lt;/p&gt;

&lt;h2&gt;Trang web th·ªß thu·∫≠t facebook hay v√† h·ªØu √≠ch cho b·∫°n&lt;/h2&gt;

&lt;p&gt;Website ·ªû ƒë√¢y m√† dev.to mu·ªën chia s·∫ª ƒë·∫øn m·ªçi ng∆∞·ªùi c√≥ m·ªôt c√°i t√™n kh√° d·ªÖ nghe l√† blog h·ªó tr·ª£ c√≥ ƒë·ªãa ch·ªâ website t·∫°i &lt;a href="http://www.bloghotro.com"&gt;www.bloghotro.com&lt;/a&gt; gi·ªëng nh∆∞ t√™n c·ªßa n√≥ l√† m·ªôt d·∫°ng blog gi√∫p ƒë·ª° c≈©ng nh∆∞ h·ªó tr·ª£ ng∆∞·ªùi d√πng nh·ªØng v·∫•n ƒë·ªÅ li√™n quan ƒë·∫øn c√¥ng ngh·ªá, internet v√† c·∫£ nh·ªØng m·∫°ng x√£ h·ªôi nh∆∞ facebook. &lt;/p&gt;

&lt;p&gt;Trong giao di·ªán c·ªßa website n√†y c√≥ m·ªôt chuy√™n m·ª•c v√† n·∫øu nh∆∞ m·ªçi ng∆∞·ªùi mu·ªën t√¨m hi·ªÉu th√™m v·ªÅ &lt;a href="https://bloghotro.com/thu-thuat-facebook/"&gt;th·ªß thu·∫≠t facebook&lt;/a&gt; th√¨ c√≥ th·ªÉ nh·∫•n v√†o link n√†y ƒë·ªÉ chuy·ªÉn tr·ª±c ti·∫øp. V√† trong ch·ªß ƒë·ªÅ b√†i vi·∫øt n√†y th√¨ jonynguyen xin ƒë∆∞·ª£c chia s·∫ª ƒë·∫øn m·ªçi ng∆∞·ªùi m·ªôt s·ªë th·ªß thu·∫≠t ng·∫Øn g·ªçn v·ªÅ facebook ·ªü ph√≠a b√™n d∆∞·ªõi nh√©&lt;/p&gt;

&lt;h3&gt;M·∫πo s·ª≠ d·ª•ng Facebook hi·ªáu qu·∫£ h∆°n&lt;/h3&gt;

&lt;h4&gt;1. L∆∞u b√†i vi·∫øt Facebook ƒë·ªÉ xem sau:&lt;/h4&gt;

&lt;p&gt;Ch·∫ø ƒë·ªô Save s·∫Ω gi√∫p b·∫°n c√≥ th·ªÉ l∆∞u b√†i vi·∫øt ho·∫∑c link b·∫•t c·ª© tr√™n News Feed n·∫øu nh∆∞ mu·ªën xem l·∫°i.&lt;/p&gt;

&lt;p&gt;B∆∞·ªõc 1:&lt;/p&gt;

&lt;p&gt;T·∫°i b√†i vi·∫øt hay link mu·ªën l∆∞u, ch√∫ng ta nh·∫•n ch·ªçn v√†o bi·ªÉu t∆∞·ª£ng m≈©i t√™n x·ªï xu·ªëng, v√† ch·ªçn Save link ho·∫∑c Save post.&lt;/p&gt;

&lt;p&gt;L∆∞u b√†i vi·∫øt Facebook L∆∞u b√†i vi·∫øt Facebook&lt;/p&gt;

&lt;p&gt;B∆∞·ªõc 2:&lt;/p&gt;

&lt;p&gt;T·∫°i giao di·ªán Facebook, nh·∫•n ch·ªçn bi·ªÉu t∆∞·ª£ng 3 d·∫•u g·∫°ch ngang v√† ch·ªçn m·ª•c Saved. To√†n b·ªô b√†i vi·∫øt ho·∫∑c link s·∫Ω ƒë∆∞·ª£c l∆∞u t·∫°i m·ª•c Saved n√†y. M·ª•c All s·∫Ω l√† to√†n b·ªô b√†i vi·∫øt, h√¨nh ·∫£nh, video,.. ƒë∆∞·ª£c l∆∞u. N·∫øu b·∫°n mu·ªën t√¨m theo t·ª´ng m·ª•c c√≥ th·ªÉ nh·∫•n v√†o 8 m·ª•c b√™n nh·ªè b√™n tr√™n theo t·ª´ng lo·∫°i b√†i ƒë√£ ƒë∆∞·ª£c l∆∞u.&lt;/p&gt;

&lt;p&gt;L∆∞u b√†i vi·∫øt Facebook L∆∞u b√†i vi·∫øt Facebook L∆∞u b√†i vi·∫øt Facebook&lt;/p&gt;

&lt;p&gt;B∆∞·ªõc 3:&lt;/p&gt;

&lt;p&gt;ƒê·ªÉ x√≥a b√†i ƒë√£ l∆∞u, c≈©ng t·∫°i giao di·ªán Saved, ch·ªçn b√†i vi·∫øt mu·ªën b·ªè l∆∞u v√† nh·∫•n bi·ªÉu t∆∞·ª£ng 3 d·∫•u ch·∫•m v√† ch·ªçn Unsave.&lt;/p&gt;

&lt;p&gt;L∆∞u b√†i vi·∫øt Facebook L∆∞u b√†i vi·∫øt Facebook&lt;/p&gt;

&lt;h4&gt;2. Ch·∫∑n l·ªùi m·ªùi ch∆°i game tr√™n Facebook:&lt;/h4&gt;

&lt;p&gt;Ch·∫Øc c≈©ng kh√¥ng d·ªÖ ch·ªãu khi Facebook c·ªßa b·∫°n li√™n t·ª•c b·ªã t·∫•n c√¥ng b·∫±ng nh·ªØng l·ªùi m·ªùi ch∆°i game. V√† c√°ch ch·∫∑n nh·ªØng l·ªùi m·ªùi ch∆°i game c≈©ng r·∫•t ƒë∆°n gi·∫£n.&lt;/p&gt;

&lt;p&gt;B∆∞·ªõc 1:&lt;/p&gt;

&lt;p&gt;T·∫°i giao di·ªán Facebook, b·∫°n nh·∫•n ch·ªçn v√†o bi·ªÉu t∆∞·ª£ng 3 d·∫•u g·∫°ch ngang, ch·ªçn m·ª•c Settings. Ti·∫øp ƒë·∫øn ch·ªçn Account Settings.&lt;/p&gt;

&lt;p&gt;Ch·∫∑n l·ªùi m·ªùi ch∆°i game tr√™n Facebook Ch·∫∑n l·ªùi m·ªùi ch∆°i game tr√™n Facebook&lt;/p&gt;

&lt;p&gt;B∆∞·ªõc 2:&lt;/p&gt;

&lt;p&gt;Sau ƒë√≥, ch·ªçn m·ª•c Apps t·∫°i giao di·ªán Settings. Ti·∫øp theo, nh·∫•n ch·ªçn ph·∫ßn Platform.&lt;/p&gt;

&lt;p&gt;Ch·∫∑n l·ªùi m·ªùi ch∆°i game tr√™n Facebook Ch·∫∑n l·ªùi m·ªùi ch∆°i game tr√™n Facebook&lt;/p&gt;

&lt;p&gt;Trong giao di·ªán Platform, m·ª•c Game Invites and App Notifications, ch√∫ng ta ch·ªçn No. Nh·∫•p ch·ªçn m·ª•c App and Wesites ph·∫ßn Edit, nh·∫•n Turn off Platform.&lt;/p&gt;

&lt;p&gt;Ch·∫∑n l·ªùi m·ªùi ch∆°i game tr√™n Facebook Ch·∫∑n l·ªùi m·ªùi ch∆°i game tr√™n Facebook&lt;/p&gt;

&lt;h4&gt;3. S·ª≠ d·ª•ng video l√†m avatar Facebook:&lt;/h4&gt;

&lt;p&gt;T√≠nh nƒÉng m·ªõi c·∫≠p nh·∫≠t n√†y t·∫°o n√™n s·ª± th√≠ch th√∫ r·∫•t l·ªõn trong c·ªông ƒë·ªìng nh·ªØng ng∆∞·ªùi s·ª≠ d·ª•ng &lt;a href="https://bloghotro.com/tag/facebook/"&gt;Facebook&lt;/a&gt;. Tuy nhi√™n, b·∫°n ch·ªâ c√≥ th·ªÉ d√πng ·∫£nh ƒë·ªông l√†m ·∫£nh ƒë·∫°i di·ªán Facebook v·ªõi b·∫£n tr√™n di ƒë·ªông m√† th√¥i. Ch√∫ng ta thay ·∫£nh GIF l√†m ·∫£nh avatar Facebook nh∆∞ c√°ch l√†m th√¥ng th∆∞·ªùng.&lt;/p&gt;

&lt;p&gt;B·∫°n c√≥ th·ªÉ xem th√™m c√°ch l√†m chi ti·∫øt trong b√†i vi·∫øt C√°ch d√πng video l√†m Avatar cho Facebook tr√™n iOS v√† &lt;a href="https://bloghotro.com/tag/android/"&gt;Android&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;S·ª≠ d·ª•ng video l√†m avatar Facebook S·ª≠ d·ª•ng video l√†m avatar Facebook&lt;/p&gt;

&lt;h4&gt;4. T·∫Øt t√≠nh nƒÉng t·ª± ƒë·ªông ph√°t video Facebook:&lt;/h4&gt;

&lt;p&gt;Facebook ƒë√£ t√≠ch h·ª£p t√≠nh nƒÉng t·ª± ƒë·ªông ph√°t video. Tuy nhi√™n, ƒëi·ªÅu n√†y l·∫°i g√¢y phi√™n ph·ª©c kh√¥ng nh·ªè cho kh√¥ng √≠t c∆° s·ªë ng∆∞·ªùi s·ª≠ d·ª•ng khi video li√™n t·ª•c ph√°t.&lt;/p&gt;

&lt;p&gt;ƒê·ªÉ t·∫Øt video t·ª± ƒë·ªông ph√°t, b·∫°n truy c·∫≠p theo ƒë∆∞·ªùng d·∫´n Settings &amp;gt; Video and Photos &amp;gt; Autoplay v√† ch·ªçn 1 trong 3 t√πy ch·ªânh, g·ªìm t·ª± ƒë·ªông ch·∫°y video qua k·∫øt n·ªëi di ƒë·ªông v√† Wi-Fi, ch·ªâ Wi-Fi (Just Wi-Fi) ho·∫∑c Kh√¥ng bao gi·ªù (Never).&lt;/p&gt;

&lt;p&gt;ƒê·ªÉ bi·∫øt th√™m chi ti·∫øt t·ª´ng b∆∞·ªõc l√†m, b·∫°n h√£y xem b√†i vi·∫øt C√°ch v√¥ hi·ªáu h√≥a t√≠nh nƒÉng t·ª± ƒë·ªông ch·∫°y video tr√™n Facebook.&lt;/p&gt;

&lt;p&gt;t·ª± ƒë·ªông ph√°t video Facebook t·ª± ƒë·ªông ph√°t video Facebook t·ª± ƒë·ªông ph√°t video Facebook&lt;/p&gt;

&lt;h4&gt;5. C·∫≠p nh·∫≠t nhanh nh·ªØng trang tr√™n News Feed:&lt;/h4&gt;

&lt;p&gt;Khi s·ª≠ d·ª•ng Facebook, s·ªë l∆∞·ª£ng trang b·∫°n th√≠ch s·∫Ω l√™n h√†ng trƒÉm ho·∫∑c h√†ng ngh√¨n trang. Ch√≠nh v√¨ th·∫ø, ch√∫ng ta s·∫Ω c√≥ th·ªÉ b·ªè l·ª° nh·ªØng tin t·ª©c n√≥ng h·ªïi t·ª´ b·∫°n b√® ho·∫∑c t·ª´ m·ªôt fanpage n√†o ƒë√≥. V·∫≠y th√¨, n·∫øu mu·ªën ∆∞u ti√™n cho nh·ªØng trang hay b·∫°n b√® quan t√¢m h√£y thi·∫øt l·∫≠p trong m·ªôt m·ª•c ri√™ng.&lt;/p&gt;

&lt;p&gt;B∆∞·ªõc 1:&lt;/p&gt;

&lt;p&gt;Nh·∫•p ch·ªçn bi·ªÉu t∆∞·ª£ng 3 d·∫•u g·∫°ch ngang, ch·ªçn Settings v√† ch·ªçn News Feed Preferences.&lt;/p&gt;

&lt;p&gt;C·∫≠p nh·∫≠t nhanh nh·ªØng trang tr√™n News Feed News Feed Preferences&lt;/p&gt;

&lt;p&gt;B∆∞·ªõc 2:&lt;/p&gt;

&lt;p&gt;T·∫°i giao di·ªán Preferences, b·∫°n c√≥ th·ªÉ l·ª±a ch·ªçn nh·ªØng trang ho·∫∑c b·∫°n b√® mu·ªën quan t√¢m h∆°n tr√™n Facebook, b·∫±ng c√°ch t√≠ch ch·ªçn v√†o t√†i kho·∫£n ho·∫∑c fanpage ƒë√≥ r·ªìi nh·∫•n Done.&lt;/p&gt;

&lt;p&gt;News Feed Preferences News Feed Preferences&lt;/p&gt;

&lt;h4&gt;6. ·∫®n danh s√°ch b·∫°n b√® tr√™n Facebook:&lt;/h4&gt;

&lt;p&gt;ƒê·ªÉ b·∫£o m·∫≠t to√†n b·ªô th√¥ng tin b·∫°n b√® tr√™n Facebook, ch√∫ng ta ho√†n to√†n c√≥ th·ªÉ ·∫©n to√†n b·ªô danh s√°ch b·∫°n b√® m√† m√¨nh ƒë√£ k·∫øt b·∫°n.&lt;/p&gt;

&lt;p&gt;B·∫°n th·ª±c hi·ªán theo ƒë∆∞·ªùng d·∫´n sau: t·∫°i giao di·ªán trang c√° nh√¢n ch·ªçn B·∫°n b√® &amp;gt; Ch·ªânh s·ª≠a quy·ªÅn ri√™ng t∆∞ (bi·ªÉu t∆∞·ª£ng b√∫t) &amp;gt; Danh s√°ch b·∫°n b√® v√† ch·ªçn Ch·ªâ m√¨nh t√¥i.&lt;/p&gt;

&lt;p&gt;Xem th√™m c√°ch l√†m trong b√†i vi·∫øt C√°ch ·∫©n danh s√°ch b·∫°n b√® v·ªõi m·ªçi ng∆∞·ªùi tr√™n Facebook.&lt;/p&gt;

&lt;h4&gt;7. C√°ch ·∫©n c√°c m·ªëi quan h·ªá Facebook:&lt;/h4&gt;

&lt;p&gt;N·∫øu b·∫°n kh√¥ng mu·ªën ng∆∞·ªùi kh√°c qu√° t√≤ m√≤ v·ªÅ m√¨nh, ch√∫ng ta c≈©ng c√≥ th·ªÉ ·∫©n danh s√°ch b·∫°n b√® ho·∫∑c ·∫©n c√°c m·ªëi quan h·ªá tr√™n Facebook.&lt;/p&gt;

&lt;p&gt;B∆∞·ªõc 1:&lt;/p&gt;

&lt;p&gt;T·∫°i trang t√†i kho·∫£n c√° nh√¢n Facebook, nh·∫•n ch·ªçn m·ª•c Gi·ªõi thi·ªáu v√† ch·ªçn ph·∫ßn Gia ƒë√¨nh v√† c√°c m·ªëi quan h·ªá trong ph·∫ßn T·ªïng quan.&lt;/p&gt;

&lt;p&gt;C√°ch ·∫©n c√°c m·ªëi quan h·ªá Facebook&lt;/p&gt;

&lt;p&gt;B∆∞·ªõc 2:&lt;/p&gt;

&lt;p&gt;T·∫°i m·ªëi quan h·ªá b·∫°n mu·ªën ·∫©n ƒëi, nh·∫•n ch·ªçn ph·∫ßn Ch·ªânh s·ª≠a.&lt;/p&gt;

&lt;p&gt;C√°ch ·∫©n c√°c m·ªëi quan h·ªá Facebook&lt;/p&gt;

&lt;p&gt;T·∫°i ƒë√¢y, ch√∫ng ta c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh ch·∫ø ƒë·ªô cho c√°c m·ªëi quan h·ªá, nh∆∞ c√¥ng khai, b·∫°n b√® hay ch·ªâ m√¨nh b·∫°n nh√¨n th·∫•y.&lt;/p&gt;

&lt;h4&gt;8. Kh√¥i ph·ª•c tin nh·∫Øn ƒë√£ x√≥a tr√™n Facebook:&lt;/h4&gt;

&lt;p&gt;V·ªõi nh·ªØng tin nh·∫Øn hay b·∫•t c·ª© t√†i li·ªáu, h√¨nh ·∫£nh n√†o m√† b·∫°n v√¥ t√¨nh ƒë√£ x√≥a tr√™n Facebook, ch√∫ng ta ho√†n to√†n c√≥ th·ªÉ kh√¥i ph·ª•c l·∫°i nh·ªù b·∫£n sao l∆∞u tr√™n Facebook. B·∫£n t·∫£i v·ªÅ c√°c d·ªØ li·ªáu ƒë√£ x√≥a s·∫Ω g·ª≠i th√¥ng qua ƒë·ªãa ch·ªâ email v√† d∆∞·ªõi d·∫°ng ƒëu√¥i .zip.&lt;/p&gt;

&lt;p&gt;B·∫°n v√†o th·ª±c hi·ªán theo ƒë∆∞·ªùng d·∫´n sau: C√†i ƒëƒÉt &amp;gt; Chung &amp;gt; T·∫£i xu·ªëng b·∫£n sao sao l∆∞u d·ªØ li·ªáu Facebook v√† th·ª±c hi·ªán theo c√°c b∆∞·ªõc h∆∞·ªõng d·∫´n.&lt;/p&gt;

&lt;p&gt;ƒê·ªÉ bi·∫øt r√µ h∆°n v·ªÅ t·ª´ng b∆∞·ªõc th·ª±c hi·ªán, b·∫°n c√≥ th·ªÉ tham kh·∫£o b√†i vi·∫øt C√°ch kh√¥i ph·ª•c tin nh·∫Øn ƒë√£ b·ªã xo√° tr√™n Facebook.&lt;/p&gt;

&lt;p&gt;T·ªïng k·∫øt&lt;/p&gt;

&lt;p&gt;Tr√™n ƒë√¢y l√† nh·ªØng chia s·∫ª c·ªßa dev.to v·ªÅ Website chia s·∫ª th·ªß thu·∫≠t facebook h·ªØu √≠ch n√™n tham kh·∫£o. M·ªói m·ªôt th·ªß thu·∫≠t s·∫Ω gi√∫p b·∫°n bi·∫øt th√™m nh·ªØng t√≠nh nƒÉng hay tr√™n Facebook. Tuy nhi√™n, m·ªôt ƒëi·ªÅu quan tr·ªçng m√† ch√∫ng ta ph·∫£i nh·ªõ ƒë√≥ l√† s·ª≠ d·ª•ng nh·ªØng c√°ch th·ª©c ƒë·ªÉ tƒÉng c∆∞·ªùng kh·∫£ nƒÉng b·∫£o m·∫≠t c·ªßa Facebook ƒë·∫•y nh√©&lt;/p&gt;

</description>
      <category>bloghotro</category>
    </item>
    <item>
      <title>HTML attributes that will reduce your CSS </title>
      <author>Stas Melnikov</author>
      <pubDate>Mon, 21 Jun 2021 15:29:17 +0000</pubDate>
      <link>https://dev.to/melnik909/html-attributes-that-will-reduce-your-css-4lag</link>
      <guid>https://dev.to/melnik909/html-attributes-that-will-reduce-your-css-4lag</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-type-attribute"&gt;
  &lt;/a&gt;
  The type attribute
&lt;/h2&gt;

&lt;p&gt;There is a practice to use extra classes when we create a custom checkbox and radio button. People just add classes such as checkbox or radio. Why isn't well? In this way, we increase the probability of using CSS duplication. For example, you have to duplicate the background-* property, i.e. background-position. &lt;/p&gt;

&lt;p&gt;That's not nice. I suggest fixing it.  We can create a single class where we define common CSS for checkboxes and radio buttons. For example, we define the background-position, background-size, etc. &lt;/p&gt;

&lt;p&gt;The next step is to define different properties. For example, to set the icons' sources using a few the background-image. At this point the main magic of my way is. &lt;/p&gt;

&lt;p&gt;We have to add different values to the type attribute of the input. When we need a checkbox we use the checkbox, when a radio button - the radio. So we can use the attribute selector to avoid extra classes. We can write checkboxes only styles using the [type="checkbox"] selector and the [type="radio"] selector for radio buttons. In this way, we avoid duplication CSS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"checkbox__input"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"checkbox__text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;show all&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"radio__input"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"radio__text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;show all&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.checkbox__text&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;contain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("checkbox_unchecked.svg")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.checkbox__input&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.checkbox__text&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("checkbox_checked.svg")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.radio__text&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;contain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("radio_unchecked.svg")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.radio__input&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.radio__text&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("radio_checked.svg")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;you can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toggle"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toggle__input"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toggle__text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;show all&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toggle"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toggle__input"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"radio"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"toggle__text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;show all&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.toggle__text&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;contain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.toggle__input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"checkbox"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.toggle__text&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("checkbox_unchecked.svg")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.toggle__input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"checkbox"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.toggle__text&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("checkbox_checked.svg")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.toggle__input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"radio"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.toggle__text&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("radio_unchecked.svg")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.toggle__input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"radio"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;:checked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.toggle__text&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("radio_checked.svg")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-hidden-attribute"&gt;
  &lt;/a&gt;
  The hidden attribute
&lt;/h2&gt;

&lt;p&gt;A lot of UI elements have a few states, i.e. showing and hiding. The popular method to create a hiding state is to use a separate class in which you define the display: none. So you get the 2 at-rule. &lt;/p&gt;

&lt;p&gt;I like to do things differently. I try to save my CSS short to avoid overriding properties. In this task I like to use the approach that is based on the hidden attribute and the :not() pseudo-class. &lt;/p&gt;

&lt;p&gt;The hidden attribute hides elements. It just adds the display: none to elements. So I can say, I want to add CSS to the element when it isn't hidden. And at this moment the :not() pseudo-class comes to help.&lt;/p&gt;

&lt;p&gt;I just write :not([hidden]) and I get what I want. And I don't need to add classes or remember about the selector's specificity. I get short CSS.&lt;/p&gt;

&lt;p&gt;The single minus is you need to remember the hidden attribute hide an element from users, keyboard, screen readers. It will not be accessible fully. So if you want to use my approach remember about this nuance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"modal"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"modal modal--active"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.modal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.modal--active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;you can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"modal"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"modal"&lt;/span&gt; &lt;span class="na"&gt;hidden&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.modal&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="nt"&gt;hidden&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt; If you like these tips go to read others on my &lt;a href="https://www.linkedin.com/in/melnik909/"&gt;Linkedin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.S.&lt;/strong&gt; This post was written with the support of my patrons: Ashlea Gable, Ben Rinehart, Sergio Kagiema, Vlad Bazhanov, Spiridon Konofaos, Jesse Willard, Tanya Ten.&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Vue js lifecycle hooks for dummies</title>
      <author>Safouene Turki</author>
      <pubDate>Mon, 21 Jun 2021 15:29:02 +0000</pubDate>
      <link>https://dev.to/safouene1/vue-js-lifecycle-hooks-for-dummies-5bm8</link>
      <guid>https://dev.to/safouene1/vue-js-lifecycle-hooks-for-dummies-5bm8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-are-lifecycle-hooks"&gt;
  &lt;/a&gt;
  What are lifecycle hooks?
&lt;/h2&gt;

&lt;p&gt;Every component in VueJS has a lifecycle which is being managed by Vue itself when it creates the component, mounts the component to the DOM, updates the component and destroy the components. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Il-5PUlk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rzanx1fsmphhu8arl3ka.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Il-5PUlk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rzanx1fsmphhu8arl3ka.jpg" alt="Vue js lifcycle"&gt;&lt;/a&gt;&lt;br&gt;
Just like Humans have a lifecycle (birth , growing up , death etc)  We can tap into key moments in that lifecycle by implementing one or more lifecycle hooks giving us the opportunity to add our own code at specific stages of a component lifetime.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;for the sake of this article, we will consider a Vue component as a package that will contain HTML / CSS / JS&lt;/strong&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jKfzPv0N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lbkzk1l4x8b547ii3y45.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jKfzPv0N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lbkzk1l4x8b547ii3y45.jpg" alt="Vue component lifcycle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-beforecreate"&gt;
  &lt;/a&gt;
  - beforeCreate()
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jh2DWFim--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mi90oxy6ipnh6v7qtsht.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jh2DWFim--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mi90oxy6ipnh6v7qtsht.png" alt="beforeCreate Vuejs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our package is now being filled with events/watchers setups and data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation :&lt;/strong&gt; Inside this hook, data is still not reactive and events that occur during the component‚Äôs lifecycle have not been set up yet.&lt;br&gt;
we can not use any Data/ Methods from the Component, however you can access &lt;a href="https://v3.vuejs.org/guide/component-props.html"&gt;props&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-created"&gt;
  &lt;/a&gt;
  - Created()
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4bosbxqc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ih9i96i0gxoswp1yr0s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4bosbxqc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ih9i96i0gxoswp1yr0s.png" alt="created vuejs"&gt;&lt;/a&gt;&lt;br&gt;
Our package is finally filled with reactive data , computed properties, methods, watch/event callbacks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation :&lt;/strong&gt;  Data is now reactive and events have been set up You cannot do any DOM manipulations because DOM has not been mounted yet. created() is called earlier in order to trigger actions like &lt;strong&gt;data fetching&lt;/strong&gt; from API backend. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Created will not wait for all of the async operations to complete before moving on to the next stage when making API call.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#-beforemount"&gt;
  &lt;/a&gt;
  - BeforeMount()
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YkYuON06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bal84228rguyafa1mlfr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YkYuON06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bal84228rguyafa1mlfr.png" alt="beforeMount vuejs"&gt;&lt;/a&gt;&lt;br&gt;
the package is on it's way to our depot "The Dom" &lt;br&gt;
&lt;strong&gt;Explanation :&lt;/strong&gt;   the render function is being called for the first time , our template has been compiled and our virtual DOM updated by Vue. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This hook is not called during server-side rendering.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#-mounted"&gt;
  &lt;/a&gt;
  - Mounted()
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rHvjYBWQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/de99sjy1dqsq94njj10p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rHvjYBWQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/de99sjy1dqsq94njj10p.png" alt="mounted vuejs"&gt;&lt;/a&gt;&lt;br&gt;
the package is now stored in the depot "THE DOM" and have access inside the dom.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation :&lt;/strong&gt; with this hook you can  access or modify the DOM of your component immediately before or after the initial render.&lt;br&gt;
The Vue docs recommend using the mounted() hook over the created() hook for data fetching. &lt;br&gt;
&lt;strong&gt;Vue does not block rendering until the mounted function is done running, so mounted()  runs concurrently with axios .&lt;/strong&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This hook is not called during server-side rendering.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#-beforeupdate"&gt;
  &lt;/a&gt;
  - beforeUpdate()
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0sJyOlpp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a9y3yxyg6gxkxppbzerj.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0sJyOlpp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a9y3yxyg6gxkxppbzerj.jpg" alt="beforeUpdate"&gt;&lt;/a&gt;&lt;br&gt;
the package content is being changed, so it's back to our factory and not accessible to "the DOM" depot anymore. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation :&lt;/strong&gt; this hook is called when data changes, but the DOM hasn't changed yet. &lt;br&gt;
The Vue Docs recommends using this hook to remove manually added event listeners.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This hook is not called during server-side rendering, because only the initial render is performed server-side.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#-updated"&gt;
  &lt;/a&gt;
  - Updated()
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KlnPpuPB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqlgbddly5puaogpqm7m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KlnPpuPB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqlgbddly5puaogpqm7m.jpg" alt="Updated"&gt;&lt;/a&gt;&lt;br&gt;
the package content is back to "the DOM"  depot after the changes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation :&lt;/strong&gt; Updated() is called when there is some data changes that causes the DOM to be re-rendered and patched. This hook is mostly for changes related to the DOM. It is not recommended updating the state with this hook. It's better to  use &lt;a href="https://v3.vuejs.org/api/options-data.html#computed"&gt;computed property&lt;/a&gt; or &lt;a href="https://v3.vuejs.org/api/options-data.html#watch"&gt;Watchers&lt;/a&gt; to react to state changes.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This hook is not called during server-side rendering, because only the initial render is performed server-side.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#-unmounted"&gt;
  &lt;/a&gt;
  - unmounted()
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x2QfIKkZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4pkej2yazo31q1re5u50.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x2QfIKkZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4pkej2yazo31q1re5u50.png" alt="unmounted vuejs"&gt;&lt;/a&gt;&lt;br&gt;
we no longer need the package and it's going straight to the trash.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation :&lt;/strong&gt; all directives of the component instance have been destroyed. This is the last step in the component lifecycle, it is similar to death . &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This hook is not called during server-side rendering&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you ever feel lost about Vue JS lifecycle hooks you can have a look at the &lt;a href="https://v3.vuejs.org/guide/instance.html#lifecycle-diagram"&gt;lifecycle diagram&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vue</category>
      <category>frontend</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Infinite scroll pagination with Rails and Stimulus </title>
      <author>Alexandre Ruban</author>
      <pubDate>Mon, 21 Jun 2021 15:15:29 +0000</pubDate>
      <link>https://dev.to/alexandreruban/infinite-scroll-pagination-with-rails-and-stimulus-41np</link>
      <guid>https://dev.to/alexandreruban/infinite-scroll-pagination-with-rails-and-stimulus-41np</guid>
      <description>&lt;p&gt;In this article, we'll learn how to build an infinite scroll pagination system using only a few lines of code. We will create a very simple Rails application and implement the infinite scroll feature in a Stimulus Controller that you can reuse to paginate all the resources of your app. We will do this step by step so let's begin!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-rails-application"&gt;
  &lt;/a&gt;
  Creating the Rails application
&lt;/h2&gt;

&lt;p&gt;Let's start by creating a new Rails application with Stimulus installed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rails new infinite-scroll-article &lt;span class="nt"&gt;--webpack&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;stimulus
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll start by building a pagination feature that works without any Javascript. Let's first create a model &lt;code&gt;Article&lt;/code&gt; with a string title and a text content.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rails g model Article title content:text
rails db:migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have our &lt;code&gt;Article&lt;/code&gt; model, let's create a seed that creates 100 articles for us to paginate.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# db/seeds.rb&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Remove existing articles"&lt;/span&gt;
&lt;span class="no"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;destroy_all&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Create new articles"&lt;/span&gt;
&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="no"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="ss"&gt;title: &lt;/span&gt;&lt;span class="s2"&gt;"Title &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;content: &lt;/span&gt;&lt;span class="s2"&gt;"This is the body of the article number &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To persist those 100 articles in the database, let's run the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rails db:seed
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are good to go for the model part, let's now create a controller with only the &lt;code&gt;#index&lt;/code&gt; method and the corresponding view to display those 100 articles.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;rails&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt; &lt;span class="n"&gt;articles&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the routes file, let's make our articles list the home page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config/routes.rb&lt;/span&gt;

&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;draw&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="s2"&gt;"articles#index"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the controller, let's query all the articles from the database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/articles_controller.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticlesController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;
    &lt;span class="vi"&gt;@articles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, let's display all of our  100 articles in the view.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- app/views/articles/index.html.erb --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Articles#index&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;articles.each&lt;/span&gt; &lt;span class="na"&gt;do&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="na"&gt;article&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%=&lt;/span&gt; &lt;span class="na"&gt;article.title&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%=&lt;/span&gt; &lt;span class="na"&gt;article.content&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt; &lt;span class="na"&gt;end&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now launch your local server &lt;code&gt;rails s&lt;/code&gt; and webpack server &lt;code&gt;webpack-dev-server&lt;/code&gt; and see on the homepage the list of 100 articles we just created!&lt;/p&gt;

&lt;p&gt;We're now ready to add a very simple pagination as a second step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-pagination-without-the-infinite-scroll"&gt;
  &lt;/a&gt;
  Adding pagination without the infinite scroll
&lt;/h2&gt;

&lt;p&gt;For the pagination, we will use a very simple gem created by the Basecamp team called &lt;a href="https://github.com/basecamp/geared_pagination"&gt;geared pagination&lt;/a&gt;. It is very small (less than 50 commits at the time I write this article) and very well written.&lt;/p&gt;

&lt;p&gt;Let's add the gem to our Gemfile and install it. Don't forget to restart your server after that!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bundle add geared_pagination
bundle &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the gem is very easy, we just have to use the &lt;code&gt;set_page_and_extract_portion_from&lt;/code&gt; method in the controller like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/articles_controller.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticlesController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;
    &lt;span class="c1"&gt;# Note that we specify that we want 10 articles per page here with the&lt;/span&gt;
    &lt;span class="c1"&gt;# `per_page` option&lt;/span&gt;
    &lt;span class="vi"&gt;@articles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;set_page_and_extract_portion_from&lt;/span&gt; &lt;span class="no"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;per_page: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the view, we simply have to add the pagination logic at the end of the page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- app/views/articles/index.html.erb --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Articles#index&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;articles.each&lt;/span&gt; &lt;span class="na"&gt;do&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="na"&gt;article&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%=&lt;/span&gt; &lt;span class="na"&gt;article.title&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%=&lt;/span&gt; &lt;span class="na"&gt;article.content&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt; &lt;span class="na"&gt;end&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt; &lt;span class="na"&gt;unless&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;page.last&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%=&lt;/span&gt; &lt;span class="na"&gt;link_to&lt;/span&gt; &lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="na"&gt;Next&lt;/span&gt; &lt;span class="na"&gt;page&lt;/span&gt;&lt;span class="err"&gt;",&lt;/span&gt; &lt;span class="na"&gt;root_path&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;page:&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;page.next_param&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt; &lt;span class="na"&gt;end&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The pagination works! Click on the next page link to see the page changing. But that's not what we want! What we want is an infinite scroll and that's the most interesting part of this article!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-the-infinite-scroll-pagination-with-stimulus"&gt;
  &lt;/a&gt;
  Adding the infinite scroll pagination with Stimulus
&lt;/h2&gt;

&lt;p&gt;The infinite scroll will work as follow:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Every time the viewport intersect the hidden next page link, we will trigger an AJAX request to get the additional articles&lt;/li&gt;
&lt;li&gt;We will then append those articles to the list and replace the current next page link with the next one&lt;/li&gt;
&lt;li&gt;We will then repeat the process until we reach the last page!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Are you ready? Let's go!&lt;/p&gt;

&lt;p&gt;First, let's create a pagination controller with Stimulus and connect it to our articles index page.&lt;/p&gt;

&lt;p&gt;Let's add a &lt;code&gt;nextPageLink&lt;/code&gt; target and log it in the console when the controller initialized.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app/javascript/controllers/pagination_controller.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stimulus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;targets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nextPageLink&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="nx"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextPageLinkTarget&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To make it work, we also need to update our HTML by adding &lt;code&gt;data-controller="pagination"&lt;/code&gt; to the articles list and &lt;code&gt;data-pagination-target="nextPageLink"&lt;/code&gt; to the next page link. Our index code now looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- app/views/articles/index.html.erb --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-controller=&lt;/span&gt;&lt;span class="s"&gt;"pagination"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;articles.each&lt;/span&gt; &lt;span class="na"&gt;do&lt;/span&gt; &lt;span class="err"&gt;|&lt;/span&gt;&lt;span class="na"&gt;article&lt;/span&gt;&lt;span class="err"&gt;|&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%=&lt;/span&gt; &lt;span class="na"&gt;article.title&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%=&lt;/span&gt; &lt;span class="na"&gt;article.content&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt; &lt;span class="na"&gt;end&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt; &lt;span class="na"&gt;unless&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;page.last&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%=&lt;/span&gt; &lt;span class="na"&gt;link_to&lt;/span&gt; &lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="na"&gt;Next&lt;/span&gt; &lt;span class="na"&gt;page&lt;/span&gt;&lt;span class="err"&gt;",&lt;/span&gt;
                &lt;span class="na"&gt;root_path&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;page:&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;page.next_param&lt;/span&gt;&lt;span class="err"&gt;),&lt;/span&gt;
                &lt;span class="na"&gt;data:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="na"&gt;pagination_target:&lt;/span&gt; &lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="na"&gt;nextPageLink&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt; &lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt; &lt;span class="na"&gt;end&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Refresh your page and you should now see the next page link logged into your console.&lt;/p&gt;

&lt;p&gt;Now that everything is wired correctly, we are ready to add our feature. The first thing we are going to do, is to &lt;code&gt;console.log("intersection")&lt;/code&gt; when the viewport intersects the next page link.&lt;/p&gt;

&lt;p&gt;How do you do this?&lt;/p&gt;

&lt;p&gt;With a Javascript object called &lt;code&gt;IntersecionObserver&lt;/code&gt;! The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"&gt;Intersection Observer API&lt;/a&gt; provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's viewport.&lt;/p&gt;

&lt;p&gt;Let's add this in our Stimulus controller:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app/javascript/controllers/pagination_controller.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stimulus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;targets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nextPageLink&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="nx"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observeNextPageLink&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// private&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;observeNextPageLink&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasNextPageLinkTarget&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;nextIntersection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextPageLinkTarget&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;intersection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nextIntersection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;targetElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;targetElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wow! That's the most complicated part of the feature! Let's break it down.&lt;/p&gt;

&lt;p&gt;First, when the Stimulus controller is initialized, we start observing the next page link.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observeNextPageLink&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If there is no next page link on the page, then the controller does nothing. However, if there is a next page link, we'll wait for the intersection and then &lt;code&gt;console.log("intersection")&lt;/code&gt;. Note that this process is asynchronous: we don't know when the next intersection is going to happen!&lt;/p&gt;

&lt;p&gt;How do we do asynchronous Javascript? With async / await and promises!&lt;/p&gt;

&lt;p&gt;The function &lt;code&gt;observeNextPageLink&lt;/code&gt; is asynchronous for this reason. See how it reads like plain English now? Wait for the next intersection with the next page link and then &lt;code&gt;console.log("intersection")&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;observeNextPageLink&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasNextPageLinkTarget&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;nextIntersection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextPageLinkTarget&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;intersection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Last but not least, the &lt;code&gt;nextIntersection&lt;/code&gt; function has to return a &lt;code&gt;Promise&lt;/code&gt; that will resolve when the next page link intersects the viewport. This can be done easily by creating a new &lt;code&gt;IntersectionObserver&lt;/code&gt; that will observe the next page link.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nextIntersection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;targetElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;targetElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that our mechanic is in place, we need to replace our &lt;code&gt;console.log("intersection")&lt;/code&gt; with something useful. Instead of logging "intersection" in the console, we will fetch the articles from the next page and append them to the list of articles we already have!&lt;/p&gt;

&lt;p&gt;To do AJAX requests with Rails, we will use the brand new &lt;a href="https://github.com/rails/request.js"&gt;rails/request.js&lt;/a&gt; library that was created in June 2021. This library is a wrapper around &lt;code&gt;fetch&lt;/code&gt; that you'll normally use to do AJAX requests in Javascript. It integrates nicely with Rails, for example, it automatically sets the &lt;code&gt;X-CSRF-Token&lt;/code&gt; header that is required by Rails applications, this is why we'll use it!&lt;/p&gt;

&lt;p&gt;Let's add it to our package.json using yarn:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add @rails/request.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's import the &lt;code&gt;get&lt;/code&gt; function in our Pagination Controller and replace the &lt;code&gt;console.log("intersection")&lt;/code&gt; with the actual logic. The code now looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stimulus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@rails/request.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;targets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nextPageLink&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="nx"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observeNextPageLink&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;observeNextPageLink&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasNextPageLinkTarget&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;nextIntersection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextPageLinkTarget&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getNextPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;getNextPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextPageLinkTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// AJAX request&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;DOMParser&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;parseFromString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text/html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nextPageHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`[data-controller~=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;]`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextPageLinkTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nextPageHTML&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nextIntersection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;targetElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;IntersectionObserver&lt;/span&gt;&lt;span class="p"&gt;(([&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isIntersecting&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;observe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;targetElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only changes here are the &lt;code&gt;import { get } from "@rails/request.js"&lt;/code&gt; that we use to make a get AJAX request to our server and the &lt;code&gt;console.log("intersection")&lt;/code&gt; that was replaced by &lt;code&gt;this.getNextPage()&lt;/code&gt;. Let's understand this last method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;getNextPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextPageLinkTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// AJAX request&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;htmlString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;DOMParser&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;parseFromString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;htmlString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text/html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nextPageHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`[data-controller=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;]`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;outerHTML&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextPageLinkTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nextPageHTML&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, we issue a get request to the server, wait for the response and store it in the &lt;code&gt;response&lt;/code&gt; variable. Then we extract the text from the response and store it in the &lt;code&gt;htmlString&lt;/code&gt; variable. As we want to use querySelector on this &lt;code&gt;htmlString&lt;/code&gt;, we first need to parse it to make it an HTML document with &lt;code&gt;DOMParser&lt;/code&gt;. We then store this document in the &lt;code&gt;doc&lt;/code&gt; variable. We then extract the next page articles and the next page link from this document and append them to our articles list by replacing the current next page link.&lt;/p&gt;

&lt;p&gt;Our infinite scroll is now working, but only for one iteration! We need to make it recursive. Every time new articles are added to the page, a new next page link is also added! We need to observe this new next page link to be able to have a read &lt;em&gt;infinite&lt;/em&gt; scroll!&lt;/p&gt;

&lt;p&gt;Let's add this recursion!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is the final controller:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stimulus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@rails/request.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Controller&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;targets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nextPageLink&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="nx"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observeNextPageLink&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;observeNextPageLink&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasNextPageLinkTarget&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;nextIntersection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextPageLinkTarget&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getNextPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Wait for 500 ms&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observeNextPageLink&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// repeat the whole process!&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;getNextPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextPageLinkTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;DOMParser&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;parseFromString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text/html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nextPageHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`[data-controller~=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;identifier&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;]`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextPageLinkTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nextPageHTML&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nextIntersection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;targetElement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Same as before&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we only changed the two last lines of the &lt;code&gt;observeNextPageLink&lt;/code&gt; function by waiting 500ms to avoid scrolling too fast, and then, we observe the new next page link if there is one, thus repeating the whole process we just went through!&lt;/p&gt;

&lt;p&gt;The last think you can do is hide the next page link on the page to make it a real infinite scroll.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt; &lt;span class="na"&gt;unless&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;page.last&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%=&lt;/span&gt; &lt;span class="na"&gt;link_to&lt;/span&gt; &lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="na"&gt;Next&lt;/span&gt; &lt;span class="na"&gt;page&lt;/span&gt;&lt;span class="err"&gt;",&lt;/span&gt;
              &lt;span class="na"&gt;root_path&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;page:&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;page.next_param&lt;/span&gt;&lt;span class="err"&gt;),&lt;/span&gt;
              &lt;span class="na"&gt;data:&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="na"&gt;pagination_target:&lt;/span&gt; &lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="na"&gt;nextPageLink&lt;/span&gt;&lt;span class="err"&gt;"&lt;/span&gt; &lt;span class="err"&gt;},&lt;/span&gt;
              &lt;span class="na"&gt;style:&lt;/span&gt; &lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="na"&gt;visibility:&lt;/span&gt; &lt;span class="na"&gt;hidden&lt;/span&gt;&lt;span class="err"&gt;;"&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%&lt;/span&gt; &lt;span class="na"&gt;end&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You did it, you built a real infinite scroll with Rails and Stimulus!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#takeaways-and-useful-resources"&gt;
  &lt;/a&gt;
  Takeaways and useful resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/rails/request.js"&gt;rails/request.js&lt;/a&gt; is a library that provides a wrapper around fetch. It is very useful when working with Rails applications because it sets a few headers under the hood for you that are required by your Rails application.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/basecamp/geared_pagination"&gt;basecamp/gearder_pagination&lt;/a&gt; is a very small pagination gem (less than 50 commits). You should read the code if you want to learn a few tricks in Ruby / Rails!&lt;/li&gt;
&lt;li&gt;When working with asynchronous actions in Javascript, you should work with promises and async / await. The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"&gt;Intersection Observer API&lt;/a&gt; can help you trigger actions based on the viewport intersecting other elements on the page.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;This article is heavily inspired by &lt;a href="https://www.hey.com/index.html"&gt;hey.com&lt;/a&gt;'s infinite scroll. Thanks to the Basecamp team for &lt;a href="https://m.signalvnoise.com/paying-tribute-to-the-web-with-view-source/"&gt;leaving the source maps open&lt;/a&gt;. It was really helpful when I had to build a similar feature!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#did-you-like-this-article"&gt;
  &lt;/a&gt;
  Did you like this article?
&lt;/h2&gt;

&lt;p&gt;You can &lt;a href="https://twitter.com/alexandre_ruban"&gt;follow me on Twitter&lt;/a&gt; to get notified when I publish new articles. I sometimes do when I work on interesting features like this infinite scroll!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>ruby</category>
      <category>rails</category>
      <category>stimulus</category>
    </item>
    <item>
      <title>Naming (in code) - The ultimate guide and reference</title>
      <author>Spyros Argalias</author>
      <pubDate>Mon, 21 Jun 2021 15:04:27 +0000</pubDate>
      <link>https://dev.to/sargalias/naming-in-code-the-ultimate-guide-and-reference-1hhe</link>
      <guid>https://dev.to/sargalias/naming-in-code-the-ultimate-guide-and-reference-1hhe</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/MsqQCfq5xNY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://programmingduck.com/articles/programming-principles"&gt;Programming principles&lt;/a&gt; tell us that naming in code is important. This article aims to be a complete learner's guide for naming in code. It also aims to be a reference about naming that you can refer to in the future if you need to.&lt;/p&gt;

&lt;p&gt;For certain things, such as naming methods, there are different naming conventions. We'll mention a few so that you're aware of how they work and the options you can choose from.&lt;/p&gt;

&lt;p&gt;Overall, we'll examine:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;the motivation for wanting good names&lt;/li&gt;
&lt;li&gt;general naming tips for all code&lt;/li&gt;
&lt;li&gt;established naming conventions for specific things such as variables and classes&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#motivation-for-good-names"&gt;
  &lt;/a&gt;
  Motivation for good names
&lt;/h2&gt;

&lt;p&gt;The motivation for good names comes from clean code and programming principles. Code should be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;immediately obvious and easy to understand&lt;/li&gt;
&lt;li&gt;easy to change&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Being easy to understand helps because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;code that's easy to understand will be faster to understand. This means that you can work faster. You'll spend less time trying to understand old code and more time writing new code.&lt;/li&gt;
&lt;li&gt;code will be possible to understand. In comparison, if some code is difficult to understand, you may not understand it even after spending a long time reading it. Someone who's less experienced may have even worse luck. Additionally, you may misunderstand how the code works, especially if you're not fully paying attention that day. Misunderstanding code makes it very easy to create bugs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Good names help with both cases.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-good-names-make-code-faster-to-understand"&gt;
  &lt;/a&gt;
  How good names make code faster to understand
&lt;/h3&gt;

&lt;p&gt;If something is well-named, then you don't need further details to understand it. This saves you time.&lt;/p&gt;

&lt;p&gt;For example, consider:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a function named &lt;code&gt;printHelloToTheScreen&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;a function named &lt;code&gt;multiplyBy2&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;a constant named &lt;code&gt;PI&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;a constant named &lt;code&gt;MAXIMUM_ALLOWED_LOGIN_ATTEMPTS&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;a static class or module named &lt;code&gt;Math&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;a variable named &lt;code&gt;circumference&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;a variable named &lt;code&gt;userInfo&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In a codebase, you would have a pretty good idea of what those do just from the name.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-good-names-make-code-easier-to-understand"&gt;
  &lt;/a&gt;
  How good names make code easier to understand
&lt;/h3&gt;

&lt;p&gt;When reading code, you have to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;read (parse) what it does&lt;/li&gt;
&lt;li&gt;understand why it does it, or rather, understand what it's trying to do conceptually&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For example, it's not enough to think "this code removes initial whitespace from the string, then it sends a network request". Instead, you have to understand "this code formats the username and then sends a password reset request".&lt;/p&gt;

&lt;p&gt;Here's a code example that's difficult to understand:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What's the &lt;code&gt;8&lt;/code&gt; there for? What's &lt;code&gt;b&lt;/code&gt;? Why does it return a minimum of &lt;code&gt;1&lt;/code&gt;? What's the purpose of this function?&lt;/p&gt;

&lt;p&gt;If you're trying to do something such as change the area, you don't know if this function is relevant or not. Even if you suspect it is, you don't know what it does or why.&lt;/p&gt;

&lt;p&gt;Something like this would be much better:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;calculateRemainingArea&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reductionFactor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;area&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;remainingArea&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;area&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;AREA_REDUCTION_RESISTANCE&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;reductionFactor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;remainingArea&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;MINIMUM_AREA&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, good names help, because &lt;strong&gt;they provide meaning&lt;/strong&gt;. They help you understand what the code does and why it does it.&lt;/p&gt;

&lt;p&gt;To get the benefit, all you have to do is give a good name to the thing.&lt;/p&gt;

&lt;p&gt;As another example, someone may not understand &lt;code&gt;PI * a ** 2&lt;/code&gt;. They may think "&lt;code&gt;PI&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt;, power of 2... What the heck is that??". To make it easier, all you have to do is replace that line with &lt;code&gt;const circleArea = PI * radius ** 2&lt;/code&gt;. It helps a lot.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j-IkFGuI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0dqm30mgtmw2sx6go4d.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j-IkFGuI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0dqm30mgtmw2sx6go4d.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#general-naming-tips-for-code"&gt;
  &lt;/a&gt;
  General naming tips for code
&lt;/h2&gt;

&lt;p&gt;In short, a good name is something that immediately tells you what something is or does. It's not surprising. It doesn't take effort to understand it. You understand it without thinking about it.&lt;/p&gt;

&lt;p&gt;A bad name is something that you read and you wonder "what's that", or "what does that do?". Something that requires you to think more.&lt;/p&gt;

&lt;p&gt;When writing names, they should be understandable by someone that's never seen this code before. They need to make sense, be consistent and be sufficiently descriptive.&lt;/p&gt;

&lt;p&gt;Here are some pointers to accomplish this.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#have-clear-naming-conventions"&gt;
  &lt;/a&gt;
  Have clear naming conventions
&lt;/h3&gt;

&lt;p&gt;Your codebase should have clear conventions. This is probably the most important point in this article. If you're already following a convention, it's probably best to stick to it, even if an alternative may be more descriptive.&lt;/p&gt;

&lt;p&gt;Conventions apply consistency. &lt;a href="https://programmingduck.com/articles/programming-principles"&gt;Programming principles&lt;/a&gt; tell us that consistency is very important.&lt;/p&gt;

&lt;p&gt;It allows you to work faster. You can make certain assumptions about how the code works and what certain things mean. Additionally, when thinking of a name for something, the convention may already have a rule for it. This makes things easier.&lt;/p&gt;

&lt;p&gt;Also, not following conventions can cause mistakes. You may assume that a common convention is being followed in the codebase. If you're wrong, then you may have the wrong idea about how some code works. At that point, it's very easy to create bugs.&lt;/p&gt;

&lt;p&gt;Ideally, you should follow conventions that already exist in your programming language or framework. This makes things easier for new developers to the company. Some examples are the &lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/naming-guidelines"&gt;.NET naming guidelines&lt;/a&gt; and &lt;a href="https://github.com/airbnb/javascript"&gt;Airbnb JavaScript style guide&lt;/a&gt;. Otherwise, you can also create your own custom conventions for your project or company.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prefer-descriptive-names"&gt;
  &lt;/a&gt;
  Prefer descriptive names
&lt;/h3&gt;

&lt;p&gt;Always consider, will the next person who looks at this name understand it easily?&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#use-full-words"&gt;
  &lt;/a&gt;
  Use full words
&lt;/h4&gt;

&lt;p&gt;Generally, full words are easier to understand. For example &lt;code&gt;calculateArea&lt;/code&gt; or &lt;code&gt;createWindow&lt;/code&gt;. Abbreviated words may be harder to understand. In general, avoid names like &lt;code&gt;calcArea&lt;/code&gt; or &lt;code&gt;cWin&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#avoid-very-short-variable-names"&gt;
  &lt;/a&gt;
  Avoid very short variable names
&lt;/h4&gt;

&lt;p&gt;In particular, avoid single-letter or very short variables, such as &lt;code&gt;d&lt;/code&gt;. It could mean anything: the &lt;code&gt;document&lt;/code&gt;, &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;date&lt;/code&gt;, or &lt;code&gt;days&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The exception to this is when the name is used in a very small scope and what it represents is immediately obvious. In this case, it's easy to look one or two lines up and see where it was defined. Here's a code example using the variable &lt;code&gt;e&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sendData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* sends a network request */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleFormSubmission&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;sendData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, the variable &lt;code&gt;e&lt;/code&gt; represents the event object. We know this because the name &lt;code&gt;handleFormSubmission&lt;/code&gt; and the function signature represent an event handler. &lt;code&gt;e&lt;/code&gt; is only used one line under where it is defined, so it's still easy to work with.&lt;/p&gt;

&lt;p&gt;Nevertheless, I would still personally use &lt;code&gt;event&lt;/code&gt;. I consider readability more important than minor saving of keystrokes like that.&lt;/p&gt;

&lt;p&gt;Another acceptable example is using &lt;code&gt;i&lt;/code&gt; in for loops and such. That's a convention that everyone understands.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#acronyms"&gt;
  &lt;/a&gt;
  Acronyms
&lt;/h4&gt;

&lt;p&gt;If an acronym is very common, then it's okay to use it. Some examples are the acronyms HTML, UI, IO, OS, JSON, XML, HTTP.&lt;/p&gt;

&lt;p&gt;If an acronym is uncommon, then prefer the fully expanded name. If in doubt, you should probably use the full version.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conciseness-matters"&gt;
  &lt;/a&gt;
  Conciseness matters
&lt;/h3&gt;

&lt;p&gt;Names that are sufficiently descriptive come first. However, that doesn't mean that you need super long names.&lt;/p&gt;

&lt;p&gt;Super long names, such as a variable named &lt;code&gt;integerNumberOfEnginesInObject&lt;/code&gt; are difficult to work with. &lt;code&gt;engineCount&lt;/code&gt; would be sufficient.&lt;/p&gt;

&lt;p&gt;In general, if you can have the same clarity with a shorter name, use the shorter name.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#consider-the-context"&gt;
  &lt;/a&gt;
  Consider the context
&lt;/h3&gt;

&lt;p&gt;The name of the surrounding context can provide useful clues for the purpose of something. This means that sometimes, you can get away with using shorter names.&lt;/p&gt;

&lt;p&gt;For example, if you have a class called &lt;code&gt;Users&lt;/code&gt;, then the method for creating a new user can be called &lt;code&gt;create&lt;/code&gt;. The usage of it would be something like &lt;code&gt;users.create()&lt;/code&gt; (where &lt;code&gt;users&lt;/code&gt; is an instance of &lt;code&gt;Users&lt;/code&gt;). That's sufficiently descriptive. You don't need to call the method &lt;code&gt;createUser&lt;/code&gt; in this case.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#casing"&gt;
  &lt;/a&gt;
  Casing
&lt;/h3&gt;

&lt;p&gt;The prevalent casings in programming (excluding HTML and CSS) are pascal case, camel case and snake case. The one you use depends on the conventions for your programming language or framework.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#general-format-of-each-casing"&gt;
  &lt;/a&gt;
  General format of each casing
&lt;/h4&gt;

&lt;p&gt;Snake casing is lower cased and uses underscores to separate words. For example &lt;code&gt;this_is_snake_case&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In pascal casing, every word begins with a capital letter. For example &lt;code&gt;ThisIsPascalCase&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Camel casing is similar to pascal casing, except that the first word begins with a lowercase letter. For example &lt;code&gt;thisIsCamelCase&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#casing-for-acronyms"&gt;
  &lt;/a&gt;
  Casing for acronyms
&lt;/h4&gt;

&lt;p&gt;For acronyms, the conventions vary.&lt;/p&gt;

&lt;p&gt;On the front end, it seems that acronyms are always fully capitalised, regardless of length. Some examples are &lt;code&gt;performance.toJSON()&lt;/code&gt;, &lt;code&gt;XMLDocument&lt;/code&gt;, &lt;code&gt;HTMLCollection&lt;/code&gt; and &lt;code&gt;DOMString&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, in some other languages, such as the .NET languages, the convention is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if an acronym is only two letters long, the second letter should have the same casing (upper or lower case) as the first one. For example, &lt;code&gt;UIInput&lt;/code&gt; (pascal case), &lt;code&gt;uiInput&lt;/code&gt; (camel case) and &lt;code&gt;fooUIInput&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;if an acronym is three letters or longer, only the first letter should be capitalised if necessary. For example &lt;code&gt;JsonFoo&lt;/code&gt; (pascal case), &lt;code&gt;jsonFoo&lt;/code&gt; (camel case).&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#capitalisation-for-compound-words"&gt;
  &lt;/a&gt;
  Capitalisation for compound words
&lt;/h4&gt;

&lt;p&gt;It's a convention to treat compound words as one word in terms of capitalisation. For example, use &lt;code&gt;callback&lt;/code&gt; and &lt;code&gt;endpoint&lt;/code&gt; instead of &lt;code&gt;callBack&lt;/code&gt; and &lt;code&gt;endPoint&lt;/code&gt;. You can find a thorough list of common compound words, used in programming, on the &lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/capitalization-conventions"&gt;.NET naming guidelines on capitalisation&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prefer-semantic-naming"&gt;
  &lt;/a&gt;
  Prefer semantic naming
&lt;/h3&gt;

&lt;p&gt;Semantic naming means to name something after its purpose or meaning. In order of priority, this means:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;what the purpose of it is, or what it does&lt;/li&gt;
&lt;li&gt;how it does it&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As a bonus, it also results in code that is less likely to change in the future.&lt;/p&gt;

&lt;p&gt;When naming things, consider: what's the most important thing about the thing you're naming? What's the most suitable name for someone else to understand it conceptually?&lt;/p&gt;

&lt;p&gt;Usually, users care more about what something is doing, rather than how it's doing it. Although, sometimes, it's the "how" that's the most important.&lt;/p&gt;

&lt;p&gt;Here are some examples of semantic naming.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#example-with-a-variable-name"&gt;
  &lt;/a&gt;
  Example with a variable name
&lt;/h4&gt;

&lt;p&gt;If you have a variable that holds a collection of users, the important part is that it contains users. Whether it's a list or a map is less important. Not to mention that your IDE and type declarations provide that information anyway.&lt;/p&gt;

&lt;p&gt;Therefore, the name:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;users&lt;/code&gt; would be suitable&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;userList&lt;/code&gt; is less preferable. The "list" part is less important than the &lt;code&gt;users&lt;/code&gt; part. Also, if you change the data structure in the future you'll have to update the variable name.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;userCollection&lt;/code&gt; is also less preferable, because the "collection" part is less important than the "user" part. However, at least you won't have to update the variable name if you change the data structure in the future.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#example-with-interfaces-and-implementations"&gt;
  &lt;/a&gt;
  Example with interfaces and implementations
&lt;/h4&gt;

&lt;p&gt;In OOP code, you tend to have interfaces with potentially multiple implementations. An interface may be called something semantic and generic, such as &lt;code&gt;Sorter&lt;/code&gt;, for a sorting algorithm. That's the significant thing about it, the fact that it sorts. The how isn't important at the interface level.&lt;/p&gt;

&lt;p&gt;The different implementations can be called after the sorting algorithm they implement. That's the important thing about them and the only thing that separates them from one another. It's the information a user of that specific class would want. For example &lt;code&gt;BubbleSort&lt;/code&gt;, &lt;code&gt;MergeSort&lt;/code&gt;, &lt;code&gt;Quicksort&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#example-with-a-method-for-sorting"&gt;
  &lt;/a&gt;
  Example with a method for sorting
&lt;/h4&gt;

&lt;p&gt;Imagine that you have a class containing a collection of something. You also have a method for sorting it, say, alphabetically.&lt;/p&gt;

&lt;p&gt;If you only have one sorting method, then it would be preferable to name it &lt;code&gt;sort&lt;/code&gt;. A name such as &lt;code&gt;sortWithQuicksort&lt;/code&gt; or &lt;code&gt;quicksort&lt;/code&gt; would be unnecessary information that the user doesn't care about. If you think about it, the caller of the code wants to sort. They aren't particularly interested in the specific algorithm your class uses. (The only exception is if your class is an actual bottleneck to performance or something, but that's a different topic.)&lt;/p&gt;

&lt;p&gt;Additionally, in the future, you may change the sorting algorithm that the class uses to merge sort. In that case, the name &lt;code&gt;sortWithQuicksort&lt;/code&gt; wouldn't make sense any more.&lt;/p&gt;

&lt;p&gt;The solution is to name your public method &lt;code&gt;sort&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The fact that you're using quicksort is still important. Developers working on the implementation of the class would want to know that. Some options for that are to have a private method named &lt;code&gt;quicksort&lt;/code&gt;, or import and use a &lt;code&gt;quicksort&lt;/code&gt; function from somewhere else in the codebase.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pseudocode&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Users&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// the public method with a name that's useful to callers&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="nf"&gt;Sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;_quicksort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// the private method with a name that's userful to someone working on this class&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;_quicksort&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* implementation of quicksort */&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#example-with-front-end-css"&gt;
  &lt;/a&gt;
  Example with front end CSS
&lt;/h4&gt;

&lt;p&gt;In front end CSS, there are a few approaches. The approach you choose decides what's important about the name of your class.&lt;/p&gt;

&lt;p&gt;When using the BEM naming convention, the important thing is the purpose of the element, not the styling. For example, you would use the CSS class &lt;code&gt;page-heading&lt;/code&gt; instead of &lt;code&gt;large-heading-red&lt;/code&gt;. That's because, tomorrow, the styling of the page heading may change. At that point, the non-semantic name won't make sense anymore, but the semantic name will.&lt;/p&gt;

&lt;p&gt;If you're using a UI component library, then the styling of the component is more important than the purpose of the component. For example &lt;code&gt;button-primary&lt;/code&gt; instead of &lt;code&gt;add-to-cart-button&lt;/code&gt;. That's because classes like &lt;code&gt;button-primary&lt;/code&gt; are the main ones you'll be working with throughout your code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-tips-from-uncle-bob"&gt;
  &lt;/a&gt;
  Other tips from Uncle Bob
&lt;/h3&gt;

&lt;p&gt;Some tips that are mentioned in &lt;a href="https://www.oreilly.com/library/view/clean-code-a/9780136083238/"&gt;Uncle Bob's book Clean Code&lt;/a&gt; are to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;make meaningful distinctions. Avoid variables that seem similar or the same, such as &lt;code&gt;accountInfo&lt;/code&gt; or &lt;code&gt;accountData&lt;/code&gt;. A user of that code won't be able to tell the difference.&lt;/li&gt;
&lt;li&gt;use pronounceable names. Names should be easy to read out loud. Some examples to avoid are names such as &lt;code&gt;genymdhms&lt;/code&gt; and &lt;code&gt;modymdhms&lt;/code&gt;. Better names would be &lt;code&gt;generationTimestamp&lt;/code&gt; and &lt;code&gt;modificationTimestamp&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;use searchable names. Names should be easy to search using your code editor. Essentially, avoid names that are one or two letters long, as searching for them will return too many matches.&lt;/li&gt;
&lt;li&gt;avoid using cute / offensive words. Avoid names such as &lt;code&gt;whack()&lt;/code&gt; and &lt;code&gt;seeYouLaterFiles()&lt;/code&gt;. Be professional and consistent.&lt;/li&gt;
&lt;li&gt;pick one word per concept. For example, don't mix the words "fetch", "get" and "retrieve" for the same kind of operation throughout your codebase. Pick one of them and use it consistently.&lt;/li&gt;
&lt;li&gt;avoid puns. Avoid using the same word for different concepts. For example, if in one class &lt;code&gt;add()&lt;/code&gt; adds two numbers, in a different class &lt;code&gt;add()&lt;/code&gt; shouldn't insert into a list.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#other-tips-from-the-net-naming-conventions"&gt;
  &lt;/a&gt;
  Other tips from the .NET naming conventions
&lt;/h3&gt;

&lt;p&gt;.NET makes some additional recommendations. Some of them are specifically for .NET languages. However, you may want to keep them in mind anyway.&lt;/p&gt;

&lt;p&gt;The recommendations are to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;prefer naturally readable names. For example, use &lt;code&gt;HorizontalAlignment&lt;/code&gt; instead of &lt;code&gt;AlignmentHorizontal&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;avoid using names that conflict with common keywords in other programming languages&lt;/li&gt;
&lt;li&gt;prefer semantic names rather than language specific names. For example, use &lt;code&gt;GetLength&lt;/code&gt; instead of &lt;code&gt;GetInt&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;prefer generic CLR type names instead of language-specific names. For example name a method &lt;code&gt;ToInt64&lt;/code&gt; instead of &lt;code&gt;ToLong&lt;/code&gt;. That's because methods like these may be used in other CLR-compatible languages where the data type &lt;code&gt;long&lt;/code&gt; doesn't exist. Therefore, that name won't make sense in those languages. However, &lt;code&gt;Int64&lt;/code&gt; exists and makes sense for all CLR languages.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vBLu-7Wa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9izke4x86sqotixwv2ah.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vBLu-7Wa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9izke4x86sqotixwv2ah.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#naming-conventions-for-specific-use-cases"&gt;
  &lt;/a&gt;
  Naming conventions for specific use cases
&lt;/h2&gt;

&lt;p&gt;Here are some common naming conventions for things such as variables, functions, classes, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h3&gt;

&lt;p&gt;Variables are just names or labels for values and objects. Some general conventions for them are that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;they should be nouns. For example &lt;code&gt;car&lt;/code&gt;, &lt;code&gt;user&lt;/code&gt;, &lt;code&gt;userLocation&lt;/code&gt;, &lt;code&gt;student&lt;/code&gt;, &lt;code&gt;result&lt;/code&gt;, &lt;code&gt;area&lt;/code&gt;, &lt;code&gt;player&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;they generally use camel case or snake case, depending on your programming language&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The rules change a bit for constants and variables holding Boolean values.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#constants"&gt;
  &lt;/a&gt;
  Constants
&lt;/h4&gt;

&lt;p&gt;Some programming languages write constants fully capitalised and with snake case. This includes JavaScript, Python and Java. Some example constants are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Number.EPSILON&lt;/li&gt;
&lt;li&gt;Math.PI&lt;/li&gt;
&lt;li&gt;NUMBER_OF_LIVES&lt;/li&gt;
&lt;li&gt;MAX_ATTEMPTS_BEFORE_LOCKOUT&lt;/li&gt;
&lt;li&gt;SOME_SPECIAL_VALUE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here, "constant" refers to special values. These are values that don't depend on runtime. They could easily be placed in a configuration file, away from your application code.&lt;/p&gt;

&lt;p&gt;"Constant" doesn't refer to a normal local variable that just happens to be immutable. Those follow the same conventions as normal variables.&lt;/p&gt;

&lt;p&gt;Here are some examples of "constants" and "normal variables that just happen to be immutable":&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;final MAX_ATTEMPS_BEFORE_LOCKOUT = 5&lt;/code&gt; (this could be in a configuration file, it's a special constant)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;final float result = SomeClass.factorial(someNumber)&lt;/code&gt; (this is just a local variable that happens to be immutable. It varies at runtime depending on &lt;code&gt;someNumber&lt;/code&gt;. It can't be placed in a configuration file)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;const URL_ENDPOINT = '/ajax/foo'&lt;/code&gt; (this could be in a configuration file, it's a special constant)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;const filteredArray = array.filter(a =&amp;gt; !a)&lt;/code&gt; (this is just a local variable that happens to be immutable. It varies at runtime depending on &lt;code&gt;array&lt;/code&gt;. It can't be placed in a configuration file)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#booleans"&gt;
  &lt;/a&gt;
  Booleans
&lt;/h4&gt;

&lt;p&gt;For variables that have Boolean values, the convention is to phrase them as a question. Start them with a predicate such as "is", "has", "had" and "can". These clearly denote that the variable holds a Boolean.&lt;/p&gt;

&lt;p&gt;Some example Boolean variables are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;isValid&lt;/li&gt;
&lt;li&gt;isComplete&lt;/li&gt;
&lt;li&gt;isActive&lt;/li&gt;
&lt;li&gt;isDisabled&lt;/li&gt;
&lt;li&gt;isLoading&lt;/li&gt;
&lt;li&gt;hasRan&lt;/li&gt;
&lt;li&gt;hasArrived&lt;/li&gt;
&lt;li&gt;hasDescendants&lt;/li&gt;
&lt;li&gt;canTakeDamage&lt;/li&gt;
&lt;li&gt;canDrive&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition to being readable standalone, they read nicely in conditional statements:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hasLoaded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;doSomethingElse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In comparison, if you don't use a predicate, you would use a name such as &lt;code&gt;complete&lt;/code&gt;. This is both a verb and an adjective. It can denote a number of things. It could be a function that you run to complete something, or a variable that holds things that have already completed, or a Boolean that states whether something has completed or not, or an event name. What it represents is more ambiguous, so prefer predicates instead.&lt;/p&gt;

&lt;p&gt;A verb like &lt;code&gt;completing&lt;/code&gt; is slightly better. It can't denote a function, because the "ing" in "completing" means that something is already happening. It's not something that you can start running now (like a function call). However, it can still be any of the other options. Overall, it's still preferable to use predicates.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h3&gt;

&lt;p&gt;Functions are units of code that do something. Conventions for function names are that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;they should be verbs&lt;/li&gt;
&lt;li&gt;they generally use camel case or snake case, depending on your programming language&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some example function names are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;createReport&lt;/li&gt;
&lt;li&gt;createTodo&lt;/li&gt;
&lt;li&gt;getX&lt;/li&gt;
&lt;li&gt;divide&lt;/li&gt;
&lt;li&gt;sendRequest&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For functions that return a Boolean, a common convention is for them to start with a predicate. This is similar to variables that contain Boolean values.&lt;/p&gt;

&lt;p&gt;Some example names for functions that return Booleans are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;isValid&lt;/li&gt;
&lt;li&gt;hasSignedIn&lt;/li&gt;
&lt;li&gt;isSignedIn&lt;/li&gt;
&lt;li&gt;isFormatted&lt;/li&gt;
&lt;li&gt;canDrive&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another convention I've seen is for "transformer" or "converter" functions. These are functions that convert from one thing to another. They usually begin with "to", followed by the type they're converting to.&lt;/p&gt;

&lt;p&gt;Some examples of transformer function names are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;toLowerCase&lt;/li&gt;
&lt;li&gt;toUpperCase&lt;/li&gt;
&lt;li&gt;toArray&lt;/li&gt;
&lt;li&gt;toString&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#classes"&gt;
  &lt;/a&gt;
  Classes
&lt;/h3&gt;

&lt;p&gt;Classes are units of code that contain methods and attributes.&lt;/p&gt;

&lt;p&gt;Some conventions for classes are that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;they use Pascal case&lt;/li&gt;
&lt;li&gt;they should be nouns (or noun phrases)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some example class names are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Observable&lt;/li&gt;
&lt;li&gt;Student&lt;/li&gt;
&lt;li&gt;Printer&lt;/li&gt;
&lt;li&gt;Player&lt;/li&gt;
&lt;li&gt;ImageSprite&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#general-property-names"&gt;
  &lt;/a&gt;
  General property names
&lt;/h4&gt;

&lt;p&gt;In general, attributes are named similarly to variables. Methods are named similarly to functions.&lt;/p&gt;

&lt;p&gt;However, as mentioned earlier, the name of the class provides some context.&lt;/p&gt;

&lt;p&gt;This means that you may be able to use a less specific name for a method / attribute than you would use for the equivalent function / variable.&lt;/p&gt;

&lt;p&gt;For example, inside a class &lt;code&gt;Users&lt;/code&gt;, you may have a method named &lt;code&gt;create&lt;/code&gt;. The usage of it would be something like &lt;code&gt;users.create()&lt;/code&gt; (where &lt;code&gt;users&lt;/code&gt; is an instance of &lt;code&gt;Users&lt;/code&gt;), which is sufficiently descriptive.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#casing-and-prefixing-for-properties"&gt;
  &lt;/a&gt;
  Casing and prefixing for properties
&lt;/h4&gt;

&lt;p&gt;In terms of casing and prefixes, different languages and frameworks have different conventions.&lt;/p&gt;

&lt;p&gt;For example, the &lt;a href="https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html"&gt;Java naming conventions&lt;/a&gt; mention that methods and attributes should be camel cased.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP 8 Python naming convention&lt;/a&gt; also mentions camel casing. However, it adds that private properties should be prefixed with an underscore. For example (&lt;code&gt;_privateProperty&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/coding-conventions"&gt;C# coding conventions&lt;/a&gt; seem the strictest. They state that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;public properties should be pascal cased (for example &lt;code&gt;PublicMethod&lt;/code&gt; or &lt;code&gt;PublicVariable&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;private or internal properties should be prefixed with underscore and be camel cased (for example &lt;code&gt;private void _privateMethod&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;private or internal static properties should be prefixed with &lt;code&gt;s_&lt;/code&gt; and be camel cased (for example &lt;code&gt;private static foo s_workerQueue&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;private or internal thread properties should be prefixed with &lt;code&gt;t_&lt;/code&gt; and be camel cased (for example &lt;code&gt;private static foo t_timeSpan&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If, for whatever reason, you were creating your own convention, I would personally recommend:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pascal casing for methods and camel casing for attributes (this is the convention used in the Unity game engine). The reason for this is be to differentiate between Boolean attributes (such as &lt;code&gt;isValid&lt;/code&gt;) and methods that return Booleans (such as &lt;code&gt;IsValid(data)&lt;/code&gt;). As a second choice, I would use camel case for methods.&lt;/li&gt;
&lt;li&gt;underscore prefix for non-public properties&lt;/li&gt;
&lt;li&gt;possibly (not sure yet) the &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt; prefixes from C# for the relevant things. As the &lt;a href="https://www.python.org/dev/peps/pep-0020/"&gt;Zen of Python&lt;/a&gt; says "Namespaces are one honking great idea -- let's do more of those!" (I consider prefixes to have a similar effect)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#interfaces"&gt;
  &lt;/a&gt;
  Interfaces
&lt;/h3&gt;

&lt;p&gt;Names for interfaces are similar to class names. They use pascal case and are usually nouns. Sometimes they can be named with an adjective, for example "Readable".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.oreilly.com/library/view/clean-code-a/9780136083238/"&gt;In the book Clean Code&lt;/a&gt;, Uncle Bob recommends avoiding the &lt;code&gt;I&lt;/code&gt; prefix for interfaces. The &lt;a href="https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html"&gt;Java naming conventions&lt;/a&gt; recommend the same. For example &lt;code&gt;interface Foo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The C# coding conventions recommend prefixing interfaces with I. For example &lt;code&gt;interface IFoo&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Personally, I have a minor preference for avoiding the prefix. That's because, as a user of the code, I'm not particularly interested on whether I'm working with an interface or a class.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enums"&gt;
  &lt;/a&gt;
  Enums
&lt;/h3&gt;

&lt;p&gt;The Java convention is to treat enums like classes with constants. This means to name the enum type with pascal case and the fields fully uppercase.&lt;/p&gt;

&lt;p&gt;C# also treats them the same as classes. This means to name both the enum type and the fields using pascal case.&lt;/p&gt;

&lt;p&gt;Personally, I prefer the Java convention because it differentiates between constants and other values.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#events-event-handlers-messaging-systems-and-commands"&gt;
  &lt;/a&gt;
  Events, event handlers, messaging systems and commands
&lt;/h3&gt;

&lt;p&gt;There are a few things to consider regarding events and their relevant functions.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#event-names"&gt;
  &lt;/a&gt;
  Event names
&lt;/h4&gt;

&lt;p&gt;Event names:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;refer to an action&lt;/li&gt;
&lt;li&gt;are normally named using verbs. For example "downloaded", "loaded", "deleted", "damaged", "moved".&lt;/li&gt;
&lt;li&gt;generally use present tense for events that fire before an action starts. For example, before submitting a password reset request, you might fire an event named "passwordResetRequestSubmitting".&lt;/li&gt;
&lt;li&gt;generally use past tense for events that fire after an action completes. For example, after submitting a password reset request, you might fire an event named "passwordResetRequestSubmitted".&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In my experience, these conventions are common across many languages. However, there isn't much official documentation for them. One exception is with &lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/names-of-type-members"&gt;.NET, where they formally state these guidelines&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the actual name of the event, you can use whatever makes sense to you. If your event is created in a class, the class name may provide sufficient context. For example, if you have a class &lt;code&gt;Shape&lt;/code&gt;, you may have an event named &lt;code&gt;areaChanged&lt;/code&gt;. The usage would be something like &lt;code&gt;myShape.areaChanged += someHandler&lt;/code&gt; or &lt;code&gt;myShape.areaChanged.subscribe(someHandler)&lt;/code&gt;. The event name "areaChanged" is sufficiently descriptive in this case.&lt;/p&gt;

&lt;p&gt;In terms of casing, follow the convention in your programming language. C# uses pascal casing for public members (including events). Most other languages use camel casing.&lt;/p&gt;

&lt;p&gt;Some example event names are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fileDownloading / fileDownloaded&lt;/li&gt;
&lt;li&gt;userRegistering / userRegistered&lt;/li&gt;
&lt;li&gt;uiElementXUpdating / uiElementXUpdated&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#event-handlers"&gt;
  &lt;/a&gt;
  Event handlers
&lt;/h4&gt;

&lt;p&gt;For event handler functions, there are a few conventions. In front end, &lt;a href="https://reactjs.org/docs/handling-events.html"&gt;React tends to use the prefix "handle"&lt;/a&gt;. C# recommends the suffix "EventHandler". Other languages may have other conventions.&lt;/p&gt;

&lt;p&gt;Some example names of event handler functions are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;handleUserSubscribed / userSubscribedHandler / UserSubscribedEventHandler&lt;/li&gt;
&lt;li&gt;handleFileDownloaded / fileDownloadedHandler / FileDownloadedEventHandler&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My personal preference is to use the "handle" prefix. This keeps the function a verb, which is the convention for functions.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#on-functions"&gt;
  &lt;/a&gt;
  "On" functions
&lt;/h4&gt;

&lt;p&gt;Functions that exist solely to raise events tend to have the name &lt;code&gt;on&amp;lt;EventName&amp;gt;&lt;/code&gt;. For example "onAreaChanged".&lt;/p&gt;

&lt;p&gt;One case for using these is in classes that may be derived.&lt;/p&gt;

&lt;p&gt;Here's a C# example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;event&lt;/span&gt; &lt;span class="n"&gt;EventHandler&lt;/span&gt; &lt;span class="n"&gt;FileDownloaded&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnFileDownloaded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EventArgs&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;EventHandler&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FileDownloaded&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nf"&gt;FileDownloaded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;OnFileDownloaded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EventArgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Empty&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we have a method named &lt;code&gt;OnFileDownloaded&lt;/code&gt; whose only purpose is to raise the event.&lt;/p&gt;

&lt;p&gt;This convention may work a bit differently in front end, but it still follows the general idea. For example, in React, you can name props something like "onClick" or "onSomeEvent". Event handler functions that you define inside a component can use the "handle" prefix.&lt;/p&gt;

&lt;p&gt;Here's a React example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ParentComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleButtonClicked&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* do something */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ChildComponent&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleButtonClicked&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ChildComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;clicked&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Click&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, each component creates event handler functions prefixed with "handle". The child component has the prop named "onClick". In the child component, the &lt;code&gt;handleClick&lt;/code&gt; function calls the &lt;code&gt;onClick&lt;/code&gt; prop.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#more-global-message-names"&gt;
  &lt;/a&gt;
  More global message names
&lt;/h4&gt;

&lt;p&gt;PubSub (message bus) and analytics have similarities to local events, but they are more global. They span a much larger area of the codebase. The can even span multiple applications (as might be the case for analytics).&lt;/p&gt;

&lt;p&gt;With these, it's important to use more specific names, otherwise you won't know what they refer to.&lt;/p&gt;

&lt;p&gt;A good way to do this is to use namespaces and prefixes, along with specified delimiters.&lt;/p&gt;

&lt;p&gt;For example, with PubSub event names, you can have a namespace for the relevant area of the codebase. The format of the event name can be &lt;code&gt;&amp;lt;areaOfCodebase&amp;gt;/&amp;lt;eventName&amp;gt;&lt;/code&gt;. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ui/themeChanged&lt;/li&gt;
&lt;li&gt;ui/fontSizeChanged&lt;/li&gt;
&lt;li&gt;player/damaged&lt;/li&gt;
&lt;li&gt;player/poweredUp&lt;/li&gt;
&lt;li&gt;user/registering&lt;/li&gt;
&lt;li&gt;user/registered&lt;/li&gt;
&lt;li&gt;user/deleted&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And, as explained on &lt;a href="https://davidwells.io/blog/clean-analytics"&gt;clean analytics by David Wells&lt;/a&gt;, for analytics you could use a format like &lt;code&gt;&amp;lt;Source&amp;gt;:&amp;lt;object&amp;gt;_&amp;lt;actionName&amp;gt;&lt;/code&gt;. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;site:newsletter_subscribed&lt;/li&gt;
&lt;li&gt;app:site_deployed&lt;/li&gt;
&lt;li&gt;cli:user_login&lt;/li&gt;
&lt;li&gt;api:site_created&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are just examples. In your own codebase, you can use as many namespaces as you want. The namespaces can be anything.&lt;/p&gt;

&lt;p&gt;Likewise, the delimiter(s) can be anything you want. Some examples are "/", "::", ":", "_", or even no delimiter.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#commands"&gt;
  &lt;/a&gt;
  Commands
&lt;/h4&gt;

&lt;p&gt;Commands are  written similarly to functions. They are verbs in an imperative mood. They are also used in PubSub. The notes about namespaces and delimiters, mentioned above, apply to them.&lt;/p&gt;

&lt;p&gt;Commands also usually expect a response. In other words, a command such as "CreateUser" will have a response message such as "CreateUserResult", "CreateUserSucceeded" or even "UserCreatedNotification". Overall, I'm not aware of strong conventions for these, so you can probably use whatever you like.&lt;/p&gt;

&lt;p&gt;My personal preference for response names comes from &lt;a href="https://jimmybogard.com/message-naming-conventions/"&gt;Jimmy Bogard's post on message naming conventions&lt;/a&gt;. I generally append "Result", "Reply" or "Response" to the original command name.&lt;/p&gt;

&lt;p&gt;Some example formats for command names and their namespaces are &lt;code&gt;&amp;lt;Verb&amp;gt;&amp;lt;Subject&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;subject&amp;gt;/&amp;lt;verb&amp;gt;&lt;/code&gt;. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Possible commands are "RegisterUser" or "user/register". Possible responses are "registerUserResponse" or "user/register_result"&lt;/li&gt;
&lt;li&gt;Possible commands are "DamagePlayer", "player/damage". Possible responses are "DamagePlayerResponse", "player/damage_result"&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#file-names"&gt;
  &lt;/a&gt;
  File names
&lt;/h3&gt;

&lt;p&gt;For file names, you need to consider conventions for casing, as well as what to name the file based on the code it contains.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#file-name-casing-conventions-and-delimiters"&gt;
  &lt;/a&gt;
  File name casing conventions and delimiters
&lt;/h4&gt;

&lt;p&gt;For file naming, there are different conventions depending on the language, framework and style guide you follow.&lt;/p&gt;

&lt;p&gt;Many conventions recommend file names that are all lower case. Words can be separated with either hyphens (-) or underscores (_). For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;in HTML, the convention is all lower case, with hyphens as separators. Underscores are far less common. One reason for this is because the HTML file name may reflect in the URL (especially with older servers). Underscores in URLs are far less common than hyphens.&lt;/li&gt;
&lt;li&gt;in CSS, the convention is all lower case with hyphens or underscores as separators&lt;/li&gt;
&lt;li&gt;In Python, PEP 8 recommends file names to be all lower case, with underscores as separators&lt;/li&gt;
&lt;li&gt;the Google JavaScript style guide recommends file names to be all lower case, with underscores or hyphens as separators&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Between hyphens and underscores, you can use either. Both are acceptable. In general, I prefer to use hyphens to be consistent with my CSS classes (which conventionally use hyphens) and for the reasons mentioned for the HTML. However, if you commonly use snake case in your programming language, or if you don't write HTML and CSS, it might feel more consistent to use underscores instead of hyphens.&lt;/p&gt;

&lt;p&gt;Some example file names are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;index.html, index.css, index.js&lt;/li&gt;
&lt;li&gt;third-party-analytics.js&lt;/li&gt;
&lt;li&gt;enemy-mover.js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Along with that, there are other conventions that recommend camel or pascal case for your files. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C# and Java recommend naming your file the same as the main thing in your file. This means using pascal case, same as your classes and interfaces.&lt;/li&gt;
&lt;li&gt;the AirBnB JavaScript style guide recommends naming your file the same thing as your default export. Again, this means using camel or pascal case, at least for your JavaScript files.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://reactjs.org/docs/faq-structure.html"&gt;React takes it a step further and recommends naming all of your files consistently in each folder&lt;/a&gt;. For example:

&lt;ul&gt;
&lt;li&gt;MyComponent.js&lt;/li&gt;
&lt;li&gt;MyComponent.css&lt;/li&gt;
&lt;li&gt;MyComponent.test.js (test files tend to have the special extension .test.js)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So which should you choose? First, consider if one of the conventions is more common than the others for your programming language or framework. That's the natural choice. Otherwise, you can do whatever you like. My personal recommendation is to choose the naming convention that best matches the code in your files. For example, when working on the front end, the convention is for everything in your HTML and CSS to be lower case with hyphens as separators. Therefore, you might want to use that as the naming convention.&lt;/p&gt;

&lt;p&gt;As another example, when working on React applications that use CSS modules, you might prefer to write CSS using pascal case and underscores. This makes it easier to use your CSS in your JavaScript, for example &lt;code&gt;styles.Foo_bar&lt;/code&gt; (where &lt;code&gt;Foo_bar&lt;/code&gt; is your CSS class), as hyphens aren't allowed in JavaScript. In this case, it may feel more natural to name your files using pascal case.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#choosing-a-file-name-based-on-the-code-it-contains"&gt;
  &lt;/a&gt;
  Choosing a file name based on the code it contains
&lt;/h4&gt;

&lt;p&gt;In general, you want to name your file based on its purpose.&lt;/p&gt;

&lt;p&gt;This is supported by the C# naming conventions and Java naming conventions. They state that your file name should be the same as the main thing you define in your file. For example, if you define a class Foo, your file name should be Foo.cs or Foo.java.&lt;/p&gt;

&lt;p&gt;The AirBnB JavaScript style guide also agrees with this. It states that your file should be named after your default export. Whether or not you use default exports is a separate matter. But the point is the same. It means to name it after the purpose, or the most important thing in your file. Normally (but not always) that's thing that you would &lt;code&gt;export default&lt;/code&gt;, if you were using export default.&lt;/p&gt;

&lt;p&gt;One exception is if your default export is named "main", "setup" or something similar. It doesn't make sense for a file to be called "main", especially if many files have a similar default export. In that case, consider what the purpose of the file is. An alternative is to consider what the equivalent OOP code would be.&lt;/p&gt;

&lt;p&gt;For example, consider that you have a class that deals with carousel functionality. Your OOP code would probably be a class named "Carousel". In comparison, if you write it using functions, it might look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleChangeToNextSlide&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// code to change to next slide when user clicks the relevant button&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// find DOM elements that are supposed to be carousels&lt;/span&gt;
  &lt;span class="c1"&gt;// set up event listeners on those elements&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the equivalent OOP code, the code in &lt;code&gt;main&lt;/code&gt; would be in the constructor of the class &lt;code&gt;Carousel&lt;/code&gt;. In this case, my recommendation would be to name the file &lt;code&gt;carousel&lt;/code&gt;. That's its true purpose. Alternatively, you could also change &lt;code&gt;main&lt;/code&gt; to &lt;code&gt;setupCarousel&lt;/code&gt; or something and name the file after that.&lt;/p&gt;

&lt;p&gt;As for some other cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If your file defines multiple classes: Well, most style guides would tell you to avoid files with multiple classes. Consider whether you can separate each class into its own file. Although, if you only have one public class, then that's fine. Name the file after the one public class, not the private ones.&lt;/li&gt;
&lt;li&gt;If you use functions instead of classes, there might be some cases where none of the functions would suitable to export default. Again, you need to consider what the purpose of the file is. For example, if you have some functions that are used in your test files, then perhaps "test-utilities" would be a good name. Alternatively, you can consider what the equivalent OOP code would be. You would probably have a static class with static methods. Name your file after the name of that static class.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#package-names-and-namespaces"&gt;
  &lt;/a&gt;
  Package names and namespaces
&lt;/h3&gt;

&lt;p&gt;In practice, many packages don't follow naming conventions at all. That's because a developer can upload a package with whatever name they want. There usually aren't many checks.&lt;/p&gt;

&lt;p&gt;However, there are naming conventions for packages and for different package repositories.&lt;/p&gt;

&lt;p&gt;Java and &lt;a href="https://search.maven.org/"&gt;Maven&lt;/a&gt; use the format of &lt;code&gt;&amp;lt;groupID&amp;gt;&amp;lt;artifactID&amp;gt;&lt;/code&gt;. The group ID part is generally a reversed domain name. For example, if your domain is example.com, the group ID would be "com.example". It can have subgroups (additional namespaces). For example "com.example.plugins". The artifactID is the name of the jar. For example "junit" or "spring-web". In general, artifact IDs tend to be fully lower case with hyphens to separate words.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/"&gt;NPM (node package manager)&lt;/a&gt; tends to use direct package names, such as "react-dom", or prefixed with a namespace or company name, such as "&lt;a class="mentioned-user" href="https://dev.to/babel"&gt;@babel&lt;/a&gt;
/preset-env". They tend to be fully lower case with hyphens to separate words.&lt;/p&gt;

&lt;p&gt;With &lt;a href="https://www.nuget.org/"&gt;NuGet&lt;/a&gt; (package repository for .NET), the number of namespaces vary, just like with Maven and subgroups. There are many packages with a single name, such as "Moq". There are also many packages of the format &lt;code&gt;&amp;lt;CompanyName&amp;gt;.&amp;lt;Package&amp;gt;&lt;/code&gt;, such as "AWSSDK.Core". There are also packages with many namespaces, such as "Microsoft.Extensions.FileProviders.Abstractions". If you want to follow the example of the packages released by Microsoft, then use pascal case, optionally a company prefix and as many namespaces as you need.&lt;/p&gt;

&lt;p&gt;Namespaces (in code) seem to follow similar concepts and conventions to packages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-tips"&gt;
  &lt;/a&gt;
  Final tips
&lt;/h2&gt;

&lt;p&gt;Remember that naming is hard.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are only two hard things in Computer Science: cache invalidation and naming things. - Phil Karlton&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, spending some time to come up with a reasonable name is usually worth it.&lt;/p&gt;

&lt;p&gt;Also, as always, be pragmatic. It's okay to break these conventions once in a while. They are only here to help you make good and consistent decisions most of the time. For example, it's okay if you feel that adding the data structure to the name will help, such as &lt;code&gt;userList&lt;/code&gt;. It's up to you to decide what's best for your project.&lt;/p&gt;

&lt;p&gt;In addition, you probably can't spend an unreasonable amount of time coming up with good names. So, sometimes, if you've already spent too long, you might need to use the best name you've come up with so far and move on.&lt;/p&gt;

&lt;p&gt;Overall, the most important thing from this article is that you understand the principles behind naming. In particular, that names should make the code easy to understand. If you understand that, then you'll be fine. You'll be able to come up with your own solutions and conventions even in unfamiliar situations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-notes"&gt;
  &lt;/a&gt;
  Final notes
&lt;/h2&gt;

&lt;p&gt;So that's it for the article. I hope that you found it useful.&lt;/p&gt;

&lt;p&gt;If you've encountered any awful names in code you've worked on, please leave a comment with them!&lt;/p&gt;

&lt;p&gt;Also, if you want to discuss anything, disagree with anything, or have any feedback in general, please leave a comment below.&lt;/p&gt;

&lt;p&gt;Alright, see you next time :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#image-credits"&gt;
  &lt;/a&gt;
  Image credits
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Cover photo (modified) - Photo by Paul Stollery on Unsplash&lt;/li&gt;
&lt;li&gt;Clear Bulb Beside White Notepad on White Surface - Photo by Burak Kebapci on Pexels&lt;/li&gt;
&lt;li&gt;Green leaf with white card - Photo by Helena Hertz on Unsplash&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>programming</category>
      <category>learning</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Dockerfile: Best practices for building an image</title>
      <author>Ankit Anand ‚ú®</author>
      <pubDate>Mon, 21 Jun 2021 15:01:04 +0000</pubDate>
      <link>https://dev.to/ankit01oss/dockerfile-best-practices-for-building-an-image-4lc6</link>
      <guid>https://dev.to/ankit01oss/dockerfile-best-practices-for-building-an-image-4lc6</guid>
      <description>&lt;p&gt;Hi there,&lt;/p&gt;

&lt;p&gt;This is Ankit, your friendly DevOps content curator. I read a lot of articles about DevOps, distributed systems, performance monitoring, etc., and then share key takeaways from those articles so that you can stay updated and learn a few things quickly.üôÇ&lt;/p&gt;

&lt;p&gt;I read this article on best practices for building a docker image. A Docker image serves as a template to build Docker containers. It also acts as a starting point when using Docker.&lt;/p&gt;

&lt;p&gt;Link to the full articleüëá&lt;br&gt;
&lt;a href="https://medium.com/swlh/dockerfile-best-practices-for-building-an-image-6120e512b1fa"&gt;Dockerfile: Best practices for building an image&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#summary-of-best-practices-for-building-docker-images"&gt;
  &lt;/a&gt;
  Summary of best practices for building Docker images
&lt;/h2&gt;

&lt;p&gt;Below is the list of best practices to follow while building Docker images:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-os-base-image"&gt;
  &lt;/a&gt;
  1. OS base image
&lt;/h3&gt;

&lt;p&gt;OS base image size can have a lot of impact on image sizes and security vulnerabilities. You should choose minimal Docker images like Alpine(~5 MB) compared to the most downloaded base image like ubuntu(~188 MB)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-base-images"&gt;
  &lt;/a&gt;
  2. Base images
&lt;/h3&gt;

&lt;p&gt;Each base image should have a specific goal and should be as generic as possible to ensure re-usability.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-docker-users-with-minimal-privileges"&gt;
  &lt;/a&gt;
  3. Docker users with minimal privileges
&lt;/h3&gt;

&lt;p&gt;Docker users should only have the privileges that they need. For e.g. the ROOT user should not be used for starting the container.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#4-leverage-dockerignore"&gt;
  &lt;/a&gt;
  4. Leverage Dockerignore
&lt;/h3&gt;

&lt;p&gt;Dockerignore can be used for keeping your Docker images as lean as possible. You can create a file named .dockerignore in your root folder and use it to exclude files and directories that are not needed to run the app.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#5-be-specific-with-and-or-copy"&gt;
  &lt;/a&gt;
  5. Be specific with AND or COPY
&lt;/h3&gt;

&lt;p&gt;While using &lt;code&gt;AND&lt;/code&gt; or &lt;code&gt;COPY&lt;/code&gt;, be specific with the folder or files you want. It is an easy way to optimize image size.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#6-specific-tag-instead-of-fixed-tag"&gt;
  &lt;/a&gt;
  6. Specific tag instead of fixed tag
&lt;/h3&gt;

&lt;p&gt;Docker tags convey useful information about specific image versions/variants. Avoid using fixed tags like 'latest' as it makes it hard to track which version of the image is running and hard to roll back.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#7-image-life-cycle-management"&gt;
  &lt;/a&gt;
  7. Image life cycle management
&lt;/h3&gt;

&lt;p&gt;A security breach can happen in case you are running a deprecated version of an image. Hence, it's necessary to put in place a proper image life cycle management.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#8-sensitive-information"&gt;
  &lt;/a&gt;
  8. Sensitive information
&lt;/h3&gt;

&lt;p&gt;Environment variables are not a good way to manage secrets as they are not encrypted. Solutions like Hashicorp vault can be used for managing secrets.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#9-multistage-builds"&gt;
  &lt;/a&gt;
  9. Multi-stage builds
&lt;/h3&gt;

&lt;p&gt;With multi-stage builds, you use multiple &lt;code&gt;FROM&lt;/code&gt; statements in your Dockerfile. Using multi-stage builds, you can selectively copy artifacts from one stage to another, leaving behind everything you don‚Äôt want in the final image.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#10-combine-commands"&gt;
  &lt;/a&gt;
  10. Combine commands
&lt;/h3&gt;

&lt;p&gt;As each command in a Dockerfile adds one layer to the image, one way to reduce image size is by combining commands. For example, multiple RUN commands can be combined into a single RUN statement.&lt;/p&gt;



&lt;p&gt;I hope you enjoyed this summary and learned something new. I will be coming up with more such notes soon.&lt;/p&gt;

&lt;p&gt;Please give me a follow if you liked it üôå&lt;/p&gt;



&lt;p&gt;Currently building &lt;a href="https://bit.ly/35G7QXU"&gt;SigNoz&lt;/a&gt; - an open-source APM &amp;amp; observability tool üíô&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/SigNoz"&gt;
        SigNoz
      &lt;/a&gt; / &lt;a href="https://github.com/SigNoz/signoz"&gt;
        signoz
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      SigNoz helps developers monitor their applications &amp;amp; troubleshoot problems, an open-source alternative to DataDog, NewRelic, etc. üî• üñ•
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/de24bcecd48c187d949b173f240555967f58a5cd424760a73f7c06f791b892ec/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343435302f7369676e6f7a2d696d616765732f4c6f676f4769746875625f7369676662752e737667"&gt;&lt;img src="https://camo.githubusercontent.com/de24bcecd48c187d949b173f240555967f58a5cd424760a73f7c06f791b892ec/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343435302f7369676e6f7a2d696d616765732f4c6f676f4769746875625f7369676662752e737667" alt="SigNoz-logo" width="240"&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;p&gt;Monitor your applications and troubleshoot problems in your deployed applications, an open-source alternative to DataDog, New Relic, etc.&lt;/p&gt;
&lt;p&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8bb1977f745ee8c8107f711ecfa901421a9b929f308fd431f7211508f8ddbd87/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e"&gt;&lt;img alt="License" src="https://camo.githubusercontent.com/8bb1977f745ee8c8107f711ecfa901421a9b929f308fd431f7211508f8ddbd87/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4d7505d3f801c171da56fe726501ab9411207d82358bf10341021397fa3fe48e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7369676e6f7a2f66726f6e74656e643f6c6162656c3d446f776e6c6f616473"&gt;&lt;img alt="Downloads" src="https://camo.githubusercontent.com/4d7505d3f801c171da56fe726501ab9411207d82358bf10341021397fa3fe48e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7369676e6f7a2f66726f6e74656e643f6c6162656c3d446f776e6c6f616473"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/cd33e47de8e2feb970abdef5de51f59e6c007958faf6c188c56dd4c4208e58a2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7369676e6f7a2f7369676e6f7a"&gt;&lt;img alt="GitHub issues" src="https://camo.githubusercontent.com/cd33e47de8e2feb970abdef5de51f59e6c007958faf6c188c56dd4c4208e58a2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7369676e6f7a2f7369676e6f7a"&gt;&lt;/a&gt; 
    &lt;a href="https://twitter.com/intent/tweet?text=Monitor%20your%20applications%20and%20troubleshoot%20problems%20with%20SigNoz,%20an%20open-source%20alternative%20to%20DataDog,%20NewRelic.&amp;amp;url=https://signoz.io/&amp;amp;via=SigNozHQ&amp;amp;hashtags=opensource,signoz,observability" rel="nofollow"&gt; 
        &lt;img alt="tweet" src="https://camo.githubusercontent.com/90bc908826728c0e4261acfff5619fd732c7be2b2a00624fce6363c9a3623c90/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f687474702f736869656c64732e696f2e7376673f7374796c653d736f6369616c"&gt; &lt;/a&gt; 
&lt;/p&gt;

&lt;p&gt;SigNoz helps developers monitor applications and troubleshoot problems in their deployed applications. SigNoz uses distributed tracing to gain visibility into your software stack.&lt;/p&gt;

&lt;p&gt;üëâ You can see metrics like p99 latency, error rates for your services, external API calls and individual end points.&lt;/p&gt;

&lt;p&gt;üëâ You can find the root cause of the problem by going to the exact traces which are causing the problem and see detailed flamegraphs of individual request traces.&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/863718997bae95953d22cbd6c1001d4ec23695aad4244d7de596660f33833496/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343033322f7369676e6f7a2d696d616765732f73637265656e7a792d313631383930343031333732395f636c737376792e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/863718997bae95953d22cbd6c1001d4ec23695aad4244d7de596660f33833496/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343033322f7369676e6f7a2d696d616765732f73637265656e7a792d313631383930343031333732395f636c737376792e706e67" alt="SigNoz Feature"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
üëá Features:&lt;/h3&gt;


&lt;ul&gt;
&lt;li&gt;Application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/li&gt;
&lt;li&gt;Slowest endpoints in your application&lt;/li&gt;
&lt;li&gt;See exact request trace to figure out issues in downstream services, slow DB queries, call to 3rd party services like payment gateways, etc&lt;/li&gt;
&lt;li&gt;Filter traces by service name, operation, latency, error, tags/annotations.&lt;/li&gt;
&lt;li&gt;Aggregate metrics on filtered traces. Eg, you can get error‚Ä¶&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;br&gt;
  &lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/SigNoz/signoz"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


</description>
      <category>devops</category>
      <category>docker</category>
      <category>cloud</category>
      <category>kubernetes</category>
    </item>
  </channel>
</rss>
