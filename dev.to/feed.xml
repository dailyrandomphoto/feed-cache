<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Flutter styling explained in CSS - LLF #5</title>
      <author>Keff</author>
      <pubDate>Fri, 01 Oct 2021 10:57:37 +0000</pubDate>
      <link>https://dev.to/nombrekeff/flutter-styling-explained-in-css-llf-5-51nm</link>
      <guid>https://dev.to/nombrekeff/flutter-styling-explained-in-css-llf-5-51nm</guid>
      <description>&lt;p&gt;&lt;strong&gt;Hey there&lt;/strong&gt; 👋&lt;/p&gt;

&lt;p&gt;CSS can be weird and confusing, so let me explain Flutter's styling using it as a comparison. Flutter styling is quite straightforward, and that's not acceptable in my book, styling should always be confusing and weird. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E-eqsWtn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxiw3uxo8v0cz3di1cec.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E-eqsWtn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxiw3uxo8v0cz3di1cec.jpeg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Jokes aside, CSS is widely used so I thought I'd try to explain Flutter's styling using CSS as a comparison example.&lt;/p&gt;

&lt;p&gt;They have a lot of things in common in terms of naming, property (style) values, and the rendered output you'd expect. But as opposed to the web, in Flutter you write styles in the same language as the rest of your application, without needing a separate one for the styles. In the case of Flutter, we write the styles in the Dart language itself. &lt;/p&gt;

&lt;p&gt;Let's take a look at some of the most common styles we will use while building Flutter apps. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There is a repository containing an app with all the flutter code mentioned in this post. Can be found &lt;a href="https://github.com/nombrekeff/lets-learn-flutter/tree/master/apps/llf_5_flutter_style_in_css"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#table-of-contents"&gt;Table of Contents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#layout"&gt;Layout&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#column"&gt;Column&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#row"&gt;Row&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#column-and-row-are-just-flex"&gt;Column and Row are just Flex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#center"&gt;Center&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#stack"&gt;Stack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#text"&gt;Text&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#paragraph"&gt;Paragraph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#multiple-styles-in-a-paragraph"&gt;Multiple styles in a paragraph&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#images"&gt;Images&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#network-images"&gt;Network images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#asset-images"&gt;Asset images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#in-memory-images"&gt;In memory images:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#file-images"&gt;File images:&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#box-decorations"&gt;Box decorations&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#borders"&gt;Borders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#border-radius"&gt;Border radius&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gradients"&gt;Gradients&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#learning-more"&gt;Learning more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#layout"&gt;
  &lt;/a&gt;
  Layout
&lt;/h2&gt;

&lt;p&gt;Let's start with layouts. In both flutter and CSS, we can position and organize elements/widgets as we please. Maybe we need to have some items in a row or a column. Or maybe we want to make a scrollable list. &lt;/p&gt;

&lt;p&gt;Let's take a look at some of the more common layouts we will use:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#column"&gt;
  &lt;/a&gt;
  Column
&lt;/h3&gt;

&lt;p&gt;Position a list of elements in a vertical orientation (or column). &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"column"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    ...
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In CSS the above will automatically place the &lt;code&gt;items&lt;/code&gt; in a column. But to better resemble Flutter, let's take an example of how to do this using flex-box:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nc"&gt;.column&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Flutter&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
        &lt;span class="o"&gt;],&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see Flutter takes a more composable approach, preferring widgets over properties.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#row"&gt;
  &lt;/a&gt;
  Row
&lt;/h3&gt;

&lt;p&gt;To position items in a row, it's the same drill. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nc"&gt;.row&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In CSS we just need to change the flex-direction to &lt;code&gt;row&lt;/code&gt;, this will place all items horizontally side by side.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flutter&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Row&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
        &lt;span class="o"&gt;],&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in Flutter we can switch the &lt;code&gt;Column&lt;/code&gt; widget with &lt;code&gt;Row&lt;/code&gt; and we're sorted!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#column-and-row-are-just-flex"&gt;
  &lt;/a&gt;
  Column and Row are just Flex
&lt;/h4&gt;

&lt;p&gt;With some properties set by default, and some forced (like direction). We could use Flex instead of Row or Column, in the following example it will render the same thing as using Column:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Flex&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;direction:&lt;/span&gt; &lt;span class="n"&gt;Axis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;vertical&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
        &lt;span class="o"&gt;],&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#center"&gt;
  &lt;/a&gt;
  Center
&lt;/h3&gt;

&lt;p&gt;Yall like centering stuff right? I do, and flutter makes it quite easy to do so. Let's say we want to position an icon in the center of a box.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;br&gt;
In css there are plenty of different ways to do any single thing, we could use our old friend &lt;code&gt;flex-box&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or, we could use absolute positioning:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.center&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-ms-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;Centered Button&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Flutter&lt;/strong&gt;&lt;br&gt;
Like in CSS in flutter we can center stuff on the screen in multiple ways&lt;/p&gt;

&lt;p&gt;Using the Center widget, if we only have a child:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or we could center things inside a Column or Row if we have more than one element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Row&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;mainAxisAligment:&lt;/span&gt; &lt;span class="n"&gt;MainAxisAlignment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;crossAxisAligment:&lt;/span&gt; &lt;span class="n"&gt;CrossAxisAlignment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
        &lt;span class="o"&gt;],&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;This will center all items centered, both horizontally and vertically.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note that using this approach we can position items in various ways, like spaceBetween, spaceEvenly, etc...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stack"&gt;
  &lt;/a&gt;
  Stack
&lt;/h3&gt;

&lt;p&gt;What if we want to position an element on top of another element, or positioned on the top right corner? That's absolutely possible&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;br&gt;
In css we would use absolute positioning&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"child"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="err"&gt;This&lt;/span&gt; &lt;span class="err"&gt;is&lt;/span&gt; &lt;span class="err"&gt;required&lt;/span&gt; &lt;span class="err"&gt;--&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Flutter&lt;/strong&gt;&lt;br&gt;
In flutter we accomplish this by using the &lt;a href="https://api.flutter.dev/flutter/widgets/Stack-class.html"&gt;Stack&lt;/a&gt; widget:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
  &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;width:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;height:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;

    &lt;span class="c1"&gt;// This will be rendered on top of previous widgets&lt;/span&gt;
    &lt;span class="n"&gt;Positioned&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;top:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
        &lt;span class="nl"&gt;right:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Icon&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Icons&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;
  &lt;span class="o"&gt;],&lt;/span&gt;
&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Stack&lt;/strong&gt;: A widget that positions its children relative to the edges of its box.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sncxMZPK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3uyed96pjw6hw9wu81yx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sncxMZPK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3uyed96pjw6hw9wu81yx.png" alt="Image if how CSS renders"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is how it looks in CSS&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#text"&gt;
  &lt;/a&gt;
  Text
&lt;/h2&gt;

&lt;p&gt;One of the most important things of any UI is the text, without text, our apps and websites would just be a bunch of boxes and imagery. Let's see how text is added and handled.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#paragraph"&gt;
  &lt;/a&gt;
  Paragraph
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;br&gt;
In css we normally use the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    CSS stands for Complicated Sac of Sheets
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What about adding some color? Easy&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    CSS stands for Complicated Sac of Sheets
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nc"&gt;.red&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Flutter&lt;/strong&gt;&lt;br&gt;
Flutter also offers a simple widget to help us render text, called Text:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Flutter is a type of arrhythmia'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And coloring it is simple enough too:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;'Flutter is a type of arrhythmia'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nl"&gt;style:&lt;/span&gt; &lt;span class="n"&gt;TextStyle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;red&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#multiple-styles-in-a-paragraph"&gt;
  &lt;/a&gt;
  Multiple styles in a paragraph
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;br&gt;
In css we can nest &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; elements inside our &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; and give specific styles to each one of them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    CSS stands for &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"css-description"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Complicated Sac of Sheets&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#666666&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.css-description&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;brown&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Flutter&lt;/strong&gt;&lt;br&gt;
In flutter we must use the RichText widget to be able to do this, let's take a look:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;RichText&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;text:&lt;/span&gt; &lt;span class="n"&gt;TextSpan&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;TextSpan&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="nl"&gt;text:&lt;/span&gt; &lt;span class="s"&gt;'Flutter is'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="nl"&gt;style:&lt;/span&gt; &lt;span class="n"&gt;TextStyle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                    &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xff666666&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
                    &lt;span class="nl"&gt;fontSize:&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;TextSpan&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="nl"&gt;text:&lt;/span&gt; &lt;span class="s"&gt;'a type of arrhythmia'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="nl"&gt;style:&lt;/span&gt; &lt;span class="n"&gt;TextStyle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                    &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;brown&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="nl"&gt;fontSize:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;],&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;
&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see in flutter it's a bit more cumbersome as opposed to CSS. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qvRlXv_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5znyowlfwjwx42x0x0yr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qvRlXv_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5znyowlfwjwx42x0x0yr.png" alt="Image of how the text from the examples looks like"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is how the text mentioned in the example looks like in CSS&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#images"&gt;
  &lt;/a&gt;
  Images
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;br&gt;
Showing images in CSS is easy enough, just add a &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag and set the src attribute to the image path or link.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"http://example.images.com/my-image.png"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Flutter&lt;/strong&gt;&lt;br&gt;
In Flutter it's quite similar, but we create images differently depending on where the image is loaded from.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#network-images"&gt;
  &lt;/a&gt;
  Network images
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;network&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'http://example.images.com/my-image.png'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;&lt;a href="https://api.flutter.dev/flutter/widgets/Image/Image.network.html"&gt;see more&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#asset-images"&gt;
  &lt;/a&gt;
  Asset images
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;asset&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'assets/my-image.png'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;&lt;a href="https://api.flutter.dev/flutter/widgets/Image/Image.asset.html"&gt;see more&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#in-memory-images"&gt;
  &lt;/a&gt;
  In memory images:
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;memory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;&lt;a href="https://api.flutter.dev/flutter/widgets/Image/Image.memory.html"&gt;see more&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#file-images"&gt;
  &lt;/a&gt;
  File images:
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;&lt;a href="https://api.flutter.dev/flutter/widgets/Image/Image.file.html"&gt;see more&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bonus meme&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wLZz7a76--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ll67c3st7esl2wflfuer.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wLZz7a76--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ll67c3st7esl2wflfuer.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#box-decorations"&gt;
  &lt;/a&gt;
  Box decorations
&lt;/h2&gt;

&lt;p&gt;We all like those boxes with rounded corners, borders, and excessive gradients, right? &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#borders"&gt;
  &lt;/a&gt;
  Borders
&lt;/h3&gt;

&lt;p&gt;In CSS we set the &lt;code&gt;border&lt;/code&gt; property&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Flutter&lt;/strong&gt;&lt;br&gt;
In Flutter we can add borders to a container by setting the &lt;code&gt;border&lt;/code&gt; in the containers &lt;code&gt;BoxDecoration&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;decoration:&lt;/span&gt; &lt;span class="n"&gt;BoxDecoration&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;border:&lt;/span&gt; &lt;span class="n"&gt;Border&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;green&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
            &lt;span class="nl"&gt;width:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#border-radius"&gt;
  &lt;/a&gt;
  Border radius
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;br&gt;
In css we use the &lt;code&gt;border-radius&lt;/code&gt; property&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Flutter&lt;/strong&gt;&lt;br&gt;
In Flutter we can add rounded corners to a container adding &lt;a href="https://api.flutter.dev/flutter/painting/BorderRadius-class.html"&gt;&lt;code&gt;BorderRadius&lt;/code&gt;&lt;/a&gt; to the containers &lt;a href="https://api.flutter.dev/flutter/painting/BoxDecoration-class.html"&gt;&lt;code&gt;BoxDecoration&lt;/code&gt;&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;decoration:&lt;/span&gt; &lt;span class="n"&gt;BoxDecoration&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;borderRadius:&lt;/span&gt; &lt;span class="n"&gt;BorderRadius&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;circular&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or just adding radius to the top of the container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;decoration:&lt;/span&gt; &lt;span class="n"&gt;BoxDecoration&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;borderRadius:&lt;/span&gt; &lt;span class="n"&gt;BorderRadius&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;only&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;topLeft:&lt;/span&gt; &lt;span class="n"&gt;Radius&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;circular&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="nl"&gt;topRight:&lt;/span&gt; &lt;span class="n"&gt;Radius&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;circular&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Want to add rounded corners to any widget? Using &lt;a href="https://api.flutter.dev/flutter/widgets/ClipRRect-class.html"&gt;&lt;code&gt;ClipRRect&lt;/code&gt;&lt;/a&gt; allows us to add round corners to any child widget:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;ClipRRect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;borderRadius:&lt;/span&gt; &lt;span class="n"&gt;BorderRadius&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;circular&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;network&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;'...'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;height:&lt;/span&gt; &lt;span class="mf"&gt;150.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;width:&lt;/span&gt; &lt;span class="mf"&gt;100.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#gradients"&gt;
  &lt;/a&gt;
  Gradients
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;br&gt;
In CSS we can set a gradient as the background of elements:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;70deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;193&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;195&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;253&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;187&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Flutter&lt;/strong&gt;&lt;br&gt;
In Flutter we can add also add &lt;a href="https://api.flutter.dev/flutter/painting/LinearGradient-class.html"&gt;LinearGradient&lt;/a&gt; to the containers &lt;a href="https://api.flutter.dev/flutter/painting/BoxDecoration-class.html"&gt;&lt;code&gt;BoxDecoration&lt;/code&gt;&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;decoration:&lt;/span&gt; &lt;span class="n"&gt;BoxDecoration&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;gradient:&lt;/span&gt; &lt;span class="n"&gt;LinearGradient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;colors:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
                &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;yellow&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
                &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;red&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="o"&gt;],&lt;/span&gt;
            &lt;span class="nl"&gt;stops:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; 
        &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#learning-more"&gt;
  &lt;/a&gt;
  Learning more
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://flutter.dev/docs/cookbook/design/themes"&gt;Flutter's theming guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nombrekeff/lets-learn-flutter/tree/master/apps/llf_5_flutter_style_in_css"&gt;Post example app repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;That's it for this one, I hope you got something out of it and it did not confuse you more than it helped&lt;/strong&gt; 😅&lt;/p&gt;

&lt;p&gt;These are just some of the styles I could compare, so I might convert this into a mini-series if people are interested. &lt;/p&gt;

&lt;p&gt;As always, thanks for reading. And remember to comment if you have any suggestions, doubts, or something you would like me to cover in these posts.&lt;/p&gt;

</description>
      <category>dart</category>
      <category>flutter</category>
      <category>css</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Building a Tailwind CSS button component + variants</title>
      <author>Zoltán Szőgyényi</author>
      <pubDate>Fri, 01 Oct 2021 10:32:00 +0000</pubDate>
      <link>https://dev.to/themesberg/building-a-tailwind-css-button-component-variants-55dp</link>
      <guid>https://dev.to/themesberg/building-a-tailwind-css-button-component-variants-55dp</guid>
      <description>&lt;p&gt;For the last few projects I've been using Tailwind CSS to build and style the components, sections, and pages for the website.&lt;/p&gt;

&lt;p&gt;One thing that bothers me, however, is that I have to build certain commonly components over and over every time I start a new project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rfRcj20z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfxx4g5ry0dwe3qxrjb8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rfRcj20z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfxx4g5ry0dwe3qxrjb8.png" alt="Tailwind CSS buttons"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is why I decided to start a Tailwind CSS Components series here and teach you how to build elements such as buttons, dropdowns, modals, and more.&lt;/p&gt;

&lt;p&gt;A few days ago I showed you how to build a &lt;a href="https://dev.to/themesberg/building-a-tailwind-css-breadcrumb-components-nl8"&gt;Tailwind CSS breadcrumb&lt;/a&gt; component and today I will show you how to build button components.&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css-button-component"&gt;
  &lt;/a&gt;
  Tailwind CSS button component
&lt;/h2&gt;

&lt;p&gt;First of all, it is important to understand what kind of HTML a button can be. It is most usually used as an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element, however, you can also use it as a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element too.&lt;/p&gt;

&lt;p&gt;Let's first create the HTML markup for the button:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button type="button"&amp;gt;Flowbite&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's add some spacing classes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button type="button" class="px-5 py-2.5"&amp;gt;Default&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's add some colors:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button type="button" class="text-white bg-blue-700 px-5 py-2.5"&amp;gt;Flowbite&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's also important to apply text related stylings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button type="button" class="text-white bg-blue-700 font-medium text-sm px-5 py-2.5 text-center"&amp;gt;Flowbite&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's make the button rounded, but you can keep it squared as well depending on your preferences:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button type="button" class="text-white bg-blue-700 font-medium rounded-lg text-sm px-5 py-2.5 text-center"&amp;gt;Flowbite&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly, let's not forget to add hover and focus styles:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button type="button" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center"&amp;gt;Flowbite&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tailwind-css-outline-button-style"&gt;
  &lt;/a&gt;
  Tailwind CSS outline button style
&lt;/h2&gt;

&lt;p&gt;You can also use the following styles to build a button that doesn't have a solid background:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button type="button" class="rounded-lg border border-gray-200 bg-white text-sm font-medium px-4 py-2 text-gray-900 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-2 focus:ring-blue-700 focus:text-blue-700 mr-3 mb-3"&amp;gt;Flowbite&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tailwind-css-button-with-icon"&gt;
  &lt;/a&gt;
  Tailwind CSS button with icon
&lt;/h2&gt;

&lt;p&gt;You may want to use an icon inside the button as well. I recommend using &lt;code&gt;flex&lt;/code&gt; and SVG icons for the best performance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button type="button" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center mr-3"&amp;gt;
    &amp;lt;svg class="-ml-1 mr-2 h-5 w-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"&amp;gt;&amp;lt;path d="M3 1a1 1 0 000 2h1.22l.305 1.222a.997.997 0 00.01.042l1.358 5.43-.893.892C3.74 11.846 4.632 14 6.414 14H15a1 1 0 000-2H6.414l1-1H14a1 1 0 00.894-.553l3-6A1 1 0 0017 3H6.28l-.31-1.243A1 1 0 005 1H3zM16 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM6.5 18a1.5 1.5 0 100-3 1.5 1.5 0 000 3z"&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;
    Buy now
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#buttons-as-links"&gt;
  &lt;/a&gt;
  Buttons as links
&lt;/h2&gt;

&lt;p&gt;You can easily use buttons as link by using an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag instead of a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;a href="#" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-3 mb-3"&amp;gt;I'm a link&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! I hope that this tutorial will help you in your Tailwind CSS journey.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flowbite-tailwind-css-component-library"&gt;
  &lt;/a&gt;
  Flowbite - Tailwind CSS component library
&lt;/h2&gt;

&lt;p&gt;This &lt;a href="https://flowbite.com/docs/components/buttons/"&gt;Tailwind CSS button&lt;/a&gt; component is part of a larger library called Flowbite, which includes many more variants and components built using the utility classes from Tailwind CSS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lk1XVTd_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1slpuim8l8e9goudyvg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lk1XVTd_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1slpuim8l8e9goudyvg.png" alt="Tailwind CSS component library"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can learn more and get started with Flowbite by reading the &lt;a href="https://flowbite.com/docs/getting-started/introduction/"&gt;introduction&lt;/a&gt; and &lt;a href="https://flowbite.com/docs/getting-started/quickstart/"&gt;quickstart guide&lt;/a&gt; from the official documentation.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>tailwindcss</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Cloud Technology News of the Month: September 2021</title>
      <author>CAST AI</author>
      <pubDate>Fri, 01 Oct 2021 10:11:59 +0000</pubDate>
      <link>https://dev.to/castai/cloud-technology-news-of-the-month-september-2021-21mo</link>
      <guid>https://dev.to/castai/cloud-technology-news-of-the-month-september-2021-21mo</guid>
      <description>&lt;p&gt;Autumn is officially back, and with it another portion of fresh cloud technology news. &lt;/p&gt;

&lt;p&gt;This series brings you up to speed with the latest releases, acquisitions, research, and hidden gems in the world of cloud computing – the stuff actually worth reading.&lt;/p&gt;

&lt;p&gt;Here’s what happened in the cloud world this August.&lt;/p&gt;

&lt;p&gt;_____&lt;/p&gt;

&lt;h2&gt;Story of the month: Do most SaaS cloud cost tools really suck?&lt;/h2&gt;

&lt;p&gt;It makes sense for industry players to be skeptical about cloud cost optimization tools. It’s true that many solutions on the market are pretty complicated and steal away a great deal of time for onboarding and training.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But allocating, analyzing, and forecasting cloud costs is time-consuming as well. &lt;/strong&gt;You have to research pricing plans, make infrastructure changes, create new instances, and do all the other things that get you optimal performance at the lowest possible cost.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--q6LRfVeV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/903704955701170176/kkJLocJB_normal.jpg" alt="Rick Ochs profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Rick Ochs
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @rickyo1138
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Don't buy into the hype that cloud optimization begins and ends with chargeback/showback. It doesn't. You need real, quality scaling and automation. Passing a bill around to different teams just shifts blame, not solutions.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:08 PM - 03 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1433839387213590529" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1433839387213590529" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1433839387213590529" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;&lt;strong&gt;But there is a way to&lt;/strong&gt; solve this problem. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;But only cloud-native cost optimization can solve it all. A solution like that gives you full control over what happens but doesn't force you to take any action to save costs. It all happens automatically.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pdeE1tqr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/o_azoJrQ0KlY63fXolfuT8_g45Pc-R8no4udrhX_MZBlGjseI2z9YpUX1Bw8a1s6Wv4-_SExs49uEml5beazER7hCJsSEgUoQxPCCyjijmAmHvylpA7W3cpETzMiRNI1Kfg_39n6%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pdeE1tqr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/o_azoJrQ0KlY63fXolfuT8_g45Pc-R8no4udrhX_MZBlGjseI2z9YpUX1Bw8a1s6Wv4-_SExs49uEml5beazER7hCJsSEgUoQxPCCyjijmAmHvylpA7W3cpETzMiRNI1Kfg_39n6%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Automated cost optimization platforms like CAST AI do all this to get you where you want to be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select the most cost-efficient instance types and sizes,&lt;/li&gt;
&lt;li&gt;Autoscale your cloud resources to handle spikes in demand,&lt;/li&gt;
&lt;li&gt;Instantly remove resources that aren’t being used,&lt;/li&gt;
&lt;li&gt;Use Spot Instances to drive costs down and handle any interruptions gracefully.&lt;/li&gt;
&lt;li&gt;And do even more to help you avoid costs in other areas - from automated storage, backups, security, and compliance management, to changes in configurations.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Most importantly, the best solutions apply all of this in real time, helping teams to master the point-in-time nature of cloud optimization.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Automated optimization brings results instantly and guarantees a certain level of savings. At the same time, it’s not a black box and you retain full control over its workings. &lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s6Qru-jD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cast.ai/wp-content/uploads/2021/08/dollar-banner.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s6Qru-jD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cast.ai/wp-content/uploads/2021/08/dollar-banner.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;_____&lt;/p&gt;

&lt;h2&gt;The Business of Cloud&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Google Cloud&lt;/strong&gt; has done more than any other company for developing the &lt;strong&gt;cloud-native ecosystem&lt;/strong&gt;, but it still struggles to compete with the enterprise cloud toolkits that are AWS and Microsoft Azure. Despite the efforts of Google Cloud’s CEO Thomas Kurian, the vendor still holds only &lt;a href="https://www.srgresearch.com/articles/quarterly-cloud-market-leaps-to-42b-amazon-microsoft-google-pocket-63-of-dollars-spent"&gt;&lt;strong&gt;10% of the cloud market&lt;/strong&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;While enterprises like 20th Century Fox and American Eagle use the service for advanced AI and machine learning, few companies out there decided to go all-in with Google Cloud - some notable exceptions are Deutsche Bank and Sabre, which both signed a &lt;strong&gt;10-year deal with Google Cloud in 2020&lt;/strong&gt;. How is Google going to close this gap? Let’s keep an eye on the vendor in the next few months.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.infoworld.com/article/3633195/will-google-cloud-ever-win-over-enterprises.html"&gt;InfoWorld&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Meanwhile, &lt;strong&gt;IBM&lt;/strong&gt; got its hands on several &lt;strong&gt;hybrid cloud deals with Africa’s largest banks&lt;/strong&gt;, including the South African Nedbank and Morocco’s Attijariwafa Bank. This is part of the company’s broader strategy to pivot towards the growing market of storing large volumes of data on the internet.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.bloomberg.com/news/articles/2021-09-22/ibm-wins-africa-cloud-deals-as-banks-quicken-switch-to-digital"&gt;Bloomberg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Speaking of storage, the cloud storage company &lt;strong&gt;OVH Groupe SAS&lt;/strong&gt; kicked off its IPO in Paris and expects to raise at least&lt;strong&gt; $469 million&lt;/strong&gt;. OVH will use the funding to build its competitive advantage against AWS and speed up international expansion, successfully recovering from the blow that was one of its data centers &lt;a href="https://cast.ai/blog/cloud-technology-news-of-the-month-march-2021/"&gt;catching fire&lt;/a&gt; back in March.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.bloomberg.com/news/articles/2021-09-20/cloud-storage-firm-ovh-seeks-up-to-469-million-in-paris-ipo"&gt;Bloomberg&lt;/a&gt;&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tWy1OYPp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1161306454768439302/Il4XIkhr_normal.png" alt="Coloware Data Centers profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Coloware Data Centers
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @colowareto
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      OVHcloud planning $4.7Bn IPO following their SBG2 disaster&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/datacenters"&gt;#datacenters&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/colocation"&gt;#colocation&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/dedicatedservers"&gt;#dedicatedservers&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/OVH"&gt;#OVH&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/edgecomputing"&gt;#edgecomputing&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/torontotech"&gt;#torontotech&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/computernetworking"&gt;#computernetworking&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/cloudcomputing"&gt;&lt;/a&gt;&lt;a href="https://twitter.com/hashtag/cloud"&gt;#cloud&lt;/a&gt;computing &lt;a href="https://twitter.com/hashtag/telco"&gt;#telco&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/cloud"&gt;#cloud&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/hyperscale"&gt;#hyperscale&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/internet"&gt;#internet&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/IPO"&gt;#IPO&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/OVH"&gt;#OVH&lt;/a&gt;cloud &lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/5RtYiL8qI1"&gt;datacenterdynamics.com/en/news/ovhclo…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:00 PM - 23 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1441039683367153668" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1441039683367153668" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1441039683367153668" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;&lt;strong&gt;Bain’s 2021 Technology Report &lt;/strong&gt;is out and has some interesting findings of how the cloud technology and platform business models are now unlocking value for businesses across every sector. And &lt;strong&gt;cloud-native infrastructure software vendors&lt;/strong&gt; are a big winner here - by 2020, the publicly traded companies in this niche were &lt;strong&gt;worth nearly half a trillion dollars&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Many of the leading companies &lt;strong&gt;more than doubled their market value last year&lt;/strong&gt;, followed by a healthy pipeline of earlier-stage competitors valued at more than $1 billion each. Take the cloud identity provider &lt;strong&gt;Okta&lt;/strong&gt; as an example here - it’s doing really well and reported the second quarter’s results that &lt;a href="https://www.bloomberg.com/news/videos/2021-09-02/okta-ceo-discusses-outlook-video"&gt;beat its expectations&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iFrg-VZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/B1yAMsOS5-FhZFKVPFldDrWxD8rDnNswp4FgX0ehXYb0bielNCsmdsZoY5c3jXcxFCMa6BBernMnawtC7cM9nvu-EER40SyzGMDRzxOvbynwLqG8L7F0u5Dyn8AhidEIV5xi5G1K%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iFrg-VZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/B1yAMsOS5-FhZFKVPFldDrWxD8rDnNswp4FgX0ehXYb0bielNCsmdsZoY5c3jXcxFCMa6BBernMnawtC7cM9nvu-EER40SyzGMDRzxOvbynwLqG8L7F0u5Dyn8AhidEIV5xi5G1K%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://drive.google.com/drive/folders/1hItH_6KetZA-pP7b7t6afI_iF7uHmJP9"&gt;Bain &amp;amp; Company&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;_____&lt;/p&gt;

&lt;h2&gt;Security&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Microsoft&lt;/strong&gt; is having one hell of a ride this year when it comes to security. Naturally, Microsoft isn't the only tech giant having vulnerability issues today. But in 2021, the company released a patch for&lt;strong&gt; at least one zero-day vulnerability each month &lt;/strong&gt;except for May. The vulnerabilities were found across Microsoft’s operating systems, platforms, and applications that may expose their customers to risk. Consider that attacks like SolarWinds, Colonial Pipeline, and HAFNIUM happened mostly due to Microsoft vulnerabilities. &lt;/p&gt;

&lt;p&gt;And by the end of August, the &lt;strong&gt;“worst cloud vulnerability you can imagine”&lt;/strong&gt; was discovered in Microsoft Azure, impacting some 30% of Cosmos DB customers. Apparently, Cosmos DB gave read/write access for every database in the service to attackers who exploited the bug. This vulnerability was part of the system for “at least several months, possibly years.”&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.cybereason.com/blog/1460-day-old-known-vulnerability-catches-microsoft-off-guard"&gt;Cybereason&lt;/a&gt;, &lt;a href="https://arstechnica.com/information-technology/2021/08/worst-cloud-vulnerability-you-can-imagine-discovered-in-microsoft-azure/"&gt;Ars Technica&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The&lt;strong&gt; AWS Tokyo outage&lt;/strong&gt; can be a lesson for everyone. The outage happened because of a problem with multiple core network devices that were used to connect network traffic utilizing Direct Connect to all the Availability Zones within the AP-Northeast-1 region. &lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://thenewstack.io/what-you-can-learn-from-the-aws-tokyo-outage/"&gt;The New Stack&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;_____&lt;/p&gt;

&lt;h2&gt;Food for thought&lt;/h2&gt;

&lt;p&gt;The former Head of Open Source Strategy at AWS, Matt Asay, published an article immediately after leaving the company to tell us all &lt;strong&gt;what we don’t know about working with AWS&lt;/strong&gt;. A fascinating glimpse into the cloud mogul’s inner workings that helps to understand the company values and what makes Amazon employees tick.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.infoworld.com/article/3631376/what-you-dont-know-about-working-with-aws.html"&gt;InfoWorld&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;_____&lt;/p&gt;

&lt;h2&gt;New in CAST AI&lt;/h2&gt;

&lt;p&gt;And here are some new product features hot off the press:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Cluster headroom and Node constraints&lt;/strong&gt; policies are now independent and can be set separately.&lt;/li&gt;
&lt;li&gt;Customers can now set &lt;strong&gt;annotation on the pod level&lt;/strong&gt; that would prevent Evictor from removing the node that hosts the pod. More details about annotations and labels used by Evictor can be found in our &lt;a href="https://docs.cast.ai/guides/evictor/#rules-override-for-specific-pods-or-nodes"&gt;documentation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The node deletion policy now removes nodes that are marked by Evictor immediately, ignoring time delay set for empty nodes in the “Node deletion” policy. That way, customers can &lt;strong&gt;avoid paying for nodes&lt;/strong&gt; that were marked as unschedulable.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Improved cluster onboarding flow&lt;/strong&gt;. Customers are no longer required to enter the access key and secret details, the onboarding script takes care of these details now.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Organizational roles &lt;/strong&gt;have been released. Every organization now has Owner, Member, or Viewer (read-only) roles that can be managed in our console.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>cloudnative</category>
      <category>kubernetes</category>
      <category>devops</category>
      <category>aws</category>
    </item>
    <item>
      <title>How to build a chat into an Angular app with TalkJS</title>
      <author>Aswin Rajeev</author>
      <pubDate>Fri, 01 Oct 2021 10:03:15 +0000</pubDate>
      <link>https://dev.to/talkjs/how-to-build-a-chat-into-an-angular-app-with-talkjs-1moo</link>
      <guid>https://dev.to/talkjs/how-to-build-a-chat-into-an-angular-app-with-talkjs-1moo</guid>
      <description>&lt;p&gt;In today’s tutorial, we will take a look at how we can integrate the &lt;a href="https://talkjs.com/"&gt;TalkJS Chat API&lt;/a&gt; into an existing Angular application. AllParts is an imaginary e-commerce website that specializes in automobile spare parts and accessories. They have an Angular application that is integrated with Firebase. It allows users to authenticate themselves using Google and then purchase spare parts and essentials for automobiles. It is not a full-fledged application but goes well with this tutorial. You can set up your project from &lt;a href="https://github.com/aswinrajeevofficial/TalkJS-Angular"&gt;GitHub&lt;/a&gt; before getting started and if you’ve already done that, let’s get going.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o0dUFtVv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2lqf8nd1ajhiz4qv2gq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o0dUFtVv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2lqf8nd1ajhiz4qv2gq.png" alt="Angular application with TalkJS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-talkjs-to-an-angular-application"&gt;
  &lt;/a&gt;
  Adding TalkJS to an Angular application
&lt;/h2&gt;

&lt;p&gt;To add TalkJS to your Angular application, use the following command:&lt;br&gt;
&lt;code&gt;npm install talkjs –save&lt;/code&gt;&lt;br&gt;
This will add the TalkJS dependency to your current project. Next, we will add a component and a service to the project. A service in Angular is used to separate out the component code from functions that are used commonly and also to keep the code modular and scalable. To create a new service, we use the following command:&lt;br&gt;
&lt;code&gt;ng generate service talk&lt;/code&gt;&lt;br&gt;
There is also a shorthand equivalent of this command which is &lt;code&gt;ng g s talk&lt;/code&gt;. This will create a new service called &lt;code&gt;TalkService&lt;/code&gt;. Once that is created we will also create a component for our live chat. To create a new component, we will use the following command:&lt;br&gt;
&lt;code&gt;ng generate component talkjs&lt;/code&gt;&lt;br&gt;
Just like before, the shorthand equivalent of this command is &lt;code&gt;ng g c talkjs&lt;/code&gt;. Once these prerequisite steps are out of the way, we can get started with the actual integration.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#application-walkthrough"&gt;
  &lt;/a&gt;
  Application walkthrough
&lt;/h2&gt;

&lt;p&gt;Before we integrate TalkJS into our application, let’s take a look at the existing application itself. It is intended to be an e-commerce website specializing in automobile spare parts and accessories. Customers can sign in with Google and view products from different manufacturers which they can purchase. The application has a home page with a simple banner and also the products page which only logged-in users can access.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#using-talkjs-to-add-live-chat"&gt;
  &lt;/a&gt;
  Using TalkJS to add live chat
&lt;/h2&gt;

&lt;p&gt;Our service code looks like this right now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;providedIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TalkService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;currentUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Talk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have added a variable for the current user which is of the TalkJS User type. We will create 4 methods inside it. They are given below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-1-async-createuserapplicatonuser-any"&gt;
  &lt;/a&gt;
  Method 1: async createUser(applicatonUser: any)
&lt;/h3&gt;

&lt;p&gt;The code for this method is given below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;applicationUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Talk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user$&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Talk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;applicationUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;applicationUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;photoUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;applicationUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;photoUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;applicationUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;role&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method is used to map the users in the application to a TalkJS User object. This allows TalkJS to identify the users in the system. It also allows keeping track of their conversations. In our case, the user logged in through Google will be mapped to this object so that his name and photo appear inside the chatbox.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-2-async-createcurrentsession"&gt;
  &lt;/a&gt;
  Method 2: async createCurrentSession()
&lt;/h3&gt;

&lt;p&gt;This method is used to initialize the user’s current active session and also authenticate TalkJS. TalkJS has an &lt;code&gt;appId&lt;/code&gt; that is assigned to each account which is used to authenticate it. To find your appId, simply login to your TalkJS dashboard and you should see it under the Settings tab. You have different appIds for your test environment as well as your live environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;createCurrentSession&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Talk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;photoUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;photoURL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Talk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
         &lt;span class="na"&gt;appId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;YOUR_APP_ID_HERE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;me&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentUser&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is also where we initialize our currently logged-in user. If you look at the code above, you can see that we have retrieved the current user using &lt;code&gt;this.user$&lt;/code&gt; and the attributes from it match the one returned from Google after successfully signing in.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-3-async-getorcreateconversationsession-talksession-otherapplicationuser-any"&gt;
  &lt;/a&gt;
  Method 3: async getOrCreateConversation(session: Talk.Session, otherApplicationUser: any)
&lt;/h3&gt;

&lt;p&gt;This function creates the conversation between the current user and the other user and also links it up with the session that was created before. This is where you set the participants for the conversation. System messages in TalkJS can also be set up here by adding the &lt;code&gt;conversation.setAttributes()&lt;/code&gt; method and setting an array of strings to a property called &lt;code&gt;welcomeMessages&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;getOrCreateConversation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Talk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;otherApplicationUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;otherUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;otherApplicationUser&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;conversation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getOrCreateConversation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Talk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;oneOnOneId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;otherUser&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="nx"&gt;conversation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setParticipant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentUser&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;conversation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setParticipant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;otherUser&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;conversation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttributes&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;welcomeMessages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome to AllParts Support Chat!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Leave your message here and one of our support agents will assist you soon.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;conversation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#method-4-async-createpopupsession-talksession"&gt;
  &lt;/a&gt;
  Method 4: async createPopup(session: Talk.Session)
&lt;/h3&gt;

&lt;p&gt;The last method is to create a popup chat towards the right bottom corner of our screen. The popup UI provided by TalkJS out-of-the-box is really handy in scenarios like this. If you require a full-fledged chatbox or an inbox, they are also provided within TalkJS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;createPopup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Talk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;supportUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sebastien&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sebastian@allparts.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;photoUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://randomuser.me/api/portraits/men/71.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;conversation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getOrCreateConversation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;supportUser&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createPopup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;conversation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;keepOpen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above, the support user is hardcoded, but when you have your live application, you can use the credentials of actual people that the users can talk to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#talkjs-component-walkthrough"&gt;
  &lt;/a&gt;
  TalkJS Component Walkthrough
&lt;/h2&gt;

&lt;p&gt;We have completed writing up all our helper methods, now we just need to set up our TalkJS component that will contain the popup chatbox. The TalkjsComponent consists of just a single line that has a &lt;code&gt;div&lt;/code&gt; with an id of &lt;code&gt;talkjsContainer&lt;/code&gt;. It also has the &lt;code&gt;*ngIf&lt;/code&gt; directive that checks if the user is logged in or not. For unauthenticated users, the chatbox will not appear.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;*ngIf = &lt;/span&gt;&lt;span class="s"&gt;"auth.user$ | async"&lt;/span&gt; &lt;span class="na"&gt;#talkjsContainer&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"height: 500px"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside the TypeScript file for the component, we have the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TalkjsComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;popup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Talk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Popup&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Talk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ViewChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;talkjsContainer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;talkjsContainer&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ElementRef&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;talkService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TalkService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AuthService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createPopup&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;createPopup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;talkService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createCurrentSession&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;popup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;talkService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createPopup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;popup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;talkjsContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use the &lt;code&gt;@ViewChild&lt;/code&gt; decorator to access the HTML element from the component code to mount our chatbox. We have the AuthService which is used for authenticating the user. The component implements the &lt;code&gt;OnInit&lt;/code&gt; interface which provides the lifecycle hook of &lt;code&gt;ngOnInit()&lt;/code&gt;. This gets triggered after component initialization and this is where we call the &lt;code&gt;createPopup()&lt;/code&gt; method to create the chatbox and mount it to our component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#full-demo"&gt;
  &lt;/a&gt;
  Full Demo
&lt;/h2&gt;

&lt;p&gt;Below is a full demo of the application. We can see that the user is logged in and his username is displayed at the top. For authenticated users, the chatbox option is available at the bottom right corner and they can also view the products.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tHiKoLJG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/plsz6zq8iqqhcoojdu9k.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tHiKoLJG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/plsz6zq8iqqhcoojdu9k.gif" alt="Angular app with TalkJS Full Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;There you have it. We have successfully integrated TalkJS to our existing Angular application called AllParts. We didn’t go over the Angular code much in-depth and the tutorial assumes that the user has some basic knowledge of Angular. The entire code is available on &lt;a href="https://github.com/aswinrajeevofficial/TalkJS-Angular"&gt;GitHub&lt;/a&gt;. Make sure you create a Firebase project on Firebase Console and use the credentials provided there to authenticate your application with Firebase.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>angular</category>
      <category>tutorial</category>
      <category>typescript</category>
    </item>
    <item>
      <title>AES Encryption in Linux</title>
      <author>Ashutosh Kumar</author>
      <pubDate>Fri, 01 Oct 2021 09:42:05 +0000</pubDate>
      <link>https://dev.to/blastoise/aes-encryption-in-linux-585f</link>
      <guid>https://dev.to/blastoise/aes-encryption-in-linux-585f</guid>
      <description>&lt;p&gt;Ever felt the need of hiding stuff from the world. In this article, I'll show you how you can encrypt and decrypt your data using the AES Encryption technique. We'll use the openssl command for this purpose.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-symmetric-encryption"&gt;
  &lt;/a&gt;
  What is Symmetric Encryption?
&lt;/h2&gt;

&lt;p&gt;Symmetric encryption is a type of encryption where only one key (a secret key) is used to both encrypt and decrypt data. By using symmetric encryption algorithms, data is converted to a form that cannot be understood by anyone who does not possess the secret key to decrypt it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-advanced-encryption-standard-aes"&gt;
  &lt;/a&gt;
  What is Advanced Encryption Standard (AES)?
&lt;/h2&gt;

&lt;p&gt;Advanced Encryption Standard (also known as Rijndael), is one of the best symmetric encryption algorithm. AES is a &lt;a href="https://en.wikipedia.org/wiki/Block_cipher"&gt;block encryption algorithm&lt;/a&gt; and thus supports five modes which are as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ECB mode: Electronic Code Book mode&lt;/li&gt;
&lt;li&gt;CBC mode: Cipher Block Chaining mode&lt;/li&gt;
&lt;li&gt;CFB mode: Cipher Feedback mode&lt;/li&gt;
&lt;li&gt;OFB mode: Output Feedback mode&lt;/li&gt;
&lt;li&gt;CTR mode: Counter mode&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this article, we will encrypt our data using CBC mode. ECB is generally not preferred as it is not secure. The command-line tool that we will use is &lt;strong&gt;openssl&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-openssl"&gt;
  &lt;/a&gt;
  What is OpenSSL
&lt;/h2&gt;

&lt;p&gt;OpenSSL is a robust, commercial-grade, and full-featured toolkit for the Transport Layer Security (TLS) and Secure Sockets Layer (SSL) protocols. It is also a general-purpose cryptography library. OpenSSL supports many different cryptographic operations, such as symmetric key encryption, public/private key pair generation, public-key encryption, hash functions, digital signatures, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;openssl&lt;/strong&gt; comes pre-installed in most Linux distributions. If it is not pre-installed then you can install it using your Linux package manager.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#encrypting-a-file"&gt;
  &lt;/a&gt;
  Encrypting a file
&lt;/h2&gt;

&lt;p&gt;The following command is used to encrypt a file:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;openssl enc -aes-256-cbc -md sha512 -pbkdf2 -iter 250000 -salt -in InputFilePath -out OutputFilePath&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After the execution of the command, it will ask you for setting the passphrase (secret key). Without the passphrase, nobody in this world can decrypt your file because brute-forcing AES is very difficult.&lt;/p&gt;

&lt;p&gt;Let's learn about the different options that we provided.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;openssl&lt;/strong&gt; is the command-line tool that we are using.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;enc&lt;/strong&gt; is used to specify the cipher name&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;-aes-256-cbc&lt;/strong&gt; is the cipher name along with the mode of operation which is CBC(Cipher Block Chaining mode)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;-md sha512&lt;/strong&gt; specifies which digest to use for the generation of the key from the passphrase. The default value from version 1.1.0 is SHA256. Before version 1.1.0 MD5 was the default digest.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;-pbkdf2&lt;/strong&gt; specifies to use PBKDF2 (Password-Based Key Derivation Function 2) algorithm&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;-iter 250000&lt;/strong&gt; is overriding the default count of iterations for the password. High values increase the time required to brute-force the resulting file. This option enables the use of the PBKDF2 algorithm to derive the key.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;-salt&lt;/strong&gt; Use salt in Key Derivation Function(KDF). This is the default behaviour and thus this option is not required.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#decrypting-a-file"&gt;
  &lt;/a&gt;
  Decrypting a file
&lt;/h2&gt;

&lt;p&gt;Use the same command but add &lt;strong&gt;-d&lt;/strong&gt; option to it. The command is as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;openssl enc -aes-256-cbc -d -md sha512 -pbkdf2 -iter 250000 -salt -in InputFilePath -out OutputFilePath&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#encrypting-and-decrypting-multiple-files"&gt;
  &lt;/a&gt;
  Encrypting and Decrypting Multiple Files
&lt;/h2&gt;

&lt;p&gt;The above command works only on a single file thus to encrypt and decrypt multiple files you can first convert it into a &lt;strong&gt;tar&lt;/strong&gt; file (you can even compress it) and then apply the same command.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-personal-preference"&gt;
  &lt;/a&gt;
  My Personal Preference
&lt;/h2&gt;

&lt;p&gt;I also use the same command but I also add &lt;strong&gt;-a&lt;/strong&gt; and &lt;strong&gt;-A&lt;/strong&gt; options to my command. &lt;strong&gt;-a&lt;/strong&gt; is used for Base64 encode/decode and &lt;strong&gt;-A&lt;/strong&gt; is used with &lt;strong&gt;-a&lt;/strong&gt; to specify base64 buffer as a single line.&lt;/p&gt;

&lt;p&gt;Thus the command I use for encryption and decryption is:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Encryption&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;openssl enc -aes-256-cbc -a -A -md sha512 -pbkdf2 -iter 250000 -salt -in InputFilePath -out OutputFilePath&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Decryption&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;openssl enc -aes-256-cbc -a -A -d -md sha512 -pbkdf2 -iter 250000 -salt -in InputFilePath -out OutputFilePath&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#fun-fact"&gt;
  &lt;/a&gt;
  Fun Fact
&lt;/h2&gt;

&lt;p&gt;This is the same encryption algorithm that was used by Elliot Alderson in the TV series Mr Robot to encrypt data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://unix.stackexchange.com/a/507132"&gt;Unix Stackexchange&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope this article helped you learn about using AES encryption.&lt;/p&gt;

&lt;p&gt;Questions, suggestions, a word of thanks is always encouraged.&lt;/p&gt;

</description>
      <category>linux</category>
      <category>bash</category>
      <category>archlinux</category>
      <category>ubuntu</category>
    </item>
    <item>
      <title>GitHub Issue Forms</title>
      <author>Anish De</author>
      <pubDate>Fri, 01 Oct 2021 09:34:02 +0000</pubDate>
      <link>https://dev.to/byteslash/github-issue-forms-3n14</link>
      <guid>https://dev.to/byteslash/github-issue-forms-3n14</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; allowed us to make pre-build issue templates in the form of markdown files which the person reporting the bug could fill out. This was better than presenting the person reporting the bug with a blank textbox but it could get a bit clumsy at times and many wouldn't follow the format. GitHub now has got an option to build a form that one can fill out as a bug report. Note that Issue forms are in beta currently.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;GitHub Issue forms are currently only available for public repositories so we need a public repository to work with.&lt;/p&gt;

&lt;p&gt;Next, we need to create a folder called &lt;code&gt;.github/ISSUE_TEMPLATE&lt;/code&gt; and then add a &lt;code&gt;yml&lt;/code&gt; file. Let us call this &lt;code&gt;bug_report.yml&lt;/code&gt;.&lt;br&gt;
Our path will be &lt;code&gt;.github/ISSUE_TEMPLATE/bug_report.yml&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#filling-out-the-template-raw-yml-endraw-file"&gt;
  &lt;/a&gt;
  Filling out the template &lt;code&gt;yml&lt;/code&gt; file
&lt;/h2&gt;

&lt;p&gt;We are going to make a simple form to file a bug report so let's get started&lt;/p&gt;

&lt;p&gt;First, let us add a name:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;🐛Bug Report&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will also add a description, title, and some labels&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;File a bug report here&lt;/span&gt;
&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;[BUG]:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;bug"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also add an assignee (this is optional) -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;assignees&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;AnishDe12020"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we are done with metadata, let us start with the body of the issue - &lt;/p&gt;

&lt;p&gt;Let us start with adding a small text -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;markdown&lt;/span&gt;
    &lt;span class="na"&gt;attributes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;Thanks for taking the time to fill out this bug report!!!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We don't want the user to file a bug report if a report for that bug already exists so let us add a checkbox&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt; &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;checkboxes&lt;/span&gt;
    &lt;span class="s"&gt;id&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s"&gt;new-bug&lt;/span&gt;
    &lt;span class="s"&gt;attributes&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Is there an existing issue for this?&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Please search to see if an issue already exists for the bug you encountered.&lt;/span&gt;
      &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;I have searched the existing issues&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we have specified the &lt;code&gt;type&lt;/code&gt; as a checkbox and added the &lt;code&gt;label&lt;/code&gt; parameter and &lt;code&gt;description&lt;/code&gt; attributes. We have then added a &lt;code&gt;label&lt;/code&gt; parameter to the checkbox and made it a required field as we always want it to be checked by the user.&lt;/p&gt;

&lt;p&gt;Now let us ask the user for a description of the bug -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;textarea&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bug-description&lt;/span&gt;
    &lt;span class="na"&gt;attributes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Description of the bug&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Tell us what bug you encountered and what should have happened&lt;/span&gt;
    &lt;span class="na"&gt;validations&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how we add an &lt;code&gt;id&lt;/code&gt; to the field (this is optional) and we have also added a &lt;code&gt;description&lt;/code&gt; attribute. We can also add a &lt;code&gt;placeholder&lt;/code&gt; attribute but let us leave that for this one. We have also made the field required by setting the &lt;code&gt;required&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt; in the &lt;code&gt;validations&lt;/code&gt; section. The &lt;code&gt;label&lt;/code&gt; attribute is the only required parameter.&lt;/p&gt;

&lt;p&gt;We can also ask them to tell is the steps to reproduce the bug&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;textarea&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;steps-to-reproduce&lt;/span&gt;
    &lt;span class="na"&gt;attributes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Steps To Reproduce&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Steps to reproduce the behavior.&lt;/span&gt;
      &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Please write the steps in a list form&lt;/span&gt;
    &lt;span class="na"&gt;validations&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is similar to the &lt;code&gt;bug-report&lt;/code&gt; field but we have added a &lt;code&gt;placeholder&lt;/code&gt; this time.&lt;/p&gt;

&lt;p&gt;Now let us see how we can add a dropdown. Say we got 5 versions of our apps and want the users to tell us in which version of the app the issue is occurring. We will also give them the option to choose multiple versions in case the issue is occurring on more than 1 version&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dropdown&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;versions&lt;/span&gt;
    &lt;span class="na"&gt;attributes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Which version of the app are you using?&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;If this issue is occurring on more than 1 version of the app, select the appropriate versions.&lt;/span&gt;
      &lt;span class="na"&gt;multiple&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
       &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;1.0.0&lt;/span&gt;
       &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;1.1.0&lt;/span&gt;
       &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;1.2.0&lt;/span&gt;
       &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;2.0.0&lt;/span&gt;
       &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;2.1.0&lt;/span&gt;
    &lt;span class="na"&gt;validations&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At last, this is how our &lt;code&gt;bug_report.yml&lt;/code&gt; should look like -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;🐛Bug Report&lt;/span&gt;
&lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;File a bug report here&lt;/span&gt;
&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;[BUG]:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;bug"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;span class="na"&gt;assignees&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;AnishDe12020"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;markdown&lt;/span&gt;
    &lt;span class="na"&gt;attributes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;Thanks for taking the time to fill out this bug report!!!&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;checkboxes&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;new-bug&lt;/span&gt;
    &lt;span class="na"&gt;attributes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Is there an existing issue for this?&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Please search to see if an issue already exists for the bug you encountered.&lt;/span&gt;
      &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;I have searched the existing issues&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;textarea&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bug-description&lt;/span&gt;
    &lt;span class="na"&gt;attributes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Description of the bug&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Tell us what bug you encountered and what should have happened&lt;/span&gt;
    &lt;span class="na"&gt;validations&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;textarea&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;steps-to-reproduce&lt;/span&gt;
    &lt;span class="na"&gt;attributes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Steps To Reproduce&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Steps to reproduce the behavior.&lt;/span&gt;
      &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Please write the steps in a list form&lt;/span&gt;
    &lt;span class="na"&gt;validations&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dropdown&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;versions&lt;/span&gt;
    &lt;span class="na"&gt;attributes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Which version of the app are you using?&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;If this issue is occurring on more than 1 version of the app, select the appropriate versions.&lt;/span&gt;
      &lt;span class="na"&gt;multiple&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
       &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;1.0.0&lt;/span&gt;
       &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;1.1.0&lt;/span&gt;
       &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;1.2.0&lt;/span&gt;
       &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;2.0.0&lt;/span&gt;
       &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;2.1.0&lt;/span&gt;
    &lt;span class="na"&gt;validations&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you should commit the file.&lt;/p&gt;

&lt;p&gt;Now if we try to create an issue, we will be presented with this page - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FmqZUrSh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633067377439/effLTQIx9p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FmqZUrSh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633067377439/effLTQIx9p.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We would see multiple options if we made more templates but we have only one right now so let us see if it works&lt;/p&gt;

&lt;p&gt;Notice how the label and assignee has been added - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r8iaqpzZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633067599150/BU5zmoXbr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r8iaqpzZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633067599150/BU5zmoXbr.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On submitting the issue, it will be created like any other issue - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hIO8JsFb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633067665394/dVguetkPb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hIO8JsFb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633067665394/dVguetkPb.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see the repository for this tutorial &lt;a href="https://github.com/AnishDe12020/issue-forms"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also see the schema for GitHub issue forms &lt;a href="https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/syntax-for-githubs-form-schema"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
    </item>
    <item>
      <title>Python Guide for JS-devs</title>
      <author>Julius Colliander Celik</author>
      <pubDate>Fri, 01 Oct 2021 09:22:00 +0000</pubDate>
      <link>https://dev.to/panprices/python-for-js-devs-lk7</link>
      <guid>https://dev.to/panprices/python-for-js-devs-lk7</guid>
      <description>&lt;p&gt;I have been using JavaScript for most of my career, but I recently started working at a company that uses Python for most of its stack. Even though Python is easy to get started with, a couple of quirks are easy to get stuck on, and some best practices that I wish I knew earlier. Here is a list of my most significant hurdles and what I learned from the perspective of a JavaScript developer. Hopefully, it's useful for anyone else doing the same transition.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#six-of-one-half-dozen-of-the-other"&gt;
  &lt;/a&gt;
  Six of One, Half Dozen of the Other
&lt;/h2&gt;

&lt;p&gt;First, let's take a quick look at similar concepts with different names in the two languages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#errors-and-exceptions"&gt;
  &lt;/a&gt;
  Errors and Exceptions
&lt;/h3&gt;

&lt;p&gt;Errors in JavaScript are called Exceptions in Python. They are otherwise identical in any meaningful way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#null-and-none"&gt;
  &lt;/a&gt;
  null and None
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;null&lt;/code&gt; in JavaScript is &lt;code&gt;None&lt;/code&gt; in Python. There is no equivalent of &lt;code&gt;undefined&lt;/code&gt; in Python.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#abbreviated-keywords"&gt;
  &lt;/a&gt;
  Abbreviated keywords
&lt;/h3&gt;

&lt;p&gt;Some keywords in Python are abbreviations of the actual words.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;String&lt;/code&gt; is called &lt;code&gt;str&lt;/code&gt; in Python.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Boolean&lt;/code&gt; is called &lt;code&gt;bool&lt;/code&gt; in Python.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;else if&lt;/code&gt; is called &lt;code&gt;elif&lt;/code&gt; in Python. 🤯&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I got stuck for longer than I wanted to admit the first time I tried to write &lt;code&gt;else if&lt;/code&gt;. It's a strange quirk, but you will adapt fast if you know to look out for it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#objects-and-dictionaries"&gt;
  &lt;/a&gt;
  Objects and Dictionaries
&lt;/h2&gt;

&lt;p&gt;Objects in JavaScript are called Dictionaries in Python. There are two distinctions. Firstly dot-notation doesn't work in Python.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Sherlock"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"address"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Baker Street"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# This works
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# This doesn't work
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The other distinction is that Python lacks an equivalent of &lt;code&gt;undefined&lt;/code&gt; in JavaScript. This means that if you try to access an undefined property, you will get an exception.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"John"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Doctor"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"address"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Throws KeyError: 'address'
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To avoid crashing whenever you want to access an optional property, you can use &lt;code&gt;.get()&lt;/code&gt;. &lt;code&gt;.get()&lt;/code&gt; is a method that returns the value of a key if it exists in a dictionary. If it can't be found &lt;code&gt;.get()&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt;. You can also give &lt;code&gt;.get()&lt;/code&gt; an optional default parameter that will be returned instead of &lt;code&gt;None&lt;/code&gt; if the key is undefined.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Mycroft"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"occupation"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Government official"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# prints Mycroft
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# prints None
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'age'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# prints 35
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tuples-and-lists"&gt;
  &lt;/a&gt;
  Tuples and Lists
&lt;/h2&gt;

&lt;p&gt;In Python, there are two equivalents to JavaScript's arrays. In most cases, you use lists, and they fill the same purpose.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;clues&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"chair"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"safe"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"saucer of milk"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;clue&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;clues&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;clue&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; is a helpful clue"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is another native data type that you can use to create collections of elements. If you want to return two values from a function or keep pairs of values, you can use tuples. It is often used instead of dictionaries if you want something a bit less verbose. Tuples are read-only lists with some extra syntax sugar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_nemesis&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"James"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Moriarty"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1835&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Return a tuple
&lt;/span&gt;
&lt;span class="c1"&gt;# User is a tuple here
&lt;/span&gt;&lt;span class="n"&gt;nemesis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_nemesis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nemesis&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;nemesis&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# Prints James Moriarty
&lt;/span&gt;&lt;span class="n"&gt;nemesis&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"John"&lt;/span&gt; &lt;span class="c1"&gt;# This throws an Exception
&lt;/span&gt;
&lt;span class="c1"&gt;# You can destructure a tuple
&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;born&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_nemesis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# The parenthesis are optional when destructuring
&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;born&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_nemesis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#list-and-dict-comprehension"&gt;
  &lt;/a&gt;
  List (and Dict) comprehension
&lt;/h2&gt;

&lt;p&gt;List comprehension is one of the most special features if you come from JavaScript. In JavaScript you can quickly compose arrays by using array functions like &lt;code&gt;.map()&lt;/code&gt;, &lt;code&gt;.sort()&lt;/code&gt;, and &lt;code&gt;.filter()&lt;/code&gt;. Python has a couple of those array functions, but they are a bit ugly to use. Here is an example of doubling only even numbers from a list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The example above in Javascript is equivalent to this example below in Python:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can't chain list functions as they aren't a part of the list class like they are a part of the array prototype in JavaScript. In Python, you can use list comprehensions instead.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;           &lt;span class="c1"&gt;# new value (map)
&lt;/span&gt;  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;  &lt;span class="c1"&gt;# list to iterate
&lt;/span&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="c1"&gt;# filter
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are even dictionary comprehensions to create dictionaries from lists (or other iterables) quickly 🤩:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Results in {1: False, 2: True, 3: False, 4: True}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#concurrency"&gt;
  &lt;/a&gt;
  Concurrency
&lt;/h2&gt;

&lt;p&gt;This topic is too large to cover in this post, but it's good to know that there are traps that you should look out for. In JavaScript, it's (almost) not possible to do any blocking task. This allows you to know that every library you use is guaranteed to handle concurrency benevolently. And it's difficult to end up in deadlocks.&lt;/p&gt;

&lt;p&gt;Python supports synchronous statements, which can mean that you can block your thread for long times. This makes some code easier to write but concurrency a bit more complicated.&lt;/p&gt;

&lt;p&gt;Python has two different methods to handle concurrency. You can use traditional OS threads. Additionally, Python recently added a non-blocking one threaded asynchronous native library called asyncio! It is very similar to Node's event loop on the surface, but there are some differences.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ocC0vuq8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d6gxnnn1aue6l36pwj4w.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ocC0vuq8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d6gxnnn1aue6l36pwj4w.jpeg" alt='Butterfly meme where a guy says "Is this Node?" to AsyncIO'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Firstly the library is a lot more complicated and low-level than Node. Async I/O operations are a native part of the JavaScript language (actually not the language but the execution environment), and the syntax feels very native. In Python, you get access to lots of low-level components of the event loop. You have to start the event loop yourself, and depending on if you are inside the loop or not, you should use different functions to control the event loop. It can be challenging to remember the various quirks.&lt;/p&gt;

&lt;p&gt;Secondly, Python's support for synchronous statements can be a significant drawback when using asyncio. If you accidentally call a blocking statement, you block the whole thread. You have to be careful and explicitly run all blocking code in "executors".&lt;/p&gt;

&lt;p&gt;Even though there are quirks, I still prefer asyncio to thread management. You can learn more about asyncio by watching &lt;a href="https://youtu.be/bs9tlDFWWdQ"&gt;this video&lt;/a&gt; or by reading &lt;a href="https://www.amazon.com/Using-Asyncio-Python-Understanding-Asynchronous/dp/1492075337"&gt;this book&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The last tip to remember is never to mix asyncio and threads. The documentation to asyncio is imperfect, and the documentation for using threads and asyncio is nonexistent. I have wasted too much time trying to get it to work to attempt to mix them again.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lambdas"&gt;
  &lt;/a&gt;
  Lambdas
&lt;/h2&gt;

&lt;p&gt;I love anonymous arrow functions in JavaScript. I use them all the time, especially if I want a small function with 3-5 statements. Python has a similar concept called lambda functions, but they have one fatal flaw. Lambdas can only contain one statement. So it's not possible to have a multiline lambda. You will have to declare a proper function for those cases. 👎&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#package-management-and-reproducible-environments"&gt;
  &lt;/a&gt;
  Package Management and Reproducible Environments
&lt;/h2&gt;

&lt;p&gt;npm is one of the best features of Node. It's undeniable that the quality of the available packages in Python is not as good. Additionally, the documentation is often much better and nicer looking for JavaScript packages. I highly suspect the reason for that is that there is considerable overlap between JavaScript developers and web developers. 😅&lt;/p&gt;

&lt;p&gt;But the more significant hurdle was not the availability of pip packages. It was the actual package manager that I missed the most. When you use npm, you install packages locally for a specific project. This means that you can have different versions of the same library in different Node projects on your computer simultaneously. With pip, you can only install packages globally.&lt;/p&gt;

&lt;p&gt;This sounds more stupid than it is. Python has solved the isolation using another method. It is best practice to set up a virtual environment for every Python project. You explicitly tell your shell to activate a virtual environment, and when it is activated, the set of global packages is entirely separate from the default environment.&lt;/p&gt;

&lt;p&gt;Even though this works fine, I still mess up and forget to activate my virtual environments often and accidentally install libraries globally all the time. I miss how easy it is to use npm. Two other features I miss are npm scripts and good package version management.&lt;/p&gt;

&lt;p&gt;To replace pip, I have started using pipenv. It manages my virtual environment and package versions almost as well as npm. It also supports scripts. The best part is that it doesn't matter if I have activated the virtual environment when I run the scripts. Pipenv automatically runs them in my virtual environment regardless.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-standard-library"&gt;
  &lt;/a&gt;
  The standard library
&lt;/h2&gt;

&lt;p&gt;Python has a fantastic standard library! The rich native library compensates for the lack of community-produced pip packages. I enjoy finding native libraries that solve my issues cause then I know that I don't have to compare multiple open source libraries like I have to do with npm packages.&lt;/p&gt;

&lt;p&gt;The Node libraries are very lean and only offer the necessary native operations that must be a part of the standard library, like providing I/O operations. The standard Python libraries often overlap in functionality, which is unheard of in the JavaScript world.&lt;/p&gt;

&lt;p&gt;The best example of how extensive the libraries are is if you google "Get current timestamp using Python". You will see &lt;a href="https://www.geeksforgeeks.org/get-current-timestamp-using-python/"&gt;this article&lt;/a&gt; in the top results. The article suggests three different methods, using three different standard libraries (&lt;code&gt;time&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt;, &lt;code&gt;calendar&lt;/code&gt;).&lt;/p&gt;




&lt;p&gt;Can you think of any other quirks that took time for you to figure out? Please leave a comment!&lt;/p&gt;

</description>
      <category>python</category>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>React.js : beginner guide, Where To Start</title>
      <author>Shreyansh sheth</author>
      <pubDate>Fri, 01 Oct 2021 09:03:33 +0000</pubDate>
      <link>https://dev.to/shreyanshsheth/react-js-beginner-guide-where-to-start-3jgc</link>
      <guid>https://dev.to/shreyanshsheth/react-js-beginner-guide-where-to-start-3jgc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-react"&gt;What Is React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-it-works"&gt;How It Works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#suitable"&gt;Is It Suitable For You&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#roadmap"&gt;Roadmap To Learn React&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-react"&gt;
  &lt;/a&gt;
  What Is React &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;React Is A Javascript Library To Build User Interfaces. Think Of It As Simple Web Library That You Can Inject Through &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; Tag. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#main-features-of-react-that-attracts-peoples"&gt;
  &lt;/a&gt;
  Main Features Of React That Attracts Peoples
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;It Has Huge Community&lt;/li&gt;
&lt;li&gt;Library Is Declarative And Easy-To-Understand&lt;/li&gt;
&lt;li&gt;It Is Component Base&lt;/li&gt;
&lt;li&gt;Back By Facebook And Used In Many Morden Web Applications&lt;/li&gt;
&lt;li&gt;Different Production Ready Frameworks Build upon It&lt;/li&gt;
&lt;li&gt;You Can Use JSX To Write Components And It Makes It So Much Easy Rather Than Using Templates&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How It Works &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It Uses Virtual Dom To Handle State And All Its Component And React Based On State Changes. And Updating Virtual Dom Update Browser Dom.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;h1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;heading&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hey reader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;React Is Just Library And If You Want To Work With Its True Potential You Have To Use Bable To Transpile All JSX into browser-javascript&lt;/p&gt;

&lt;p&gt;Above Component In Jsx is littraly&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'heading'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;hey reader&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But You Don't Have To Worry About This Transpiling Things Because All The Framework Build On Top Of React Just Do That Automatically.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-it-suitable-for-you"&gt;
  &lt;/a&gt;
  Is It Suitable For You &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;For Most Cases React Is Completely Suitable To Work With Because It Provides 1000s' Of Open-Sources Community Library That Is Help To Solve So Many Problems.&lt;/p&gt;

&lt;p&gt;But, It Is Recommended To Just See What You Want To Achieve And It Is Too Overkill To Use React In That Scenario.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#roadmap-to-learn-react"&gt;
  &lt;/a&gt;
  Roadmap To Learn React &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#overview-of-react"&gt;
  &lt;/a&gt;
  Overview Of React
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Tn6-PIqc4UM"&gt;Fireship 100 Seconds Of React&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#learning-material-for-react"&gt;
  &lt;/a&gt;
  Learning Material For React
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;I Am Recommending This Because I Have Used It For Myself Also&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://btholt.github.io/complete-intro-to-react-v6/"&gt;Brain Hold FrontEnd Masters Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/getting-started.html"&gt;React Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#list-of-things-to-learn"&gt;
  &lt;/a&gt;
  List Of Things To Learn
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Follow List To Get Better Understanding&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;I Have Bias In Some Library Than Other Just Because I Have Learned It And My Experience With That Libraries&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Starter Project (Vite.js, Create-React-App)&lt;/li&gt;
&lt;li&gt;How JSX &amp;amp; Babel Works With Bundlers&lt;/li&gt;
&lt;li&gt;React Functional Components (&lt;em&gt;You Can Use Class Components But Functional Is Easy To Use &amp;amp; Learn&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Lifecycle In Functional Components&lt;/li&gt;
&lt;li&gt;UseState Hook In Functional Component&lt;/li&gt;
&lt;li&gt;Props In React&lt;/li&gt;
&lt;li&gt;Build Todo Application With It With Each Todo item is its own component. Use State &amp;amp; lifecycle Hooks Along With Props.&lt;/li&gt;
&lt;li&gt;Learn UseContext Hook &amp;amp; Improve Above Todo App With This Hook&lt;/li&gt;
&lt;li&gt;Learn UseMemo, UseReducer Hooks&lt;/li&gt;
&lt;li&gt;Learn About React-Router Or Reach Router To Create Different Pages And Make Use Of Them In Above Application&lt;/li&gt;
&lt;li&gt;Learn Different CSS &amp;amp; Components Library To Style Above Application.&lt;/li&gt;
&lt;li&gt;Learn About State Management Like Recoil &amp;amp; Redux (&lt;em&gt;"Redux Is Too Complicated And Takes Lots Of Time And Also You Probably Don't Need Redux So Be Careful &amp;amp; Select One You Like"&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Learn About Single Page App, Static Site Generation And Server-Side Rendering&lt;/li&gt;
&lt;li&gt;Use Gatsby Or Next.js For Simple Project And Learn About Them.&lt;/li&gt;
&lt;li&gt;Use Typescript With React.&lt;/li&gt;
&lt;li&gt;Learn About One Last Thing That Is Datafetching And Error Handling

&lt;ul&gt;
&lt;li&gt;use ReactQuery Or Swr For Datafetching And Caching&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Feel Free To Comment About Your Opinions &amp;amp; Improvement In This List And Blog&lt;/em&gt; &lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>MLOps: Deploying Machine Learning Models with Docker and Google Cloud Platform (Part 2)</title>
      <author>Idowuilekura</author>
      <pubDate>Fri, 01 Oct 2021 08:35:42 +0000</pubDate>
      <link>https://dev.to/idowuilekura1/mlops-deploying-machine-learning-models-with-docker-and-google-cloud-platform-part-2-3024</link>
      <guid>https://dev.to/idowuilekura1/mlops-deploying-machine-learning-models-with-docker-and-google-cloud-platform-part-2-3024</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;a href="#introduction"&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#model-deployment"&gt;&lt;strong&gt;Model Deployment&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#what-on-earth-is-flask"&gt;&lt;strong&gt;What on earth is Flask?&lt;/strong&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#getting-started-with-flask"&gt;&lt;strong&gt;Getting Started with Flask&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#getting-started-with-swagger"&gt;&lt;strong&gt;Getting Started with Swagger&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#deploying-machine-learning-model-with-flask-and-swagger"&gt;&lt;strong&gt;Deploying Machine Learning Model with Flask and Swagger&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#reference-resources"&gt;&lt;strong&gt;Reference/ Resources&lt;/strong&gt;&lt;/a&gt;
&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Introduction&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In the previous &lt;a href="https://dev.to/idowuilekura1/mlops-deploying-machine-learning-models-with-docker-and-google-cloud-platform-part-1-37m2"&gt;article&lt;/a&gt;, we learned about Machine Learning, the importance of Machine Learning Operations (MLOps) in the Machine Learning Lifecycle. We also learned how to frame a problem statement, gather required data, build a Machine Learning model, evaluate the model and save the model for future use. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article, we will look into the process of deploying a Machine Learning Model with Flask and Swagger.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#model-deployment"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Model Deployment&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;We have already discussed Model Deployment in the previous article, but to give a recap. Model Deployment is the process of making Machine Learning models accessible to others through different interfaces like Websites, Mobile Phones, Embedded Systems e.t.c. &lt;br&gt;
Flask and Swagger will be used to deploy the model in this article, but what are Flask and Swagger?&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-on-earth-is-flask"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What on earth is Flask?&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;According to Wikipedia &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Flask is a micro web framework written in Python. It is classified as a microframework because it does not require particular tools or libraries.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Flask is simply a framework that helps python developers to build websites, without the need to learn Javascript. With flask, full-fledged websites can be built with python, HTML &amp;amp; CSS  &lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#getting-started-with-flask"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Getting Started with Flask&lt;/strong&gt;
&lt;/h5&gt;

&lt;p&gt;Now that we understand the functionality of flask, let us dive into a practical example.&lt;br&gt;
You will need an Integrated Development Environment like &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt;, &lt;a href="https://pycharm-community-edition.en.softonic.com/download"&gt;PyCharm&lt;/a&gt; e.t.c to follow along. You will also need to install Flask, you can install Flask by navigating to your command prompt/terminal and type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have the necessary tools to work with flask, let's dive into flask. We will write a simple program that will return your name with a greeting. The code below will &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the Flask class from the flask module&lt;/li&gt;
&lt;li&gt; Initialize a Flask() object with the name of the current file &lt;code&gt;__name__&lt;/code&gt;, &lt;code&gt;__name__&lt;/code&gt; will help python to locate where to load other dependencies into (in this case into our script). You can read this article from &lt;a href="https://stackoverflow.com/questions/39393926/flaskapplication-versus-flask-name#:~:text=1%20Answer&amp;amp;text=__name__%20is%20just,files%2C%20instance%20folder%2C%20etc."&gt;StackOverflow&lt;/a&gt; to understand the purpose of &lt;code&gt;__name__&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt; declare a variable to store my name(replace with your name)&lt;/li&gt;
&lt;li&gt; initialize a decorator, the decorator will be called when users click on the homepage URL of the website  (this is what is called when you click on &lt;a href="http://www.google.com"&gt;www.google.com&lt;/a&gt;). You can read this &lt;a href="https://www.datacamp.com/community/tutorials/decorators-python"&gt;article&lt;/a&gt; from Datacamp to learn more about Decorators.&lt;/li&gt;
&lt;li&gt;define a function that binds to the decorator (the decorator will return the function whenever it is called). The function can return a HTML File or just a text.&lt;/li&gt;
&lt;li&gt;write an if conditional statement that restricts the execution of the application to the current script(I.e if you import the script into another script the application won't run). You can read this &lt;a href="https://www.geeksforgeeks.org/what-does-the-if-__name__-__main__-do/#:~:text=if%20__name__%20%3D%3D%20%E2%80%9Cmain%E2%80%9D%3A%20is%20used%20to,run%20directly%2C%20and%20not%20imported."&gt;article&lt;/a&gt; from GeeksForGeeks to understand the importance of &lt;code&gt;if __name__== '__main__'&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Importing the Flask module from flask library
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="c1"&gt;# initializing our application with the name of our module
&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Variable to store my name( change to your name)
&lt;/span&gt;&lt;span class="n"&gt;my_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'idowu'&lt;/span&gt;

&lt;span class="c1"&gt;# Initializing the homepage route
&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="c1"&gt;# function that will be returned
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;my_name&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Copy the code above and save it inside a file, you can name the file my_flask.py . Now navigate to where you saved the file using the command line, and type python my_flask.py.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;my_flask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or just by clicking on the run icon if you are using Visual Studio Code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---dxZ347a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135066441-db79fa6c-41b1-44c6-97a6-e02577eda28e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---dxZ347a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135066441-db79fa6c-41b1-44c6-97a6-e02577eda28e.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Fig. 1 How to run python file with VSCode (Image by Author)&lt;/p&gt;

&lt;p&gt;After running the file either with the command line/terminal or with VSCode you will be presented with this screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--acM0vHQN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135067355-dfd5fbfe-59e9-433d-824c-cb2c95643e49.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--acM0vHQN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135067355-dfd5fbfe-59e9-433d-824c-cb2c95643e49.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Fig. 2 Image displaying information about flask (Image by Author)&lt;/p&gt;

&lt;p&gt;Click on the link (&lt;a href="http://127.0.0.1:5000/),once"&gt;http://127.0.0.1:5000/),once&lt;/a&gt; you click on the link you will see the screen below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PxgXGE0e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135072139-4e8a7318-257b-4c89-bc83-506836e3ef35.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PxgXGE0e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135072139-4e8a7318-257b-4c89-bc83-506836e3ef35.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Fig.3 Image showing the output of the greet function (Image by Author)&lt;/p&gt;

&lt;p&gt;When you clicked on the link (&lt;a href="http://127.0.0.1:5000/"&gt;http://127.0.0.1:5000/&lt;/a&gt;), flask automatically called the &lt;code&gt;@app.route('/')&lt;/code&gt; decorator, this is because you are trying to access the homepage (which is &lt;code&gt;/&lt;/code&gt;). The @app.route decorator will automatically call the &lt;code&gt;greet&lt;/code&gt; function and the output of the function will be returned. You will notice that, we hardcoded the variable name into our script, which is not intuitive. What if we want to accept the name from users and return &lt;code&gt;Hello + user_name&lt;/code&gt;, &lt;br&gt;
we can do this by creating another index for the name.&lt;br&gt;
We need to rewrite the programs in our script.&lt;br&gt;
The code below will &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bind a welcome function to the home route (&lt;code&gt;/&lt;/code&gt;) &lt;/li&gt;
&lt;li&gt;Bind a different function greet_name to the &lt;code&gt;/greet/name&lt;/code&gt; decorator. This decorator will allow users to insert their names ( this is similar to &lt;a href="http://www.google.com/search/query"&gt;www.google.com/search/query&lt;/a&gt;). &lt;a href="http://www.google.com"&gt;www.google.com&lt;/a&gt; is the home route url while &lt;code&gt;/search&lt;/code&gt; is for the search route.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;welcome&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello welcome to my first flask website'&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/greet/&amp;lt;name&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Delete the previous codes in my_flask.py and copy the above code into my_flask.py (ensure you save the file)&lt;/p&gt;

&lt;p&gt;Now try to run &lt;code&gt;my_flask.py&lt;/code&gt; and click on the homepage url.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python my_flask.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will be presented with the screen below&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vPG3Asfv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135098506-fd19dad8-11de-4ad6-9d5c-78c94183e589.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vPG3Asfv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135098506-fd19dad8-11de-4ad6-9d5c-78c94183e589.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Fig. 4 Home page of the website (Image by Author)&lt;/p&gt;

&lt;p&gt;Now, for users to insert their names, the users will need to add &lt;code&gt;/greet/their_name&lt;/code&gt; after the homepage url i.e (&lt;a href="http://127.0.0.1:5000/greet/their_username"&gt;http://127.0.0.1:5000/greet/their_username&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;While still on the homepage, try and add &lt;code&gt;/greet/your_name[replace with your name]&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZSJ0NXqs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135100295-ee41b9b9-31c0-4750-92ec-8e7ef79c6946.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZSJ0NXqs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135100295-ee41b9b9-31c0-4750-92ec-8e7ef79c6946.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Fig. 5 Image showing the response from greet route&lt;/p&gt;

&lt;p&gt;You will agree with me that this process is quite tedious. What if we can have an interface that accepts responses from a form, sends the responses to flask and return the responses. To achieve this, we can build a form with HTML that accepts parameters. Luckily, instead of writing a HTML program, we can leverage the Swagger module to do that.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Swagger allows you to describe the structure of your APIs so that machines can read them. The ability of APIs to describe their own structure is the root of all awesomeness in Swagger. Why is it so great? Well, by reading your API’s structure, we can automatically build beautiful and interactive API documentation.&lt;br&gt;
&lt;a href="https://swagger.io/docs/specification/2-0/what-is-swagger/"&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;
  &lt;a href="#getting-started-with-swagger"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Getting Started with Swagger&lt;/strong&gt;
&lt;/h5&gt;

&lt;p&gt;You will need to install flasgger module, which can be done with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;flasgger&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code below will&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the request and Flask module from flask. &lt;/li&gt;
&lt;li&gt;Import swagger from flasgger&lt;/li&gt;
&lt;li&gt;Initialize the Flask object &lt;/li&gt;
&lt;li&gt;Wrap the flask object application with Swagger. This helps our application to inherit properties from Swagger.&lt;/li&gt;
&lt;li&gt;create a decorator for our homepage url&lt;/li&gt;
&lt;li&gt;create a decorator for our greet url. If you notice we have something different from what we have been defining previously. The &lt;code&gt;@app.route()&lt;/code&gt; decorator for the greet url takes in a methods parameter with the value Get. There are two major methods that &lt;code&gt;@app.route&lt;/code&gt; receives

&lt;ul&gt;
&lt;li&gt;The Get Method (The get method is used when you want to receive something, when you navigate to &lt;a href="http://www.google.com"&gt;www.google.com&lt;/a&gt; you are indirectly calling the Get method to return the HTML file for the homepage)&lt;/li&gt;
&lt;li&gt;The Post Method is used to send information to a server. You can read this &lt;a href="https://www.geeksforgeeks.org/get-post-requests-using-python/"&gt;article&lt;/a&gt; from GeeksforGeeks to learn more about Post and Get Methods.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Inside the &lt;code&gt;greet_name()&lt;/code&gt; function, you will have to use docstring to define the Swagger interface. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The interface expects the;&lt;/li&gt;
&lt;li&gt;title of the query&lt;/li&gt;
&lt;li&gt;information about the query&lt;/li&gt;
&lt;li&gt;parameters that will be inputted. The parameter fields expects

&lt;ul&gt;
&lt;li&gt;the name of the field&lt;/li&gt;
&lt;li&gt;the mode in which the parameter will be entered, it can be manually inserted as values(query) or by inserting a path to the value.&lt;/li&gt;
&lt;li&gt;the type of the parameter ( it can be an integer or string)&lt;/li&gt;
&lt;li&gt;if the parameter is compulsory or not( if it is required then the parameter can't be omitted) &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;the responses. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;N.B&lt;/em&gt; Make sure you indent the docstring with four spaces, also you will need to indent the details under the parameters and responses else swagger won't render the display.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To access the user_name under the parameters, you will need to use the request module to access the parameter&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lastly, you can return the greeting and the user_name.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Copy the code below into my_flask.py&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flasgger&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Swagger&lt;/span&gt; 
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Swagger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;welcome&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello, welcome to my first flask website'&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/greet'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Get"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet_name&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="s"&gt;"""Greetings
    This is using docstrings for specifications.
    ---
    parameters:
        - name: user_name
          in: query
          type: string
          required: true
    responses:
      200:
         description: "greetings with user's name"
    """&lt;/span&gt;

    &lt;span class="n"&gt;user_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"user_name"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Hello "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;user_name&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, try to run my_flask.py with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;my_flask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MXNAz6mC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135226479-150500d8-8e41-46e9-80d2-33d2eb986939.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MXNAz6mC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135226479-150500d8-8e41-46e9-80d2-33d2eb986939.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Fig. 6 Image showing the homepage (Image by Author)&lt;/p&gt;

&lt;p&gt;To access the Swagger User Interface, append &lt;code&gt;/apidocs&lt;/code&gt; after the homepage url i.e &lt;code&gt;http://127.0.0.1:5000/apidocs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e7zYPRCX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135227423-a33e3573-1585-4c68-8169-3701cb696601.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e7zYPRCX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135227423-a33e3573-1585-4c68-8169-3701cb696601.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Fig. 7 Image showing the Swagger UI (Image by Author)&lt;/p&gt;

&lt;p&gt;To interact with the UI, click on the GET button, which will present you with this screen &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s8y2Do4P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135227925-9fa390c7-f847-48c8-add8-7a6937adf95c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s8y2Do4P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135227925-9fa390c7-f847-48c8-add8-7a6937adf95c.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Fig. 8 Image showing the UI under the GET button. &lt;/p&gt;

&lt;p&gt;If you notice, you can't insert any parameter inside the user_name, to insert value into the user_name field you will need to click on the Try it out button. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s8y2Do4P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135227925-9fa390c7-f847-48c8-add8-7a6937adf95c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s8y2Do4P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135227925-9fa390c7-f847-48c8-add8-7a6937adf95c.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can now insert any name into the user_name field and once you are click on the &lt;code&gt;Execute&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8FLUKMEC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135229761-36f5881f-f2bd-4072-aac4-be759ac5c752.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FLUKMEC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135229761-36f5881f-f2bd-4072-aac4-be759ac5c752.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Fig. 9 Image showing the Response &lt;/p&gt;

&lt;p&gt;The response body display's the response from the greet function. Now that we have all the prerequisite for deploying our model, we can move n to cracking our main task which is to deploy a house price prediction model for Mowaale. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#deploying-machine-learning-models-with-flask-and-swagger"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Deploying Machine Learning Models with Flask and Swagger&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;To successfully deploy the model, we will need to build a simple pipeline that will receive users inputs and make prediction.&lt;br&gt;
We need to rewrite our Swagger program, to accommodate more information.&lt;br&gt;
The code below will&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;import Flask &amp;amp; request from flask&lt;/li&gt;
&lt;li&gt;import Swagger from flasgger&lt;/li&gt;
&lt;li&gt;import joblib(this will be useful later)&lt;/li&gt;
&lt;li&gt;load the previously saved label-encoder for sale condition and save into lb_salecond variable &lt;/li&gt;
&lt;li&gt;load the previously saved label-encoder for sale type and save into lb_saletype variable&lt;/li&gt;
&lt;li&gt;load the previously saved linear regression model and save into model variable&lt;/li&gt;
&lt;li&gt;Initialize our Flask application object&lt;/li&gt;
&lt;li&gt;Wrap the application object with Swagger &lt;/li&gt;
&lt;li&gt;define a route for the homepage.&lt;/li&gt;
&lt;li&gt;define another route for the predict_price index.&lt;/li&gt;
&lt;li&gt;define the name of each parameters and other information that was discussed previously. The default is to specify a default parameter and the enum is to create a dropdown list of values.&lt;/li&gt;
&lt;li&gt;use the request module to get each parameters that was inputted.&lt;/li&gt;
&lt;li&gt;transform the salecondition from a string to a number (this was discussed in part 1)&lt;/li&gt;
&lt;li&gt;transform the sale type from a string it a number.&lt;/li&gt;
&lt;li&gt;store all the parameters into a list&lt;/li&gt;
&lt;li&gt;use the model to make predictions and return the predicted price for the house.
Copy the code into my_flask.py
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flasgger&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Swagger&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;joblib&lt;/span&gt; 
&lt;span class="n"&gt;lb_salecond&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;joblib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'lb_sc'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;lb_saletype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;joblib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'lb_st'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;joblib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'lr_model'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Swagger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;welcome&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello welcome to my first flask website'&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Normal'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Partial'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Abnorml'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Family'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Alloca'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'AdjLand'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/predict_price'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Get"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;predict_prices&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="s"&gt;"""Welcome to Moowale House Prediction Website
    This is using docstrings for specifications.
    ---
    parameters:
        - name: MSSubClass
          in: query
          type: integer
          required: true
        - name: LotFrontage
          in: query
          type: integer
          required: true
        - name: Year_sold
          in: query
          type: integer
          required: true
        - name: Sale_type
          in: query
          type: string
          required: true
          default: New
          enum: ['WD', 'New', 'COD', 'ConLD', 'ConLI', 'ConLw', 'CWD', 'Oth', 'Con']
        - name: Sale_condition
          in: query
          type: string
          default: Normal
          enum: ['Normal', 'Partial', 'Abnorml', 'Family', 'Alloca', 'AdjLand']
    responses:
      200:
         description: House Price Prediction
    """&lt;/span&gt;

    &lt;span class="n"&gt;mssubclass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MSSubClass"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lotfrontage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"LotFrontage"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;year_sold&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Year_sold"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;saletype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Sale_type"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;salecondition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Sale_condition"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;label_encode_sc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lb_salecond&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;salecondition&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;label_encode_st&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lb_saletype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;saletype&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="n"&gt;columns_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mssubclass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lotfrontage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;year_sold&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;label_encode_sc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;label_encode_st&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;columns_list&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'The predicted price is $&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run my_flask.py,click on the url and attach &lt;code&gt;/apidocs&lt;/code&gt; after the homepage url. You will see the screen below,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I7nY3AyV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135260572-c54e24f5-6a57-4adc-98f9-94d6af7ce503.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I7nY3AyV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135260572-c54e24f5-6a57-4adc-98f9-94d6af7ce503.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Fig. 10 Image showing the UI of moowale (Image by Author) &lt;/p&gt;

&lt;p&gt;Click on Try it out, and insert these values for MSSUbClass insert 20, for Lotfrontage insert 80, for Year_sold insert 2007, for Sale type &amp;amp; SaleCondition leave as the default and click on Execute.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sOeF9NGN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135262953-c9f028e6-eec0-48f8-9371-012a5651a94d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sOeF9NGN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135262953-c9f028e6-eec0-48f8-9371-012a5651a94d.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Fig.11 Image showing the prediction (Image by Author)&lt;/p&gt;

&lt;p&gt;Now that we have our model deployed, we have come to the end of the second article in this series.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This article has introduced you to the process of deploying machine learning models with flask and building interactive visuals with Swagger. In part 3 of this series, you will learn how to containerize the Api with Docker and Deploy on Google Cloud Platform. &lt;br&gt;
You can connect with me on &lt;a href="https://www.linkedin.com/in/ilekuraidowu/"&gt;Linkedin&lt;/a&gt;  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#reference-resources"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Reference/ Resources&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Video from Krish Naik &lt;a href="https://www.youtube.com/watch?v=8vNBW98LbfI&amp;amp;list=PLZoTAELRMXVNKtpy0U_Mx9N26w8n0hIbs&amp;amp;index=3"&gt;channel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/flasgger/flasgger"&gt;Flasgger&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>devops</category>
      <category>python</category>
      <category>googlecloud</category>
    </item>
    <item>
      <title>Clean Architecture on Frontend | The dev.to post of the month.</title>
      <author>Kavindu Santhusa</author>
      <pubDate>Fri, 01 Oct 2021 08:24:28 +0000</pubDate>
      <link>https://dev.to/ksengine/the-dev-to-post-of-the-month-5056</link>
      <guid>https://dev.to/ksengine/the-dev-to-post-of-the-month-5056</guid>
      <description>&lt;p&gt;Alex Posted an article about "&lt;strong&gt;Clean Architecture on Frontend"&lt;/strong&gt; on Sep 1 and Updated it on Sep 6&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__619482"&gt;
  
    .ltag__user__id__619482 .follow-action-button {
      background-color: #000000 !important;
      color: #000000 !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/bespoyasov" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M7pcBf7O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--vpyO6_Vh--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/619482/f4c86748-bef1-4f49-8241-21f6c95f7e66.jpeg" alt="bespoyasov image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/bespoyasov"&gt;Alex&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/bespoyasov"&gt;Developer, mentor, speaker 🧑‍💻❤️&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;He says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Not very long ago I gave a talk about the clean architecture on frontend. In this post I'm outlining...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It's a cool article with over 3600 positive reactions 👍.&lt;br&gt;
with #typescript #react #architecture&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/bespoyasov" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M7pcBf7O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--vpyO6_Vh--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/619482/f4c86748-bef1-4f49-8241-21f6c95f7e66.jpeg" alt="bespoyasov"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/bespoyasov/clean-architecture-on-frontend-4311" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Clean Architecture on Frontend&lt;/h2&gt;
      &lt;h3&gt;Alex ・ Sep 1 ・ 34 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#typescript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#architecture&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Direct link 👆.&lt;/p&gt;

&lt;p&gt;Thanks 💖💖💖.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>react</category>
      <category>architecture</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Functional Programming in PicoLisp</title>
      <author>Mia</author>
      <pubDate>Fri, 01 Oct 2021 08:23:36 +0000</pubDate>
      <link>https://dev.to/miatemma/functional-programming-in-picolisp-22hk</link>
      <guid>https://dev.to/miatemma/functional-programming-in-picolisp-22hk</guid>
      <description>&lt;h3&gt;
  &lt;a href="#welcome-to-my-blog"&gt;
  &lt;/a&gt;
  Welcome to my blog!
&lt;/h3&gt;

&lt;p&gt;Nice to meet you. I'm Mia, and in this blog, I would like to introduce to you a very interesting small programming language, &lt;strong&gt;PicoLisp&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;I started to play around in it recently, and one of the key points is that it is super minimalistic. It really helps you to &lt;em&gt;understand&lt;/em&gt; what is going on internally, which is usually not the case in high-level languages like JavaScript. &lt;/p&gt;

&lt;p&gt;As a Lisp dialect, it also supports functional paradigms which allows elegant and transparent code after you got used to the syntax.&lt;/p&gt;

&lt;p&gt;As the first step, I plan to build up a concise and structured beginner's level course with a lot of examples and code analysis.  This blog is for readers who already have some basic programming experience, but I want to keep the threshold as low as possible. The important thing is that you are curious and open for new concepts and ideas. I guess it will also be helpful if you don't &lt;em&gt;hate&lt;/em&gt; math, since there will be a lot of examples from the &lt;a href="https://projecteuler.net/"&gt;Euler Project&lt;/a&gt; and &lt;a href="https://rosettacode.org/"&gt;Rosetta Code Project&lt;/a&gt; because I personally like these a lot. 😄&lt;/p&gt;

&lt;p&gt;Let's go!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#about-picolisp"&gt;
  &lt;/a&gt;
  About PicoLisp
&lt;/h3&gt;

&lt;p&gt;PicoLisp is a programming language, or really a programming system, including a built-in database engine and a GUI system. It's simple and lightweight and encourages clean, concise code. As you might guess, it belongs to the family of lisp languages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Beneath the surface of the language lies the PicoLisp virtual machine.&lt;/strong&gt;&lt;br&gt;
At the lowest level, the VM operates on a single data structure - the cell. A cell is just a pair of pointers, 'CAR' and 'CDR'.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ruAcFRrS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629025805785/0XjaXH765.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ruAcFRrS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629025805785/0XjaXH765.png" alt="cell.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All functions and data in the system are stored in cells, which simply point to each other to form arbitrarily complex structures. From these cells, we construct three base data types - Numbers, Symbols, and Lists - and from those, the rest of our universe.&lt;/p&gt;

&lt;p&gt;So once you grok the underlying cell structure (which you pretty much already have), you just need to explore a small but powerful set of functions that do cool things with those cells.&lt;/p&gt;

&lt;p&gt;It's that simple! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fact sheet:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Designed by: Alexander Burger&lt;/li&gt;
&lt;li&gt;First appeared: 1988&lt;/li&gt;
&lt;li&gt;Stable release: 21.6 / 27 June 2021 (at time of writing)&lt;/li&gt;
&lt;li&gt;Typing discipline: dynamic&lt;/li&gt;
&lt;li&gt;Implementation language: LLVM, PicoLisp&lt;/li&gt;
&lt;li&gt;Platforms: LLVM 64-bit&lt;/li&gt;
&lt;li&gt;OS: POSIX&lt;/li&gt;
&lt;li&gt;License: MIT&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#a-short-history-of-picolisp"&gt;
  &lt;/a&gt;
  A short history of PicoLisp
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; In the 1980s, PicoLisp began development on the Macintosh. Since 1993, it was used mainly on Linux. &lt;/li&gt;
&lt;li&gt;In 2009, the 64-bit version was released. In December 2010, a Java version named Ersatz PicoLisp was released.&lt;/li&gt;
&lt;li&gt;In 2015, the PilOS was announced - &lt;strong&gt;The PicoLisp Operating System&lt;/strong&gt;, a minimal prototype based on the modification of PilMCU targeting embedded applications. It runs on standard x86-64 PC hardware, directly off the BIOS and includes all the features of 64-bit PicoLisp. &lt;strong&gt;In principle, it works as its own operating system.&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;2016, development of &lt;strong&gt;PilBox ("PicoLisp Box")&lt;/strong&gt; – a generic &lt;strong&gt;Android app&lt;/strong&gt; allowing to write apps in pure PicoLisp – was started. It is still being developed and maintained. &lt;/li&gt;
&lt;li&gt;In 2021, pil21 was released, which is also the core of PilBox. pil21 is the current main development focus.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#why-yet-another-lisp-dialect"&gt;
  &lt;/a&gt;
  Why yet another Lisp dialect?
&lt;/h3&gt;

&lt;p&gt;The answer is: Because it is beautiful, efficient, and fun. &lt;/p&gt;

&lt;p&gt;However, PicoLisp should &lt;strong&gt;not&lt;/strong&gt; be confused with Common Lisp, as there are substantial differences in design and philosophy. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aIOsNgya--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629025310386/O2FaVNaXB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aIOsNgya--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629025310386/O2FaVNaXB.png" alt="lisp_cycles.png"&gt;&lt;/a&gt;&lt;a href="https://xkcd.com/297/"&gt;https://xkcd.com/297/&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#got-interested-this-is-how-to-learn-picolisp"&gt;
  &lt;/a&gt;
  Got interested? This is how to learn PicoLisp!
&lt;/h3&gt;

&lt;p&gt;Check out the "PicoLisp for beginners"-series, which I will start from tomorrow, or follow the &lt;a href="https://picolisp.com/wiki/?Documentation"&gt;documentation&lt;/a&gt; for installation guidelines.&lt;/p&gt;

&lt;p&gt;There is also a small but vibrant community around the picolisp ecosystem in IRC, mailing list in bi-weekly conferences. New members are always welcome. Check the websites for more information.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#sources"&gt;
  &lt;/a&gt;
  Sources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://en.wikipedia.org/wiki/PicoLisp"&gt;https://en.wikipedia.org/wiki/PicoLisp&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://software-lab.de/doc/tut.html"&gt;https://software-lab.de/doc/tut.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://picolisp.com/wiki/"&gt;https://picolisp.com/wiki/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;cartoon by &lt;a href="https://xkcd.com/297/"&gt;https://xkcd.com/297/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>functional</category>
      <category>programming</category>
    </item>
    <item>
      <title>Getting started with Laravel and Vue js</title>
      <author>John Wanjema</author>
      <pubDate>Fri, 01 Oct 2021 08:15:58 +0000</pubDate>
      <link>https://dev.to/1njema/getting-started-with-laravel-and-vue-js-2hc6</link>
      <guid>https://dev.to/1njema/getting-started-with-laravel-and-vue-js-2hc6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#ever-wondered-how-to-setup-vue-in-your-laravel-project"&gt;
  &lt;/a&gt;
  Ever wondered how to setup Vue in your laravel project.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FpvAAScs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmtm25h4rb9sgsw3505z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FpvAAScs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmtm25h4rb9sgsw3505z.png" alt="laravel and vue js"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#laravel"&gt;
  &lt;/a&gt;
  Laravel
&lt;/h2&gt;

&lt;p&gt;Laravel is a web application framework with expressive, elegant syntax. We’ve already laid the foundation — freeing you to create without sweating the small things.&lt;br&gt;
Here is a link to their Documentation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#laravel"&gt;
  &lt;/a&gt;
  &lt;a href="https://laravel.com/docs/8.x"&gt;Laravel&lt;/a&gt;
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#vue"&gt;
  &lt;/a&gt;
  Vue
&lt;/h2&gt;

&lt;p&gt;Vue.js is a progressive, incrementally-adoptable JavaScript framework for building UI on the web.&lt;br&gt;
Here is the link to their documentation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vue-js"&gt;
  &lt;/a&gt;
  &lt;a href="https://vuejs.org/"&gt;Vue js&lt;/a&gt;
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#why-use-laravel-with-vue"&gt;
  &lt;/a&gt;
  Why use Laravel with Vue
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#streamline-the-development-process"&gt;
  &lt;/a&gt;
  Streamline the Development Process
&lt;/h3&gt;

&lt;p&gt;This structure allows for one to be a full stack developer within a single project&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#singlepage-application-development"&gt;
  &lt;/a&gt;
  Single-Page Application Development
&lt;/h3&gt;

&lt;p&gt;Both Vue js and Laravel support single page applications.This allows the application assets get loaded once, all that your application does as the user engages with it is request data which typically requires low bandwidth to fulfill.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-optimal-complex-frontend-pages"&gt;
  &lt;/a&gt;
  Building Optimal Complex Front-end Pages
&lt;/h3&gt;

&lt;p&gt;With Vuejs a developer does not need to use jquery to manipulate blade templates.Vue allows for easier managment of DOM using a virtual Dom.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#easy-to-learn-and-use"&gt;
  &lt;/a&gt;
  Easy to Learn and Use
&lt;/h3&gt;

&lt;p&gt;Both Laravel and Vue have a robust documentation that is easy to learn and integrate.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-ensure-that-laravel-is-installed"&gt;
  &lt;/a&gt;
  First ensure that Laravel is installed.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#here-is-link-to-install-laravel-if-you-havent"&gt;
  &lt;/a&gt;
  Here is link to install Laravel if you haven't.
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#laravel-8-installation"&gt;
  &lt;/a&gt;
  &lt;a href="https://laravel.com/docs/8.x/installation"&gt;Laravel 8 Installation&lt;/a&gt;
&lt;/h4&gt;

&lt;h2&gt;
  &lt;a href="#create-a-laravel-project"&gt;
  &lt;/a&gt;
  Create a laravel project
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer create-project laravel/laravel laravel-vue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#scaffolding-vue-js"&gt;
  &lt;/a&gt;
  Scaffolding Vue js
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#install-laravelui-package"&gt;
  &lt;/a&gt;
  Install laravel/ui package
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require laravel/ui
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#install-the-frontend-scaffolding-using-the-ui-artisan-command"&gt;
  &lt;/a&gt;
  Install the frontend scaffolding using the ui Artisan command
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#basic-scaffolding"&gt;
  &lt;/a&gt;
  Basic scaffolding
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php artisan ui vue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#generate-auth-scaffolding"&gt;
  &lt;/a&gt;
  Generate Auth scaffolding.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php artisan ui vue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#compile-your-fresh-scaffolding"&gt;
  &lt;/a&gt;
  Compile your fresh scaffolding.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#configure-blade"&gt;
  &lt;/a&gt;
  Configure Blade
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#import-appjs-and-add-app-id"&gt;
  &lt;/a&gt;
  Import app.js and add app id
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;doctype html&amp;gt;
&amp;lt;html &lt;span class="nv"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"{{ str_replace('_', '-', app()-&amp;gt;getLocale()) }}"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span class="nb"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;meta &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"utf-8"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;meta &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"viewport"&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"width=device-width, initial-scale=1"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; CSRF Token &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;meta &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"csrf-token"&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"{{ csrf_token() }}"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;title&amp;gt;Laravel Vue&amp;lt;/title&amp;gt;
    &amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; Scripts &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;script &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"{{ asset('js/app.js') }}"&lt;/span&gt; defer&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; Fonts &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span class="nb"&gt;link &lt;/span&gt;&lt;span class="nv"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"dns-prefetch"&lt;/span&gt; &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"//fonts.gstatic.com"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span class="nb"&gt;link &lt;/span&gt;&lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"https://fonts.googleapis.com/css?family=Nunito"&lt;/span&gt; &lt;span class="nv"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"stylesheet"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; Styles &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span class="nb"&gt;link &lt;/span&gt;&lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"{{ asset('css/app.css') }}"&lt;/span&gt; &lt;span class="nv"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"stylesheet"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"app"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &amp;lt;main &lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"py-3"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &amp;lt;h3&amp;gt;Laravel Vue&amp;lt;/h3&amp;gt;
            &amp;lt;router-view&amp;gt;&amp;lt;/router-view&amp;gt;
        &amp;lt;/main&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#add-vue-components"&gt;
  &lt;/a&gt;
  Add Vue components
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#add-new-vuejs-file-in-resourcesjscomponents-called-appvue-and-add-the-following-code"&gt;
  &lt;/a&gt;
  Add new vue.js file in resources/js/components called app.vue and add the following code.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
    &amp;lt;div&amp;gt;
        &lt;span class="o"&gt;{{&lt;/span&gt;message&lt;span class="o"&gt;}}&lt;/span&gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
&lt;span class="nb"&gt;export &lt;/span&gt;default &lt;span class="o"&gt;{&lt;/span&gt;
    data&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            message: &lt;span class="s1"&gt;'Hello World'&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setup-vue-router"&gt;
  &lt;/a&gt;
  Setup Vue router
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#install-vue-router"&gt;
  &lt;/a&gt;
  Install Vue router
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install vue-router --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#create-a-routes-folder-and-add-a-homejs-fileadd-the-following-code"&gt;
  &lt;/a&gt;
  Create a routes folder and add a home.js file.Add the following code.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const home = () =&amp;gt;import ( '../components/app.vue')

export default [
    {
        path: '/home',
        component: home,
        name: 'home',
    },
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#head-over-to-the-resourcesjs-folder-and-create-a-file-called-routesjs-and-add-the-following-code"&gt;
  &lt;/a&gt;
  Head over to the resources/js folder and create a file called routes.js and add the following code.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Vue from 'vue'
import VueRouter from 'vue-router'
import home from './routes/home';

Vue.use(VueRouter);
export default new VueRouter({
    mode: 'history',
    scrollBehavior: (to, from, savedPosition) =&amp;gt; ({ y: 0 }), 
    routes: [
        ...home,
    ],
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#add-routes-to-appjs"&gt;
  &lt;/a&gt;
  Add routes to app.js
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#replace-the-code-in-your-resourcesjsappjs-with-the-code-below"&gt;
  &lt;/a&gt;
  Replace the code in your resources/js/app.js with the code below.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;require('./bootstrap');
require('../sass/app.scss')
import Vue from 'vue'

window.Vue = require('vue');

// router
import router from './routes.js';
window.router = router;
window.Fire = new Vue();

const app = new Vue({
    el: '#app',
    router,
}).$mount('#app');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#setup-laravel-routes"&gt;
  &lt;/a&gt;
  Setup Laravel routes
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#update-laravel-routes-in-webphp"&gt;
  &lt;/a&gt;
  Update Laravel routes in web.php
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::get('/{any?}', [
    function () {
        return view('welcome');
    }
])-&amp;gt;where('any', '.*');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#run-the-application"&gt;
  &lt;/a&gt;
  Run the application
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#start-laravel-app"&gt;
  &lt;/a&gt;
  Start Laravel app
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan serve
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#compile-components"&gt;
  &lt;/a&gt;
  Compile components
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#access-the-application-at-localhost8000"&gt;
  &lt;/a&gt;
  Access the application at localhost:8000
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#open-localhost8000"&gt;
  &lt;/a&gt;
  Open &lt;a href="http://localhost:8000/"&gt;localhost:8000&lt;/a&gt;
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#link-to-github-repo"&gt;
  &lt;/a&gt;
  Link to Github repo.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#github-repository"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/johnwanjema/Getting-startes-with-Laravel-and-Vue-js"&gt;Github repository&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#happy-coding"&gt;
  &lt;/a&gt;
  Happy coding
&lt;/h3&gt;

</description>
      <category>laravel</category>
      <category>vue</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
