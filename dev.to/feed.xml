<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>XRPL Grants Expands Judging Committee</title>
      <author>Julia Heitner</author>
      <pubDate>Tue, 26 Oct 2021 17:01:07 +0000</pubDate>
      <link>https://dev.to/ripplexdev/xrpl-grants-expands-judging-committee-140n</link>
      <guid>https://dev.to/ripplexdev/xrpl-grants-expands-judging-committee-140n</guid>
      <description>&lt;p&gt;&lt;em&gt;Pictured in header image (from top left): Klitos Christodoulou, Atefeh Mashatan, Cristina Nita-Rotaru, Scott Chamberlain, Stefanie Roos, Elias Losif, Sean Bennett, and Aanchal Malhotra.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;XRPL Grants today welcomes new judges to the selection process for Wave 2. Each judge is a respected member of their industry and among academia around the world, and includes a number of University Blockchain Research Initiative (UBRI) partners.&lt;/p&gt;

&lt;p&gt;XRPL Grants provides funding to software developers and small teams to build inclusive standards leveraging the XRP Ledger’s open source technology and innovate in the Internet of Value. For Wave 2, XRPL Grants has expanded its panel of judges to increase the level and diversity of expertise in judging.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sean Bennett, Co-Founder at Stronghold (USA)&lt;/strong&gt;&lt;br&gt;
Stronghold is a San Francisco-based financial technology company creating virtual payment networks that enable instant settlement and interoperability between legacy and new payment networks. At Stronghold, Sean has focused on leading the development of retail and business payment products utilizing differing payment modes, from banking layer integrations to blockchain technology. Sean started building on XRP Ledger in 2014 as part of his first commercial venture in the distributed ledger space.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scott Chamberlain, Entrepreneurial Fellow at Australian National University (Australia)&lt;/strong&gt;&lt;br&gt;
As an entrepreneurial fellow at the ANU College of Law, Scott researches and teaches about blockchain, smart contracts, and the impact of technology on law and legal practice. His work has been funded through Ripple’s UBRI. “I call my research the Lex Automagica Project. It asks whether and how blockchain, smart contracts, and AI can benefit society by automating legal relationships. In conjunction with some very smart programmers, I pick an area of legal friction and see if we can use technology to solve it.”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Klitos Christodoulou, Ph.D. Assistant Professor at University of Nicosia (Cyprus)&lt;/strong&gt;&lt;br&gt;
Dr. Christodoulou is an assistant professor in the Department of Digital Innovation at the University of Nicosia (UNIC). Klitos obtained his Ph.D. in Computer Science from the School of Computer Science at the University of Manchester, UK. He has been an adjunct staff member at the University of Manchester where he engaged in various research and teaching activities. He is also the Research Manager at the Institute For the Future (IFF) and the Scientific Lab leader of the Distributed Ledgers Research Center (DLRC) at IFF; a Center that aims towards fostering academic research on blockchains. His research interests span both Data Management challenges; with a focus on Machine Learning techniques, and Distributed Ledger Technologies; with an emphasis on Blockchain ledgers. Klitos teaches courses on Blockchain Applications and Blockchain Programming under UNIC’s MSc in Blockchain and Digital Currency programme. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dr. Elias Losif, Assistant Professor at University of Nicosia (Cyprus)&lt;/strong&gt;&lt;br&gt;
Dr. Iosif is Assistant Professor at the Department of Digital Innovation, School of Business, University of Nicosia (UNIC), as well as scientific lab co-leader at the Distributed Ledgers Research Centre, Institute For the Future, UNIC. He is teaching at the MSc in Digital Currency offered by UNIC, which is the first degree programme globally on decentralized digital currencies and blockchains. Also, he is participating in a number of EC-funded projects focused on blockchain technologies as a senior researcher. Dr. Iosif has a PhD degree in Electronic and Computer Engineering. His areas of expertise include blockchain and machine learning (with focus on natural language processing and spoken dialogue systems). He has authored/co-authored over 65 peer-reviewed scientific publications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aanchal Malhotra, PhD, Senior Software Engineer, Cryptography at RippleX (USA)&lt;/strong&gt; &lt;br&gt;
​​As a senior software engineer at Ripple, Aanchal’s work focuses on proposing &amp;amp; designing new features for the XRP Ledger. She applies theoretical tools such as cryptography, economics and game theory, and network measurements to improve the security &amp;amp; privacy of distributed systems. She is also a part-time lecturer at Northeastern University, serves as a reviewer at Security Area Directorate (IETF), an advisory committee representative for Ripple at W3C, and a board member at Travel Rule Information Sharing Alliance (TRISA). Prior to joining Ripple, Aanchal worked at Akamai, Cisco, Cloudflare and NlNet Labs (Amsterdam). Aanchal received her MS and PhD degrees in Computer Science with specialization in cyber security, from Boston University &amp;amp; has authored several peer-reviewed scientific publications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dr. Atefeh (Atty) Mashatan, Canada Research Chair and Associate Professor at Ryerson University (Canada)&lt;/strong&gt;&lt;br&gt;
Dr. Mashatan's research is focused on the development of novel cybersecurity designs based on emerging technologies such as IoT, Blockchain, and Quantum Computing. She investigates challenges and opportunities brought forward by these new technologies and how they change the threat landscape of cybersecurity. Mashatan’s expertise at the frontlines of the global cybersecurity field was recognized by SC Magazine in 2019, when she was named one of the top five Women of Influence in Security. In 2020, she received the Enterprise Blockchain Award in the category of New Frontiers in Blockchain Academic Research by Blockchain Research Institute.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cristina Nita-Rotaru, Ph.D., Professor at Northeastern University (USA)&lt;/strong&gt;&lt;br&gt;
Cristina is a professor at Northeastern University’s Khoury College of Computer Science. Prior to joining Northeastern, she was a faculty member in the Department of Computer Science at Purdue University. Her research lies at the intersection of information security, distributed systems, and computer networks. The overarching goal of her work is designing and building practical distributed systems and network protocols that are robust to failures and attacks while coping with the resource constraints existent in computing systems and networks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dr. Stefanie Roos, Assistant Professor at TU Delft (Netherlands)&lt;/strong&gt;&lt;br&gt;
Dr. Roos is an assistant professor for distributed systems at TU Delft and the Delft Blockchain Lab. Her work deals with trade-offs between privacy, security, and performance in decentralized systems. She contributed to the censorship-resistant P2P network Freenet and designed SpeedyMurmurs, a routing algorithm for payment channel networks like Lightning. Her current research is focused on improving Layer-2 protocols for blockchains as well as designing more efficient anonymity systems.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you are an expert interested in joining the XRPL Grants Judging Committee, please email &lt;a href="mailto:info@xrplgrants.org"&gt;info@xrplgrants.org&lt;/a&gt; with a CV and relevant experience to the XRP Ledger.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Are you a software developer? You could receive $10,000-$200,000 USD to build on the XRPL. The deadline for Wave 2 is October 28, 2021 at 11:59 PM PT. &lt;a href="https://xrplgrants.org/"&gt;Learn more, and apply today!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>xrpl</category>
      <category>xrplgrants</category>
      <category>blockchain</category>
    </item>
    <item>
      <title>1 line of code: How to remove all duplicates from an Array</title>
      <author>martin krause</author>
      <pubDate>Tue, 26 Oct 2021 16:55:53 +0000</pubDate>
      <link>https://dev.to/martinkr/1-line-of-code-how-to-remove-all-duplicates-from-an-array-4fo8</link>
      <guid>https://dev.to/martinkr/1-line-of-code-how-to-remove-all-duplicates-from-an-array-4fo8</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const removeDuplicates = arr =&amp;gt; [...new Set(arr)]; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Returns a copy of the array. Removes duplicate entries. Preserves the order of the entries.&lt;/p&gt;




&lt;p&gt;Happy coding and consider to &lt;a href="https://www.buymeacoffee.com/martinkr"&gt;buy me a coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@zoo_monkey"&gt;zoo_monkey&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/fuji"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Top 5 MySQL GUI tools in 2021</title>
      <author>kevbosaurus</author>
      <pubDate>Tue, 26 Oct 2021 16:37:18 +0000</pubDate>
      <link>https://dev.to/retool/top-5-mysql-gui-tools-in-2021-53h1</link>
      <guid>https://dev.to/retool/top-5-mysql-gui-tools-in-2021-53h1</guid>
      <description>&lt;p&gt;Ahead of Postgres and SQLite, MySQL has been the leading relational database for years. This is corroborated most recently by &lt;a href="https://insights.stackoverflow.com/survey/2021"&gt;Stack Overflow's 2021 Developer Survey&lt;/a&gt;, in which 50.18 percent of all respondents (73,317) claim to have used MySQL extensively and plan to do so in the coming year.&lt;/p&gt;

&lt;p&gt;However, many find MySQL challenging to manage despite its simpler design. GUIs have become increasingly central to delivering exceptional user experiences. Database managers are faced with a number of tasks, including the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Object management and automation&lt;/li&gt;
&lt;li&gt;  Data analysis&lt;/li&gt;
&lt;li&gt;  Creating and executing queries&lt;/li&gt;
&lt;li&gt;  Developing and debugging stored routines&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MySQL Shell might feel unapproachable, and even its fundamental components like MySQL Workbench or MySQL Connectors don't appeal to everyone. Some may not even require every advanced feature under the database's umbrella. Thankfully, the third-party tooling market has grown substantially throughout MySQL's twenty-six-year history.&lt;/p&gt;

&lt;p&gt;This article breaks down the leading MySQL tools and their benefits (plus potential drawbacks).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selection-criteria"&gt;
  &lt;/a&gt;
  Selection criteria
&lt;/h2&gt;

&lt;p&gt;The goal was to find tools with well-rounded functionality. Each is evaluated on the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Features---what can you do with the tool, and how well do these capabilities align with MySQL's native functional offerings? How might these tools exceed expectations, or democratize the utilization of MySQL within teams?&lt;/li&gt;
&lt;li&gt;  Platform compatibility---is the tool developed for specific OSs, or does it have cross-platform availability for Windows, Mac, Linux, and even the web?&lt;/li&gt;
&lt;li&gt;  SQL autocomplete support---is the MySQL Intellisense feature baked in or emulated, both to save time and reduce scripting effort within the editor?&lt;/li&gt;
&lt;li&gt;  Special MySQL support---does the tool integrate with MySQL in any novel ways that differentiate it from competitors?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This assessment is meant to be as objective as possible, with added comments that you might find helpful. Here are the top five picks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adminer"&gt;
  &lt;/a&gt;
  Adminer
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--krzoNFlt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://retool.com/blog/content/images/2021/10/img1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--krzoNFlt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://retool.com/blog/content/images/2021/10/img1.png" alt="Adminer interface, via online demo editor"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Adminer interface, via online demo editor&lt;/p&gt;

&lt;p&gt;Perhaps one of the more no-nonsense members on this list (in stock form), &lt;a href="https://www.adminer.org/"&gt;Adminer&lt;/a&gt; aims to provide powerful functionality within a simplified package. Launched in 2007, the tool prioritizes security, performance, and size. You can select your preferred look from over twenty-five included themes---sourced by Adminer's developers, with others contributed by community members.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;The tool promises robust database management using a single PHP file. This makes it relatively easy to set Adminer up on any machine with PHP. Learn how to set up PHP on your computer &lt;a href="https://www.php.net/manual/en/install.php"&gt;with this guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can install optional MySQL database servers either locally or remotely. This second option lets you tap into a remote machine as needed, saving space on your physical drive. Accordingly, it may be advantageous to install any database extensions for MySQL that you cannot live without. This is great preparation for the remaining steps.&lt;/p&gt;

&lt;p&gt;Finally, download the latest Adminer PHP file directly from &lt;a href="https://www.adminer.org/"&gt;Adminer's website&lt;/a&gt;. Any associated plugins you'll want to add are hosted and documented on this website and on &lt;a href="https://github.com/vrana/adminer"&gt;Adminer's GitHub page&lt;/a&gt;. Getting started is as easy as logging into your essential databases.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-and-mysql-support"&gt;
  &lt;/a&gt;
  Features and MySQL support
&lt;/h3&gt;

&lt;p&gt;To understand how Adminer stands out, compare it with another leading MySQL GUI, phpMyAdmin. Adminer offers &lt;a href="https://www.adminer.org/en/phpmyadmin/"&gt;numerous improvements&lt;/a&gt;, according to its developers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  It's available in a MySQL-only version---purpose-built without excessive bloat&lt;/li&gt;
&lt;li&gt;  Permanent logins&lt;/li&gt;
&lt;li&gt;  Automatic field generation&lt;/li&gt;
&lt;li&gt;  Multi-index manipulation&lt;/li&gt;
&lt;li&gt;  Complete foreign-keys support with an associated interface&lt;/li&gt;
&lt;li&gt;  Full support for triggers, routines, and events&lt;/li&gt;
&lt;li&gt;  Absolute and relative modification support in bulk&lt;/li&gt;
&lt;li&gt;  Safer row cloning with confirmation, avoiding overwrites&lt;/li&gt;
&lt;li&gt;  Seamless anywhere-synchronization using an ALTER export&lt;/li&gt;
&lt;li&gt;  Multi-query SQL results displayed in a single view&lt;/li&gt;
&lt;li&gt;  Concurrency with multiple tabs during complex operations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adminer requires secure logins for all integrated databases, and employs rate limiting to thwart brute force attacks. It's built to be lightweight and rapid thanks to asynchronous data downloading. Table fetching isn't a limiting factor when requesting lists.&lt;/p&gt;

&lt;p&gt;Among other features, Adminer allows plenty of table manipulations---especially those involving listing, indexing, altering, creating, dropping, and adding records or indexes. You can execute any SQL command using text fields and files. It's also possible to create new databases, export data structures, kill processes, and display users alongside their rights. Adminer allows all of this while encouraging you to harness your preferred data type.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#best-use-cases"&gt;
  &lt;/a&gt;
  Best use cases
&lt;/h3&gt;

&lt;p&gt;The makers of Adminer highlight two seemingly paradoxical benefits: its simplicity and its customizability. But customization isn't necessary to get the most out of the GUI. It's available for power users, while the base package remains usable to novices.&lt;/p&gt;

&lt;p&gt;That said, flexibility is a major strength of Adminer. It allows experienced developers to stretch their capabilities with plugins, extensions, and other APIs. It's great for those with solid knowledge of PHP and avoids the one-size-fits-all pitfalls of other applications. Finally, the toolset is welcoming to newcomers thanks to liberal inclusion of text fields, drop-downs, toggles, checklists, and radio buttons.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#beekeeper-studio"&gt;
  &lt;/a&gt;
  Beekeeper Studio
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dOwz0QrI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://retool.com/blog/content/images/2021/10/Beekeeper.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dOwz0QrI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://retool.com/blog/content/images/2021/10/Beekeeper.png" alt="Beekeeper Studio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Decidedly the junior compared to something like Adminer, &lt;a href="https://www.beekeeperstudio.io/"&gt;Beekeeper Studio&lt;/a&gt; first launched in early 2020 as a modern approach to MySQL database management. This is reflected in its aesthetic, which mirrors that of other GUI-centric applications in the past five years. The interface and editor come with numerous content views, most of which are information-rich and well-organized. Development has also been steady, with &lt;a href="https://github.com/beekeeper-studio/beekeeper-studio/releases"&gt;forty-one releases&lt;/a&gt; in the past year and a half (at the time of writing).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;Beekeeper Studio is compatible with Windows, Mac, and Linux. The program is built primarily using Vue, TypeScript, and JavaScript. No PHP downloads are required locally. To get started, install the appropriate &lt;code&gt;.dmg&lt;/code&gt; or package &lt;a href="https://www.beekeeperstudio.io/"&gt;directly from Beekeeper's website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can get started with Beekeeper within minutes, depending on your OS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-and-mysql-support"&gt;
  &lt;/a&gt;
  Features and MySQL support
&lt;/h3&gt;

&lt;p&gt;Beekeeper highlights a host of key features on its homepage. Security is highly important, given that SSL encryption is standard for all database connections. Beekeeper will hold onto your password for safekeeping. It also helps you connect through firewalls via specific ports.&lt;/p&gt;

&lt;p&gt;Beekeeper Studio supports SQL autocompletion through the built-in editor, which provides dev-friendly features like syntax highlighting and pop-up suggestions. This makes it much easier and less tedious to fly through numerous SQL queries. Beekeeper also provides the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Support for dozens of concurrent tabs within one unified window&lt;/li&gt;
&lt;li&gt;  Quick saving and organization of common SQL queries&lt;/li&gt;
&lt;li&gt;  Quick and easy data table changes, with the ability to stage changes later on&lt;/li&gt;
&lt;li&gt;  Straightforward creation, editing, and deletion of table columns, indexes, and relations using the GUI&lt;/li&gt;
&lt;li&gt;  Data export in CSV, JSON, JSONL, and SQL in just a few steps---even in conjunction with specialized data filters&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Beekeeper also supports multiple run contexts. It's possible to run all queries by default, run the current highlighted query, or run selected queries only. Once data is retrieved and arranged in a table, you can filter, sort, and peruse this information however you wish. Beekeeper also supports a number of default &lt;a href="https://docs.beekeeperstudio.io/guide/#keyboard-shortcuts"&gt;keyboard shortcuts&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#best-use-cases"&gt;
  &lt;/a&gt;
  Best use cases
&lt;/h3&gt;

&lt;p&gt;Beekeeper Studio is designed to work with several DBs, like Postgres, SQLite, and SQL Server. It's not built solely for MySQL and is therefore better suited for day-to-day data lookup and manipulation, as opposed to intensive or detailed projects. Compared to something like Adminer, Beekeeper supports a smaller array of MySQL-specific features, which you might miss.&lt;/p&gt;

&lt;p&gt;The editor is the star of the show here. It's attractive, easy to work with, and relatively powerful. If you're looking to bang out numerous lines of SQL queries, you'll feel right at home within the app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cloudbeaver"&gt;
  &lt;/a&gt;
  CloudBeaver
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5pcMqvhH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://retool.com/blog/content/images/2021/10/cloudbeaver.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5pcMqvhH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://retool.com/blog/content/images/2021/10/cloudbeaver.png" alt="CloudBeaver's integrated schema diagrams"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CloudBeaver's integrated schema diagrams\&lt;br&gt;
Released around the same time as Beekeeper Studio, &lt;a href="https://cloudbeaver.io/"&gt;CloudBeaver&lt;/a&gt; is a smaller, open-source project supported by a stable of &lt;a href="https://github.com/dbeaver/cloudbeaver"&gt;thirteen contributors&lt;/a&gt;. Because of this, development schedules are a little more deliberate, but that hasn't stopped CloudBeaver from fine-tuning its lightweight, user-friendly GUI. The interface is clean and has both dark and light modes. CloudBeaver also presents users with informative visualizations, keeping you engaged and organized as databases scale. Being a web application, this tool is accessible to a larger subset of users without consuming too many resources or disk space.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;CloudBeaver comes in three flavors. First is the web application, which leverages a web server and JavaScript frontend. While this method is accessible, &lt;a href="https://cloudbeaver.io/docs/Build-and-deploy/"&gt;CloudBeaver warns&lt;/a&gt; that the setup process can be somewhat complex.&lt;/p&gt;

&lt;p&gt;Next is the popular community build, which is free. CloudBeaver distributes this as a Docker image on Docker Hub or as source code.&lt;/p&gt;

&lt;p&gt;The final version is CloudBeaver Enterprise. The development team has made a Docker container specifically for this purpose, or you can secure an AWS-compatible version within the AWS Marketplace. The application is predominantly built using TypeScript and Java.&lt;/p&gt;

&lt;p&gt;Installing CloudBeaver requires the Terminal and some scripts. Use either &lt;code&gt;docker pull dbeaver/cloudbeaver:latest&lt;/code&gt; to pull the current build, or &lt;code&gt;docker pull dbeaver/cloudbeaver:dev&lt;/code&gt; to grab the newest developer build.&lt;/p&gt;

&lt;p&gt;You can run CloudBeaver &lt;a href="https://cloudbeaver.io/doc/cloudbeaver.pdf"&gt;using the Terminal, using daemon mode, or by accessing &lt;code&gt;localhost&lt;/code&gt; databases&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-and-mysql-support"&gt;
  &lt;/a&gt;
  Features and MySQL support
&lt;/h3&gt;

&lt;p&gt;At the macro level, CloudBeaver offers you its data editor, data export, entity diagrams, SQL editor, AWS-and-Docker integration (RDS, Redshift, Dynamo DB, Docker Hub), and execution planning. However, let's dig a little deeper to understand how helpful &lt;a href="https://cloudbeaver.io/features/"&gt;these features&lt;/a&gt;) are.&lt;/p&gt;

&lt;p&gt;The data editor displays data from tables and queries in a readable list format composed of labeled rows and columns:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YTQD7WR_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://retool.com/blog/content/images/2021/10/CB-s-database.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YTQD7WR_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://retool.com/blog/content/images/2021/10/CB-s-database.png" alt="CloudBeaver database image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scanning these custom categories and arranging data in a sensible format is doable in a snap. Both relational and document-oriented databases are supported. Quickly view values for all data types, read from tables regardless of length, use the dedicated data-filter panel, or even order tables based on column numbers.&lt;/p&gt;

&lt;p&gt;For export, CloudBeaver supports CSV, XLSX, XML, JSON, and SQL INSERTs formats. Entity diagrams offer more interesting features. Should you want to visualize your entire database schema, Beaver will provide a flowchart-style diagram with labels and categorized data points. Unique keys, foreign keys, and automatic layouts are supported by default. You can even export this visualization as a PNG or SVG file for safekeeping.&lt;/p&gt;

&lt;p&gt;The SQL editor supports syntax highlighting for different dialects and even provides auto-completion for columns, tables, SQL keywords, and procedures. Query results are viewable in multiple concurrent tabs.&lt;/p&gt;

&lt;p&gt;You can integrate CloudBeaver with your AWS account to unlock authorized browsing of AWS databases using AWS credentials and RDS authentication. This type of process relies either on Kerberos or Active Directory, and thus allows you to clamp down on unintended access. You also have compatibility with Docker environments and the ability to serve local or remote databases.&lt;/p&gt;

&lt;p&gt;Finally, the execution plan feature generates a query-execution tree in a results tab and evaluates whether scripts and queries are designed to work optimally in their existing formats.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#best-use-cases"&gt;
  &lt;/a&gt;
  Best use cases
&lt;/h3&gt;

&lt;p&gt;If you prefer integration with AWS, you'll love CloudBeaver. The tool is built from the ground up with these platforms in mind, offering an expansive list of possibilities for serving and pulling databases from multiple sources.&lt;/p&gt;

&lt;p&gt;CloudBeaver is also good for team collaboration---you can invite contributors to join project workspaces with a simple, shareable link. It's a viable solution for enterprises and common users alike---while other tools don't offer specialized corporate versions. That alone speaks volumes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#phpmyadmin"&gt;
  &lt;/a&gt;
  phpMyAdmin
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UFzsODgz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://retool.com/blog/content/images/2021/10/php-cover.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UFzsODgz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://retool.com/blog/content/images/2021/10/php-cover.png" alt="phpMyAdmin demo interface"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;phpMyAdmin demo interface&lt;/p&gt;

&lt;p&gt;A stalwart in the database management space, &lt;a href="https://www.phpmyadmin.net/"&gt;phpMyAdmin&lt;/a&gt; launched in 1998 and has since enjoyed voracious support. GitHub has recorded &lt;a href="https://github.com/phpmyadmin/phpmyadmin"&gt;469 releases since launch&lt;/a&gt;---an ambitious schedule made possible by over 1,100 contributors. It's written mainly in PHP.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;At the OS level, phpMyAdmin supports Windows and various Linux distributions. However, be warned that macOS is NOT supported.&lt;/p&gt;

&lt;p&gt;Choose an appropriate distribution kit from the website's Downloads page, unzip it, connect to your web server, and configure the tool accordingly. You might opt for MyAdmin's new wizard-style installation, which makes things easier.&lt;/p&gt;

&lt;p&gt;There are three other ways to install phpMyAdmin: using a Git package, via Docker, or via Composer. These utilize images and tarballs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-and-mysql-support"&gt;
  &lt;/a&gt;
  Features and MySQL support
&lt;/h3&gt;

&lt;p&gt;The web-based phpMyAdmin tool allows you to use either the GUI or direct commands.&lt;/p&gt;

&lt;p&gt;The tool also offers the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Support for MySQL functions like browse or drop for tables, databases, fields, views, and indexes&lt;/li&gt;
&lt;li&gt;  Create, copy, drop, and rename functions for the above items&lt;/li&gt;
&lt;li&gt;  Support for server configuration proposals and server maintenance&lt;/li&gt;
&lt;li&gt;  Importing and exporting data in a wide range of formats&lt;/li&gt;
&lt;li&gt;  Administering multiple servers&lt;/li&gt;
&lt;li&gt;  Creating multi-format database graphics&lt;/li&gt;
&lt;li&gt;  Creating complex Query by Example (QBE) queries&lt;/li&gt;
&lt;li&gt;  Global and subset database searches&lt;/li&gt;
&lt;li&gt;  Transformation of stored data using predefined functions and formats---even converting BLOBs into links or images&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;phpMyAdmin supports both LTR and RTL languages. The tool has been translated into seventy-two languages, making it accessible for global users.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#best-use-cases"&gt;
  &lt;/a&gt;
  Best use cases
&lt;/h3&gt;

&lt;p&gt;phpMyAdmin has had plenty of time to develop a list of highly requested features. Administrators and architects can trust it to handle tasks ranging from menial to intricate.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mysql-workbench"&gt;
  &lt;/a&gt;
  MySQL Workbench
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pBx-qAQt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/1dGOwMv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pBx-qAQt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/1dGOwMv.png" alt="MySQL Workbench, via GitHub"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.mysql.com/products/workbench/"&gt;MySQL Workbench&lt;/a&gt; was launched in 2015 as a visualization tool for database architects, developers, and DBAs. It's a full-fledged suite that allows you to data model, develop SQL, and administer everything around your databases. It's written mainly in C++ and has &lt;a href="https://github.com/mysql/mysql-workbench/releases"&gt;twenty-five releases&lt;/a&gt; stored on GitHub.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h3&gt;

&lt;p&gt;MySQL Workbench is &lt;a href="https://dev.mysql.com/doc/workbench/en/wb-requirements.html"&gt;available for Windows, macOS, and Linux distributions&lt;/a&gt;. It's designed to work best with (yet doesn't require) a MySQL server connection, along with simultaneous client connections.&lt;/p&gt;

&lt;p&gt;MySQL Workbench can be installed via the command line. However, there are unique installation pathways for each OS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#features-and-mysql-support"&gt;
  &lt;/a&gt;
  Features and MySQL support
&lt;/h3&gt;

&lt;p&gt;MySQL Workbench is primarily a GUI-centric tool and thus ditches the scripting interfaces found elsewhere. Designed to work with MySQL Server 5.6+, it offers the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  create and manage database-server connections, connection parameters, and integrated query execution&lt;/li&gt;
&lt;li&gt;  assemble data into meaningful graphical designs, reverse and forward engineer between schemas and live databases, and edit all database elements as needed. The Table Editor makes it easy to alter tables, columns, indexes, triggers, options, privileges, inserts, and partitioning&lt;/li&gt;
&lt;li&gt;  server-instance management, auditing, backup and restoration, and performance-health monitoring&lt;/li&gt;
&lt;li&gt;  data migration between versions of MySQL or moving data from other database systems to and from MySQL&lt;/li&gt;
&lt;li&gt;  MySQL Enterprise support&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#use-cases"&gt;
  &lt;/a&gt;
  Use cases
&lt;/h3&gt;

&lt;p&gt;Like phpMyAdmin, MySQL Workbench is made for both novices and experts. As the native database management option for MySQL, the tool excels at supporting the database technology without major hiccups. It's perfect for those hoping to keep everything under one proverbial roof.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As you can see, there are plenty of exceptional (and approachable) MySQL GUIs on the market. No tool is perfect, but your needs and preferences will help determine which is ideal for you.&lt;/p&gt;

&lt;p&gt;It's also true that simple is often better. At &lt;a href="https://retool.com/use-case/sql-gui"&gt;Retool&lt;/a&gt;, we work to make it easy to build apps and tackle other projects using your team's data. We aimed for a clean, organized GUI enables you to quickly view, edit, and analyze information whether you prefer lists, tables, or richer visualizations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5qciXlGt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Ja5V2m8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5qciXlGt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/Ja5V2m8.png" alt="Retool"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To learn more, &lt;a href="http://login.retool.com/auth/signup"&gt;give it a try&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>mysql</category>
      <category>sql</category>
    </item>
    <item>
      <title>Reflection at Reflect: The Reflect and Proxy APIs</title>
      <author>Todd McNeal</author>
      <pubDate>Tue, 26 Oct 2021 16:34:41 +0000</pubDate>
      <link>https://dev.to/tmcneal/reflection-at-reflect-the-reflect-and-proxy-apis-g06</link>
      <guid>https://dev.to/tmcneal/reflection-at-reflect-the-reflect-and-proxy-apis-g06</guid>
      <description>&lt;h2&gt;
  &lt;a href="#reflect-amp-proxy"&gt;
  &lt;/a&gt;
  Reflect &amp;amp; Proxy
&lt;/h2&gt;

&lt;p&gt;Reflect and Proxy are both standard built-in objects introduced as part of the ES6 spec and are supported in all modern browsers. Broadly speaking, they formalize the concept of metaprogramming in the context of Javascript by combining existing introspection and intercession APIs, and expanding upon them. In this article we'll explore how these objects work using examples that approximate real-world requirements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Javascript engines have object internal methods like &lt;code&gt;[[GetOwnProperty]]&lt;/code&gt;, &lt;code&gt;[[HasProperty]]&lt;/code&gt;, and &lt;code&gt;[[Set]]&lt;/code&gt;, some of which were already exposed for reflection in earlier versions of the spec. If you've worked with Javascript before, you're probably familiar with some of these developer-accessible equivalents. For example...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SomeFirstName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lastName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SomeLastName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;enumerable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ['firstName', 'age', 'lastName']&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;baz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// ['SomeFirstName', 99, 'SomeLastName']&lt;/span&gt;
&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lastName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The examples above demonstrate static introspection methods defined on the global &lt;code&gt;Object&lt;/code&gt;. They only represent a subset of the useful engine-internal methods we'd like to access, and they're tacked on to a prototype. Together, the Reflect and Proxy APIs unify and simplify these existing methods, expand upon their introspection capabilities, and expose intercession APIs that were previously not possible.&lt;/p&gt;

&lt;p&gt;Instead of covering every function defined on each of these objects in this article, we'll focus on the functions we use most often at Reflect. To learn more about each we recommend reading through the MDN guides.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simple-reflect-example"&gt;
  &lt;/a&gt;
  Simple Reflect Example
&lt;/h2&gt;

&lt;p&gt;Let's imagine a scenario in which you'd like to log some information every time a field on some global object was accessed. You could find every instance of a &lt;code&gt;get()&lt;/code&gt; call &lt;br&gt;
throughout your app and send the information manually...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// app.ts&lt;/span&gt;
&lt;span class="c1"&gt;// On pageload, we fetch the global session&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;globalSession&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetchSession&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// file1.ts&lt;/span&gt;
&lt;span class="c1"&gt;// We've accessed a field on globalSession, and the developer has logged that&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;globalSession&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GOT FIELD firstName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// file2.ts&lt;/span&gt;
&lt;span class="c1"&gt;// Same applies here&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;globalSession&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;globalSession&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstRelative&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;globalSession&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;relatives&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GOT FIELD lastName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GOT FIELD age&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GOT FIELD relatives[0]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This pattern is flawed for a number of reasons&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It requires proprietary knowledge: Developers are responsible for remembering that every time they access some field on &lt;code&gt;globalSession&lt;/code&gt;, they must also include a call to &lt;code&gt;console.log()&lt;/code&gt;. This is difficult to enforce and easy to forget.&lt;/li&gt;
&lt;li&gt;It does not scale: If the name of a field on &lt;code&gt;globalSession&lt;/code&gt; changes, refactoring would be a nightmare. If you'd like to implement the same policy for some object other than &lt;code&gt;globalSession&lt;/code&gt;, you'd need to repeat the entire original process and further expand upon the proprietary knowledge needed to develop in the codebase.&lt;/li&gt;
&lt;li&gt;It doesn't account for more complex scenarios: The example above demonstates simple access patterns, but what happens when you have something like the following?
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// file3.ts&lt;/span&gt;
&lt;span class="c1"&gt;// Point another global to the global session&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;activeSession&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;globalSession&lt;/span&gt;

&lt;span class="c1"&gt;// file4.ts&lt;/span&gt;
&lt;span class="c1"&gt;// Don't forget that activeSession points to the same object as globalSession, you&lt;/span&gt;
&lt;span class="c1"&gt;// still need to call console.log()!&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;middleName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;activeSession&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;middleName&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The flaws in the approach above illustrate a disconnect between what we're trying to express and how we've implemented our solution. We &lt;em&gt;want&lt;/em&gt; to log some information to the console every time a field on some object is accessed. We've solved this by enforcing a rule which requires manually calling a function.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Proxy&lt;/code&gt; object allows us to solve the problem by expressing the desired behavior rather than trying to enforce a flimsy policy. Here's how that would work.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// makeStoreAccessProxy.ts&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;makeStoreAccessProxy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;receiver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`GOT FIELD &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Reflect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// app.ts&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;globalSession&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;makeStoreAccessProxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fetchSession&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Every time anyone accesses any field on &lt;code&gt;globalSession&lt;/code&gt; (directly or indirectly), that access will automatically be logged to the console.&lt;/p&gt;

&lt;p&gt;This solves the flaws in the pattern above&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;There is no proprietary knowledge needed: Developers can access fields on &lt;code&gt;globalSession&lt;/code&gt; without remembering to store information about said access.&lt;/li&gt;
&lt;li&gt;It scales: Refactoring &lt;code&gt;globalSession&lt;/code&gt; is as easy as refactoring any other object, and the same &lt;code&gt;makeStoreAccessProxy&lt;/code&gt; function can be used on any object in the entire codebase at any time.&lt;/li&gt;
&lt;li&gt;It accounts for more complex scenarios: If you &lt;code&gt;get()&lt;/code&gt; some field on &lt;code&gt;globalSession&lt;/code&gt; by way of some other object that points to it, the access will still be logged to the console.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that we've leveraged both the &lt;code&gt;Proxy&lt;/code&gt; and &lt;code&gt;Reflect&lt;/code&gt; APIs in order to achieve the desired result. We'll review this piece by piece:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;makeStoreAccessProxy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// This function returns a proxy of the provided 'obj'. Without defining the second&lt;/span&gt;
  &lt;span class="c1"&gt;// 'handler' argument, this is a transparent passthrough to 'obj' and would behave as&lt;/span&gt;
  &lt;span class="c1"&gt;// though it _were_ the original 'obj'.&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// We then define a 'get' function in the handler. This means that we're redefining&lt;/span&gt;
    &lt;span class="c1"&gt;// the fundamental get operation on 'obj'&lt;/span&gt;
    &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;receiver&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// We've redefined 'get' to log information in the console&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`GOT FIELD &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c1"&gt;// And finally, we're calling 'get' on the original unwrapped 'obj'. We could&lt;/span&gt;
      &lt;span class="c1"&gt;// instead return 'target[key]', but this demonstrates the consistency between&lt;/span&gt;
      &lt;span class="c1"&gt;// the Proxy and Reflect APIs&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Reflect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The consistency between the Proxy's &lt;code&gt;get()&lt;/code&gt; method in its handler and the &lt;code&gt;Reflect.get&lt;/code&gt; function holds for all functions on both objects. Every method you can define on a &lt;code&gt;Proxy&lt;/code&gt; handler has an equivalent function on the &lt;code&gt;Reflect&lt;/code&gt; object. You could create a completely pointless proxy which just acted as a passthrough by overriding every supported method and simply calling the &lt;code&gt;Reflect&lt;/code&gt; equivalent...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Reflect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Reflect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Reflect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Reflect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="c1"&gt;// etc&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#advanced-reflect-example"&gt;
  &lt;/a&gt;
  Advanced Reflect Example
&lt;/h2&gt;

&lt;p&gt;In this case, the code we're writing needs to keep track of all images on the page that are loaded dynamically by some web application we do not control. Since we cannot manipulate the underlying application's code directly, we need some mechanism by which we'll trap access to the &lt;code&gt;src&lt;/code&gt; attribute transparently...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// First we'll store a reference to the original property descriptor for the&lt;/span&gt;
&lt;span class="c1"&gt;// HTMLImageElement's src field&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;originalImgSrc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Reflect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getOwnPropertyDescriptor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;HTMLImageElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// Then we'll overwrite the HTMLImageElement prototype's "src" property and trap&lt;/span&gt;
&lt;span class="c1"&gt;// calls to that field's get() and set() methods&lt;/span&gt;
&lt;span class="nb"&gt;Reflect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;HTMLImageElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// When &amp;lt;someImg&amp;gt;.src is called anywhere, we'll log some information, then call the&lt;/span&gt;
    &lt;span class="c1"&gt;// target's get() method also using the Reflect API&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;getting the src&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Reflect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;originalImgSrc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// When &amp;lt;someImg&amp;gt;.src = 'something' is called anywhere, we'll log some information, then call the&lt;/span&gt;
    &lt;span class="c1"&gt;// target's set() method also using the Reflect API&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`setting src to &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Reflect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;originalImgSrc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From an application's perspective, this change is transparent. The &lt;code&gt;src&lt;/code&gt; attribute of any &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; node can be manipulated as though this override didn't exist. We're only intercepting access to these fields, taking some action, then carrying on as though nothing happened. The underlying app would require not knowledge of such a change and would remain functionally unchanged.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#proxy-example"&gt;
  &lt;/a&gt;
  Proxy Example
&lt;/h2&gt;

&lt;p&gt;How could we leverage the &lt;code&gt;Proxy&lt;/code&gt; object? We may need to trap behaviors captured deep in the internals of some library or framework in order to redefine them entirely. Let's imagine a scenario in which a framework has two internal methods that manipulate the DOM. Both methods achieve the same end result, but one is asynchronous while the other is not. The asynchronous version may be the better choice for most apps for performance reasons, but in order to accurately track every action a user is taking we'd prefer it if developers only used the synchronous version.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;Proxy&lt;/code&gt;, this isn't a problem, and it's something we can control entirely ourselves without the need for applications to change their own source.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;someFramework&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#framework-root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;framework&lt;/span&gt;

&lt;span class="nx"&gt;someFramework&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blockingUpdate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someFramework&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blockingUpdate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;thisArg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;argArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Here we'll take some action whenever a call to blockingUpdate() is made&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Intercepted a call to blockingUpdate()&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;Reflect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;thisArg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;argArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;someFramework&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asyncUpdate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someFramework&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;asyncUpdate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;thisArg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;argArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Here we'll redefine calls to asyncUpdate() to instead invoke blockingUpdate()&lt;/span&gt;
    &lt;span class="nb"&gt;Reflect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someFramework&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blockingUpdate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;thisArg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;argArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;It's important to be thoughtful when using the APIs described in this article. In general, web applications should not be redefining core web APIs (we think Reflect's use-case is an exception), but when &lt;code&gt;Proxy&lt;/code&gt; and &lt;code&gt;Reflect&lt;/code&gt; are the right tools for the job, it's also important to understand how they work. For instance, in the past we've used the &lt;code&gt;Reflect.defineProperty&lt;/code&gt; function to redefine a global 3rd party property that exists on many sites on the web, but when we did so we forgot to include the &lt;code&gt;enumerable: true&lt;/code&gt; field. One site in particular was relying on that property being enumerable, and so when we redefined it some functionality on their site stopped working in the context of using the Reflect app.&lt;/p&gt;

&lt;p&gt;Reflect (the application) can be thought of as a top-to bottom reflective web application container that ideally is transparent to the web application it is observing and manipulating. If you'd like to learn more about how Reflect works, we'd love to hear from you! You can reach us at &lt;a href="mailto:info@reflect.run"&gt;info@reflect.run&lt;/a&gt;. Happy testing!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>Random Color Generator using JavaScript </title>
      <author>Shantanu Jana</author>
      <pubDate>Tue, 26 Oct 2021 16:23:04 +0000</pubDate>
      <link>https://dev.to/shantanu_jana/random-color-generator-using-javascript-2j13</link>
      <guid>https://dev.to/shantanu_jana/random-color-generator-using-javascript-2j13</guid>
      <description>&lt;p&gt;In this article you will learn how to create Random Color Generator using JavaScript HTML and CSS. This project will help create colors in a random way.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.foolishdeveloper.com/2021/10/random-color-generator-with-javascript.html"&gt;Watch its live demo&lt;/a&gt; to learn how it works. First I designed that page and made a box on it. The box first uses a heading and then a display. This display will help to see the color. &lt;/p&gt;

&lt;p&gt;Then there is a small box where the generated random color code can be seen. We have created two buttons at the bottom, the first button to generate color and the second to copy color code. Everything is made with absolutely simple HTML CSS JavaScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-basic-structure-of-random-color-generator"&gt;
  &lt;/a&gt;
  Step 1: Basic structure of Random Color Generator
&lt;/h3&gt;

&lt;p&gt;I first created a box using the following codes. In this box I have created all the information like headings, displays, buttons. &lt;/p&gt;

&lt;p&gt;I used white as the background color of the box and I used &lt;code&gt;width 60vmin&lt;/code&gt;. &lt;code&gt;Border-radius: 10px&lt;/code&gt; helped to make it slightly rounded.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#0574c8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60vmin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.5em&lt;/span&gt; &lt;span class="m"&gt;1.1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3vmin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KJdc8ylg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6akz81g28sirl0j81n10.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KJdc8ylg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6akz81g28sirl0j81n10.jpg" alt="Basic structure of Random Color Generator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-create-a-title-in-the-box"&gt;
  &lt;/a&gt;
  Step 2: Create a title in the box
&lt;/h3&gt;

&lt;p&gt;Now I have created a heading. &lt;code&gt;Font-size: 27px&lt;/code&gt; helped to increase the size of the title. &lt;code&gt;Text-align: center&lt;/code&gt; helps to place text in the middle of the box.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Color Generator&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;27px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#09599a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8J_lXk1e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ksp6n0r3kuw8sv26i8vx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8J_lXk1e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ksp6n0r3kuw8sv26i8vx.jpg" alt="Create a title in the box"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-create-a-random-color-viewing-display"&gt;
  &lt;/a&gt;
  Step 3: Create a random color viewing display
&lt;/h3&gt;

&lt;p&gt;Now we have created a display that will help to see the generated color. I have used this display &lt;code&gt;width 100%&lt;/code&gt; and &lt;code&gt;height 30 vmin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It uses a beautiful box-shadow which undoubtedly enhances the beauty a lot.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"output-color"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#output-color&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30vmin&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;139&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;253&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;place-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#output-color&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I have used a kind of animation here. @Keyframes have been used to make the animation work. When you click on the generate button, you will see a beautiful animation in the color display.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.show-color&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pop&lt;/span&gt; &lt;span class="m"&gt;0.8s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AvJC6YpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mqfr1cs7mlzzfu0mvq0y.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AvJC6YpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mqfr1cs7mlzzfu0mvq0y.jpg" alt="Create a random color viewing display"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-create-a-box-to-view-the-color-code"&gt;
  &lt;/a&gt;
  Step 4: Create a box to view the color code
&lt;/h3&gt;

&lt;p&gt;Now is the time to create a small box where the color code can be found. This will allow you to use that code in your own work.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"output"&lt;/span&gt; &lt;span class="na"&gt;readonly&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"text"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;139&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;253&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.65&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.3em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.3em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"text"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;::-moz-selection&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"text"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;::selection&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TTKwUZ2P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/29xtf16z6q4o8nyra3hf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TTKwUZ2P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/29xtf16z6q4o8nyra3hf.jpg" alt="Create a box to view the color code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-create-two-buttons-to-generate-random-color"&gt;
  &lt;/a&gt;
  Step 5: Create two buttons to generate Random Color
&lt;/h3&gt;

&lt;p&gt;Now I have created two buttons in this &lt;strong&gt;&lt;a href="https://www.foolishdeveloper.com/2021/10/random-color-generator-with-javascript.html"&gt;random color generator&lt;/a&gt;&lt;/strong&gt;. Those two buttons will help to generate colors and copy color codes. The length of the two buttons is 120px and the four corners help to make something round &lt;code&gt;border-radius: 7px&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt; &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btns"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"gen-btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Generate&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"copy-btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Copy&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.btns&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-around&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.btns&lt;/span&gt; &lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.03em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.8em&lt;/span&gt; &lt;span class="m"&gt;1.7em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;7px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;120px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I have added different text colors and background colors for the buttons. In the case of the first button, the background is blue and the text color is white. In the same way I have used background red and text color white for the second.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#gen-btn&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#205e94&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#copy-btn&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#d23332&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-6-activate-random-color-generator-with-javascript"&gt;
  &lt;/a&gt;
  Step 6: Activate Random Color Generator with JavaScript
&lt;/h3&gt;

&lt;p&gt;I hope you have created the basic structure of this project (Random Color Generator with JavaScript).&lt;/p&gt;

&lt;p&gt;Now it needs to be fully implemented using JavaScript. First I set the constants of some ID functions one by one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;outputColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#output-color span&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;output&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;genBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;gen-btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;copyBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;copy-btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I have added the Hex string characters. Hex string is the binary value of the string in hexadecimal notation. These codes combine to form random colors.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hexString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0123456789abcdef&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I have created all the systems in genHexCode i.e. how the color codes will be connected to each other and the color will be created. If you know basic JavaScript you can easily understand it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;genHexCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hexCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;hexCode&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;hexString&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;hexString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hexCode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;outputColor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;show-color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;outputColor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;show-color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;outputColor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hexCode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I have activated the generate button. The JavaScript structure added above will take effect when you click on that button. As a result, we can see the color in the display.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;genHexCode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;genBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;genHexCode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I have activated the copy button. The generated color code will be copied whenever you click on the copy button. You can then use that code to do whatever you need.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;copyBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;execCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;copy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yeXtIFY8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4570vyjztcna2c787p9o.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yeXtIFY8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4570vyjztcna2c787p9o.jpg" alt="random color generator using JavaScript"&gt;&lt;/a&gt;&lt;br&gt;
 Hopefully from this tutorial you have learned how to create a random color generator using JavaScript. Be sure to comment on how you like the tutorial.&lt;/p&gt;

&lt;p&gt;You can visit my blog for more tutorials like this. 😊&lt;br&gt;
&lt;a href="https://www.foolishdeveloper.com/"&gt;https://www.foolishdeveloper.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Deploying Amplication Server To Digital Ocean </title>
      <author>Asian Cat</author>
      <pubDate>Tue, 26 Oct 2021 16:21:51 +0000</pubDate>
      <link>https://dev.to/asiancat54x/deploying-amplication-app-to-digital-ocean-5d7k</link>
      <guid>https://dev.to/asiancat54x/deploying-amplication-app-to-digital-ocean-5d7k</guid>
      <description>&lt;p&gt;Hi there! This post teaches you how you can deploy your Amplication Server to Digital Ocean. You can request to the api, create or delete data, get data and so on. &lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-digital-ocean-droplet"&gt;
  &lt;/a&gt;
  Setting up Digital Ocean droplet
&lt;/h2&gt;

&lt;p&gt;Now, in order to run our server, we will need to have a virtual machine, which Digital Ocean provides. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Move to the digital ocean's cloud &lt;a href="https://cloud.digitalocean.com/projects"&gt;website&lt;/a&gt;. 
Click the create dropdown in topbar and click Droplets.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w0ri9BWM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aroxnxnl1c8q4q0hstv4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w0ri9BWM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aroxnxnl1c8q4q0hstv4.png" alt="Dropdown"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Choose the specifications for your droplet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aaiBxvd9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iahhs9yedgsj0ruhc2y1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aaiBxvd9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iahhs9yedgsj0ruhc2y1.png" alt="Specifications 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will use Ubuntu as our disk image. Then, choose a plan according to your requirement.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QNd_hyys--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjkg81qok020dd4hl2xn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QNd_hyys--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wjkg81qok020dd4hl2xn.png" alt="Specifications 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, choose the data center. I would recommend you to choose the center nearest to you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jFbDHZxP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1oapck9uqc1gqjm8ca5i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jFbDHZxP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1oapck9uqc1gqjm8ca5i.png" alt="Specifications 3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I would always recommend you to use SSH Key Authentication. It is secure and better than Password Authentication&lt;/p&gt;

&lt;p&gt;Lastly, click the Create button to create the droplet. It may take 30 sec to 1 min for the droplet to become ready. &lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-the-droplet"&gt;
  &lt;/a&gt;
  Setting up the droplet
&lt;/h2&gt;

&lt;p&gt;Now that your droplet is created, we need to install required packages. The steps for setting up the droplet is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Open a terminal &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run &lt;code&gt;ssh root@&amp;lt;host&amp;gt;&lt;/code&gt; where host is the ipv4 of your droplet. You can get this IP from your droplet by going to the droplet menu. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now you should see that we have successfully connected to the droplet.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Curl the latest version of node - &lt;code&gt;curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install nodejs by running this command - &lt;code&gt;sudo apt-get install -y nodejs&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install docker compose with the following command: &lt;code&gt;apt install docker-compose&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install pm2 - &lt;code&gt;npm install -g pm2&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-the-project"&gt;
  &lt;/a&gt;
  Setting up the project
&lt;/h2&gt;

&lt;p&gt;Now that you have installed nodejs, follow these steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Clone your repository - Clone your repository using git at the home directory or any other directory - &lt;code&gt;git clone &amp;lt;repository_url&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Change directory to the directory where your source code is - &lt;code&gt;cd &amp;lt;folder_name&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Optional: You can actually delete the admin ui folder because we are just deploying our server. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Change directory to the server folder - &lt;code&gt;cd server&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install the required dependencies - &lt;code&gt;npm install&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Wait for the installation to complete&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generate prisma client - &lt;code&gt;npm run prisma:generate&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start the database - &lt;code&gt;npm run docker:db&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Initialize the database - &lt;code&gt;npm run db:init&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now change the port from 3000 to 80. You must be wondering why to do this? Well, we should not allow users to go to specific post to access the api. Since the default port of the browser is 80, we changed the port. This way, the user has to go to &lt;code&gt;http://&amp;lt;host&amp;gt;/&lt;/code&gt; instead of going to &lt;code&gt;http://&amp;lt;host&amp;gt;:3000/&lt;/code&gt;. I hope this makes sense.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Open up the nano editor by running &lt;code&gt;nano src/main.ts&lt;/code&gt; (make sure that you are at server/ directory). You must find a line with this content - &lt;code&gt;const { PORT = 3000 } = process.env;&lt;/code&gt;. Change this to &lt;code&gt;const { PORT = 80 } = process.env;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Press &lt;code&gt;Ctrl + X&lt;/code&gt; then &lt;code&gt;Y&lt;/code&gt; then &lt;code&gt;Enter&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lastly build the application for the production use - &lt;code&gt;npm run build&lt;/code&gt;. This should create a folder &lt;code&gt;dist&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can actually test if your server is working fine. Run &lt;code&gt;node dist/main.js&lt;/code&gt; and go to this website - &lt;code&gt;http://&amp;lt;host&amp;gt;/graphql&lt;/code&gt;, where the host is the ipv4 of your droplet.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you terminate your running code, you will see that the site hangs, keeps on loading and you get this error - &lt;code&gt;&amp;lt;url&amp;gt; took too long to respond&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now, to run this code in background, use this command - &lt;code&gt;pm2 start dist/main.js&lt;/code&gt;. Now, if you again go ahead to the site, you should see it rendering. Amazing!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#creating-a-domain"&gt;
  &lt;/a&gt;
  Creating a domain
&lt;/h2&gt;

&lt;p&gt;Now, of course you will not provide access to the API through the IP address of the droplet. So, we use domains. Go ahead and buy a domain (I buyed the domain for free from the site &lt;code&gt;https://www.freenom.com/en/index.html&lt;/code&gt;).&lt;/p&gt;


 
&lt;h2&gt;
  &lt;a href="#setting-up-the-domain"&gt;
  &lt;/a&gt;
  Setting up the domain
&lt;/h2&gt;

&lt;p&gt;Follow these steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click the domains option in left bar of Digital Ocean's Home&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OlxZrRBq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i9tryby1te75f69sdjyk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OlxZrRBq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i9tryby1te75f69sdjyk.png" alt="Domains"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Next, you should see a input box saying "Enter Domain". Enter the domain there.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pHR2W0Yo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cfv52ob2qi426ywx2366.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pHR2W0Yo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cfv52ob2qi426ywx2366.png" alt="Domain Enter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then click "Add Domain"&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create records&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, click on the &lt;em&gt;A&lt;/em&gt; button in the menu under "Create new record"&lt;/p&gt;

&lt;p&gt;You can create a subdomain which represents what that domain does. Like we are deploying the api, we can use api.ecommerce.ml. Use "@" if you dont want to create subdomains. Next, Under "Will Redirect To", choose your droplet. The click "Create Record"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ai5Firdf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ygqxlus7euqz8tm5m9v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ai5Firdf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ygqxlus7euqz8tm5m9v.png" alt="a"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add NameServers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, different domain providers have different locations for setting up the name servers. Under "DNS Records, you will wind three nameservers (It would be in a &lt;code&gt;ns&amp;lt;number&amp;gt;.digitalocean.com&lt;/code&gt;). Copy them and add to the servers (You can find out how to do so by following tutorial on that specific domain provider).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adding CNAME&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Move to CNAME option in the menu. Enter the host name as &lt;code&gt;www&lt;/code&gt; and &lt;code&gt;@&lt;/code&gt; under the "Is An Alias of". Then click "Create Record"&lt;/p&gt;

&lt;p&gt;Note: It may take some time for your droplet to start on the domain.&lt;/p&gt;




&lt;p&gt;Done! You have successfully deployed your server to Digital Ocean!&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#testing-our-api"&gt;
  &lt;/a&gt;
  Testing Our API
&lt;/h2&gt;

&lt;p&gt;Now that we have successfully deployed our server, its time to test the server. We will make some requests, and check the output.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simple GET request for users
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import fetch from "node-fetch"

fetch("http://&amp;lt;your_website&amp;gt;/api/users" , {
    method: "GET",
    headers: {
        "Authorization": "Basic YWRtaW46YWRtaW4="
    }
}).then((res) =&amp;gt; res.json())
.then((data) =&amp;gt; console.log(data))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run the above code, you should see the list of users available.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#ending"&gt;
  &lt;/a&gt;
  Ending
&lt;/h2&gt;

&lt;p&gt;I hope that you have understood how you can deploy your app server to Digital Ocean.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I, not only want to thanks &lt;a href="https://github.com/yuval-hazaz"&gt;Yuval Hazaz&lt;/a&gt; for this amazing project, but also for helping me to make this tutorial.&lt;/p&gt;




&lt;p&gt;My &lt;a href="https://github.com/AsianCat54x"&gt;github profile&lt;/a&gt;&lt;/p&gt;

</description>
      <category>digitalocean</category>
      <category>amplication</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Easiest way to add multilanguage in your website</title>
      <author>Shuvo</author>
      <pubDate>Tue, 26 Oct 2021 15:37:39 +0000</pubDate>
      <link>https://dev.to/0shuvo0/easiest-way-to-add-multilanguage-in-your-website-4n7</link>
      <guid>https://dev.to/0shuvo0/easiest-way-to-add-multilanguage-in-your-website-4n7</guid>
      <description>&lt;p&gt;If you want to scale your website then it'd be a really good idea to add multiple language support in your site so that language wont be a barrier.&lt;/p&gt;

&lt;p&gt;Now this might sound really hard and complicated but &lt;a href="https://tolgee.io/"&gt;tolgee.io&lt;/a&gt; makes it really easy. You can literally &lt;strong&gt;make a multilingual website UNDER 10 MINUTES&lt;/strong&gt;. And it is framework independent. So you can use it with &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt;, &lt;a href="https://vuejs.org/"&gt;Vue JS&lt;/a&gt; or any framework that you want. But in this article we will see how to use it with vanilla JavaScript project.&lt;/p&gt;

&lt;p&gt;So let me show you how to do just that in just 10 simple steps:&lt;br&gt;
1) So first you have to create an account on &lt;a href="https://tolgee.io/"&gt;tolgee.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2) Then click on &lt;strong&gt;Go to app&lt;/strong&gt; then click on &lt;strong&gt;ADD&lt;/strong&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4mFJYC9V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tamtbphj1kwrm9j25iyy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4mFJYC9V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tamtbphj1kwrm9j25iyy.png" alt="Tolgee go to app button"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mq6MUCCt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/013ut6ezcqydj8ix2ms2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mq6MUCCt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/013ut6ezcqydj8ix2ms2.png" alt="Tolgee add button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3) Then you have to enter the name of you project/website. And select the languages you want to add to your website. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IOMtZobI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ba009iegg7ejd3u1m9af.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IOMtZobI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ba009iegg7ejd3u1m9af.png" alt="Tolgee create project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4) The click on your project. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5R4amStY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0npn17gxwxb9niqbvon6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5R4amStY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0npn17gxwxb9niqbvon6.png" alt="Project list"&gt;&lt;/a&gt; the add the texts that you want to show in those languages. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nJGfHcrb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7wg8na8m63ssuive2m2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nJGfHcrb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7wg8na8m63ssuive2m2.png" alt="Add text button"&gt;&lt;/a&gt;&lt;br&gt;
Feel free to use &lt;a href="https://translate.google.com/"&gt;Google translate.&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z8wvvrK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0w1oekva48yhfzno13x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z8wvvrK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0w1oekva48yhfzno13x.png" alt="Add text in tolgee project"&gt;&lt;/a&gt; &lt;em&gt;Your key should be named like a variable&lt;/em&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rf0qzE_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hqwfdyhd9nq53ojnsxxz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rf0qzE_m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hqwfdyhd9nq53ojnsxxz.png" alt="Added texts list"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5) Then click on &lt;strong&gt;integrate&lt;/strong&gt; and choose your framework which will be JS in our case and create a api key. And make sure you copy it, we will need it in a moment.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IEuGSpAT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvhcgcc5c8ipr1p2w78k.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IEuGSpAT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvhcgcc5c8ipr1p2w78k.gif" alt="creating api key"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;6) Now we are finally ready for the coding part. So create a &lt;strong&gt;index.html&lt;/strong&gt; and link &lt;strong&gt;&lt;a href="https://unpkg.com/@tolgee/core/dist/tolgee.umd.min.js"&gt;https://unpkg.com/@tolgee/core/dist/tolgee.umd.min.js&lt;/a&gt;&lt;/strong&gt; in it. It is the CDN for Tolgee SDK.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Hello world&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;%-%welcome_message%-%&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;%-%msg_long%-%&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/@tolgee/core/dist/tolgee.umd.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&lt;/span&gt; &lt;span class="err"&gt;src="main.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Notice that we have some weird syntax. What is &lt;strong&gt;%-%welcome_message%-%&lt;/strong&gt; and &lt;strong&gt;%-%msg_long%-%&lt;/strong&gt;?  Well these are just the key we have defined. These will be complied to the actual text we defined.&lt;/p&gt;

&lt;p&gt;7) Now we need to initialize our tolgee app in &lt;strong&gt;main.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@tolgee/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;Tolgee&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;apiUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://app.tolgee.io&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The_API_key_You_coped&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;inputPrefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%-%&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;inputSuffix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%-%&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;tg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here the &lt;strong&gt;inputPrefix&lt;/strong&gt; and &lt;strong&gt;inputSuffix&lt;/strong&gt; are basically the characters our key is wrapped around. In Vue JS we use double set on curly braces and single set in react. So we are doing similar thing here, just the data is coming from tolgee.&lt;br&gt;
And now if you open &lt;strong&gt;index.html&lt;/strong&gt; with live server you will see you get the text we defined in our tolgee project earlier. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R0NqFXn2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4hu70g63w0zhaawtlecb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R0NqFXn2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4hu70g63w0zhaawtlecb.png" alt="translation demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;8) But you will notice for for some moments we see those expressions uncompiled. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yejd6Qw5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u7v5pjh3dpvn7e6dguqf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yejd6Qw5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u7v5pjh3dpvn7e6dguqf.png" alt="Uncompiled tolgee expression"&gt;&lt;/a&gt;&lt;br&gt;
  We don't want our users too see that. So to hide them you can implement a full screen loader.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"loader"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"height: 100vh"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Loading&lt;span class="nt"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;%-%welcome_message%-%&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;%-%msg_long%-%&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@tolgee/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;Tolgee&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;apiUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://app.tolgee.io&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;71mpth0erv28oidqrt14d8l01e&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;inputPrefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%-%&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;inputSuffix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%-%&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;tg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//Hide the loader after tolgee has ran&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.loader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;9) Now we want our user to be able to select a language from a drop down list and the language of webpage should change according to that. So for that lets first create a select in our &lt;strong&gt;html&lt;/strong&gt; document&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;select&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"lang-select"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Englis&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"hi"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hindi&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"zh-Hans"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Chienese (Simplified.)&lt;span class="nt"&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/select&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;%-%welcome_message%-%&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;%-%msg_long%-%&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;10) Now finally in the javascript when the user select any language we want to translate our contents accordingly.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@tolgee/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;Tolgee&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;apiUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://app.tolgee.io&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;apiKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;71mpth0erv28oidqrt14d8l01e&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;inputPrefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%-%&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;inputSuffix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%-%&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;tg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;langs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.lang-select&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;langs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;change&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//Changing the language of our page&lt;/span&gt;
    &lt;span class="nx"&gt;tg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lang&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ObhjEZU4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u9mi8rbzc9ex73tetxi8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ObhjEZU4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u9mi8rbzc9ex73tetxi8.gif" alt="toleee final demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And there now we have successfully made a multilingual website using JavaScript and Tolgee.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#final-thaught"&gt;
  &lt;/a&gt;
  Final thaught:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Tolgee is beginner friendly and easy to use&lt;/li&gt;
&lt;li&gt;We have only touched the surface, there's a lot more Tolgee can do, For example on page adding and editing translation using tolgee UI&lt;/li&gt;
&lt;li&gt;You can export your translations as JSON for production. See &lt;a href="https://tolgee.io/docs/web/get_started/preparing_for_production"&gt;preparing for production&lt;/a&gt; tips&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So make sure you checkout &lt;a href="https://tolgee.io/"&gt;Tolgee&lt;/a&gt; docs and level up your skills. Its highly recommended by me.&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__728097"&gt;
  
    .ltag__user__id__728097 .follow-action-button {
      background-color: #000000 !important;
      color: #ffffff !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/0shuvo0" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wZgMNup---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j0_lvM9_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/728097/0f6e1da9-f243-42d0-b446-301ac6ea6412.jpeg" alt="0shuvo0 image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/0shuvo0"&gt;Shuvo&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/0shuvo0"&gt;Frontend Developer and YouTuber.
Channel link: https://www.youtube.com/c/AngleBrace&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Por que decidi aprender (e ensinar) Clojure</title>
      <author>Marcio Frayze</author>
      <pubDate>Tue, 26 Oct 2021 15:35:31 +0000</pubDate>
      <link>https://dev.to/marciofrayze/por-que-decidi-aprender-e-ensinar-clojure-1j6m</link>
      <guid>https://dev.to/marciofrayze/por-que-decidi-aprender-e-ensinar-clojure-1j6m</guid>
      <description>&lt;p&gt;Em 2017 comecei a me aprofundar no universo da Programação Funcional. Este paradigma já ganhava bastante popularidade e cada vez mais as principais linguagens de programação orientadas a objetos incluíam recursos inspirados neste paradigma, inclusive a linguagem que eu mais utilizava: Java.&lt;/p&gt;

&lt;p&gt;Após o lançamento da versão 8 da JDK, em março de 2014, passou a ser cada vez mais comum ouvir as pessoas desenvolvedoras Java usando termos como: programação funcional, &lt;em&gt;streams&lt;/em&gt;, &lt;em&gt;optional&lt;/em&gt;, &lt;em&gt;map&lt;/em&gt;, &lt;em&gt;flat map&lt;/em&gt;, etc. Mas muitas pessoas em meu entorno ainda ignoravam estes novos recurso e, confesso, demorei para adotar essas novidades. As ideias pareciam muita interessantes, mas colocá-las em prática se mostrou mais difícil do que eu esperava.&lt;/p&gt;

&lt;p&gt;Depois de muita tentativa e erro, resolvi me aprofundar nos conceitos. O livro &lt;a href="https://www.oreilly.com/library/view/functional-thinking/9781449365509/"&gt;Functional Thinking&lt;/a&gt; me ajudou a dar os primeiros passos na direção correta.&lt;/p&gt;

&lt;p&gt;Em paralelo decidi que iria aprender uma linguagem funcional mais pura ao invés de tentar aplicar o paradigma funcional em uma linguagem orientada a objetos. Depois de pesquisar bastante, optei por aprender &lt;a href="https://elm-lang.org"&gt;Elm&lt;/a&gt;. O fato de ser uma linguagem funcional pura e imutável me chamou atenção. Alem disso, ela é focada no desenvolvimento de &lt;em&gt;webapps&lt;/em&gt; e, até então, eu não havia encontrado nenhuma solução para desenvolvimento de páginas web que me agradasse. &lt;/p&gt;

&lt;p&gt;Depois de passar por todo &lt;a href="https://guide.elm-lang.org"&gt;Guia de introdução à linguagem Elm&lt;/a&gt; e ler o livro &lt;a href="https://www.manning.com/books/elm-in-action"&gt;Elm in Action&lt;/a&gt;, já me sentia bastante confortável em desenvolver &lt;em&gt;webapps&lt;/em&gt; neste paradigma. Gostei tanto de Elm que iniciei um projeto para ensinar programação para iniciantes usando esta linguagem e disponibilizei as primeiras aulas no site &lt;a href="https://elm.dev.br"&gt;elm.dev.br&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Mas havia um problema sério que ainda precisava encarar: Elm é uma linguagem concebida para desenvolvimento de &lt;em&gt;webapps&lt;/em&gt; e funciona muito bem para isso, mas eu buscava uma solução de uso geral, que pudesse ser utilizada também no desenvolvimento de &lt;em&gt;backends&lt;/em&gt;. Por isso voltei a estudar as alternativas.&lt;/p&gt;

&lt;p&gt;Elm é uma linguagem estaticamente tipada e inspirada em &lt;a href="https://www.haskell.org"&gt;Haskell&lt;/a&gt;. O passo natural seria utilizar Elm no &lt;em&gt;frontend&lt;/em&gt; e Haskell no &lt;em&gt;backend&lt;/em&gt;. E foi o que tentei fazer. Li com certa dificuldade o livro &lt;em&gt;Learn You a Haskell for Great Good!&lt;/em&gt; (disponível gratuitamente &lt;a href="http://learnyouahaskell.com"&gt;aqui&lt;/a&gt;) e aprendi muita coisa legal. Mas criar um &lt;em&gt;backend&lt;/em&gt; completo usando Haskell mostrou-se um passo maior do que eu conseguiria dar naquele momento. Resolvi então procurar outras alternativas...&lt;/p&gt;

&lt;p&gt;Durante todo esse processo a palavra &lt;a href="https://pt.wikipedia.org/wiki/Lisp"&gt;Lisp&lt;/a&gt; não saía da minha cabeça! De tempos em tempos esbarrava em algum vídeo de alguma pessoa influente na comunidade falando sobre ela (como &lt;a href="https://www.youtube.com/watch?v=Uooh0Y9fC_M#t=4876ab_channel=IGN"&gt;este vídeo&lt;/a&gt; ou &lt;a href="https://twitter.com/ID_AA_Carmack/status/577877590070919168"&gt;este twit&lt;/a&gt; do &lt;a href="https://pt.wikipedia.org/wiki/John_Carmack"&gt;John Carmack&lt;/a&gt;, fundador da &lt;em&gt;id Software&lt;/em&gt;). Parecia algo místico. E o fato do &lt;a href="https://building.nubank.com.br/working-with-clojure-at-nubank"&gt;Nubank ter adotado Clojure&lt;/a&gt; trouxe um estudo de caso bastante real e pragmático do uso de um dialeto de Lisp no Brasil. &lt;/p&gt;

&lt;p&gt;Até então estava postergando estudá-la pois estava priorizando linguagens estaticamente tipadas e os dialetos mais famosos de Lisp são linguagens dinâmicas. Mas no começo de 2021 resolvi finalmente dar uma chance. Escolhi a linguagem &lt;a href="https://clojure.org%7CClojure"&gt;Clojure&lt;/a&gt; e comecei a ler o livro &lt;a href="https://pragprog.com/titles/roclojure/getting-clojure"&gt;Getting Clojure&lt;/a&gt;. Ao contrário dos meus estudos de Haskell, consegui ler este livro em poucos dias! Em paralelo comecei a fazer as aulas da &lt;a href="https://www.alura.com.br/formacao-clojure"&gt;Formação Clojure da Alura&lt;/a&gt;, que me ajudaram a ver mais na prática como programar nesta linguagem. Foi uma boa combinação: no livro eu aprendia mais a fundo os conceitos da linguagem e no curso revisava estes conceitos e aprendia a parte um pouco mais prática.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#principais-caracter%C3%ADsticas-de-clojure"&gt;
  &lt;/a&gt;
  Principais características de Clojure
&lt;/h2&gt;

&lt;p&gt;Lisp não é uma linguagem de programação, mas uma família de linguagens com diversos &lt;em&gt;dialetos&lt;/em&gt;. Os dialetos mais famosos incluem a &lt;a href="https://lisp-lang.org"&gt;Common Lisp&lt;/a&gt;, &lt;a href="https://clojure.org"&gt;Clojure&lt;/a&gt;, &lt;a href="https://groups.csail.mit.edu/mac/projects/scheme"&gt;Scheme&lt;/a&gt; e &lt;a href="https://racket-lang.org"&gt;Racket&lt;/a&gt;. Desta forma, após decidir que iria aprender Lisp, precisaria escolher um de seus dialetos.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://clojure.org"&gt;Clojure&lt;/a&gt; se destacou para mim por duas razões:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ela utiliza a máquina virtual do Java, possibilitando interoperabilidade com aplicações Java (que como disse no início do artigo, é a linguagem que costumo utilizar no &lt;em&gt;backend&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;ela utiliza predominantemente o paradigma funcional. Alguns dialetos de Lisp (como o Common Lisp, por exemplo) são multiparadigma, mas como minha intenção era me aprofundar no universo da programação funcional, fazia mais sentido adotar um dialeto que desse preferência para este paradigma.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A experiência de programar em Clojure foi bastante libertadora. Praticar &lt;a href="https://pt.wikipedia.org/wiki/Test-driven_development"&gt;TDD&lt;/a&gt; junto com o &lt;a href="https://practical.li/clojure/repl-driven-devlopment.html"&gt;REPL Driven Development&lt;/a&gt; (técnica bastante difundida dentro da&lt;br&gt;
comunidade Clojure) faz com que o ciclo de &lt;em&gt;feedback&lt;/em&gt; seja muito rápido. O fato de Clojure ser uma linguagem dinâmica também contribui para isso.&lt;/p&gt;

&lt;p&gt;Outra característica de Clojure é ser uma linguagem &lt;em&gt;impura&lt;/em&gt;, ou seja, podemos efetuar &lt;em&gt;efeitos colaterais&lt;/em&gt; a qualquer momento. A principal vantagem disso é que torna a linguagem mais fácil de aprender (embora traga junto uma série de outros problemas que não acontecem em linguagens mais puras, como Elm ou Haskell). Escrevi &lt;a href="https://segunda.tech/posts/2019-08-26-funcoes-puras"&gt;um artigo sobre Funções Puras&lt;/a&gt; onde explico melhor este tema. Também &lt;a href="https://www.youtube.com/watch?v=QenAR_3XtXU&amp;amp;t=1189s&amp;amp;ab_channel=segunda.tech"&gt;gravei um vídeo&lt;/a&gt; explicando o que são Função Puras.&lt;/p&gt;

&lt;p&gt;Embora seja uma linguagem impura, ela incentiva uma série de boas práticas que fazem com que os potenciais problemas dessa abordagem sejam significativamente reduzidos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#como-dar-os-primeiros-passos-em-clojure"&gt;
  &lt;/a&gt;
  Como dar os primeiros passos em Clojure
&lt;/h2&gt;

&lt;p&gt;Todas essas características que citei ao longo do artigo fazem com que Clojure, embora tenha uma aparência um pouco intimidadora no começo, seja na verdade bastante fácil de utilizar. Por isso escolhi também esta linguagem para compartilhar com outras pessoas desenvolvedoras os fundamentos básicos da &lt;em&gt;programação funcional&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Para quem gosta de livros, recomendo iniciar pelo &lt;a href="https://pragprog.com/titles/roclojure/getting-clojure"&gt;Getting Clojure&lt;/a&gt;, que como disse é uma ótima forma de entender os princípios básicos por trás do Clojure, ou se preferir uma opção gratuita pode começar pela versão online do livro &lt;a href="https://www.braveclojure.com"&gt;Clojure for Brave and True&lt;/a&gt;. Outra opção mais focada nos fundamentos do paradigma e que aborda outras linguagens além de Clojure é o livro &lt;a href="https://www.oreilly.com/library/view/functional-thinking/9781449365509/"&gt;Functional Thinking&lt;/a&gt;, do Neal Ford. Gravei um &lt;a href="https://segunda.tech/posts/2019-06-17-functional-thinking"&gt;podcast&lt;/a&gt; onde falo um pouco sobre esta obra. Estes 3 livros são em inglês. Se quiser uma leitura em português a editora Casa do Código tem disponível o livro &lt;a href="https://www.casadocodigo.com.br/products/livro-programacao-funcional-clojure"&gt;Programação Funcional: Uma introdução em Clojure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Se preferir estudar através de &lt;em&gt;cursos &lt;em&gt;online&lt;/em&gt;&lt;/em&gt;, você pode se inscrever no meu curso &lt;a href="https://segundatech.teachable.com"&gt;Clojure: Introdução à Programação Funcional&lt;/a&gt;. Ou pode fazer os cursos da &lt;a href="https://www.alura.com.br/formacao-clojure"&gt;Formação Clojure da Alura&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;E você, qual seu paradigma preferido? Já tentou programar utilizando o paradigma funcional? Quais foram suas principais dificuldades? Compartilhe suas experiências nos comentários!&lt;/p&gt;

&lt;p&gt;Se você gostou deste texto talvez goste dos meus outros artigos, vídeos e podcasts disponíveis em &lt;a href="//segunda.tech"&gt;segunda.tech&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>clojure</category>
      <category>functional</category>
      <category>java</category>
    </item>
    <item>
      <title>Beginner's Guide to JavaScript Operators - Part One</title>
      <author>Sumudu Siriwardana</author>
      <pubDate>Tue, 26 Oct 2021 15:29:58 +0000</pubDate>
      <link>https://dev.to/sumusiriwardana/beginners-guide-to-javascript-operators-part-one-eld</link>
      <guid>https://dev.to/sumusiriwardana/beginners-guide-to-javascript-operators-part-one-eld</guid>
      <description>&lt;p&gt;Have you thought about how we can tell our program to do a specific task? For example, how do we add two numbers together or compare two values?  &lt;/p&gt;

&lt;p&gt;If you remember your arithmetic lessons, we use the &lt;code&gt;+&lt;/code&gt; sign to add two numbers. We use this same sign in JavaScript for additions, and we call them operators.&lt;/p&gt;

&lt;p&gt;In this first article of the beginner's guide to JavaScript operators series, we will explore some of the basic operators in JavaScript! 😊&lt;/p&gt;

&lt;p&gt;Are you ready? 😉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A5T9u-bM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634695857356/C7Z8grolw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A5T9u-bM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634695857356/C7Z8grolw.gif" alt="are-you-ready.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out the Table of Contents below to see what we will be going over in this article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-are-operators-and-operands"&gt;What are operators and operands?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#arithmetic-operators"&gt;Arithmetic Operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#assignment-operators"&gt;Assignment Operators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#operator-precedence"&gt;Operator Precedence&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-are-operators-and-operands"&gt;
  &lt;/a&gt;
  What are operators and operands?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;An operator performs some operation on single or multiple operands (data values) and produces a result.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What does this mean? &lt;/p&gt;

&lt;p&gt;Let's look at the below example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;2 + 3 = 5&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here, we have to add &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt; to get the final value. So we are using &lt;code&gt;+&lt;/code&gt; to add these two values. And the final value is &lt;code&gt;5&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;In the above example, the &lt;code&gt;+&lt;/code&gt; sign performs an arithmetic operation to add these two values. So this &lt;code&gt;+&lt;/code&gt; sign is the &lt;strong&gt;operator&lt;/strong&gt; here. In modern programming languages, we use this &lt;code&gt;+&lt;/code&gt; sign to add two values. &lt;/p&gt;

&lt;p&gt;An operand is a data value that the operator will carry out the actions. It is the values on which we operate. So, in the above example, &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt; are &lt;strong&gt;operands&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6onQZ7sb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634696119802/opqnLtAOv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6onQZ7sb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634696119802/opqnLtAOv.gif" alt="addition.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are &lt;em&gt;binary&lt;/em&gt; operators, &lt;em&gt;unary&lt;/em&gt; operators, and a &lt;em&gt;ternary&lt;/em&gt; operator in JavaScript. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Binary&lt;/em&gt; operators have two values or operands, that one value comes before the operator, and one comes after the operator. For example, &lt;code&gt;1 + 2&lt;/code&gt; is a binary operator. So &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; are the operands, and &lt;code&gt;+&lt;/code&gt; is the operator here. &lt;/p&gt;

&lt;p&gt;There is only one operand in &lt;em&gt;unary&lt;/em&gt; operators. We place the operand before or after the operator.  &lt;code&gt;x++&lt;/code&gt; is an example of the unary operator. We can see only one operand here, which comes before the operator. Don't worry if you don't understand this syntax. Let's come back to this in a later section in this post. &lt;/p&gt;

&lt;p&gt;The &lt;em&gt;ternary&lt;/em&gt; operator has three operands. It is also known as a "conditional" operator.  An example of a ternary operator is &lt;code&gt;age &amp;gt;= 18 ? "can drive" : "can't drive";&lt;/code&gt;. We will dive into ternary operators later in this post.  &lt;/p&gt;

&lt;p&gt;Alright! I hope now you understand what's an operator and what's an operand. You are going to hear these two names many times in this post 😄&lt;/p&gt;

&lt;p&gt;JavaScript supports various operators, and we will be exploring six types of operators, which are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Arithmetic Operators&lt;/li&gt;
&lt;li&gt;Assignment Operators&lt;/li&gt;
&lt;li&gt;Comparison Operators&lt;/li&gt;
&lt;li&gt;Logical Operators&lt;/li&gt;
&lt;li&gt;Ternary Operators&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;typeof&lt;/code&gt; Operator&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article, we will learn about Arithmetic and assignment operators, and we will go through the rest in the second part of this series. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#arithmetic-operators"&gt;
  &lt;/a&gt;
  Arithmetic Operators
&lt;/h2&gt;

&lt;p&gt;We use arithmetic operators to do mathematical operations like addition, subtraction, multiplication, division, etc. It simply takes numerical values as the operands, performs an arithmetic operation, and returns a numerical value. &lt;/p&gt;

&lt;p&gt;Let's look at some of the arithmetic operators in javaScript in the below list. &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operator Name&lt;/th&gt;
&lt;th&gt;Operator  symbol&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;let x = 10, y = 5&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Addition&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Adds two numeric operands.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x + y = 15&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Subtraction&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Subtract right operand from left operand.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x - y = 5&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multiplication&lt;/td&gt;
&lt;td&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Multiply two numeric operands.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x * y = 50&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Division&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Divide left operand by right operand.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x / y = 2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Remainder&lt;/td&gt;
&lt;td&gt;&lt;code&gt;%&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Returns remainder of two operands.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x % y = 0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Increment&lt;/td&gt;
&lt;td&gt;&lt;code&gt;++&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Increase operand value by one.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;++x = 11&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Decrement&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Decrease value by one.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;y-- = 5&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Exponentiation&lt;/td&gt;
&lt;td&gt;&lt;code&gt;**&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Raise one operand to the power of the other operand.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x ** y = 100000&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Now let's see some examples of the above operators.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;// 10 + 5 --&amp;gt; 15&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;// 10 - 5 --&amp;gt; 5&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;// 10 * 5 --&amp;gt; 50&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;// 10 / 5 --&amp;gt; 2&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;z&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;// 10 % 3 --&amp;gt; 1&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;     &lt;span class="c1"&gt;// 10&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;     &lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 5 * 5 * 5 --&amp;gt; 125 &lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Have you noticed that we used two different styles to write increment and decrement operators? Sometimes we used the operator after the operand &lt;code&gt;x++&lt;/code&gt;, sometimes before the operand &lt;code&gt;--y&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;For example, we used &lt;code&gt;x++&lt;/code&gt; in the example above, and the output result was &lt;code&gt;10&lt;/code&gt;. So what happens if we write it as &lt;code&gt;++x&lt;/code&gt;? Then the output result would be &lt;code&gt;11&lt;/code&gt;. Are you confused? Let's find out why this is happening. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-prefix-and-postfix"&gt;
  &lt;/a&gt;
  JavaScript prefix and postfix
&lt;/h3&gt;

&lt;p&gt;We can assign the JavaScript increment and decrement operators either before the operand or after the operand. If we assign &lt;code&gt;++&lt;/code&gt; or &lt;code&gt;--&lt;/code&gt; before the operand &lt;code&gt;(++x)&lt;/code&gt;, then we call it "prefix". If we assign it after the operand &lt;code&gt;(x++)&lt;/code&gt;, we call it "postfix". &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using ++/-- After the Operand&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When we use the increment/decrement operator after the operand, the operator returns the variable value first, and then only the value will be incremented/decremented by &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's look at the below example to understand this better.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Increment&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;      &lt;span class="c1"&gt;// 3&lt;/span&gt;

&lt;span class="c1"&gt;// Decrement&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;      &lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, the first values for &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; have the same original value. That's because the original value of the operand is returned before the operand is changed. If you checked the second console log results, which we use the variable the next time, you could see that we get the result including the &lt;code&gt;+1&lt;/code&gt; and &lt;code&gt;-1&lt;/code&gt; values. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using ++/-- Before the Operand&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When we use the increment/decrement operator before the operand, It will increment the value of the operand even before returning its value. &lt;/p&gt;

&lt;p&gt;Let's look at the below example to understand this better.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Increment&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;      &lt;span class="c1"&gt;// 3&lt;/span&gt;

&lt;span class="c1"&gt;// Decrement&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;      &lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see in the above example, the operation executes the addition and subtraction before returning the value. So you cannot see any difference in each log. This way, it helps us to check the resulting value of an operand instantly. &lt;/p&gt;

&lt;p&gt;Well, now you know how the increment and decrement actually work! &lt;/p&gt;

&lt;p&gt;Before moving into assignment operators, I would like to mention one more use case for the &lt;code&gt;+&lt;/code&gt; operator. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-the-raw-endraw-operator-to-concatenate-strings"&gt;
  &lt;/a&gt;
  Using the &lt;code&gt;+&lt;/code&gt; operator to concatenate strings
&lt;/h3&gt;

&lt;p&gt;You can use the &lt;code&gt;+&lt;/code&gt; operator to combine two or more JavaScript strings into one. The process of combining strings is called JavaScript string concatenation.&lt;/p&gt;

&lt;p&gt;Here is the syntax for the concatenation operator:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;'string1' + 'string2'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now let's see how this is useful. Let's say that you have two names that you want to combine. One is the first name, and the other is the last name.  Let’s combine these two strings using the &lt;code&gt;+&lt;/code&gt; operator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Smith&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// JohnSmith&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, we created two variables for the first and the last name, and we combined the two names with the &lt;code&gt;+&lt;/code&gt; operator to print the full name. &lt;/p&gt;

&lt;p&gt;If you try this code, you will notice that there is no space between the two names. This is because these names are not automatically separated by a space. So if we want to keep a space between, we have to specify it by adding either a space after the first name, or space before the last name, or adding an empty string in between. Check the below example to understand this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Space after the first name&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Smith&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// John Smith&lt;/span&gt;

&lt;span class="c1"&gt;//Space before the last name&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; Smith&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// John Smith&lt;/span&gt;

&lt;span class="c1"&gt;//Add empty string in between variables&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Smith&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// John Smith&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fC3UDeFY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634696366488/sZBBV-Yi8.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fC3UDeFY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634696366488/sZBBV-Yi8.jpeg" alt="javascript.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope that is clear! Let's move on to assignment operators 😊&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#assignment-operators"&gt;
  &lt;/a&gt;
  Assignment Operators
&lt;/h2&gt;

&lt;p&gt;An assignment operator assigns a value to the left operand based on the value of the right operand. Let's say that we want to assign the value &lt;code&gt;10&lt;/code&gt; to the variable &lt;code&gt;x&lt;/code&gt;. So we use the equal &lt;code&gt;(=)&lt;/code&gt; sign to assign this value, &lt;code&gt;x = 10&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Here's a list of assignment operators in JavaScript:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operator Name&lt;/th&gt;
&lt;th&gt;Symbol&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Longform version&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;let x = 5, y = 10&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Assignment&lt;/td&gt;
&lt;td&gt;x = y&lt;/td&gt;
&lt;td&gt;Assigns right operand value to the left operand.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x = 10;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Addition&lt;/td&gt;
&lt;td&gt;x += y&lt;/td&gt;
&lt;td&gt;Sums up left and right operand values and assigns the result to the left operand.&lt;/td&gt;
&lt;td&gt;x = x + y&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x += 10;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Subtraction&lt;/td&gt;
&lt;td&gt;x -= y&lt;/td&gt;
&lt;td&gt;Subtract right operand value from the left operand value and assigns the result to the left operand.&lt;/td&gt;
&lt;td&gt;x = x - y&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x -= 10;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Multiplication&lt;/td&gt;
&lt;td&gt;x *= y&lt;/td&gt;
&lt;td&gt;Multiply left and right operand values and assigns the result to the left operand.&lt;/td&gt;
&lt;td&gt;x = x * y&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x *= 10;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Division&lt;/td&gt;
&lt;td&gt;x /= y&lt;/td&gt;
&lt;td&gt;Divide left operand value by right operand value and assign the result to the left operand.&lt;/td&gt;
&lt;td&gt;x = x / y&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x /= 10;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Remainder&lt;/td&gt;
&lt;td&gt;x %= y&lt;/td&gt;
&lt;td&gt;Get the remainder of left operand divide by right operand and assign resulted remainder to the left operand.&lt;/td&gt;
&lt;td&gt;x = x % y&lt;/td&gt;
&lt;td&gt;&lt;code&gt;x %= 10;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;In the above list, you have seen that we have combined the assignment operator with arithmetic operators, for example, &lt;code&gt;x += 10&lt;/code&gt;. We call these &lt;em&gt;compound assignment operators&lt;/em&gt;. This is a shorthand version to its long-form version, which is &lt;code&gt;x = x + 10&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;It's better to get familiar with these compound assignment operators because you will be using them a lot in the future! 😊&lt;/p&gt;

&lt;p&gt;Now you must be wondering how these expressions should be evaluated when there are multiple operators in the same expression. &lt;/p&gt;

&lt;p&gt;For example, let's look at the below expression. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;(2 + 3) * 5 = ?&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let's see how JavaScript understands which part of this mathematical expression should be evaluated first. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#operator-precedence"&gt;
  &lt;/a&gt;
  Operator Precedence
&lt;/h2&gt;

&lt;p&gt;If you remember your arithmetic lessons, you might remember the acronym P.E.M.D.A.S (Please Excuse My Dear Aunt Sally). This acronym PEMDAS helps us to remember which part of our mathematical expression should be evaluated first.&lt;/p&gt;

&lt;p&gt;First, we work with what is inside the parenthesis, next exponents, then multiplication, then division, after that addition, and the last subtraction.&lt;/p&gt;

&lt;p&gt;So if we take the example, &lt;code&gt;(2 + 3) * 5 = ?&lt;/code&gt;, since the &lt;code&gt;2 + 3&lt;/code&gt; is within parenthesis, we add these two numbers together, which gives us &lt;code&gt;5&lt;/code&gt;. Then we take that result of &lt;code&gt;5&lt;/code&gt; and multiply it by &lt;code&gt;5&lt;/code&gt;. So the final result is &lt;code&gt;25&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So in JavaScript, we have the same way of evaluating expressions with well-defined operator precedence. &lt;/p&gt;

&lt;p&gt;You can use the  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence"&gt;MDN document&lt;/a&gt; to check the operator precedence table. The MDN document has listed down all the operators with their precedence and associativity.&lt;/p&gt;

&lt;p&gt;If you wonder what the meaning of associativity is, it tells us the direction of evaluating the expression. For example, if you look at the table on the MDN document, you can see that under the associativity column, it tells us the direction ( ‘left to right’ ) for some operators. This is very helpful when two operators have the same level of precedence.&lt;/p&gt;

&lt;p&gt;We have &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt; in the same expression, then the expression is evaluated left to right. Let's check the below examples.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 6&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, the first expression first calculates the &lt;code&gt;5 + 3&lt;/code&gt;, and then &lt;code&gt;2&lt;/code&gt; is subtracted from that result. So it does the calculation from left to right. The second expression evaluates in the same way. &lt;/p&gt;

&lt;p&gt;You don't have to remember each and every operator's precedence by heart, but having a strong understanding of how the precedence works is crucial for your programming journey. &lt;/p&gt;

&lt;p&gt;Alright, that's it for the day! 🤗&lt;/p&gt;

&lt;p&gt;I hope now you have a good understanding of Arithmetic operators, assignment operators, and operator precedence.&lt;/p&gt;

&lt;p&gt;In the second part of this two-part series, we will be going over the following operators:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Comparison Operators&lt;/li&gt;
&lt;li&gt;Logical Operators&lt;/li&gt;
&lt;li&gt;Ternary Operators&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;typeof&lt;/code&gt; Operator&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Until that, you can check out this JavaScript operators cheatsheet 😊&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pcS3ml7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634819327165/vE9vrNwmf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pcS3ml7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634819327165/vE9vrNwmf.png" alt="Screenshot 2021-10-21 at 17.57.32.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RZv43Bo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634697373133/jgPGVQlyr.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RZv43Bo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634697373133/jgPGVQlyr.gif" alt="see-ya.gif"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;This article was originally published on  &lt;a href="https://dasha.ai/en-us/blog/beginners-guide-js-operators-part-1"&gt;Dasha&lt;/a&gt; &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>🔥 Vue Tips #31: The limitations of props</title>
      <author>Michael Thiessen</author>
      <pubDate>Tue, 26 Oct 2021 15:14:51 +0000</pubDate>
      <link>https://dev.to/michaelthiessen/vue-tips-31-the-limitations-of-props-36bh</link>
      <guid>https://dev.to/michaelthiessen/vue-tips-31-the-limitations-of-props-36bh</guid>
      <description>&lt;p&gt;&lt;em&gt;This newsletter was sent out to my list on October 20, 2021. &lt;a href="https://michaelnthiessen.com/newsletter"&gt;Sign up here&lt;/a&gt; to get emails like this each week!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As always, here are some tips.&lt;/p&gt;

&lt;p&gt;Enjoy.&lt;/p&gt;

&lt;p&gt;— Michael&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#static-and-dynamic-classes"&gt;
  &lt;/a&gt;
  🔥 Static and dynamic classes
&lt;/h2&gt;

&lt;p&gt;We can add static &lt;em&gt;and&lt;/em&gt; dynamic classes to an element at the same time:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt;
    &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"item in list"&lt;/span&gt;
    &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"item.id"&lt;/span&gt;
    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"always-here"&lt;/span&gt;
    &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"item.selected &amp;amp;&amp;amp; 'selected'"&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {{ item.name }}
  &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This lets you apply basic styling through static classes, and then dynamically add other styles as you need them.&lt;/p&gt;

&lt;p&gt;You can also achieve the same thing when using an &lt;code&gt;Object&lt;/code&gt; or &lt;code&gt;Array&lt;/code&gt; with dynamic classes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt;
    &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"item in list"&lt;/span&gt;
    &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"item.id"&lt;/span&gt;
    &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"{
      'always-here': true,
      selected: item.selected,
    }"&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {{ item.name }}
  &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or with an &lt;code&gt;Array&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt;
    &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"item in list"&lt;/span&gt;
    &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"item.id"&lt;/span&gt;
    &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"[
      'always-here',
      item.selected &amp;amp;&amp;amp; 'selected',
    ]"&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {{ item.name }}
  &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I prefer splitting them out into &lt;code&gt;class&lt;/code&gt; and &lt;code&gt;:class&lt;/code&gt; bindings though, since it makes the code clearer. It also makes it less likely to be broken when refactored!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-limitations-of-props"&gt;
  &lt;/a&gt;
  🔥 The limitations of props
&lt;/h2&gt;

&lt;p&gt;Props are useful, but they have two glaring issues:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Impossible to pass markup*&lt;/li&gt;
&lt;li&gt;Not that flexible&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;*not technically impossible, but not something you want to do.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The solution to these two problems is the same, but we'll get there in a second.&lt;/p&gt;

&lt;p&gt;Many components you create are &lt;strong&gt;contentless components&lt;/strong&gt;. They provide a container, and you have to supply the content. Think of a button, a menu, an accordion, or a card component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;Card&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"Shrimp Tempura"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"picOfShrimp.jpg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Here are some words about tempura.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;How can you go wrong with fried food?&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"www.michaelnthiessen.com/shrimp-tempura"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Read more about Shrimp Tempura
  &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Card&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can often pass this content in as a regular &lt;code&gt;String&lt;/code&gt;. But many times you want to pass in a whole chunk of HTML, maybe even a component or two.&lt;/p&gt;

&lt;p&gt;You can't do that with props.*&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*again, yes, you could do this, but you'll definitely regret it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Props also require that you &lt;strong&gt;plan for all future use cases&lt;/strong&gt; of the component. If your &lt;code&gt;Button&lt;/code&gt; component only has two values for &lt;code&gt;type&lt;/code&gt;, you can't just use a third without modifying the &lt;code&gt;Button&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- You just have to believe it will work --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;Button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"AWESOME"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Button.vue&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="c1"&gt;// Unfortunately, 'AWESOME' doesn't work here :/&lt;/span&gt;
      &lt;span class="na"&gt;validator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;primary&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;secondary&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm not a psychic, and I'm guessing you aren't either.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The solution to these problems?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I think I gave it away with my card example above...&lt;/p&gt;

&lt;p&gt;..slots! 🎰&lt;/p&gt;

&lt;p&gt;Slots allow you to pass in whatever markup and components you want, and they also are fairly open-ended, giving you lots of flexibility. This is why in many cases, slots are simply better than props.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-photoshop-plugin-with-vue"&gt;
  &lt;/a&gt;
  📜 A photoshop plugin with Vue!?
&lt;/h2&gt;

&lt;p&gt;Last week I shared an article on creating a VS Code extension.&lt;/p&gt;

&lt;p&gt;Now we break out of the web world entirely, and see how we can create a plugin for Photoshop.&lt;/p&gt;

&lt;p&gt;I had no idea this was even possible!&lt;/p&gt;

&lt;p&gt;Read it now: &lt;a href="https://medium.com/adobetech/make-your-first-plugin-with-vue-js-for-photoshop-and-adobe-xd-7af094c69aa5"&gt;Make Your First Plugin with Vue JS for Photoshop and Adobe XD&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%97%9E-vuejs-london-is-today-tomorrow"&gt;
  &lt;/a&gt;
  🗞 Vue.js London is today + tomorrow!
&lt;/h2&gt;

&lt;p&gt;Quick, don't miss out on some amazing talks at &lt;a href="https://vuejs.london/"&gt;Vue.js Conference (London)&lt;/a&gt; — happening right now!&lt;/p&gt;

&lt;p&gt;Conferences are an amazing place to learn and connect with other Vue devs.&lt;/p&gt;

&lt;p&gt;We're slowly starting to see some more in-person events, along with lots of virtual ones too.&lt;/p&gt;

&lt;p&gt;Here are some upcoming conferences:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.vuetoronto.com/"&gt;VueConf Toronto&lt;/a&gt; — November 22-23 — free + online&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.vuejs.amsterdam/"&gt;Vuejs Global (Amsterdam)&lt;/a&gt; — February 10-11, 2022 — Amsterdam&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(Let me know if I've missed any.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#brute-force"&gt;
  &lt;/a&gt;
  💬 Brute force
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;When in doubt, use brute force. — Steve McConnell&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I'm often just not clever enough to come up with a clever solution.&lt;/p&gt;

&lt;p&gt;But cleverness isn't the point of software development.&lt;/p&gt;

&lt;p&gt;It's developing software &lt;em&gt;that works&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#spacedrepetition-6-levels-of-reusability"&gt;
  &lt;/a&gt;
  🧠 Spaced-repetition: 6 Levels of Reusability
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The best way to commit something to long-term memory is to periodically review it, gradually increasing the time between reviews 👨‍🔬&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Actually remembering these tips is much more useful than just a quick distraction, so here's a tip from a couple weeks ago to jog your memory.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My course on &lt;a href="//michaelnthiessen.com/reusable-components"&gt;reusable components&lt;/a&gt; covers this framework, which outlines six different levels of reusability that you can use in your components.&lt;/p&gt;

&lt;p&gt;Here are the six levels of reusability:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Templating&lt;/strong&gt; — Reusing code by wrapping it up inside of a component&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Configuration&lt;/strong&gt; — Using configuration props to allow for varying behaviour&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Adaptability&lt;/strong&gt; — Allowing components to become future-proof&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Inversion&lt;/strong&gt; — Letting other components control the process&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Extension&lt;/strong&gt; — Using reusability throughout our component&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Nesting&lt;/strong&gt; — Creating powerful hierarchies of components&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I cover this in more detail in &lt;a href="https://michaelnthiessen.com/6-levels-of-reusability"&gt;this excerpt from the course&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exclusive-tips-and-insights-every-week"&gt;
  &lt;/a&gt;
  Exclusive tips and insights every week
&lt;/h2&gt;

&lt;p&gt;Join 8335 other Vue devs and &lt;a href="//michaelnthiessen.com/newsletter"&gt;get exclusive tips and insights&lt;/a&gt; like these delivered straight to your inbox, every week.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You have great content in your emails. I seriously learn something from every one of them. — Titus Decali&lt;/p&gt;

&lt;p&gt;Thanks for another beautiful tip 🙏 — Victor Onuoha&lt;/p&gt;

&lt;p&gt;Loving these, and the spaced repetition — Mark Goldstein&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="//michaelnthiessen.com/newsletter"&gt;Sign up here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vue</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>My note-taking process</title>
      <author>scottshipp</author>
      <pubDate>Tue, 26 Oct 2021 14:56:38 +0000</pubDate>
      <link>https://dev.to/scottshipp/my-note-taking-process-49pa</link>
      <guid>https://dev.to/scottshipp/my-note-taking-process-49pa</guid>
      <description>&lt;h2&gt;
  &lt;a href="#from-creating-and-editing-to-viewing"&gt;
  &lt;/a&gt;
  From creating and editing to viewing
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/scottshipp/an-amazing-note-taking-system-with-markdown-and-git-part-2-2e9g"&gt;When we last left off&lt;/a&gt;, I talked about the need to convert Markdown to HTML:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For the small price of adopting some kind of "compilation" stage in my notes, whereby they get compiled from Markdown to HTML, I could take notes that had all of the [features I wanted]...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Markdown generally looks okay as plain text, but elements like tables, links, or images don't work. Converting to HTML is how I pick up the power of these features.&lt;/p&gt;

&lt;p&gt;The beauty of the Markdown ecosystem is that there are many common tools already available to render HTML from Markdown. I found many of them already installed on my system. Here are just a few examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Text converter tools like &lt;a href="https://pandoc.org/"&gt;pandoc&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;IDE's like &lt;a href="https://code.visualstudio.com"&gt;VS Code&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Plain text editors like &lt;a href="https://www.sublimetext.com"&gt;Sublime Text&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Static site generators like &lt;a href="https://gohugo.io/"&gt;Hugo&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#my-choice-textmate-combined-with-maven-site"&gt;
  &lt;/a&gt;
  My choice: TextMate combined with Maven site
&lt;/h2&gt;

&lt;p&gt;I'm going to talk about specific use cases below, but let me briefly introduce the two tools I selected. This is not a one-size-fits-all solution. Maybe it would work for most people, but the point of me writing this is to show how flexible modern tools are. A typical developer might quickly and easily roll their own solution that fits their own use cases better.&lt;/p&gt;

&lt;p&gt;First, I've already adopted &lt;a href="https://macromates.com"&gt;TextMate&lt;/a&gt; as the primary text editor on my system. &lt;a href="https://macromates.com"&gt;TextMate&lt;/a&gt; is the lightest-weight piece of software besides vim that supports all of my daily tasks, including note-taking. It offers additional benefits by being hackable / pluggable through &lt;a href="https://macromates.com/textmate/manual/bundles"&gt;a bundle system&lt;/a&gt;. That is a huge benefit for note-taking as well. &lt;/p&gt;

&lt;p&gt;Finally, TextMate is open-source.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/textmate"&gt;
        textmate
      &lt;/a&gt; / &lt;a href="https://github.com/textmate/textmate"&gt;
        textmate
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      TextMate is a graphical text editor for macOS 10.12 or later
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
TextMate&lt;/h1&gt;
&lt;h2&gt;
Download&lt;/h2&gt;
&lt;p&gt;You can &lt;a href="https://macromates.com/download" rel="nofollow"&gt;download TextMate from here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Feedback&lt;/h2&gt;
&lt;p&gt;You can use &lt;a href="https://lists.macromates.com/listinfo/textmate" rel="nofollow"&gt;the TextMate mailing list&lt;/a&gt; or #textmate IRC channel on &lt;a href="http://freenode.net/" rel="nofollow"&gt;freenode.net&lt;/a&gt; for questions, comments, and bug reports.&lt;/p&gt;
&lt;p&gt;You can also &lt;a href="https://macromates.com/support" rel="nofollow"&gt;contact MacroMates&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Before you submit a bug report please read the &lt;a href="https://github.com/textmate/textmate/wiki/writing-bug-reports"&gt;writing bug reports&lt;/a&gt; instructions.&lt;/p&gt;
&lt;h2&gt;
Screenshot&lt;/h2&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/72eb362399c3d42afbabab705d836dc7e6e07ecd0bbc719371e10c3accdf2cc9/68747470733a2f2f7261772e6769746875622e636f6d2f746578746d6174652f746578746d6174652f67682d70616765732f696d616765732f73637265656e73686f742e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/72eb362399c3d42afbabab705d836dc7e6e07ecd0bbc719371e10c3accdf2cc9/68747470733a2f2f7261772e6769746875622e636f6d2f746578746d6174652f746578746d6174652f67682d70616765732f696d616765732f73637265656e73686f742e706e67" alt="textmate"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
Building&lt;/h1&gt;
&lt;h2&gt;
Setup&lt;/h2&gt;
&lt;p&gt;To build TextMate, you need the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://www.boost.org/" rel="nofollow"&gt;boost&lt;/a&gt;            — portable C++ source libraries&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/capnproto/capnproto.git"&gt;Cap’n Proto&lt;/a&gt; — serialization library&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://fletcherpenney.net/multimarkdown/" rel="nofollow"&gt;multimarkdown&lt;/a&gt;    — marked-up plain text compiler&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ninja-build.org/" rel="nofollow"&gt;ninja&lt;/a&gt;            — build system similar to &lt;code&gt;make&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.complang.org/ragel/" rel="nofollow"&gt;ragel&lt;/a&gt;            — state machine compiler&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://code.google.com/p/sparsehash/" rel="nofollow"&gt;sparsehash&lt;/a&gt;       — a cache friendly &lt;code&gt;hash_map&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All this can be installed using either &lt;a href="http://brew.sh/" rel="nofollow"&gt;Homebrew&lt;/a&gt; or &lt;a href="http://www.macports.org/" rel="nofollow"&gt;MacPorts&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Homebrew&lt;/span&gt;
brew install boost capnp google-sparsehash multimarkdown ninja ragel
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; MacPorts&lt;/span&gt;
sudo port install boost capnproto multimarkdown ninja ragel sparsehash&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;After installing dependencies, make sure you have a full checkout (including submodules) and then run &lt;code&gt;./configure&lt;/code&gt; followed by &lt;code&gt;ninja&lt;/code&gt;, for example:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;git clone --recursive&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/textmate/textmate"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;The Markdown bundle for Textmate includes a "preview" feature that renders Markdown as HTML. But there were a couple things I wanted to add to that. The main one was indexed navigation across multiple days. For that purpose, a better approach was to actually build a full site out of my notes folder, and I used the &lt;a href="https://maven.apache.org/plugins/maven-site-plugin/"&gt;Maven site plugin&lt;/a&gt; with the Fluido skin to do that. It looks incredible, as you will see.&lt;/p&gt;

&lt;p&gt;On top of all of this, I wanted a single interface to these tools, so I created a cli that I use. For now, I call it &lt;em&gt;Noted&lt;/em&gt; but the name isn't really so important.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/scottashipp"&gt;
        scottashipp
      &lt;/a&gt; / &lt;a href="https://github.com/scottashipp/noted"&gt;
        noted
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Lightweight CLI for taking markdown notes in a journal-like (time-seried) fashion
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
noted&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Lightweight CLI for taking markdown notes in a journal-like (time-seried) fashion on macOS.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/scottashipp/noted#features"&gt;Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/scottashipp/noted#getting-started"&gt;Getting Started&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/scottashipp/noted#required-steps"&gt;Required steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/scottashipp/noted#optional-steps"&gt;Optional steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/scottashipp/noted#typical-usage"&gt;Typical usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/scottashipp/noted#subcommand-reference"&gt;Subcommand reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/scottashipp/noted#configuration-guide"&gt;Configuration guide&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/scottashipp/noted#default-values"&gt;Default values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/scottashipp/noted#configuring-custom-values"&gt;Configuring custom values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/scottashipp/noted#custom-template-file"&gt;Custom template file&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/scottashipp/noted#recommended-aliases"&gt;Recommended aliases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/scottashipp/noted#usage-with-a-static-site-generator"&gt;Usage with a static site generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/scottashipp/noted#change-default-editor"&gt;Change default editor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Noted&lt;/em&gt; can do the following and more:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Automatically create a markdown file for you, named with today's date (in a customizable date format)&lt;/li&gt;
&lt;li&gt;Append note entries from the command line automatically, formatted with a Markdown template you can customize&lt;/li&gt;
&lt;li&gt;Timestamp all entries with a customizable timestamp format&lt;/li&gt;
&lt;li&gt;Quickly open the notes from any given date for you to view or edit&lt;/li&gt;
&lt;li&gt;Work with any text editor, with no interference between &lt;code&gt;noted&lt;/code&gt; and the editor&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Getting Started&lt;/h2&gt;
&lt;h3&gt;
Required steps&lt;/h3&gt;
&lt;p&gt;Getting started with &lt;em&gt;Noted&lt;/em&gt; only requires that &lt;code&gt;noted&lt;/code&gt; is placed on your path.&lt;/p&gt;
&lt;p&gt;A good standard way to do this is to symlink the…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/scottashipp/noted"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#how-i-actually-take-notes"&gt;
  &lt;/a&gt;
  How I actually take notes
&lt;/h2&gt;

&lt;p&gt;Let me walk though a contrived example of my note-taking process, to show you how my tools support me throughout. Maybe I come in to work on Monday morning and I need to go through email and Slack messages. On my terminal, I type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;n &lt;span class="s1"&gt;'Going through email and slack messages'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What is that "n?" As I mentioned, I use a lightweight cli called &lt;a href="https://github.com/scottashipp/noted"&gt;Noted&lt;/a&gt; which is nothing more than a simple shell script. The alias for &lt;code&gt;noted&lt;/code&gt; in my shell is &lt;code&gt;n&lt;/code&gt;, to cut down on keystrokes.&lt;/p&gt;

&lt;p&gt;The basic gist of this command is to automate a few basic steps for me so I don't have to think about them. In detail, the cli does the following.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It checks for a file named with today's date in a known directory (&lt;code&gt;~/Documents/notes&lt;/code&gt;). If it's October 26, then it looks for &lt;code&gt;2021-10-26.md&lt;/code&gt; and if that doesn't exist, it creates it.&lt;/li&gt;
&lt;li&gt;It appends a Markdown template for the new entry into the file, stamped with the current system time and date.&lt;/li&gt;
&lt;li&gt;It appends the text &lt;code&gt;Going through email and slack messages&lt;/code&gt; into this template.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The result looks like this in Markdown:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;--------
07:43:32 Pacific

# Going through email and Slack messages


--------
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By typing &lt;code&gt;nv&lt;/code&gt; (alias for &lt;code&gt;noted view&lt;/code&gt;) in the terminal, I can launch TextMate with today's notes file should I then need to edit or add to the entry. The TextMate Markdown bundle has a feature called "Preview" which renders the Markdown to HTML in a separate window. Just select Bundles &amp;gt; Markdown &amp;gt; Show Preview from the menus or type ^⌥⌘P (Control + Option + Command + P).&lt;/p&gt;

&lt;p&gt;The above snippet looks like this when rendered to HTML:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D2-cKP3g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1oz1dbrizt7jkcwvgrws.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D2-cKP3g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1oz1dbrizt7jkcwvgrws.png" alt="Screen shot of notes rendered to HTML"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The habit of simply recording tasks as they happen provides the first benefit of my system, which is that I can account for my time if I ever need to, because all entries are automatically time-stamped.&lt;/p&gt;

&lt;p&gt;Now let's say that I am researching HTML client libraries for work, and the options are &lt;a href="https://spring.getdocs.org/en-US/spring-framework-docs/docs/spring-web-reactive/webflux-client/webflux-client.html"&gt;Spring WebFlux WebClient&lt;/a&gt;, &lt;a href="https://square.github.io/okhttp/"&gt;OkHttp&lt;/a&gt;, or &lt;a href="https://eclipse-ee4j.github.io/jersey.github.io/documentation/latest/client.html"&gt;Jersey HTTP client&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In my terminal, I'm going to type something like this, and notice that by leaving the ending quotation mark off the first line, I get a multi-line entry:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;n &lt;span class="s1"&gt;'HTTP Client Comparison
quote&amp;gt; - [Spring WebFlux WebClient](https://spring.getdocs.org/en-US/spring-framework-docs/docs/spring-web-reactive/webflux-client/webflux-client.html)
quote&amp;gt; - [OkHttp](https://square.github.io/okhttp/)
quote&amp;gt; - [Jersey HTTP client](https://eclipse-ee4j.github.io/jersey.github.io/documentation/latest/client.html)'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I type &lt;code&gt;nv&lt;/code&gt; which is my alias for &lt;code&gt;noted view&lt;/code&gt; and that opens my notes in TextMate again. They currently look like this when rendered:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HZntSkV3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33asjv2sj879aanxqjlf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HZntSkV3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/33asjv2sj879aanxqjlf.png" alt="Screen shot of notes rendered to HTML"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For me, all of this happens automatically and reflexively. It doesn't even register on my consciousness.&lt;/p&gt;

&lt;p&gt;At this point, I start to add a table to compare the options. Since tables are slightly more complex, I type this within TextMate. It starts out like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;| | WebFlux | OKHttp | Jersey |
|:-- | :-- | :-- | :-- |
| Maintainer | Spring / VMWare | Square | Jakarta |
| License | Apache 2.0 | Apache 2.0 | Eclipse / Gnu |
| GitHub Stars | 44.8k | 41k | 541 |
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Eventually, I collect more information into this table to help with my comparison.&lt;/p&gt;

&lt;p&gt;Besides the ability to preview notes within TextMate itself, I have a markdown generator (Maven site plugin) wrapped around it, so I can also type &lt;code&gt;noted build&lt;/code&gt; (or alias &lt;code&gt;nb&lt;/code&gt;) to generate that quickly, and my notes now look like this so far:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fYv_-ApW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2d1c1oppwcwxfxf9orv7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fYv_-ApW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2d1c1oppwcwxfxf9orv7.png" alt="Rendered notes with tables links and images"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here another benefit of this system comes into view. Later I can do a straight copy/paste of this material into our wiki or a GitHub gist or page at work in order to share it with my team.&lt;/p&gt;

&lt;p&gt;Let's assume that I have a weekly meeting to attend at this point. The &lt;code&gt;nv&lt;/code&gt; or &lt;code&gt;noted view&lt;/code&gt; command also takes an argument, which is the file name of any notes file. If today is 2021-10-26, and I want to review the notes from last week's meeting, I type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;nv 2021-10-19
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that just pops open the notes from 2021-10-19 in TextMate.&lt;/p&gt;

&lt;p&gt;After the meeting, I might work on a bug and part of documenting repro steps is to get a screenshot of the bug. Once I repro, I can use &lt;a href="https://support.apple.com/en-us/HT201361"&gt;ordinary Mac screen capturing&lt;/a&gt; to capture the screenshot. The great thing about this feature of macOS is that you can &lt;a href="https://lifehacker.com/how-to-change-your-macs-default-save-location-for-scree-1847572508"&gt;set where screen captures are saved&lt;/a&gt;. I've configured mine to save them into an &lt;code&gt;images&lt;/code&gt; directory within the same directory where all my markdown files are going.&lt;/p&gt;

&lt;p&gt;With that capability, I simply take the screenshot, use the built-in Mac tools to highlight the issue I see, and quickly add the image into my notes with &lt;a href="https://daringfireball.net/projects/markdown/syntax#img"&gt;ordinary Markdown image syntax&lt;/a&gt;. That then renders like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Tn-_r0E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ulb34jjfwz1omcom1tbl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Tn-_r0E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ulb34jjfwz1omcom1tbl.png" alt="Screen shot of notes rendered with image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A third benefit appears. Scientists often say that if it isn't written down it doesn't exist. By documenting all these things as I go in one central system, I now have a record I can always go back to and check. The above can be transferred into Jira or another bug-tracking system with copy/paste. But I can always come back to this in my local notes.&lt;/p&gt;

&lt;p&gt;And that brings me to my fourth benefit. Regardless of being online or offline, or being on VPN or off-VPN, I have information that allows me to continue working.&lt;/p&gt;

&lt;p&gt;By the way, the cli I wrote also has a grep command to search in the notes directory. I can always find anything and everything connected to a particular topic. I can issue the command &lt;code&gt;noted grep foo&lt;/code&gt; to find everything related to Project Foo, for example.&lt;/p&gt;

&lt;p&gt;I have considered using a simple tagging system where each note entry related to a given topic just has some tags at the bottom such as "#promotion" or "#java" to help with finding things, but, in practice, I've never needed this. Just having all notes as text in a single directory is a superpower in and of itself. I can't count the number of times someone has asked me "Do you remember such and such, do you remember how we solved that?" and simply searching through my notes found the answer.&lt;/p&gt;

&lt;p&gt;The ability to search through old notes is the most useful when confirming what was agreed upon in meetings. I am usually the secretary of meetings because of my note-taking habit, and what I like to do is take notes within my system during a meeting. I clean them up after the meeting and then send a copy to all participants. We all have transparency that way, and no one can say that there was an action item that wasn't there, or vice-versa.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reflecting-on-the-notetaking-process"&gt;
  &lt;/a&gt;
  Reflecting on the note-taking process
&lt;/h2&gt;

&lt;p&gt;I know that all of this requires a certain level of discipline in actually taking notes, but with this set of completely open-source, off-the-shelf tools, I find that taking notes seems no more of a trifle than pouring a cup of coffee.&lt;/p&gt;

&lt;p&gt;It's also worth noting (ha ha) that on some days, I take more notes than others. On a day that's entirely dedicated to implementing a new feature in our codebase, for example, I take almost no notes at all in the note-taking system. I instead use IDE features (like &lt;a href="https://www.jetbrains.com/help/idea/managing-tasks-and-context.html"&gt;IntelliJ tasks&lt;/a&gt;) or old-fashioned &lt;code&gt;TODO&lt;/code&gt; comments—basically I try and use the best tool for every job, rather than use a "single tool to rule them all."&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#your-notetaking-process"&gt;
  &lt;/a&gt;
  Your note-taking process
&lt;/h2&gt;

&lt;p&gt;The last thing I want to say is that not everyone needs notes for the same purposes. There are definitely other use cases not covered here. And for the ones that are, you would need to decide how you want to take notes and what the best tool for the job would be.&lt;/p&gt;

&lt;p&gt;In the next installment of this series, I will address some of these other issues, and talk about how other tools can be used, or how the same tools can be used differently. Because I believe the major point in all of this is that we should all have the freedom to write and engineer our own process.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>programming</category>
      <category>learning</category>
    </item>
    <item>
      <title>Is it possible to have a grid inside a multi-select dropdown? Preferably in Angular</title>
      <author>raj-dcs</author>
      <pubDate>Tue, 26 Oct 2021 14:50:38 +0000</pubDate>
      <link>https://dev.to/rajkumarpativada/is-it-possible-to-have-a-grid-inside-a-multi-select-dropdown-preferably-in-angular-4ja</link>
      <guid>https://dev.to/rajkumarpativada/is-it-possible-to-have-a-grid-inside-a-multi-select-dropdown-preferably-in-angular-4ja</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rQ0JmX6F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2f5cjaoib6m2gow2qqs8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rQ0JmX6F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2f5cjaoib6m2gow2qqs8.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have a form with a multiselect dropdown, when the dropdown is opened, I want to show a grid with multiple columns and user can select multiple rows from the grid.&lt;/p&gt;

&lt;p&gt;Any help is really appreciated. Thank you.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
      <category>html</category>
    </item>
  </channel>
</rss>
