<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Day 68 of 100 Days of Code &amp; Scrum: Back to Being Productive</title>
      <author>Rammina</author>
      <pubDate>Sun, 02 Jan 2022 12:38:45 +0000</pubDate>
      <link>https://dev.to/rammina/day-68-of-100-days-of-code-scrum-back-to-being-productive-3g3g</link>
      <guid>https://dev.to/rammina/day-68-of-100-days-of-code-scrum-back-to-being-productive-3g3g</guid>
      <description>&lt;p&gt;Good day, everyone!&lt;/p&gt;

&lt;p&gt;Today was a great start to this year for me, in terms of productivity. I've had a lot of fun working on my &lt;a href="https://www.rammina.com"&gt;business site&lt;/a&gt;, studying Scrum, and fixing my Ghost CMS. I fixed all of the broken links on my website, added an &lt;a href="https://www.rammina.com/affiliates"&gt;affiliates page&lt;/a&gt; for those who would like to exchange backlinks, and updated my projects to have a link to their respective Github repositories.&lt;/p&gt;

&lt;p&gt;And I also discovered this bug on my error 404 page, which I have embarrassingly overlooked the past few weeks:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c6dC6b0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mxqz34qvuk752t5qcz2o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c6dC6b0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mxqz34qvuk752t5qcz2o.png" alt="Rammina Double Footer Bug" width="880" height="407"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One unfortunate thing that happened to me today was that Scrum.org kept on rejecting my transactions, despite already using 3 different credit cards and PayPal. I have contacted their support email, but it kind of feels annoying to be held from buying their Professional Scrum Master I (PSM I) certification exam when I'm already prepared to take it.&lt;/p&gt;

&lt;p&gt;Anyway, let's move on to my daily report!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;I found some bugs to fix in my website, studied Scrum by reading the guide and taking practice tests, and dealt with my huge backlog of emails, messages, and notifications. A slow, but smooth start to a new year.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;Here are the things I learned and worked on today:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#company-website"&gt;
  &lt;/a&gt;
  Company Website
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I added an affiliates page on my &lt;a href="https://www.rammina.com"&gt;company website&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;fixed a bug in which there was a duplicate footer on the error 404 page.&lt;/li&gt;
&lt;li&gt;replaced broken links on the footer with functional ones.&lt;/li&gt;
&lt;li&gt;attached a link to the respective Github repository of each project.&lt;/li&gt;
&lt;li&gt;fixed my Ghost CMS (had to replace it and redeploy because I went over the free plan).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  Scrum
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I reread the &lt;a href="https://scrumguides.org/scrum-guide.html"&gt;2020 Scrum Guide&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Took some practice exams for the Professional Scrum Master I (PSM I) certification.&lt;/li&gt;
&lt;li&gt;I did some practice flashcards for Scrum.&lt;/li&gt;
&lt;li&gt;reviewed some of the things I've learned before.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It was also nice to see some familiar people again, after a few weeks.Have a good day, everyone!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" alt="Rammina Thank You Banner" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.scrum.org/open-assessments"&gt;Open Assessments | Scrum.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhail Lapshin's Scrum Quizzes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#other-media"&gt;
  &lt;/a&gt;
  Other Media
&lt;/h3&gt;

&lt;p&gt;Feel free to reach out to me in other media!&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://www.rammina.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BK-zilS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1638444046/rammina-button-128_x9ginu.png" alt="Rammina Logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://twitter.com/RamminaR"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C341ckO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636792959/twitter-logo_laoyfu_pdbagm.png" alt="Twitter logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://github.com/Rammina"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u4ZlXeay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636795051/GitHub-Emblem2_epcp8r.png" alt="Github logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Hashicorp Vault | Dev and Prod server setup | Unseal | Policies | TLS setup</title>
      <author>Tharun Shiv</author>
      <pubDate>Sun, 02 Jan 2022 12:35:36 +0000</pubDate>
      <link>https://dev.to/developertharun/hashicorp-vault-dev-and-prod-server-setup-unseal-policies-tls-setup-48mo</link>
      <guid>https://dev.to/developertharun/hashicorp-vault-dev-and-prod-server-setup-unseal-policies-tls-setup-48mo</guid>
      <description>&lt;p&gt;&lt;a href="https://www.tharunshiv.com/vault-intro"&gt;Link to the article on Why we need Vault and what problem it solves&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hashicorp-vault"&gt;
  &lt;/a&gt;
  Hashicorp Vault
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_syvC_OZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0kjzc4ogayfv3gjo38p.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_syvC_OZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0kjzc4ogayfv3gjo38p.PNG" alt="Mind map" width="880" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hashicorp Vault is an opensource software from Hashicorp. Vault is used to manage secrets. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-secret"&gt;
  &lt;/a&gt;
  What is a secret?
&lt;/h3&gt;

&lt;p&gt;Secrets can be considered as anything that one uses to authenticate, authorize themselves. Secrets are also pieces of information that are private to any user. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vault-setup"&gt;
  &lt;/a&gt;
  Vault setup
&lt;/h2&gt;

&lt;p&gt;The usual flow is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install Vault package&lt;/li&gt;
&lt;li&gt;Initialize the Vault server. On the dev setup, the Vault server comes initialized with default playground configurations. This is not recommended for production setup. &lt;/li&gt;
&lt;li&gt;Unseal Vault server ( &lt;em&gt;More about unseal in the next section&lt;/em&gt; )&lt;/li&gt;
&lt;li&gt;Create policies for users&lt;/li&gt;
&lt;li&gt;Enable secret management mechanisms&lt;/li&gt;
&lt;li&gt;Make sure to adhere to the production hardening tips from Vault&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#sealunseal-vault-server"&gt;
  &lt;/a&gt;
  Seal/Unseal Vault server
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7m4TmMW2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ruk9cbd4fraopcei85rr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7m4TmMW2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ruk9cbd4fraopcei85rr.png" alt="Seal unseal" width="880" height="371"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vault stores data in encrypted format. The encryption key that is being used to encrypt/decrypt the data is also stored along with rest of the data in the keyring. When a Vault server starts, it knows where the data resides through the configuration that we provide Vault with but doesn't know how to decrypt the encryption key that is present in the keyring along with the Vault encrypted data.&lt;/p&gt;

&lt;p&gt;Here comes the master key that is used to decrypt the encryption key which is also present alongside all other Vault data. This master key is also encrypted and we need a special key that can decrypt the master key, this key is known as Unseal key.&lt;/p&gt;

&lt;p&gt;The Unseal key is generated during the init process using an algorithm known as 'Shamir's secret sharing', where the unseal key is split into certain number of unseal keys 'X' and every time we want to unseal the Vault server we will need a certain number of unseal keys 'Y' and these 'X' and 'Y' values can be decided by the Vault architect when initializing the Vault server. &lt;/p&gt;

&lt;p&gt;The main intention of creating several unseal keys is to distribute these unseal keys among several stakeholders such that, a minimum number of stake holders are needed to unseal the server or perform major operations on the server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-policies"&gt;
  &lt;/a&gt;
  What are policies?
&lt;/h2&gt;

&lt;p&gt;Policies help you create rules that define access to various secrets. We can create policies that allow certain level access like create access, update access, read access, delete access and so on. We then assign this policy to a particular authentication mechanism of a user. This user will have only those access mentioned in the policies attached to his credentials. This way, Vault makes sure that we provide minimal and only necessary access to Vault stakeholders.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-commands"&gt;
  &lt;/a&gt;
  Setup commands
&lt;/h2&gt;

&lt;p&gt;The steps have been performed on Linux Ubuntu Focal virtual machine.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dev-mode"&gt;
  &lt;/a&gt;
  Dev mode
&lt;/h3&gt;

&lt;p&gt;To get started quickly&lt;/p&gt;

&lt;p&gt;&lt;a href="https://learn.hashicorp.com/tutorials/vault/getting-started-install?in=vault/getting-started#install-vault"&gt;Vault official installation link&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;
&lt;span class="c"&gt;# install Vault from Vault website&lt;/span&gt;
curl &lt;span class="nt"&gt;-fsSL&lt;/span&gt; https://apt.releases.hashicorp.com/gpg | &lt;span class="nb"&gt;sudo &lt;/span&gt;apt-key add -

&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-add-repository &lt;span class="s2"&gt;"deb [arch=amd64] https://apt.releases.hashicorp.com &lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;lsb_release &lt;span class="nt"&gt;-cs&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt; main"&lt;/span&gt;

&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;vault

&lt;span class="c"&gt;# test with the below command&lt;/span&gt;
vault

&lt;span class="c"&gt;### DEV MODE&lt;/span&gt;
&lt;span class="c"&gt;# start dev server&lt;/span&gt;
tmux new &lt;span class="nt"&gt;-s&lt;/span&gt; vault
vault server &lt;span class="nt"&gt;-dev&lt;/span&gt; &lt;span class="c"&gt;# and detach tmux ( Ctrl+b d )&lt;/span&gt;

&lt;span class="c"&gt;# export variables that will be used by Vault when commands &lt;/span&gt;
&lt;span class="c"&gt;# are run in the current terminal session&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;VAULT_ADDR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'http://127.0.0.1:8200'&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;VAULT_TOKEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'s.hfAJfADfj...'&lt;/span&gt;

&lt;span class="c"&gt;# check Vault server status&lt;/span&gt;
vault status

&lt;span class="c"&gt;# login into Vault&lt;/span&gt;
vault login

&lt;span class="c"&gt;# view current logged in token information&lt;/span&gt;
vault token lookup

&lt;span class="c"&gt;# create policies and respective tokens&lt;/span&gt;
vim secret-user-policy.hcl
path &lt;span class="s2"&gt;"secret/data/*"&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  capabilities &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"read"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

vim secret-admin-policy.hcl
path &lt;span class="s2"&gt;"secret/data/*"&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;  capabilities &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"read"&lt;/span&gt;, &lt;span class="s2"&gt;"create"&lt;/span&gt;, &lt;span class="s2"&gt;"update"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# command to write policy&lt;/span&gt;
vault policy write secret-user-policy secret-user-policy.hcl
vault policy write secret-admin-policy secret-admin-policy.hcl

&lt;span class="c"&gt;# now open two tmux sessions for each type of user to test policies&lt;/span&gt;
tmux new &lt;span class="nt"&gt;-s&lt;/span&gt; demo &lt;span class="c"&gt;# and split screens for admin and user&lt;/span&gt;

&lt;span class="c"&gt;# at each of the tmux window&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;VAULT_ADDR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'http://127.0.0.1:8200'&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;VAULT_TOKEN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'s.hfAJfADfj...'&lt;/span&gt;

vault login &lt;span class="c"&gt;# enter repective tokens&lt;/span&gt;
vault token lookup &lt;span class="c"&gt;# to view current logged in token information&lt;/span&gt;

&lt;span class="c"&gt;# on admin window &amp;amp; notice versions&lt;/span&gt;
vault kv put secret/data/mysql &lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;root

&lt;span class="c"&gt;# add multiple keys in a single command &lt;/span&gt;
vault kv put secret/data/mysql &lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;root &lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;root

&lt;span class="c"&gt;# prevent recording the value of the token in terminal history&lt;/span&gt;
vault kv put secret/data/googlecloud &lt;span class="nv"&gt;token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-

&lt;span class="c"&gt;# read from a json file&lt;/span&gt;
vault kv put secret/data/googlecloud @apitoken.json

&lt;span class="c"&gt;# add multiple keys in a single command &lt;/span&gt;
vault kv put secret/data/aerospike &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;root &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;root &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nv"&gt;tlsname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;securecert &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="nv"&gt;namespace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;hashicorp

&lt;span class="c"&gt;# read secret&lt;/span&gt;
vault kv get secret/data/mysql

&lt;span class="c"&gt;# ON USER WINDOW&lt;/span&gt;
vault kv put secret/data/mysql &lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;root &lt;span class="c"&gt;# Will not work since this user does not have privileges&lt;/span&gt;

vault kv get secret/data/mysql

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#prod-mode"&gt;
  &lt;/a&gt;
  Prod mode
&lt;/h3&gt;

&lt;p&gt;For production setup. We will set up Vault with TLS ( SSL ) and file storage as backend.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;### DEPLOY PROD MODE&lt;/span&gt;

&lt;span class="c"&gt;# Generate the certs&lt;/span&gt;
&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /opt/vault/&lt;span class="o"&gt;{&lt;/span&gt;tls,data&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; /opt/vault/tls
openssl req   &lt;span class="nt"&gt;-out&lt;/span&gt; tls.crt   &lt;span class="nt"&gt;-new&lt;/span&gt;   &lt;span class="nt"&gt;-keyout&lt;/span&gt; tls.key   &lt;span class="nt"&gt;-newkey&lt;/span&gt; rsa:4096   &lt;span class="nt"&gt;-nodes&lt;/span&gt;   &lt;span class="nt"&gt;-sha256&lt;/span&gt;   &lt;span class="nt"&gt;-x509&lt;/span&gt;   &lt;span class="nt"&gt;-subj&lt;/span&gt; &lt;span class="s2"&gt;"/O=HashiCorp/CN=Vault"&lt;/span&gt;   &lt;span class="nt"&gt;-addext&lt;/span&gt; &lt;span class="s2"&gt;"subjectAltName = IP:&amp;lt;loopbackIP&amp;gt;,DNS:&amp;lt;host&amp;gt;"&lt;/span&gt;   &lt;span class="nt"&gt;-days&lt;/span&gt; 3650

&lt;span class="nb"&gt;cat&lt;/span&gt; /etc/vault/vault.hcl
&lt;span class="c"&gt;# Full configuration options can be found at https://www.vaultproject.io/docs/configuration&lt;/span&gt;

ui &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true

&lt;/span&gt;storage &lt;span class="s2"&gt;"file"&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  path &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"/opt/vault/data"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# HTTPS listener&lt;/span&gt;
listener &lt;span class="s2"&gt;"tcp"&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  address       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"0.0.0.0:8200"&lt;/span&gt;
  tls_cert_file &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"/opt/vault/tls/tls.crt"&lt;/span&gt;
  tls_key_file  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"/opt/vault/tls/tls.key"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;###############################################&lt;/span&gt;

&lt;span class="nb"&gt;chown &lt;/span&gt;vault: /opt/vault/tls/&lt;span class="k"&gt;*&lt;/span&gt;

service vault start

&lt;span class="c"&gt;# make sure DNS record is present, else TLS certificate verification&lt;/span&gt;
&lt;span class="c"&gt;# will fail&lt;/span&gt;

&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;VAULT_ADDR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'https://&amp;lt;hostname&amp;gt;:8200'&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;VAULT_CACERT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/opt/vault/tls/tls.crt"&lt;/span&gt;

&lt;span class="c"&gt;# either visit https://&amp;lt;IP&amp;gt;:8200 and enter values as 5 as number of keys and 3 keys needed to unseal or regenerate keys&lt;/span&gt;
&lt;span class="c"&gt;# copy the root token &amp;amp; keys&lt;/span&gt;
vault operator init

root@mac-saltmaster:/opt/vault/tls# vault status

root@mac-saltmaster:/opt/vault/tls# vault operator unseal &lt;span class="nt"&gt;--ca-cert&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/opt/vault/tls/tls.crt

vault login

&lt;span class="c"&gt;# Refer production hardening for more: https://learn.hashicorp.com/tutorials/vault/production-hardening&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Links that help:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.vaultproject.io"&gt;Link to Hashicorp Vault&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=VYfl-DpZ5wM"&gt;An Introduction to Hashicorp Vault by Armon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learn.hashicorp.com/vault"&gt;Vault tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can find more articles here: &lt;a href="https://www.tharunshiv.com"&gt;https://www.tharunshiv.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Roadrunners is a series that is aimed at delivering concepts as precisely as possible. Here, a roadrunner is referred to as a person who does things super fast &amp;amp; efficiently. Are you a roadrunner?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Thank you&lt;/p&gt;

&lt;p&gt;Check out my YouTube Channel here: &lt;a href="https://www.youtube.com/c/developerTharun"&gt;Developer Tharun - YouTube&lt;/a&gt; Thank you for reading!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Follow my articles on Dev.to: &lt;a href="https://dev.to/developertharun"&gt;https://dev.to/developertharun&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>security</category>
      <category>database</category>
      <category>beginners</category>
      <category>devops</category>
    </item>
    <item>
      <title>Drag and drop SVG elements</title>
      <author>101samovar</author>
      <pubDate>Sun, 02 Jan 2022 11:30:08 +0000</pubDate>
      <link>https://dev.to/101samovar/drag-and-drop-svg-elements-3oif</link>
      <guid>https://dev.to/101samovar/drag-and-drop-svg-elements-3oif</guid>
      <description>&lt;p&gt;In this article we will drag and drop SVG elements.&lt;/p&gt;

&lt;p&gt;Let’s build a site.&lt;br&gt;
Let’s add an SVG with two rectangles.&lt;br&gt;
Let’s add the CSS class to check if the element is draggable.&lt;/p&gt;

&lt;p&gt;Add a mousedown event listener for the SVG-element.&lt;br&gt;
First, check if the element has the “draggable” class name.&lt;br&gt;
If so, get the mouse position.&lt;br&gt;
Remember the element we start to drag and its position.&lt;br&gt;
Then start to listen to mousemove events. &lt;/p&gt;

&lt;p&gt;On mouse move we get the current mouse position&lt;br&gt;
and we change the element position.&lt;br&gt;
So the element is dragging.&lt;/p&gt;

&lt;p&gt;When the mouse button is up we stop to listen to mouse move events.&lt;br&gt;
So the element is dropped.&lt;/p&gt;

&lt;p&gt;Let’s check it out.&lt;/p&gt;

&lt;p&gt;Drag the rectangle. Drop it.&lt;br&gt;
Drag another one. Drop it.&lt;br&gt;
It works! :)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;svg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;startX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;startY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elementX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elementY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mousedown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttributeNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;class&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;draggable&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;startX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offsetX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;startY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offsetY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;elementX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttributeNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;elementY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttributeNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;y&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mousemove&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onMouseMove&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;});&lt;/span&gt;
 &lt;span class="nx"&gt;onMouseMove&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offsetX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offsetY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttributeNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elementX&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;startX&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttributeNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;y&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elementY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;startY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;};&lt;/span&gt;
 &lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mouseup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mousemove&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onMouseMove&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;I hope you found this article useful, if you need any help please let me know in the comment section.&lt;/p&gt;

&lt;p&gt;👋 See you next time. Have a nice day!&lt;/p&gt;

&lt;p&gt;Subscribe to our channel:&lt;br&gt;
&lt;a href="https://www.youtube.com/c/Samovar101"&gt;https://www.youtube.com/c/Samovar101&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Save more with DynamoDB table class</title>
      <author>Jones Zachariah Noel</author>
      <pubDate>Sun, 02 Jan 2022 11:29:03 +0000</pubDate>
      <link>https://dev.to/aws-builders/save-more-with-dynamodb-table-class-3k6g</link>
      <guid>https://dev.to/aws-builders/save-more-with-dynamodb-table-class-3k6g</guid>
      <description>&lt;p&gt;During re:Invent 2021, an announcement was made about &lt;a href="https://aws.amazon.com/dynamodb/"&gt;Amazon DynamoDB&lt;/a&gt; with table classes which helps in saving cost for infrequently accessed items. Read about the announcement from &lt;a href="https://aws.amazon.com/blogs/aws/new-dynamodb-table-class-save-up-to-60-in-your-dynamodb-costs/"&gt;AWS blog&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--3eqXOgyX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/919311122808807426/lo9aQouC_normal.jpg" alt="What’s New on AWS profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        What’s New on AWS
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @awswhatsnew
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Amazon DynamoDB announces the new Amazon DynamoDB Standard-Infrequent Access table class, which helps you reduce your DynamoDB costs by up to 60 percent&lt;br&gt;&lt;br&gt;Amazon DynamoDB announces the new Amazon DynamoDB Standard-Infrequent Access (DynamoDB Standard... &lt;a href="https://t.co/fASry7Wmte"&gt;aws.amazon.com/about-aws/what…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:51 PM - 01 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1466102686412001283" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1466102686412001283" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1466102686412001283" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h4&gt;
  &lt;a href="#key-takeaways-from-the-blog"&gt;
  &lt;/a&gt;
  Key takeaways from the blog
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#idea"&gt;The idea behind the storage class (S3) and table class (DynamoDB)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setting-up"&gt;Setting up DynamoDB table class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#costs"&gt;How DynamoDB table class affects cost&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#best-fit"&gt;Best fit for Standard IA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#the-idea-behind-the-storage-class-s3-and-table-class-dynamodb"&gt;
  &lt;/a&gt;
  The idea behind the storage class (S3) and table class (DynamoDB) &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;In most of the Serverless architectures, the &lt;em&gt;go-to solution&lt;/em&gt; for storing infrequently access items with high availability is leveraging &lt;a href="https://aws.amazon.com/s3/"&gt;Amazon S3&lt;/a&gt; with the storage class &lt;strong&gt;Standard IA&lt;/strong&gt; or &lt;strong&gt;One zone IA&lt;/strong&gt;. &lt;br&gt;
This is achieved in two ways -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Where periodically or based on events, DynamoDB table items are retrieved and stored in S3 with the storage class of Infrequently Accessed (IA). And the retrieved items from DynamoDB have to be deleted from DynamoDB.&lt;/li&gt;
&lt;li&gt;With &lt;a href="https://dev.to/awscommunity-asean/dynamodb-and-ttl-177g"&gt;DynamoDB TTL&lt;/a&gt; and &lt;a href="https://dev.to/aws-builders/deep-dive-into-lambda-event-filters-for-dyanmodb-320"&gt;event filters for &lt;em&gt;REMOVE&lt;/em&gt; operation&lt;/a&gt; only, this can be stored into S3 with he storage class of &lt;em&gt;Infrequently Accessed (IA)&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This helps in storing data which are in other words &lt;em&gt;archived&lt;/em&gt; to the application and would be accessed &lt;em&gt;one a while&lt;/em&gt; but whenever it is accessed, it needs to be highly available.&lt;/p&gt;

&lt;p&gt;Now with the latest announcement, we wouldn't have to architect using S3 for &lt;em&gt;infrequently accessed&lt;/em&gt; items/objects and it is all part of DynamoDB table with the &lt;em&gt;Standard-IA&lt;/em&gt; class with which you can perform the same DynamoDB operations for read/write. Now with the introduction of table classes, there are two classes now available - &lt;strong&gt;DynamoDB Standard&lt;/strong&gt; and &lt;a href="https://aws.amazon.com/dynamodb/standard-ia/"&gt;&lt;strong&gt;DynamoDB Standard-IA&lt;/strong&gt;&lt;/a&gt;. The table with &lt;em&gt;Standard-IA&lt;/em&gt; class will eliminate the need of S3 based archival.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;DynamoDB Standard&lt;/strong&gt;&lt;br&gt;
The default general-purpose table class. Recommended for the vast majority of tables that store frequently accessed data, with throughput (reads and writes) as the dominant table cost.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DynamoDB Standard-IA&lt;/strong&gt;&lt;br&gt;
Recommended for tables that store data that is infrequently accessed, with storage as the dominant table cost.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;
  &lt;a href="#setting-up-dynamodb-table-class"&gt;
  &lt;/a&gt;
  Setting up DynamoDB table class &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;You could use your existing deployment methods for creating or updating DynamoDB tables with &lt;em&gt;TableClass&lt;/em&gt; attribute via CloudFormation and also from the web console.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#creating-a-table-with-dynamodb-standardia"&gt;
  &lt;/a&gt;
  Creating a table with DynamoDB Standard-IA
&lt;/h5&gt;

&lt;p&gt;Whenever creating the table from console, under &lt;strong&gt;Customized settings&lt;/strong&gt; selection, the choice of table class shows up where you can choose between &lt;strong&gt;DynamoDB Standard&lt;/strong&gt; and &lt;strong&gt;DynamoDB Standard-IA&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YXgYc6Lm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zhrnl9tcbbou9a7u9ga9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YXgYc6Lm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zhrnl9tcbbou9a7u9ga9.png" alt="Create table with Standard IA" width="816" height="469"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#updating-a-table-to-dynamodb-standardia"&gt;
  &lt;/a&gt;
  Updating a table to DynamoDB Standard-IA
&lt;/h5&gt;

&lt;p&gt;For updating an existing table, select the table and view details on the console. Under the &lt;strong&gt;Actions&lt;/strong&gt; menu, select &lt;strong&gt;Update table class&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YD_0mAvD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gxxn4yf1bbpasitndin2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YD_0mAvD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gxxn4yf1bbpasitndin2.png" alt="Updating a table to DynamoDB Standard-IA" width="880" height="418"&gt;&lt;/a&gt; This will present you an UI where you can choose between &lt;strong&gt;DynamoDB Standard&lt;/strong&gt; and &lt;strong&gt;DynamoDB Standard-IA&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P4hdwqmx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xfxwq1mhm77ycs5jvnt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4hdwqmx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xfxwq1mhm77ycs5jvnt.png" alt="Update table to Standard IA" width="809" height="258"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#creating-or-updating-with-cloudformation-sam-cli"&gt;
  &lt;/a&gt;
  Creating or updating with CloudFormation / SAM CLI
&lt;/h5&gt;

&lt;p&gt;SAM CLI which uses CloudFormation based resource definition with YAML/JSON, the table class can be updated with the new property introduced &lt;a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html#cfn-dynamodb-table-tableclass"&gt;&lt;strong&gt;TableClass&lt;/strong&gt;&lt;/a&gt; which accepts &lt;strong&gt;STANDARD&lt;/strong&gt; for DynamoDB Standard class or &lt;strong&gt;STANDARD_INFREQUENT_ACCESS&lt;/strong&gt; for DynamoDB Standard IA class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;DynamoDBTable&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::DynamoDB::Table&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;AttributeDefinitions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;AttributeName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;id&lt;/span&gt;
          &lt;span class="na"&gt;AttributeType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;S&lt;/span&gt;
      &lt;span class="na"&gt;KeySchema&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;AttributeName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;id&lt;/span&gt;
          &lt;span class="na"&gt;KeyType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;HASH&lt;/span&gt;
      &lt;span class="na"&gt;ProvisionedThroughput&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;ReadCapacityUnits&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;
        &lt;span class="na"&gt;WriteCapacityUnits&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;
      &lt;span class="na"&gt;TableClass&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;STANDARD_INFREQUENT_ACCESS&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#how-dynamodb-table-class-affects-cost"&gt;
  &lt;/a&gt;
  How DynamoDB table class affects cost &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;The introduction of table classes, has changed how DynamoDB pricing works in terms of &lt;em&gt;storage&lt;/em&gt;, &lt;em&gt;read-write requests&lt;/em&gt; and &lt;em&gt;global tables&lt;/em&gt;. &lt;br&gt;
The cost for storage with &lt;em&gt;DynamoDB Standard IA&lt;/em&gt; class is much much &lt;strong&gt;cheaper&lt;/strong&gt; when compared with &lt;em&gt;DynamoDB Standard&lt;/em&gt; class with almost a difference of $0.15 per GB-month.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YfTsp9qz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kduziybyfqtj4lp31grk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YfTsp9qz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kduziybyfqtj4lp31grk.png" alt="Data storage" width="880" height="315"&gt;&lt;/a&gt; However, first 25 GB/month is available for free under &lt;em&gt;DynamoDB Standard&lt;/em&gt; class with the &lt;em&gt;monthly free tier&lt;/em&gt;.&lt;br&gt;
But in terms of &lt;em&gt;read-write requests&lt;/em&gt; and also &lt;em&gt;global tables&lt;/em&gt;, the &lt;em&gt;DynamoDB Standard IA&lt;/em&gt; class would make DynamoDB pricing expensive. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MEYY2a_F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hvoz6nvga905l0zbvvw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MEYY2a_F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hvoz6nvga905l0zbvvw.png" alt="Global tables" width="880" height="455"&gt;&lt;/a&gt; But comparing to the number of read requests which would happen with &lt;em&gt;DynamoDB Standard&lt;/em&gt; and &lt;em&gt;DynamoDB Standard IA&lt;/em&gt; class would be much much lesser as they are infrequently accessed.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oG_K6jiX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s3531ucl0lz2yfq0hsfy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oG_K6jiX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s3531ucl0lz2yfq0hsfy.png" alt="Read-write requests" width="880" height="498"&gt;&lt;/a&gt;&lt;br&gt;
There is a detailed information on DynamoDB pricing page for &lt;a href="https://aws.amazon.com/dynamodb/pricing/on-demand/"&gt;On Demand&lt;/a&gt; and &lt;a href="https://aws.amazon.com/dynamodb/pricing/provisioned/"&gt;Provisioned&lt;/a&gt;. From the example of table classes - DynamoDB Standard IA classes with On Demand is &lt;strong&gt;44.2% cheaper&lt;/strong&gt; than Standard and Provisioned is &lt;strong&gt;37.6% cheaper&lt;/strong&gt; than Standard even though the read-write requests with both the pricing models, Stardard IA is &lt;strong&gt;expensive&lt;/strong&gt; over Standard class.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#best-fit-for-standard-ia"&gt;
  &lt;/a&gt;
  Best fit for Standard IA &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;The new table class &lt;em&gt;DynamoDB Standard IA&lt;/em&gt; may not fit into all the applications as if the DynamoDB table is often requested with read/write it would generate a high DynamoDB bill. Standard IA would fit in best for the scenarios such as - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Social media app where posts prior to 1 year (365 days) are rarely accessed. &lt;/li&gt;
&lt;li&gt;Enterprise applications where the archives of years of data are maintained.&lt;/li&gt;
&lt;li&gt;Healthcare systems where the patient bill records are rarely accessed once cleared by insurance.&lt;/li&gt;
&lt;li&gt;Ecommerce applications where the low rated / less searched products are in IA state.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
      <category>dynamodb</category>
      <category>costsaving</category>
    </item>
    <item>
      <title>Time Management for Junior Developers</title>
      <author>Mikhail Karan</author>
      <pubDate>Sun, 02 Jan 2022 11:24:21 +0000</pubDate>
      <link>https://dev.to/mikhailkaran/time-management-for-junior-developers-3bgd</link>
      <guid>https://dev.to/mikhailkaran/time-management-for-junior-developers-3bgd</guid>
      <description>&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/5AVQEXseTPZxZmYLLXzMgS"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-html-all-the-things"&gt;
  &lt;/a&gt;
  What is HTML All The Things
&lt;/h2&gt;

&lt;p&gt;HTML All The Things is a &lt;a href="https://podcast.htmlallthethings.com/"&gt;web development podcast&lt;/a&gt; and &lt;a href="https://discord.com/invite/jweMCx9"&gt;discord community&lt;/a&gt; which was started by Matt and Mike, developers based in Ontario, Canada. &lt;/p&gt;

&lt;p&gt;The podcast speaks to web development topics as well as running a small business, self-employment and time management. You can join them for both their successes and their struggles as they try to manage expanding their Web Development business without stretching themselves too thin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#announcements"&gt;
  &lt;/a&gt;
  Announcements
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;Svelte for Beginners&lt;/strong&gt; Udemy course is now live! Mike took his experience in teaching and learning Svelte and created a course. &lt;/p&gt;

&lt;p&gt;This course will teach you the fundamentals of JavaScript frameworks. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Get it now on Udemy!&lt;/strong&gt; 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/svelte-for-beginners/?couponCode=HATTSALE"&gt;Svelte For Beginners&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-this-one-about"&gt;
  &lt;/a&gt;
  What's This One About?
&lt;/h2&gt;

&lt;p&gt;Time management is a challenging part of any developers' day. Between the coding work that needs to be done alongside planning, and support requests - getting ahead may seem impossible. For junior developers, the added challenge is that they're actively learning, while balancing all the things that come with job searching, working, and even traditional school. In this episode, Matt and Mike cover some time management tips and tricks for developers - with some specific ones in there for junior developers and their crazy schedules. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#show-notes"&gt;
  &lt;/a&gt;
  Show Notes
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#balancing-learning-applying-for-jobs-and-more"&gt;
  &lt;/a&gt;
  Balancing | Learning, Applying for Jobs, and more
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Determine your task priority&lt;/li&gt;
&lt;li&gt;Make an 'if I skip' list/consideration&lt;/li&gt;
&lt;li&gt;Don't always shoot for the most productive tasks &lt;/li&gt;
&lt;li&gt;Take breaks and days off &lt;/li&gt;
&lt;li&gt;Don't force a perfect plan &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#managing-your-learning-time"&gt;
  &lt;/a&gt;
  Managing Your Learning Time
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Tutorial hell&lt;/li&gt;
&lt;li&gt;Don't get stuck and not move on&lt;/li&gt;
&lt;li&gt;Don't learn it all at once&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#managing-your-job-application-time"&gt;
  &lt;/a&gt;
  Managing your Job Application Time
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Prioritize jobs based on your preferences&lt;/li&gt;
&lt;li&gt;Don't over apply&lt;/li&gt;
&lt;li&gt;Don't take anything personally (in the application process)&lt;/li&gt;
&lt;li&gt;Don't get discouraged &lt;/li&gt;
&lt;li&gt;Invest extra time wisely&lt;/li&gt;
&lt;li&gt;Acknowledge it's a grind&lt;/li&gt;
&lt;li&gt;Try multiple methods&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank you!
&lt;/h2&gt;

&lt;p&gt;If you're enjoying the podcast consider giving us a review on &lt;a href="https://podcasts.apple.com/us/podcast/html-all-things-web-development-web-design-small-business/id1412209136"&gt;Apple Podcasts&lt;/a&gt; or checking out our Patreon to get a shoutout on the podcast. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.patreon.com/htmlallthethings"&gt;Support us on Patreon&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can find us on all the podcast platforms out there as well as&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.instagram.com/htmlallthethings/"&gt;Instagram (@htmlallthethings)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/htmleverything"&gt;Twitter (@htmleverything)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.tiktok.com/@htmlallthethings"&gt;TikTok (Html All The Things)&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>podcast</category>
      <category>beginners</category>
      <category>career</category>
    </item>
    <item>
      <title>How the Metaverse is Changing Web Development</title>
      <author>Igor Polyakov</author>
      <pubDate>Sun, 02 Jan 2022 10:57:44 +0000</pubDate>
      <link>https://dev.to/igor_polyakov_gstq/how-the-metaverse-is-changing-web-development-18ga</link>
      <guid>https://dev.to/igor_polyakov_gstq/how-the-metaverse-is-changing-web-development-18ga</guid>
      <description>&lt;p&gt;The internet is no longer just text and pictures. With the development of new technologies like Virtual Reality, augmented reality, and mixed reality, the future of web development is changing. With these new technologies, we are looking at a world where more than just images will be available on websites. We are looking at a world where people can interact with 3D images. Read on to learn how this new technology is changing the game for web developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-development-in-the-new-world"&gt;
  &lt;/a&gt;
  Web Development in the New World
&lt;/h2&gt;

&lt;p&gt;The next generation of web development is a paradigm shift in the world of online marketing.&lt;/p&gt;

&lt;p&gt;3D content, otherwise known as 3D Web Content, is becoming more and more popular. Websites are now able to take advantage of their new capabilities with the help of tools like WebGL, WebVR, and WebAR to create interactive content that really engages viewers.&lt;/p&gt;

&lt;p&gt;The future of web development doesn't just mean 3D content — it also means mixed reality and augmented reality. This means that users will be able to interact with virtual objects on websites that have been placed into the real world. For example, companies can create virtual products or virtual installations on websites and then place those objects into physical spaces for people to experience them firsthand.&lt;/p&gt;

&lt;p&gt;This opens up so many possibilities for web development in the future. With the addition of these new technologies, we are looking at an entirely different landscape for website design and development than what has come before it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-virtual-reality-difference"&gt;
  &lt;/a&gt;
  The Virtual Reality Difference
&lt;/h2&gt;

&lt;p&gt;Virtual Reality is not just a new platform for entertainment, although it has been used for that as well. It has also been used to create business applications and products that provide value to the customer. In other words, VR can be used in a variety of industries from health care, education, real estate and manufacturing.&lt;/p&gt;

&lt;p&gt;With the world's first virtual reality headset, Google Cardboard, being released in 2014, there is no doubt that Virtual Reality will continue to change the web development landscape.&lt;/p&gt;

&lt;p&gt;Let's take a look at what you can expect from VR in your next website redesign or web application development project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Increased User Engagement: VR allows users to engage with digital products in a more immersive way than they've ever done before. It also allows them to experience things in a more personal way by having them virtually visit places they might have never seen before.&lt;/li&gt;
&lt;li&gt;Clarity: Users are able to see clearly where they're looking because of the lack of blurriness caused by using screens on desktop computers or devices like smartphones. With VR headsets like Oculus Rift and HTC Vive, users are able to see everything without any obstructions--making it easier for them to focus on what they're doing.&lt;/li&gt;
&lt;li&gt;Flexibility: Because of the 3D environment, users are able to see objects in different dimensions and angles, which gives them totally new opportunities.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#augmented-reality-and-mixed-reality"&gt;
  &lt;/a&gt;
  Augmented Reality and Mixed Reality
&lt;/h2&gt;

&lt;p&gt;are changing the future of web development&lt;/p&gt;

&lt;p&gt;The rapid increase in developments in augmented reality and mixed reality has changed the way developers approach web development. With these new technologies, we are looking for a more immersive experience online. For example, users will be able to walk into a virtual world and interact with 3D images on websites.&lt;/p&gt;

&lt;p&gt;For web developers, this means that they need to design websites that work on this new technology or they won't be as engaging as they should be. If your website doesn't have room for these new technologies, then you are losing out on engaging customers and potential clients.&lt;br&gt;
Because of these changes in the industry, web developers need to get off their butts and start investing in augmented and mixed reality technologies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-ar-and-mr-are-impacting-design"&gt;
  &lt;/a&gt;
  How AR and MR are Impacting Design
&lt;/h2&gt;

&lt;p&gt;While the internet is still primarily text and pictures, we are now seeing a lot more than just those two things. With the development of new technologies, like augmented reality and mixed reality, we are seeing a world where more than just images will be available on websites. This has been an especially important development for web design because it opens up our creativity and allows us to create better sites in less time.&lt;/p&gt;

&lt;p&gt;With these new technologies, designers can now use imagery that feels real. We can create content that is not only visually stunning but also experiential or interactive. But this doesn't mean that all websites are going to change overnight. In order to utilize these new technologies properly, you need to make sure you have the necessary skillsets and tech knowledge to do so successfully.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finishing-thoughts"&gt;
  &lt;/a&gt;
  Finishing Thoughts.
&lt;/h2&gt;

&lt;p&gt;The future of web development is changing. With the development of new technologies like Virtual Reality, augmented reality, and mixed reality, a world where people can interact with 3D images is on the horizon.&lt;/p&gt;

&lt;p&gt;These new technologies are making it possible for developers to create an immersive experience that will allow users to have a more intimate connection with websites.&lt;/p&gt;

&lt;p&gt;However, this technology isn't without its problems. For one thing, these types of websites are difficult to build and maintain because they require skills in both traditional and emerging technologies. And while these technologies are still a long way off from becoming mainstream (as evidenced by the lack of any major companies currently using them), we're excited about the possibilities that lie ahead for web developers!&lt;/p&gt;

&lt;p&gt;Originally posted at &lt;a href="https://hotsnow.fi/hotsnow-blog-workshtml/tpost/lvznxx4si1-how-the-metaverse-is-changing-web-develo"&gt;hotsnow.fi&lt;/a&gt;&lt;/p&gt;

</description>
      <category>metaverse</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Do you really know TypeScript? (3): Types and interfaces</title>
      <author>Alex Menor</author>
      <pubDate>Sun, 02 Jan 2022 10:52:25 +0000</pubDate>
      <link>https://dev.to/alexmenor/do-you-really-know-typescript-3-types-and-interfaces-13k3</link>
      <guid>https://dev.to/alexmenor/do-you-really-know-typescript-3-types-and-interfaces-13k3</guid>
      <description>&lt;p&gt;&lt;strong&gt;"Do you really know TypeScript?" series:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/alexmenor/do-you-really-know-typescript-1-thinking-in-sets-55dm"&gt;(1) Thinking in sets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/alexmenor/do-you-really-know-typescript-2-being-strict-2edc"&gt;(2) Being strict &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(3) Types and interfaces (You are here)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the things that you will do the most with Typescript is to define the shape of objects with &lt;code&gt;type&lt;/code&gt; or &lt;code&gt;interface&lt;/code&gt;. For that reason, understanding both well will make your TypeScript better quickly.&lt;/p&gt;

&lt;p&gt;Let's see their main differences aside of the syntax, common patterns and surprising behaviours.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-type-endraw-can-be-used-for-more-things"&gt;
  &lt;/a&gt;
  &lt;code&gt;type&lt;/code&gt; can be used for more things
&lt;/h2&gt;

&lt;p&gt;While &lt;code&gt;interface&lt;/code&gt; is used just to define the shape of objects, &lt;code&gt;type&lt;/code&gt; has other use cases.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Pet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;CoolNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3.1416&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#interface-merging"&gt;
  &lt;/a&gt;
  Interface merging
&lt;/h2&gt;

&lt;p&gt;You should be aware of this one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;DesktopFile&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;DesktopFile&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;extension&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Error: Property 'icon' is missing in type '{ extension: string; }' &lt;/span&gt;
&lt;span class="c1"&gt;// but required in type 'DesktopFile'.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DesktopFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;extension&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pdf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It can be surprising that you can redeclare an interface and merge them!&lt;/p&gt;

&lt;p&gt;This is also known as "interface augmenting" and can be desirable in some situations but is definitely unusual in other languages.&lt;/p&gt;

&lt;p&gt;Note that using &lt;code&gt;Type&lt;/code&gt; would result in an error.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#discriminated-union"&gt;
  &lt;/a&gt;
  Discriminated union
&lt;/h2&gt;

&lt;p&gt;Also known as "tagged union", is a frequent pattern in TypeScript.&lt;/p&gt;

&lt;p&gt;It can be weird if you are used to polymorphism using classes, but since TypeScript's types disappear at runtime, you need to do things a bit different.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;File&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;file&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;extension&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Folder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;folder&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;filesInside&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;DesktopItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;File&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;Folder&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DesktopItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;kind&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;file&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;// TypeScript knows that the properties&lt;/span&gt;
    &lt;span class="c1"&gt;// of the type File are defined here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This can be used like &lt;code&gt;instanceof&lt;/code&gt; in other languages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#union-of-types-vs-types-of-unions"&gt;
  &lt;/a&gt;
  Union of types vs types of unions
&lt;/h2&gt;

&lt;p&gt;Generally prefer &lt;strong&gt;union of types&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Vehicle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;motorcycle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;car&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

    &lt;span class="na"&gt;numberOfWheels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; 
    &lt;span class="na"&gt;numberOfAirbags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;vehicle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Vehicle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vehicle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;kind&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;car&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;// TypeScript still thinks that&lt;/span&gt;
    &lt;span class="c1"&gt;// numberOfAirbags could be undefined&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we used union of types instead, like in the "discriminated union" example, TypeScript can be sure that the &lt;code&gt;Car&lt;/code&gt; properties are available.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#excess-property-checking"&gt;
  &lt;/a&gt;
  Excess property checking
&lt;/h2&gt;

&lt;p&gt;This is a mechanism that can mess your mental model of structural typing when using &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;interface&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Cat&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;whiskersLength&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Cat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Uxia&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;whiskersLength&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;bestFriend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nina&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="c1"&gt;// ~~~~~~~~~~~~~~~~~~ Object literal may only specify known properties,&lt;/span&gt;
&lt;span class="c1"&gt;//                    and 'bestFriend' does not exist in type 'Cat'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From a structural typing point of view it is valid as the defined object contains at least the properties declared for &lt;code&gt;Cat&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is excess property checking complaining though. &lt;/p&gt;

&lt;p&gt;Check out this case:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;zipCode&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randomGuy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Pedro&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;45420&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Excess property checking quickly points out an error that we could've spent too much time looking for otherwise.&lt;/p&gt;

&lt;p&gt;Note that this check only happens when using object literals.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#should-i-use-raw-type-endraw-or-raw-interface-endraw-then"&gt;
  &lt;/a&gt;
  Should I use &lt;code&gt;type&lt;/code&gt; or &lt;code&gt;interface&lt;/code&gt; then?
&lt;/h2&gt;

&lt;p&gt;I find &lt;code&gt;type&lt;/code&gt; easier to reason about and more readable. &lt;/p&gt;

&lt;p&gt;One exception would be when extending types:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Flyable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fly&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Airplane&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Flyable&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Helicopter&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Flyable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, as we saw earlier, "interface augmenting" can be unfamiliar to many people.&lt;/p&gt;

&lt;p&gt;Be aware of their differences and try to make your team agree in their uses for the sake of consistency and you will be fine.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources-to-go-deeper"&gt;
  &lt;/a&gt;
  Resources to go deeper
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.goodreads.com/en/book/show/48570456-effective-typescript"&gt;Effective TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/"&gt;TypeScript docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>[C#][Uno Platform] Create desktop applications on Ubuntu 2</title>
      <author>Masui Masanori</author>
      <pubDate>Sun, 02 Jan 2022 10:33:52 +0000</pubDate>
      <link>https://dev.to/masanori_msl/cuno-platform-create-desktop-applications-on-ubuntu-2-gf7</link>
      <guid>https://dev.to/masanori_msl/cuno-platform-create-desktop-applications-on-ubuntu-2-gf7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/masanori_msl/cuno-platform-create-desktop-applications-on-ubuntu-1-3o3i"&gt;[C#][Uno Platform] Create desktop applications on Ubuntu 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/masanori_msl/net-6uno-platformubuntu-2110-using-leap-motion-5a5n"&gt;[.NET 6][Uno Platform][Ubuntu 21.10] Using Leap Motion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This time, I will try installing NuGet packages, using DI, firing life-cycle events.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#environments"&gt;
  &lt;/a&gt;
  Environments
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Ubuntu ver.21.10&lt;/li&gt;
&lt;li&gt;.NET ver.6.0.101&lt;/li&gt;
&lt;li&gt;Uno Platform ver.4.0.11&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#installing-nuget-packages"&gt;
  &lt;/a&gt;
  Installing NuGet packages
&lt;/h2&gt;

&lt;p&gt;To log, using DI, etc., I want to install NuGet packages.&lt;br&gt;
When I install packages by NuGet Package Manager, I have to select the target project.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=jmrog.vscode-nuget-package-manager"&gt;NuGet Package Manager - Visual Studio Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To use the packages in all projects, I have to install into "UnoSolutionTemplate.net6.csproj".&lt;/p&gt;

&lt;p&gt;If the package is only for specific platform, I have to add in specific projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lifecycle-events"&gt;
  &lt;/a&gt;
  Life-cycle events
&lt;/h2&gt;

&lt;p&gt;Sometimes, I want to execute something on loading the page, closing the page, and so on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shared-project"&gt;
  &lt;/a&gt;
  Shared project
&lt;/h3&gt;

&lt;p&gt;In "UnoSample.Shared", I can use "Loaded" event in MainPage.xaml.cs to execute on the page loaded.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#mainpagexamlcs"&gt;
  &lt;/a&gt;
  MainPage.xaml.cs
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Windows.UI.Xaml.Controls&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;UnoSample.ViewModels&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;UnoSample&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainPage&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Page&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MainPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Loaded&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Loaddeded"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;InitializeComponent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MainPageViewModel&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How about closing applications event?&lt;br&gt;
I can't find any events what are called on closing.&lt;/p&gt;

&lt;p&gt;So I think I shall use closing events in every specific platform projects.&lt;br&gt;
For example, WPF can use "OnClosing" and "OnClosed" methods.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#executing-on-closing"&gt;
  &lt;/a&gt;
  Executing on closing
&lt;/h3&gt;

&lt;p&gt;When I open MainPage, these classes are instantiated in sequence.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YHWJJNdH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsvaddmqfz62ox67s4ih.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YHWJJNdH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsvaddmqfz62ox67s4ih.png" alt="Image description" width="726" height="150"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In "UnoSample.Skia.Gtk" project, there is only "Main" method.&lt;br&gt;
So I can execute closing operations after "host.Run()".&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#programcs"&gt;
  &lt;/a&gt;
  Program.cs
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;GLib&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Uno.UI.Runtime.Skia&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;UnoSample.Skia.Gtk.MotionControllers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;UnoSample.Skia.Gtk&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Program&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// I also can use "using statement"&lt;/span&gt;
            &lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;motionController&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MotionController&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;ExceptionManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnhandledException&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="k"&gt;delegate&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UnhandledExceptionArgs&lt;/span&gt; &lt;span class="n"&gt;expArgs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;expArgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExitApplication&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;};&lt;/span&gt;
                &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;GtkHost&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="c1"&gt;// execute closing operations.&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#call-methods-in-unosampleshared-classes"&gt;
  &lt;/a&gt;
  Call methods in UnoSample.Shared classes
&lt;/h3&gt;

&lt;p&gt;How shall I call methods in UnoSample.Shared classes?&lt;/p&gt;

&lt;p&gt;I can access App.xaml.cs like below.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#appxamlcs"&gt;
  &lt;/a&gt;
  App.xaml.cs
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;UnoSample&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Application&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Window&lt;/span&gt; &lt;span class="n"&gt;_window&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"SharedApp &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#programcs"&gt;
  &lt;/a&gt;
  Program.cs
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Program&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;motionController&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MotionController&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
                &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;GtkHost&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="c1"&gt;// Because I can't get instances by "App.Current" before executing "host.Run()",&lt;/span&gt;
                &lt;span class="c1"&gt;// I can only execute closing operations from Program.cs. &lt;/span&gt;
                &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Current&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;Greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Call from Gtk"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.andrewhoefling.com/Blog/Post/mvvm-and-dependency-injection-in-uno-platform-ios-android-wasm-uwp"&gt;MVVM and Dependency Injection in Uno Platform - Andrew Hoefling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#di-dependency-injection"&gt;
  &lt;/a&gt;
  DI (Dependency Injection)
&lt;/h2&gt;

&lt;p&gt;Because I want to avoid the classes are coupled tightly, I try using DI framework.&lt;br&gt;
In this time, I tried using "Microsoft.Extensions.DependencyInjection(ver.6.0.0)"&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/masanori_msl/net-5-wpf-closedxml-draw-and-print-spreadsheets-1-16g6"&gt;【.NET 5】【WPF】【ClosedXML】Draw and print spreadsheets 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because I couldn't find the way to inject View and their code behinds, I put IServiceProvider into App.xaml.cs of the shared project and get injected instances from it.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#programcs"&gt;
  &lt;/a&gt;
  Program.cs
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;GLib&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.Extensions.DependencyInjection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Uno.UI.Runtime.Skia&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;UnoSample.ViewModels&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;UnoSample.Skia.Gtk&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Program&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;servicesProvider&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;BuildDi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;servicesProvider&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;IDisposable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
                &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;GtkHost&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;servicesProvider&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;IServiceProvider&lt;/span&gt; &lt;span class="nf"&gt;BuildDi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ServiceCollection&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddScoped&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MainPageViewModel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;BuildServiceProvider&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#appxamlcs"&gt;
  &lt;/a&gt;
  App.xaml.cs
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;UnoSample&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Application&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;_window&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IServiceProvider&lt;/span&gt; &lt;span class="n"&gt;ServiceProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;App&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IServiceProvider&lt;/span&gt; &lt;span class="n"&gt;serviceProvider&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ServiceProvider&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;serviceProvider&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nf"&gt;InitializeLogging&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;InitializeComponent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mainpagexamlcs"&gt;
  &lt;/a&gt;
  MainPage.xaml.cs
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Windows.UI.Xaml.Controls&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;UnoSample.ViewModels&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;UnoSample&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;partial&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainPage&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Page&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MainPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;InitializeComponent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Current&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;ServiceProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MainPageViewModel&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm not sure if this is the best method. &lt;br&gt;
Maybe it's better to use another DI framework。&lt;/p&gt;

&lt;p&gt;If I will find more better one, I will edit this post or write new post.&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>unoplatform</category>
      <category>ubuntu</category>
    </item>
    <item>
      <title>Create React App - Mind Map. Part 6 of 10: Map</title>
      <author>101samovar</author>
      <pubDate>Sun, 02 Jan 2022 10:29:53 +0000</pubDate>
      <link>https://dev.to/101samovar/create-react-app-mind-map-part-6-of-10-map-mhp</link>
      <guid>https://dev.to/101samovar/create-react-app-mind-map-part-6-of-10-map-mhp</guid>
      <description>&lt;p&gt;Let’s navigate to the Map screen.&lt;br&gt;
The Map screen is the main screen of the MindMap App.&lt;br&gt;
To navigate to the Map screen you need to double click on the MindMap card on the Home screen.&lt;br&gt;
So in the Home JS file we need to add the method that sets the route to the map.&lt;br&gt;
On the card element we need to add the double click handler.&lt;br&gt;
On double click we just call the method with item id param.&lt;/p&gt;

&lt;p&gt;Source code:&lt;br&gt;
&lt;a href="https://github.com/101samovar/react-mindmap.git"&gt;https://github.com/101samovar/react-mindmap.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our channel:&lt;br&gt;
&lt;a href="https://youtu.be/58KJNlyPLsw"&gt;https://youtu.be/58KJNlyPLsw&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Julia: A Programming Language for Data and Computer Analytics</title>
      <author>Yaniv Noema</author>
      <pubDate>Sun, 02 Jan 2022 10:06:35 +0000</pubDate>
      <link>https://dev.to/imagescv/julia-a-programming-language-for-data-and-computer-analytics-5gm7</link>
      <guid>https://dev.to/imagescv/julia-a-programming-language-for-data-and-computer-analytics-5gm7</guid>
      <description>&lt;p&gt;&lt;a href="https://julialang.org/"&gt;Julia&lt;/a&gt; is a language that was designed specifically for data and computer analytics. It has been created to handle tasks such as statistics, linear algebra, machine learning, and many more complex calculations.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-julia-programming-language-and-what-are-its-features"&gt;
  &lt;/a&gt;
  What is Julia programming language and what are its features?
&lt;/h2&gt;

&lt;p&gt;Julia is a language that was designed specifically for data and computer analytics. It has been created to handle tasks such as statistics, linear algebra, machine learning, and many more complex calculations. Julia also includes some unique features that make it stand out from other languages. For example, Julia allows you to write code in an imperative style or a functional style, which gives you more flexibility when programming. Additionally, Julia has a very efficient compiler that makes code run quickly without sacrificing accuracy. Finally, Julia is open source software and it is free to use!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-does-julia-programming-language-compare-to-other-popular-languages"&gt;
  &lt;/a&gt;
  How does Julia programming language compare to other popular languages?
&lt;/h2&gt;

&lt;p&gt;Julia is often compared to other popular languages such as Python and R. In terms of syntax, Julia is similar to Python but it has more features in common with R. For example, both Python and R allow you to write code in an imperative style or a functional style. However, Julia is faster than both Python and R and it offers more features.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#which-types-of-projects-can-benefit-from-julia"&gt;
  &lt;/a&gt;
  Which types of projects can benefit from Julia?
&lt;/h2&gt;

&lt;p&gt;A lot of different types of businesses would benefit from using the Julia programming language including data science teams, financial institutions, and healthcare organizations. For example, a business that is looking to analyze large sets of data quickly will be able to do so with ease when they use Julia. Additionally, Julia is great for businesses that want to perform complex calculations or simulations. Lastly, Julia is also well suited for machine learning projects!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#who-is-the-target-audience-for-julia-programming-language"&gt;
  &lt;/a&gt;
  Who is the target audience for Julia programming language?
&lt;/h2&gt;

&lt;p&gt;The target audience for Julia is anyone who wants to use a high-level language for data and computer analytics. In particular, businesses and individuals that want to do complex calculations quickly will benefit from using Julia. Additionally, if you are looking to learn a new programming language, Julia is a great choice! It is easy to learn and it has a very active community.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-you-should-learn-julia-programming-language"&gt;
  &lt;/a&gt;
  Why you should learn Julia programming language?
&lt;/h2&gt;

&lt;p&gt;There are a few reasons why you should learn the Julia programming language. &lt;br&gt;
Firstly, &lt;strong&gt;Julia is a great language for data and computer analytics&lt;/strong&gt;. It has been designed to handle complex calculations quickly and accurately. Additionally, Julia is also easy to learn and it has a very active community. Lastly, businesses that want to use a high-level language for data and computer analytics will benefit from using Julia. It has been designed to handle complex calculations quickly and accurately. Additionally, Julia is also easy to learn and it has a very active community. Lastly, businesses that want to use a high-level language for data and computer analytics will benefit from using Julia.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#resources-for-learning-more-about-julia-programming-language"&gt;
  &lt;/a&gt;
  Resources for learning more about Julia programming language:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://julialang.org/"&gt;Julia Programming Language Homepage &lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://juliaacademy.com/courses"&gt;Julia Academy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLP8iPy9hna6Sdx4soiGrSefrmOPdUWixM"&gt;The 2nd annual JuliaCon 2015 (MIT) on YouTube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://ucidatascienceinitiative.github.io/IntroToJulia/"&gt;A Deep Introduction to Julia for Data Science and Scientific Computing&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Julia programming language designed to make data and computer analytics more accessible. It has many features like dynamic typing, built-in support for parallel computing, and high performance that will appeal to programmers with all levels of expertise. &lt;br&gt;
If you are looking for a new way to learn how computers work or break down large datasets in your field, the easy syntax and powerful features of this new programming language may be just what you need!&lt;/p&gt;




&lt;p&gt;&lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; provide you with an easy way to build image datasets.&lt;br&gt;
15K+ categories to choose from&lt;br&gt;
Consistent folders structure for easy parsing&lt;br&gt;
Advanced tools for dataset pre-processing: image format, data split, image size and data augmentation.&lt;/p&gt;

&lt;p&gt;👉Visit &lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; to learn more&lt;/p&gt;

</description>
      <category>datascience</category>
      <category>programming</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>Built-In Angular Pipes - Part 1</title>
      <author>Anubhab Mukherjee</author>
      <pubDate>Sun, 02 Jan 2022 09:52:06 +0000</pubDate>
      <link>https://dev.to/this-is-angular/built-in-angular-pipes-part-1-23ec</link>
      <guid>https://dev.to/this-is-angular/built-in-angular-pipes-part-1-23ec</guid>
      <description>&lt;p&gt;&lt;strong&gt;T&lt;/strong&gt;oday we will be learning on a very important concept provided by Angular - &lt;code&gt;Pipes&lt;/code&gt;&lt;br&gt;
The main use of Pipe is to transform the appearance of the data before showing to the user. &lt;br&gt;
The analogy which comes to my mind when ever I talk about Pipe is the &lt;em&gt;water filter&lt;/em&gt;. A water filter takes water as input and as an output it provides us clean water, so it basically does some transformation to the water inside it.&lt;br&gt;
Similarly the Angular Pipes also takes the data as input and does some transformation and sends out the transformed data.&lt;br&gt;
At this point you might be thinking but why do need to transform?&lt;br&gt;
The main reason is to improve the &lt;strong&gt;readability&lt;/strong&gt;. &lt;br&gt;
Angular already provided thirteen (13) built in pipes. Lets see each of them one by one -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;AsyncPipe - (Will discuss when I will be covering Observables)&lt;/li&gt;
&lt;li&gt;CurrencyPipe &lt;/li&gt;
&lt;li&gt;DatePipe &lt;/li&gt;
&lt;li&gt;DecimalPipe &lt;/li&gt;
&lt;li&gt;I18nPluralPipe &lt;/li&gt;
&lt;li&gt;I18nSelectPipe &lt;/li&gt;
&lt;li&gt;JsonPipe &lt;/li&gt;
&lt;li&gt;KeyValuePipe &lt;/li&gt;
&lt;li&gt;LowerCasePipe &lt;/li&gt;
&lt;li&gt;PercentPipe &lt;/li&gt;
&lt;li&gt;SlicePipe &lt;/li&gt;
&lt;li&gt;TitleCasePipe &lt;/li&gt;
&lt;li&gt;UpperCasePipe&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So first lets create a separate component and name it &lt;code&gt;pipe-demo&lt;/code&gt;&lt;br&gt;
If you are not aware of how to create a component I would highly suggest to quickly go through &lt;a href="https://dev.to/anubhab5/creating-angular-component-129e"&gt;this_post&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our project structure would look like below -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lkDMbmJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0olfn09lt9gs2b1vh98.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lkDMbmJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0olfn09lt9gs2b1vh98.PNG" alt="Image description" width="468" height="300"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;code&gt;CurrencyPipe&lt;/code&gt;&lt;br&gt;
It is used to format the currency value as per the given country code/ currency/ decimal/ locale information. &lt;br&gt;
&lt;u&gt;use-case&lt;/u&gt;&lt;br&gt;
Suppose you have an e-commerce application where you store only the price of the products, but before showing to the user you need to add the currency value (either at the beginning or at the end).&lt;br&gt;
In this scenario currency pipe is the best choice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Syntax&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;{{ value_expression | currency [ : currencyCode [ : display [ : digitsInfo &lt;br&gt;
[ : locale ] ] ] ] }}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Lets understand the syntax before diving into the example -&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;value_expression&lt;/strong&gt; - The input value that needs to be formatted&lt;/p&gt;

&lt;p&gt;| - The pipe operator &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;currency&lt;/strong&gt; - The name of the pipe&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;currencyCode&lt;/strong&gt; - ISO 4217 currency code (its a standard) &lt;br&gt;
               It is &lt;em&gt;Optional&lt;/em&gt;.&lt;br&gt;
               It is of String type.&lt;br&gt;
               Default value is USD.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;display&lt;/strong&gt; - This determines the way to display the currency. &lt;br&gt;
              It can be of type &lt;code&gt;symbol&lt;/code&gt; (the currency symbol eg $) &lt;br&gt;
              or &lt;code&gt;code&lt;/code&gt; or &lt;code&gt;symbol-narrow&lt;/code&gt; or our &lt;code&gt;own custom string&lt;/code&gt;.&lt;br&gt;
              It is &lt;em&gt;Optional&lt;/em&gt;.&lt;br&gt;
              Default value is &lt;strong&gt;Symbol&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;digitsInfo&lt;/strong&gt; - It is the digital representation of currency &lt;br&gt;
                 value. Keeps track of how many digits to be displayed before and after decimal point if any.&lt;br&gt;
             It is of String type.&lt;br&gt;
             It is &lt;em&gt;Optional&lt;/em&gt;.&lt;br&gt;
             Default value is undefined.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;locale&lt;/strong&gt; - It It represents the locale format rules.&lt;br&gt;
             Default value is the project locale if set else its undefined. It is also optional .&lt;/p&gt;



&lt;p&gt;Now lets dive into the practical part of it.&lt;/p&gt;

&lt;p&gt;Lets create a variable in the component.ts file and name it &lt;code&gt;expense&lt;/code&gt;, and initialize it with the value &lt;code&gt;786.4589&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-pipe-demo',
  templateUrl: './pipe-demo.component.html',
  styleUrls: ['./pipe-demo.component.css']
})
export class PipeDemoComponent implements OnInit {

  expense = 786.4589;

  constructor() { }

  ngOnInit(): void {
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, lets jump into the component template file and paste in the very simple code to start with -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{{ expense | currency }}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you start the application and navigate to localhost:4200 in your browser then you must see the following output -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--En8Y3iSs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6y9zt7lyf9euuoj1hi7b.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--En8Y3iSs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6y9zt7lyf9euuoj1hi7b.PNG" alt="Image description" width="293" height="108"&gt;&lt;/a&gt;&lt;br&gt;
Here the default currency is taken is USD and the display as symbol.&lt;/p&gt;

&lt;p&gt;Now say if you want to change it to your currency unit, say I am putting as INR (that's Indian Rupee), then the code will become like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{{ expense | currency: "INR" }}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then the corresponding output will become like -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pLH0pwq8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t20s75vs9n3yjoui65vh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pLH0pwq8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t20s75vs9n3yjoui65vh.PNG" alt="Image description" width="319" height="131"&gt;&lt;/a&gt;&lt;br&gt;
So here we are passing a &lt;strong&gt;valid&lt;/strong&gt; currency code (here its INR) then the corresponding symbol will be displayed (here ₹)&lt;br&gt;
If you are not passing a valid currency code then instead of the symbol the currency code will only be displayed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;&lt;br&gt;
If you want to display any specific value as the default currency symbol then you have to pass it as the display parameter.&lt;br&gt;
The display parameter can be &lt;code&gt;code&lt;/code&gt;, &lt;code&gt;symbol&lt;/code&gt; or &lt;code&gt;symbol-narrow&lt;/code&gt; or any other &lt;code&gt;custom value&lt;/code&gt; too.&lt;/p&gt;

&lt;p&gt;Now lets paste the below code in the component template file -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;hr /&amp;gt;
&amp;lt;h3&amp;gt;{{ expense | currency: "INR":"code" }}&amp;lt;/h3&amp;gt;
&amp;lt;h3&amp;gt;{{ expense | currency: "CAD":"symbol" }}&amp;lt;/h3&amp;gt;
&amp;lt;h3&amp;gt;{{ expense | currency: "CAD":"symbol-narrow" }}&amp;lt;/h3&amp;gt;
&amp;lt;h3&amp;gt;{{ expense | currency: "INR":"symbol-narrow" }}&amp;lt;/h3&amp;gt;
&amp;lt;h3&amp;gt;{{ expense | currency: "INR":"Indian Rupee" }}&amp;lt;/h3&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see the output as -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GHbGjfXi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/453i7f412407c5lzhpge.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GHbGjfXi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/453i7f412407c5lzhpge.PNG" alt="Image description" width="414" height="256"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;Above output Explanation&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;code&gt;{{ expense | currency: "INR":"code" }}&lt;/code&gt;&lt;br&gt;
Here we are passing the currency code as INR and asking Angular to use the code only so in output you will see INR before the value is printed.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{{ expense | currency: "CAD":"symbol" }}&lt;/code&gt;&lt;br&gt;
Here we are passing the currency code as CAD that is Canadian Dollar and asking to print the Symbol of it. So the output is &lt;br&gt;
&lt;strong&gt;CA$&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;expense | currency: "CAD":"symbol-narrow"&lt;/code&gt;&lt;br&gt;
There are countries like Canada have 2 currency codes like symbol CA$ and symbol-narrow $.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;expense | currency: "INR":"symbol-narrow"&lt;/code&gt;&lt;br&gt;
Indian rupee does not have  symbol-narrow so the default rupee symbol is displayed.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;expense | currency: "INR":"Indian Rupee"&lt;/code&gt;&lt;br&gt;
If you want to display a custom value then that is also possible. You can pass as a parameter&lt;/p&gt;



&lt;p&gt;We can also customize the decimal points of the currency value. For that we need to pass the &lt;code&gt;digitsInfo&lt;/code&gt; parameter.&lt;/p&gt;

&lt;p&gt;Lets paste in the below code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;hr /&amp;gt;
&amp;lt;h3&amp;gt;{{ expense | currency: "INR":"symbol":"4.2-2" }}&amp;lt;/h3&amp;gt;
&amp;lt;h3&amp;gt;{{ expense | currency: "INR":"symbol":"3.1-1" }}&amp;lt;/h3&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see the below output -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mCTz9vfc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2hq9hcbjvcte0j0pp87.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mCTz9vfc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2hq9hcbjvcte0j0pp87.PNG" alt="Image description" width="152" height="122"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{{ expense | currency: "INR":"symbol":"4.2-2" }}&lt;/code&gt;&lt;br&gt;
Here 4 signifies the number of digits before the decimal point.&lt;br&gt;
Since we have just 3 digits before the decimal in the example that is why a 0 is also appended at the beginning.&lt;br&gt;
2-2 means that after the decimal point minimum 2 characters should be there and maximum allowed is also 2.&lt;/p&gt;

&lt;p&gt;The minimum should &lt;strong&gt;not&lt;/strong&gt; be greater than the maximum &lt;br&gt;
&lt;code&gt;&amp;lt;h3&amp;gt;{{ expense | currency: "INR":"symbol":"4.2-1" }}&amp;lt;/h3&amp;gt;&lt;/code&gt;&lt;br&gt;
else you will get the below error -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ldJ48Jc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tqc3jypyc3gol9r8gidf.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ldJ48Jc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tqc3jypyc3gol9r8gidf.PNG" alt="Image description" width="880" height="153"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If decimal points are not needed then we need to pass digitInfo parameter fractions as 0.&lt;/p&gt;

&lt;p&gt;I will walk you through the locale part once I cover the internationalization and localization part.&lt;/p&gt;

&lt;p&gt;Hope you enjoyed the post.&lt;br&gt;
If yes please do like, share and comment.&lt;/p&gt;

&lt;p&gt;Stay tuned for the remaining Pipes available in Angular.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cheers&lt;/strong&gt;!!!&lt;br&gt;
&lt;em&gt;Happy Coding&lt;/em&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Docker Explained: What is containerisation?  | What is the need of containerisation? | What is docker?</title>
      <author>Kajal kumari</author>
      <pubDate>Sun, 02 Jan 2022 09:31:38 +0000</pubDate>
      <link>https://dev.to/developerscodz/docker-explained-what-is-containerisation-what-is-the-need-of-containerisation-what-is-docker-3d9l</link>
      <guid>https://dev.to/developerscodz/docker-explained-what-is-containerisation-what-is-the-need-of-containerisation-what-is-docker-3d9l</guid>
      <description>&lt;p&gt;Before introducing the containerisation let us first understand what basically happens in a standard delivery pipeline.So developer after writing all the codes will build it.In this, several dependencies can also be needed. After building he/she will give the executable or software(code + dependencies) to the tester to check all the test runs which were initially decided even before making of that project.If the project passes all the test runs then tester approves it for the deployment and then it become available to end users.&lt;/p&gt;

&lt;p&gt;But what if software fails to pass some of the test runs, it will be given back to developer highlighting the problems, but developer wonders, its working properly in my machine. Why it won't worked in yours??🤔🤔&lt;/p&gt;

&lt;p&gt;So in order to know the problem let's deep dive into this environment of developer and tester.&lt;/p&gt;

&lt;p&gt;Say developer and tester is using almost the same environment but there is a slight difference, like developer is using Pytest 5.4.3 to test all the test runs and the tester is using Pytest 5.3.0 or if both are using different IDE,etc so there can be compatibility issue which can cause the software to run on the developer environment but not on the tester environment.&lt;/p&gt;

&lt;p&gt;To solve this problem, what developer can do is, he will take the code, all the dependencies(like libraries,functions,tools) and the environment of the project and put it in a container and then he will ship the container like a package to the tester or to the users. By doing this, now  the environment of the other's system doesn't matter because developer had already configured the container according to the project need.&lt;/p&gt;

&lt;p&gt;So this concept is quite similar to virtual machine, right? but lets quickly summarise what virtualisation or virtual machine (VM) is ? &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VM is virtual computers within computers&lt;/strong&gt;.It will have CPU, memory, disk, kernel everything that a real computer have which will be borrowed from a physical host computer.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sWguiuR2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1198/1%2AoF6QqYRhWPw9HF20CUqhMw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sWguiuR2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1198/1%2AoF6QqYRhWPw9HF20CUqhMw.png" alt='"Virtual Machine"' width="880" height="703"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, &lt;strong&gt;containers,&lt;/strong&gt; based on the same concept but quite different from VMs. Each VMs run its own guest operating system but containers share the operation system of the host which makes containers size lighter than VMs hence, more portable and agile. Moreover, they are isolated from each other and run there own software,binaries and configuration. Container can be made and run on local systems,virtual machines or even deployed on the clouds. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NP3Q8acg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dt4mbq2tfun1h2v8mlag.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NP3Q8acg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dt4mbq2tfun1h2v8mlag.jpeg" alt='"VM v/s Container"' width="345" height="146"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; - Docker is an open source platform which allows you to build, deploy, run and manage your containerised app. What it means is its a software that helps you to build containers for your apps. Building containers now your app is independent of any system, any environment because container has everything inside it needed by the app, their dependencies,suitable version,configuration,script,binaries.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NA1jek3U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1273307847103635465/lfVWBmiW_400x400.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NA1jek3U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1273307847103635465/lfVWBmiW_400x400.png" alt='"docker"' width="400" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now lets quickly see what are the different terms related to docker are: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;docker client&lt;/li&gt;
&lt;li&gt;docker daemon&lt;/li&gt;
&lt;li&gt;docker image&lt;/li&gt;
&lt;li&gt;docker container&lt;/li&gt;
&lt;li&gt;docker hub&lt;/li&gt;
&lt;li&gt;docker registry&lt;/li&gt;
&lt;li&gt;docker volumes&lt;/li&gt;
&lt;li&gt;docker networks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;you can install &lt;a href="https://docs.docker.com/desktop/windows/install/"&gt;docker desktop&lt;/a&gt; if you are using windows. If you are using ubuntu you can install docker Engine by following this installation guide like I did ;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.docker.com/engine/install/ubuntu/"&gt;Quick installation on ubuntu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great! if you are reading upto here, that means I haven't bored you at all 😅 and now you know the terms, concepts related to deployment, virtualisation, containerisation and docker😇😇&lt;/p&gt;

&lt;p&gt;I think putting all the things under one roof will be overwhelming so I will come back very soon with a new blog that will explain all the terms that I listed here. And we will also create container live there, start it,run it and even stop it using docker commands.We will see what is images, how we make our own image or pull an already build image from docker hub and explore many more things. 🤩🤩&lt;/p&gt;

&lt;p&gt;Good bye until that👋👋 &lt;/p&gt;

</description>
      <category>docker</category>
      <category>virtualisation</category>
      <category>containerisation</category>
      <category>deployment</category>
    </item>
  </channel>
</rss>
