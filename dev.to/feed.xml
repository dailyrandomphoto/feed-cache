<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The Unbiased Guide to Choosing the Right BI Tool</title>
      <author>Jacob Cohen</author>
      <pubDate>Mon, 08 Feb 2021 19:54:21 +0000</pubDate>
      <link>https://dev.to/harperdb/the-unbiased-guide-to-choosing-the-right-bi-tool-3oe6</link>
      <guid>https://dev.to/harperdb/the-unbiased-guide-to-choosing-the-right-bi-tool-3oe6</guid>
      <description>&lt;p&gt;Business Intelligence (BI) is the ultimate end goal of digital transformation. The ability to make better, smarter, more efficient decisions based on data collected across the business is what drives technical investment. This makes choosing the right tool paramount for your organization. As a database instructor and mentor of mine used to say: data is worthless until it becomes information. Information is what happens when you use data to glean insights and conclusions. What better way to do that than with a tool designed for the job? Great news! There are a ton of options out there for you, potentially too many. &lt;strong&gt;In this blog, I’ll discuss strategies for selecting the right BI tool as well as some important things to keep in mind throughout the process.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s start by defining what exactly makes up a BI tool. Don’t tell my English teachers, but I’m going to cite Wikipedia. According to them, “Business intelligence software is a type of application software designed to retrieve, analyze, transform and report data for business intelligence. The applications generally read data that has been previously stored…” I think that does a pretty good job of defining the broad terms, but that still leaves us with a wide variety of software choices. Spreadsheets, database management studios, dashboarding tools, data mining software, all fall under this umbrella. For the purposes of this blog, I’ll be operating under the assumption that we are referring to the more colloquial BI tools which focus on providing visualization capabilities to end users of any skill level. &lt;em&gt;Please note that I’m agnostic here and neither I nor HarperDB are promoting certain tools over others. This blog is intended to share my experience and provide general guidelines for making the decision that’s right for you.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There are plenty of minor factors that come into play when choosing the right BI tool, but let’s take a look at some important ones. Here are what I consider to be effective criteria to determine the right BI tool for your organization: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technical Compatibility&lt;/strong&gt;&lt;br&gt;
Does the tool connect to the existing datastores in your organization? If the tool can’t connect to your datastores or would require a large data integration project, it’s probably best to move on and find something that works a little closer to out-of-the-box. I’ve worked with quite a few organizations that have legacy data stored in legacy database technologies. Just because the tools are old doesn’t make the data any less valuable and it may be critical for true business intelligence understanding. If this is the case for your organization, you may have to skip some of the more modern, web-based solutions. For example, neither Looker nor Google Data Studio support old school JDBC or ODBC connections, which can be a limiting factor of legacy technology.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;User Base/Ease of Use&lt;/strong&gt;&lt;br&gt;
What tools are your end-users already familiar with? Providing them with BI tools that have a similar user experience to tools they already use helps ease the transition to the new tool and drives adoption. If end users are intimidated by the complexity of the new solution they are far less likely to adopt it. For example, if most of the end-users are already Excel power users, selecting Microsoft PowerBI is going to have a far greater chance of success because PowerBI is basically Excel for analytics. Another example is if your organization is powered by G Suite, going with Google Data Studio might make the most sense because it fits into the already existing ecosystem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reporting Capabilities&lt;/strong&gt;&lt;br&gt;
Does the tool provide the proper reporting and analytics? At the end of the day, if you need to run specific analytics and produce distinctive charts, you need the right tool that can do it. The big players in the BI tool world most likely have everything you need, but it’s still important to verify ahead of time. I have seen cases where the leading tool is disqualified for not being able to produce a chart that a key stakeholder considered critical.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Collaborative Functionality&lt;/strong&gt;&lt;br&gt;
Does the tool feature collaborative functionality to build and share charts and dashboards across teams? We should be past the days of accessing an Excel file or, even worse, an Access database file from a shared drive. (Yet I keep seeing them, so don’t feel too bad if you have some left, but please digitally transform already). This means we should be choosing tools that are collaborative at their core. The ability to build a chart with your team, share, and distribute is critical in modern business. Especially now that I haven’t left my house in months.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pricing&lt;/strong&gt;&lt;br&gt;
Is the functionality worth the cost? I’m not going to dig too much into this one, it’s pretty obvious. However, if Fred, our COO, were writing this blog this section would be the largest one, but that’s his job. That’s the point, the technical team may want the biggest and baddest tool, but if the business stakeholders don’t see the value in it then you’re not getting your fancy tool. Pricing for BI tools is wide-ranging, for example, Tableau is over $800 per user per year and Google Data Studio is free. Sure, Tableau has more features, but ask your COO which one they prefer once they hear that tidbit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Optional: Mobile Friendly&lt;/strong&gt;&lt;br&gt;
Does the tool offer mobile-friendly dashboarding and reporting? Now, I say this is optional because for some organizations this just isn’t a priority or a necessity. Others could find immense value in giving its users a real-time dashboard in the palm of their hands. For example, anyone with physical assets could benefit from having status and management of everything with them at all times instead of relying on a laptop.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ancillary Requirements&lt;/strong&gt;&lt;br&gt;
What else do we need? Here’s my catchall. Each organization operates its own way, I’m sure there are things I’ve missed here that are important to you. Maybe you only run Microsoft OS, so the tool needs to be able to run there as well. Perhaps email alerting is a requirement.&lt;/p&gt;

&lt;p&gt;There are plenty of criteria and requirements that could sway the decision of a BI tool. Hopefully, this blog helps provide some unbiased opinions and thoughts of what to look for when getting started with your BI tool search. &lt;/p&gt;

&lt;p&gt;Now for a bit of HarperDB bias. Our database technology was built to be powerful and easy to use for all aspects of data collection and analysis. In fact, HarperDB can easily serve as a data warehouse to coalesce data from disparate data stores, so you only need to hook your BI tool up to a single data source. We offer plenty of &lt;a href="https://studio.harperdb.io/support/drivers"&gt;drivers, like ODBC and JDBC, out-of-the-box&lt;/a&gt; that work natively with client-based tools like Tableau and PowerBI. We also have an &lt;a href="https://studio.harperdb.io/support/drivers"&gt;Excel Add-In&lt;/a&gt; that can be used for makeshift BI purposes. In fact, I’ve seen some of our partners build some incredibly powerful tools for users who just want to stay in Excel for everything. However, as a newer database, there are times when we run into BI tools that don’t support HarperDB out of the box. Fortunately, many of these tools allow the community to build their own connectors and integrations. We currently have someone working on a &lt;a href="https://feedback.harperdb.io/suggestions/107119/create-a-data-studio-connector-bounty-2000-usd"&gt;Google Data Studio connector&lt;/a&gt; through our &lt;a href="https://harperdb.io/developers/bounty-program/"&gt;bounty program&lt;/a&gt; which should be ready to go in the near future. I’m pretty excited for that one! Additionally, the &lt;a href="http://studio.harperdb.io/"&gt;HarperDB Studio&lt;/a&gt; has built in charting functionality, making it a free and powerful BI tool of its own. Did I convince you to give it a try? &lt;a href="https://harperdb.io/harperdb-cloud-get-started-today/"&gt;Try HarperDB Cloud for free today!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Elf_ohag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/msyxnk1a7sqoeq8y0fd4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Elf_ohag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/msyxnk1a7sqoeq8y0fd4.png" alt="charting"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;HarperDB Studio Charting&lt;/em&gt;&lt;/p&gt;

</description>
      <category>database</category>
      <category>datascience</category>
      <category>webdev</category>
      <category>bigdata</category>
    </item>
    <item>
      <title>Announcing a New Kind of Boot Camp: Front-End Foxes School</title>
      <author>Jen Looper</author>
      <pubDate>Mon, 08 Feb 2021 16:44:36 +0000</pubDate>
      <link>https://dev.to/frontendfoxes/announcing-a-new-kind-of-boot-camp-front-end-foxes-school-f4g</link>
      <guid>https://dev.to/frontendfoxes/announcing-a-new-kind-of-boot-camp-front-end-foxes-school-f4g</guid>
      <description>&lt;p&gt;Front-End Foxes is a 501(c)(3) nonprofit, tax-exempt charity registered in Massachusetts, USA. We are people who identify as women and who want to learn front-end technologies to make websites and mobile apps.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Visit &lt;a href="https://frontendfoxes.org"&gt;Front-End Foxes online&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Founded by Jen Looper in February 2018, we create and host educational events to teach front-end technologies to women in a cool and fun way. Our activities include free self-driven code labs completed in a workshop format in groups with mentoring by volunteers, either online or in-person. The goal of the program is to familiarize women with front-end technologies in a supportive and inclusive environment. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rz9JfwJU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kdt3jd3ouw7pjiztpurn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rz9JfwJU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kdt3jd3ouw7pjiztpurn.png" alt="Workshop Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In 2020 we pivoted to an entirely online format, and hosted several Zoom workshops and streamed events via our chapters. In 2021 we propose to retain this model for the Community wing of the organization while creating a completely new, Educational wing. &lt;strong&gt;With this structure we intend to launch a new online boot camp to teach development skills to women in a new and unique way.&lt;/strong&gt; We are one of the very few non-corporate, free-of-charge community-generated bootcamps for women in the world.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Get ready for the first &lt;a href="https://frontendfoxes.school"&gt;Front-End Foxes School&lt;/a&gt; cohort launching in Spring of 2021!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#our-team" class="anchor"&gt;
  &lt;/a&gt;
  Our Team
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Staff&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CWgX4KHY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/htmkopn3u37f4ab2up2x.png" alt="Jen"&gt;&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Jen Looper (President and Founder)&lt;/strong&gt; is a Google Developer Expert and a Cloud Developer Advocate Lead at Microsoft with over 20 years' experience as a web and mobile developer. She is a multilingual multiculturalist with a passion for teaching.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KA2mN_td--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fkiah4igdpdbs8h8pfel.png" alt="Diana"&gt;&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Diana Rodríguez (Education Coordinator)&lt;/strong&gt; is a web developer, infrastructure and automation specialist with over 20 years’ experience in the tech ecosystem. Strong in community presence, she leads GDG Durham and PyLadies RDU.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hXCUukYC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/svijhk81yfgb7iow44ry.png" alt="Jaeriah"&gt;&lt;/td&gt;
&lt;td&gt;
&lt;strong&gt;Jaeriah Tay (Student Satisfaction Coordinator)&lt;/strong&gt; is a multilingual front-end developer/designer who builds and designs product and integrations at Chec/Commerce.js. Coming from a design and entrepreneurial background, Jaeriah applies her passion by building software and working on developer resources.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#what-is-frontend-foxes-school" class="anchor"&gt;
  &lt;/a&gt;
  What is Front-End Foxes School?
&lt;/h2&gt;

&lt;p&gt;We propose to host, throughout the year, four cohorts of 11 weeks each. Each cohort will be designed for 60 students, with one paid, trained instructor per region teaching via our online platform twice a week, aided by volunteer mentor coaches.&lt;/p&gt;

&lt;p&gt;We will teach the basics of web development starting with JavaScript, HTML and CSS and finally teaching React.js as a framework of choice. Our project-based curriculum allows new developers to create and maintain a web portfolio site and a GitHub presence for professional use. Paid instructors will be responsible for teaching the curriculum while volunteers will be sourced from our community of experienced developers. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wO67utAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dh763vzh3yxudramnyuo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wO67utAH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/dh763vzh3yxudramnyuo.jpg" alt="Bogota"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Learning and Teaching together in Bogotá, Colombia&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Each cohort of 60 will be comprised of three regional groups of 20. Due to time zone constraints, we propose that each seasonal cohort include a group from Asia, one from Europe/Africa, and one from the Americas. Thus, over a year, we propose to teach 12 groups for a total of 240 students trained per year. &lt;/p&gt;

&lt;p&gt;We would like to potentially engage with sponsoring companies to offer apprenticeships to students who graduate from our cohorts, to help continue their training and progress with their entrance into technical fields. In addition, we welcome cohort students to our Slack channel to discover mid-career and senior women developers for networking and mentoring opportunities.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-goals" class="anchor"&gt;
  &lt;/a&gt;
  Our Goals
&lt;/h2&gt;

&lt;p&gt;🦊 We propose to teach cohorts of women front-end web development skills, skills often not taught in college. We will use a project-based curriculum designed to help students build their professional portfolios.&lt;/p&gt;

&lt;p&gt;🦊 Provide opportunities for companies to help improve the pipeline of well-trained new developers for the front-end ecosystem.&lt;/p&gt;

&lt;p&gt;🦊 Use a state-of-the-art learning platform to provide an excellent learning experience&lt;/p&gt;

&lt;p&gt;🦊 Make online learning accessible to remote corners of the world through a performant and lean experience for all users via our whitelabeled platform and worldwide mentoring team&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Front-End Foxes School is a part-time program, taught twice a week in the evenings - perfect for working women, students and moms. We will ALWAYS be free of charge for students with no strings attached.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#join-us" class="anchor"&gt;
  &lt;/a&gt;
  Join us!
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Teach!&lt;/strong&gt; We are currently looking for instructors eager to teach! This is a &lt;strong&gt;paid position&lt;/strong&gt; and we want to hear from you! Please contact &lt;a href="mailto:diana@frontendfoxes.org"&gt;diana@frontendfoxes.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sponsor!&lt;/strong&gt; We need sponsors for our efforts! If you'd like to be a part of this new and innovative effort, please reach out to Jen Looper - &lt;a href="mailto:jen@frontendfoxes.org"&gt;jen@frontendfoxes.org&lt;/a&gt; for a complete prospectus.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Coach!&lt;/strong&gt; We are looking for volunteer mentors to help coach students. Come bring your skills as a developer and help the next generation of women developers enter the work force. If you want to coach, please reach out to &lt;a href="mailto:diana@frontendfoxes.org"&gt;diana@frontendfoxes.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learn!&lt;/strong&gt; If you are interested in learning more about the cohorts, reach out to &lt;a href="mailto:jaeriah@frontendfoxes.org"&gt;jaeriah@frontendfoxes.org&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Thank you to the community for your continued support as we plot the next course for Front-End Foxes, Inc.!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Find us online at &lt;a href="https://frontendfoxes.school"&gt;Front-End Foxes School&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>The Single Div trend &amp; Making the React Logo.</title>
      <author>Akshaya Venkatesh</author>
      <pubDate>Mon, 08 Feb 2021 14:13:21 +0000</pubDate>
      <link>https://dev.to/venkyakshaya/the-single-div-trend-making-the-react-logo-284c</link>
      <guid>https://dev.to/venkyakshaya/the-single-div-trend-making-the-react-logo-284c</guid>
      <description>&lt;p&gt;&lt;strong&gt;What to expect?&lt;/strong&gt;&lt;br&gt;
This blog explains why creating single div art is a popular trend and how to build the React JS logo with just one div and pure CSS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is the "Single Div" hubbub all about?&lt;/strong&gt;&lt;br&gt;
Let us consider a basic example - creating a series of different colored dots. I could just create an array of elements and assign different colors to them but if I am given a condition that I may use only one div element - I will choose to use the background property (among other ways) to achieve the same. This is the main reason for the popularity of this trend. It challenges the developer to harness or exploit many CSS properties that would not be used otherwise.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Breaking down the React logo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--goETGOXU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x3x5w638kkixi9s3h3vw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--goETGOXU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x3x5w638kkixi9s3h3vw.gif" alt="Animated React Logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The logo is pretty straightforward - there are three elliptical orbits with a nucleus at their center in what I like to call "React Blue"  (hex code - #61dafb). &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;br&gt;
As promised, HTML will have nothing but a &lt;code&gt;&amp;lt;div /&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Orbit shape&lt;/strong&gt;&lt;br&gt;
For the orbit's elliptical shape, we first create a class that can style all three orbits. It simply uses the border properties to define the shape. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;.logo-orbit {&lt;br&gt;
  height: 100px;&lt;br&gt;
  width: 300px;&lt;br&gt;
  border-radius: 50%;&lt;br&gt;
  border: 10px solid $react-blue;&lt;br&gt;
}&lt;/code&gt;&lt;br&gt;
This can style any div to look something like this 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NjVpmyRd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/h6wzge8wele13ln86jm9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NjVpmyRd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/h6wzge8wele13ln86jm9.png" alt="React logo central ellipse orbit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The 3 orbits&lt;/strong&gt;&lt;br&gt;
For the central orbit, select the div tag and apply the &lt;code&gt;.logo-orbit&lt;/code&gt; class. I have used Scss and extended the class name in the styles.&lt;br&gt;
&lt;code&gt;div{&lt;br&gt;
  @extend .logo-orbit;&lt;br&gt;
}&lt;/code&gt;&lt;br&gt;
For those not familiar with Scss, please replace &lt;code&gt;@extend .logo-orbit&lt;/code&gt; with styles in the &lt;code&gt;.logo-orbit&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;Next, we use the &lt;code&gt;:before&lt;/code&gt; and &lt;code&gt;:after&lt;/code&gt; pseudo-selectors. These are conventionally used for inserting content but here we use them for the other two orbits as follows.&lt;br&gt;
&lt;code&gt;:before, :after {&lt;br&gt;
    @extend .logo-orbit;&lt;br&gt;
    content: "";&lt;br&gt;
    position: absolute;&lt;br&gt;
    top: -10px;&lt;br&gt;
    left: -10px;&lt;br&gt;
    box-sizing: inherit; &lt;br&gt;
  }&lt;/code&gt;.&lt;br&gt;&lt;br&gt;
It is worth noting that although &lt;code&gt;box-sizing&lt;/code&gt; is an inherited property, the pseudo-elements do not inherit them and require an explicit inheritance. &lt;/p&gt;

&lt;p&gt;Next, we position the logo with rotation as follows.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JIe3p0M4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/093ewdrgyf1kedlhzs51.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JIe3p0M4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/093ewdrgyf1kedlhzs51.png" alt="React logo 3 orbits"&gt;&lt;/a&gt;&lt;br&gt;
&lt;code&gt;&amp;amp;:before {    &lt;br&gt;
    transform: rotate(60deg);&lt;br&gt;
  }&lt;br&gt;
  &amp;amp;:after {&lt;br&gt;
    transform: rotate(-60deg);&lt;br&gt;
  }&lt;/code&gt;&lt;br&gt;
Now we are only left with the nucleus. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nucleus&lt;/strong&gt;&lt;br&gt;
We use &lt;code&gt;radial-gradient&lt;/code&gt; with the background property applied to the div for creating the nucleus as follows.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qo_Wp38Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e0nl7ziy1la7bpwj7rsp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qo_Wp38Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/e0nl7ziy1la7bpwj7rsp.png" alt="Complete react logo"&gt;&lt;/a&gt;&lt;br&gt;
&lt;code&gt;background: radial-gradient(circle, $react-blue 24px, transparent 25px);&lt;/code&gt;&lt;br&gt;
With that the logo is done. The complete code along with the turn animation can be found in the following Codepen.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/akshaya-venkatesh8/embed/eYZdaOy?height=600&amp;amp;default-tab=html,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;There is so much that can be done with just a single div. Let me know about your single-div creations in the comments or reach me on &lt;a href="https://twitter.com/venkyakshaya"&gt;Twitter&lt;/a&gt;.  Thank you for reading! &lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>webdev</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>10 VS Code emmet tips to make you more productive</title>
      <author>Tapas Adhikary</author>
      <pubDate>Mon, 08 Feb 2021 14:11:45 +0000</pubDate>
      <link>https://dev.to/atapas/10-vs-code-emmet-tips-to-make-you-more-productive-17l9</link>
      <guid>https://dev.to/atapas/10-vs-code-emmet-tips-to-make-you-more-productive-17l9</guid>
      <description>&lt;p&gt;In general, productivity is the ratio between the output and input. In software engineering, programming productivity(or development productivity) can be the ratio between the quantity of the software code produced and its time-cost. &lt;/p&gt;

&lt;p&gt;In mathematical term,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Development Productivity = Quantity of Software Code / (Number of Programmers * Time Spent to Produce the Code)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The lesser time spent to produce the code results in a significant increase in the development productivity. Let us learn about a few tips &amp;amp; tricks to drastically reduce the &lt;code&gt;HTML/CSS&lt;/code&gt; source code creation time to become super productive.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#vs-code-and-emmet" class="anchor"&gt;
  &lt;/a&gt;
  VS Code and Emmet
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;Visual Studio Code(aka, VS Code)&lt;/code&gt; is one of the leading source code editor(also an IDE) and arguably one of the best today for web development. &lt;code&gt;Emmet&lt;/code&gt; is a plug-in based infrastructure that can produce HTML/CSS code snippets from short-hand syntaxes. VS Code supports Emmet 2.0 out of the box. It means you do not need any additional extensions to take advantage of it.&lt;/p&gt;

&lt;p&gt;Let us see ten such usages of the emmet using VS code to help you become a more productive developer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Feel free to open an empty HTML file in the VS Code editor and try out these tips &amp;amp; tricks as you read!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#1-html-structure-and-tags" class="anchor"&gt;
  &lt;/a&gt;
  1. HTML Structure and Tags
&lt;/h1&gt;

&lt;p&gt;One of the struggles that most web developers face is remembering the HTML Structure and syntaxes of HTML tags. What could be more exciting than a single character can create the basic HTML structure for us? Open an empty HTML file using VS code and type &lt;code&gt;!&lt;/code&gt; character. You will get an option to select to create a basic HTML structure, as shown in the image below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fw-awSTR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612161245614/wXOBba2OI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fw-awSTR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612161245614/wXOBba2OI.png" alt="html_exp_1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can type a few initial letters of any HTML tags to create elements with the required attributes. The image below shows the possibilities to create the anchor tag with different attributes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JZoyONGi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612161270911/e4DjxP0jM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JZoyONGi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612161270911/e4DjxP0jM.png" alt="html_exp_2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are a few more examples that are of frequent use in web development. We can link to a CSS file, load a JavaScript file, create different input tags, a disabled button, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m9FIvjsR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612161287608/HIc9wkAXP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m9FIvjsR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612161287608/HIc9wkAXP.png" alt="html_exp_3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are plenty of others you can try out by typing the initial characters of the HTML tags.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-add-class-and-id" class="anchor"&gt;
  &lt;/a&gt;
  2. Add class and id
&lt;/h1&gt;

&lt;p&gt;An efficient way to reduce coding time is to create the HTML tags with the required class names and ids. Try this short-cut to create a &lt;code&gt;ul&lt;/code&gt; tag with the class name, &lt;code&gt;list&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ul.list
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;produces,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"list"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Similarly, here is the short-cut for creating a &lt;code&gt;ul&lt;/code&gt; element with the id, &lt;code&gt;list-id&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ul#list-id
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;produces,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"list-id"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you want to add a class name or id to the &lt;code&gt;div&lt;/code&gt; element, you do not even need to mention the div in the short-hand.&lt;/p&gt;

&lt;p&gt;For class name,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;.content
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;produces,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For id,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#content-id&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;produces,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"content-id"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#3-children" class="anchor"&gt;
  &lt;/a&gt;
  3. Children
&lt;/h1&gt;

&lt;p&gt;Creating a nested HTML structure manually can be very tedious. What if we can create the nested HTML structure by typing only a few characters? Let's create an unordered list(ul) and a list item(li) under it. Use the &lt;code&gt;&amp;gt;&lt;/code&gt; symbol to create the nested child structure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ul&amp;gt;li
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;produces,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Lorem&lt;/code&gt; is another useful short-cut to create some random texts to test your web page faster. Let's create a paragraph(p) tag with the Lorem texts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;p&amp;gt;Lorem
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;produces,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Lorem ipsum dolor sit amet consectetur, adipisicing elit. Consectetur deserunt quam voluptatum quos ipsa cupiditate ipsum qui sequi illum? Qui exercitationem accusamus totam natus ut fugit magnam modi eaque doloremque.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, let us create an unordered list(ul) with a list item(li) under it. The list item should have a class name, &lt;code&gt;list&lt;/code&gt;. Finally, we want to create an anchor(a) tag with a class name, &lt;code&gt;link&lt;/code&gt; inside the &lt;code&gt;li&lt;/code&gt; tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ul&amp;gt;li.list&amp;gt;a.link
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;produces,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"list"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"link"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#4-multiplication" class="anchor"&gt;
  &lt;/a&gt;
  4. Multiplication
&lt;/h1&gt;

&lt;p&gt;You can multiply an HTML element using the &lt;code&gt;*&lt;/code&gt; symbol. Let's create 5 list lags(li) inside a &lt;code&gt;ul&lt;/code&gt; tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ul&amp;gt;li&lt;span class="k"&gt;*&lt;/span&gt;5
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;produces,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ui&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ui&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#5-siblings" class="anchor"&gt;
  &lt;/a&gt;
  5. Siblings
&lt;/h1&gt;

&lt;p&gt;Use the &lt;code&gt;+&lt;/code&gt; symbol to create multiple elements at the same level. Let's say we want to create three div elements in the same level wrapped by another div.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;.bothers&amp;gt;.alex+.bob+.me
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;produces,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bothers"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"alex"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bob"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"me"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you know by now, we no need to mention the &lt;code&gt;div&lt;/code&gt; element when creating it with class name and id.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-grouping" class="anchor"&gt;
  &lt;/a&gt;
  6. Grouping
&lt;/h1&gt;

&lt;p&gt;Once you know the usages of the last 5 tips &amp;amp; tricks, you can use them in combinations to become very productive. This is where the grouping comes in to picture. We use the &lt;code&gt;(&lt;/code&gt; symbol along with &lt;code&gt;)&lt;/code&gt; to create the group.&lt;/p&gt;

&lt;p&gt;Let's create a &lt;code&gt;ul&lt;/code&gt; tag and 5 groups of &lt;code&gt;li&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; tags.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ul&amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;li&amp;gt;a&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt;5
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;produces,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, let us take a bit more complex usage. Notice the grouping used in the short-hand below,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;div&amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;header&amp;gt;ul&amp;gt;li&lt;span class="k"&gt;*&lt;/span&gt;2&amp;gt;span.item&lt;span class="o"&gt;)&lt;/span&gt;+section.content+&lt;span class="o"&gt;(&lt;/span&gt;footer&amp;gt;&lt;span class="o"&gt;(&lt;/span&gt;p&amp;gt;Lorem&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt;2&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once you break it down, it creates the proper nested structure using the group. The image below demonstrates it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yG7AQghy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612176095982/u4LPuaFR-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yG7AQghy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612176095982/u4LPuaFR-.png" alt="group_example.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It produces this code snippet,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Lorem ipsum dolor sit amet consectetur adipisicing elit. Repellat iure quaerat, molestias dolore commodi sequi porro, delectus eius quos saepe recusandae veniam modi laudantium voluptatibus cumque odit similique beatae eos.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Nemo sequi veniam est! Laborum rem iste id vel, harum repellendus, reiciendis labore minima eum voluptatem dicta error nesciunt fugiat! Ipsa, perferendis iste exercitationem explicabo ex consequuntur dicta iure ipsam.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#7-numbering" class="anchor"&gt;
  &lt;/a&gt;
  7. Numbering
&lt;/h1&gt;

&lt;p&gt;We use the &lt;code&gt;$&lt;/code&gt; symbol to create numbering. The &lt;code&gt;$&lt;/code&gt; symbol can be used with the &lt;code&gt;*&lt;/code&gt; symbol to multiply the number of occurrences.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;header&amp;gt;ul&amp;gt;li.item&lt;span class="nv"&gt;$*&lt;/span&gt;3
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;produces,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#8-text" class="anchor"&gt;
  &lt;/a&gt;
  8. Text
&lt;/h1&gt;

&lt;p&gt;We use the flower braces(&lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt;) to create elements with the text within them. Let's create a &lt;code&gt;span&lt;/code&gt; element with some text within it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;span&lt;span class="o"&gt;{&lt;/span&gt;I am a span&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;produces,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;I am a span&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Ok, how to create all the HTML heading tags(H1...H6) with the text identifying them? Here is the short-hand for it,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;h&lt;span class="nv"&gt;$*&lt;/span&gt;6&lt;span class="o"&gt;{&lt;/span&gt;I&lt;span class="s1"&gt;'m a Heading $}*6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;produces,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;I'm a Heading 1&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;I'm a Heading 2&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;I'm a Heading 3&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;I'm a Heading 4&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h5&amp;gt;&lt;/span&gt;I'm a Heading 5&lt;span class="nt"&gt;&amp;lt;/h5&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h6&amp;gt;&lt;/span&gt;I'm a Heading 6&lt;span class="nt"&gt;&amp;lt;/h6&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#9-climb-up" class="anchor"&gt;
  &lt;/a&gt;
  9. Climb up
&lt;/h1&gt;

&lt;p&gt;You may feel a need to climb back to the HTML tree when you are too deep nested down. You can use the &lt;code&gt;^&lt;/code&gt; symbol to climb up a step in the hierarchy. You can use the symbol multiple times to climb up multiple steps. Let's understand with examples.&lt;/p&gt;

&lt;p&gt;Here we are adding a &lt;code&gt;div&lt;/code&gt; tag by climbing up once.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;div&amp;gt;div&amp;gt;h3+span^div&lt;span class="o"&gt;{&lt;/span&gt;I can climb up&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;produces,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;I can climb up&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Notice the placement of the &lt;code&gt;div&lt;/code&gt; tag when we climb twice!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;div&amp;gt;div&amp;gt;h3+span^^div&lt;span class="o"&gt;{&lt;/span&gt;I can climb up&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;produces,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;I can climb up&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#10-css" class="anchor"&gt;
  &lt;/a&gt;
  10. CSS
&lt;/h1&gt;

&lt;p&gt;We have an ocean of opportunities here. You can use the short-hands in the CSS file to generate the CSS properties. Here are a few I use very often,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jZofv-8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612180857501/6-hnLCxuk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jZofv-8U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1612180857501/6-hnLCxuk.png" alt="css.png"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#where-to-go-from-here" class="anchor"&gt;
  &lt;/a&gt;
  Where to go from here
&lt;/h1&gt;

&lt;p&gt;I hope you find the article useful. If you are already using the emmet short-cuts, feel free to comment about your favorite ones. Don't forget to checkout &lt;a href="https://docs.emmet.io/cheat-sheet/"&gt;Emmet Cheat Sheet&lt;/a&gt; to learn more usages.&lt;/p&gt;

&lt;p&gt;Before we end, feel free to connect with me on &lt;a href="https://twitter.com/tapasadhikary"&gt;Twitter(@tapasadhikary)&lt;/a&gt;. You may also like,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.greenroots.info/10-useful-html5-features-you-may-not-be-using-ckdua7ql300l1m3s1ez7teshc"&gt;10 useful HTML5 features, you may not be using&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.greenroots.info/10-lesser-known-web-apis-you-may-want-to-use-ckejv75cr012y70s158n85yhn"&gt;10 lesser-known Web APIs you may want to use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.greenroots.info/16-side-project-github-repositories-you-may-find-useful-ckk50hic406quhls1dui2d6sd"&gt;16 side project GitHub repositories you may find useful&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>html</category>
      <category>productivity</category>
      <category>javascript</category>
      <category>vscode</category>
    </item>
    <item>
      <title>25 Ways I Stay Motivated &amp; Productive</title>
      <author>Gedalya Krycer</author>
      <pubDate>Mon, 08 Feb 2021 14:02:18 +0000</pubDate>
      <link>https://dev.to/gedalyakrycer/25-ways-i-stay-motivated-productive-2fbm</link>
      <guid>https://dev.to/gedalyakrycer/25-ways-i-stay-motivated-productive-2fbm</guid>
      <description>&lt;h4&gt;
  &lt;a href="#tldr" class="anchor"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h4&gt;

&lt;p&gt;This is a collection of habits and perspectives that I use to stay motivated and productive. &lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents" class="anchor"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#intro"&gt;ℹ️ First An Introduction&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#habitstips" class="anchor"&gt;
  &lt;/a&gt;
  Habits/Tips
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;👔 &lt;a href="#dressed"&gt;Working Remote? Get Dressed.&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🌅 &lt;a href="#workEarly"&gt;Work Early&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;💺 &lt;a href="#workspace"&gt;Create A Separate Workspace&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🤔 &lt;a href="#defineWhy"&gt;Definine The "Why" Behind The "Why"&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🧐 &lt;a href="#paintWhy"&gt;Paint The "Why"&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🎯 &lt;a href="#goals"&gt;Set The Goal —&amp;gt; Lock It In&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;↗️ &lt;a href="#trio"&gt;Level-Up Trio&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🚏 &lt;a href="#trelloRoad"&gt;Trello Roadmap&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;✔️ &lt;a href="#truth"&gt;Source Of Truth List&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📅 &lt;a href="#schedule"&gt;Schedule Tasks&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;👋 &lt;a href="#acount"&gt;Form Weekly Accountability Group(s)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🎓 &lt;a href="#mentor"&gt;Find a Mentor(s)&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🟢 &lt;a href="#start"&gt;No Matter What, Start&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;💬 &lt;a href="#demo"&gt;Attend Demo Days&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;😴 &lt;a href="#sleep"&gt;Go To Sleep!&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;💪 &lt;a href="#clean"&gt;Eat Clean &amp;amp; Workout&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🙏 &lt;a href="#grace"&gt;Have Grace&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📜 &lt;a href="#studyGuide"&gt;Bad Interviews Are A Study Guide&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🖥️ &lt;a href="#topicDesktops"&gt;Use Topic Specific Desktops&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📖 &lt;a href="#sumeriseTutorials"&gt;Summerise Tutorials&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;☁️ &lt;a href="#cloudNotes"&gt;Always Have Cloud Based Notes Ready&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🍽️ &lt;a href="#dishes"&gt;Do The Dishes&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🍿 &lt;a href="#movies"&gt;Watch Movies&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;😍 &lt;a href="#encouragment"&gt;Screenshot Encouragment&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;✍️ &lt;a href="#write"&gt;Write&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#first-an-introduction" class="anchor"&gt;
  &lt;/a&gt;
  First An Introduction ℹ️
&lt;/h1&gt;

&lt;h4&gt;
  &lt;a href="#productivity-and-motivation" class="anchor"&gt;
  &lt;/a&gt;
  Productivity and Motivation.
&lt;/h4&gt;

&lt;p&gt;These are two things that I both strive for and struggle with constantly. In this post, I have put together 25 helpful habits/tips that I have found success with over the years. &lt;/p&gt;

&lt;p&gt;Some of these tips might be new to you and others you probably heard 1,000 times. However, I find it is often the common sense stuff that I quickly forget to do and makes a big impact.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#let-me-be-transparent" class="anchor"&gt;
  &lt;/a&gt;
  Let Me Be Transparent.
&lt;/h4&gt;

&lt;p&gt;While I am a very dedicated and hard-working person, I am by no means a "productivity machine and supreme motivation guru". I admit to having many moments of wanting to quit when things get boring and often feel intimidated by new challenges. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#not-all-motivation-is-equal" class="anchor"&gt;
  &lt;/a&gt;
  Not All Motivation Is Equal.
&lt;/h4&gt;

&lt;p&gt;To be honest, a lot of the tips/habits on this list were initially shaped by feeling out of my depth and impostor syndrome. &lt;/p&gt;

&lt;p&gt;I developed them because I was insecure at school amongst "real artists" and later on "real developers". Or felt woefully underqualified while working remotely for a fast-paced design agency 2,500 miles away.&lt;/p&gt;

&lt;p&gt;In those times my motivation to do well was out of fear of failure instead of excitement to get better. I got really good results, but I beat myself up along the way.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#this-marks-a-change" class="anchor"&gt;
  &lt;/a&gt;
  This Marks A Change.
&lt;/h4&gt;

&lt;p&gt;Last year I decided to make a lot of changes and pursue what I really found fulfilling. (A career in development.) &lt;/p&gt;

&lt;p&gt;Instead of trying to just keep my head above water, I have been motivated by curiosity and excited to master a new craft.&lt;/p&gt;

&lt;p&gt;There is joy behind this sort of motivation and productivity, It is so much healthier and often yields better results. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#so-lets-get-into-it" class="anchor"&gt;
  &lt;/a&gt;
  So let's get into it.
&lt;/h4&gt;

&lt;p&gt;Below are 25 habits that have helped and continue to help me stay on top of my education, work, and mental health. I hope some are helpful to you and I would love to hear how you stay motivated or productive as well. &lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-working-remote-get-dressed" class="anchor"&gt;
  &lt;/a&gt;
  1. Working Remote? Get Dressed. 👔
&lt;/h2&gt;

&lt;p&gt;I am a huge believer that intentionality sets a mental tone. &lt;/p&gt;

&lt;p&gt;My first full-time job out of college was for a design agency in New York, while I was based in Las Vegas. &lt;/p&gt;

&lt;p&gt;Sure my Zoom background was of my 1 bedroom apartment, but the people I was working with and talking to were in a design studio or conference rooms.&lt;/p&gt;

&lt;p&gt;Getting up 1.5-2 hours before work, taking a shower, and getting fully dressed set a tone. It was all for the purpose of being presentable at work and doing a good job there. The mental shift helped me drown out any distractions, because "I had gotten ready and was at work".  &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-work-early" class="anchor"&gt;
  &lt;/a&gt;
  2. Work Early 🌅
&lt;/h2&gt;

&lt;p&gt;A lot of people I have read about or seen on YouTube say that going to bed and waking up earlier leads to productivity. Part of this reason is that if you go to bed at 8:30 pm - 9 pm you will skip the time your just watching movies or gaming. So you are using your awake time to be more productive. &lt;/p&gt;

&lt;p&gt;For me personally, during college, I found I got my best work done at night because everyone was asleep. However, at the job mentioned above, they were 3 hours ahead of me. So I had to work from 6 am – 3 pm.&lt;/p&gt;

&lt;p&gt;It was a challenge at first, but I have now come to really enjoy it. Like at 12 pm, the world is really quiet at 4 am. I love the feeling of working out, showering, and eating before 6 am. The rest of the day feels endless and like I can accomplish anything. &lt;/p&gt;

&lt;p&gt;If you want to try it, schedule something for 30min before you normally get up. Having something tangible to do at wake up time, can help motivate you to get up earlier. Every few days move the time back until you have hit your optimal wake-up time.&lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-create-a-separate-workspace" class="anchor"&gt;
  &lt;/a&gt;
  3. Create A Separate Workspace 💺
&lt;/h2&gt;

&lt;p&gt;Working from home can make it a real challenge to disconnect. I would often work for 3+ hours more, just because I was already at my computer when an issue popped up. &lt;/p&gt;

&lt;p&gt;In my first apartment, my "Workspace" was in the living room, which was also partly the kitchen. The only time I didn't physically see the computer was in my bedroom or bathroom. It can mentally takes a toll, because I was always seeing "work".&lt;/p&gt;

&lt;p&gt;A big thing my wife and I looked for when moving was for an extra bedroom to be an office space. The ability to literally close the door on work at the end of the day has been a game-changer. I didn't fully realize its impact until making that change too.  &lt;/p&gt;

&lt;p&gt;It is very easy to get burnt out by not having a physical separation between work and personal life. &lt;/p&gt;

&lt;p&gt;In the same vein, I typically do my personal projects in a different room than my freelance work. Again, I am a big fan of intentionality. By creating in a different space to work on personal growth and creative projects, I feel ready to get to it the second I walk to that spot. &lt;/p&gt;

&lt;p&gt;(Don't laugh, but for a long time, my "homework/creative/blogging space" was the carpeted area in our bedroom closet. It was quiet, cozy and a safe place to explore new code.)&lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-definine-the-why-behind-the-why" class="anchor"&gt;
  &lt;/a&gt;
  4. Definine The "Why" Behind The "Why" 🤔
&lt;/h2&gt;

&lt;p&gt;In late 2019, early 2020 I made the goal to go back to school and change careers to development. It was a great goal. It was also a huge financial, time, and mental undertaking. &lt;/p&gt;

&lt;p&gt;As with anything that requires some level of sacrifice and discomfort I found it helpful to identify the "Why" behind it.&lt;/p&gt;

&lt;p&gt;But not just the first "Why", but rather the "Root Cause" behind it as well.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example:
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Why do I want to go into web development?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I want to build websites from the ground up.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why do I want to build websites from the ground up?&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;As a designer who also accounts manages, I often feel ignorant in client meetings when technical/code questions come up. Learning how to code will help me feel capable.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Root Cause Why:&lt;/strong&gt; &lt;em&gt;I want to become a developer to feel empowered and capable as a web creator.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-paint-the-why" class="anchor"&gt;
  &lt;/a&gt;
  5. Paint The "Why" 🧐
&lt;/h2&gt;

&lt;p&gt;Having a powerful and emotionally resonant "why", is a huge motivator in the beginning. Over time, however, this can feel too broad, compared to the sacrifices being made. "Is this all really worth it?" kept creeping in when things got difficult.&lt;/p&gt;

&lt;p&gt;This is why painting a clear and expansive picture of the benefits of the "why" is important. &lt;/p&gt;

&lt;p&gt;One of my other "Why's" for changing careers was for more earning power. Root Cause "Why": To buy a house in a specific timeline and be able to own it outright in a specific timeline. &lt;/p&gt;

&lt;p&gt;Every few months my wife and I painted in that picture a bit more... &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What sort of house and where? &lt;/li&gt;
&lt;li&gt;What experiences would we have in the rooms?&lt;/li&gt;
&lt;li&gt;Who might be our realtor? &lt;/li&gt;
&lt;li&gt;If it has a garage maybe we could pick up new hobbies like cycling.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Continually filling in the details helps me keep motivated to learn one more thing or get up a bit earlier when I am tired.  &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-set-the-goal-gt-lock-it-in" class="anchor"&gt;
  &lt;/a&gt;
  6. Set The Goal —&amp;gt; Lock It In 🎯
&lt;/h2&gt;

&lt;p&gt;Once I figured out what I want to do and why it was important to do, the question becomes how to go about accomplishing it. &lt;/p&gt;

&lt;p&gt;In the example of changing careers, there were several things that needed to happen first. In other words, I needed to set some goals. &lt;/p&gt;

&lt;p&gt;Now it easy to set a goal within the moment, but I often find it hard to follow through when life gets in the way. I actually tried to get into development back in 2017 but lacked the follow-through to make a meaningful change.&lt;/p&gt;

&lt;p&gt;So I have since learned to adopt a "Lock It In" mentality. The Bootcamp was not cheap, but we decided to pay for it upfront in cash, from our savings. This way there was a monetary loss if I quit. &lt;/p&gt;

&lt;p&gt;I also told as many people as I could (including the admissions office) about why I am choosing this goal and where I could see myself potentially failing in it. Calling out the reasons why I might quit ahead of time, helped prevent them from becoming options in the future.&lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-levelup-trio" class="anchor"&gt;
  &lt;/a&gt;
  7. Level-Up Trio ↗️
&lt;/h2&gt;

&lt;p&gt;I am a multi-approach type of learner. Through trial and error, I found that developing in 3 core areas helps me retain information and grow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Courses&lt;/strong&gt;&lt;br&gt;
This is where I got the technical knowledge and also discover new ways of thinking. I love video instruction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Projects&lt;/strong&gt;&lt;br&gt;
Building things allow me to apply the technical knowledge and feel empowered by seeing it work. (Huge motivation boost.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Writing&lt;/strong&gt;&lt;br&gt;
This is so important to further engrain the concepts from the courses and discoveries in the projects.&lt;/p&gt;

&lt;p&gt;I try to at all times have one in each category active. A highly productive day to me is doing a course in the morning, spending a few hours coding, and splitting up the time by writing. (Like I am doing right now. 😉)&lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-trello-roadmap" class="anchor"&gt;
  &lt;/a&gt;
  8. Trello Roadmap 🚏
&lt;/h2&gt;

&lt;p&gt;With many goals, big and small, I find it really helpful to create a roadmap in &lt;a href="https://trello.com/"&gt;Trello&lt;/a&gt;. I like to follow a Kataban workflow, where tasks start from a "todo", move to "doing" and then archive in a "done" list. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jhBZ_S-V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/39mf5141c8pkzt53sm36.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jhBZ_S-V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/39mf5141c8pkzt53sm36.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the above set-up, there are three "ToDo" lists. One for each of my "Level-Up Trio" areas that we talked about above. It allows me to quickly capture ideas and flesh them out later.&lt;/p&gt;

&lt;p&gt;Under "doing" I do try to have one of each topic area in progress as previously mentioned, but this is a flexible rule. For example, I am currently taking two courses in React to prepare for an upcoming job. So I'm ok with not doing a project during this time.&lt;/p&gt;

&lt;p&gt;After "doing" there is a "Blog Batching" list, which holds articles I have written already and are ready for scheduling. That way if there is a really busy week, I have a post already lined up for that Monday. &lt;/p&gt;

&lt;p&gt;Lastly, everything I completed is stored under "Done", with the date it was finished on. &lt;/p&gt;

&lt;p&gt;This set-up lets me track my overall progress and keep a balanced approach to my coding journey. &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-source-of-truth-list" class="anchor"&gt;
  &lt;/a&gt;
  9. Source Of Truth List ✔️
&lt;/h2&gt;

&lt;p&gt;On the topic of Trello, I also suggest using it to be a "Single Source Of Truth" solution.&lt;/p&gt;

&lt;p&gt;I learned the need for this during my last role as a Digital Design Director. It required managing the workload for a global team in different timezones, multiple client accounts, and my own project load. &lt;/p&gt;

&lt;p&gt;This meant a lot of communications over email, Slack, text message, other Trello boards, Basecamp, Zoom calls... &lt;/p&gt;

&lt;p&gt;It was a mess. I felt overwhelmed by the sheer amount of notification coming across the screen. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt; &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Decide if the incoming notification was urgent. &lt;/li&gt;
&lt;li&gt;If it was, then it became the new priority. &lt;/li&gt;
&lt;li&gt;If it wasn't then I'd capture it as a &lt;em&gt;simple&lt;/em&gt; card on Trello, indicating the nature of the alert and where it was sent from.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If an email came in I would create a card that says "Check XYZ email". &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a Slack channel started revving up, a card called "Respond to Slack channel Accounting before 3 pm" went on the list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a team member had a non-urgent project question, I posted a card called "Schedule project review with XYZ". &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This way I only had to check one place for my next steps and didn't have to worry if I had left something urgent waiting. &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-schedule-tasks" class="anchor"&gt;
  &lt;/a&gt;
  10. Schedule Tasks 📅
&lt;/h2&gt;

&lt;p&gt;I found it very beneficial to schedule tasks in my calendar or &lt;a href="https://todoist.com/"&gt;ToDoist app&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;This was especially important when I transitioned from full-time work to freelancing. Without structure and deadlines, I began to lose motivation to get things done. &lt;/p&gt;

&lt;p&gt;When I see there is a 1-hour block available for a course and then 3 hours following that of client work, I am more inclined to make the most out of that hour. &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-form-weekly-accountability-groups" class="anchor"&gt;
  &lt;/a&gt;
  11. Form Weekly Accountability Group(s) 👋
&lt;/h2&gt;

&lt;p&gt;Developers and Designers can both fall into isolation easily. (All we often need is some good music and a fast internet connection to be good for the next 10 hours.)&lt;/p&gt;

&lt;p&gt;This is especially true during pandemic times, where many people are now remote. For me, isolation can breed self-doubt and/or make me lose perspective on why it is important to keep pushing towards the goal. &lt;/p&gt;

&lt;p&gt;Developing strong accountability groups of people with the same or similar goals can really help with this. Texting often and meeting over Zoom regularly has been a powerful way to stay on track. &lt;/p&gt;

&lt;p&gt;I currently have two different accountability Zoom meetings a week, both of which help motivate me in different areas.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The first one is with my coding buddies from Bootcamp. We check-in on our current dev projects and courses. If a technical roadblock appears we help each other solve it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The second is with a buddy who is developing his own business. While our industries are different, we encourage each other on the broader subjects. Things like: freelance, job searching, goal setting, and content creating. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#12-find-a-mentors" class="anchor"&gt;
  &lt;/a&gt;
  12. Find a Mentor(s) 🎓
&lt;/h2&gt;

&lt;p&gt;Accountability groups are often made up of peers that are at a similar place as you. A mentor however is usually a few or many steps ahead. While they can provide encouragement, they are pivotal in providing direction and are a mile-marker to strive for.&lt;/p&gt;

&lt;p&gt;I am lucky enough to have several mentors in both development and life that help me stay, or sometimes adjust the course. &lt;/p&gt;

&lt;p&gt;My development mentors have been guides in suggesting what technologies I should learn next and stack to use in projects. When a bug comes up that I've spent hours on, they may help point me in the right direction to solve it. &lt;/p&gt;

&lt;p&gt;My life mentors have helped me form the "Why" behind the big goals and suggest important questions I need to ask when I am making key decisions.  &lt;/p&gt;

&lt;p&gt;As you can see above, a good mentor doesn't give me the answer outright. They help me solve it on my own. &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#13-no-matter-what-start" class="anchor"&gt;
  &lt;/a&gt;
  13. No Matter What, Start 🟢
&lt;/h2&gt;

&lt;p&gt;I hate to admit it, but my first response when facing a project is often "I can't do this". I'm scared of the unknown failures I might fall too. I'm overwhelmed by both the details available and the details I need to still discover to be successful...&lt;/p&gt;

&lt;p&gt;So what do I often feel like doing? Procrastinate.  &lt;/p&gt;

&lt;p&gt;Here is the thing. Whether I am scared, overwhelmed, or anxious — the thing I need to accomplish won't just go away. The longer I wait, the only thing progressing is my fear. That is it. &lt;/p&gt;

&lt;p&gt;So I have since learned to start anyways. I don't need to know all the details. I just need to pick one thing in the project and start. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In the past that has looked like...&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Opening YouTube and searching for any tutorial.&lt;/li&gt;
&lt;li&gt;Reading the creative brief one page at a time. &lt;/li&gt;
&lt;li&gt;Reaching out to a team member to start a brainstorm.&lt;/li&gt;
&lt;li&gt;Reaching out to technical support for help. &lt;/li&gt;
&lt;li&gt;Opening up VS Code, Figma, Photoshop to pseudo-code/-design the very basics. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Usually, once I do one small thing to start, the second step presents itself and then the third. &lt;/p&gt;

&lt;p&gt;The last thing is that of all the scary, overwhelming and stressful projects that I have tried to avoid — I have never once failed them in the end. &lt;/p&gt;

&lt;p&gt;Looking back the only thing holding the project back was my fear, not a lack of intelligence or experience. Each project has always ended in success, once I took that hard, yet vital first small step. &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#14-attend-demo-days" class="anchor"&gt;
  &lt;/a&gt;
  14. Attend Demo Days 💬
&lt;/h2&gt;

&lt;p&gt;A great way to get out of imposter syndrome and to gain inspiration is to attend a demo day. (Shout out to &lt;a href="https://www.meetup.com/Las-Vegas-Developers/"&gt;Las Vegas Developers Group&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;These online (and someday in-person) meetups allow you to present without any judgment what you have been working on to other developers.&lt;/p&gt;

&lt;p&gt;I found it to be almost like an interview, without any of the pressure. It is fantastic practice and can bring really nice encouragement from the participants. &lt;/p&gt;

&lt;p&gt;The other thing it does is expose you to what other people are working on. I love seeing someone present their Twitch clone, and then someone else previews a complex database integration. &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#15-go-to-sleep" class="anchor"&gt;
  &lt;/a&gt;
  15. Go To Sleep! 😴
&lt;/h2&gt;

&lt;p&gt;Sleep makes everything better. No, seriously. Going to bed gives our body and mind a chance to process and recover. &lt;/p&gt;

&lt;p&gt;I have (and sometimes still do) pull multiple late nights and all-nighters to get some code or design done. It feels really productive at that moment. I even feel like a "real developer"! &lt;/p&gt;

&lt;p&gt;However, it always comes with a trade-off. For days afterward my body is depleted. My focus is off from not getting enough rest and I can't be as productive or positive. Plus, often times my solutions from the night before don't hold up because I was fatigued. &lt;/p&gt;

&lt;p&gt;Something I am trying to work on now is separating good work from hard work. One doesn't always mean the other and often the best results come when there is balance. &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#16-eat-clean-amp-workout" class="anchor"&gt;
  &lt;/a&gt;
  16. Eat Clean &amp;amp; Workout 💪
&lt;/h2&gt;

&lt;p&gt;I love snacking, coding, and listing to &lt;a href="https://open.spotify.com/playlist/7aLNKf2lzZaKPLPi3o7mRS?si=QZ5gmEjEQ62BP6tIzJuahQ"&gt;Tycho&lt;/a&gt;. That said this practice is working against my ability to grow as a developer. &lt;/p&gt;

&lt;p&gt;It is crazy how much I can eat and how long I can sit when engrossed in a new feature or bug. Just like with a lack of sleep, not moving regularly, and eating junk food depletes my energy. &lt;/p&gt;

&lt;p&gt;I found that working out and refraining from sugar, wheat, cheese, and processed food helps my mood and thinking capabilities. &lt;/p&gt;

&lt;p&gt;A silver lining during the pandemic, is my wife is now also working from home. This means I have a consistent workout partner and accountability partner for my diet. &lt;/p&gt;

&lt;p&gt;We use lunch breaks to do HITT workouts and eat a lot of veggies and fish now. I still like snacks, but I love the clarity and energy to tackle code more.  &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#17-have-grace" class="anchor"&gt;
  &lt;/a&gt;
  17. Have Grace 🙏
&lt;/h2&gt;

&lt;p&gt;This is an important one. I am very hard on myself. My biggest critic of suggested ideas, final results, and level of work ethic is me. &lt;/p&gt;

&lt;p&gt;When I make a mistake it is often "confirmation" of what I have known all along. When I have a success, it gets written off as a fluke. &lt;/p&gt;

&lt;p&gt;This mindset is not helpful for motivation or productivity. It also isn't a fair and balanced analysis of myself. &lt;/p&gt;

&lt;p&gt;Having grace when I don't do well is so important because...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It gives me permission to try again &lt;/li&gt;
&lt;li&gt;It allows me to set realistic expectations for my goals&lt;/li&gt;
&lt;li&gt;It lets me be free of self-judgment and therefore more creative  when generating ideas&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are also hard on yourself, have grace. I guarantee that you are so much more capable, hard-working, and successful than you think you are.&lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#18-bad-interviews-are-a-study-guide" class="anchor"&gt;
  &lt;/a&gt;
  18. Bad Interviews Are A Study Guide 📜
&lt;/h2&gt;

&lt;p&gt;Let's face it, many people don't enjoy technical interviews and I am no exception. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some of my worries...&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Will I know enough?&lt;/li&gt;
&lt;li&gt;If I make a mistake, will I be judged? &lt;/li&gt;
&lt;li&gt;Will a simple question come-up that I just freeze on because of nerves? &lt;/li&gt;
&lt;li&gt;Will a complex question come-up that I answer confidently, to only find it their question and my answer were about different tech stacks? &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If some or all of the above happens, it is ok. After interviews (or client meetings) that go bad, I like to research everything that didn't make sense. &lt;/p&gt;

&lt;p&gt;I end up learning so much because my search is targeted directly because of my weak areas. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/gedalyakrycer/30-web-developer-interview-questions-with-answers-3n3c"&gt;In fact, I ended writing a whole post on questions that tripped me up in interviews.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#19-use-topic-specific-desktops" class="anchor"&gt;
  &lt;/a&gt;
  19. Use Topic Specific Desktops 🖥️
&lt;/h2&gt;

&lt;p&gt;Having an optimal workspace set up can really help with productivity. If you are constantly searching for the right program or tab, you can feel overwhelmed. &lt;/p&gt;

&lt;p&gt;However, with an intentional setup that divides your screens up by topic — you will know where to find the right thing at all times. &lt;/p&gt;

&lt;p&gt;My current setup is an iMac 27" in the middle, an HP 24" monitor on the left, and an Asus 24" monitor on the right. &lt;/p&gt;

&lt;p&gt;This allows me to handle production (design or code) in the middle, with the highest quality and tallest screen. &lt;/p&gt;

&lt;p&gt;The right screen has all of my communication (Slack, Discord, Email, etc). &lt;/p&gt;

&lt;p&gt;The left has google search ready in Chrome and Safari, along with my note taker. (See #21 below.)&lt;/p&gt;

&lt;p&gt;I find this setup especially helpful during screen-sharing because I can take notes on the left while on the right communicate with a team member also on the call. &lt;/p&gt;

&lt;p&gt;Don't have multiple monitors? No worries, the same thing can be accomplished with Mac OS desktops. You can create as many as you like and swipe between them as needed. &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#20-summerise-tutorials" class="anchor"&gt;
  &lt;/a&gt;
  20. Summerise Tutorials 📖
&lt;/h2&gt;

&lt;p&gt;You have probably heard about "Tutorial Hell" and how courses aren't that helpful if you can't remember what to do afterward.&lt;/p&gt;

&lt;p&gt;I find it really helpful to write detailed summaries of concepts from the tutorials. The act of explaining in written form the coding concept, its properties, and how it works as an explanation — ingrains it in my mind. &lt;/p&gt;

&lt;p&gt;It also has the added benefit that those notes can later become content for my blog articles. :) &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#21-always-have-cloud-based-notes-ready" class="anchor"&gt;
  &lt;/a&gt;
  21. Always Have Cloud Based Notes Ready ☁️
&lt;/h2&gt;

&lt;p&gt;I love &lt;a href="https://evernote.com/"&gt;Evernote&lt;/a&gt;. It is one of many cloud base services that lets you take notes, capture code, and even write documentation from any device. (&lt;a href="https://www.notion.so/"&gt;Notion&lt;/a&gt; is another great one.)&lt;/p&gt;

&lt;p&gt;This is a tremendous help to productivity because at a moment's notice you can jot down and pull up key information.&lt;/p&gt;

&lt;p&gt;It is much easier to clean up rough notes from a meeting, then sit there afterward and try to remember what the next steps were. &lt;/p&gt;

&lt;p&gt;I used to do this with Word Docs, but as soon as I changed computers or only had access to my phone — all the notes were no longer available. &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#22-do-the-dishes" class="anchor"&gt;
  &lt;/a&gt;
  22. Do The Dishes 🍽️
&lt;/h2&gt;

&lt;p&gt;It often feels counter-intuitive, but taking chore breaks can help me be productive. &lt;/p&gt;

&lt;p&gt;I found that when I take 10min to do the dishes or fold laundry, my mind is allowed to wander during the mundane and repetitive actions. This actually helps me come up with solutions that I would not have gotten when I actively trying to look for them.&lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#23-watch-movies" class="anchor"&gt;
  &lt;/a&gt;
  23. Watch Movies 🍿
&lt;/h2&gt;

&lt;p&gt;Like the dishes above and sleeping, taking a break can help my mind reset, breathe and process whatever I am working on.&lt;/p&gt;

&lt;p&gt;However, it is important to also do something enjoyable and truly relaxing during some of these breaks. I love movies and it is usually the thing that gets me completely detached. &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#24-screenshot-encouragment" class="anchor"&gt;
  &lt;/a&gt;
  24. Screenshot Encouragment 😍
&lt;/h2&gt;

&lt;p&gt;As mentioned in &lt;code&gt;#17&lt;/code&gt;, I can be pretty hard on myself. Something that helps during those moments, is to refer back to times where I have done a good job. It is proof to my insecure side that I have what it takes and can do _____.&lt;/p&gt;

&lt;p&gt;To help with this, I have created a folder of screenshots of times my bosses gave positive feedback, clients expressed thanks and co-workers gave me encouragement.&lt;/p&gt;

&lt;p&gt;This folder is that little reminder that it was all be ok and if I try hard in this situation, I will most likely succeed again. &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#25-write-consistently" class="anchor"&gt;
  &lt;/a&gt;
  25. Write Consistently ✍️
&lt;/h2&gt;

&lt;p&gt;Throughout this post, I have mentioned writing. It is a great way to help engrain information and ensure that tutorials and notes are captured. &lt;/p&gt;

&lt;p&gt;It is also a powerful way to stay on task throughout your goals. I keep a daily journal to catalog where I am at, what I am struggling with, or if there was a win in the day. &lt;/p&gt;

&lt;p&gt;Looking back, I remember having entries during Bootcamp of thinking I won't make it because Javascript is way too hard. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"I am a designer, my mind doesn't work in the way Javascript requires. I am not sure how this week's homework or the rest of the Bootcamp will go." &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then just a few months later... &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"I am almost done launching my React portfolio with a filtering system! I feel so happy to be able think of something, design it and now code it into life."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Writing doesn't have to be pretty or long or short for that matter. Journalling and keeping an account of the progress just helps to process where we are at. Then a little bit later, surprise ourselves with how far we have come. &lt;/p&gt;

&lt;p&gt;It can be a huge motivator for sure! &lt;/p&gt;

&lt;p&gt;&lt;a href="#top"&gt;Back To Top&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;Thank you for making it all the way down here. &lt;/p&gt;

&lt;p&gt;I still have a long way to go and a lot to learn, but I am so happy and grateful about where I am at right now. It has come from just sticking with it and incrementally trying each day.&lt;/p&gt;

&lt;p&gt;Hopefully, something on this list can help you. I'd love to hear about it if it did and other ways you stay motivated and productive.  Happy Coding! 🤓&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Thumbnail designed with &lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>career</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Awesamosa: Awesome Resources for developers #01</title>
      <author>Xenox Dev</author>
      <pubDate>Mon, 08 Feb 2021 12:57:00 +0000</pubDate>
      <link>https://dev.to/xenoxdev/awesamosa-awesome-resources-for-developers-01-3pdj</link>
      <guid>https://dev.to/xenoxdev/awesamosa-awesome-resources-for-developers-01-3pdj</guid>
      <description>&lt;p&gt;Recently, Our team captain &lt;a href="https://dev.to/sarthology"&gt;@sarthology&lt;/a&gt; published an article on &lt;a href="https://dev.to/xenoxdev/why-and-how-you-can-develop-design-sense-57m9"&gt;why and how you can develop design sense?&lt;/a&gt;. That is a great article and does capture the gist of getting the design sense deeply. However, once we develop the design sense comes the question of where to get those brilliant design elements in the first place for your next project. This question gives rise to this series of resources for the front-end developers to get modern design resources to furnish their next project the look and feel they wanted. &lt;/p&gt;

&lt;p&gt;So, from this week, for the next &lt;strong&gt;24 Mondays&lt;/strong&gt;, we at Team Xenox will publish this series of resources, Awesamosa: Awesome Resources for developers. This list will be published in parts on dev.to and will be available as a whole on our &lt;strong&gt;&lt;a href="https://xenox.dev/awsamosa"&gt;🌎 website 🌎&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#so-let-us-begin" class="anchor"&gt;
  &lt;/a&gt;
  So let us begin 🚀
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/dSdYvmLRPbGMphDQ0r/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/dSdYvmLRPbGMphDQ0r/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fonts" class="anchor"&gt;
  &lt;/a&gt;
  📰 Fonts:
&lt;/h3&gt;

&lt;p&gt;Fonts are an essential part of the website's design, particularly when we want users to engage with the content on it. Choosing the right font will exponentially increase the engagement and hence the revenues.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g6wDhw84--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1ohun97oxelfzv7fvksd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g6wDhw84--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/1ohun97oxelfzv7fvksd.png" alt="Use Modify"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are some &lt;strong&gt;'awesome'&lt;/strong&gt; places to get the best-suited font for your site 👇&lt;/p&gt;

&lt;p&gt;📌 &lt;a href="https://fonts.google.com/"&gt;Google Fonts&lt;/a&gt;&lt;br&gt;
📌 &lt;a href="https://www.dafont.com/"&gt;DaFont&lt;/a&gt;&lt;br&gt;
📌 &lt;a href="https://usemodify.com/"&gt;UseModify&lt;/a&gt;&lt;br&gt;
📌 &lt;a href="https://www.1001freefonts.com/"&gt;1001 Free Fonts&lt;/a&gt;&lt;br&gt;
📌 &lt;a href="https://www.fontsquirrel.com/"&gt;Font Squirrel&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#colors" class="anchor"&gt;
  &lt;/a&gt;
  🎨 Colors:
&lt;/h3&gt;

&lt;p&gt;Like Fonts, colors play a major role in the design of the website. There are many theories on, how to select the color palette, and what amount of each should be used.&lt;/p&gt;

&lt;p&gt;Here are some &lt;strong&gt;'awesome'&lt;/strong&gt; places to get the best-suited color-palette for your site 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I6djSgM3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m8vau6dp9nhyj12fbf4g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I6djSgM3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/m8vau6dp9nhyj12fbf4g.png" alt="color mind"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;📌 &lt;a href="https://colorbrewer2.org/"&gt;Color brewer&lt;/a&gt;&lt;br&gt;
📌 &lt;a href="http://colormind.io/"&gt;Color mind&lt;/a&gt;&lt;br&gt;
📌 &lt;a href="https://colorcurves.app/"&gt;Color Curves&lt;/a&gt;&lt;br&gt;
📌 &lt;a href="https://coolors.co/"&gt;Coolors&lt;/a&gt;&lt;br&gt;
📌 &lt;a href="https://www.colorsandfonts.com/"&gt;Colors and Fonts&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stock-photos" class="anchor"&gt;
  &lt;/a&gt;
  🖼️ Stock Photos:
&lt;/h3&gt;

&lt;p&gt;Images are the next important part of website design. No one wants their images with a watermark on them. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X9ZlGIEA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/c4z1k97ukseavwt8tlnb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X9ZlGIEA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/c4z1k97ukseavwt8tlnb.png" alt="Unsplash"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are some &lt;strong&gt;'awesome'&lt;/strong&gt; places to get the best-suited stock photos for your site 👇&lt;/p&gt;

&lt;p&gt;📌 &lt;a href="https://www.pexels.com/"&gt;Pexels&lt;/a&gt;&lt;br&gt;
📌 &lt;a href="https://unsplash.com/"&gt;Unsplash&lt;/a&gt;&lt;br&gt;
📌 &lt;a href="https://pixabay.com/"&gt;Pixabay&lt;/a&gt;&lt;br&gt;
📌 &lt;a href="https://magdeleine.co/"&gt;Maddeleine&lt;/a&gt;&lt;br&gt;
📌 &lt;a href="https://picspree.com/"&gt;Picspree&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ui-graphics" class="anchor"&gt;
  &lt;/a&gt;
  🧙‍♂️ UI Graphics
&lt;/h3&gt;

&lt;p&gt;UI graphics have become a new trend in modern websites, and they really give a personal touch to our websites. With tools like Figma, you can create your graphics too.&lt;/p&gt;

&lt;p&gt;Here are some &lt;strong&gt;'awesome'&lt;/strong&gt; places to get the best-suited graphics for your site 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eafM_n9d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/73ljqxenf7mt8tic3pwe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eafM_n9d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/73ljqxenf7mt8tic3pwe.png" alt="Humaaans"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;📌 &lt;a href="https://100dailyui.webflow.io/"&gt;100 DailyUI&lt;/a&gt;&lt;br&gt;
📌 &lt;a href="https://www.sketchappsources.com/"&gt;Sketch App Sources&lt;/a&gt;&lt;br&gt;
📌 &lt;a href="https://www.humaaans.com/"&gt;Humaans&lt;/a&gt;&lt;br&gt;
📌 &lt;a href="https://products.ls.graphics/paaatterns/"&gt;Graphics Patterns&lt;/a&gt;&lt;br&gt;
📌 &lt;a href="https://undraw.co/"&gt;Undraw&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it for this week folks 🥳🖐️&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/5IT69msgpaOcg/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/5IT69msgpaOcg/giphy.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will see you next Monday with more Awsome Resources. Until then, make sure you follow us on Twitter &lt;a href="https://bit.ly/3cOfh44"&gt;@XenoxDev&lt;/a&gt; for more content related to web development and web design. In the meantime share this article with friends and family to whom you think this will be useful. Comment below your thoughts or if you have any resources of your own.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#one-more-thing" class="anchor"&gt;
  &lt;/a&gt;
  One More Thing
&lt;/h1&gt;

&lt;p&gt;If you want to get resources daily head to our Telegram Channel. We have a community of 600+ awesome devs sharing resources every day. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-the-writer-in-you" class="anchor"&gt;
  &lt;/a&gt;
  For the writer in you!!
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/hPrt0zRTMAVaugcgPf/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/hPrt0zRTMAVaugcgPf/giphy.gif" alt="Alt"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to write with Xenox. Here is a 👉 &lt;a href="https://forms.clickup.com/f/1rz92-3351/VMFE0Q81LI7E0A92Z0"&gt;link&lt;/a&gt; to become a part of an awesome writer's community and win exciting gifts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.getrevue.co/profile/xenoxdev"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---rwoD-wZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7ztogfeze1yx31dkrus9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bye 👋👋&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>webdev</category>
      <category>design</category>
    </item>
    <item>
      <title>React Tutorial From Scratch: A Step-by-Step Guide (2021 Update)</title>
      <author>Ibas</author>
      <pubDate>Mon, 08 Feb 2021 12:28:36 +0000</pubDate>
      <link>https://dev.to/ibaslogic/react-tutorial-from-scratch-a-step-by-step-guide-2021-update-2dch</link>
      <guid>https://dev.to/ibaslogic/react-tutorial-from-scratch-a-step-by-step-guide-2021-update-2dch</guid>
      <description>&lt;p&gt;You have decided to learn React JS. A great choice indeed! Now, you can start to build a modern website and app that require high performance and safety.&lt;/p&gt;

&lt;p&gt;Many developers and site owners are now embracing web technologies and frameworks built on React. Some of these include the &lt;a href="https://ibaslogic.com/gatsby-tutorial-from-scratch-for-beginners/"&gt;Gatsby site framework&lt;/a&gt; and the &lt;a href="https://wordpress.org/gutenberg/"&gt;WordPress blocks&lt;/a&gt; in the Gutenberg post editor.&lt;/p&gt;

&lt;p&gt;These are just to name a few. What this means is that you cannot escape learning React JS if you want to become a present-day developer.&lt;/p&gt;

&lt;p&gt;Having said that, React has a smaller learning curve compared to other frameworks. Also, you get the opportunity to use the acquired knowledge and dive into the world of native development.&lt;/p&gt;

&lt;p&gt;So once you learn it, you can &lt;a href="https://reactnative.dev/"&gt;jump into React Native&lt;/a&gt; and start building a robust mobile application.&lt;/p&gt;

&lt;p&gt;In this React tutorial for beginners, you will learn all it takes to build a React project. Starting from the fundamentals to building a React application and then deploying on the web.&lt;/p&gt;

&lt;p&gt;This tutorial breaks down every technical procedure you might find anywhere else in a simple and actionable way.&lt;/p&gt;

&lt;p&gt;Once you are well-grounded with React, &lt;a href="https://ibaslogic.com/gatsby-tutorial-from-scratch-for-beginners/"&gt;following a Gatsby site project&lt;/a&gt; or some other once that is built on it will be a piece a cake.&lt;/p&gt;

&lt;p&gt;Prerequisites&lt;/p&gt;

&lt;p&gt;Before you go ahead with this React tutorial, please make sure you have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic understanding of HTML and CSS.&lt;/li&gt;
&lt;li&gt;JavaScript fundamentals (object, array, conditionals etc).&lt;/li&gt;
&lt;li&gt;Familiarity with JavaScript ES6 features (class syntax, arrow functions, object destructuring etc).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are still &lt;a href="https://ibaslogic.com/how-to-learn-javascript-fast/"&gt;finding it tough with JavaScript&lt;/a&gt;, just read and code along. I will be explaining every task as we write our React application.&lt;/p&gt;

&lt;p&gt;At the end of this React js tutorial, you will be able to &lt;a href="https://ibaslogic.github.io/react-todo-project/"&gt;build this to-dos App&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--98DXcPHW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4538osytjp3dlr5x2s3o.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--98DXcPHW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4538osytjp3dlr5x2s3o.gif" alt="Todos app project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It may look simple in the eye but trust me, you will get to understand the concept of React and how it works. You’ll also learn how to create multiple views or "pages" in a Single page application using the React Router. You’ll see the common pitfalls associated with the Router and learn how to overcome it.&lt;/p&gt;

&lt;p&gt;To follow along, you can find all of the code in &lt;a href="https://github.com/Ibaslogic/react-todo-project"&gt;my GitHub repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since we aim to cover this topic to length for beginners. We’ve divided this React tutorial into different parts. &lt;/p&gt;

&lt;p&gt;So let's get started with the first part.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-react" class="anchor"&gt;
  &lt;/a&gt;
  What Is React?
&lt;/h2&gt;

&lt;p&gt;React (sometimes called React.js or ReactJS) is a JavaScript library for building a fast and interactive user interface. It was originated at Facebook in 2011 and allow developers to create sizeable web applications or complex UIs by integrating a small and isolated snippet of code.&lt;/p&gt;

&lt;p&gt;In some quarters, React is often called a framework because of its behaviour and capabilities. But technically, it is a library.&lt;/p&gt;

&lt;p&gt;Unlike some other &lt;a href="https://angularjs.org/"&gt;frameworks like Angular&lt;/a&gt; or &lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt;, you’ll often need to use more libraries with React to form any solution.&lt;/p&gt;

&lt;p&gt;Let’s take a step backwards.&lt;/p&gt;

&lt;p&gt;React allows developers to create complex UI from an isolated snippet of code as mentioned earlier. To understand the statement better, you need to start thinking in React Component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thinking-in-react-component" class="anchor"&gt;
  &lt;/a&gt;
  Thinking in React Component
&lt;/h2&gt;

&lt;p&gt;When building an application with React, you build a bunch of independent, isolated and reusable components. Think of component as a simple function that you can call with some input and they render some output.&lt;/p&gt;

&lt;p&gt;And as you can reuse functions, so also you can reuse components, merge them and thereby creating a complex user interface.&lt;/p&gt;

&lt;p&gt;Let’s take a look at the image below. It is a simple To-dos app.&lt;/p&gt;

&lt;p&gt;As you are aware, we will create this app from scratch in this React tutorial.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OlHgCGHC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l7m9l0zjv9fyxtcfa0q5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OlHgCGHC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l7m9l0zjv9fyxtcfa0q5.png" alt="Todos app design"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To build this type of React app or any complex app (even as complex as Twitter), the very first thing to do is to split and decompose the UI design into a smaller and isolated unit as outlined in the image.&lt;/p&gt;

&lt;p&gt;Where each of these units can be represented as a component which we can build in isolation and then later merge to form a complete UI.&lt;/p&gt;

&lt;p&gt;Still on the image. The parent component (also known as the root component), label &lt;code&gt;TodoContainer&lt;/code&gt;, holds all the other components (known as children components). The &lt;code&gt;Header&lt;/code&gt; component renders the header contents, the &lt;code&gt;InputTodo&lt;/code&gt; component accepts the user’s input, the &lt;code&gt;TodosList&lt;/code&gt; component renders the todos list, the &lt;code&gt;TodoItem&lt;/code&gt; component takes care of each of the todos items and finally, the &lt;code&gt;Navbar&lt;/code&gt; component takes care of the navigation.&lt;/p&gt;

&lt;p&gt;As you can see in the view, and from the breakdown, we will be creating six different components in isolation. Though, later, we will add more component when we start learning Routing in React. There, we will render the single About page.&lt;/p&gt;

&lt;p&gt;Till then, we will be creating components based on what we are viewing at the moment.&lt;/p&gt;

&lt;p&gt;If you want, you can further decompose the &lt;code&gt;TodoItem&lt;/code&gt; into smaller components – one holding the checkbox, another holding the todos task and then one holding the delete button. You may also wish to have lesser components depending on how you are viewing the design. Ideally, a component should take care of one functionality.&lt;/p&gt;

&lt;p&gt;This way, you are putting on the React cap which makes you think the React way.&lt;/p&gt;

&lt;p&gt;Moving on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-concept-of-virtual-dom" class="anchor"&gt;
  &lt;/a&gt;
  The Concept of Virtual DOM
&lt;/h2&gt;

&lt;p&gt;As a JavaScript developer, you are sure to have interacted with the real DOM while building interactive websites. Though, you may have been able to avoid understanding how it works. So, let’s reiterate to enable you to quickly grasp the concept behind virtual DOM that React provides for us.&lt;/p&gt;

&lt;p&gt;The DOM (Document Object Model) is an interface that allows JavaScript or other scripts to read and manipulate the content of a document (in this case, an HTML document).&lt;/p&gt;

&lt;p&gt;Whenever an HTML document is loaded in the browser as a web page, a corresponding Document Object Model is created for that page. This is simply an object-based representation of the HTML.&lt;/p&gt;

&lt;p&gt;This way, JavaScript can connect and dynamically manipulate the DOM because it can read and understand its object-based format. This makes it possible to add, modify contents or perform actions on web pages.&lt;/p&gt;

&lt;p&gt;But hey! There is a problem. Though not with the DOM. Every time the DOM changes, the browser would need to recalculate the CSS, run layout and repaint the web page.&lt;/p&gt;

&lt;p&gt;And with Single Page Application (SPA) whereby JavaScript updates the DOM much more than they have to. Things become slower due to the process in the browser workflow after DOM manipulation.&lt;/p&gt;

&lt;p&gt;So we need a way to minimize the time it takes to repaint the screen. This is where the Virtual DOM comes in.&lt;/p&gt;

&lt;p&gt;As the name implies, it is a virtual representation of the actual DOM. It uses a strategy that updates the DOM without having to redraw all the webpage elements. This ensures that the actual DOM receive only the necessary data to repaint the UI.&lt;/p&gt;

&lt;p&gt;Let's see how it works. Whenever a new element is added to the UI, a virtual DOM is created. Now, if the state of this element changes, React would recreate the virtual DOM for the second time and compare with the previous version to detect which of the virtual DOM object has changed.&lt;/p&gt;

&lt;p&gt;It then updates ONLY the object on the real DOM. This has a whole lot of optimization as it reduces the performance cost of re-rendering the webpage.&lt;/p&gt;

&lt;p&gt;DO not worry if all these seem strange, you will get to see them in practice later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-working-environment" class="anchor"&gt;
  &lt;/a&gt;
  Setting up Working Environment
&lt;/h2&gt;

&lt;p&gt;There are several ways we can interact and get started with React. Though React recommended setting up the environment through the &lt;code&gt;create-react-app&lt;/code&gt; CLI tool (coming to that), I will quickly walk you through how to start working with React by simply writing React code in HTML file.&lt;/p&gt;

&lt;p&gt;This will quickly get you up and running and does not require any installation.&lt;/p&gt;

&lt;p&gt;So let’s do it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-react-directly-in-html" class="anchor"&gt;
  &lt;/a&gt;
  Writing React Directly in HTML
&lt;/h2&gt;

&lt;p&gt;This method of interacting with React is the simplest way and it’s very easy if you have ever worked with HTML, CSS and JavaScript.&lt;/p&gt;

&lt;p&gt;Let’s see how it’s done.&lt;/p&gt;

&lt;p&gt;You’ll have an HTML file where you load three scripts in the head element pointing to their respective CDN – the &lt;code&gt;React&lt;/code&gt;, &lt;code&gt;ReactDOM&lt;/code&gt; and &lt;code&gt;Babel&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, you’ll create an empty &lt;code&gt;div&lt;/code&gt; element and give it an &lt;code&gt;id&lt;/code&gt; of &lt;code&gt;root&lt;/code&gt;. This is where your application will live. Lastly, you’ll create a &lt;code&gt;script&lt;/code&gt; element where you write your React code.&lt;/p&gt;

&lt;p&gt;Your &lt;code&gt;index.html&lt;/code&gt; file should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
 &amp;lt;head&amp;gt;
   &amp;lt;title&amp;gt;React Tutorial&amp;lt;/title&amp;gt;
   &amp;lt;script src="https://unpkg.com/react@16/umd/react.development.js"&amp;gt;&amp;lt;/script&amp;gt;
   &amp;lt;script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"&amp;gt;&amp;lt;/script&amp;gt;
   &amp;lt;script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.26.0/babel.js"&amp;gt;&amp;lt;/script&amp;gt;
 &amp;lt;/head&amp;gt;

 &amp;lt;body&amp;gt;
   &amp;lt;div id="root"&amp;gt;&amp;lt;/div&amp;gt;

   &amp;lt;script type="text/babel"&amp;gt;
     const element = &amp;lt;h1&amp;gt;Hello from React&amp;lt;/h1&amp;gt;;
     console.log(element);
   &amp;lt;/script&amp;gt;
 &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codepen.io/ibaslogic/pen/qBaPqBL?editors=1111"&gt;View on CodePen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The area of focus in the code above is the &lt;code&gt;script&lt;/code&gt; element. The &lt;code&gt;type&lt;/code&gt; attribute in the opening tag is compulsory for using Babel (will explain this in a moment). In the script, we have what looks like HTML.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello from React&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And you might be wondering why we are writing HTML inside of JavaScript. Well, that line is not HTML but JSX.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-jsx" class="anchor"&gt;
  &lt;/a&gt;
  What Is JSX?
&lt;/h2&gt;

&lt;p&gt;Writing JavaScript/React code to describe what the user interface (UI) will look like is not as simple as you may think. This makes the React author create what looks like a JavaScript version of HTML. This is called JSX (JavaScript XML). It is an XML like syntax extension to JavaScript that makes it easier and more intuitive to describe the UI.&lt;/p&gt;

&lt;p&gt;Under the hood, the JSX is being translated to regular JavaScript version of itself at runtime since the browser can’t read it. This is how it works:&lt;/p&gt;

&lt;p&gt;The JSX code is passed to Babel (a JavaScript compiler) which will then convert it to plain JavaScript code that all browser can understand. This compiler also changes any JavaScript ES6 features into what the older browsers would recognize. For instance, it converts the &lt;code&gt;const&lt;/code&gt; keyword to &lt;code&gt;var&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s see a quick demo.&lt;/p&gt;

&lt;p&gt;Head over to &lt;a href="https://babeljs.io/repl"&gt;babel website&lt;/a&gt; and add the JSX code in the Babel editor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m3tRJNmg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8emrvzppaa4952pqt9gc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m3tRJNmg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8emrvzppaa4952pqt9gc.png" alt="Babel repl"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should have something similar to the image above. Now, look at what is on the right side of the Babel editor. The JSX code is converted to plain React code. Here, we can conclude that using JSX to describe what the UI looks like is much easier.&lt;/p&gt;

&lt;p&gt;Also, remember that we loaded React library in the head of our HTML code even though we are not explicitly using it. But under the hood, React is using the &lt;code&gt;React&lt;/code&gt; object from the library as you can see also on the right side of the editor.&lt;/p&gt;

&lt;p&gt;Take note of the following about the JSX&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can use a valid JavaScript expression inside the JSX through curly braces, &lt;code&gt;{}&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In JSX, elements attributes, event handlers are always in camelCase. The few exceptions are &lt;code&gt;aria-*&lt;/code&gt; and &lt;code&gt;data-*&lt;/code&gt; attributes, which are lowercase.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Back to our code on CodePen (or open it in the browser if you are using a text editor). You’ll see that nothing is being displayed in the viewport. But if you open the Console (since we console.log the element in our code), you will see an object representing the JSX. Please take a look.&lt;/p&gt;

&lt;p&gt;The output is a React element which represents a Virtual DOM object. Think of it as a blueprint of the actual DOM object. This makes it very easy for ReactJS to create, manipulate and update.&lt;/p&gt;

&lt;p&gt;Now let’s imagine you have a list of these JSX (i.e Virtual DOM objects) to render on the screen. Then somehow, one or some of the JSX gets updated. React would recreate an entirely new list of objects still in Virtual DOM and compare with the previous version to figure out which of the virtual DOM object has changed. This process is called &lt;strong&gt;&lt;em&gt;diffing&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Then, React reaches out to the real DOM and updates only the changed object.&lt;/p&gt;

&lt;p&gt;Let’s render the React element inside of the real DOM for us to see. Update the &lt;code&gt;script&lt;/code&gt; element so it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text/babel"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  const element = &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello from React&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;; ReactDOM.render(element,
  document.getElementById("root"));
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codepen.io/ibaslogic/pen/KKgXWVp?editors=1010"&gt;View on CodePen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, you should be able to see the content on the screen.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-happening" class="anchor"&gt;
  &lt;/a&gt;
  What is happening?
&lt;/h3&gt;

&lt;p&gt;In the script, we called the &lt;code&gt;render()&lt;/code&gt; method that React exposes through the &lt;code&gt;ReactDOM&lt;/code&gt; object to render a React element into the DOM.&lt;/p&gt;

&lt;p&gt;Remember we included the &lt;code&gt;ReactDOM&lt;/code&gt; library in the &lt;code&gt;head&lt;/code&gt; of the HTML file. Else, the &lt;code&gt;render()&lt;/code&gt; method would not work.&lt;/p&gt;

&lt;p&gt;The first argument of the &lt;code&gt;render()&lt;/code&gt; method defines what you want to render while the second defines where you want to render it. As seen in the code, we are using a plain vanilla JavaScript to reference the &lt;code&gt;div&lt;/code&gt; container inside the &lt;code&gt;body&lt;/code&gt; element.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-createreactapp-cli" class="anchor"&gt;
  &lt;/a&gt;
  Using the Create-React-App CLI
&lt;/h2&gt;

&lt;p&gt;Instead of manually loading scripts in the &lt;code&gt;head&lt;/code&gt; element of your file, you will set up a React environment by installing the &lt;code&gt;create-react-app&lt;/code&gt; CLI tool. This CLI tool will install React as well as other third-party libraries you will need.&lt;/p&gt;

&lt;p&gt;To install and use this CLI, you will need to have &lt;a href="https://nodejs.org/"&gt;Nodejs installed&lt;/a&gt; on your computer to have access to its &lt;a href="https://www.npmjs.com/"&gt;npm (node package manager)&lt;/a&gt; tool.&lt;/p&gt;

&lt;p&gt;You can check if you already have Nodejs and npm installed by running these commands &lt;code&gt;node -v&lt;/code&gt; and &lt;code&gt;npm -v&lt;/code&gt; respectively in your terminal. Make sure the Node version is &lt;strong&gt;8.10&lt;/strong&gt; or higher and the npm version is &lt;strong&gt;5.2&lt;/strong&gt; or higher.&lt;/p&gt;

&lt;p&gt;But if you don’t have it installed, &lt;a href="https://nodejs.org/"&gt;head over to Node.js&lt;/a&gt;, download and install the latest stable version.&lt;/p&gt;

&lt;p&gt;After that, open your terminal and switch to the directory you would like to save your project (for instance, &lt;code&gt;cd Desktop&lt;/code&gt;). Then run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;C:\Users\Your Name&amp;gt; npx create-react-app react-todo-app
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This creates a project folder called &lt;code&gt;react-todo-app&lt;/code&gt; and includes all of the starter files. Now, open the folder with your favourite code editor. In my case, I will be using the VsCode.&lt;br&gt;
Your initial file structure should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-todo-app
    ├── node_modules
    ├── public
    │    ├── favicon.ico
    │    ├── index.html
    │    ├── logo192.png
    │    ├── logo512.png
    │    ├── manifest.json
    │    └── robots.txt
    ├── src
    │    ├── App.css
    │    ├── App.js
    │    ├── App.test.js
    │    ├── index.css
    │    ├── index.js
    │    ├── logo.svg
    │    ├── reportWebVitals.js
    │    └── setupTest.js
    ├── .gitignore
    ├── package.json
    ├── README.md
    └── yarn.lock
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Let’s have a quick look inside the project folder.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;node_modules&lt;/code&gt; folder contains all the third-party libraries as well as React itself. It will also contain packages that you’ll be installing through npm later. The &lt;code&gt;public&lt;/code&gt; folder contains the public asset of your application and it is where your static files reside.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;index.html&lt;/code&gt; in the public folder is similar to the one we created earlier. It also has a &lt;code&gt;div&lt;/code&gt; container element where your entire application will appear.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;src&lt;/code&gt; folder contains the working files. One of them is the &lt;code&gt;index.js&lt;/code&gt; which will serve as the entry point to our application. Don’t worry about all the &lt;code&gt;src&lt;/code&gt; files, we will write everything from scratch.&lt;/p&gt;

&lt;p&gt;Lastly, the &lt;code&gt;package.json&lt;/code&gt; contains information about your app. It has some dependencies of libraries that are currently installed and if you install other packages, they will be listed as well.&lt;/p&gt;

&lt;p&gt;Enough said. Let’s start the development server.&lt;/p&gt;

&lt;p&gt;To do this, we will run one of the scripts that &lt;strong&gt;create-react-app&lt;/strong&gt; CLI provides. If you open the &lt;code&gt;package.json&lt;/code&gt; file in the root and check for the &lt;code&gt;scripts&lt;/code&gt; property, you will see the &lt;code&gt;start&lt;/code&gt; script.&lt;/p&gt;

&lt;p&gt;This allows us to start the development server and build our project locally. It also comes with live-reload so that any changes you make in your app reflect in real-time. You will see this in a moment.&lt;/p&gt;

&lt;p&gt;Back to your computer terminal, change directory inside your project folder, &lt;code&gt;cd react-todo-app&lt;/code&gt;. Then run this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;C:\Users\Your Name\react-todo-app &amp;gt; npm start
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you are using VsCode, you can open its integrated terminal from &lt;strong&gt;View -&amp;gt; Terminal&lt;/strong&gt; (or use the shortcut, &lt;code&gt;Ctrl + `&lt;/code&gt; or &lt;code&gt;Cmd + `&lt;/code&gt; on Windows and Mac respectively) and run &lt;code&gt;npm start&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once the command is done, your app will launch automatically in your browser window on &lt;strong&gt;port 3000&lt;/strong&gt;. If nothing happens, visit &lt;a href="http://localhost:3000/"&gt;localhost:3000&lt;/a&gt; in the browser address bar. You should see your default app.&lt;/p&gt;

&lt;p&gt;That is a good start. Let’s move on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-the-todos-app" class="anchor"&gt;
  &lt;/a&gt;
  Writing the To-dos App
&lt;/h2&gt;

&lt;p&gt;At this point, we can start creating our React App. The files that describe what you are seeing in the frontend live in the &lt;code&gt;src&lt;/code&gt; folder. Since this React tutorial focuses on the beginners, we will write all the &lt;code&gt;src&lt;/code&gt; files from scratch.&lt;/p&gt;

&lt;p&gt;So let’s start by deleting all the files in the &lt;code&gt;src&lt;/code&gt; folder. The frontend breaks immediately you do that. This is because React needs an &lt;code&gt;index.js&lt;/code&gt; file present in the &lt;code&gt;src&lt;/code&gt; folder. This file is the entry point.&lt;/p&gt;

&lt;p&gt;Let’s create the file. In the &lt;code&gt;src&lt;/code&gt; folder, create an &lt;code&gt;index.js&lt;/code&gt; file and add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello from Create React App&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once you save the file, you’ll see a heading text displayed in the frontend.&lt;/p&gt;

&lt;p&gt;Comparing this code to the one we write directly in the HTML file at the beginning. You'll see that we didn’t do anything special except that we are importing &lt;code&gt;React&lt;/code&gt; and &lt;code&gt;ReactDOM&lt;/code&gt; instead of loading their respective CDN.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;import&lt;/code&gt; statement is an ES6 feature that allows us to bring in objects (&lt;code&gt;React&lt;/code&gt; and &lt;code&gt;ReactDOM&lt;/code&gt;) from their respective modules (&lt;code&gt;react&lt;/code&gt; and &lt;code&gt;react-dom&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;module&lt;/strong&gt; is just a file that usually contains a class or library of functions. And &lt;code&gt;create-react-app&lt;/code&gt; CLI have both files installed for us to use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Notice also, we are not loading Babel to compile JSX to JavaScript. It comes bundled with this CLI.&lt;/p&gt;

&lt;p&gt;At the moment, we are rendering the JSX element directly in the real DOM through the &lt;code&gt;ReactDOM.render&lt;/code&gt;. This is not practicable. Imagine having an app with hundreds of element, you’ll agree with me that it would be hard to maintain.&lt;/p&gt;

&lt;p&gt;So instead of rendering a simple element, we will render a React component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-quick-look-at-react-component-types" class="anchor"&gt;
  &lt;/a&gt;
  A Quick Look at React Component Types
&lt;/h2&gt;

&lt;p&gt;Earlier, I mentioned that an App in React is built by combining a bunch of reusable components. Now, this component can either be a &lt;strong&gt;function&lt;/strong&gt; or a &lt;strong&gt;class-based&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A class component is created using &lt;a href="https://ibaslogic.com/object-oriented-programming-javascript/"&gt;the ES6 class syntax&lt;/a&gt; while the functional component is created by writing function.&lt;/p&gt;

&lt;p&gt;Before the 16.8 version of React, the class-based type is required if the component will manage the state data and/or lifecycle method (more on this later). Hence, it is called a &lt;strong&gt;stateful component&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;On the other hand, the function component before React 16.8 cannot maintain state and lifecycle logic. And as such, it is referred to as a &lt;strong&gt;stateless component&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This type is the simplest form of React component because it is primarily concerned with how things look. But now, things have changed with the &lt;a href="https://ibaslogic.com/react-hooks-tutorial/"&gt;introduction of React Hooks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can now manage the stateful features inside of the function component. This gives us the flexibility to create a React application ONLY with function component.&lt;/p&gt;

&lt;p&gt;In this tutorial, we could simply ignore the class-based type and focus on the modern functional component. But NO!&lt;/p&gt;

&lt;p&gt;You may come across the class-based when working on a project. So understanding all the tools available to you is paramount.&lt;/p&gt;

&lt;p&gt;So, we will start by using the class component to manage the functionality of our app as you will see in a moment. Later in the series, you will learn how to manage this logic in a function component using the React Hooks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-component-files" class="anchor"&gt;
  &lt;/a&gt;
  Creating the Component Files
&lt;/h2&gt;

&lt;p&gt;Remember, in the beginning, we decomposed our application into a tree of isolated components. Where the parent component, &lt;code&gt;TodoContainer&lt;/code&gt;, holds four children components (&lt;code&gt;Header&lt;/code&gt;, &lt;code&gt;InputTodo&lt;/code&gt;, &lt;code&gt;TodosList&lt;/code&gt; and &lt;code&gt;Navbar&lt;/code&gt;). Then, &lt;code&gt;TodosList&lt;/code&gt; holds another component called &lt;code&gt;TodoItem&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Meaning, we are creating six components in total. &lt;a href="https://ibaslogic.com/react-tutorial-for-beginners/#thinking-in-react-component"&gt;Revisit the app design&lt;/a&gt; if you need a refresher.&lt;/p&gt;

&lt;p&gt;Let’s create these files. Start by creating a folder called &lt;code&gt;components&lt;/code&gt; inside the &lt;code&gt;src&lt;/code&gt; directory and create these components files – i.e &lt;code&gt;TodoContainer.js&lt;/code&gt;, &lt;code&gt;Header.js&lt;/code&gt;, &lt;code&gt;InputTodo.js&lt;/code&gt;, &lt;code&gt;TodosList.js&lt;/code&gt;, &lt;code&gt;Navbar.js&lt;/code&gt; and &lt;code&gt;TodoItem.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, add the following code in the parent component file, &lt;code&gt;TodoContainer.js&lt;/code&gt; and save it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TodoContainer&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello from Create React App&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;I am in a React Component!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;TodoContainer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Also, go inside the &lt;code&gt;index.js&lt;/code&gt; file and update it so it looks like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react"
import ReactDOM from "react-dom"
//component file
import TodoContainer from "./components/TodoContainer"

ReactDOM.render(&amp;lt;TodoContainer /&amp;gt;, document.getElementById("root"))
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Save the file and check the frontend. You should have a heading and a paragraph text being rendered on the screen.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-did-we-do" class="anchor"&gt;
  &lt;/a&gt;
  What did we do?
&lt;/h3&gt;

&lt;p&gt;In the parent file, we started by creating a React class component (called &lt;code&gt;TodoContainer&lt;/code&gt; by extending the &lt;code&gt;Component&lt;/code&gt; class in the React library. Inside this class, we have the &lt;code&gt;render()&lt;/code&gt; method where we are returning the JSX that is being rendered on the screen.&lt;/p&gt;

&lt;p&gt;This method is different from the render in the &lt;code&gt;ReactDOM.render()&lt;/code&gt; earlier mentioned on this page. The &lt;code&gt;render()&lt;/code&gt; used here is a component render. Unlike the other, it takes no arguments and does not directly interact with the browser. It focuses on returning the corresponding React elements for that component. Remember, these React elements are Virtual DOM objects.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Please note:&lt;/strong&gt; Make sure you import React object for the JSX to work.&lt;/p&gt;

&lt;p&gt;You cannot return more than one JSX element next to each other except you wrap them in a single element. In our case, we wrapped them inside a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. But in case you don’t want a redundant wrapper around your element, you can wrap everything in a &lt;strong&gt;React Fragment&lt;/strong&gt; (a virtual element that doesn’t get shown in the DOM).&lt;/p&gt;

&lt;p&gt;For instance, use &lt;code&gt;&amp;lt;React.fragment&amp;gt;&lt;/code&gt; (or use shortcut, &lt;code&gt;&amp;lt;&amp;gt;&amp;lt;/&amp;gt;&lt;/code&gt;) instead of &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.&lt;/p&gt;


&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello from Create React App&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;I am in a React Component!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;p&gt;Immediately we had the parent component created, we rendered it using a custom tag similar to HTML, &lt;code&gt;&amp;lt;TodoContainer /&amp;gt;&lt;/code&gt; in the &lt;code&gt;index.js&lt;/code&gt; file. Now, instead of rendering a simple JSX element, we are rendering a React component.&lt;/p&gt;

&lt;p&gt;A few more notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It’s a good convention to use UpperCamelCase for the Component file name (i.e &lt;code&gt;TodoContainer.js&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Component names in React must be capitalized. In our case, &lt;code&gt;TodoContainer&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is necessary so that its instance (e.g &lt;code&gt;&amp;lt;TodoContainer /&amp;gt;&lt;/code&gt;) in JSX is not considered as DOM/HTML tag. Also, take note of the component file path as used in the &lt;code&gt;index.js&lt;/code&gt; file. Make sure you always specify the relative path of that file from the current directory.&lt;/p&gt;

&lt;p&gt;In our case, &lt;code&gt;"./components/TodoContainer"&lt;/code&gt;. Meaning the &lt;code&gt;TodoContainer&lt;/code&gt; file is located in the &lt;code&gt;components&lt;/code&gt; folder inside the current directory.&lt;/p&gt;

&lt;p&gt;The file extension defaults to &lt;code&gt;.js&lt;/code&gt;, so you don’t need to append it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enabling-the-strict-mode-in-react-application" class="anchor"&gt;
  &lt;/a&gt;
  Enabling the Strict Mode in React Application
&lt;/h2&gt;

&lt;p&gt;During the development stage of your application, you’d want to get notified about any potential problems associated with your app so you can quickly address the issue(s).&lt;/p&gt;

&lt;p&gt;React provides for us the &lt;code&gt;StrictMode&lt;/code&gt; to activate checks and logs a warning message at runtime.&lt;/p&gt;

&lt;p&gt;To enable it, we simply wrap our component with &lt;code&gt;&amp;lt;React.StrictMode&amp;gt;&lt;/code&gt; like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react"
import ReactDOM from "react-dom"
//component file
import TodoContainer from "./components/TodoContainer"

ReactDOM.render(
  &amp;lt;React.StrictMode&amp;gt;
    &amp;lt;TodoContainer /&amp;gt;
  &amp;lt;/React.StrictMode&amp;gt;,
  document.getElementById("root")
)
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see, we are wrapping the root component, &lt;code&gt;&amp;lt;TodoContainer /&amp;gt;&lt;/code&gt; in the &lt;code&gt;index.js&lt;/code&gt; file. This enables checks and warning not only for the component but also its descendants.&lt;/p&gt;

&lt;p&gt;If you want to activate check for a particular component, you should wrap that component instead of the root component. Like the &lt;code&gt;Fragment&lt;/code&gt;, the &lt;code&gt;StrictMode&lt;/code&gt; doesn’t render any UI or get shown in the DOM.&lt;/p&gt;

&lt;p&gt;Now, you’ll be able to see warnings in your DevTools console.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-with-data" class="anchor"&gt;
  &lt;/a&gt;
  Working With Data
&lt;/h2&gt;

&lt;p&gt;When creating a React app, you cannot do without having components receiving and/or passing data. It may be a child component receiving data from its parent or maybe the user directly input data to the component.&lt;/p&gt;

&lt;p&gt;Understanding how the data flows is very crucial to building React component. That brings us to the concept of &lt;strong&gt;state&lt;/strong&gt; and &lt;strong&gt;props&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#starting-with-the-props" class="anchor"&gt;
  &lt;/a&gt;
  Starting with the props
&lt;/h3&gt;

&lt;p&gt;The props (which stands for properties) is one of the two types of “model” data in React. It can be thought of as the attributes in the HTML element. For instance, the attributes – &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;checked&lt;/code&gt; – in the &lt;code&gt;input&lt;/code&gt; tag below are props.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"checkbox"&lt;/span&gt; &lt;span class="na"&gt;checked=&lt;/span&gt;&lt;span class="s"&gt;"{true}"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;They are the primary way to send data and/or event handlers down the component tree. i.e from parent to its child component.&lt;/p&gt;

&lt;p&gt;When this happens, the data that is received in the child component becomes read-only and cannot be changed by the child component. This is because the data is owned by the parent component and can only be changed by the same parent component.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-state" class="anchor"&gt;
  &lt;/a&gt;
  The state
&lt;/h3&gt;

&lt;p&gt;Unlike the props, the state data is local and specific to the component that owns it. It is not accessible to any other components unless the owner component chooses to pass it down as props to its child component(s).&lt;/p&gt;

&lt;p&gt;Even while the child component receives the data in its props, it wouldn’t know where exactly the data comes from. Maybe it was inputted or comes from the props.&lt;/p&gt;

&lt;p&gt;This way, the receiver component wouldn’t know how to update the data unless it references the parent owner.&lt;/p&gt;

&lt;p&gt;You’ll mostly find yourself declaring a state anytime you want some data to be updated whenever user perform some action like updating input field, toggling menu button etc. Also, if two or more child components need to communicate with each other. We’ll talk about this in detail in a moment. You will also get to understand the principle of “top-down” data flow.&lt;/p&gt;

&lt;p&gt;Keep reading!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-state" class="anchor"&gt;
  &lt;/a&gt;
  Adding State
&lt;/h2&gt;

&lt;p&gt;As we have it in the app diagram, the &lt;code&gt;InputTodo&lt;/code&gt; component takes the responsibility of accepting the user’s input. Now, once the component receives this input data, we need to pass it to a central location where we can manage it and display in the browser view.&lt;/p&gt;

&lt;p&gt;This allows other components to have access to this data.&lt;/p&gt;

&lt;p&gt;For instance, the &lt;code&gt;TodosList&lt;/code&gt; component will be accessing the data and display its todos items. Also, the &lt;code&gt;TodoItem&lt;/code&gt; component (which holds the checkbox and delete button) will be accessing the data to update the checkbox, update edited items and also remove items from the state.&lt;/p&gt;

&lt;p&gt;Now, for every child component that will be accessing the data, you will need to declare the shared state in their closest common parent. For this reason, the shared state data will live in the &lt;code&gt;TodoContainer&lt;/code&gt; component, which is their closest common parent. This parent component can then pass the state back to the children by using &lt;code&gt;props&lt;/code&gt;. This is what we call “Lifting state up” and then having a “top-down” data flow.&lt;/p&gt;

&lt;p&gt;Hope it’s clear?&lt;/p&gt;

&lt;p&gt;Though, instead of declaring a shared state in the parent component as mentioned above, an alternative is to &lt;a href="https://ibaslogic.com/react-context-api/"&gt;use the Context API to manage the state data&lt;/a&gt;. As a beginner, you should explore all options.&lt;/p&gt;

&lt;p&gt;In this React tutorial series, we will start with the simplest of them. Once you have the basic knowledge, you can then learn to use the Context API for your state management.&lt;/p&gt;

&lt;p&gt;Let’s move on.&lt;/p&gt;

&lt;p&gt;To add a state in a class component, we simply create a &lt;code&gt;state&lt;/code&gt; object with key-value pair. The value can be of any data type. In the code below, the value is an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you look at our design critically, we will be updating the to-dos checkbox. And as you may know from basic HTML, it uses a &lt;code&gt;checked&lt;/code&gt; prop (which is a Boolean attribute).&lt;/p&gt;

&lt;p&gt;This implies that we need to make provision for that. So a typical to-dos item will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Setup development environment&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;id&lt;/code&gt; is very important as you will read later on this page.&lt;/p&gt;

&lt;p&gt;In our to-dos app, for a start, we’ll display default items on the screen. Now, instead of an empty array, we will have an array of objects. So add the following code just above the &lt;code&gt;render()&lt;/code&gt; method in the &lt;code&gt;TodoContainer.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Setup development environment&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Develop website and add content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
   &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Deploy to live server&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Still in the file, update the &lt;code&gt;render()&lt;/code&gt; method so it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;render() {
  return (
    &amp;lt;ul&amp;gt;
      {this.state.todos.map(todo =&amp;gt; (
        &amp;lt;li&amp;gt;{todo.title}&amp;lt;/li&amp;gt;
      ))}
    &amp;lt;/ul&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Save the file and check the frontend.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xKwrr6yn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l94bw85rylsizwypo3y4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xKwrr6yn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/l94bw85rylsizwypo3y4.png" alt="adding state data"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-what-did-we-do" class="anchor"&gt;
  &lt;/a&gt;
  So what did we do?
&lt;/h3&gt;

&lt;p&gt;After we defined the todos data in the &lt;code&gt;state&lt;/code&gt; object, we accessed it in the &lt;code&gt;render()&lt;/code&gt; method using &lt;code&gt;this.state.todos&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In addition to the earlier explanation, the &lt;code&gt;render()&lt;/code&gt; method is one of the lifecycle methods (more on this later) that React call during the Render phase. This phase is when React decides what changes need to be made to the DOM.&lt;/p&gt;

&lt;p&gt;Since the value of the &lt;code&gt;todos&lt;/code&gt; is an array of objects as declared in the &lt;code&gt;state&lt;/code&gt;, we looped through this array and output each of the todos item i.e &lt;code&gt;title&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In React, we make use of the &lt;code&gt;map()&lt;/code&gt; method which is a higher-order function to do this iteration.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Remember that you can use a valid JavaScript expression inside the JSX through curly braces, &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you check the console of your DevTools, you’ll see React warnings. We will take care of that in a moment. For now, I want you to compare the frontend result and the app diagram.&lt;/p&gt;

&lt;p&gt;You will realize that another component called &lt;code&gt;TodosList&lt;/code&gt; has the responsibility to handle the todos list. This is where we will apply the knowledge of &lt;code&gt;props&lt;/code&gt; earlier explained.&lt;/p&gt;

&lt;p&gt;What we want to do is to pass the &lt;code&gt;state&lt;/code&gt; data from the &lt;code&gt;TodoContainer&lt;/code&gt; down to the &lt;code&gt;TodosList&lt;/code&gt; child component. Recall that we can pass data down the tree as &lt;code&gt;props&lt;/code&gt;. And I mentioned that the prop is just like the HTML attribute.&lt;/p&gt;

&lt;p&gt;Let’s apply that.&lt;/p&gt;

&lt;p&gt;First, go inside the &lt;code&gt;TodosList.js&lt;/code&gt; file and create a component called &lt;code&gt;TodosList&lt;/code&gt;. At this point, you can render anything. We will update it soon. After that, open the &lt;code&gt;TodoContainer.js&lt;/code&gt; file and modify the &lt;code&gt;render()&lt;/code&gt; method so it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;render() {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;TodosList todos={this.state.todos} /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Since we are using an instance of a component, &lt;code&gt;&amp;lt;TodosList /&amp;gt;&lt;/code&gt; in another file, you have to import the component. So, add this at the top of the &lt;code&gt;TodoContainer.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;TodosList&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./TodosList&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;At this point, you now have the &lt;code&gt;state&lt;/code&gt; data in the &lt;code&gt;todos&lt;/code&gt; prop. Thanks to this line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TodosList&lt;/span&gt; &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, we can access this data through &lt;code&gt;props&lt;/code&gt; in the &lt;code&gt;TodosList&lt;/code&gt; component. So let’s update the &lt;code&gt;TodosList.js&lt;/code&gt; file so it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TodosList&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;))}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;TodosList&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Save your file. You should have the todos title rendered on the screen just like before. Notice how we accessed the state data from within the child component, &lt;code&gt;TodosList&lt;/code&gt;, using &lt;code&gt;this.props.todos&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Always remember, with props, we can access state data at different levels of the component hierarchy. This is called &lt;strong&gt;prop drilling&lt;/strong&gt;. And it has to do with manually getting data from component A down to component B through the props. Where component A is the parent of B.&lt;/p&gt;

&lt;p&gt;As a recap,&lt;/p&gt;

&lt;p&gt;The todos data that come from the state of the &lt;code&gt;TodoContainer&lt;/code&gt; component is passed as props using &lt;code&gt;todos={this.state.todos}&lt;/code&gt;. Then, we accessed it through &lt;code&gt;this.props.todos&lt;/code&gt; from within the &lt;code&gt;TodosList&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;Let’s fix the console warnings.&lt;/p&gt;

&lt;p&gt;Whenever you map through something, a list is created. React want each child in the list to have a unique key prop. This helps React to identify which items have changed, added or removed.&lt;/p&gt;

&lt;p&gt;To add this unique key prop, we will take advantage of the &lt;code&gt;id&lt;/code&gt; we provided in the &lt;code&gt;TodoContainer&lt;/code&gt; state. We can access these &lt;code&gt;id&lt;/code&gt;s the same way we accessed the &lt;code&gt;title&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So go ahead and update the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element in the &lt;code&gt;TodosList&lt;/code&gt; component so you have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Save the file and the error goes away.&lt;/p&gt;

&lt;p&gt;Again, if you go back to the app diagram, you’ll realize that another component called &lt;code&gt;TodoItem&lt;/code&gt; has the responsibility to handle each of the todos items.&lt;/p&gt;

&lt;p&gt;We did something like this earlier. Open the &lt;code&gt;TodoItem.js&lt;/code&gt; file and create a component called &lt;code&gt;TodoItem&lt;/code&gt;. For the meantime, you can render anything.&lt;/p&gt;

&lt;p&gt;Next, import the component in the &lt;code&gt;TodosList.js&lt;/code&gt; file using this line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;TodoItem&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./TodoItem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After that, replace the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; element in the &lt;code&gt;map()&lt;/code&gt; method with this line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TodoItem&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Since we are mapping through the todos, the &lt;code&gt;key&lt;/code&gt; prop must be present.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At this point, each of the state data is present in the &lt;code&gt;todo&lt;/code&gt; prop. You can now access these data through props in the &lt;code&gt;TodoItem&lt;/code&gt; component. So let’s update the &lt;code&gt;TodoItem.js&lt;/code&gt; file so it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TodoItem&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;TodoItem&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Save all your files.&lt;/p&gt;

&lt;p&gt;You should have the frontend displayed as expected. In the &lt;code&gt;TodoItem&lt;/code&gt; component, take note of how we accessed the &lt;code&gt;title&lt;/code&gt; using &lt;code&gt;this.props.todo.title&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Before we proceed, let’s briefly talk about the &lt;strong&gt;React Developer Tools&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-react-developer-tools" class="anchor"&gt;
  &lt;/a&gt;
  The React Developer Tools
&lt;/h2&gt;

&lt;p&gt;If you want to inspect and debug your application, check your components tree or see how React works in real-time, you will need this tool. It is available as a browser extension for Chrome and Firefox.&lt;/p&gt;

&lt;p&gt;Let’s go ahead and install it.&lt;/p&gt;

&lt;p&gt;Head over to the extension page for your browser of choice (&lt;a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi"&gt;Chrome here&lt;/a&gt; and &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/react-devtools/"&gt;Firefox here&lt;/a&gt;) and install it.&lt;/p&gt;

&lt;p&gt;Once you install it, you are done. It doesn’t require any other setup.&lt;/p&gt;

&lt;p&gt;To view it, open the browser devtools by right-clicking anywhere on your web page viewport and select &lt;strong&gt;Inspect&lt;/strong&gt; or &lt;strong&gt;Inspect Element&lt;/strong&gt; depending on your browser. Then, on the browser inspection window, select the &lt;strong&gt;Components&lt;/strong&gt; tab to see the view of your application hierarchy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xPTozPGy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sv3hinmvnnfxui3tbjk9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xPTozPGy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/sv3hinmvnnfxui3tbjk9.png" alt="React devtools"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please note that you will not be able to see the &lt;strong&gt;Components&lt;/strong&gt; tab if your webpage is not using React at the moment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can navigate through different component in the tree and view the state and props data. Just play around with it for now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-function-component" class="anchor"&gt;
  &lt;/a&gt;
  Creating the Function Component
&lt;/h2&gt;

&lt;p&gt;Up to this moment, we have been using the class-based component to describe the UI.&lt;/p&gt;

&lt;p&gt;Though, later in the series, we will use the functional component to manage our app functionality (i.e the stateful logic) using the React Hooks. We’ve mentioned that before.&lt;/p&gt;

&lt;p&gt;But now, I want to quickly show you how to easily integrate this component type in your app. As you have guessed, for now, the component will not be managing any logic.&lt;/p&gt;

&lt;p&gt;If you take a look at the components we created, only one of them is holding the state data. That is the parent component, &lt;code&gt;TodoContainer&lt;/code&gt;. That means we will retain this component as a class-based (at least for now).&lt;/p&gt;

&lt;p&gt;The other components which are presently class components can also be function components. This is because they do not hold state data. That is the norm before the React Hooks.&lt;/p&gt;

&lt;p&gt;So let’s convert one of the class component, &lt;code&gt;TodoItem&lt;/code&gt;, to a function component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#converting-classbased-component-to-function-component" class="anchor"&gt;
  &lt;/a&gt;
  Converting Class-Based Component to Function Component
&lt;/h2&gt;

&lt;p&gt;In the &lt;code&gt;TodoItem.js&lt;/code&gt; file, replace the code with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;TodoItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;TodoItem&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you save the file and check your application, you’ll still have the todos items displayed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-what-changes" class="anchor"&gt;
  &lt;/a&gt;
  So what changes?
&lt;/h3&gt;

&lt;p&gt;Here, we created a function with the same component name instead of extending the &lt;code&gt;React.Component&lt;/code&gt; class. This functional component does not require a &lt;code&gt;render()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Also, notice that &lt;code&gt;this.props&lt;/code&gt; in the class component was replaced by &lt;code&gt;props&lt;/code&gt;. And to use this &lt;code&gt;props&lt;/code&gt;, we included it as the function argument.&lt;/p&gt;

&lt;p&gt;Until you get to learn the React Hooks, you may not always know (being a beginner) whether to use a function or class component. A lot of times, you will realize after a while that you chose the wrong type. But as you create more components, making this choice will get easier.&lt;/p&gt;

&lt;p&gt;One helpful tip to note is that a class component that only has markup within the &lt;code&gt;render()&lt;/code&gt; method can safely be converted to a function component.&lt;/p&gt;

&lt;p&gt;In this part of the tutorial, we will use the functional component simply for presentation as in the case of the &lt;code&gt;Header&lt;/code&gt; component. There, we are rendering a simple heading text. &lt;strong&gt;So, let's revert the &lt;code&gt;TodoItem&lt;/code&gt; component to class component&lt;/strong&gt;. Do that quickly.&lt;/p&gt;

&lt;p&gt;Now, let’s create the &lt;code&gt;Header&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;This is pretty straight forward. So, add the following code in the &lt;code&gt;Header.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/header&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Save the file. Next, go inside the &lt;code&gt;TodoContainer&lt;/code&gt; component and import the file in the top like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Header&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then, call its instance, &lt;code&gt;&amp;lt;Header /&amp;gt;&lt;/code&gt; within the &lt;code&gt;render()&lt;/code&gt; method so you have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;render() {
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;Header /&amp;gt;
      &amp;lt;TodosList todos={this.state.todos} /&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Save the file.&lt;/p&gt;

&lt;p&gt;You should have the heading text displayed in the frontend. Notice how we are using the ES6 arrow function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The line above is the same as this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;So go with the one you are most comfortable with.&lt;/p&gt;

&lt;p&gt;At this point, we've set the ball rolling. And I'm excited you are here!&lt;/p&gt;

&lt;p&gt;So far, we have touched some of the React fundamentals and started writing our simple todos application. In the next part, we will go deeper and explain how you can handle form in React, raising and handling events and many more.&lt;/p&gt;

&lt;p&gt;But before you head over, endeavor to share this article around the web. Also, if something wasn't clear, please let me know through the comment section.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#next-part" class="anchor"&gt;
  &lt;/a&gt;
  &lt;a href="https://ibaslogic.com/react-form-handling/"&gt;Next part&lt;/a&gt;
&lt;/h3&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Native lazy-loading of images with zero Javascript</title>
      <author>Paul Facklam</author>
      <pubDate>Mon, 08 Feb 2021 12:04:18 +0000</pubDate>
      <link>https://dev.to/pfacklam/native-lazy-loading-of-images-with-zero-javascript-3hnf</link>
      <guid>https://dev.to/pfacklam/native-lazy-loading-of-images-with-zero-javascript-3hnf</guid>
      <description>&lt;h1&gt;
  &lt;a href="#about-lazyloading-and-why-you-should-use-it" class="anchor"&gt;
  &lt;/a&gt;
  About lazy-loading and why you should use it
&lt;/h1&gt;

&lt;p&gt;The worldwide web has evolved over the past decades and today's websites consist not only of text and color, but also of countless media content. First and foremost images.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/path/to/your/image.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Awesome image"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;But what does this have to do with lazy-loading?&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lazy-loading is a technique that defers loading of non-critical resources at page load time. Instead, these non-critical resources are loaded at the moment of need. Where images are concerned, "non-critical" is often synonymous with "off-screen".&lt;br&gt;
-- &lt;cite&gt;from &lt;a href="https://web.dev/lazy-loading/"&gt;web.dev/lazy-loading&lt;/a&gt; written by Jeremy Wagner and Rachel Andrew&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This means by using lazy-loading we achieve the following benefits over the classic embedding in HTML:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Performance Gains&lt;/strong&gt; - With lazy-loading we can improve loading speed by reducing the number of images that need to be loaded initially.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cost reduction&lt;/strong&gt; - A lazy loaded image may never need to load because the user never reaches the image's position on the page.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, sounds good. How can we make that happen? What do we need for this? Let's get started!&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#the-old-javascript-approach" class="anchor"&gt;
  &lt;/a&gt;
  The old (Javascript) approach
&lt;/h1&gt;

&lt;p&gt;There are a lot of snippets and scripts like &lt;a href="https://github.com/verlok/vanilla-lazyload"&gt;vanilla-lazyload&lt;/a&gt; out there that enable lazy-loading via javascript. In almost all cases a data attribute is used to prevent upfront image loading.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;data-src=&lt;/span&gt;&lt;span class="s"&gt;"/path/to/your/image.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Awesome image"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;But how is the image loaded at all? To achieve this, one of the following two techniques is usually used.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Event listeners&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This technique uses event listeners on the scroll, resize and orientationChange events in the browser. If one of the mentioned events is fired and assuming the image enters the viewport the data-src attribute is replaced with the src attribute to trigger the loading call. See it in action:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/imagekit_io/embed/MBNwKB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Intersection Observer API&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unlike the first method, the image is observed (asynchronously) by using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"&gt;IntersectionObserver API&lt;/a&gt;. The image is then loaded by changing the &lt;code&gt;data-src&lt;/code&gt; to &lt;code&gt;src&lt;/code&gt; attribute as soon as it enters the viewport.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/imagekit_io/embed/BPXQZZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;But what if I told you that you don't need Javascript at all? 😲 Yes, you heard right! Zero Javascript.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#the-new-html-approach" class="anchor"&gt;
  &lt;/a&gt;
  The new (HTML) approach
&lt;/h1&gt;

&lt;p&gt;So what does this new way of lazy-loading look like? No worries, it's perfectly simple. You just have to add &lt;code&gt;loading="lazy"&lt;/code&gt; to your image tag and that's it. 😎&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/path/to/your/image.jpg"&lt;/span&gt; &lt;span class="na"&gt;loading=&lt;/span&gt;&lt;span class="s"&gt;"lazy"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;With this new loading attribute, you can completely defer the loading of offscreen images (and even iframes in some browsers) to when they enter the viewport. Enough talking, let's see it in action!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/pfacklam/embed/eYBmeyx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The attribute comes with three values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;auto&lt;/strong&gt; - (Default) equal to not including the attribute.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;lazy&lt;/strong&gt; - Defer loading of resources until it enters the viewport.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;eager&lt;/strong&gt; - Load the resource immediately&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What about browser support?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The attribute is supported by almost every popular browser (Chrome, Edge, Opera and Firefox). The implementation for Safari is in &lt;a href="https://bugs.webkit.org/show_bug.cgi?id=200764"&gt;progress and almost done&lt;/a&gt;. If you need more detailed information on cross-browser support &lt;a href="https://caniuse.com/loading-lazy-attr"&gt;caniuse.com&lt;/a&gt; is your friend. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What happens if a browser does not support the attribute?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Browsers that do not support the loading attribute simply ignore it without any side-effects. Fortunately, there is a polyfill at Github available named &lt;a href="https://github.com/mfranzke/loading-attribute-polyfill"&gt;loading-attribute-polyfill&lt;/a&gt; which can be used in those cases.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;loading&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;HTMLImageElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Cool! The browser supports the loading attribute&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// Houston... We need a polyfill!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Are there any limitations?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Even though it is pretty cool to let the browser do the lazy-loading work, you should be aware of some limitations that come into play when using the attribute:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Unlike the Javascript variants, you do not have any influence on the threshold to load the resource. It is part of the browser code and can't be changed for now.&lt;/li&gt;
&lt;li&gt;The attribute can't be used in combination with CSS background images. Maybe it will come in near future but it is definitely not available now.&lt;/li&gt;
&lt;li&gt;If printing the webpage is a real usecase for you, then please notice that there is an &lt;a href="https://bugs.chromium.org/p/chromium/issues/detail?id=875403"&gt;open bug&lt;/a&gt; for the loading attribute.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you liked this post, please give me a ❤️ or even a 🦄 and feel free to follow me on &lt;code&gt;dev.to&lt;/code&gt;. Appreciate it! ✌️&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__248468"&gt;
  
    .ltag__user__id__248468 .follow-action-button {
      background-color: #161616 !important;
      color: #000000 !important;
      border-color: #161616 !important;
    }
  
    &lt;a href="/pfacklam" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y0Dh__8n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8OJ8JD0n--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/248468/1a2f6ad3-a625-4a72-be2e-7c104d4235b9.jpeg" alt="pfacklam image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/pfacklam"&gt;Paul Facklam&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/pfacklam"&gt;In my 8+ years as a professional and passionate software developer at click solutions, I was able to gain in-depth knowledge of Javascript (React), CSS and HTML.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>html</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>[Video] Bash Scripting Crash Course + Giveaway ⭐</title>
      <author>Bobby Iliev</author>
      <pubDate>Mon, 08 Feb 2021 12:01:55 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/video-bash-scripting-crash-course-giveaway-15pk</link>
      <guid>https://dev.to/bobbyiliev/video-bash-scripting-crash-course-giveaway-15pk</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Hello everybody! Welcome to this Introduction to bash scripting video series, where you will learn the basics of bash scripting and start creating some awesome scripts! &lt;/p&gt;

&lt;p&gt;My name is Bobby and I've been working as a Linux system administrator for the past 7 years and a few months ago I wrote an opensource ebook on how to get started with Bash scripting, for more information on how to download the book for free check out the video description.&lt;/p&gt;

&lt;p&gt;In this video series, we are going to spin up a Linux server on DigitalOcean and create our scripts on there. If you are new to this channel make sure to hit the subscribe button and I will see you in the next video!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ur9lAPcbMhs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#playlist" class="anchor"&gt;
  &lt;/a&gt;
  Playlist
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLY7SzAmnEqp78tsHh1kK0gOx_f-uwQZAT"&gt;Introduction to Bash Scripting Crash course playlist&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#giveaway" class="anchor"&gt;
  &lt;/a&gt;
  Giveaway
&lt;/h1&gt;

&lt;p&gt;I've got those awesome stickers here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q2Uj75y6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jcd2ao7925c258inutip.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q2Uj75y6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/jcd2ao7925c258inutip.jpg" alt="Free stickers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One way to support me is by clicking the subscribe button! I will send out a sticker to everyone who does so! 🙏&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This is the first video course that I ever created! Any feedback will be appreciated 🙌&lt;/p&gt;

&lt;p&gt;Useful links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/bobbyiliev/introduction-to-bash-scripting"&gt;The Introduction to Bash Scripting Opensource eBook&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://m.do.co/c/2a9bba940f39%E2%80%8B"&gt;Free $100 Credit For DigitalOcean&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://ebook.bobby.sh%E2%80%8B"&gt;Website with interactive training&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>linux</category>
      <category>bash</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>The 5 Reasons Why You Should Have A Personal Domain For Your Developer Blog</title>
      <author>Catalin Pit</author>
      <pubDate>Mon, 08 Feb 2021 11:30:37 +0000</pubDate>
      <link>https://dev.to/catalinmpit/the-5-reasons-why-you-should-have-a-personal-domain-for-your-developer-blog-25jc</link>
      <guid>https://dev.to/catalinmpit/the-5-reasons-why-you-should-have-a-personal-domain-for-your-developer-blog-25jc</guid>
      <description>&lt;p&gt;&lt;a href="https://catalins.tech/youtube"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BOcbpfZj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1611507724979/yqIpEV-kg.png" alt="My Youtube channel"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;There are a plethora of platforms where you can start your blog as a developer. These blogging platforms can significantly differ in terms of features, the freedom they give you, and the benefits you get.&lt;/p&gt;

&lt;p&gt;Therefore, in this article, I want to talk about the essential feature you should consider when choosing a platform. That is - the domain name.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#overview" class="anchor"&gt;
  &lt;/a&gt;
  Overview
&lt;/h1&gt;

&lt;p&gt;Most likely, you know that when you start blogging on a platform, you get a URL looking like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;yourname.blogging-platform.com&lt;/code&gt; - for example, &lt;code&gt;catalinpit.hashnode.com&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;blogging-platform.com/yourname&lt;/code&gt; - for instance, &lt;code&gt;dev.to/catalinmpit&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Probably, there are other variations, but these are the most common ones. Now, you might ask "what's wrong with having such a blog URL?". Without further ado, let's see the downsides of having such a URL and the benefits of having a personal domain.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Whether you read the whole article or not, make sure to read the second and third points. The second point about SEO is the most crucial part of this article. The second most important point of the article is about not promoting your brand.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-looks-more-professional" class="anchor"&gt;
  &lt;/a&gt;
  1. Looks more professional
&lt;/h1&gt;

&lt;p&gt;First of all, it looks less professional than a personal domain (&lt;code&gt;yourname.com&lt;/code&gt;). Compare &lt;code&gt;catalinpit.hashnode.com&lt;/code&gt; or &lt;code&gt;dev.to/catalinmpit&lt;/code&gt; to &lt;code&gt;catalins.tech&lt;/code&gt;, and think about it. Which one looks more professional?&lt;/p&gt;

&lt;p&gt;Of course, the look of the URL is not the most important thing. Maybe you can overlook the look and feel of the URL. But in the next section, you will see the most important thing about having a personal domain.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-keep-the-seo-juice" class="anchor"&gt;
  &lt;/a&gt;
  2. Keep the SEO juice
&lt;/h1&gt;

&lt;p&gt;This is super important - you give up all the SEO juice. The platform reaps all the benefits. If you decide to move one day away from the platform, you lose all the SEO you built. Even if you move all your articles to your new blog.&lt;/p&gt;

&lt;p&gt;Let's take a fictive scenario. You blog for five years on a blogging platform, and you manage to write 300 articles. Many of them are ranked on the first page of search engines, and you get good traffic. Now you decide to move to your platform - &lt;code&gt;johndoe.com&lt;/code&gt;. You republish all the articles on your blog and expect the same results.&lt;/p&gt;

&lt;p&gt;But guess what? Your articles are not even indexed, and the articles from the previous platform perform better. That's because you gave up all the SEO to &lt;code&gt;blogging-platform.com&lt;/code&gt;. Do you know what that means? You start again from ZERO, after five years of blogging.&lt;/p&gt;

&lt;p&gt;That's why I use and recommend &lt;a href="http://hashnode.com/?cparticle"&gt;&lt;strong&gt;Hashnode&lt;/strong&gt;&lt;/a&gt;. With Hashnode you can add your custom domain and &lt;strong&gt;reap all the SEO benefits&lt;/strong&gt;. If you decide to move away one day, no strings attached. As long as you republish the articles and keep the same URL structure, the SEO will not be affected.&lt;/p&gt;

&lt;p&gt;Keep this in mind when choosing a blogging platform!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-own-your-content-and-promote-your-brand" class="anchor"&gt;
  &lt;/a&gt;
  3. Own your content and promote your brand
&lt;/h1&gt;

&lt;p&gt;This section is similar to the "Keep the SEO juice" section. That means, by not having your domain you do not own your content. You promote that blogging platform's brand instead of yours.&lt;/p&gt;

&lt;p&gt;Every time someone lands on your blog, they will remember that blogging-platform brand. They will not see the content and blog like yours. Thus, you help others build their brand with your content. You do yourself a big disservice.&lt;/p&gt;

&lt;p&gt;When it comes to owning your content, as soon as you move to a new platform, you lost it all. Of course, you can repost your articles on the new platform, but you lost all the SEO which takes us to the "Keep the SEO juice" section above.&lt;/p&gt;

&lt;p&gt;Therefore, with a personal domain, you promote your brand, and you are in charge of your content.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-simple-and-easy-to-remember" class="anchor"&gt;
  &lt;/a&gt;
  4. Simple and easy to remember
&lt;/h1&gt;

&lt;p&gt;It's not easy to remember the URL. Compare &lt;code&gt;catalinpit.blog.com&lt;/code&gt; to &lt;code&gt;catalins.tech&lt;/code&gt; and see which one is easier to remember. &lt;/p&gt;

&lt;p&gt;Maybe after a while, it's easier to remember whatever name you have for your blog. That is, you access it every day, and it gets stuck in your head. But think about the people finding your blog for the first time. Or if you have to share the blog URL with someone else. There are good chances that they will forget your blog URL until they get to access it.&lt;/p&gt;

&lt;p&gt;A personal domain is simpler to remember, and it looks more professional.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-inspire-credibility" class="anchor"&gt;
  &lt;/a&gt;
  5. Inspire credibility
&lt;/h1&gt;

&lt;p&gt;Perhaps the credibility goes hand in hand with professionalism. Prospective readers and customers are more inclined to access and read your blog when you have a domain.&lt;/p&gt;

&lt;p&gt;Thus, having a personal domain makes your blog more credible and professional. Compare the URL &lt;code&gt;mytechtipsandtricks.blogspot.com&lt;/code&gt; with &lt;code&gt;techarena.com&lt;/code&gt;. These are two made-up names to illustrate the difference between a generic URL and a credible, professional domain name.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;These are the top five reasons why I choose the combination of &lt;a href="http://hashnode.com/?cparticle"&gt;&lt;strong&gt;Hashnode&lt;/strong&gt;&lt;/a&gt; + domain name. Of course, there are more downsides of not having a personal domain. There might be others which I am keen to hear. If you know others, drop them in the comments.&lt;/p&gt;

&lt;p&gt;To recap, you should use a personal domain to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;become more professional&lt;/li&gt;
&lt;li&gt;benefit the most from SEO and not lose it&lt;/li&gt;
&lt;li&gt;promote your brand and own your content&lt;/li&gt;
&lt;li&gt;make your blog URL easy to remember&lt;/li&gt;
&lt;li&gt;improve your credibility&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>career</category>
      <category>programming</category>
    </item>
    <item>
      <title>Create a generative landing page &amp; WebGL powered background animation</title>
      <author>George Francis</author>
      <pubDate>Mon, 08 Feb 2021 11:25:51 +0000</pubDate>
      <link>https://dev.to/georgedoescode/create-a-generative-landing-page-webgl-powered-background-animation-3nl0</link>
      <guid>https://dev.to/georgedoescode/create-a-generative-landing-page-webgl-powered-background-animation-3nl0</guid>
      <description>&lt;p&gt;Recently I took a trip to the faraway land of &lt;a href="https://www.dribbble.com"&gt;dribbble&lt;/a&gt; and saw something magical. There were fuzzy orbs and beautiful, glass-like interfaces floating around everywhere. Serene! &lt;/p&gt;

&lt;p&gt;This got me thinking. Wouldn't it be cool to create a &lt;em&gt;generative&lt;/em&gt; landing page in this style? &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-end-result%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  The end result 
&lt;/h2&gt;

&lt;p&gt;First of all, here's a kind of visual TL;DR.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/georgedoescode/embed/XWNmvro?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/georgedoescode/full/XWNmvro"&gt;You can check out a full-page example here, too.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The color palette is random &lt;em&gt;within constraints.&lt;/em&gt; The colorful orbs move with a mind of their own. These elements of randomness are what make our landing page generative.&lt;/p&gt;

&lt;p&gt;If generative art/design is new to you, &lt;a href="https://dev.to/aspittel/intro-to-generative-art-2hi7"&gt;here is an excellent primer&lt;/a&gt; from &lt;a href="https://twitter.com/ASpittel"&gt;Ali Spittel&lt;/a&gt; &amp;amp; &lt;a href="https://twitter.com/1800THEHIVE"&gt;James Reichard&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Like what you see? Let's build!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#prerequisites" class="anchor"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;To get the most out of this tutorial you will need to be comfortable writing HTML, CSS, and JavaScript. &lt;/p&gt;

&lt;p&gt;If you have read “WebGL” and fallen into a state of shader-induced panic, don't worry. We will be using &lt;a href="https://www.pixijs.com/"&gt;PixiJS&lt;/a&gt; to abstract away the scary stuff. This tutorial will serve as a nice introduction to Pixi if you haven't used it before, too. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#creating-the-background-animation" class="anchor"&gt;
  &lt;/a&gt;
  Creating the background animation
&lt;/h2&gt;

&lt;p&gt;The first thing we are going to build is the orbs. To create them, we are going to need some libraries/packages. Let's get the boring stuff out of the way first and add them to the project. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#package-overview" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Package overview&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Here's a quick summary of the libraries/packages we will be using. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.npmjs.com/package/pixi.js/v/5.0.0-rc"&gt;PixiJS&lt;/a&gt; - A powerful graphics library built on WebGL, we will use it to render our orbs.&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.npmjs.com/package/@pixi/filter-kawase-blur"&gt;KawaseBlurFilter&lt;/a&gt; - A PixiJS filter plugin for ultra smooth blurs.&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.npmjs.com/package/simplex-noise"&gt;SimplexNoise&lt;/a&gt; - Used to generate a stream of self-similar random numbers. More on this shortly.&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.npmjs.com/package/hsl-to-hex"&gt;hsl-to-hex&lt;/a&gt; - A tiny JS utility for converting HSL colors to HEX.&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.npmjs.com/package/debounce"&gt;debounce&lt;/a&gt; - A  JavaScript &lt;a href="https://davidwalsh.name/javascript-debounce-function"&gt;debounce function.&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#package-installation" class="anchor"&gt;
  &lt;/a&gt;
  Package installation
&lt;/h3&gt;

&lt;p&gt;If you are following along on CodePen, add the following imports to your JavaScript file and you are good to go:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;PIXI&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://cdn.skypack.dev/pixi.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;KawaseBlurFilter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://cdn.skypack.dev/@pixi/filter-kawase-blur&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SimplexNoise&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://cdn.skypack.dev/simplex-noise&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;hsl&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://cdn.skypack.dev/hsl-to-hex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;debounce&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://cdn.skypack.dev/debounce&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you are hanging out in your own environment, you can install the required packages with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i pixi.js @pixi/filter-kawase-blur simplex-noise hsl-to-hex debounce
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can then import them like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;PIXI&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pixi.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;KawaseBlurFilter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@pixi/filter-kawase-blur&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SimplexNoise&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;simplex-noise&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;hsl&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hsl-to-hex&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;debounce&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;debounce&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: Outside of CodePen you will need a build tool such as Webpack or Parcel to handle these imports.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A blank (Pixi) canvas &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Awesome, we now have everything we need to get started. Let's kick things off by adding a &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element to our HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;canvas&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"orb-canvas"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Next, we can create a new Pixi instance with the canvas element as it's “view” &lt;em&gt;(where Pixi will render)&lt;/em&gt;. We will call our instance &lt;code&gt;app&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create PixiJS app&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PIXI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="c1"&gt;// render to &amp;lt;canvas class="orb-canvas"&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
  &lt;span class="na"&gt;view&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.orb-canvas&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="c1"&gt;// auto adjust size to fit the current window&lt;/span&gt;
  &lt;span class="na"&gt;resizeTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// transparent background, we will be creating a gradient background later using CSS&lt;/span&gt;
  &lt;span class="na"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you inspect the DOM and resize the browser, you should see the canvas element resize to fit the window. Magic! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-helpful-utilities%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  Some helpful utilities 
&lt;/h3&gt;

&lt;p&gt;Before going any further, we should add some utility functions to our JavaScript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// return a random number within a range&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// map a number from 1 range to another&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;start1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;start2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;start1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;end1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;start1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;end2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;start2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;start2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you have followed any of my tutorials before, you might be familiar with these already. I'm a little obsessed...&lt;/p&gt;

&lt;p&gt;&lt;code&gt;random&lt;/code&gt; will return a random number within a limited range. For example, &lt;em&gt;“Give me a random number between 5 and 10”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;map&lt;/code&gt; takes a number from one range and maps it to another. For example, if a number (0.5) usually exists in a range between 0 - 1 and we map it to a range of 0 - 100, the number becomes 50. &lt;/p&gt;

&lt;p&gt;I encourage experimenting with these two utilities a little if they are new to you. They will be useful companions in your generative journey! Pasting them into the console and experimenting with the output is a great place to start. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-the-orb-class" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Creating the Orb class&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Now, we should have everything we need to create our orb animation. To start, let's create an &lt;code&gt;Orb&lt;/code&gt; class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Orb class&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Orb&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Pixi takes hex colors as hexidecimal literals (0x rather than a string with '#')&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// bounds = the area an orb is "allowed" to move within&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bounds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setBounds&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// initialise the orb's { x, y } values to a random point within it's bounds&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;y&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;y&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// how large the orb is vs it's original radius (this will modulate over time)&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// what color is the orb?&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// the original radius of the orb, set relative to window height&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// starting points in "time" for the noise/self similar random values&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;xOff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;yOff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// how quickly the noise/self similar random values step through time&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.002&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// PIXI.Graphics is used to draw 2d primitives (in this case a circle) to the canvas&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;graphics&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PIXI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Graphics&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;graphics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alpha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.825&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// 250ms after the last window resize event, recalculate orb positions.&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;debounce&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bounds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setBounds&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Our &lt;code&gt;Orb&lt;/code&gt; is a simple circle that exists in a 2d space. &lt;/p&gt;

&lt;p&gt;It has an x and a y value, a radius, a fill color, a scale value &lt;em&gt;(how large it is vs its original radius)&lt;/em&gt; and a set of bounds. Its bounds define the area it can move around in, like a set of virtual walls. This will stop the orbs from getting too close to our text.&lt;/p&gt;

&lt;p&gt;You may notice the use of a non-existent &lt;code&gt;setBounds&lt;/code&gt; function in the snippet above. This function will define the virtual constraints our orbs exist within.  Let's add it to the &lt;code&gt;Orb&lt;/code&gt; class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;setBounds&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// how far from the { x, y } origin can each orb move&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;maxDist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
      &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// the { x, y } origin for each orb (the bottom right of the screen)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;originX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;1.25&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;originY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
      &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;
      &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;
      &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;1.375&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// allow each orb to move x distance away from it's { x, y }origin&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;originX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;maxDist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;originX&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;maxDist&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;originY&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;maxDist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;originY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;maxDist&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;OK, great. This is coming together! Next up, we should add an &lt;code&gt;update&lt;/code&gt; and a &lt;code&gt;render&lt;/code&gt; function to our &lt;code&gt;Orb&lt;/code&gt; class. Both of these functions will run on each animation frame. More on this in a moment.&lt;/p&gt;

&lt;p&gt;The update function will define how the orb's position and size should change over time. The render function will define how the orb should display itself on-screen.&lt;/p&gt;

&lt;p&gt;First, here is the &lt;code&gt;update&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// self similar "psuedo-random" or noise values at a given point in "time"&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;xNoise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;simplex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;noise2D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;xOff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;xOff&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;yNoise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;simplex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;noise2D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;yOff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;yOff&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scaleNoise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;simplex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;noise2D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;xOff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;yOff&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// map the xNoise/yNoise values (between -1 and 1) to a point within the orb's bounds&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xNoise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;yNoise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;y&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bounds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;y&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// map scaleNoise (between -1 and 1) to a scale value somewhere between half of the orb's original size, and 100% of it's original size&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scaleNoise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// step through "time"&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;xOff&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;yOff&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In order for this function to run, we must also define &lt;code&gt;simplex&lt;/code&gt;. To do so, add the following snippet anywhere before the &lt;code&gt;Orb&lt;/code&gt; class definition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create a new simplex noise instance&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;simplex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SimplexNoise&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There's a lot of “noise” talk going on here. I realize that for some folks this will be an unfamiliar concept. &lt;/p&gt;

&lt;p&gt;I won't be going deep on noise in this tutorial, but I would recommend &lt;a href="https://www.youtube.com/watch?v=8ZEMLCnn8v0"&gt;this video&lt;/a&gt; by Daniel Shiffman as a primer. If you are new to the concept of noise - pause this article, check out the video, and pop back!&lt;/p&gt;

&lt;p&gt;In a nutshell, though, noise is a great way of generating _ self-similar_ random numbers. These numbers are amazing for animation, as they create smooth yet unpredictable movement. &lt;/p&gt;

&lt;p&gt;Here's an image from &lt;a href="https://natureofcode.com/"&gt;The Nature of Code&lt;/a&gt; showing the difference between traditional random (e.g. &lt;code&gt;Math.random()&lt;/code&gt; and noisy random values: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yd3UOgqn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7l8ej48s9jal1i9xo05u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yd3UOgqn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7l8ej48s9jal1i9xo05u.png" alt="A ragged, random distribution compared to a smooth noisy one"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;update&lt;/code&gt; function here uses noise to modulate the orb's &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and &lt;code&gt;scale&lt;/code&gt; properties over time. We pick out noise values based on our &lt;code&gt;xOff&lt;/code&gt; and &lt;code&gt;yOff&lt;/code&gt; positions. We then use &lt;code&gt;map&lt;/code&gt; to scale the values (always between -1 and 1) to new ranges.&lt;/p&gt;

&lt;p&gt;The result of this? The orb will always drift &lt;strong&gt;within its bounds.&lt;/strong&gt; Its size is &lt;em&gt;random within constraints.&lt;/em&gt; The orb's behavior is unpredictable. There are no keyframes or fixed values here. &lt;/p&gt;

&lt;p&gt;This is all well and good, but we still can't see anything! Let's fix that by adding the &lt;code&gt;render&lt;/code&gt; function to our &lt;code&gt;Orb&lt;/code&gt; class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// update the PIXI.Graphics position and scale values&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;graphics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;graphics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;graphics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// clear anything currently drawn to graphics&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;graphics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;// tell graphics to fill any shapes drawn after this with the orb's fill color&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;graphics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;beginFill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// draw a circle at { 0, 0 } with it's size set by this.radius&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;graphics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawCircle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// let graphics know we won't be filling in any more shapes&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;graphics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;endFill&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;render&lt;/code&gt;  will draw a new circle to our canvas each frame. &lt;/p&gt;

&lt;p&gt;You may notice that the circle's &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; values are both 0. This is because we are moving the &lt;code&gt;graphics&lt;/code&gt; element itself, rather than the circle within it. &lt;/p&gt;

&lt;p&gt;Why is this? &lt;/p&gt;

&lt;p&gt;Imagine that you wanted to expand on this project, and render a more complex orb. Your new orb is now comprised of &amp;gt; 100 circles. It is simpler to move the entire graphics instance than to move every element within it. This &lt;em&gt;may&lt;/em&gt; give you some performance gains, too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-some-orbs" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Creating some orbs!&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It's time to put our &lt;code&gt;Orb&lt;/code&gt; class to good use. Let's create 10 brand new orb instances, and pop them into an &lt;code&gt;orbs&lt;/code&gt; array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create orbs&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;orbs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// each orb will be black, just for now&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;orb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Orb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x000000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;orb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;graphics&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;orbs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;orb&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We are calling &lt;code&gt;app.stage.addChild&lt;/code&gt; to add each graphics instance to our canvas. This is akin to calling &lt;code&gt;document.appendChild()&lt;/code&gt; on a DOM element. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#animation-or-no-animation" class="anchor"&gt;
  &lt;/a&gt;
  Animation! Or, no animation?
&lt;/h3&gt;

&lt;p&gt;Now that we have 10 new orbs, we can start to animate them. Let's not assume everyone wants a moving background, though. &lt;/p&gt;

&lt;p&gt;When you are building this kind of page, it is crucial to respect the user's preferences. In our case, if the user has &lt;code&gt;prefers-reduced-motion&lt;/code&gt; set, we will render a static background. &lt;/p&gt;

&lt;p&gt;Here's how we can set up a Pixi animation loop that will respect the user's preferences:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Animate!&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;(prefers-reduced-motion: reduce)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ticker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// update and render each orb, each frame. app.ticker attempts to run at 60fps&lt;/span&gt;
    &lt;span class="nx"&gt;orbs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;orb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;orb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="nx"&gt;orb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// perform one update and render per orb, do not animate&lt;/span&gt;
  &lt;span class="nx"&gt;orbs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;orb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;orb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;orb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When we call &lt;code&gt;app.ticker.add(function)&lt;/code&gt;, we tell Pixi to repeat that function at around 60 frames per second. In our case, if the user prefers reduced motion, we only run &lt;code&gt;update&lt;/code&gt; and render our orbs once.  &lt;/p&gt;

&lt;p&gt;Once you have added the above snippet, you should see something like this in the browser: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ab0Yp4CJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kea24zae2xtxvj353353.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ab0Yp4CJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kea24zae2xtxvj353353.png" alt="A group of black circles"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hooray! Movement! Believe it or not, we are almost there. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-the-blur%C2%A0" class="anchor"&gt;
  &lt;/a&gt;
  Adding the blur 
&lt;/h3&gt;

&lt;p&gt;Our orbs are looking a little... harsh right now. Let's fix that by adding a blur filter to our Pixi canvas. This is actually very simple and will make a huge difference to our visual output.&lt;/p&gt;

&lt;p&gt;Pop this line below your &lt;code&gt;app&lt;/code&gt; definition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;KawaseBlurFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now, if you check out the browser you should see some much softer orbs! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zK7etMcP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ce1ouotst33m27asxtim.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zK7etMcP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ce1ouotst33m27asxtim.png" alt="A group of blurry black circles"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looking great. Let's add some color. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#a-generative-color-palette-using-hsl" class="anchor"&gt;
  &lt;/a&gt;
  A Generative color palette using HSL
&lt;/h2&gt;

&lt;p&gt;To introduce some color to our project, we are going to create a &lt;code&gt;ColorPalette&lt;/code&gt; class. This class will define a set of colors we can use to fill in our orbs but also style the wider page.&lt;/p&gt;

&lt;p&gt;I always use HSL when working with color. It's more intuitive than hex and lends itself rather well to generative work. Here's how:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ColorPalette&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setColors&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setCustomProperties&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;setColors&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// pick a random hue somewhere between 220 and 360&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;220&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;360&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;complimentaryHue1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hue&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;complimentaryHue2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hue&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// define a fixed saturation and lightness&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;saturation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;95&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lightness&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// define a base color&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;baseColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;saturation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lightness&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// define a complimentary color, 30 degress away from the base&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;complimentaryColor1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;complimentaryHue1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;saturation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lightness&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// define a second complimentary color, 60 degrees away from the base&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;complimentaryColor2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;complimentaryHue2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;saturation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lightness&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// store the color choices in an array so that a random one can be picked later&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colorChoices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;baseColor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;complimentaryColor1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;complimentaryColor2&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;randomColor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// pick a random color&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colorChoices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colorChoices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)].&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0x&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;setCustomProperties&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// set CSS custom properties so that the colors defined here can be used throughout the UI&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;--hue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;--hue-complimentary1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;complimentaryHue1&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;--hue-complimentary2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;complimentaryHue2&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We are picking 3 main colors. A random base color, and two complimentary. We pick our complementary colors by rotating the hue 30 and 60 degrees from the base.&lt;/p&gt;

&lt;p&gt;We then set the 3 hues as custom properties in the DOM and define a &lt;code&gt;randomColor&lt;/code&gt; function. &lt;code&gt;randomColor&lt;/code&gt; returns a random Pixi-compatible HSL color each time it is run. We will use this for our orbs. &lt;/p&gt;

&lt;p&gt;Let's define a &lt;code&gt;ColorPalette&lt;/code&gt; instance before we create our orbs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;colorPalette&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ColorPalette&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can then give each orb a random fill on creation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;orb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Orb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;colorPalette&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;randomColor&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you check the browser, you should now see some color! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HXcoTwow--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gr5snevpd1leplkhii6n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HXcoTwow--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/gr5snevpd1leplkhii6n.png" alt="A group of colorful, blurry circles"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you inspect the root &lt;code&gt;html&lt;/code&gt; element in the DOM, you should also see some custom properties have been set. We are now ready to add some markup and styles for the page. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#building-the-rest-of-the-page" class="anchor"&gt;
  &lt;/a&gt;
  Building the rest of the page
&lt;/h2&gt;

&lt;p&gt;Awesome! So our animation is complete. It looks great and is running real fast thanks to Pixi. Now we need to build the rest of the landing page. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-the-markup" class="anchor"&gt;
  &lt;/a&gt;
  Adding the markup
&lt;/h3&gt;

&lt;p&gt;First of all, let's add some markup to our HTML file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Overlay --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"overlay"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- Overlay inner wrapper --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"overlay__inner"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Title --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"overlay__title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      Hey, would you like to learn how to create a
      &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-gradient"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;generative&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; UI just like this?
    &lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Description --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"overlay__description"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      In this tutorial we will be creating a generative “orb” animation using pixi.js, picking some lovely random colors, and pulling it all together in a nice frosty UI.
      &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;We're gonna talk accessibility, too.&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Buttons --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"overlay__btns"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"overlay__btn overlay__btn--transparent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        Tutorial out Feb 2, 2021
      &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"overlay__btn overlay__btn--colors"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;Randomise Colors&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"overlay__btn-emoji"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;🎨&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There's nothing too crazy going on here, so I won't dig in too much. Let's move onto our CSS:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-the-css" class="anchor"&gt;
  &lt;/a&gt;
  Adding the CSS
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--dark-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--hue&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;9%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;--light-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--hue&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;95%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;98%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;--base&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--hue&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;95%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;--complimentary1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--hue-complimentary1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;95%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;--complimentary2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--hue-complimentary2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;95%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="py"&gt;--font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Poppins"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;system-ui&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="py"&gt;--bg-gradient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--hue&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;95%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;99%&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--hue&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;95%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;84%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-font-smoothing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;antialiased&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-moz-osx-font-smoothing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grayscale&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1920px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;place-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--font-family&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--dark-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--bg-gradient&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.orb-canvas&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;pointer-events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;strong&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.overlay&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1140px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;640px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8rem&lt;/span&gt; &lt;span class="m"&gt;6rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.375&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0.75rem&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.125&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.overlay__inner&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;36rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.overlay__title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.875rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.75rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;700&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;letter-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-0.025em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.text-gradient&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="m"&gt;45deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--complimentary2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-background-clip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-webkit-text-fill-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-moz-background-clip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-moz-text-fill-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.overlay__description&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.75rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.overlay__btns&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.overlay__btn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.875rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--light-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--dark-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;not-allowed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt; &lt;span class="m"&gt;150ms&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;outline-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hsl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--hue&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;95%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.overlay__btn--colors&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1.05&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.overlay__btn--transparent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--dark-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--dark-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.75rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.overlay__btn-emoji&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.375rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1140px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.overlay&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8rem&lt;/span&gt; &lt;span class="m"&gt;4rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;840px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.overlay&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.overlay__title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.25rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.overlay__description&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.875rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.overlay&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.overlay__btns&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.overlay__btn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.75rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.overlay__btn&lt;/span&gt;&lt;span class="nd"&gt;:first-child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The key part of this stylesheet is defining the custom properties in &lt;code&gt;:root&lt;/code&gt;. These custom properties make use of the values we set with our &lt;code&gt;ColorPalette&lt;/code&gt; class. &lt;/p&gt;

&lt;p&gt;Using the 3 hue custom properties defined already, we create the following: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;--dark-color&lt;/code&gt; - To use for all our text and primary button styles,  this is &lt;em&gt;almost&lt;/em&gt; black with a hint of our base hue. This helps make our color palette feel coherent.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;--light-color&lt;/code&gt; - To use in place of pure white. This is much the same as the dark color, &lt;strong&gt;almost&lt;/strong&gt; white with a hint of our base hue.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;--complimentary1&lt;/code&gt; - Our first complimentary color, formatted to CSS friendly HSL.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;--complimentary2&lt;/code&gt; - Our second complementary color, formatted to CSS friendly HSL.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;--bg-gradient&lt;/code&gt; - A subtle linear gradient based on our base hue. We use this for the page background. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We then apply these values throughout our UI. For button styles, outline colors, even a gradient text effect. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A note on accessibility &lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this tutorial, we are &lt;em&gt;almost&lt;/em&gt; setting our colors and letting them run free. In this case, we should be ok given the design choices we have made. In production, though, &lt;strong&gt;always make sure you meet at least &lt;a href="https://webaim.org/articles/contrast/"&gt;WCAG 2.0 color contrast guidelines&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#randomising-the-colors-in-realtime" class="anchor"&gt;
  &lt;/a&gt;
  Randomising the colors in real-time
&lt;/h2&gt;

&lt;p&gt;Our UI and background animation are now complete. It's looking great, and you will see a new color palette/orb animation each time you refresh the page. &lt;/p&gt;

&lt;p&gt;It would be good if we could randomize the colors without refreshing, though. Luckily, thanks to our custom properties/color palette setup, this is simple. &lt;/p&gt;

&lt;p&gt;Add this small snippet to your JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.overlay__btn--colors&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;colorPalette&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setColors&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;colorPalette&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setCustomProperties&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;orbs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;orb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;orb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;colorPalette&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;randomColor&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;With this snippet, we are listening for a click event on our primary button. On click, we generate a new set of colors, update the CSS custom properties, and set each orb's fill to a new value.&lt;/p&gt;

&lt;p&gt;As CSS custom properties are reactive, our entire UI will update in real-time. Powerful stuff.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thats-all-folks" class="anchor"&gt;
  &lt;/a&gt;
  That's all folks
&lt;/h2&gt;

&lt;p&gt;Hooray, we made it! I hope you had fun and learned something from this tutorial. &lt;/p&gt;

&lt;p&gt;Random color palettes may be a tad experimental for most applications, but there's a lot to take away here. Introducing an element of chance could be a great addition to your design process.&lt;/p&gt;

&lt;p&gt;You can never go wrong with a generative animation, either. &lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Follow on on Twitter &lt;a href="https://twitter.com/georgedoescode"&gt;@georgedoescode&lt;/a&gt; for more creative coding/front-end development content.&lt;/strong&gt;  &lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article and demo took around 12 hours to create. If you would like to support my work you &lt;a href="https://ko-fi.com/georgedoescode"&gt;can buy me a ☕&lt;/a&gt; ❤️&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>Some small Css tips #005</title>
      <author>VA79 Stephan</author>
      <pubDate>Mon, 08 Feb 2021 10:37:36 +0000</pubDate>
      <link>https://dev.to/vanaf1979/some-small-css-tips-005-2d4</link>
      <guid>https://dev.to/vanaf1979/some-small-css-tips-005-2d4</guid>
      <description>&lt;p&gt;To continue on my &lt;a href="https://dev.to/vanaf1979/some-small-css-tips-004-3ej0"&gt;previous post&lt;/a&gt; here are some more tweets with little Css tips that might help you in your projects. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#easier-colors-with-the-hsl-function" class="anchor"&gt;
  &lt;/a&gt;
  Easier colors with the hsl() function
&lt;/h3&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_VqUTeZr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/ErC924hXEAAWpZh.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--coVD6L7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1085116439823085568/rzUn-2Rt_normal.jpg" alt="Stephan Nijman profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Stephan Nijman
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/vanaf1979"&gt;@vanaf1979&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Small &lt;a href="https://twitter.com/hashtag/css"&gt;#css&lt;/a&gt; tip: The Hsl color function is an amazing and more intuitive alternative to hex colors. I created a codepen that lets you play around with it, and it also has a small description of the different parameters.&lt;br&gt;&lt;br&gt;👇Codepen in the comment below 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      11:46 AM - 06 Jan 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1346785273502425093" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WwRENZp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1346785273502425093" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PFD0MJBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1346785273502425093" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6wx1BHu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/Since1979/embed/mdrLdEY?height=600&amp;amp;default-tab=css,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;





&lt;h3&gt;
  &lt;a href="#filters-grayscale-and-sephia" class="anchor"&gt;
  &lt;/a&gt;
  Filters Grayscale and Sephia
&lt;/h3&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
    &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__two-pics"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eAznavLj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/ErSnZwwXEAMRaEw.jpg" alt="unknown tweet media content"&gt;
    &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--coVD6L7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1085116439823085568/rzUn-2Rt_normal.jpg" alt="Stephan Nijman profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Stephan Nijman
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/vanaf1979"&gt;@vanaf1979&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Small &lt;a href="https://twitter.com/hashtag/css"&gt;#css&lt;/a&gt; tip: You can easily turn your images into grayscale or sepia images and transition them on hover too.&lt;br&gt;&lt;br&gt;👇Check it out in the CodePen below. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      12:42 PM - 09 Jan 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1347886456870752256" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WwRENZp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1347886456870752256" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PFD0MJBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1347886456870752256" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6wx1BHu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/Since1979/embed/yLaqaLb?height=600&amp;amp;default-tab=css,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Css filters docs: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/filter"&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/filter&lt;/a&gt;


&lt;h3&gt;
  &lt;a href="#required-valid-invalid" class="anchor"&gt;
  &lt;/a&gt;
  :required :valid :invalid
&lt;/h3&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n3_qP-Ei--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/ErdCs2fWMAAjThX.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--coVD6L7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1085116439823085568/rzUn-2Rt_normal.jpg" alt="Stephan Nijman profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Stephan Nijman
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/vanaf1979"&gt;@vanaf1979&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Small &lt;a href="https://twitter.com/hashtag/css"&gt;#css&lt;/a&gt; tip: You can combine the :required, :valid and :invalid pseudo-selectors to style your valid and invalid form fields&lt;br&gt;&lt;br&gt;👇Check it out in the CodePen below.. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:17 PM - 11 Jan 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1348620085007671297" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WwRENZp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1348620085007671297" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PFD0MJBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1348620085007671297" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6wx1BHu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/Since1979/embed/xxEabVj?height=600&amp;amp;default-tab=css,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;





&lt;h3&gt;
  &lt;a href="#leftaligning-list-elements" class="anchor"&gt;
  &lt;/a&gt;
  left-aligning list elements
&lt;/h3&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pyRyiynr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EtTSKPzXYAEkVES.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--coVD6L7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1085116439823085568/rzUn-2Rt_normal.jpg" alt="Stephan Nijman profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Stephan Nijman
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/vanaf1979"&gt;@vanaf1979&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Small &lt;a href="https://twitter.com/hashtag/css"&gt;#css&lt;/a&gt; tip: In this week’s (short) video, i will show you a nice trick that we can use to perfectly left-align our ordered and unordered lists with our text.&lt;br&gt;&lt;br&gt;👇Check out the video in the comment below. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      12:20 PM - 03 Feb 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1356940617805422595" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WwRENZp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1356940617805422595" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PFD0MJBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1356940617805422595" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6wx1BHu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kBE23XbViUE"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Blog post: &lt;a href="https://dev.to/vanaf1979/css-aligning-your-lists-with-your-text-340o"&gt;https://dev.to/vanaf1979/css-aligning-your-lists-with-your-text-340o&lt;/a&gt;


&lt;h3&gt;
  &lt;a href="#multiple-color-backgrounds-without-images" class="anchor"&gt;
  &lt;/a&gt;
  Multiple color backgrounds without images
&lt;/h3&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
    &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__two-pics"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gp9RxvzH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/Erhvr6_XMAUY_Op.jpg" alt="unknown tweet media content"&gt;
    &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--coVD6L7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1085116439823085568/rzUn-2Rt_normal.jpg" alt="Stephan Nijman profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Stephan Nijman
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/vanaf1979"&gt;@vanaf1979&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Small &lt;a href="https://twitter.com/hashtag/Css"&gt;#Css&lt;/a&gt; tip: Today I needed a background that was 33% white and 66% blue without using any background images. Turns out we can use css linear-gradient to achieve that exact effect.&lt;br&gt;&lt;br&gt;👇Check it out in the CodePen below.. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      11:12 AM - 12 Jan 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1348951055330123776" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WwRENZp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1348951055330123776" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PFD0MJBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1348951055330123776" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6wx1BHu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/Since1979/embed/XWjxXxZ?height=600&amp;amp;default-tab=css,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Css linear-gradient docs: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient()"&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient()&lt;/a&gt;


&lt;h3&gt;
  &lt;a href="#max-characters-width" class="anchor"&gt;
  &lt;/a&gt;
  Max characters width
&lt;/h3&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fNPEEHkq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/ErnQSTVXMAAubpw.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--coVD6L7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1085116439823085568/rzUn-2Rt_normal.jpg" alt="Stephan Nijman profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Stephan Nijman
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="comment-mentioned-user" href="https://dev.to/vanaf1979"&gt;@vanaf1979&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4t6ys1m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Small &lt;a href="https://twitter.com/hashtag/css"&gt;#css&lt;/a&gt; tip: You can improve readability by using a max-width set in the ch unit to limit the max number of characters in a paragraph. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      12:53 PM - 13 Jan 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1349338833213644802" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WwRENZp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1349338833213644802" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PFD0MJBa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1349338833213644802" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6wx1BHu3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;





&lt;h3&gt;
  &lt;a href="#subscribe-and-follow" class="anchor"&gt;
  &lt;/a&gt;
  Subscribe and Follow
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.youtube.com/channel/UCeyqA3y26RlnfUSx3ufgFoA"&gt;Subscribe to my Youtube channel.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://twitter.com/Vanaf1979"&gt;Follow me on Twitter&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks for reading/watching and stay safe&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>html</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
