<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Discover your GitHub ranking with Metrics Insights!</title>
      <author>lowlighter ü¶ë</author>
      <pubDate>Mon, 19 Apr 2021 17:11:14 +0000</pubDate>
      <link>https://dev.to/lowlighter/discover-your-github-ranking-with-metrics-insights-dpe</link>
      <guid>https://dev.to/lowlighter/discover-your-github-ranking-with-metrics-insights-dpe</guid>
      <description>&lt;p&gt;Ever wondered how high is ranked your most starred/forked repository across all &lt;a href="https://github.com"&gt;GitHub&lt;/a&gt;? Or whether if you're one of most followed user account üôÇ ?&lt;/p&gt;

&lt;p&gt;Well, this is possible thanks to &lt;a href="https://metrics.lecoq.io/about"&gt;Metrics Insights&lt;/a&gt;! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CMu1mbvo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbq3ewr0ymy8erb40h4s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CMu1mbvo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbq3ewr0ymy8erb40h4s.png" alt="Preview image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There's also a few additional data, like the number of bytes you've written for each languages you used up until now!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MfcwvldZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lz6urdyh1v1vsquu8wqa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MfcwvldZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lz6urdyh1v1vsquu8wqa.png" alt="Preview image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Best of it is that you can use &lt;a href="https://metrics.lecoq.io/about"&gt;Metrics Insights&lt;/a&gt; in your browser without any account login nor cookies!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-work-though"&gt;
  &lt;/a&gt;
  ü§î How does it work though?
&lt;/h2&gt;

&lt;p&gt;I'm currently working on &lt;a href="https://github.com/lowlighter/metrics"&gt;Metrics&lt;/a&gt;, a project designed to gather data that you can then render as SVG to embed on your GitHub user profile, like below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vvs8b7-r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ivu4p47r55v9tvyib5x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vvs8b7-r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ivu4p47r55v9tvyib5x.png" alt="Preview image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Currently, there's hundreds of options, including 4 templates and 30 plugins, one of them being the &lt;code&gt;üèÜ Achievements&lt;/code&gt; one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VDIWJ2hW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gv663em79s3q66ryqgmo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VDIWJ2hW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gv663em79s3q66ryqgmo.png" alt="Preview image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, some of them include ranking. You may wonder of these are computed? Well it's actually a lot simpler that it may looks, using &lt;a href="https://docs.github.com/en/graphql"&gt;GitHub GraphQL API&lt;/a&gt; and &lt;a href="https://github.com/puppeteer/puppeteer"&gt;Puppeteer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The trick is to fetch the number of &lt;code&gt;followers&lt;/code&gt;, &lt;code&gt;created repositories&lt;/code&gt; of said user, along with their most &lt;code&gt;starred repository&lt;/code&gt; and most &lt;code&gt;forked repository&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then using &lt;code&gt;search&lt;/code&gt; GitHub GraphQL API, we can count how many users and repositories are above using the following query (replacing each &lt;code&gt;$&lt;/code&gt; prefixed values with what we found earlier):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AchievementsRanking&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;repo_rank&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"stars:&amp;gt;$stars"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;REPOSITORY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;0)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;repositoryCount&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;user_rank&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"followers:&amp;gt;$followers"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;USER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;0)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;userCount&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;forks_rank&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"forks:&amp;gt;$forks"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;REPOSITORY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;0)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;repositoryCount&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;created_rank&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"repos:&amp;gt;$created"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;USER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;0)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;userCount&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;As you can see, we only retrieve the total count of each categorie, we don't even try to fetch any content. So basically, if an user has &lt;code&gt;100&lt;/code&gt; followers and &lt;code&gt;user_rank.userCount&lt;/code&gt; send back &lt;code&gt;999&lt;/code&gt; users, we can deduce that user is 1000&lt;sup&gt;th&lt;/sup&gt; (&lt;code&gt;999+1&lt;/code&gt;) since 999 users has more followers. We do the same for each categorie.&lt;/p&gt;

&lt;p&gt;One thing to note is that GitHub API may return incomplete count below some thresholds as there's too many results to compute for even GitHub to handle it. But if you have created a respository at least once, or having a repository which has been starred 5+ times or forked 1+ time or if you have 3+ followers, you can compete within each categorie üòÉ !&lt;/p&gt;

&lt;p&gt;I guess it also means that there's a lot of inactive users and unused account, so if you're somewhat active on GitHub you'll be able to see your stats pretty easily with this tool. &lt;/p&gt;

&lt;p&gt;Since it's not possible to estimate how many repositories and users exists through GitHub's own API, you may wonder how I got total repositories and users count?&lt;/p&gt;

&lt;p&gt;Well, actually these are displayed on &lt;a href="https://github.com/search"&gt;GitHub search&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QOWxi5uE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7vb5hibwsr83s2k62ej.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QOWxi5uE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7vb5hibwsr83s2k62ej.png" alt="GitHub search"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is why we needed puppeteer üôÇ We just crawl a few times (displayed stats is random between users, repositories and issues) and extract these. Once we got each categorie at least once, no more need for puppeteer, we're ready to go!&lt;/p&gt;



&lt;p&gt;If you're interested, don't hesitate to take a look at this project source code and support it. There's even a plugin to update your profile readme with your latest post from &lt;strong&gt;dev.to&lt;/strong&gt;!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/lowlighter"&gt;
        lowlighter
      &lt;/a&gt; / &lt;a href="https://github.com/lowlighter/metrics"&gt;
        metrics
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      üìä An image generator with 20+ metrics about your GitHub account such as activity, community, repositories, coding habits, website performances, music played, starred topics, etc. that you can put on your profile or elsewhere!
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can provide some feedback like bug reports and suggestion for this feature on &lt;a href="https://github.com/lowlighter/metrics/discussions/229"&gt;GitHub discussions&lt;/a&gt; üôÇ&lt;/p&gt;

&lt;p&gt;Thanks a lot for reading, and don't hesitate to share your scores in comments section!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;One last bonus: can you guess &lt;strong&gt;who&lt;/strong&gt; is the most followed GitHub user? &lt;a href="https://metrics.lecoq.io/about/torvalds"&gt;Click here to know!&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>showdev</category>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>Simple CSS Animation!</title>
      <author>CristoferK</author>
      <pubDate>Mon, 19 Apr 2021 16:36:55 +0000</pubDate>
      <link>https://dev.to/cristoferk/simple-css-animation-39eg</link>
      <guid>https://dev.to/cristoferk/simple-css-animation-39eg</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/9RH_oBhMk_I"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let's start by changing the coding language to HTML. Adding the HTML template, and adding a title. I will name this Loading Animation Tutorial. Let's add a button with some text in it. Now let's go to fontawesome.com (the link is in the description) and search for a loading icon. I am gonna choose this icon. If you want you can scroll down and see other icons. Copy the HTML tag, and past it in your HTML file. Save it as HTML.html. Now let's see how it looks. But where is the icon? To can show a font awesome icon you need at the first to make an account and go to kits. And copy the code that they are giving you. After this paste it into the header. Now if we save and reload the page you can see the icon. Now let's start designing. Change the language to CSS. And let's start by removing the default margins. And now let's go to google fonts and choose a font. I will choose Roboto. You can choose whatever font you want. Let's copy this and go to the HTML file and paste this in the header section. Now let's go back to google fonts and copy the font family, and past it in the CSS file. Save this as CSS.css. Now let's add a source tag to our HTML file. Copy the link of the files and paste it in the src section. also, add a link tag with the name of the CSS file. So, now if we refresh the page the margins disappeared. Now let's style the button. I am gonna add 10-pixel padding, set the border and the outline to none. Make the background white. Make the border-radius 10px, the width 200 pixels, and the height 80. I will also add a box shadow of 20px blue. And also position, absolute. Save it and refresh the page. You see that now our button is having a design. But now let's make it to be in the center: top, fifty%, left fifty%. transform, translate -50%, -50%. Font size 25 pixels and cursor pointer. Let's see how it looks. type animation spin 25 linear. To add the animation we need to type keyframes, spin because this is the name of the animation. Zero%, tranform roteate 0deg. And now 100%, transform, rotate three hundred sixty deg. Let's save and refresh the page. Oh! I forgot! We need to make just the icon to be animated! So let's copy the animation. Write fas. If you are using another icon look there to see it is different. Change from 5 to s and add infinite. Now if we save and refresh, you can see that is working!&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>animation</category>
      <category>simple</category>
    </item>
    <item>
      <title>10 tips for beginners at programmingüòÄ</title>
      <author>Yuvraj Singh Chouhan</author>
      <pubDate>Mon, 19 Apr 2021 16:36:11 +0000</pubDate>
      <link>https://dev.to/yuvrajhere/10-tips-for-beginners-at-programming-5h9a</link>
      <guid>https://dev.to/yuvrajhere/10-tips-for-beginners-at-programming-5h9a</guid>
      <description>&lt;p&gt;In this blog, I have written some tips based on my experience from past 1 and half year trying to teach myself coding. Our views might be different. I had interest in Web Development from start, so It was easy to choose what tech stack I should choose. You might not be having a perfect domain interest yet, but that is totally fine, keep exploring! &lt;/p&gt;

&lt;p&gt;These tips are particularly for programmers but might also help beginners of most of the fields. So lets get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-not-understanding-something-is-okay"&gt;
  &lt;/a&gt;
  üìå 1. Not Understanding something is okay.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Its not very easy to learn new things, specially when we are 
a beginner. Half of what we see seems difficult and remaining half which we understand, we keep on forgetting.&lt;/li&gt;
&lt;li&gt;But, Don't bog yourself down from this, If you are facing similar situation, you are not alone. Believe in yourself and keep trying to learn. Remember, every try you give, the things will seem easier for next try.&lt;/li&gt;
&lt;li&gt;And if you are really trying hard and still not understanding something, maybe the next tip can help you.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-grow-one-step-at-a-time"&gt;
  &lt;/a&gt;
  üìå 2. Grow One step at a time.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Programming is a vast land, open to be explored.&lt;/li&gt;
&lt;li&gt;Be cautious, Don't try to consume it all at once, That is what na√Øve people do.&lt;/li&gt;
&lt;li&gt;Start with one thing, and then go to next thing, follow good roadmaps, learn things one step at a time.&lt;/li&gt;
&lt;li&gt;Don't pressure yourself into learning many things at once.&lt;/li&gt;
&lt;li&gt;While doing this, don't just put yourself into one thing totally for a long time. if you are doing this already, then, next tip is for you.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-dont-stop-exploring"&gt;
  &lt;/a&gt;
  üìå 3. Don't stop exploring.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;As I said earlier, Programming is a vast land, open to be explored, then why not explore it?&lt;/li&gt;
&lt;li&gt;As a programmer you should try to explore languages that you think you wont be using ever.&lt;/li&gt;
&lt;li&gt;By exploring, I mean, knowing what a particular language is used in, what are the benefits of using it, how is the syntax, etc.&lt;/li&gt;
&lt;li&gt;This helps you to decide which language or tech stack you are really interested in.&lt;/li&gt;
&lt;li&gt;And if you have already chosen a language or tech stack, and are on the path of learning it, then you will like the next tip.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-books-are-not-your-enemies"&gt;
  &lt;/a&gt;
  üìå 4. Books are not your enemies.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;As a beginner, I was learning just from video tutorials, not anymore, why?&lt;/li&gt;
&lt;li&gt;While video tutorials helps to keep the learning fun, many of those are just about how to do something and not how does something work inside the language.&lt;/li&gt;
&lt;li&gt;Books tend to cover these special parts of a language, they explain if something is done, how the language is understanding and executing it. This helps in making us perfect on the fundamentals and working of a language.&lt;/li&gt;
&lt;li&gt;But, what about libraries and frameworks?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5-documentation-is-your-friend"&gt;
  &lt;/a&gt;
  üìå 5. Documentation is your friend.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;When it comes to libraries and frameworks, Official documentations will be your partner in code.&lt;/li&gt;
&lt;li&gt;Most of these documentations are very nicely written and also contains many examples to start with.&lt;/li&gt;
&lt;li&gt;They cover basic things like installation to advanced uses of the library or framework.&lt;/li&gt;
&lt;li&gt;Okay, Now you have got the resources and you are ready to start learning, but don't leave yet, the next tip is a must.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#6-learn-in-public"&gt;
  &lt;/a&gt;
  üìå 6. Learn in public.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;One thing I did not do as a beginner was to learn in public.&lt;/li&gt;
&lt;li&gt;It means that whatever you learn, do let others online know about it.&lt;/li&gt;
&lt;li&gt;This helps you in connecting with people who are on same track as you. Also you might inspire someone else to learn.&lt;/li&gt;
&lt;li&gt;This also helps in getting noticed by employers, and people who can guide you.&lt;/li&gt;
&lt;li&gt;Great!, You have started learning, You are feeling motivated and are giving your best. But, not all days are similar, some days we feel tired, some days we feel bored of learning. The next tip is for those days.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#7-consistency-is-the-key"&gt;
  &lt;/a&gt;
  üìå 7. Consistency is the key.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Anyone can start learning something, start working on a project or start anything in general but ,the key to success is doing it regularly.&lt;/li&gt;
&lt;li&gt;Doing your work every day will be tough in start, but you have to build mental strength to avoid silly excuses which are bad for your learning and growth and keep on working consistently.&lt;/li&gt;
&lt;li&gt;But, Consistency doesn't mean going all out, as mentioned earlier, learn one step at a time, and taking breaks is not bad when necessary.&lt;/li&gt;
&lt;li&gt;You can do this by building a time table, a to do list or taking up challenges like &lt;strong&gt;&lt;a href="https://www.100daysofcode.com/"&gt;#100DaysOfCode&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Hurray! You have learnt a programming language or a library, what next?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#8-build-projects-yourself"&gt;
  &lt;/a&gt;
  üìå 8. Build projects yourself.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Building projects is the most important part. It gives you a real experience of using what you have learnt.&lt;/li&gt;
&lt;li&gt;Projects helps you to understand how much you know and what is missing.&lt;/li&gt;
&lt;li&gt;Also, Projects are a good way to showcase your skills on resumes or portfolios.&lt;/li&gt;
&lt;li&gt;Already building projects? lets go to next tip.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#9-be-part-of-communities-and-open-source"&gt;
  &lt;/a&gt;
  üìå 9. Be part of communities and open source.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;There are many awesome communities out there where amazing people like you learn from each other and grow together, try to join such communities, they will help you to learn and grow together.&lt;/li&gt;
&lt;li&gt;One such awesome community I am part of is &lt;strong&gt;&lt;a href="https://eddiehubcommunity.github.io/"&gt;EddieHub&lt;/a&gt;&lt;/strong&gt;. You can join us anytime on &lt;strong&gt;&lt;a href="https://discord.gg/hxpXbVv3PF"&gt;this&lt;/a&gt;&lt;/strong&gt;  discord channel.&lt;/li&gt;
&lt;li&gt;While communities are all about learning and growing together, Open Source is about working together, to build open source tools and software for the world. Open Source gives you nice exposure to working with version control systems like git, working with a team, and how big projects look. In general, it gives you experience to work on projects used by others.&lt;/li&gt;
&lt;li&gt;You have done a lot by now, Time to showcase your skills to people in industry? lets go to next and final tip for that.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#10-hackathons-make-you-better"&gt;
  &lt;/a&gt;
  üìå 10. Hackathons make you better.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;If you don't know about hackathons yet, you are missing a lot of fun.&lt;/li&gt;
&lt;li&gt;Hackathons are events where people compete with each other to build projects and grab awesome prizes for it.&lt;/li&gt;
&lt;li&gt;Hackathons are mostly of around 1-3 days where teams work on a project during the event.&lt;/li&gt;
&lt;li&gt;This builds skills like coming up with good ideas, designing a project, distributing work with teammates, working together, and fixing problems quickly.&lt;/li&gt;
&lt;li&gt;One important thing about hackathons is that, no body losses here, some gain prizes others gain experience.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These were my opinions based on my experience.üòã This was my first blog, Your feedback is most welcome.üòä I hope this blog helps you in your journey towards a programmer. &lt;/p&gt;

&lt;p&gt;‚ù§Ô∏è &lt;em&gt;Thank you for reading&lt;/em&gt; ‚ù§Ô∏è&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do like, share and follow for more such blogs. See you next time.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>discuss</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Benefits of Service Oriented Architecture</title>
      <author>Priyanshi Sharma</author>
      <pubDate>Mon, 19 Apr 2021 16:22:11 +0000</pubDate>
      <link>https://dev.to/priyanshi_sharma/benefits-of-service-oriented-architecture-2k12</link>
      <guid>https://dev.to/priyanshi_sharma/benefits-of-service-oriented-architecture-2k12</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xJm1ZyzR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfgael04p7b98qhq6c9v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xJm1ZyzR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfgael04p7b98qhq6c9v.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Service-Oriented Architecture or SOA is an architectural approach for designing and developing a &lt;a href="https://www.decipherzone.com/blog-detail/The-process-of-web-application-development"&gt;web application&lt;/a&gt;. In this approach, an application uses services available over the network via communication calls or requests.&lt;/p&gt;

&lt;p&gt;SOA includes a set of design principles that structure system development while providing means for integrating components into a unified and decentralized &lt;a href="https://www.decipherzone.com/blog-detail/benefits-microservices-architecture"&gt;architecture&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It allows developers to merge a considerable amount of facilities from existing services to the application.&lt;/p&gt;

&lt;p&gt;In &lt;a href="https://www.infoworld.com/article/2071889/what-is-service-oriented-architecture.html"&gt;SOA&lt;/a&gt;, resources are packages as ‚Äúservices‚Äù, that are self-contained and well-defined modules that offer standard business functionality and are independent of the context or state of other services.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#there-are-three-major-roles-within-serviceoriented-architecture"&gt;
  &lt;/a&gt;
  &lt;strong&gt;There are three major roles within Service-Oriented Architecture:&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In the Service-Oriented Architecture, the entire backend system is majorly divided into three parts, that are: Service Provider, Service Broker/Registry/Repository, and Service Consumer/Requester.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3X1-Pkjq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxlk1yaw06q9sufvkr87.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3X1-Pkjq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxlk1yaw06q9sufvkr87.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; Service Provider &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is a maintainer and organization of the service that makes one or more services available for others to use. The service provider creates a &lt;a href="https://www.decipherzone.com/blog-detail/api-vs-web-services"&gt;web service&lt;/a&gt; and provides information to the service registry. It has to decide the service category and trading partner agreements that are required to use the services.&lt;/p&gt;

&lt;ul&gt; &lt;li&gt; Service Broker, Service Registry or Service Repository &lt;/li&gt; &lt;/ul&gt;

&lt;p&gt;The main purpose of a service broker, service registry or service repository is to make the web service information available to the potential requester. The one who administers the broker decides the scope of it. While the public brokers can be accessed from anywhere, private brokers are only accessible by a limited number of users.&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Service Consumer/Requester&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Service Consumers can locate entries in the broker registry through different find operations for binding them to the service provider to invoke one of the services. It develops the needed component for clients to bind and use the services.&lt;/p&gt;

&lt;p&gt;Services might associate data and information gathered from other services or &lt;a href="https://www.decipherzone.com/light-weight-directory-access-protocol-solutions"&gt;build service workflows&lt;/a&gt; to fulfil the need of the consumer, which is known as service orchestration. Another essential pattern of interaction of services is service choreography that controls the coordinated service interactions without any certain point of control.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-serviceoriented-architecture-soa"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://www.decipherzone.com/blog-detail/service-oriented-architecture"&gt;Advantages of Service-Oriented Architecture (SOA)&lt;/a&gt;&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;What are the top 8 advantages of SOA? Here is the list of key benefits or advantages, you can achieve through Service-Oriented Architecture.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xj5ELTPb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvwq29ynh87zqmqw0fy0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xj5ELTPb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvwq29ynh87zqmqw0fy0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;ol&gt;

&lt;li&gt; Reliability &lt;/li&gt;

With small and independent services in the SOA, it becomes easier to test and debug the applications instead of debugging the massive code chunks, which makes the service-oriented architecture highly reliable.




&lt;li&gt; Location Independence &lt;/li&gt;

Services are located through the service registry and can be accessed through Uniform Resource Locator (URL), therefore they can change their location over time without interrupting consumer experience on the system while making SOA location independent.




&lt;li&gt; Scalability &lt;/li&gt;

As SOA enables services to run across multiple platforms, &lt;a href="https://www.decipherzone.com/blog-detail/top-programming-languages-for-desktop-apps-in-2021"&gt;programming languages&lt;/a&gt; and services, that is, services of the service-oriented architecture operate on different servers within an environment, which increases its scalability.




&lt;li&gt; Platform Independence &lt;/li&gt;

Service-Oriented Architecture permits the development of the &lt;a href="https://www.decipherzone.com/blog-detail/On-Demand-App-Development-Guide"&gt;complex application&lt;/a&gt; by integrating different services opted from different sources that make it independent of the platform.




&lt;li&gt; Lossely Coupled &lt;/li&gt;

The loose coupling concept in SOA is inspired by the object-oriented &lt;a href="https://www.decipherzone.com/blog-detail/How-to-hire-a-UI-UX-designer-"&gt;design paradigm&lt;/a&gt;, that reduces coupling between classes to cherish an environment where classes can be changed without breaking the existing relationship. SOA highly encourages the development of independent services to enhance the efficiency of the software application.




&lt;li&gt; Reusability &lt;/li&gt;

An application based on SOA is developed by accumulating small, self-contained and loosely coupled functionality services. It allows the reusability of the services in multiple applications independently without interacting with other services.




&lt;li&gt; Agility &lt;/li&gt;

The capability of gathering applications from reusable components or services, instead of rewriting and reintegrating each new development project helps &lt;a href="http://decipherzone.com/hire-developer"&gt;developers&lt;/a&gt; to design an application rapidly in response to the new business requirements which in return increases the agility of SOA.




&lt;li&gt; Easy Maintenance &lt;/li&gt;

As the service-oriented architecture is an independent unit or entity, the maintenance or updates of the application has become far easier without having to worry about other services.

&lt;p&gt;Overall, SOA is an enterprise-wide approach to architecture and it communicates to their respective functionalities or components through &lt;a href="https://en.wikipedia.org/wiki/Enterprise_service_bus"&gt;Enterprise Service Bus (ESB)&lt;/a&gt;. Moreover, the concept of SOA has become the central component of modern virtualization and cloud computing in microservices and middleware.&lt;/p&gt;


&lt;/ol&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
      <category>python</category>
    </item>
    <item>
      <title>How to Use CURL to Send API Requests?</title>
      <author>Pramod Dutta</author>
      <pubDate>Mon, 19 Apr 2021 15:25:47 +0000</pubDate>
      <link>https://dev.to/promode/how-to-use-curl-to-send-api-requests-126m</link>
      <guid>https://dev.to/promode/how-to-use-curl-to-send-api-requests-126m</guid>
      <description>&lt;p&gt;We are going to lean how you can make the HTTP Method GET, POST, PUT, PATCH and Delete Request with CURL with examples.&lt;/p&gt;

&lt;p&gt;‚ù§Ô∏è MindMap Download - &lt;a href="https://sdet.live/notes"&gt;https://sdet.live/notes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Test a REST API with curl supports over 200 command-line options. We can have zero or more of them to accompany the URL in the command.&lt;/p&gt;

&lt;p&gt;Before we use it for our purposes, let's take a look at two that would make our lives easier.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/fVmHqtjFzbA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-curl"&gt;
  &lt;/a&gt;
  What is CURL?
&lt;/h2&gt;

&lt;p&gt;curl is used in command lines or scripts to transfer data. curl is also used in cars, television sets, routers, printers, audio equipment, mobile phones, tablets, settop boxes, media players and is the Internet transfer engine for thousands of software applications in over ten billion installations.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>testing</category>
      <category>beginners</category>
      <category>curl</category>
    </item>
    <item>
      <title>Is "this" really that complicated in JavaScript?</title>
      <author>Chuck Choi</author>
      <pubDate>Mon, 19 Apr 2021 15:03:31 +0000</pubDate>
      <link>https://dev.to/chuckchoiboi/is-this-really-that-complicated-in-javascript-4o3h</link>
      <guid>https://dev.to/chuckchoiboi/is-this-really-that-complicated-in-javascript-4o3h</guid>
      <description>&lt;p&gt;&lt;code&gt;this&lt;/code&gt; keyword can be one of the most confusing monsters in JavaScript. Especially those who didn't learn JavaScript as their first programming language find it pretty confusing as it behaves differently in JS compared to the other languages. And many programmers rely on libraries like jQuery, so they learn how to use it but don't get to fully comprehend its fundamentals. Well, let me show you how &lt;code&gt;this&lt;/code&gt; isn't as confusing as you think.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-this-in-javascript"&gt;
  &lt;/a&gt;
  What is "this" in JavaScript?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this"&gt;MDN Web Doc&lt;/a&gt; explains that &lt;code&gt;this&lt;/code&gt; is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;A property of an execution context&lt;/strong&gt; (global, function or eval) that, in non‚Äìstrict mode, is always a reference to an object and in strict mode can be any value. In most cases, &lt;strong&gt;the value of &lt;code&gt;this&lt;/code&gt; is determined by how a function is called&lt;/strong&gt; (runtime binding). It can't be set by assignment during execution, and it may be different each time the function is called.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To put it simply, &lt;strong&gt;&lt;code&gt;this&lt;/code&gt; is a keyword used to reference the execution context.&lt;/strong&gt; We could think of it as "whoever it is that calls the function." So &lt;code&gt;this&lt;/code&gt; typically refers to the object that is invoking its method. In JavaScript, any value can be determined when it is defined or when the function is called. The latter is the case for &lt;code&gt;this&lt;/code&gt; keyword usually in the case of &lt;strong&gt;Implicit binding&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;With &lt;strong&gt;Implicit binding&lt;/strong&gt;, the value of &lt;code&gt;this&lt;/code&gt; is determined based on the execution context. But &lt;code&gt;this&lt;/code&gt; behaves differently if the function being invoked as an &lt;strong&gt;arrow function&lt;/strong&gt; or if you are using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode"&gt;strict mode&lt;/a&gt; introduced in ES5.  And there's &lt;strong&gt;Explicit binding&lt;/strong&gt; which you can explicitly bind &lt;code&gt;this&lt;/code&gt; keyword to an object you pass as an argument for &lt;code&gt;call()&lt;/code&gt;, &lt;code&gt;bind()&lt;/code&gt;, and &lt;code&gt;apply()&lt;/code&gt; methods. Let's dive in deeper to each of them.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#1-object-method"&gt;
  &lt;/a&gt;
  1. Object Method
&lt;/h3&gt;

&lt;p&gt;Take a look at the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;hi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Slim Shady&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;myNameIs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myNameIs&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// prints 'Slim Shady'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code's &lt;code&gt;hi&lt;/code&gt; object has a method &lt;code&gt;myNameIs&lt;/code&gt; which logs &lt;code&gt;myName&lt;/code&gt; of &lt;code&gt;this&lt;/code&gt; in the console. When &lt;code&gt;hi&lt;/code&gt; object invokes its method like the following &lt;code&gt;hi.myNameIs()&lt;/code&gt;, the object who called the function is &lt;code&gt;hi&lt;/code&gt; which makes &lt;code&gt;this&lt;/code&gt; to be implicitly bound to &lt;code&gt;hi&lt;/code&gt; object. Hence, the console will log &lt;code&gt;myName&lt;/code&gt; of the object &lt;code&gt;'Slim Shady'&lt;/code&gt;. A simple way to look at it is that &lt;strong&gt;whatever is on the left side of a dot notation of a method being invoked is the object that &lt;code&gt;this&lt;/code&gt; will be referring to.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;How about this example though:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;whatIsThis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;whatIsThis&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// prints Window {...}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hmm... we just discussed that an easy way to understand &lt;code&gt;this&lt;/code&gt; keyword in object method invocation is paying attention to the left side of dot notation. But this time, &lt;code&gt;whatIsThis&lt;/code&gt; is a function defined using function declaration, and we can execute it without an object which logs &lt;code&gt;this&lt;/code&gt; as the &lt;code&gt;window&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;Sounds pretty confusing right? Well, when we declare a function, we are making it a global function available to the global object, so the function's containing scope is the global object &lt;code&gt;Window&lt;/code&gt;. Another way to execute &lt;code&gt;whatIsThis&lt;/code&gt; is: &lt;code&gt;window.whatIsThis()&lt;/code&gt;. Look at that, &lt;code&gt;window&lt;/code&gt; is on the left side of &lt;code&gt;whatIsThis()&lt;/code&gt;! This brings me to the next point -- &lt;code&gt;this&lt;/code&gt; in global context.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#2-global-context"&gt;
  &lt;/a&gt;
  2. Global Context
&lt;/h3&gt;

&lt;p&gt;As we discussed, when a method inside an object is executed by the object, &lt;code&gt;this&lt;/code&gt; refers to the object. But what happens if I try to simply log &lt;code&gt;this&lt;/code&gt; into console? Give it a try in your browser.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// prints Window {...}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looks like &lt;code&gt;this&lt;/code&gt; refers to &lt;code&gt;window&lt;/code&gt; object. By default, &lt;code&gt;this&lt;/code&gt; refers to the global object (Window in browser environment). If we want to understand why it is, ask yourself (or Google) what the &lt;code&gt;window&lt;/code&gt; object is. If we take a look at &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Global_object"&gt;MDN Web Docs&lt;/a&gt; again, it explains:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The window object is the Global Object in the Browser. &lt;strong&gt;Any Global Variables or Functions can be accessed as properties of the window object.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When we add &lt;code&gt;this&lt;/code&gt; to your browser console, your global environment Window is executing the expression &lt;code&gt;this&lt;/code&gt;, so the window object is being referred to in this global context. &lt;/p&gt;

&lt;p&gt;Back to the Slim Shady example, here's a function created using the &lt;code&gt;myNameIs&lt;/code&gt; method in &lt;code&gt;hi&lt;/code&gt; object earlier:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;hi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Slim Shady&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;myNameIs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;hisNameIs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myNameIs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;hisNameIs&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// prints undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Interesting. &lt;code&gt;hisNameIs&lt;/code&gt; function logged &lt;code&gt;undefined&lt;/code&gt; in the console. Let's try to understand what happened at the line &lt;code&gt;var hisNameIs = hi.myNameIs&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;First, &lt;code&gt;hi.myNameIs&lt;/code&gt; is a method -- a property containing a function definition. We simply declared a &lt;strong&gt;global function&lt;/strong&gt; named &lt;code&gt;hisNameIs&lt;/code&gt; by using &lt;code&gt;var&lt;/code&gt; and initialized it with the function definition from &lt;code&gt;hi&lt;/code&gt; object passed.&lt;/p&gt;

&lt;p&gt;Second, global functions are stored as properties in the &lt;code&gt;window&lt;/code&gt; object. When we invoke the global function &lt;code&gt;hisNameIs()&lt;/code&gt;, it is the same as &lt;code&gt;window.hisNameIs()&lt;/code&gt;. The window is the object that is executing its method &lt;code&gt;hisNameIs&lt;/code&gt;, so &lt;code&gt;this&lt;/code&gt; is now referring to the &lt;code&gt;window&lt;/code&gt; object. window object does not have a property named &lt;code&gt;myName&lt;/code&gt;, so it will return undefined.&lt;/p&gt;

&lt;p&gt;In conclusion, &lt;strong&gt;&lt;code&gt;this&lt;/code&gt; will refer to the global object in global context.&lt;/strong&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-strict-mode"&gt;
  &lt;/a&gt;
  3. Strict Mode
&lt;/h3&gt;

&lt;p&gt;JavaScript was first introduced in 1995 as &lt;em&gt;Mocha&lt;/em&gt; which took 10 days to develop by a Netscape programmer named &lt;strong&gt;Brandon Eich&lt;/strong&gt;. It would be surprising if the language came out to be perfect in 10 days of development right? The language has evolved to today's version 6 (ES6), with the language designers' attempt to correct the flaws in the past versions. Its legacy features were not possible to be removed in order to maintain the backward compatibility, which is why &lt;em&gt;strict mode&lt;/em&gt; was introduced in ES5 to opt in to correct the early language flaws. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;this&lt;/code&gt; keyword is one of them. It behaves differently when you opt into &lt;em&gt;strict mode&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;whatIsThis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;whatIsThis&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// prints undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;em&gt;strict mode&lt;/em&gt;, &lt;code&gt;this&lt;/code&gt; keyword will default to undefined in function invocation. It is likely that &lt;code&gt;this&lt;/code&gt; keyword was not meant to point to the &lt;code&gt;window&lt;/code&gt; object, as you can simply use &lt;code&gt;window&lt;/code&gt; keyword to do so.&lt;/p&gt;

&lt;p&gt;In ES5, &lt;code&gt;bind()&lt;/code&gt; method was introduced to explicitly set the function's &lt;code&gt;this&lt;/code&gt; regardless of how it is called. You can pass an object as an argument when using &lt;code&gt;bind()&lt;/code&gt; method, and the function's &lt;code&gt;this&lt;/code&gt; keyword will refer to the object no matter how the function is invoked. Bringing back the code from earlier using &lt;code&gt;bind()&lt;/code&gt; method this time, we can now create a new function with object passed explicitly like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;hi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Slim Shady&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;myNameIs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;hisNameIs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myNameIs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;hisNameIs&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// prints Slim Shady&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Boom! Even with the strict mode, &lt;code&gt;hisNameIs&lt;/code&gt; function's &lt;code&gt;this&lt;/code&gt; will refer to the &lt;code&gt;hi&lt;/code&gt; object passed no matter what. &lt;code&gt;call()&lt;/code&gt; and &lt;code&gt;apply()&lt;/code&gt; are basically the same which you can pass additional arguments to the function. The three methods are slightly different which you can read more about in this &lt;a href="https://medium.com/@omergoldberg/javascript-call-apply-and-bind-e5c27301f7bb"&gt;blog post&lt;/a&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#4-arrow-function"&gt;
  &lt;/a&gt;
  4. Arrow function
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;this&lt;/code&gt; inside an &lt;strong&gt;arrow function&lt;/strong&gt; behaves a bit differently compared to the one inside a function declaration or a function expression. Arrow function was introduced in ES6 as an alternative to a traditional way of defining function. Let's compare these two objects using the different versions of function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// using regular function as callback inside forEach()&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;oldPhone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Chuck&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;apps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Facebook&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;YouTube&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Uber&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;useApps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; is using &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="c1"&gt;// this refers to the window object&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;oldPhone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useApps&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// prints undefined is using Facebook&lt;/span&gt;
&lt;span class="c1"&gt;// prints undefined is using YouTube&lt;/span&gt;
&lt;span class="c1"&gt;// prints undefined is using Uber&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;oldphone.useApps&lt;/code&gt; function iterates each of the &lt;code&gt;apps&lt;/code&gt; using &lt;code&gt;forEach&lt;/code&gt; with a regular function passed as a callback function. However, the callback function inside &lt;code&gt;forEach&lt;/code&gt; method does not bind to the original object. Instead, it will bind to the global &lt;code&gt;window&lt;/code&gt; object thus &lt;code&gt;this.owner&lt;/code&gt; returns &lt;code&gt;undefined&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;This could be very inconvenient if we were doing something similar as a &lt;code&gt;class&lt;/code&gt;. There are two ways to fix it though, &lt;code&gt;forEach()&lt;/code&gt; method takes an optional argument &lt;code&gt;thisArg&lt;/code&gt; in addition to the callback function like this: &lt;code&gt;arr.forEach(callback[, thisArg])&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Or we can use an &lt;strong&gt;arrow function&lt;/strong&gt; as a callback to utilize its &lt;em&gt;lexical scoping&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// using arrow function as callback inside forEach()&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;newPhone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Chuck&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;apps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Facebook&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;YouTube&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Uber&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;useApps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; is using &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;newPhone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useApps&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// prints Chuck is using Facebook&lt;/span&gt;
&lt;span class="c1"&gt;// prints Chuck is using YouTube&lt;/span&gt;
&lt;span class="c1"&gt;// prints Chuck is using Uber&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Voila! This time the callback function's &lt;code&gt;this&lt;/code&gt; referred to &lt;code&gt;newPhone&lt;/code&gt;, and logged &lt;code&gt;this.owner&lt;/code&gt; as &lt;code&gt;'Chuck'&lt;/code&gt;. Arrow function allows you to write functions in a cleaner way, and they have &lt;strong&gt;lexical scope&lt;/strong&gt; I mentioned earlier which means that they will inherit the scope from its parent. &lt;/p&gt;

&lt;p&gt;The callback function nested inside the &lt;code&gt;forEach&lt;/code&gt; method above inherited the scope from its parent &lt;code&gt;useApps&lt;/code&gt; which is &lt;code&gt;newPhone&lt;/code&gt; object. Because of this nature, &lt;strong&gt;The value of &lt;code&gt;this&lt;/code&gt; inside an arrow function is determined when that arrow function is defined&lt;/strong&gt; unlike the typical situations from earlier. I personally think that &lt;code&gt;this&lt;/code&gt; inside an arrow function is the most confusing part of &lt;code&gt;this&lt;/code&gt; keyword, but it simply inherits the scope from its parent.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;bind()&lt;/code&gt;, &lt;code&gt;call()&lt;/code&gt;, and &lt;code&gt;apply()&lt;/code&gt; are not compatible with arrow functions. Arrow functions will inherit the scope from its parent regardless.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;To conclude, let's summarize how &lt;code&gt;this&lt;/code&gt; works in JavaScript:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;this&lt;/code&gt; is a keyword used to reference the execution context&lt;/li&gt;
&lt;li&gt;In &lt;strong&gt;method invocation&lt;/strong&gt;, the object that is invoking the method would be the execution context &lt;code&gt;this&lt;/code&gt; will refer to&lt;/li&gt;
&lt;li&gt;In global context like regular function invocation, &lt;code&gt;this&lt;/code&gt; will default to the global object&lt;/li&gt;
&lt;li&gt;In &lt;em&gt;strict mode&lt;/em&gt;, &lt;code&gt;this&lt;/code&gt; keyword will default to undefined in regular function invocation.&lt;/li&gt;
&lt;li&gt;You can use &lt;code&gt;bind()&lt;/code&gt;, &lt;code&gt;call()&lt;/code&gt;, or &lt;code&gt;apply()&lt;/code&gt; to explicitly bind an object to a function&lt;/li&gt;
&lt;li&gt;An arrow function will inherit the scope from its parent, so &lt;code&gt;this&lt;/code&gt; inside an arrow function will follow its parent's &lt;code&gt;this&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;bind()&lt;/code&gt;, &lt;code&gt;call()&lt;/code&gt;, and &lt;code&gt;apply()&lt;/code&gt; do not work for arrow functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope this was a helpful resource for you to understand how &lt;code&gt;this&lt;/code&gt; works in JavaScript. Feel free to comment below if you have any questions or notice any inaccurate information and I will respond as soon as possible :)&lt;/p&gt;

&lt;p&gt;Follow me on Clubhouse &lt;a class="mentioned-user" href="https://dev.to/chuckchoiboi"&gt;@chuckchoiboi&lt;/a&gt;
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>oop</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to start with Express</title>
      <author>masuggs515</author>
      <pubDate>Mon, 19 Apr 2021 14:46:25 +0000</pubDate>
      <link>https://dev.to/msuggs_coding/how-to-start-with-express-192i</link>
      <guid>https://dev.to/msuggs_coding/how-to-start-with-express-192i</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Every new step in my career as a developer I feel like I have to google too much to find simple answers. Documentation for many frameworks or dependencies are extremely convoluted and feel like they take longer to read, than the project would take to complete. The purpose of these blogs is for me to show a basic lay out to help beginners start with a new program. &lt;/p&gt;

&lt;p&gt;Side-note: I use WSL with Ubuntu so some tips and commands I mention may not be the same for everyone else.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#nodejs"&gt;
  &lt;/a&gt;
  NodeJS
&lt;/h4&gt;

&lt;p&gt;I am going to assume anyone starting with Express already has NodeJS, but if you do not then these links will get you on the right track.&lt;/p&gt;

&lt;p&gt;Linux download with a package manager &lt;strong&gt;&lt;a href="https://nodejs.org/en/download/package-manager/"&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Windows and Mac downloads &lt;strong&gt;&lt;a href="https://nodejs.org/en/download/"&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#starting-out"&gt;
  &lt;/a&gt;
  Starting Out
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#setting-up-node"&gt;
  &lt;/a&gt;
  Setting up Node
&lt;/h4&gt;

&lt;p&gt;Once you have NodeJS, we are ready to get started with Express. First we need to install express in a new directory. Open up a new directory and name it whatever your heart desires. First step is to initialize an npm(node package manager) so that any dependencies we download will only be for this one project (If you have used other languages that create a virtual environment, this is essentially what we are doing). Only command needed for this is &lt;em&gt;npm init&lt;/em&gt;.&lt;br&gt;
Command will look like this:&lt;br&gt;
&lt;code&gt;$ npm init&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And a questionnaire about file name and other options will pop up in your CLI. If you have no preference or reason to change any of the default information you can just press Enter until complete.&lt;br&gt;
That's what I did below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Q_3tXlY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4e9169b9ozdhanoxstdu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Q_3tXlY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4e9169b9ozdhanoxstdu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After running this command your directory should contain a package.json file that will look like the below example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iRjGTdrw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uns1jx2w9uoysixyux5y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iRjGTdrw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uns1jx2w9uoysixyux5y.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#installing-and-importing-express"&gt;
  &lt;/a&gt;
  Installing and Importing Express
&lt;/h4&gt;

&lt;p&gt;Once you have Node set up it is now time to install and set up express. Just like any node package we will just use &lt;em&gt;npm i express&lt;/em&gt; to download this in to our current project. The command in your CLI and the updated package.json examples are below.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ npm i express&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eRzFYp3D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xv8d0pegodcvzn4oizs2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eRzFYp3D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xv8d0pegodcvzn4oizs2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;small&gt;&lt;em&gt;If you are using Ubuntu and run in to permission errors when trying to install packages, you can use&lt;/em&gt; &lt;strong&gt;&lt;em&gt;sudo&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;in front of any&lt;/em&gt; &lt;strong&gt;&lt;em&gt;npm i&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;command.&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Now that we have express in our package.json, we need to import it in to our file. Create an app.js file and the first line will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;small&gt;&lt;em&gt;If you know ES6 and want to import the file instead of using require you can easily put import express from 'express'; instead of the above example. Be wary as some browsers do not support ES6 yet.&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Now we can instantiate express by assigning it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const app = express()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At the bottom of the app.js file we will need to set up an app.listen() to set up a port for the server to run on. Most commonly used port with express is 3000, but this can be any port you choose.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.listen(3000, ()=&amp;gt;{
    console.log('Server at port 3000');
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can start the server with running &lt;code&gt;$ node app.js&lt;/code&gt; in your CLI and opening up a browser to 'localhost:3000/'. You should also see your console.log() in your CLI to confirm your server has started.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#setting-up-routes"&gt;
  &lt;/a&gt;
  Setting up routes
&lt;/h4&gt;

&lt;p&gt;At this point we can start creating routes (Remember to use RESTful conventions). All routes can be created with app.get(), app.post(), etc... The common method used will be name(path, callback) where name is the request method used (get, post, delete, etc...). The first value passed in to app.get will be a string of the path. All will begin with '/'. The callback function will pas in a request and a response variable, that can be used to retrieve data from the url query or paraments, and respond with data based on the request. To respond with different data types we can use res.send() or res.json(). Below is an example of a common home route.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.get('/', (req, res)=&amp;gt;{
    return res.send('Hello World');
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will return a basic string of 'Hello World' which while boring is the first stepping stone to building and understanding a route with express. Creating a route that can pass a parameter while performing an HTTP GET operation can be created with '/:name'. The semi-colons allow this to be used as a variable to pull information from using request.params. When visiting 'localhost:3000/testName' with the below route you can pull 'testName' from the parameter string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.get('/:name', (req, res) =&amp;gt;{
    const {name} = req.params;
    return res.send(name);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above example will return whatever is in the url route such as 'testName' in the above example. To retrieve data from a query string, the syntax will be very similar, but instead of using req.params, we will use req.query. The below example will return the same string as the above example. The only difference is where the data is pulled from.&lt;/p&gt;

&lt;p&gt;Visit : localhost:3000/name?name=testName&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.get('/name', (req, res) =&amp;gt;{
    const {name} = req.query;
    return res.send(name);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whatever is passed in the the query string '?name=testName' will be returned with req.query. What you do with this data is endless.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-closing"&gt;
  &lt;/a&gt;
  In Closing
&lt;/h2&gt;

&lt;p&gt;This is the beginning of how to set up use routes with express. There are many options that can be used to retrieve form data or json data as examples, and obviously this only shows GET routes. This is written to help a beginner get started with express and set up an easy style and layout to begin creating their own back-end in easy to understand language.&lt;/p&gt;

</description>
      <category>express</category>
      <category>node</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How I got a full-time development job as a self-taught developer at 18 years old</title>
      <author>Jack Kelly</author>
      <pubDate>Mon, 19 Apr 2021 14:33:33 +0000</pubDate>
      <link>https://dev.to/jackrkelly/how-i-got-a-full-time-development-job-as-a-self-taught-developer-at-18-years-old-4iph</link>
      <guid>https://dev.to/jackrkelly/how-i-got-a-full-time-development-job-as-a-self-taught-developer-at-18-years-old-4iph</guid>
      <description>&lt;p&gt;My name is Jack Kelly, I am an 18-year-old self-taught developer based out of Kansas. Since 2 years ago my primary goal has been to get a full-time job as a self-taught developer with no college degree. I was told by countless people that I would have no chance without a degree and that it wouldn't be possible.&lt;/p&gt;

&lt;p&gt;My web development journey all started once I got to high school, there is a multi-media program at my school and there are 4 different strands, one of those being web design. Web design really sparked my interest in web development but this class was more for content management systems and UI. I was more interested in the development side of things, so my awesome web teacher allowed me to take my own path.&lt;/p&gt;

&lt;p&gt;I started down my own path, I was following many curriculums such as FreeCodeCamp or some courses on Scrimba to learn about certain technologies. I spent most of my weekends learning and I think I forgot what friends and fun were. This is one thing I will say, though my situation worked out from my hard work. Make sure you still enjoy life, don't let the process take over your life. &lt;/p&gt;

&lt;p&gt;In my sophomore year of high school, I told my web-design teacher that my goal was to get a job out of high school. Now we look back and laugh at this, but he probably thought I had ambitious goals, but regardless he supported me and my goals. &lt;/p&gt;

&lt;p&gt;In my junior year of high school, I was at a hackathon for my school and there were some engineers from Cerner who told me I would need a college degree if I wanted to work there. This was really demotivating and it turned out to be true, this company did not accept self-taught developers with no degree, but it didn't matter.&lt;/p&gt;

&lt;p&gt;Then an opportunity came up through my school for my senior year that there was a Software Engineering internship at Cerner. I saw this opportunity and went ahead and applied for it with my fingers crossed as this would be a huge opportunity for me. &lt;/p&gt;

&lt;p&gt;I went into the interview super nervous, and actually, the interview was more difficult than I expected. I got asked questions about data structures and projects I had worked on. Bear in mind this is a high school level internship.&lt;/p&gt;

&lt;p&gt;It ended up working out, I got the internship! I was super excited to get this opportunity, this is around the time covid-19 started so I didn't get to work in the awesome office they had. See the image below of where I didn't get to work in person haha.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CND8ZQEq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djhpdbet7bi0zpdubi11.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CND8ZQEq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djhpdbet7bi0zpdubi11.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The internship started, then I got to work with some pretty fun technologies and this experience introduced me to some enterprise tools such as JIRA and Jenkins. This is one thing that self-taught developers are missing when it comes to getting a job, a lot of companies are expecting you have experience with CI/CD tools and task management tools.&lt;/p&gt;

&lt;p&gt;I also worked with tools I already had experience with such as React, Jest, and Javascript. I got to learn Ruby and Ruby on Rails, Groovy, and a couple of other technologies which was a great experience.&lt;/p&gt;

&lt;p&gt;This internship was great, but it was still an internship. I got in contact with my team lead and asked if it was possible to get a full-time position at Cerner with no degree. And the engineers at Cerner which I met at the hackathon were right, you need a degree to work there full-time. I started applying to jobs and was interviewing like crazy. &lt;/p&gt;

&lt;p&gt;Interviewing is definitely a skill, you're not going to start interviewing and be a pro your first one. I bombed a couple of interviews but started to understand the game. I had 15 interviews one week, it was getting tiring. &lt;/p&gt;

&lt;p&gt;But at last, I finally got an offer from Yellow as a Web Developer I. The director thought my journey as a self-taught developer was cool and didn't care that I didn't have a computer science degree. &lt;/p&gt;

&lt;p&gt;Since I joined Yellow, I have been interviewing candidates. Including senior candidates as well which has been a great but crazy experience. I wouldn't have expected to be the interviewer so quickly after being the interviewee. &lt;/p&gt;

&lt;p&gt;I have been learning so much in my new position and while interviewing candidates. I have a running list of "things I don't know". This list has been ever-growing and it has been great! I think my experience interviewing will be so much better having been on the other side and after I have learned so much more.&lt;/p&gt;

&lt;p&gt;Overall, things worked out. My hard work paid off and I got a full-time job before graduating high school. I had to trudge through the mud a bit with school, my internship, coding in my free time, and applying to jobs. But it was all worth it and I couldn't be happier.&lt;/p&gt;

&lt;p&gt;My first closing piece of advice is very cliche, but it couldn't be more true. People will tell you that you can't do something, which is hard. But there are some things that just haven't been done often and no one is familiar with it. My parents were quite nervous about the path I was taking and there was a lot of uncertainty. &lt;/p&gt;

&lt;p&gt;And even once you land that job or reach your goal, people may be jealous and that could bring a lot of negativity. You just have to be there for yourself and understand what you have done and how impressive that is. &lt;/p&gt;

&lt;p&gt;My second closing piece of advice is to not give up, again very cliche. But just before I got the job offer from Yellow, I was on the verge of giving up. I felt like I had worked so hard and it had amounted to nothing so far, the feeling of relief when I got that offer, started my first day, and got the first paycheck. It finally felt real, just imagine if I gave up weeks before.&lt;/p&gt;

&lt;p&gt;Thanks for reading this article, hopefully it was helpful for some of you. If any self-taught developers or any aspiring self-taught developers have any questions or would like some advice, I would be more than happy to help out. Feel free to reach out on discord (JackRKelly#7129) or somewhere else.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>The React Router Cheatsheet: Everything You Should Know</title>
      <author>Reed Barger</author>
      <pubDate>Mon, 19 Apr 2021 14:30:14 +0000</pubDate>
      <link>https://dev.to/reedbarger/the-react-router-cheatsheet-everything-you-should-know-23h5</link>
      <guid>https://dev.to/reedbarger/the-react-router-cheatsheet-everything-you-should-know-23h5</guid>
      <description>&lt;p&gt;If you're building React applications for the web, you're going to need to use a dedicated router to display pages and navigate your user around them.&lt;/p&gt;

&lt;p&gt;That's why today we're going to go over the most popular and most powerful router for React applications--React Router.&lt;/p&gt;

&lt;p&gt;We're going to go over 11 of the essential features you need to know if you're using React Router in your projects today, specifically for the web using the package &lt;code&gt;react-router-dom&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#want-your-own-copy%E2%80%AC"&gt;
  &lt;/a&gt;
  Want Your Own Copy?‚Ä¨ üìÑ
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="http://bit.ly/react-router-cheatsheet"&gt;Click here to download the cheatsheet in PDF format&lt;/a&gt;&lt;/strong&gt; (it takes 5 seconds).&lt;/p&gt;

&lt;p&gt;It includes all of the essential information here as a convenient PDF guide.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-react-router"&gt;
  &lt;/a&gt;
  Install React Router
&lt;/h2&gt;

&lt;p&gt;The very first step to using React Router is to install the appropriate package.&lt;/p&gt;

&lt;p&gt;They are technically three different packages: React Router, React Router DOM, and React Router Native.&lt;/p&gt;

&lt;p&gt;The primary difference between them lies in their usage. React Router DOM is for web applications and React Router Native is for mobile applications made with React Native.&lt;/p&gt;

&lt;p&gt;The first thing that you'll need to do is install React Router DOM using npm (or yarn):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;react-router-dom
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#basic-router-setup"&gt;
  &lt;/a&gt;
  Basic Router Setup
&lt;/h2&gt;

&lt;p&gt;Once it's installed, we can bring in our first component which is required to use React router and this is called BrowserRouter.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are multiple types of routers that &lt;code&gt;react-router-dom&lt;/code&gt; provides aside from BrowserRouter which we won't go into. It's a common practice to alias (rename) BrowserRoute as simply 'Router' when it is imported.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we want to provide routes within our entire application it needs to be wrapped around our entire component tree. That's why you will usually see it wrapped around or within the main app component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* routes go here, as children */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the primary function of the BrowserRouter: to be able to declare individual routes within our application.&lt;/p&gt;

&lt;p&gt;Note that any router-specific data cannot be accessed outside of the Router component. For example, we cannot access history data outside of the router (i.e. with the &lt;code&gt;useHistory&lt;/code&gt; hook) and we cannot create a Route outside of a Router component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#route-component"&gt;
  &lt;/a&gt;
  Route Component
&lt;/h2&gt;

&lt;p&gt;The next component is the Route component.&lt;/p&gt;

&lt;p&gt;We declare routes within the Router component as children. We can declare as many routes as we like and we need to provide at least two props to each route, &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;component&lt;/code&gt; (or &lt;code&gt;render&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;about&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&amp;gt;  &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;path&lt;/code&gt; prop specifies on what path of our app a given route is located.&lt;/p&gt;

&lt;p&gt;For an about page, for example, we might want that route to be accessible on the path '/about'.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;render&lt;/code&gt; or &lt;code&gt;component&lt;/code&gt; prop are used to display a specific component for our path.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;component&lt;/code&gt; props can only receives a reference to a given component, whereas &lt;code&gt;render&lt;/code&gt; is more typically used for applying some conditional logic to render one route one component or another. For render you can either use a reference to a component, or use a function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;home&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;about&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's worth noting that you can potentially drop the &lt;code&gt;render&lt;/code&gt; or &lt;code&gt;component&lt;/code&gt; prop entirely and use the component that you want to associate with a given route as a child of Route:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Route&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, if want a component (such as a navbar) to be visible on every page, put it still within the browser router, but above (or below) the declared routes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Navbar&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Navbar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// visible on every page&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;navbar&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;home&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;about&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#switch-component"&gt;
  &lt;/a&gt;
  Switch Component
&lt;/h2&gt;

&lt;p&gt;When we get begin to add multiple routes, we'll notice something strange.&lt;/p&gt;

&lt;p&gt;Let's say we have a route for the home page and about page. Even though we specify two different paths, '/' and '/about', when I visit the about page we'll see both the home and the about components.&lt;/p&gt;

&lt;p&gt;We can fix this with the exact prop, on the home route to make sure that our router matches exactly the path '/' instead of '/about':&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Navbar&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;exact&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Switch&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When it comes to switching between different routes that our router should show there is in fact a dedicated component that you should be using if you have multiple routes within your router and that is the Switch component.&lt;/p&gt;

&lt;p&gt;The switch component should be included within the router and we can place all of our routes within it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Navbar&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;exact&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Switch&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The switch component looks through all of its child routes and it displays the first one whose path matches the current url.&lt;/p&gt;

&lt;p&gt;This component is what we want to use in most cases for most applications, because we have multiple routes and multiple plate pages in our app but we only want to show one page at a time.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If for some reason you do want multiple pages to be displayed at the same time, you might consider not using the switch component.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#404-route"&gt;
  &lt;/a&gt;
  404 Route
&lt;/h2&gt;

&lt;p&gt;If we attempt to go to a path that doesn't exist in our application, what are we going to see?&lt;/p&gt;

&lt;p&gt;We're not going to see anything if we don't have a route corresponding to that. How do we make a catch-all route?&lt;/p&gt;

&lt;p&gt;If a user attempts to go to a page for which we don't have a defined route, we can create a route and then set the path to an asterisk *:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Navbar&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;NotFound&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Switch&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;NotFound&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;You&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="nx"&gt;landed&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;doesn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;t exist&amp;lt;/&amp;gt;;
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will match any attempt to visit a page that doesn't exist and we can connect it to a not found component to tell our users have "landed on a page that doesn't exist."&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#link-component"&gt;
  &lt;/a&gt;
  Link Component
&lt;/h2&gt;

&lt;p&gt;Let's say that within our NavBar, we actually want to create some links so we can move around our application more easily instead of having to change the url manually in the browser.&lt;/p&gt;

&lt;p&gt;We can do so with another special component from React Router DOM called the Link component. It accepts the &lt;code&gt;to&lt;/code&gt; prop, which specifies where we want the link to navigate our user to. In our case, we might have a home and about link:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Navbar&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Switch&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Navbar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;nav&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/nav&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The link component allows us to provide some inline styles just like any standard React component. It also gives us a helpful &lt;code&gt;component&lt;/code&gt; prop, so we can set our link as our own custom component for even easier styling.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#navlink-component"&gt;
  &lt;/a&gt;
  NavLink Component
&lt;/h2&gt;

&lt;p&gt;Additionally, React Router DOM gives us a NavLink component which is helpful. in the event that we want to apply some special styles.&lt;/p&gt;

&lt;p&gt;If we are on the current path that the link points to, this allows us to create some active link styles to tell our users, by looking at our link, what page they're on.&lt;/p&gt;

&lt;p&gt;For example, if our users are on the homepage, we could tell them as much by using the &lt;code&gt;activeStyle&lt;/code&gt; prop to make our link bold and red when they're on the homepage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;NavLink&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Navbar&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Switch&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Navbar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;nav&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NavLink&lt;/span&gt;
        &lt;span class="nx"&gt;activeStyle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
          &lt;span class="na"&gt;fontWeight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bold&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
        &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Home&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/NavLink&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NavLink&lt;/span&gt; &lt;span class="nx"&gt;activeClassName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;About&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/NavLink&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/nav&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is also an &lt;code&gt;activeClassName&lt;/code&gt; prop which can be set as well if you do not want to include inline styles or want more reusable styles to perform the same function as &lt;code&gt;activeStyle&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#redirect-component"&gt;
  &lt;/a&gt;
  Redirect Component
&lt;/h2&gt;

&lt;p&gt;Another very helpful component that React Router DOM gives us is the redirect component.&lt;/p&gt;

&lt;p&gt;This may seem strange to have a component that performs a function of redirecting our user when it's displayed, but this is very functional. Whenever we're using something like a private route and we have a condition in which the user is not authenticated, we want to redirect them back to the login page.&lt;/p&gt;

&lt;p&gt;Here is an example of an implementation of a private route component that ensures that a user is authenticated to show them a particular route has been declared with this component.&lt;/p&gt;

&lt;p&gt;Otherwise, if they're not authenticated, they will be redirected to a public route (presumably a route to login) once the redirect component is displayed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Redirect&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;exact&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PrivateRoute&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/hidden&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Hidden&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Switch&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;PrivateRoute&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// useAuth is some custom hook to get the current user's auth state&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isAuth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAuth&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt;
      &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;isAuth&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt; : &amp;lt;Redirect to="/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; /&amp;gt;
      }
    /&amp;gt;
  );
}

function Home() {
  return &amp;lt;&amp;gt;home&amp;lt;/&amp;gt;;
}

function Hidden() {
  return &amp;lt;&amp;gt;hidden&amp;lt;/&amp;gt;;
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The redirect component is very simple to use, very declarative and allows us to see the great benefit of React Router DOM being component based just like everything in React.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usehistory-hook"&gt;
  &lt;/a&gt;
  useHistory Hook
&lt;/h2&gt;

&lt;p&gt;On top of all of these powerful components, we have some very useful hooks that React Router DOM gives us.&lt;/p&gt;

&lt;p&gt;They are mainly helpful by supplying additional information that we can use within our components. They can be called as normal React hooks for which we can use their values exactly as we like.&lt;/p&gt;

&lt;p&gt;Perhaps the most powerful hook is the &lt;code&gt;useHistory&lt;/code&gt; hook. We can call it up at the top of any component that is declared within our router component and get back &lt;code&gt;history&lt;/code&gt; data, which includes information such as the location associated with our component.&lt;/p&gt;

&lt;p&gt;This tells us all about where the user currently is, such as the pathname that they're on, as well as any query parameters that might be appended to our url. All of the location data is accessible from &lt;code&gt;history.location&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useHistory&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;history&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useHistory&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// '/about'&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;about&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Additionally, the history object directly includes helpful methods that allows us to programmatically direct our user to different pages in our app.&lt;/p&gt;

&lt;p&gt;This is very helpful in, for example, for redirecting our user after logging in, or in any situation where we need to take a user from one page to another.&lt;/p&gt;

&lt;p&gt;We can push users from one page to another using &lt;code&gt;history.push&lt;/code&gt;. When we use the push method, we just need to supply the path that we want to take our users to using this method adds this new page on to the stack (so to speak) of our history:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useHistory&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;history&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useHistory&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// '/about'&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;about&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Go&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;home&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also redirect our users with &lt;code&gt;history.replace&lt;/code&gt;, which also accepts a path value, but clears out everything in history, after the navigation is performed. This is helpful for situations where going back in history is no longer needed, such as after users have been logged out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#uselocation-hook"&gt;
  &lt;/a&gt;
  useLocation Hook
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;useLocation&lt;/code&gt; hook includes all of the same information that the &lt;code&gt;useHistory&lt;/code&gt; hook does.&lt;/p&gt;

&lt;p&gt;This is important to note that if you need both location data and to use history to programmatically navigate your user, make sure to useHistory. However, if you only want location data, all you need to do is call useLocation or get back all of the location data on an object that is identical to the data provided on &lt;code&gt;history. location&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useLocation&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLocation&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// '/about'&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;The&lt;/span&gt; &lt;span class="nx"&gt;about&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#useparams-hook-dynamic-routes"&gt;
  &lt;/a&gt;
  useParams Hook + Dynamic Routes
&lt;/h2&gt;

&lt;p&gt;One thing that we didn't cover when it comes to routes is that we can naturally create dynamic routes, meaning routes that are not fixed and determined, but can be any number of characters.&lt;/p&gt;

&lt;p&gt;Dynamic routes are helpful in situations where we have let's say a blog post with a unique slug. How do we make sure that we display the appropriate data and appropriate components, given that our blog post slug can be completely different?&lt;/p&gt;

&lt;p&gt;To declare a route parameter on a given route, it must be prefixed with a colon &lt;code&gt;:&lt;/code&gt;. If I wanted to create a dynamic route, "/blog/:postSlug", for a blog post component, it might look like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;exact&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/blog/:postSlug&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;BlogPost&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Switch&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;home&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;BlogPost&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;blog&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're now matching the appropriate component or whatever the slug is, but within our BlogPost component, how do we receive that post slug data?&lt;/p&gt;

&lt;p&gt;We can access any route params of a declared route with its associated component using the &lt;code&gt;useParams&lt;/code&gt; hook.&lt;/p&gt;

&lt;p&gt;useParams will return an object which will contain properties that match our route params (in this case, &lt;code&gt;postSlug&lt;/code&gt;). We can use object destructuring to immediately access and declare as a variable with the name &lt;code&gt;postSlug&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useParams&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;exact&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/blog/:postSlug&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;BlogPost&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Switch&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;home&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;BlogPost&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPost&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;postSlug&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useParams&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://jsonplaceholder.typicode.com/posts/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;postSlug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;postSlug&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we go to the route '/blog/my-blog-post', I can access the string 'my-blog-post' on the &lt;code&gt;postSlug&lt;/code&gt; variable and fetch that post's associated data within useEffect.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useroutematch-hook"&gt;
  &lt;/a&gt;
  useRouteMatch Hook
&lt;/h2&gt;

&lt;p&gt;If we want to know whether the given component is on a certain page, we can use the &lt;code&gt;useRouteMatch&lt;/code&gt; hook.&lt;/p&gt;

&lt;p&gt;For example, within our blog post, to see the page that we're on matches the route "/blog/:postSlug" can get back a boolean value that will tell us if the route that we're on matches the pattern that we specified:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouteMatch&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;BlogPost&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isBlogPostRoute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouteMatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/blog/:postSlug&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// display, hide content, or do something else&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is helpful in conditions in which we want to show something specific, based off of whether we're on a certain route or not.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#want-to-keep-this-guide-for-future-reference%E2%80%AC"&gt;
  &lt;/a&gt;
  Want to keep this guide for future reference?‚Ä¨
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="http://bit.ly/react-router-cheatsheet"&gt;Click here to download the cheatsheet as a helpful PDF&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here are 3 quick wins you get when you grab the downloadable version:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  You‚Äôll get tons of copyable code snippets for easy reuse in your own projects.&lt;/li&gt;
&lt;li&gt;  It is a great reference guide to strengthen your skills as a React developer and for job interviews.&lt;/li&gt;
&lt;li&gt;  You can take, use, print, read, and re-read this guide literally anywhere that you like.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Social Media Button Hover Using HTML &amp; CSS</title>
      <author>Nikhil Bobade </author>
      <pubDate>Mon, 19 Apr 2021 14:28:44 +0000</pubDate>
      <link>https://dev.to/nikhil27b/social-media-button-hover-using-html-css-49b5</link>
      <guid>https://dev.to/nikhil27b/social-media-button-hover-using-html-css-49b5</guid>
      <description>&lt;p&gt;Hello, today I created an Amazing social media hover button Using HTML &amp;amp; CSS. when you hover on this button this shows as a sort profile card I hope you like this also comments about your thoughts.&lt;/p&gt;

&lt;p&gt;For more content follow me on Instagram  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to more support me then buy me a &lt;a href="https://www.buymeacoffee.com/nikhilbobade27"&gt;coffee&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/PoWdajw?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>#8 of 100DaysOfCode </title>
      <author>atulit023</author>
      <pubDate>Mon, 19 Apr 2021 14:28:32 +0000</pubDate>
      <link>https://dev.to/icecoffee/8-of-100daysofcode-24ng</link>
      <guid>https://dev.to/icecoffee/8-of-100daysofcode-24ng</guid>
      <description>&lt;p&gt;Eighth Day,&lt;br&gt;
Today I am revisiting react states in greater detail.&lt;/p&gt;

&lt;p&gt;And here is what I have learned so far.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#eight-ways-to-handle-state-in-a-react-application"&gt;
  &lt;/a&gt;
  Eight ways to handle state in a React application
&lt;/h1&gt;
&lt;h3&gt;
  &lt;a href="#url"&gt;
  &lt;/a&gt;
  URL
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Current app. location/settings.&lt;/li&gt;
&lt;li&gt;Enables support for deep linking.&lt;/li&gt;
&lt;li&gt;Avoids redundantly storage of data in your beautiful app.&lt;/li&gt;
&lt;li&gt;3rd Party Enhancement - React router&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#web-storage"&gt;
  &lt;/a&gt;
  Web Storage
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;To persist states between reloads.

&lt;ul&gt;
&lt;li&gt;Cookies&lt;/li&gt;
&lt;li&gt;Locale&lt;/li&gt;
&lt;li&gt;IndexedDB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;‚ö† &lt;em&gt;Watchout&lt;/em&gt; !!!

&lt;ul&gt;
&lt;li&gt;Tied to a single browser - i.e. If the same app. will be accessed from a different browser then you have to again store all the data. (we all are familiar with cookies, right!)&lt;/li&gt;
&lt;li&gt; Avoid storing sensitive data.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use Cases

&lt;ul&gt;
&lt;li&gt;Items in a shopping cart.&lt;/li&gt;
&lt;li&gt;Partially filled form data.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#local-state"&gt;
  &lt;/a&gt;
  Local State
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Store state inside a React component. (used when a component needs it)&lt;/li&gt;
&lt;li&gt;Use Cases

&lt;ul&gt;
&lt;li&gt;Forms&lt;/li&gt;
&lt;li&gt;Toggles&lt;/li&gt;
&lt;li&gt;Local lists&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#lifted-state"&gt;
  &lt;/a&gt;
  Lifted State
&lt;/h3&gt;

&lt;p&gt;It's literally what its name says. When a state is used by multiple components then we just lift a state to common parent and pass'em down via props.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#derived-state"&gt;
  &lt;/a&gt;
  Derived State
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Derive state from existing states/ props.&lt;/li&gt;
&lt;li&gt;Example: Like using Array.length rather than assigning a length of the list to a new state variable.&lt;/li&gt;
&lt;li&gt;That was a simple example but what derived states?

&lt;ul&gt;
&lt;li&gt;Not because it makes code "slick" but to simplify code and avoid &lt;strong&gt;sync bugs&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#refs"&gt;
  &lt;/a&gt;
  Refs
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The DOM reference 

&lt;ul&gt;
&lt;li&gt;For uncontrolled elements like inputs and other components where React don't control their properties&lt;/li&gt;
&lt;li&gt;Interfacing with non-react libraries.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;State that isn't displayed

&lt;ul&gt;
&lt;li&gt;Like to track if a component is mounted or not.&lt;/li&gt;
&lt;li&gt;Hold timers.&lt;/li&gt;
&lt;li&gt;Store previous state values &lt;strong&gt;(Helps in making features like undo and redo)&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#context"&gt;
  &lt;/a&gt;
  Context
&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/icecoffee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qRw8PnaD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--V2yBTOrT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/583438/e8ceceea-d6dc-4493-a2eb-0a47f371d6a6.png" alt="icecoffee image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/icecoffee/7-of-100daysofcode-2lbi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;#7 of 100DaysOfCode&lt;/h2&gt;
      &lt;h3&gt;atulit023 „Éª Apr 18 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#100daysofcode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#nextjs&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Yep, the same thing that I mentioned the day before.&lt;/li&gt;
&lt;li&gt;Global/ broadly used state and functions.

&lt;ul&gt;
&lt;li&gt;Avoids prop drilling&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Use Cases:

&lt;ul&gt;
&lt;li&gt;Login key of the user.&lt;/li&gt;
&lt;li&gt;Authorization settings.&lt;/li&gt;
&lt;li&gt;Theming&lt;/li&gt;
&lt;li&gt;Internationalization settings&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#third-parth-states"&gt;
  &lt;/a&gt;
  Third Parth States
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Handling state via third parties to make life chill.&lt;/li&gt;
&lt;li&gt;General Options:

&lt;ul&gt;
&lt;li&gt;Redux&lt;/li&gt;
&lt;li&gt;Motex&lt;/li&gt;
&lt;li&gt;Recoil&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Remote State:

&lt;ul&gt;
&lt;li&gt;SWR&lt;/li&gt;
&lt;li&gt;Relay ---|--Both of them goes well with GraphQL&lt;/li&gt;
&lt;li&gt;Apollo --|&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yep and that's all for today. &lt;br&gt;
I wasn't able to do enough today but I am working on it.&lt;/p&gt;

&lt;p&gt;I'm sure most of you guys have used them before and this is just a general classification of possible use cases but since we are developers, innovation is in our middle name.üòÑ&lt;br&gt;
You know what I'm saying. &lt;/p&gt;

&lt;p&gt;If anyone wants to suggest some more use cases or any add on's or if there are some mistakes in the post, please let me know.&lt;br&gt;
I'll really appreciate that.&lt;/p&gt;

&lt;p&gt;Thanks for reading it.üòä&lt;br&gt;
Have a beautiful day.üå∑&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>react</category>
    </item>
    <item>
      <title>Codesphere vs. GitHub Codespaces: What's the Difference?</title>
      <author>Saji Wang</author>
      <pubDate>Mon, 19 Apr 2021 14:28:10 +0000</pubDate>
      <link>https://dev.to/codesphere/codesphere-vs-github-codespaces-what-s-the-difference-2p1</link>
      <guid>https://dev.to/codesphere/codesphere-vs-github-codespaces-what-s-the-difference-2p1</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;As we were recently asked how Codesphere differentiates itself from Codespaces, an online editor for Github, we thought we could help clear some things up. If you were ever wondering what makes Codesphere unique, continue reading to find out. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Codespaces&lt;/strong&gt; is an online code editor powered by VSCode specifically designed for Github. With the click of a button directly in your GitHub repository, it starts a remote VM, downloads the code, and lets users edit it with a special version of VSCode, which can be used from the browser.&lt;/p&gt;

&lt;p&gt;This is really useful for making quick changes in some repo without the entire setup on your laptop, but it is still limited by the resources of the remote VM and does not solve the complexity of getting a user‚Äôs app live.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Codesphere on the other hand aims to provide a much simpler experience compared to today's cloud providers while giving the opportunity to ad-hoc code in your browser&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;The idea behind &lt;strong&gt;Codesphere&lt;/strong&gt;  builds on a paradigm shift: Instead of creating apps on your computer and deploying them to a totally different infrastructure (e.g. AWS), you can now create the apps, using Codesphere‚Äôs web IDE, in the same environment in which you will run them in production.&lt;/p&gt;

&lt;p&gt;Combined with our new distributed architecture, you can now use the power of the full cloud even while you are still coding (e.g. to run builds on hundreds of VM‚Äôs or seamlessly switch between dev and prod). Development is always tested and online alongside production. Neither deployment nor git is needed and the application scales automatically. &lt;/p&gt;

&lt;p&gt;Starting up with &lt;strong&gt;Codesphere&lt;/strong&gt; is effortless as it provides you with everything needed to change the deployment or even take out the code without any lock-in. On the other hand, if you prefer your local VSCode, you can just mount the remote file system and work with that, getting the best of both worlds. We make scalable infrastructure easy to deploy and make starting up projects a lot faster, regardless if you are a single developer or a team. &lt;strong&gt;Codesphere&lt;/strong&gt;  grows with you, from your very first experiments to building the next Spotify or Youtube. &lt;/p&gt;

&lt;p&gt;While there are really great tools out there, we felt there is a gap in the market when it comes to creating scalable apps, and this is why we created &lt;strong&gt;Codesphere&lt;/strong&gt;.&lt;/p&gt;

</description>
      <category>codequality</category>
      <category>github</category>
      <category>vscode</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
