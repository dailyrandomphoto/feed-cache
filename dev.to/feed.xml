<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How I publish articles to all developer platforms (and my private blog) in one shot</title>
      <author>Patryk Jeziorowski</author>
      <pubDate>Sun, 11 Apr 2021 07:47:06 +0000</pubDate>
      <link>https://dev.to/pjeziorowski/how-i-publish-articles-to-all-developer-platforms-and-my-private-blog-in-one-shot-38aj</link>
      <guid>https://dev.to/pjeziorowski/how-i-publish-articles-to-all-developer-platforms-and-my-private-blog-in-one-shot-38aj</guid>
      <description>&lt;h3&gt;
  &lt;a href="#where-to-host-your-blog"&gt;
  &lt;/a&gt;
  Where to host your blog?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.qovery.com/"&gt;Qovery&lt;/a&gt; CEO, Romaric has just started &lt;a href="https://www.heapstack.sh/"&gt;his own blog on hashnode&lt;/a&gt;. I become jealous, so I started thinking about blogging again. I couldn't decide where to publish my content, though:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://hashnode.com/"&gt;Hashnode&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to"&gt;Dev.to&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cyberwritings.com"&gt;My.own.site&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://medium.com"&gt;Medium&lt;/a&gt;?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-answer-gt-everywhere"&gt;
  &lt;/a&gt;
  The answer &amp;gt; everywhere!
&lt;/h3&gt;

&lt;p&gt;To reach the highest number of people, I decided to publish it everywhere with automated content distribution tools. Unluckily, I couldn't find any tool that would meet my needs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;allowing me to write just once&lt;/li&gt;
&lt;li&gt;have it published automagically everywhere&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post, I'll show you how I achieved what I wanted - I hope you'll find it helpful on your own blogging adventure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#markdown"&gt;
  &lt;/a&gt;
  Markdown
&lt;/h3&gt;

&lt;p&gt;My blog uses markdown to build the HTML for the articles. Markdown is quite good for it as it's very portable. All, Hashnode, Dev.to, and Medium support markdown in their APIs. This is perfect - it allows me to write a single markdown file and have it published everywhere.&lt;/p&gt;

&lt;p&gt;After the markdown file (the article) is written down, we need to use APIs. So, the tool needs to take the markdown and deliver it in the correct format to APIs of all the different platforms we target.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cli"&gt;
  &lt;/a&gt;
  CLI
&lt;/h3&gt;

&lt;p&gt;The first version of the tool is a simple CLI app. It's relatively fast to create and validates the concept quickly - we don't need backends, UIs or any other crazy stuff from the very beginning. BTW, I named the app &lt;strong&gt;Rollout&lt;/strong&gt; to refer to it in this post more easily, hah!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-rollout"&gt;
  &lt;/a&gt;
  Using Rollout
&lt;/h3&gt;

&lt;p&gt;I won't go over the details of how the CLI is implemented (as it's not the topic of this post, it's very simple, though - you can see the code &lt;a href="https://github.com/pjeziorowski/rollout"&gt;here&lt;/a&gt;).&lt;br&gt;
I'll jump straight into showing how to use the tool and how simple it is to have your posts published everywhere.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Install the tool&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5&gt;
  &lt;a href="#macos"&gt;
  &lt;/a&gt;
  MacOS
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew tap pjeziorowski/rollout-cli
brew &lt;span class="nb"&gt;install &lt;/span&gt;rollout-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#windowslinux"&gt;
  &lt;/a&gt;
  Windows/Linux
&lt;/h5&gt;

&lt;p&gt;If you are on Linux/Windows, for now you need to build the app &lt;a href="https://github.com/pjeziorowski/rollout"&gt;from the source&lt;/a&gt;. I'll improve it soon!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Write the article&lt;/strong&gt; - this is definitely the most challenging part! Luckily for you, I wrote one that you can use for the test!
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;TODO
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Distribute the article&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rollout test.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#congrats-your-post-is-now-published-everywhere"&gt;
  &lt;/a&gt;
  Congrats! Your post is now published everywhere
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Hey... Did you forget somethin? You only published to Dev.to, Hashnode and Medium. What about your (and mine!) private blog?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, in my workflow, I publish posts to my blog by simply pushing markdown to my Github repository, so the tool doesn't have to do anything more. It's enough for me now,&lt;br&gt;
but in the future, &lt;strong&gt;Rollout&lt;/strong&gt; could also be integrated with any headless CMS, for example. If I had a WordPress blog, I would simply use the WordPress API to push the article there. Luckily for me, all I have to do is store my posts on Github. If it's the same for you, welcome to the happy bloggers club!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#its-opensourced"&gt;
  &lt;/a&gt;
  It's open-sourced!
&lt;/h3&gt;

&lt;p&gt;As I mentioned earlier, you can see the tool's code in its &lt;a href="https://github.com/pjeziorowski/rollout"&gt;Github repository&lt;/a&gt;.&lt;br&gt;
If you like the idea or the tool works for you - please give it a star and leave a feedback comment (if they are yet implemented on this site, ha) or contact me on &lt;a href="https://twitter.com/pjeziorowski"&gt;Twitter&lt;/a&gt;/&lt;a href="https://www.linkedin.com/in/patrykjeziorowski/"&gt;Linkedin&lt;/a&gt; directly.&lt;/p&gt;

&lt;p&gt;If I see interest in the tool, I'll put more work to make it more versatile and probably create a UI (SPA) and some backend for managing the content and configuration. Contributions and suggestions are also very welcome!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#btw-this-article-was-published-with-rollout"&gt;
  &lt;/a&gt;
  BTW - this article was published with Rollout!
&lt;/h2&gt;

</description>
      <category>blogging</category>
      <category>automation</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Handling Dependency Injection in Inherited Classes</title>
      <author>Sam Walpole</author>
      <pubDate>Sun, 11 Apr 2021 07:39:49 +0000</pubDate>
      <link>https://dev.to/dr_sam_walpole/handling-dependency-injection-in-inherited-classes-4ilj</link>
      <guid>https://dev.to/dr_sam_walpole/handling-dependency-injection-in-inherited-classes-4ilj</guid>
      <description>&lt;p&gt;Dependency injection (DI) is a wonderful thing. Simply add your dependency as a parameter to the constructor (most commonly) of your class, register it with you DI container, and away you go - the DI container will manage the rest. Some of the key benefits of DI are: greater testability, greater maintainability, and greater reusability.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// without DI&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OrderController&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ActionResult&lt;/span&gt; &lt;span class="nf"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Order&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;dbContent&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MyDbContext&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;dbContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Orders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;dbContent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SaveChanges&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ActionResult&lt;/span&gt; &lt;span class="nf"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;dbContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;MyDbContext&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;orders&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dbContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Orders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;JsonResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// with DI&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OrderController&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;MyDbContext&lt;/span&gt; &lt;span class="n"&gt;_dbContext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;OrderController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyDbContext&lt;/span&gt; &lt;span class="n"&gt;dbContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_dbContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dbContext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ActionResult&lt;/span&gt; &lt;span class="nf"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Order&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_dbContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Orders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;_dbContent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SaveChanges&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ActionResult&lt;/span&gt; &lt;span class="nf"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;orders&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_dbContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Orders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;JsonResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, I recently came across a use case where DI can be a real pain - dependency injection in inherited classes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.amazon.co.uk/Clean-Architecture-Craftsmans-Software-Structure-ebook/dp/B075LRM681?crid=1U88IMHJQOEF1&amp;amp;dchild=1&amp;amp;keywords=clean+architecture&amp;amp;qid=1618126713&amp;amp;sprefix=clean+ar%2Caps%2C154&amp;amp;sr=8-1&amp;amp;linkCode=li2&amp;amp;tag=samwalpole-21&amp;amp;linkId=6fd09d84d79a171f16675e3ed3b17b6d&amp;amp;language=en_GB&amp;amp;ref_=as_li_ss_il"&gt;&lt;img src="//ws-eu.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=B075LRM681&amp;amp;Format=_SL160_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=GB&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=samwalpole-21&amp;amp;language=en_GB"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7-DcOFnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ir-uk.amazon-adsystem.com/e/ir%3Ft%3Dsamwalpole-21%26language%3Den_GB%26l%3Dli2%26o%3D2%26a%3DB075LRM681" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7-DcOFnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ir-uk.amazon-adsystem.com/e/ir%3Ft%3Dsamwalpole-21%26language%3Den_GB%26l%3Dli2%26o%3D2%26a%3DB075LRM681" width="1" height="1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h1&gt;

&lt;p&gt;I have recently been working a lot with the &lt;a href="https://github.com/jbogard/MediatR"&gt;Mediatr&lt;/a&gt; package, using it's request/request handler pattern to issue commands in the system (inspired by &lt;a href="https://github.com/jasontaylordev/CleanArchitecture"&gt;Jason Taylor's Clean Architecture solution&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I typically create a RequestHandler base class that contains common dependencies and functionality. Each concrete request handler can then inherit from this base class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RequestHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IRequestHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;TRequest&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IRequest&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;RequestHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IApplicationDbContext&lt;/span&gt; &lt;span class="n"&gt;dbContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;DbContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dbContext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;IApplicationDbContext&lt;/span&gt; &lt;span class="n"&gt;DbContext&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CancellationToken&lt;/span&gt; &lt;span class="n"&gt;cancellationToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;MyRequestHandler&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;RequestHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MyResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MyRequestHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IApplicationDbContext&lt;/span&gt; &lt;span class="n"&gt;dbContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dbContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CancellationToken&lt;/span&gt; &lt;span class="n"&gt;cancellationToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// handler logic&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The problem comes when I want to add more dependencies to the base class. Now I have to go through to every single concrete request handler and update the constructor to take the new dependency as well. Fortunately, the code will not compile if I miss one, so there is no risk of a runtime error, but it is still incredibly tedious work to have to update every single request handler. Also, you can end up with very large constructors, which obscures the intention of the class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RequestHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IRequestHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;TRequest&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IRequest&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;RequestHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IApplicationDbContext&lt;/span&gt; &lt;span class="n"&gt;dbContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ICurrentUser&lt;/span&gt; &lt;span class="n"&gt;currentUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;DbContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dbContext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;CurrentUser&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;currentUser&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;IApplicationDbContext&lt;/span&gt; &lt;span class="n"&gt;DbContext&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;ICurrentUser&lt;/span&gt; &lt;span class="n"&gt;CurrentUser&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CancellationToken&lt;/span&gt; &lt;span class="n"&gt;cancellationToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;MyRequestHandler&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;RequestHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MyResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MyRequestHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IApplicationDbContext&lt;/span&gt; &lt;span class="n"&gt;dbContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ICurrentUser&lt;/span&gt; &lt;span class="n"&gt;currentUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dbContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;currentUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CancellationToken&lt;/span&gt; &lt;span class="n"&gt;cancellationToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// handler logic&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#the-solution-dependency-aggregates"&gt;
  &lt;/a&gt;
  The Solution - Dependency Aggregates
&lt;/h1&gt;

&lt;p&gt;The solution to this problem is really quite simple. Rather than injecting the dependencies directly, create a new class that contains the dependencies (known as an aggregate) and inject that instead.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;IDependencyAggregate&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;IApplicationDbContext&lt;/span&gt; &lt;span class="n"&gt;DbContext&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;ICurrentUser&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DependencyAggregate&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IDependencyAggregate&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;DependencyAggregate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IApplicationDbContext&lt;/span&gt; &lt;span class="n"&gt;dbContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ICurrentUser&lt;/span&gt; &lt;span class="n"&gt;currentUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;DbContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dbContext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;CurrentUser&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;currentUser&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;IApplicationDbContext&lt;/span&gt; &lt;span class="n"&gt;DbContext&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ICurrentUser&lt;/span&gt; &lt;span class="n"&gt;CurrentUser&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RequestHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IRequestHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;TRequest&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IRequest&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;RequestHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IDependencyAggregate&lt;/span&gt; &lt;span class="n"&gt;aggregate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;DbContext&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aggregate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DbContext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;CurrentUser&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aggregate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CurrentUser&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;IApplicationDbContext&lt;/span&gt; &lt;span class="n"&gt;DbContext&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;ICurrentUser&lt;/span&gt; &lt;span class="n"&gt;CurrentUser&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CancellationToken&lt;/span&gt; &lt;span class="n"&gt;cancellationToken&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;MyRequestHandler&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;RequestHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyRequest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MyResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MyRequestHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IDependencyAggregate&lt;/span&gt; &lt;span class="n"&gt;aggregate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;base&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aggregate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyResponse&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CancellationToken&lt;/span&gt; &lt;span class="n"&gt;cancellationToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// handler logic&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if I want to add a new dependency, the only places that I need to change the code are in the DependencyAggregate class and the RequestHandler base class (I don't need to make any changes to the inherited classes).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.amazon.co.uk/Clean-Architecture-Craftsmans-Software-Structure-ebook/dp/B075LRM681?crid=1U88IMHJQOEF1&amp;amp;dchild=1&amp;amp;keywords=clean+architecture&amp;amp;qid=1618126713&amp;amp;sprefix=clean+ar%2Caps%2C154&amp;amp;sr=8-1&amp;amp;linkCode=li2&amp;amp;tag=samwalpole-21&amp;amp;linkId=6fd09d84d79a171f16675e3ed3b17b6d&amp;amp;language=en_GB&amp;amp;ref_=as_li_ss_il"&gt;&lt;img src="//ws-eu.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=B075LRM681&amp;amp;Format=_SL160_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=GB&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=samwalpole-21&amp;amp;language=en_GB"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7-DcOFnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ir-uk.amazon-adsystem.com/e/ir%3Ft%3Dsamwalpole-21%26language%3Den_GB%26l%3Dli2%26o%3D2%26a%3DB075LRM681" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7-DcOFnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ir-uk.amazon-adsystem.com/e/ir%3Ft%3Dsamwalpole-21%26language%3Den_GB%26l%3Dli2%26o%3D2%26a%3DB075LRM681" width="1" height="1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In this post I have described a simple method for managing dependency injection in inherited classes, by creating a dependency aggregate class to inject into the base class. This ensures that new dependencies can easily be introduced with having to make changes to every inherited class.&lt;/p&gt;

&lt;p&gt;I post mostly about full stack .NET and Vue web development. To make sure that you don't miss out on any posts, please follow this blog and &lt;a href="https://samwalpole.com"&gt;subscribe to my newsletter&lt;/a&gt;. If you found this post helpful, please like it and share it. You can also find me on &lt;a href="https://twitter.com/dr_sam_walpole"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
      <category>dependencyinjection</category>
      <category>inheritance</category>
    </item>
    <item>
      <title>Tech Communities: Definitive guides to etch a great growth curve!</title>
      <author>Bala Priya</author>
      <pubDate>Sun, 11 Apr 2021 07:29:23 +0000</pubDate>
      <link>https://dev.to/balapriya/tech-communities-definitive-guides-to-etch-a-great-growth-curve-3no</link>
      <guid>https://dev.to/balapriya/tech-communities-definitive-guides-to-etch-a-great-growth-curve-3no</guid>
      <description>&lt;p&gt;Able mentorship, networking with like-minded people, sufficient peer motivation; And an eclectic combination of all the above! Sounds exciting right? Oh, yeah! Then, It’s time to join the wonderful tech communities out there!&lt;/p&gt;

&lt;p&gt;The impact that good networking has on us as individuals is beyond what we can ever comprehend. By signing up to be a part of these tech communities, we get to network with wonderful people from across the globe, from diverse tech backgrounds, with an equally rich variety in expertise and experience. Reaching out to the members of the community for assistance is literally just a message away! Communities like Women Who Code also offer us the option to join local chapters in our country that best suit us or even request to start one.&lt;/p&gt;

&lt;p&gt;How well they bring together people from all walks of life is yet another attribute that makes tech forums a great place to be a part of. If you’re a beginner or a student looking for your breakthrough into an enticing career in tech, there’s ample scope to hone your existing skill set, learn a new skill and get to know from experts in industry on opportunities. The study groups, webinars and talks collectively facilitate a great learning path.&lt;/p&gt;

&lt;p&gt;As for accomplished professionals, who’ve already scaled heights in their career, such forums are perfect platforms to share their success stories and inspire &amp;amp; guide many aspiring individuals. A much needed mentorship could go a long way in redefining somebody’s tech career.&lt;/p&gt;

&lt;p&gt;Summing it all up, if you’re someone who believes in the synergy of collaborative work and coming together to succeed; if you’ve always supported Women in Tech, Diversity &amp;amp; Inclusion and the many ideals that hold them together, the tech communities are places where you’d see these ideals forming an integral part of the functioning; making an impact and transforming lives for the better!&lt;/p&gt;

&lt;p&gt;That being said, maybe it’s time to grab a quick bite &amp;amp; a cup of coffee and tune right into the very next event that interests you the most?&lt;/p&gt;

&lt;p&gt;Cover Image: Photo by &lt;a href="https://unsplash.com/@bamagal?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;"My Life Through A Lens"&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/community?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>inclusion</category>
      <category>womenintech</category>
      <category>shecoded</category>
    </item>
    <item>
      <title>Explaining Git to a 10 years old!</title>
      <author>| pro._.gramer |</author>
      <pubDate>Sun, 11 Apr 2021 05:09:20 +0000</pubDate>
      <link>https://dev.to/anushree71199/explaining-git-to-a-10-years-old-5839</link>
      <guid>https://dev.to/anushree71199/explaining-git-to-a-10-years-old-5839</guid>
      <description>&lt;p&gt;Imagine having an awesome collection of Pokemon stickers you ask your friends to exchange some of them with yours. Everything is cool until the very next moment when you find out that your favourite sticker is lost or is dumped somewhere...you are sad now just because of those stickers but then your friends offer you the same sticker with the same Pokemon on it cause they were having the copies of those stickers now you are happy so you go back to your house and keep the sticker somewhere safe so that it never gets lost again.&lt;/p&gt;

&lt;p&gt;For Developers:&lt;/p&gt;

&lt;p&gt;Here "having an awesome collection of Pokemon stickers" indicates your repositories in GitHub.&lt;/p&gt;

&lt;p&gt;When you lost track of what is the status of your repository is indicated by "sticker getting lost or dumped".&lt;/p&gt;

&lt;p&gt;But then you have already created branches of your main branch so there you can revert your actions and make the necessary changes in your repository without hampering your main branch&lt;/p&gt;

</description>
      <category>github</category>
      <category>programming</category>
      <category>explainlikeimfive</category>
      <category>go</category>
    </item>
    <item>
      <title>Vanilla JavaScript Archery Game</title>
      <author>Glenn Tippett</author>
      <pubDate>Sun, 11 Apr 2021 04:48:42 +0000</pubDate>
      <link>https://dev.to/glenntippett/vanilla-javascript-archery-game-5cg4</link>
      <guid>https://dev.to/glenntippett/vanilla-javascript-archery-game-5cg4</guid>
      <description>&lt;p&gt;So it's a bit rainy today, can't go outside - so I thought maybe I'd play some archery inside... JS style! &lt;/p&gt;

&lt;p&gt;Here is the CodePen: &lt;br&gt;
&lt;a href="https://codepen.io/glenntippett/pen/XWpVGQP"&gt;https://codepen.io/glenntippett/pen/XWpVGQP&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xuTDNW46--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/df2llb2c42035xjtehzk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xuTDNW46--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/df2llb2c42035xjtehzk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I won't go into too much detail here, I'll let the CodePen do the talking but if you have any questions please comment. &lt;/p&gt;

&lt;p&gt;There's a lot of ways this could have been done and this was just a quick throw together so it's not perfect - and please don't open on mobile unless you want Internet-Explorer-design-style flashbacks. &lt;/p&gt;

&lt;p&gt;The target itself is just one &lt;code&gt;&amp;lt;/div&amp;gt;&lt;/code&gt; tag utilising the &lt;code&gt;box-shadow&lt;/code&gt; property to give that multi-color effect. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sh8lvQOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/inamk2vw8fuhphvcqhrn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sh8lvQOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/inamk2vw8fuhphvcqhrn.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The position of the arrow hitting the target is determined by some &lt;code&gt;Math.Random()&lt;/code&gt; calls to set the X and Y position on the target. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n5V0V-bL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4mirhd4xlpmgrqa5201.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n5V0V-bL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f4mirhd4xlpmgrqa5201.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;plusOrMinusOdds&lt;/code&gt; is calculating that 50% of the time the &lt;code&gt;posOrNeg&lt;/code&gt; variable will be either a &lt;code&gt;-&lt;/code&gt; or a &lt;code&gt;+&lt;/code&gt;. &lt;br&gt;
This is pre-pended to the pixel value to allow the arrow to land either side of the middle of the target. &lt;/p&gt;

&lt;p&gt;I ran into some issues when viewing on a larger screen so I gave the &lt;code&gt;body&lt;/code&gt; a &lt;code&gt;max-width&lt;/code&gt; to help with this. &lt;/p&gt;

&lt;p&gt;The game also looks best if you click 'Reset' between each shot, so the arrow goes off-screen and comes back. Otherwise the arrow just does this weird glide thing...&lt;/p&gt;

&lt;p&gt;I may come back to this at a later date to fix the bugs and implement a few other features like a score counter, sound effects etc.&lt;/p&gt;

&lt;p&gt;Until then, enjoy! &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Create the Ultimate User Experience with AOS (Animate on Scroll)</title>
      <author>Tapajyoti Bose</author>
      <pubDate>Sun, 11 Apr 2021 03:42:20 +0000</pubDate>
      <link>https://dev.to/ruppysuppy/create-the-ultimate-user-experience-with-aos-animate-on-scroll-39jp</link>
      <guid>https://dev.to/ruppysuppy/create-the-ultimate-user-experience-with-aos-animate-on-scroll-39jp</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-aos"&gt;
  &lt;/a&gt;
  What is &lt;strong&gt;AOS&lt;/strong&gt;?
&lt;/h1&gt;

&lt;p&gt;As &lt;em&gt;front-end developer&lt;/em&gt;, a popular request you might get from your clients is to implement stunning animation effects on page scroll. &lt;strong&gt;AOS&lt;/strong&gt; (Animate on Scroll) is the most popular library for the purpose of making this task easier for us.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AOS&lt;/strong&gt; is a library developed by &lt;a href="https://github.com/michalsnik"&gt;Michał Sajnóg&lt;/a&gt; and it does exactly what its name suggests: it lets you apply different kinds of animations to elements as they scroll into view.&lt;/p&gt;

&lt;p&gt;To see an example of a project using &lt;strong&gt;AOS&lt;/strong&gt;, click &lt;a href="https://tapajyoti-bose.web.app/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h1&gt;

&lt;p&gt;The animation effects available by default are shown below.&lt;br&gt;
&lt;strong&gt;NOTE:&lt;/strong&gt; The animations can be further customized using the various properties like &lt;code&gt;data-aos-duration&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ruppysuppy/embed/BapRQgY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#installing-aos"&gt;
  &lt;/a&gt;
  Installing &lt;strong&gt;AOS&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;AOS&lt;/strong&gt; can be installed using &lt;strong&gt;Bower&lt;/strong&gt; or &lt;strong&gt;npm&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bower&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;bower &lt;span class="nb"&gt;install &lt;/span&gt;aos &lt;span class="nt"&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;npm&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;aos &lt;span class="nt"&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, link &lt;strong&gt;AOS&lt;/strong&gt; styles and scripts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"bower_components/aos/dist/aos.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"bower_components/aos/dist/aos.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;AOS&lt;/strong&gt; stylesheet and &lt;strong&gt;JavaScript&lt;/strong&gt; files can also be downloaded using a &lt;strong&gt;CDN&lt;/strong&gt; as follows:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.rawgit.com/michalsnik/aos/2.3.4/dist/aos.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;JavaScript&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.rawgit.com/michalsnik/aos/2.3.4/dist/aos.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To initialize &lt;strong&gt;AOS&lt;/strong&gt;, just use the line below in the &lt;strong&gt;JavaScript&lt;/strong&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;AOS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#using-aos"&gt;
  &lt;/a&gt;
  Using &lt;strong&gt;AOS&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;After the setup, just add &lt;code&gt;data-aos="&amp;lt;animation-name&amp;gt;"&lt;/code&gt; to the HTML elements to use basic animations. For example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-aos=&lt;/span&gt;&lt;span class="s"&gt;"fade-up"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ...
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-aos=&lt;/span&gt;&lt;span class="s"&gt;"flip-down"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ...
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-aos=&lt;/span&gt;&lt;span class="s"&gt;"zoom-in"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ...
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#configuring-the-animation"&gt;
  &lt;/a&gt;
  Configuring the Animation
&lt;/h1&gt;

&lt;p&gt;Additional properties can be used to configure the animations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;data-aos-delay&lt;/code&gt;&lt;/strong&gt;: You can use this attribute to specify the delay of the animation play time. The duration value can be anywhere between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;3000&lt;/code&gt; with steps of &lt;code&gt;50ms&lt;/code&gt;. Since the duration is handled in CSS, using smaller steps or a wider range would have unnecessarily increased the size of the CSS code. The default value for this attribute is &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;data-aos-offset&lt;/code&gt;&lt;/strong&gt;: You can use this attribute to trigger the animation sooner or later than the designated time. Its default value is &lt;code&gt;120px&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;data-aos-duration&lt;/code&gt;&lt;/strong&gt;: You can use this attribute to specify the duration of the animation. The duration value can be anywhere between &lt;code&gt;50&lt;/code&gt; and &lt;code&gt;3000&lt;/code&gt; with steps of &lt;code&gt;50ms&lt;/code&gt;. Since the duration is handled in CSS, using smaller steps or a wider range would have unnecessarily increased the size of the CSS code. This range should be sufficient for almost all animations. The default value for this attribute is &lt;code&gt;400&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;data-aos-easing&lt;/code&gt;&lt;/strong&gt;: You can use this attribute to control the timing function for animating different elements. Possible (not exhaustive) values are: &lt;code&gt;linear&lt;/code&gt;, &lt;code&gt;ease-in-out&lt;/code&gt; and &lt;code&gt;ease-out-quart&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;data-aos-anchor&lt;/code&gt;&lt;/strong&gt;: This attribute is useful when you want to trigger the animation based on the position of some other element. It accepts any selector as its value. The default value is &lt;code&gt;null&lt;/code&gt;. This means that all the animations will be triggered with respect to the element’s own position.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;data-aos-anchor-placement&lt;/code&gt;&lt;/strong&gt;: By default, the animations on an element are applied as soon as its top part reaches the bottom part of the window. This behavior can be changed using the &lt;code&gt;data-aos-anchor-placement&lt;/code&gt; attribute. As its value, this attribute accepts two words separated by a hyphen. For example, you can set it to &lt;code&gt;top-bottom&lt;/code&gt;, &lt;code&gt;top-center&lt;/code&gt; or &lt;code&gt;top-top&lt;/code&gt;. Three such combinations are also possible for both the &lt;code&gt;center&lt;/code&gt; and &lt;code&gt;bottom&lt;/code&gt; values.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;data-aos-once&lt;/code&gt;&lt;/strong&gt;: You can also control if the animations should be played only when you get to a particular element the first time or every time you scroll up or down. By default, the animations are replayed every time the elements scroll into view. You can set the value of this attribute to &lt;code&gt;true&lt;/code&gt; in order to animate the elements only once.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#adding-custom-animations"&gt;
  &lt;/a&gt;
  Adding Custom Animations
&lt;/h1&gt;

&lt;p&gt;Sometimes built-in animations are just not enough. Let's create an animation depending on the resolution of the screen. Here's one approach to do it:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;style.css&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-aos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"new-animation"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition-property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-aos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"new-animation"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nc"&gt;.aos-animate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;768px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-aos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"new-animation"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-aos&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"new-animation"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nc"&gt;.aos-animate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then use it in HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;data-aos=&lt;/span&gt;&lt;span class="s"&gt;"new-animation"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The element will only animate opacity on mobile devices, but from 768px width it'll also slide from right to left.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/michalsnik/aos"&gt;AOS repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sitepoint.com/cool-scroll-animations-made-easy-aos-library/"&gt;Sitepoint Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h1&gt;

&lt;p&gt;Reach out to me on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.linkedin.com/in/tapajyoti-bose-429a601a0"&gt;LinkedIn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://tapajyoti-bose.web.app"&gt;Portfolio&lt;/a&gt; (For freelance projects, reach out through the contact form)&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>ux</category>
    </item>
    <item>
      <title>Flow State: 10 Practical Tips for Getting In The Zone</title>
      <author>Justin Schroeder</author>
      <pubDate>Sun, 11 Apr 2021 03:38:35 +0000</pubDate>
      <link>https://dev.to/justinschroeder/flow-state-10-practical-tips-for-getting-in-the-zone-ha9</link>
      <guid>https://dev.to/justinschroeder/flow-state-10-practical-tips-for-getting-in-the-zone-ha9</guid>
      <description>&lt;p&gt;I have this recurring dream where I sit down at a piano and start playing like a virtuoso. The music flows out of my fingers at the same speed as my mind is composing the music. In my mind my dream feels like the purest act of creation. It is beautiful, but it's only a dream. On this side of consciousness I can't even play an instrument. Yet, that feeling of "pure creation" where my imagination smoothly becomes a reality is incredibly familiar. In fact, as engineers, on our best days, it's what we do for a living.&lt;/p&gt;

&lt;p&gt;If you've been a serious programmer for more than a few years, I imagine you've experienced this magic. There are a lot of names for it, flow state, deep work, in the zone, being under. However, I prefer “flow state” because it best describes the feeling I have when I'm there. The truth is, it can be as elusive and delicate as it is powerful, but the payoff is enormous — well worth the pursuit.&lt;/p&gt;

&lt;p&gt;When you're truly in flow state, your productivity skyrockets. Complex problems break down to simple steps, intricate logic becomes obvious, and innovative design patterns emerge. Maybe I’m being a bit too romantic. I mean we're just writing some code right? Nah, when I'm truly in flow state I'm &lt;em&gt;creating&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I've been programming for 21 years and, for the last five I've been cataloging my experiments regarding flow. The following recommendations come out of those five years, but these are not "scientific" in an academic sense. Just practical advice born of my own monastic pursuit of flow state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#know-the-basics"&gt;
  &lt;/a&gt;
  Know the basics
&lt;/h2&gt;

&lt;p&gt;In the beginning, there are some fundamental prerequisites. These are not meant to be exclusionary, as anyone can achieve these skills and conditions. However, if you feel you fall short on any of them consider this as a friendly encouragement to keep on pushing:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Know the Syntax&lt;/strong&gt; &lt;br&gt;
The kind of flow state we're after requires that concepts transfer smoothly into bytes. You cannot play the piano like a virtuoso if you're stabbing around for middle-c. I'm not saying you have the entire language perfectly memorized, but at a minimum the syntax needs to melt away.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Know your Environment&lt;/strong&gt; &lt;br&gt;
You need to have a familiar and stable development environment: operating system, editor, terminal, server stack etc. Be very cautious about messing with these precious tools. Don't install a new shell environment, use &lt;strong&gt;one&lt;/strong&gt; editor, and don’t be the first person to upgrade your OS. Keep your work space stable and familiar at all times. If you want to experiment, use a different machine or try setting up a secondary account on your computer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Know your key commands&lt;/strong&gt; &lt;br&gt;
Goes without saying right? But seriously, you should be able to go for significant stretches of time in a code editor without ever lifting your hands off the keyboard.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Know How to "long-cycle"&lt;/strong&gt; &lt;br&gt;
When writing code, in any language or platform — there is a "cycle":&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You write some code.&lt;/li&gt;
&lt;li&gt;You check to see if it did what you wanted.&lt;/li&gt;
&lt;li&gt;You move on or adjust the code and repeat.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Beginners typically write very small chunks of code, a couple lines for example, and then check the results. This cycling is necessary to reduce mental overhead (you can't hold all the code for an app in your mind at once), but in my experience, very small cycles also reduce the likelihood you'll reach “flow state.” It's a mental crutch that enables your mind from learning how to balance more complex problems. Each cycle takes an amount of time to complete, even one or two seconds per cycle can really add up. This slows your progress and introduces opportunities for distraction. If you're a victim of “short cycling”, try to intentionally practice writing more code each time before you validate the results.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Know &lt;em&gt;how&lt;/em&gt; it works.&lt;/strong&gt; It's important to understand the basics of the technologies you're working with. For example, if you're a web developer, you should really understand how the request/response cycle works, what HTTP methods are, how to interact with the Document Object Model (DOM), what event bubbling is etc. Sure you may use libraries that abstract these concepts away from you, but you must have an understanding of the underlying technologies. If not, it will be difficult to create a mental sandbox. A place where your mind can quickly and efficiently conceive new solutions to challenging problems.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you're struggling with any of these basics it doesn't mean you can't be productive or produce excellent code. It just means the magic is harder to grab a hold of. The good news is practice makes perfect. Keep at it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-practical-tips"&gt;
  &lt;/a&gt;
  10 Practical Tips
&lt;/h2&gt;

&lt;p&gt;Your brain hates getting into a flow state. What it &lt;em&gt;wants&lt;/em&gt; are quick little dopamine hits that are addictive and supremely detrimental to productivity (lookin' at you Twitter). Flow is a marathon that your brain is reluctant to run. So what follows is a list of tips, tricks, and hacks that I've found help drag my mind, kicking and screaming, to the start line. These may seem trivial...because they are. Yet these sorts of small habits and patterns are tremendously useful in combating hours of half-focused waste.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Know what you're going to work on.&lt;/strong&gt; This one is important. Before you even sit down you should already know what your first keystrokes are going to be. To help, each time you stop working, write a short todo list on a scrap of paper or a notes app (&lt;em&gt;not&lt;/em&gt; your team's Trello or Jira board) of what you need to work on next time you sit down. It's good for these to crescendo from small to large: 1. "Finish the primary navigation breakpoints" 2. "Write a click-away handler for the dropdown" 3. "make a new modal component". It can even be a good idea to even leave yourself a breadcrumb, such as an easy to solve problem that only takes a few lines of code to complete that’s been &lt;em&gt;obviously&lt;/em&gt; left incomplete for you (by you). This little trick can really jump start your day's work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Close your apps.&lt;/strong&gt; Shut down email, Slack, discord, social media and anything else that can send you a notification. Seriously. Shut 👏 Them 👏 Down 👏. Nervous someone will need you? Tell your co-workers to call you on the phone if it's really an emergency — trust me they won't call. People hate making phone calls. Those little red bubbles and pinging sounds are the death of flow state.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Music.&lt;/strong&gt; This is controversial, but I've always had my best sessions &lt;em&gt;with&lt;/em&gt; music. I've found it's best to put something on that is well-worn. You already know the words and can get into the rhythm instantly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Ride the wave.&lt;/strong&gt; Once you get into flow, ride the wave as far as it takes you, and then get off when it's over. Typically, I've found ~3-4 hours is as long as I can go before my mental state begins to crumble, but while I'm in flow I try hard to stay there even if it’s inconvenient. Occasionally the zen-like magic strikes me at 11:00pm and I make the conscious decision to ride it till it runs out, around 2:00- 3:00am. I'm not suggesting this is a good time to work, as you need to be well rested, but I am saying these sessions are so valuable (and frankly rare) that when they strike, it is worth the sacrifice to stay in them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Instant on.&lt;/strong&gt; The moment you sit down and the screen turns on, start working. Literally do nothing else. Don't check email one last time, or order that thing off Amazon. — You can do all that later. Start writing code...now. Your brain will push back and try to distract you — you need to win this argument. Your brain will thank you later.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Don’t reward yourself.&lt;/strong&gt; Once in flow you'll start conquering problems left and right, but watch out! These little victories are a signal to your brain to chill out and celebrate the good times. You will suddenly find yourself randomly disengaging. — Don't fall for it. As soon as you solve one problem, instantly jump to the next, then the next. Let the progress snowball until your efficiency starts to die off.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Know how much to sleep.&lt;/strong&gt; Don't just Google "how much sleep do I need to sleep", you're a unique human being. My wife needs a solid nine hours every single night, I need about six. Everyone is different. Listen to your body, and then give it what it needs. If you're thinking about sleep while you're trying to program — you didn't get enough.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Temperature.&lt;/strong&gt; The temperature should be comfortable, but I've found that being slightly cold is better than being slightly hot.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Wear comfortable clothes.&lt;/strong&gt; I remember high school teachers telling me to wear comfortable clothes when taking the SAT. They were right, although, perhaps "comfortable" isn't quite the right word. The important thing is not to be conscious of your clothes (positive or negative), you don't want to think about your clothes at all.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Hydrate &amp;amp; caffeinate.&lt;/strong&gt; Drinking a glass of water ahead of time, and having coffee (if that's your thing) hot and ready is key. You don't want to have to get up for a while, so make sure your coffee is in a mug that doesn't get cold. I'm not saying that specifically coffee is needed but rather that it is important to consider and address your body's needs ahead of time so you don't get distracted. For me that “need” happens to be coffee, but for you that might be tea, fruit, or just a cup of water.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#theres-more-to-work-than-flow"&gt;
  &lt;/a&gt;
  There’s more to work than flow
&lt;/h2&gt;

&lt;p&gt;This article, rightfully, glorifies flow state. However, it's important to realize there is more to work than what occurs in flow. As developers, we're positioned in a market where our ability to rapidly produce high quality code is a great asset, but it's not our only one. Meetings, emails, code reviews, helping team members, writing blog posts and other important tasks are part of everyone's job and generally don't require the same level of hyper focus to accomplish. That's okay. When it comes to flow state, keep your powder dry, and your aim narrow. Don't get too down on yourself if you can't achieve flow state every day. While that's an admirable goal, our brains just won't always get there. Remember, there is plenty of other work that can be accomplished as a mere mortal too.&lt;/p&gt;

&lt;p&gt;I hope you find these techniques helpful. If you're interested in hearing from me when you're &lt;em&gt;not&lt;/em&gt; in flow you can &lt;a href="https://twitter.com/jpschroeder"&gt;follow me on Twitter @jpschroeder&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>webdev</category>
      <category>career</category>
      <category>programming</category>
    </item>
    <item>
      <title>The Benefits of Project-Based Learning</title>
      <author>SalarC123</author>
      <pubDate>Sun, 11 Apr 2021 03:27:05 +0000</pubDate>
      <link>https://dev.to/salarc123/the-benefits-of-project-based-learning-3c14</link>
      <guid>https://dev.to/salarc123/the-benefits-of-project-based-learning-3c14</guid>
      <description>&lt;h1&gt;
  &lt;a href="#how-is-it-different-from-coursebased-learning"&gt;
  &lt;/a&gt;
  How is it different from course-based learning? 🧐
&lt;/h1&gt;

&lt;p&gt;It's very self explanatory, but project-based learning is a learning technique that focuses heavily on building real-world projects. The alternative is following tutorials, but that is ineffective and many times, you'll forget what you learn from a course or tutorial series because you're typically consuming a lot of information without applying it. Thus, you don't truly understand a concept and waste a lot of your precious time trying to follow tutorials. &lt;/p&gt;

&lt;p&gt;Now, don't get me wrong. Courses are amazing, and I love how they give you a structured curriculum, but if you're learning React, for example, you don't need to learn every nuance of the technology and explore the advanced concepts before you get the opportunity to hammer down the basics. Even if the course provides practice problems, those exercises are likely not meaningful to you, meaning that you won't retain the content for very long. &lt;/p&gt;

&lt;p&gt;On the other hand, project-based learning, if done correctly, lets you get a feel of the basics through &lt;strong&gt;simple&lt;/strong&gt; tutorials (preferably by reading the docs or watching youtube) and then immediately building what you want once you gain enough understanding to start writing your own code. Most people learning how to code have a project in mind that they can't wait to start, but unnecessary material interferes and many fall into the trap of wanting to learn it all, so they never end up completing their goal. However, project-based learning gives them the chance to start working on their project right away. Furthermore, Project-based learning gives you the freedom to learn as you create, so you'll definitely master the art of scouring StackOverflow for answers to problems. And unlike with courses, you will use 100% of the stuff you learn because it will directly apply to a problem that you are trying to fix.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-pros"&gt;
  &lt;/a&gt;
  The Pros 🎉
&lt;/h1&gt;

&lt;p&gt;First of all, project-based learning is extremely fun. You don't need to listen to a teacher for hours a day like at school because you get to learn by &lt;strong&gt;doing&lt;/strong&gt; and even &lt;strong&gt;failing&lt;/strong&gt;. Learning from your mistakes is very effective, as you probably know, so why not incorporate it into your learning process more?&lt;/p&gt;

&lt;p&gt;Project-based learning is also powerful for building your portfolio and padding your resume. Portfolio websites are really popular nowadays, so this is a great way to fill up the "projects" section. But even if your goal isn't to switch careers, it's very impressive to have 10+ projects which you can claim as your own and show to your friends and family. And remember, employers want to see proof rather than words.&lt;/p&gt;

&lt;p&gt;And if you need more stuff to boost your portfolio, you can try learning some algorithms and implement them into previous projects or even make an algorithm visualizer that explicitly shows how comfortable you are with concepts that companies actually care about.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-cons"&gt;
  &lt;/a&gt;
  The Cons 🚨
&lt;/h1&gt;

&lt;p&gt;The main disadvantage project-based learning is the difficulty that comes with finding a meaningful project. A simple google search will result in todo lists and Pomodoro timers, but I personally don't think that those are effective in inspiring motivation. Todo lists have been made a million times (literally) and don't provide enough of a challenge to really get your brain working. These projects are also very small and less impressive for a portfolio. Thus, you need to do some extra digging or sit down and ponder possible projects that would be useful for yourself or useful for the world. Some examples of projects I've made to solve some personal problems include a platform that lets you create stylish code snippets for online sharing (similar to carbon.sh) and an automatic SVG generator that produces polygons, waves, and particles in a specified size and color.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion 😎
&lt;/h1&gt;

&lt;p&gt;Personally, I have utilized project-based learning to learn HTML, CSS, Javascript, React, and I am currently learning Redux and MaterialUI. For each of these technologies and languages, I found a few meaningful projects like a website for a school club or a physics visualizer to explore these technologies' most important features and learn how to utilize them when it really matters without having to go back on StackOverflow or Youtube to refresh my memory because I followed a course. Overall, project-based learning is extremely effective and completely free to try, so there is literally no reason to avoid starting &lt;strong&gt;today&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is my first article, so please leave feedback about everything to help me become a better writer and developer for future articles!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>#Day21 - How to use requests to interact with APIs in Python</title>
      <author>Rahul Banerjee</author>
      <pubDate>Sun, 11 Apr 2021 03:17:49 +0000</pubDate>
      <link>https://dev.to/rahulbanerjee99/day21-how-to-use-requests-to-interact-with-apis-in-python-2gfl</link>
      <guid>https://dev.to/rahulbanerjee99/day21-how-to-use-requests-to-interact-with-apis-in-python-2gfl</guid>
      <description>&lt;h2&gt;
  &lt;a href="#want-a-list-of-cool-apis-to-use-for-your-next-project"&gt;
  &lt;/a&gt;
  Want a list of cool APIs to use for your next project?
&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Today we will be working with the requests libraries and use it to make requests to some public APIS. I have also included a few resources that have a list of cool APIs. This article will not talk about what an API is or the different status codes. Some familiarity with APIs is expected. We will be discussing the following&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Making a simple GET Request&lt;/li&gt;
&lt;li&gt;The Response Object&lt;/li&gt;
&lt;li&gt;Making a Request with parameters&lt;/li&gt;
&lt;li&gt;Make a GET Request to a secured endpoint&lt;/li&gt;
&lt;li&gt;Making a POST Request&lt;/li&gt;
&lt;li&gt;APIs you can use for your next project&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#make-a-get-request"&gt;
  &lt;/a&gt;
  Make a GET Request
&lt;/h3&gt;

&lt;p&gt;Starting off with the basics, we will try to make a request to the publicly available  &lt;a href="https://alexwohlbruck.github.io/cat-facts/"&gt;Cat Facts API&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;We will be making a request to the following endpoint&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://cat-fact.herokuapp.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following code-snippet makes a request to the endpoint&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://cat-fact.herokuapp.com"&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see the following output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Response [200]&amp;gt;
&amp;lt;class 'requests.models.Response'&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The get() function returned a Response Object. We will talk about the response object in the next section.&lt;/p&gt;

&lt;p&gt;Let's try making another GET request. This time we will make a request to the  &lt;a href="https://dukengn.github.io/Dog-facts-API/"&gt;Dog Facts API&lt;/a&gt;. This is the endpoint we will making the request to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://dog-facts-api.herokuapp.com/api/v1/resources/dogs/all
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Below is the code snippet&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://dog-facts-api.herokuapp.com/api/v1/resources/dogs/all"&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see a similar output as the previous output. So how do we use the Response Object to access the data we need?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#response-object"&gt;
  &lt;/a&gt;
  Response Object
&lt;/h3&gt;

&lt;p&gt;Let's continue working with Dog Facts API. The following snippet of code will help us introspect the returned Response object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see a list with a bunch of stuff. Focus on the last few.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#statuscode"&gt;
  &lt;/a&gt;
  status_code
&lt;/h4&gt;

&lt;p&gt;This contains the status code of our request. For a successful GET request, it should be 200.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;'''
OUTPUT
200
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#url"&gt;
  &lt;/a&gt;
  url
&lt;/h4&gt;

&lt;p&gt;This contains the URL of the response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;'''
OUTPUT
https://dog-facts-api.herokuapp.com/api/v1/resources/dogs/all
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#ok"&gt;
  &lt;/a&gt;
  ok
&lt;/h4&gt;

&lt;p&gt;This is true if the status code is less than 400&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;'''
OUTPUT
True
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#json"&gt;
  &lt;/a&gt;
  json
&lt;/h4&gt;

&lt;p&gt;This returns a JSON object of the result. Basically the data we want to access. If the data returned by the endpoint is not in a JSON format, it will raise an error. Most API endpoints usually return data in a JSON format, it's good practice.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="s"&gt;'''
OUTPUT
{'fact': 'All dogs can be traced back 40 million years ago to a weasel-like animal called the Miacis which dwelled in trees and dens. The Miacis later evolved into the Tomarctus, a direct forbear of the genus Canis, which includes the wolf and jackal as well as the dog.'}
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am only displaying the first fact in the list but you can try it out on your own without the indexing.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#text"&gt;
  &lt;/a&gt;
  text
&lt;/h4&gt;

&lt;p&gt;This contains the result in Unicode format, i.e a string object. The output might look similar to the one returned by json() but if you use type() to inspect the type of the returned data, you'll notice it is a string&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="s"&gt;'''
OUTPUT
  {
    "fact": "Fifty-eight percent of people put pets in family and holiday portraits."
  }, 
  {
    "fact": "There are only 350 Cisky Terriers in the world, possibly making it the rarest breed."
  }, 
  .............
  &amp;lt;class 'str'&amp;gt;
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have truncated the output since it was too long.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-a-request-with-parameters"&gt;
  &lt;/a&gt;
  Making a Request with parameters
&lt;/h3&gt;

&lt;p&gt;Some endpoints accept parameters. The Dog Facts API accepts a couple of parameters&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;num: to specify the number of facts you want to receive&lt;/li&gt;
&lt;li&gt;index: to specify the index of the fact you are targeting
There are a couple of ways to include parameters in your request&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#including-parameter-in-url"&gt;
  &lt;/a&gt;
  Including parameter in URL
&lt;/h4&gt;

&lt;p&gt;You can include the parameter in your URL with a ""?parameter=value"". Be careful to use the base URL. In our case, the base URL is the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://dog-facts-api.herokuapp.com/api/v1/resources/dogs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our URL with the parameter included would be the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://dog-facts-api.herokuapp.com/api/v1/resources/dogs?number=2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Below is the code to make a request to get 2 facts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://dog-facts-api.herokuapp.com/api/v1/resources/dogs?number=2"&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;span class="s"&gt;'''
OUTPUT
2
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#including-a-parameters-object-in-the-get-request"&gt;
  &lt;/a&gt;
  Including a parameters object in the get request
&lt;/h4&gt;

&lt;p&gt;Another way would be to set the "params" argument in the get() function to our parameter.&lt;br&gt;
Below is the code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://dog-facts-api.herokuapp.com/api/v1/resources/dogs"&lt;/span&gt;
&lt;span class="n"&gt;param_obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;param_obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s"&gt;'''
OUTPUT
2
https://dog-facts-api.herokuapp.com/api/v1/resources/dogs?number=2
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, "response.url" contains the URL with the parameter included.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#make-a-get-request-to-a-secured-endpoint"&gt;
  &lt;/a&gt;
  Make a GET Request to a secured endpoint
&lt;/h3&gt;

&lt;p&gt;Most APIs are secured to prevent malicious requests. An API key is needed whenever you make a request to the API. We will be working with &lt;a href="https://docs.thecatapi.com/"&gt;Cats API&lt;/a&gt;. This is different from the first Cat Facts API we used, this is secured. Before proceeding, get your API key from &lt;a href="https://thecatapi.com/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We should follow best practices when dealing with API keys. The API key must not directly be used in your python file. It must either be used as an environment variable or stored in a .env file. The API key must be loaded in the Python file, so as to hide it from others.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a file named ".env" in the same folder as your python file and paste the following
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;API_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"YOUR API KEY HERE"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add your API Key as the string&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install the following library
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;python-dotenv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Load the API Key
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt;

&lt;span class="n"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;API_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"API_KEY"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;API_KEY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's add the API key while making the requests. Some API let you add it as a parameter (refer to the specific API's documentation for more instructions. Another way is to include it as a header while using the get() function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt;

&lt;span class="n"&gt;dotenv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;API_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"API_KEY"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'x-api-key'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;API_KEY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://thecatapi.com/v1/images"&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, the key in the header's object can vary from one API to another. But the general format of making a request to a secured endpoint remains the same.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-a-post-request"&gt;
  &lt;/a&gt;
  Making a POST Request
&lt;/h3&gt;

&lt;p&gt;Making a Post request is similar to making a get request. Instead of the get() method, we used the post() method. We will make a POST request to the following &lt;a href="https://jsonplaceholder.typicode.com/"&gt;API&lt;/a&gt;.&lt;br&gt;
The following endpoint supports a POST Request&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://jsonplaceholder.typicode.com/posts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A post request requires some payload/data to be included in the request. The post() method has a parameter called "data" and our object can be passed as an argument to that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://jsonplaceholder.typicode.com/posts"&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"userId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"#DAY21"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"body"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Today is #DAY21 of #100daysofcode"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;If the POST request was successful, you should get a status_code of 201&lt;/li&gt;
&lt;li&gt;Ensure your data object follows the proper documentation as provided in the documentation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#apis-you-can-use-for-your-next-project"&gt;
  &lt;/a&gt;
  APIs you can use for your next project
&lt;/h3&gt;

&lt;p&gt;Below is a list of resources with a list of APIs (A list of lists)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://betterprogramming.pub/a-curated-list-of-100-cool-and-fun-public-apis-to-inspire-your-next-project-7600ce3e9b3"&gt;https://betterprogramming.pub/a-curated-list-of-100-cool-and-fun-public-apis-to-inspire-your-next-project-7600ce3e9b3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/public-apis/public-apis"&gt;https://github.com/public-apis/public-apis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://publicapis.sznm.dev/"&gt;https://publicapis.sznm.dev/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Python 3.10 : What's the new ?</title>
      <author>thamer_saraei</author>
      <pubDate>Sun, 11 Apr 2021 03:11:22 +0000</pubDate>
      <link>https://dev.to/thrpy/python-3-10-what-s-the-new-4a61</link>
      <guid>https://dev.to/thrpy/python-3-10-what-s-the-new-4a61</guid>
      <description>&lt;h1&gt;
  &lt;a href="#python-310-whats-the-new-"&gt;
  &lt;/a&gt;
  Python 3.10 : What's the new ?
&lt;/h1&gt;

&lt;p&gt;The release of ✨Python 3.10✨ is getting closer, so it's time to take a ride with the new version of Python and see what awesome new features will come with this new release👌 😍. &lt;/p&gt;

&lt;p&gt;Please join me in ghithub : &lt;a href="https://github.com/th-rpy/python_3.10_all_new_features"&gt;https://github.com/th-rpy/python_3.10_all_new_features&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-python-310-alpha-version"&gt;
  &lt;/a&gt;
  Install Python 3.10 Alpha version
&lt;/h2&gt;

&lt;p&gt;To try these new features, we will have to install the Alpha/Beta version of Python 3.10. Remember that this last version is not yet stable. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you are under Linux (Ubuntu), you just have to follow the steps below :&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; &lt;span class="c"&gt;# Download the latest version for Linux&lt;/span&gt;
 wget https://www.python.org/ftp/python/3.10.0/Python-3.10.0a6.tgz
 &lt;span class="c"&gt;# Unpack Python source code&lt;/span&gt;
 &lt;span class="nb"&gt;tar &lt;/span&gt;xzvf Python-3.10.0a6.tgz
&lt;span class="nb"&gt;cd &lt;/span&gt;Python-3.10.0a6
&lt;span class="c"&gt;# Compile Python source with static libraries&lt;/span&gt;
./configure &lt;span class="nt"&gt;--prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/python-3.10.0a6
make
make &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;span class="nv"&gt;$HOME&lt;/span&gt;/python-3.10.0a6/bin/python3.10
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you are under Windows, you just have to &lt;strong&gt;Download Python Executable&lt;/strong&gt; Installer from &lt;a href="https://www.python.org/ftp/python/3.10.0/python-3.10.0a6-amd64.exe"&gt;here&lt;/a&gt;, then you need to &lt;strong&gt;Run Executable Installer&lt;/strong&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you are on MacOs, I can't help you. I am not rich enough to buy a Mac!!! 😒, but this &lt;a href="https://opensource.com/article/19/5/python-3-default-mac"&gt;link&lt;/a&gt; may help you. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yeeeep, Python 3.10 is finally installed ✌ , now we can take a look at all the new features . Let's start 😉😎. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#new-features"&gt;
  &lt;/a&gt;
  New Features
&lt;/h1&gt;

&lt;p&gt;The new version of python has arrived with many features. In this article, I will show you the most important of them. So, So buckle up, the adventure with 🐍&lt;strong&gt;Python&lt;/strong&gt; will begin in a few seconds 🚀🕓. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-type-union-operator"&gt;
  &lt;/a&gt;
  New Type Union Operator
&lt;/h3&gt;

&lt;p&gt;Instead of using typing.union to express the syntax &lt;strong&gt;"either type X or type Y"&lt;/strong&gt;, the new version of python introduces the new union operator of type &lt;em&gt;X | Y&lt;/em&gt;. This new operator allows us to code more cleanly and efficiently.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Old Version&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Union&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Union&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Union&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;New Version&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'3'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This features was contributed by Ken Jin. Visit this link (&lt;a href="https://www.python.org/dev/peps/pep-0612"&gt;PEP 612&lt;/a&gt;) for more details. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typealias-annotation"&gt;
  &lt;/a&gt;
  TypeAlias Annotation
&lt;/h3&gt;

&lt;p&gt;The TypeAlias annotation concept was first introduced in PEP 484 (Python-Version: 3.5) . A reimplementation of this concept will be presented in PEP 613 (Python-Version: 3.10). The main reason for this reimplementation is that the old concept is very difficult for type checkers to distinguish between type aliases and ordinary assignments.  See the following example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Old Version&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;StrCache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Cache[str]'&lt;/span&gt;  &lt;span class="c1"&gt;# a type alias
&lt;/span&gt;&lt;span class="n"&gt;LOG_PREFIX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'LOG[DEBUG]'&lt;/span&gt;  &lt;span class="c1"&gt;# a module constant
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;New Version&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;StrCache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TypeAlias&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'Cache[str]'&lt;/span&gt;  &lt;span class="c1"&gt;# a type alias
&lt;/span&gt;&lt;span class="n"&gt;LOG_PREFIX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'LOG[DEBUG]'&lt;/span&gt;  &lt;span class="c1"&gt;# a module constant
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This features was contributed by  Mikhail Golubev. Visit this link (&lt;a href="https://www.python.org/dev/peps/pep-0613"&gt;PEP 613&lt;/a&gt;) for more details.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#better-error-messages-in-the-parser"&gt;
  &lt;/a&gt;
  Better error messages in the parser
&lt;/h3&gt;

&lt;p&gt;Suppose you want to write a code that manipulates for example a dictionary (or tuple , list or set ) and you forget to close the brackets (or the parentheses). If you are working with python 3, when you execute your code, the interpreter will display a syntax error like this one &lt;strong&gt;"SyntaxError : unexpected EOF"&lt;/strong&gt;. &lt;br&gt;
However, with this new version, when you try to parse code that contains unclosed parentheses or brackets, the interpreter will displays a more informative error with the location of the unclosed parenthesis or brackets. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Old Version&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;"example.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;some_other_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;^&lt;/span&gt;
&lt;span class="nb"&gt;SyntaxError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;invalid&lt;/span&gt; &lt;span class="n"&gt;syntax&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;New Version&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s"&gt;"example.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;37&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="o"&gt;^&lt;/span&gt;
&lt;span class="nb"&gt;SyntaxError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'{'&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;never&lt;/span&gt; &lt;span class="n"&gt;closed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This features was contributed by Pablo Galindo and Batuhan Taskaya.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#structural-pattern-matching"&gt;
  &lt;/a&gt;
  Structural Pattern Matching
&lt;/h3&gt;

&lt;p&gt;We can say that the most important feature will be introduced in this new Python 3. &lt;br&gt;
Pattern matching will be presented in the common form: match statement and case statements of patterns with associated actions.  Patterns can be: sequences, mappings, primitive data types as well as class instances. By using pattern matching, we are able to, for example, extract information from complex data types, plug into the data structure, and apply specific actions based on different data forms. This is not just the switch/case syntax we all know from other programming languages, but it also adds powerful functionality that we should explore. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Example 1: Simple pattern: match to a literal&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"x1"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"x1 .."&lt;/span&gt;
        &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"x2"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"x2"&lt;/span&gt;
        &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"x3"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="s"&gt;"x4"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# Multiple literals can be combined with `|`
&lt;/span&gt;            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Yay, "&lt;/span&gt;
        &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Just another x..."&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Example 2: Patterns with a literal and variable&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# X = (x, y, z)
&lt;/span&gt;    &lt;span class="c1"&gt;# point is an (x, y) tuple
&lt;/span&gt;    &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Origin"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Y=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"X=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"X=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, Y=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="nb"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Not a point"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Example 3: Patterns and classes&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;location&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Origin is the point's location."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Y=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; and the point is on the y-axis."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"X=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; and the point is on the x-axis."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The point is located somewhere else on the plane."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Not a point"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Example 4: Guard&lt;/strong&gt;&lt;br&gt;
We can add an if clause to a pattern, called a guard. If the guard is false, match moves on to try the next case block. Note that the value capture takes place before the guard is evaluated:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"The point is located on the diagonal Y=X at &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Point is not on the diagonal."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Example 5: Nested Patterns&lt;/strong&gt;&lt;br&gt;
Patterns can be nested in arbitrary ways. For example, if our data is a short list of points, they could be matched in the following way:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="n"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"No points in the list."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)]:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"The origin is the only point in the list."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)]:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"A single point &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; is in the list."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;)]:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Two points on the Y axis at &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; are in the list."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;case&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Something else is found in the list."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to see more examples and a full tutorial, check out &lt;a href="https://www.python.org/dev/peps/pep-0636/"&gt;PEP 636&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Python 3.10 brings many new interesting features, but as it is an alpha version (not yet stable), it is still far from being fully tested and ready for production. So it is not recommended to start using it right away. &lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>JavaScript Hoisting</title>
      <author>Santiago Correa</author>
      <pubDate>Sun, 11 Apr 2021 02:58:16 +0000</pubDate>
      <link>https://dev.to/scorreaui/javascript-hoisting-525l</link>
      <guid>https://dev.to/scorreaui/javascript-hoisting-525l</guid>
      <description>&lt;p&gt;JavaScript before executing your code parses it, and adds every function and variable declarations it finds to its own memory. This is called hoisting.&lt;/p&gt;

&lt;p&gt;There are some different behaviors that occur when using a  function declaration vs a function expression.&lt;/p&gt;

&lt;p&gt;With function declarations, we can call a function before it’s defined, and our code will work. In the other case, we’ll have errors.&lt;/p&gt;

&lt;p&gt;A general rule of thumb is to always define functions, variables, objects and classes before using them.&lt;/p&gt;

&lt;p&gt;Suppose we have a function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function cat() {
  alert("I'm a cat that meows!")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Due to hoisting, we can invoke cat() before it is declared:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat()
function cat() {
  alert("I'm a cat that meows!")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This only happens with functions and not function expressions.&lt;/p&gt;

&lt;p&gt;When you assign a function to a variable, that is a function expression:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cat()
var cat = function() {
  alert("I'm a cat that meows!")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, the var declaration is hoisted and initialized with undefined as a value, something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var cat = undefined
cat()
cat = function() {
  alert("I'm a cat that meows!")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running this code will give you a &lt;code&gt;TypeError: cat is not a function error.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;const and let declarations are hoisted, too, but they are not initialized to undefined like var.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const cat = function cat() {
  alert("I'm a cat that meows!")
}

const cat = function () {
  alert("I'm a cat that meows!")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let cat = function cat() {
  alert("I'm a cat that meows!")
}

let cat = function () {
  alert("I'm a cat that meows!")
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, if you invoke cat() before declaring it, it will give you a ReferenceError: 'cat' is not defined error.&lt;/p&gt;

&lt;p&gt;The same will happen for any other expression that assigns an object or class to a variable&lt;/p&gt;

&lt;p&gt;Class declarations work like let and const declarations: they are hoisted, but not initialized, and using a class before its declaration will give a ReferenceError:  is not defined error.&lt;/p&gt;

&lt;p&gt;A simple tip: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If you are not re-assigning a variable value, it's better to use const, otherwise use let. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't do it&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const meow = 'meow'
meow = 'meow, Angry cat!!! 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will not work - It will give you a &lt;code&gt;SyntaxError: Invalid or unexpected token&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let meow = 'meow'
meow = 'meow, Angry cat!!! 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Summary:&lt;/p&gt;

&lt;p&gt;All function declarations are hoisted to the top of the current scope before any Javascript is executed.&lt;/p&gt;

&lt;p&gt;We can call a function declaration before it’s defined, and our code will work. &lt;/p&gt;

&lt;p&gt;function expressions are hoisted and initialized with undefined as a value, so this will give you an error.&lt;/p&gt;

&lt;p&gt;If you are not re-assigning a variable value, it's better to use const, otherwise use let. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>hoisting</category>
      <category>functional</category>
      <category>intro</category>
    </item>
    <item>
      <title>I open source my remote desktop software: RustDesk</title>
      <author>open-trade</author>
      <pubDate>Sun, 11 Apr 2021 02:34:41 +0000</pubDate>
      <link>https://dev.to/opentrade/i-open-source-my-remote-desktop-software-rustdesk-n4d</link>
      <guid>https://dev.to/opentrade/i-open-source-my-remote-desktop-software-rustdesk-n4d</guid>
      <description>&lt;p&gt;Lately, I open sourced the client of RustDesk, a remote desktop software, my personal project, alternative of Teamviewer and AnyDesk. It is mainly written with Rust. Sciter sdk is used for GUI on Desktop. Flutter is used on mobile (not open source yet). Flutter interacts with Rust via FFI. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/rustdesk/rustdesk"&gt;https://github.com/rustdesk/rustdesk&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>opensource</category>
      <category>showdev</category>
      <category>flutter</category>
    </item>
  </channel>
</rss>
