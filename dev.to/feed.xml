<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Interesting people to follow for UI/UX/Webdesign</title>
      <author>Maxime Guilbert</author>
      <pubDate>Tue, 25 May 2021 13:02:32 +0000</pubDate>
      <link>https://dev.to/adaendra/interesting-people-to-follow-for-ui-ux-webdesign-34c3</link>
      <guid>https://dev.to/adaendra/interesting-people-to-follow-for-ui-ux-webdesign-34c3</guid>
      <description>&lt;p&gt;&lt;strong&gt;If you are interested in UI/UX or webdesign, here are a few people for you to follow!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are really interesting people which post regularly about new tools, tips...&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#geoffrey-crofte"&gt;
  &lt;/a&gt;
  Geoffrey Crofte
&lt;/h2&gt;

&lt;p&gt;He is a UX in Luxembourg and posts almost every day on Linkedin in French, English, or both.&lt;/p&gt;

&lt;p&gt;Also, he has a blog &lt;em&gt;(written in French)&lt;/em&gt; named &lt;strong&gt;Creative Juiz&lt;/strong&gt; with a lot of interesting posts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/geoffreycrofte/"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.creativejuiz.fr/blog/"&gt;Creative Juiz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#posts-examples"&gt;
  &lt;/a&gt;
  Posts examples
&lt;/h3&gt;

&lt;p&gt;Here is some example of tools which he talked about :&lt;br&gt;
&lt;a href="https://yeun.github.io/open-color/?ref=shuhari"&gt;Open Color&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p_lwcUw---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ap5qaorzjvcou7yvv6mj.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p_lwcUw---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ap5qaorzjvcou7yvv6mj.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://luge.cool/"&gt;Luge&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nOaAiIlQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hycqwqeedxp3tfzhfmmz.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nOaAiIlQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hycqwqeedxp3tfzhfmmz.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#colbys-dovi"&gt;
  &lt;/a&gt;
  Colbys Dovi
&lt;/h2&gt;

&lt;p&gt;He is a Product Designer in Paris. As Geoffrey, he posts almost every day on LinkedIn in French and English.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/colbysdovi/"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#posts-examples"&gt;
  &lt;/a&gt;
  Posts examples
&lt;/h3&gt;

&lt;p&gt;Here is some example of what he talked about : &lt;br&gt;
&lt;a href="https://tablericons.com/?ref=shuhari"&gt;Tabler Icons&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SGonJNt---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3jh22ef6jzql53r2kvc.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SGonJNt---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t3jh22ef6jzql53r2kvc.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://iainbean.com/posts/2021/5-steps-to-faster-web-fonts/"&gt;5 steps to faster web fonts - Blog post&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PTaA3Y_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pntga2z5mwwlxck5xowj.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PTaA3Y_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pntga2z5mwwlxck5xowj.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#laetitia-bouloc"&gt;
  &lt;/a&gt;
  Laetitia Bouloc
&lt;/h2&gt;

&lt;p&gt;Also known by the name of &lt;strong&gt;Néographe Factory&lt;/strong&gt; &lt;em&gt;(The name of her enterprise)&lt;/em&gt;, she is a freelancer in Bordeaux, France.&lt;/p&gt;

&lt;p&gt;She posts in French, generally in a video format, and it's really interesting and fun!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/N8cEEuoRzVI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Also, on her website, she has a page that can be your next bookmark! A huge &lt;a href="https://www.neographefactory.com/toolbox.html"&gt;toolbox&lt;/a&gt;!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w9BZrgGj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mya569zbp7ire1wahpd4.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w9BZrgGj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mya569zbp7ire1wahpd4.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;br&gt;
She is currently writing a book to be able to create your visual identity. It will be in French, but if you understand french and like her job, I think it will be a great buy.&lt;br&gt;
&lt;a href="https://www.neographefactory.com/book-.html"&gt;Néographe Factory - Book&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/laetitiabouloc/"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/c/N%C3%A9ographeFactory/videos"&gt;YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.neographefactory.com/"&gt;Néographe Factory - WebSite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;So go follow them and go give them some love about their great job about sharing knowledge!&lt;/p&gt;

&lt;p&gt;I hope it will help you!&lt;/p&gt;

</description>
      <category>ux</category>
      <category>css</category>
    </item>
    <item>
      <title>why use useState?</title>
      <author>Prajwal Jain</author>
      <pubDate>Tue, 25 May 2021 12:40:59 +0000</pubDate>
      <link>https://dev.to/j836/why-use-usestate-1cd9</link>
      <guid>https://dev.to/j836/why-use-usestate-1cd9</guid>
      <description>&lt;h1&gt;
  &lt;a href="#usestate"&gt;
  &lt;/a&gt;
  useState
&lt;/h1&gt;

&lt;p&gt;useState is a react API to change the state of elements or components.&lt;br&gt;
Why do we require a seperate hook to change a value of an element?&lt;br&gt;&lt;br&gt;
Well,Its always a bad practise to mutate the state directly.&lt;br&gt;&lt;br&gt;
Let me explain things along with the code itself.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;sample program to show declarative programming&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;hr&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
        &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prajwal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="c1"&gt;// if you dont use setState line no 19 does not run =&amp;gt; function is not called =&amp;gt; rerendering does not occur.&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;from onclick&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Click Me&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;welcome &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What does this code aim to do?&lt;br&gt;&lt;br&gt;
We want to display user's name instead of just user as a text when button is clicked.&lt;br&gt;&lt;br&gt;
A bad dev like me would probably do something as &lt;/p&gt;
&lt;p&gt;(which is wrong)&lt;/p&gt;
&lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;sample program to show declarative programming&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;hr&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
        &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prajwal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;from onclick&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Click Me&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;this is from user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;welcome &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: I am purposely showing the wrong approach.Sometimes looking at what is wrong helps us understanding what is correct!!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;Here goes the sandbox link for the right approach.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/bqw1u"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you see the console.log within onClick you could see that the value of user has been updated.But Wait!Why isnt it reflecting in the view?&lt;/p&gt;

&lt;p&gt;Its because..&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;if there is no setState =&amp;gt;(implies) React does not see any state changed =&amp;gt; re-rendering of function does not occur =&amp;gt; view would no be updated.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;if you dont use setState, &lt;code&gt;{console.log(user, "this is from user")}&lt;/code&gt; does not run =&amp;gt; function is not called =&amp;gt; rerendering does not occur.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Conclusion:&lt;br&gt; &lt;b&gt;only when the state is changed through setState the re-rendering of function occurs.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading till the end. If you notice something wrong do suggest me in the comment box.&lt;br&gt;
Do give it a like if it helped you understanding the concept.&lt;/p&gt;

</description>
      <category>usestate</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Declarative in terms of React.</title>
      <author>Prajwal Jain</author>
      <pubDate>Tue, 25 May 2021 12:16:31 +0000</pubDate>
      <link>https://dev.to/j836/declarative-in-terms-of-react-2g1c</link>
      <guid>https://dev.to/j836/declarative-in-terms-of-react-2g1c</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-declarative-in-terms-of-react"&gt;
  &lt;/a&gt;
  what is declarative in terms of react?
&lt;/h1&gt;

&lt;p&gt;if you are new to react then you might have heard about react being declarative.&lt;br&gt;
What exacly does that mean?Lets have a look.&lt;/p&gt;

&lt;p&gt;Say we have a button with us and initially a normal text of welcome user.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What we want to do?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We want to display user's name instead of just user as a text when button is clicked.&lt;/p&gt;

&lt;p&gt;Lets have a look at the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;sample for showing that react is declarative&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;hr&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"btn-click"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;welcome &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"user"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;user&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is what we do in vanilla javascript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#btn-click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prajwal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we need to tell the browser each and every step which are as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;hey browser, give me the button which lies on the document whose id is ....(btn-click) in our case.&lt;/li&gt;
&lt;li&gt;Do something (step 3) when user clicks on that button.&lt;/li&gt;
&lt;li&gt;when user clicks on that button,give me that element which lies on the document and whose id is ....(user in our case)&lt;/li&gt;
&lt;li&gt;set the text as ....(prajwal in our case) on it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some crucial points to be noted:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;we are dealing with the browser's DOM to perform our actions.This,is what we dont do in React.We never interact with DOM in React.
So after the birth of react this procedure seems more like a donkey work.&lt;/li&gt;
&lt;li&gt;We are telling browser each and every instruction and then it does something for us.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is the codepen link if you wish to try your hands on&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/prajwal_/embed/NWpbvBV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
React has came out with a smarter approach and thats nothing but declarative!&lt;/p&gt;

&lt;p&gt;Lets see the react code..&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;sample program to show declarative programming&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;hr&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;
        &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prajwal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="nx"&gt;setUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="c1"&gt;// if you dont use setState line no 19 does not run =&amp;gt; function is not called =&amp;gt; rerendering does not occur.&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;from onclick&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Click Me&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;welcome &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the code for you to play with.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/bqw1u"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Again if you dont know about useState you can read &lt;a href="https://dev.to/j836/why-use-usestate-1cd9"&gt;this&lt;/a&gt; blog.I have tried to explain things in a simpler way with the same example so that it is relatable.I do suggest you to check out &lt;a href="https://dev.to/j836/why-use-usestate-1cd9"&gt;this&lt;/a&gt; blog.&lt;/p&gt;

&lt;p&gt;In this react code,you see we only tell the react..&lt;br&gt; Hey React,I want to display something... on this element when some one clicks on the button.&lt;br&gt;
Neither we do document.querySelector nor we do .innerText..i.e. We dont deal direclty with browser's DOM.But still the work is done.How?Well,React does all of that for us.&lt;/p&gt;

&lt;p&gt;you see,We dont give set of long instructions.&lt;br&gt;
We only tell react what to do..how does react do that is react's look out.&lt;br&gt;&lt;br&gt;
Its more like saying&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR &lt;br&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;"suun react,tuze ye element pe ye text dikhana hai..kuch bhi kar kaise bhi kar bass kaam ho jaana chaiye..!"&lt;br&gt;&lt;/em&gt;&lt;br&gt;
Thats declarative!&lt;/p&gt;

&lt;p&gt;Thank you for reading till the end. If you notice something wrong do suggest me in the comment box.&lt;br&gt;
Do give it a like if it helped you understanding the concept.&lt;/p&gt;

</description>
      <category>react</category>
      <category>declarative</category>
      <category>imperative</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Top 10 Programming Languages to Choose in 2021</title>
      <author>John Selawsky</author>
      <pubDate>Tue, 25 May 2021 11:43:51 +0000</pubDate>
      <link>https://dev.to/selawsky/top-10-programming-languages-to-choose-in-2021-4gaj</link>
      <guid>https://dev.to/selawsky/top-10-programming-languages-to-choose-in-2021-4gaj</guid>
      <description>&lt;p&gt;When you only take your first steps into the technologies and strive to learn programming it’s kind of hard to figure out where to go. With the number of possible programming languages to learn reaching over three hundred, newbies might feel pretty gloomy about making the right choice. Let me ease that for you. I’ve been coding and teaching programming for quite a while now and I hope my experience will help you out. Here are my top ten best programming languages to learn first. Start from here, choose your path and get yourself on the road to your dream job.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#java"&gt;
  &lt;/a&gt;
  Java
&lt;/h2&gt;

&lt;p&gt;This is my personal number one. And there are plenty of reasons for it. Firstly, the demand for Java developers is never-ending. This is the technology behind enterprise-level applications used by the world’s top-notch companies. If you ever thought of working for, let’s say, Amazon, then Java is your thing. Secondly, it’s quite easy to learn for a newbie. And later, based on your Java knowledge, you can add up new languages like C++ or Python. And did I mention that Android development is also majorly based on Java? If not, then now you know.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-to-learn"&gt;
  &lt;/a&gt;
  Where to learn
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://codegym.cc/"&gt;CodeGym&lt;/a&gt;. This is a gamified learning platform that helps you go through levels of Java mastery both with fun and an in-depth look. The course has over 1200 practical coding tasks with code validation and tips to help you with your solutions. So primarily you learn by doing, not just reading theory. A built-in IDE gives you an option to code from your smartphone which is quite handy if you only have spare time somewhere away from your laptop. However, your best bet is to use the IntelliJ IDEA. It is by far the most popular Java development environment; For this purpose, CodeGym has a special IDEA plugin.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.pluralsight.com/courses/java-fundamentals-language"&gt;Java Fundamentals by Pluralsight&lt;/a&gt;. This course has a strong design patterns section which is often skipped by other learning platforms. Here you’ll get it right with the basic objective-oriented programming concepts and learn to apply them to your coding.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.codecademy.com/learn/learn-java"&gt;Codecademy&lt;/a&gt;. This is a greatly structured educational resource. You can make your own curriculum or ask someone from the community to review your code. And there are high chances to get detailed feedback.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  Python
&lt;/h2&gt;

&lt;p&gt;This language is the choice to make if you’re aiming at becoming a Data Scientist or a backend website developer. Moreover, Python is widely used in GUI applications. It has a perfect toolset for these types of projects.&lt;/p&gt;

&lt;p&gt;Also, it’s one of the easiest languages to start with. Though after Python you might find it hard to switch to a more complicated programming language.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-to-learn"&gt;
  &lt;/a&gt;
  Where to learn
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://www.learnpython.org/"&gt;Learnpython&lt;/a&gt;. The platform offers neatly structured courses covering both basic and advanced levels. Also, it has over 500K community members so you can only imagine what thorough feedback you might receive if you ask for help.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://learncodethehardway.org/python/"&gt;Learn Python the Hard Way&lt;/a&gt;. The coolest thing about this resource is that you can start here with zero previous programming experience. Though the title of the course states otherwise, the essence of it is pretty easily digestible. At least in the beginning.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://inventwithpython.com/"&gt;Invent with Python&lt;/a&gt;. You might wonder what you can invent with Python if you have no clue about the technology itself. Well, here’s the trick: first you learn the basics and do exercises to gain practical skills. And then you can actually create your own computer game!&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h2&gt;

&lt;p&gt;JavaScript is a language that allows you to do complex things on a web page. Every time the web page has more than just a static view, like updated content, animations, video scrolling, etc., it is most likely done with JavaScript. There would have been no modern web without this one. JS code is executed in a web browser.&lt;/p&gt;

&lt;p&gt;JavaScript is used not only for front-end (in browser), but sometimes also in back-end development (via nodeJS platform). By the way, now people very often choose to learn TypeScript, a strict syntactical superset of JavaScript. Both are newbie-friendly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-to-learn"&gt;
  &lt;/a&gt;
  Where to learn
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://www.freecodecamp.org/"&gt;FreeCodeCamp.org&lt;/a&gt;. As you can see from the title, this learning resource is free. But this is not its best feature. I value it for the enormous variety of tutorials and options to train your skills. As well as for a wider look at the JavaScript within the front-end development.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://codecombat.com/"&gt;CodeCombat&lt;/a&gt;. This one is good for the very beginners in programming. You can learn the basics and play a game at the same time.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.pluralsight.com/codeschool"&gt;Code School&lt;/a&gt;. I like this one for a great jQuery tutorial. But the core JavaScript course is also very well-worked. It’s also gamified like the previous one. You can move from level to level, get signs of approval and generally have fun.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#cc"&gt;
  &lt;/a&gt;
  C/C++
&lt;/h2&gt;

&lt;p&gt;Though not the easiest programming language to learn for a newbie, C++ has many areas where it’s almost indispensable. Some of the operating systems are created with this programming language. You can find it in web browsers, distributing systems, database software, triple-A videogames and many more.&lt;/p&gt;

&lt;p&gt;C is a general-purpose procedural programming language. C is closely related to hardware. This allows data and system programming to be managed at a low level. You can use it not only to create “regular” software, but also to create driver or kernel level programs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-to-learn"&gt;
  &lt;/a&gt;
  Where to learn
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://www.udemy.com/course/free-learn-c-tutorial-beginners/"&gt;C++ Tutorial for Complete Beginners&lt;/a&gt;. Here’s where you can start learning the technology and the concepts of object-oriented programming from square one. You’ll find out how the syntax works and how to set up the development environment.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.udemy.com/course/beginning-c-plus-plus-programming/"&gt;Beginning C++ Programming — From Beginner to Beyond&lt;/a&gt;. This is one more opportunity to learn C from distinguished tutors. The course is highly valued by the students and has very high ranks.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.udemy.com/course/unrealcourse/"&gt;Unreal Engine C++ Developer: Learn C++ and Make Video Games&lt;/a&gt;. As you can see from the title, this course teaches you C++ basics in game development. If you’ve ever come across cybersport and heard about Fortnite, this is a great example of a game developed with C++.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#c-sharp"&gt;
  &lt;/a&gt;
  C Sharp
&lt;/h2&gt;

&lt;p&gt;Though belonging to the C family, this language is a bit different from the previous. C# runs in a virtual machine and is very similar in principle to Java.&lt;/p&gt;

&lt;p&gt;C# was created by Microsoft and established itself as a number one technology from Windows or .NET development. Moreover, the language is used in the Unity game engine that opens the way to 2D or 3D game development. Semi-complicated for a newbie.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-to-learn"&gt;
  &lt;/a&gt;
  Where to learn
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://teamtreehouse.com/library/c-basics-2"&gt;C# Basics by Treehouse&lt;/a&gt;. It’s a 188-minute course covering the basics of C#: syntax, types, strings, variables, etc. You’ll learn how to make your first program, compile mistakes, and much more.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.udemy.com/course/csharp-tutorial-for-beginners/"&gt;C# Basics for Beginners: Learn C# Fundamentals by Coding&lt;/a&gt;. This one gives you a chance to learn major C# concepts concisely and clearly. The course creator states that it will take you 6 hours. But I think it’ll take more. If you’re through with this one, you can move on to more advanced courses by the same tutor.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.pluralsight.com/courses/csharp-fundamentals-dev"&gt;C# Fundamentals by Scott Allen (Pluralsight)&lt;/a&gt;. The course is divided into .NET concepts and tips of using C# code for creating your own applications.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#golang"&gt;
  &lt;/a&gt;
  Golang
&lt;/h2&gt;

&lt;p&gt;Also referred to as Go, the language was created by Google and is gradually becoming more and more popular. It allows a greater degree of multithreading than is considered average. Some of the very widely used DevOps tools have already evaluated the performance of this technology. It is modern and quite suitable for beginner developers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-to-learn"&gt;
  &lt;/a&gt;
  Where to learn
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://www.udemy.com/course/go-the-complete-developers-guide/"&gt;Go: The Complete Developer’s Guide (Golang)&lt;/a&gt;. Apart from learning the fundamentals the course is aimed at giving a broader notion of Go’s concurrency model. It is neatly structured and easy to follow.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.pluralsight.com/courses/go-fundamentals"&gt;Go Fundamentals By Nigel Poulton&lt;/a&gt;. If you have zero programming experience this one might be a good option. You’ll start from the very beginning and learn to write your first Go programs eventually.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.codecademy.com/learn/learn-go"&gt;Learn Go on Codecademy&lt;/a&gt;. I’ve already mentioned the resource in my Java section. Codecademy is a way to go for Go as well. The course is created together with Google, so the information there is definitely up-to-date.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#r-language"&gt;
  &lt;/a&gt;
  R language
&lt;/h2&gt;

&lt;p&gt;If you are into Data Analytics you might want to have a look at this technology — the R programming language. It is a free technology for statistical computing and it’s running on multiple operating systems. The language might be somewhat hard for a beginner. But it has great perspectives on the job market. By the way, the most recent R update came out in February 2021, check it out.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-to-learn"&gt;
  &lt;/a&gt;
  Where to learn
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://www.udemy.com/course/r-programming/"&gt;R Programming A-Z™&lt;/a&gt;. R For Data Science With Real Exercises! The course teaches you how to combine programming and statistics. And how to use all that in real life then.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.udemy.com/course/data-science-and-machine-learning-bootcamp-with-r/"&gt;Data Science and Machine Learning Bootcamp with R&lt;/a&gt;. I like this one for the stunning data visualizations you’ll be able to make. The course also goes deeper on how to deal with Machine Learning using the R language.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.coursera.org/learn/r-programming"&gt;R Programming&lt;/a&gt;. This is a more classically built course on R. It goes through the basic operations and concepts to more complicated things like data simulation. You’ll also learn how to write and debug your R code.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#php"&gt;
  &lt;/a&gt;
  PHP
&lt;/h2&gt;

&lt;p&gt;This is another popular programming language for backend web development. Huge companies like Facebook or Wikipedia are still using it. And if you turn to WordPress, knowing which is in very high demand on the job market, you will see PHP there as well. On the other hand though, PHP back-end developers might have less money than back-end devs using more sophisticated and modern technologies.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-to-learn"&gt;
  &lt;/a&gt;
  Where to learn
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://freetutsdownload.com/php-for-beginners-become-a-php-master/"&gt;PHP for Beginners — Become a PHP Master — CMS Project&lt;/a&gt;. This course is aimed at giving you the skill to create your next CMS like WordPress. It’s coined for the complete beginners but you might want to have a look at HTML first.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.udemy.com/course/php-mvc-from-scratch/"&gt;Write PHP Like a Pro: Build a PHP MVC Framework from Scratch&lt;/a&gt;. This one is not exactly for the newbies. But it’s here where you can learn how to use PHP frameworks like Symfony or Laravel. This course is very much worth trying especially if you already have a certain knowledge of PHP for example from the previous course. Or from the next one.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.udemy.com/course/oop-php-object-oriented-programing-with-project-1-course/"&gt;PHP OOP: Object-Oriented Programming for beginners&lt;/a&gt;. Here’s where you can dive into the OOP concepts by the example of PHP. The course is good for beginners and the tutor is a great instructor, in my opinion.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#swift"&gt;
  &lt;/a&gt;
  Swift
&lt;/h2&gt;

&lt;p&gt;If your dream is to publish your apps in the AppStore, here’s where you turn to start. Swift is an iOS programming language, created by Apple itself. It’s the modern successor to Objective-C and it’s a good choice for the newbie, Apple fan. So all the future AppStore conquerors go right here, to the places where you can learn this language.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-to-learn"&gt;
  &lt;/a&gt;
  Where to learn
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://www.udemy.com/course/coreml-course-for-everyone/"&gt;Complete iOS 14, Swift 5 and Machine Learning with CoreML&lt;/a&gt;. This course does not require any prior experience and it’s built around basic topics first of all. The course creator promises to dispense with useless coding practices and get you into real-world coding. And I see no reason to doubt that.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.udemy.com/course/swiftui-masterclass-course-ios-development-with-swift/"&gt;SwiftUI Masterclass 2021 — iOS 14 App Development &amp;amp; Swift 5&lt;/a&gt;. The updated version of the masterclass contains around 23 hours of video. It takes you through the basics to a more advanced level and teaches you all the essential skills you need to start creating your own projects.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.udemy.com/course/cracking-coding-interview-algorithm-design-in-swift-2020/"&gt;Cracking Coding Interview &amp;amp; Algorithm Design in Swift (2021)&lt;/a&gt;. This course will teach you not only coding in Swift but also how to explain your technical decisions at a job interview. A very handy skill for a beginner programmer, isn’t it?&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#kotlin"&gt;
  &lt;/a&gt;
  Kotlin
&lt;/h2&gt;

&lt;p&gt;This one unlike the previous is number one for the conquerors of Google Play. Kotlin was named by Google as a primary technology for Android development. Note that it is being executed on Java Virtual Machine and the language is not that easy for people making their first steps into programming. I’d recommend learning Java first and then switching to Kotlin.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-to-learn"&gt;
  &lt;/a&gt;
  Where to learn
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://www.udemy.com/course/kotlin-for-java-developers/"&gt;Kotlin for Java Developers&lt;/a&gt;. As you see from the title of the course it’s not only me who thinks that Java should go first. But for those who want to upgrade mobile development skills, this is a place to go. The course is designed to explain the two languages in comparison so that you learn Kotlin faster based on the knowledge you already have.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.udemy.com/course/the-complete-kotlin-developer-course-java/"&gt;The Complete Kotlin Developer Course&lt;/a&gt;. This is a more comprehensive resource for learning Kotlin. Again, it has a part explaining how Kotlin and Java are related. You’ll learn the essentials of programming and the way they work in this technology.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.udemy.com/course/kotlin-course/"&gt;Kotlin for Beginners: Learn Programming With Kotlin&lt;/a&gt;. If you still think of skipping Java and jump right into mobile development, try out this course. It teaches you starting with the very basics and by the end, you’ll create your first Kotlin app.
## Wrap Up
Now that we’ve narrowed down your choice to the ten most popular programming languages it’s time for you to take action. Whichever you pot for, there’s a pretty high chance of success. The job market is thriving thanks to these technologies and it seems like it will continue to thrive in the coming years. So make your choice and start to learn programming!&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>java</category>
      <category>python</category>
      <category>javascript</category>
      <category>kotlin</category>
    </item>
    <item>
      <title>How I Recreated YouTube in Figma: Practical Guide</title>
      <author>Shawn Mahbhb</author>
      <pubDate>Tue, 25 May 2021 11:36:43 +0000</pubDate>
      <link>https://dev.to/shawnmux/how-i-recreated-youtube-in-figma-practical-guide-5fjh</link>
      <guid>https://dev.to/shawnmux/how-i-recreated-youtube-in-figma-practical-guide-5fjh</guid>
      <description>&lt;p&gt;Content is king in 2021. we learn through content, we entertain ourselves with content, we even procrastinate ourselves with content. A large number of this content is the video and when it comes to video content, YouTube has been the undisputed king since its inception back in 2005.&lt;/p&gt;

&lt;p&gt;Apart from the great video content, we found on YouTube, a huge player behind YouTube’s popularity is its buttery smooth user experience. As an aspiring UX designer, I thought it would be a great learning experience to recreate YouTube from scratch.&lt;br&gt;
I split the journey into 4 sections thus you can understand my approach of recreating YouTube in a precise way.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Take the snapshot&lt;/li&gt;
&lt;li&gt;Analyze &amp;amp; create a component library&lt;/li&gt;
&lt;li&gt;Create the style sheet&lt;/li&gt;
&lt;li&gt;Follow fronted framework Vue JS&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#take-the-snapshot"&gt;
  &lt;/a&gt;
  Take the Snapshot
&lt;/h2&gt;

&lt;p&gt;The first step is to take a snapshot of the interface. Different screen resolutions are starting from the 360px to 2160px but which one should you pick. The best option is to take the snapshot at 1440px which is the standard breakpoints of a desktop.&lt;/p&gt;

&lt;p&gt;After that, create a desktop frame in Figma which is 1440 X 1024 px by resolution. Drag the image file from your directory to the selected Figma frame. After placing the image successfully, align it to the top and left to the frame. Select the image from the layout hierarchy and reduce the opacity to 60% and lock it to the frame thus you can design other components over it.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/i1RSgq2etjI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#analyze-amp-create-a-component-library"&gt;
  &lt;/a&gt;
  Analyze &amp;amp; create a component library
&lt;/h2&gt;

&lt;p&gt;Whenever you are going to design a large-scale application you need to build a component library because the same components will be reused in other sections of the interface.&lt;/p&gt;

&lt;p&gt;In my case, I’ve analyzed 4 major components with their base components and design the whole interface. For perfection, I switch to Firefox and take div screenshots and paste it to Figma. Additionally, I inspect the computed layout of the div section to measure margins and padding between the objects of the component to make the design identical.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4FS_rk3S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uj05bmfuhhqllp666jfj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4FS_rk3S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uj05bmfuhhqllp666jfj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Video Card: From a UX perspective you need to have the skill to identify the component that draws the user’s attention first. In my case, it is the video card component that draws maximum attention from me when I visited YouTube every time. There are a couple of base components like Channel Avatar, Video Thumbnails, Video Title, and Channel Details.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wkkt2bnQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/602/1%2AbC5mtRSLwf78SyXkFkFmzw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wkkt2bnQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/602/1%2AbC5mtRSLwf78SyXkFkFmzw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Related Chips/Tags: On top of the video cards, there are related video chips that are generated by your watching history and suggest related tags as per your interest. As a UI designer, you need to design small components first so that you can build complex components to make the layout complete.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--epA3FCyh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AG-oe_jjJG-o_Qs9P-aPXYA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--epA3FCyh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AG-oe_jjJG-o_Qs9P-aPXYA.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;App Bar: The next component that I build is the app bar component. In these components, there are a couple of base components like search, user avatar and upload video icons. I combine all together to create an App Bar. This is the simplest component that I design from all of the components.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GtubaWGW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AHQQW7uXrktNzccMh0N8YLQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GtubaWGW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AHQQW7uXrktNzccMh0N8YLQ.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Navigation Drawer: Finally, I build the navigation drawer which is one of the important components for the users that will redirect the users to different pages of YouTube. In this component, there are also multiple base components but they are similar in type. That is why I create a variant for them to use it smartly all over the interface. One variant shows only the options to navigate and another variant shows subscription channels with new video status. As a UI designer, you’ve to give focus on those small details that will help you in your design thinking ability.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jk9IuDU6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2ArRZ0pEwiyhx24OJbTNsPEw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jk9IuDU6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2ArRZ0pEwiyhx24OJbTNsPEw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-style-sheet"&gt;
  &lt;/a&gt;
  Creating the Style sheet
&lt;/h2&gt;

&lt;p&gt;A style sheet is combined of design assets such as color, typography, icons, illustrations, spacing, elevation, etc. As a UI designer, you’ve to collaborate with developers and they need design assets from the style sheets. If you create a separate Figma page for design assets and name them as per your team’s coding convention that will reduce the time of your developer’s friend. For example, If you have a color palette with multiple Grey Shades then name like Grey 90, Grey 80, Grey 70, etc.&lt;/p&gt;

&lt;p&gt;For typography, I use Roboto as this is the default typeface of Google’s product that follows material design. I use the material tool for generating the type scale as per material guidelines. This will help you to create a robust and responsive type system for your design.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--62KNHy-i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2Awh0SoQBIo8rFZtiO1R_XLw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--62KNHy-i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2Awh0SoQBIo8rFZtiO1R_XLw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For colors, I use the material kit resource of Figma and there I get every shade of grey and other states colors such as error, success, warning, etc. In the color frame, you can see that I’ve taken multiple shades of the primary and secondary colors so that I can choose among the variants for designing dark mode and make the design accessible.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iQDMTyR8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AWsMjiRC35Ns_JbCVDTkSog.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iQDMTyR8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AWsMjiRC35Ns_JbCVDTkSog.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Additionally, I need icons that will have multiple states like outlined or filled. In material icons, I found 5 states of icons that are the same icons used by YouTube product design as they are bound to follow the material design as their design system.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pexniiJc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AfRETcYBkc1F-eyVwb6vb6g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pexniiJc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AfRETcYBkc1F-eyVwb6vb6g.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, there are elevation levels that I need to use for designing multiple interaction states like hover, enabled, focused, dragged, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rKdu7R6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2ADdITQ7YDoKYfcySQNTqDtA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rKdu7R6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2ADdITQ7YDoKYfcySQNTqDtA.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#follow-frontend-framework-library-vuetify-js"&gt;
  &lt;/a&gt;
  Follow Frontend Framework Library: Vuetify JS
&lt;/h2&gt;

&lt;p&gt;After you’ve successfully designed the interface, it is time to hand off your design to your developer’s colleagues. I need to document my design system as per the guidance of Vuetify JS which is a component library of the Vue JS frontend framework.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KjUvcD5z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AqiEmhLOC1v-uDmbiC5iWRQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KjUvcD5z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AqiEmhLOC1v-uDmbiC5iWRQ.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will help my developer friend to quickly identify the components and build the interface quickly. For example, for the video, my developers are going to use the card component and configure it as per my design and declare it component class and reuse it on other pages of the application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kh336gLQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AAYNKUyDvtcrngpNxoO6BSw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kh336gLQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AAYNKUyDvtcrngpNxoO6BSw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my case, I have used Vue but it depends on your developer’s team as they are credible to choose the framework. In your case, it could be React JS, Bootstrap, Angular, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-result"&gt;
  &lt;/a&gt;
  Final Result
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kriVwKXQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2Aw9PmZMOeV1GWxriutcpJ7g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kriVwKXQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2Aw9PmZMOeV1GWxriutcpJ7g.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learning-outcomes"&gt;
  &lt;/a&gt;
  Learning Outcomes
&lt;/h2&gt;

&lt;p&gt;As many Figma designers struggled to design complex components with Auto-Layout I am not an exception. I design every base and master component with the help of Auto-Layout thus it helps me design responsive interfaces in multiple breakpoints. If you want a separate tutorial of auto-layout then let me know in the comment section.&lt;/p&gt;

&lt;p&gt;As I’ve said previously, building a large-scale application is a complex process and if you follow the process of building a component library then it will save a lot of time for your team and project.&lt;/p&gt;

&lt;p&gt;As a UX designer, I always wanted to design interfaces that completely follow the material guidelines. Following their approach is an industry-standard approach for designing applications. I’ve to go through the material design guidelines during the design time and it helps me to get deeper knowledge about their design patterns.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;I’ve recreated YouTube thus designers like us follow an industry-standard approach as many designers feel the pain of designing complex applications. By following the steps that I’ve discussed above you can recreate any of the complex applications and add them to your portfolio that makes more sense.&lt;br&gt;
Look around the design approach, if you think it’s suitable for your use-case, use these steps as a template. If you think something can be improved, let me know or heck you can just contribute directly. That’s the beauty of UX design, isn’t it?&lt;/p&gt;

&lt;p&gt;Good Bye, Thank you 😀&lt;/p&gt;

</description>
      <category>ux</category>
      <category>uiweekly</category>
      <category>vue</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>We need a better way to communicate and explain our code decisions</title>
      <author>Kevin Gilpin</author>
      <pubDate>Tue, 25 May 2021 11:26:30 +0000</pubDate>
      <link>https://dev.to/appland/we-need-a-better-way-to-communicate-and-explain-our-code-decisions-1nic</link>
      <guid>https://dev.to/appland/we-need-a-better-way-to-communicate-and-explain-our-code-decisions-1nic</guid>
      <description>&lt;p&gt;Last month, I gave a talk at &lt;a href="https://railsconf.org/"&gt;RailsConf 2021&lt;/a&gt; titled "Teach your code to describe its own architecture". If you weren’t able to watch it during the conference, don’t worry -- I’m going to share a recap of my talk in a series of four, short blog posts and videos.&lt;/p&gt;

&lt;p&gt;This first post recaps the intro of my presentation. You can watch this part of my talk in the video clip shown above, and take a look at how I framed the architecture documentation problem and solution for RailsConf attendees. I’d love to hear if it resonates with you in the &lt;a href="https://discord.com/invite/N9VUap6"&gt;AppMap Discord&lt;/a&gt;! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Architecture documents and diagrams are always out of date. &lt;/li&gt;
&lt;li&gt;As developers, the docs we make for end users aren’t the same as the ones we need for our own work.&lt;/li&gt;
&lt;li&gt;The freedom to make decisions about code design now belongs to developers, not architects. So we as developers need a better way of communicating and explaining our decisions to other developers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A new kind of documentation that developers create as they work so it’s available when newcomers to the code need it &lt;/li&gt;
&lt;li&gt;This new kind of documentation should always be:

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Up-to-date&lt;/strong&gt; Wrong documentation is worse than useless -- it’s misleading. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Interactive&lt;/strong&gt; A static picture isn’t powerful enough.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Contextual&lt;/strong&gt; Traditional architecture documentation is too big and complex to be immediately useful.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;As close to the code as possible&lt;/strong&gt; Ideally, the documentation is in the code, because that’s where we’re working.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#coming-up-next"&gt;
  &lt;/a&gt;
  Coming up next
&lt;/h2&gt;

&lt;p&gt;In Parts 2, 3 and 4, I’m going to recap the demo portions of my RailsConf talk. Using tools that automatically generate documentation and visualizations of architecture and code design, I’ll auto-document end-to-end code and data flows, web services and the relational database schema.&lt;/p&gt;

</description>
      <category>rails</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Learn Java Language — All the Dos &amp; Don’ts</title>
      <author>John Selawsky</author>
      <pubDate>Tue, 25 May 2021 11:22:25 +0000</pubDate>
      <link>https://dev.to/selawsky/learn-java-language-all-the-dos-don-ts-h13</link>
      <guid>https://dev.to/selawsky/learn-java-language-all-the-dos-don-ts-h13</guid>
      <description>&lt;p&gt;&lt;em&gt;“Wasn’t the Python programming language that topped the charts last we checked?”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, you may be right about that but when it comes to agile and super-scalable desktop applications powered by the world’s leading cross-platform computing environment providers Java takes the lead in a majority of aspects. Exactly, now you are realizing that you should learn Java.&lt;/p&gt;

&lt;p&gt;For someone who is aiming to become a part of the developers’ community, it’s important to choose a language that is widely popular and has a well-endowed helpers’ community. What other language comes to mind other than Java? Mastering code in Java is absolutely fun to do and once you start practicing it, the language itself will unravel its upsides for you to acknowledge.&lt;/p&gt;

&lt;p&gt;Several programming languages and frameworks inherit their glossary of reserved functions and keywords from the Java programming language.&lt;/p&gt;

&lt;p&gt;What exactly does this imply?&lt;/p&gt;

&lt;p&gt;Well, that’s easy to decode! If you know Java and the technologies corresponding to it, it will be easier to switch to another language if necessary. Especially when it comes to JVM languages that are gaining traction.&lt;/p&gt;

&lt;p&gt;Furthermore, as Java is a versatile language it’s easier to learn and fun to practice.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#market-scope-of-java-programming-language"&gt;
  &lt;/a&gt;
  Market Scope of Java Programming Language
&lt;/h2&gt;

&lt;p&gt;Let’s have a whiff of what the statistics say about that.&lt;/p&gt;

&lt;p&gt;Java programmers are earning a whopping &lt;a href="https://www.salary.com/research/salary/benchmark/java-developer-salary"&gt;$154,000 per year&lt;/a&gt; and it’s exclusive of all the other benefits that come in the package.&lt;/p&gt;

&lt;p&gt;Had I known this before, I’d have dived into the sea of Java way earlier than most of the pro-level programmers out there but hey, now that you are here, why not have some insight into one of the most adopted programming languages in the world?&lt;/p&gt;

&lt;p&gt;This can be one of the primary reasons why Java programming language &lt;a href="https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-languages-loved"&gt;tops the list&lt;/a&gt; of “most loved programming languages” and around 44.1% of the aspiring programmers choose to learn to code in Java. What else could be more tempting than the fact that there are approximately 41,916 openings for Java programmers on &lt;a href="https://www.indeed.com/jobs?q=Java+Developer&amp;amp;l="&gt;indeed.com&lt;/a&gt; as you are reading the blog!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#things-i-wish-i-had-known-about-learning-java"&gt;
  &lt;/a&gt;
  Things I Wish I Had Known About Learning Java
&lt;/h2&gt;

&lt;p&gt;“How to master Java?” Literally, this was the only question that many aspiring Java programmers have in mind. Now that you are reading this, answer this: &lt;em&gt;What’s the goal of learning Java?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The force which usually drives the freshmen towards learning Java programming language is the fact that Java is quite a feature-rich and easy-to-learn language. After having to spend just a few hours pondering over solving a problem, it’s sufficient to know that the solution you’ll come up with, is going to be an awesome one.&lt;/p&gt;

&lt;p&gt;In short, your goal behind learning Java programming should be to develop a skill to be able to engineer solutions to certain problems. Let’s take a look at the steps that you should take to become a top-notch Java developer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#put-your-focus-on-problem-solving-not-coding"&gt;
  &lt;/a&gt;
  Put Your Focus on Problem Solving, not Coding!
&lt;/h2&gt;

&lt;p&gt;Interestingly, you can’t simply “learn” problem solving; rather you develop problem-solving skills over time. Learning the syntax is also a really important step but not the only important one. Only by learning the syntax, you can implement a solution to a problem. Otherwise, you’ll keep consulting one resource after another only to fix the semantics.&lt;/p&gt;

&lt;p&gt;What else do you need to become an accomplished Java programmer? Instead of wasting extended hours on learning the syntax and language structures, focus on coming up with solutions to certain problems.&lt;/p&gt;

&lt;p&gt;As a developer, you should be able to map out a clear and concise solution for the problem that lays ahead. Additionally, spending more time on learning syntax isn’t worth it anyway since technologies and frameworks are always evolving.&lt;br&gt;
Fortunately, we know a few credible resources which are known to provide beginners with an interactive learning environment using which you can start learning right away!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codegym.cc/"&gt;CodeGym&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AQgLpco_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/5b65bac8-df94-4f61-b983-3af916552d87/" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AQgLpco_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/5b65bac8-df94-4f61-b983-3af916552d87/" alt="1_QhSI21SsIVW7tG7KZSx3bg.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Think of a video game that you love playing, the one that you simply can’t get enough of.&lt;/p&gt;

&lt;p&gt;You have now landed on a galaxy far away from where there are no humans but only robots! Your only way out is to get your hold on one of the robots and burn a certain code of Java code into the system of that robot. So your goal as a young robot, to learn Java to fix the spaceship.&lt;/p&gt;

&lt;p&gt;The entire learning experience spans over 40 levels each with a varying level of difficulty and you get to unlock the next level only if you successfully pass the preceding one. Moreover, CodeGym also features a code verification system that aids the user and checks if the user is solving the task correctly.&lt;/p&gt;

&lt;p&gt;It has been designed in such a way that you will be spending only 20% of your time on theory while the rest of your time will be spent doing practical tasks.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.codecademy.com/"&gt;Codecademy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rhQFCQw7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/333c9280-e80f-4104-b663-cb5bb07902bb/" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rhQFCQw7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/333c9280-e80f-4104-b663-cb5bb07902bb/" alt="1_rl2XPZrujTtrfK3vHilH8g.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another resourceful platform for learning Java programming is Codecademy. As estimated 45 million learners have successfully developed their skills of programming and problem-solving from this platform and who said you can’t be the next pro-level Java programmer coming out of the same learning experience?&lt;/p&gt;

&lt;p&gt;Codecademy offers a variety of tools along with a built-in IDE which has been specifically designed to foster an environment of more and more practice. One of the many scoring points of this platform is that while learning, you can choose any domain ranging from Web Development and Desktop Development leading up to Data Sciences and Machine Learning!&lt;br&gt;
The choice is yours!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.sololearn.com/"&gt;SoloLearn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AxOTahT3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/2b9bc098-328f-41c2-8baf-a5fb3288d637/" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AxOTahT3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/2b9bc098-328f-41c2-8baf-a5fb3288d637/" alt="1_anJffCmzRWKhmVpleDwC6w.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Talking about interactive learning platforms and not mentioning SoloLearn, would be totally an injustice.&lt;/p&gt;

&lt;p&gt;SoloLearn has now evolved into a highly intuitive learning platform for young programmers and it has marked several milestones on the way. If we term it as the social media platform for beginner-level developers, it won’t be wrong at all.&lt;/p&gt;

&lt;p&gt;On this portal, hundreds and thousands of aspiring programmers get in touch with each other, collect points for interactions and make their way to the list of “Top Learners”.&lt;/p&gt;

&lt;p&gt;Apart from Java, SoloLearn provides the facility to learn other programming languages including Python, JavaScript, PHP, Html, CSS and many more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ensuring-your-code-is-functional"&gt;
  &lt;/a&gt;
  Ensuring Your Code is Functional
&lt;/h2&gt;

&lt;p&gt;Skepticism makes the best version out of a programmer!&lt;/p&gt;

&lt;p&gt;Making sure that your code is working is one of those habits which will help you minimize the dependency factor of another resource to find out the bugs in the code that you wrote. Therefore, always double rather triple check the solution because this is the only way of delivering a quality build, and guess what, it will clear out your ways of becoming a solutions architect. Sounds awesome, isn’t it?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#seek-opinion-from-mentors"&gt;
  &lt;/a&gt;
  Seek Opinion from Mentors
&lt;/h2&gt;

&lt;p&gt;Many aspiring programmers do really hate having their code reviewed. Before any of our esteemed readers justify this, let’s take a moment to understand the fact that nobody on earth, can literally write the perfect piece of code. Being a freshman, if your code isn’t properly reviewed, it’s highly likely that the time you are spending on skill development, is not totally worth it.&lt;/p&gt;

&lt;p&gt;Write your Java code and get it reviewed by one of your mentors who can be your seniors in the coding school, your tech-savvy friends or anyone from the helpers’ community online. If you do so, your coding style will improve and you will be able to grasp the concepts quickly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fix-the-code-if-its-bad"&gt;
  &lt;/a&gt;
  Fix the Code If It’s Bad
&lt;/h2&gt;

&lt;p&gt;“Code is like humor. When you have to explain it, it’s bad.”&lt;/p&gt;

&lt;p&gt;This is a nice definition of a “bad code”, but not only. After all, commenting on your code is a good practice among programmers and a good habit. However, one pattern has been noticed: the more programming experience you have, the easier it is to read your code.&lt;/p&gt;

&lt;p&gt;If you are still learning programming, It’s likely that your coding style is immature and you end up writing a program that does the job but its structure is bad.&lt;/p&gt;

&lt;p&gt;Many programmers out there, totally ignore the fixes required in the code and they usually think if a piece of code works fine, let it work but the problem arises when that code breaks.&lt;/p&gt;

&lt;p&gt;In such a situation, don’t just stand your ground rather take a step back, absorb the criticism on your code, take it all in and come up with a better version of your code, one that actually impresses. Also think about optimization of your old code with the tools you have learned recently.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-amp-progress-as-a-team"&gt;
  &lt;/a&gt;
  Learn &amp;amp; Progress — As a Team
&lt;/h2&gt;

&lt;p&gt;An app that was written by a single human is a pretty rare event. Coding is a collaborative activity and if you really want to excel, simply rule out the idea that somebody out there is going to bring you down. Had it been true, would there be such rich platforms, the likes of Stackoverflow, Stackexchange and the rest?&lt;/p&gt;

&lt;p&gt;Every day we see hundreds and thousands of queries posted on helper forums and coding platforms and these queries get answered by top guys in the field. Learning to code alone is identical to learning to play violin but how will that violinist perform in an orchestra? If he somehow gets into the band, the progress of a well-synced team will get ruined due to one un-synced violinist.&lt;/p&gt;

&lt;p&gt;So, what does that teach us? Not to fall prey to the imposter syndrome and get yourself out there and show the rest your willingness to learn and grow as a part of a stellar team in the making.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap Up
&lt;/h2&gt;

&lt;p&gt;Being an aspiring programmer, keep on improving constantly and make sure your knowledge gained doesn’t go to waste by lack of practise. With all the right tools and web applications at your disposal, you can easily learn Java programming and become a problem solver in quite a small amount of time.&lt;/p&gt;

&lt;p&gt;While learning, don’t rule out the importance of collaboration with your fellow learners and taking opinions from mentors since it will help you out in the longer run. Make the best use of learning portals and those belonging to the same league so that your pathway stays clear out of the bumps!&lt;/p&gt;

&lt;p&gt;First published on &lt;a href="https://medium.com/javarevisited/learn-java-language-all-the-dos-donts-8d9d52354b5a"&gt;JavaRevisited&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>java</category>
      <category>beginners</category>
      <category>programming</category>
      <category>code</category>
    </item>
    <item>
      <title>4 Habits of Successful People</title>
      <author>SummaryLover</author>
      <pubDate>Tue, 25 May 2021 11:20:59 +0000</pubDate>
      <link>https://dev.to/summarylover/4-habits-of-successful-people-4i1e</link>
      <guid>https://dev.to/summarylover/4-habits-of-successful-people-4i1e</guid>
      <description>&lt;h3&gt;
  &lt;a href="#habit-1-lifelong-learner"&gt;
  &lt;/a&gt;
  Habit 1 : Lifelong Learner
&lt;/h3&gt;

&lt;p&gt;To Succeed in life you need two things. Ignorance and Confidence. – Mark Twain&lt;br&gt;
One thing you never stop doing is learning and growing. No matter at which age you are in but never stop learning because learning is part of life like eating and exercising. You will never get old when you keep learning you get old when you stop learning. One you will never stop doing in your whole life is reading books. Reading is like breathing, eating and drinking water for successful people. The Successful people miss their meal but they never miss reading books. Attach your pleasure to &lt;a href="https://summarylover.com/2020/07/the-seven-habits-of-highly-effective-people-summary.html"&gt;reading books&lt;/a&gt; and pain to never reading books. &lt;br&gt;
Remember No matter what you become and what happens in your life just never stop reading books. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#habit-2-stay-persistent"&gt;
  &lt;/a&gt;
  Habit 2 : Stay Persistent
&lt;/h3&gt;

&lt;p&gt;We are here to put a dent in the universe. – Steve Jobs&lt;br&gt;
The people who give up are the ones who regret it in their whole life. Failure are part of  life when you do new things in life chances are you will meet temporary failure but it never means you give up on it. Learn from your every failure, failure has something to teach you take the lessons from your failure and let it go. The people usually give up when they don't have strong why behind what they are doing. Give yourself strong reason in what you are going when you have purpose behind your work you will become unstoppable in your calling. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#habit-3-courage"&gt;
  &lt;/a&gt;
  Habit 3 : Courage
&lt;/h3&gt;

&lt;p&gt;Happiness is an inside job. Don’t assign anyone else that much power over your life. - Unknown&lt;br&gt;
Courage what takes you towards the life you are afraid to going. Courage is what kept you going when there is no behind you, courage is what kepts you going when no one believes in your dreams. Courage what makes start working on your calling. When you do something new which is never done before there some people who always trying to push you down the time when you need courage to keep working on what you believe. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#habit-4-long-term-mindset"&gt;
  &lt;/a&gt;
  Habit 4 : Long term mindset
&lt;/h3&gt;

&lt;p&gt;No struggle, no progress and no success. – Maxime Lagace&lt;br&gt;
Be clear what you want and what you want 10 years from now. Long term thinking mindset is what gives you clarity about what you wan 10 years from now. Be better person than you were yesterday the mindset you need to &lt;a href="https://summarylover.com/2020/08/goals-book-summary.html"&gt;achieve your long term goals&lt;/a&gt;. Live your in way that will takes you towards your long term goals do something every day which takes you towards your long term goals and dreams.&lt;/p&gt;

</description>
      <category>productivity</category>
    </item>
    <item>
      <title>Convert your website into a PWA in 8 simple steps | Next.js | PWA Series PART-2</title>
      <author>milindsoorya</author>
      <pubDate>Tue, 25 May 2021 11:13:28 +0000</pubDate>
      <link>https://dev.to/milindsoorya/convert-your-website-into-a-pwa-in-8-simple-steps-next-js-pwa-series-part-2-3l3h</link>
      <guid>https://dev.to/milindsoorya/convert-your-website-into-a-pwa-in-8-simple-steps-next-js-pwa-series-part-2-3l3h</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Hey all, this is part 2 on how to convert your website into a PWA. If you want to know how PWA works check out the part 1, &lt;a href="https://milindsoorya.site/blogs/make-your-website-pwa-compatible-next-js-part-1"&gt;Introduction to PWA&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I highly recommend reading this article once completely before doing a hands-own.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#now-that-i-have-talked-about-the-boring-part-lets-jump-into-some-coding-%E2%80%8D"&gt;
  &lt;/a&gt;
  Now that I have talked about the boring part, lets jump into some coding 🐱‍💻
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;First things first, you should already have a website which is responsive and work on mobile devices. As a tutorial you can use the below code to bootstrap a next.js website&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#step-1-create-a-sample-website"&gt;
  &lt;/a&gt;
  Step 1: Create a sample website
&lt;/h2&gt;

&lt;p&gt;If you don't already have one, you can use the &lt;a href="https://nextjs.org/docs/api-reference/create-next-app"&gt;create next app&lt;/a&gt; to bootstrap a sample website.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="nx"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;pwa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;site&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how your folder structure look after the first step&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z2nE7rNX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621939913019/JvsckZvpP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z2nE7rNX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621939913019/JvsckZvpP.png" alt="fs1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-install-the-dependencies"&gt;
  &lt;/a&gt;
  Step 2: Install the dependencies
&lt;/h2&gt;

&lt;p&gt;We will be using a package called &lt;a href="https://www.npmjs.com/package/next-pwa"&gt;next-pwa&lt;/a&gt; for converting our next.js website into a PWA. Install it from npm by&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt; &lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;pwa&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;after install you can run it by the command &lt;strong&gt;npm run dev&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-edit-nextjs-configuration-file"&gt;
  &lt;/a&gt;
  Step 3: Edit Next.js configuration file
&lt;/h2&gt;

&lt;p&gt;In your root directory check for a file called &lt;strong&gt;next.config.js&lt;/strong&gt; if it is not present create one and *&lt;strong&gt;*paste the following code. Remember to restart the server after changing **next.config.js&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// next.config.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;withPWA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next-pwa&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;runtimeCaching&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next-pwa/cache&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;withPWA&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="na"&gt;pwa&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;public&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;runtimeCaching&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;

&lt;span class="c1"&gt;// This is not required to make it into a PWA, but is a nice way to clean up your imports&lt;/span&gt;
&lt;span class="na"&gt;webpack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-4-create-necessary-assets"&gt;
  &lt;/a&gt;
  Step 4: Create necessary assets
&lt;/h2&gt;

&lt;p&gt;You need to create an Icon for your app, you may use this &lt;a href="https://maskable.app/editor"&gt;site&lt;/a&gt; to get a standardized icon, after generating the icon, place it in the root.&lt;/p&gt;

&lt;p&gt;After that use this nifty package called &lt;a href="https://www.npmjs.com/package/pwa-asset-generator"&gt;pwa-asset-generator&lt;/a&gt; for automatically generating icons needed for PWA and splash screen images, favicons etc.&lt;/p&gt;

&lt;p&gt;Run the below command from your terminal, and make sure to give proper icon name. I recommend naming your icon image as &lt;strong&gt;icon&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7xxBh9aL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621939933774/q3bYkkAqH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7xxBh9aL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621939933774/q3bYkkAqH.png" alt="fs2.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt; &lt;span class="nx"&gt;npx&lt;/span&gt; &lt;span class="nx"&gt;pwa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;asset&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;generator&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;png&lt;/span&gt; &lt;span class="nx"&gt;icons&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above command will generate an icons folder with all the necessary images.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zI2hWM6v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621939945469/QgMB2q3tC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zI2hWM6v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621939945469/QgMB2q3tC.png" alt="fs3.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now move the icons folder into public folder&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UWFa04Qa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621939953250/CJxqd82sy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UWFa04Qa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621939953250/CJxqd82sy.png" alt="fs4.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-create-a-manifestjson-file"&gt;
  &lt;/a&gt;
  Step 5: Create a manifest.json file
&lt;/h2&gt;

&lt;p&gt;In your public folder create a manifest.json file like below. If you look below you can see an array called icons with image properties. You can get that also by using the pwa-asset-generator. It is automatically generated when running the above code. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z3C8kht1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621939971368/3SL8YcZHI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z3C8kht1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621939971368/3SL8YcZHI.png" alt="pwa-asset-generator.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can edit manifest file to change the look and feel of you app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;public/manifest.json&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"pwa-is-cool"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"short_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"PWA"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"theme_color"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#2196f3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"background_color"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#2196f3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"display"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"fullscreen"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"orientation"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"portrait"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scope"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"start_url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"icons"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"icons/manifest-icon-192.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"sizes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"192x192"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"image/png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"purpose"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"maskable any"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"icons/manifest-icon-512.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"sizes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"512x512"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"image/png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"purpose"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"maskable any"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"splash_pages"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-6-edit-your-documentjs-file"&gt;
  &lt;/a&gt;
  Step 6: Edit your _document.js file
&lt;/h2&gt;

&lt;p&gt;By default there won't be a file called _document.js, you have to create one in the pages directory. &lt;/p&gt;

&lt;p&gt;please check this &lt;a href="https://nextjs.org/docs/advanced-features/custom-document"&gt;official documentation&lt;/a&gt; if you are in doubt. This file is used to inject meta tags into all the pages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pages/_document.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NextScript&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;next/document&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyDocument&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Document&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;getInitialProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getInitialProps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;initialProps&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"manifest"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/manifest.json"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/favicon-16x16.png"&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"image/png"&lt;/span&gt; &lt;span class="na"&gt;sizes&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"16x16"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/favicon-32x32.png"&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"image/png"&lt;/span&gt; &lt;span class="na"&gt;sizes&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"32x32"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"apple-touch-icon"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/apple-icon.png"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"theme-color"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#317EFB"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;NextScript&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyDocument&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#6-test-your-pwa"&gt;
  &lt;/a&gt;
  6. Test your PWA!
&lt;/h1&gt;

&lt;p&gt;Now, your app is PWA ready. We just need to test this. When we use next-pwa , the service workers are enabled only on production. So, we can build our app with &lt;strong&gt;npm run build&lt;/strong&gt; or &lt;strong&gt;yarn build&lt;/strong&gt;. Then start it by &lt;strong&gt;npm start&lt;/strong&gt; or &lt;strong&gt;yarn start&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// build the project by&lt;/span&gt;
&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;run&lt;/span&gt; &lt;span class="nx"&gt;build&lt;/span&gt;

&lt;span class="c1"&gt;// Start the build by&lt;/span&gt;
&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now go to your &lt;a href="http://localhost:3000"&gt;localhost:3000&lt;/a&gt; and  You will see something like this. Install the website and you can use it like any native app. If you want to know how a PWA will look in a mobile device checkout my website &lt;a href="https://milindsoorya.site/"&gt;milindsoorya.site&lt;/a&gt; from your mobile browser and try installing it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ysjAyC4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621939990091/Tz-tdKLcJ.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ysjAyC4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621939990091/Tz-tdKLcJ.jpeg" alt="pwa-final.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-it-your-first-pwa-is-up-and-running"&gt;
  &lt;/a&gt;
  That's it, your first PWA is up and running.🎉🎉🎉
&lt;/h2&gt;

&lt;h1&gt;
  &lt;a href="#what-next"&gt;
  &lt;/a&gt;
  What next
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;You can disable the service workers in development by this &lt;a href="https://stackoverflow.com/questions/40783790/disable-service-workers-when-in-development-mode"&gt;simple trick&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;As an exercise I recommend converting the, not so mobile friendly create-next-app into an app.&lt;/li&gt;
&lt;li&gt;You can add offline fallback to make the app look good even when offline, by following &lt;a href="https://github.com/shadowwalker/next-pwa/blob/master/examples/offline-fallback/service-worker.js"&gt;these steps&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#useful-resources"&gt;
  &lt;/a&gt;
  Useful Resources:
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://web.dev/maskable-icon/"&gt;Create Maskable-icons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/pwa-asset-generator"&gt;PWA-asset-generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.favicon-generator.org/"&gt;Create a favicon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;👉🏼 checkout my website, &lt;a href="https://milindsoorya.site/"&gt;milindsoorya.site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you very much for reading, liking and commenting on my articles. If you have enjoyed my article or if it was helpful please support me by &lt;a href="https://www.buymeacoffee.com/milindsoorya"&gt;buying me a coffee&lt;/a&gt; ☕ 😇.&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>javascript</category>
      <category>pwa</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Writable GitHub Pages using HTTP Triggered GitHub Actions</title>
      <author>Benjamin Kaiser</author>
      <pubDate>Tue, 25 May 2021 11:09:36 +0000</pubDate>
      <link>https://dev.to/benkaiser/writable-github-pages-using-http-triggered-github-actions-28j9</link>
      <guid>https://dev.to/benkaiser/writable-github-pages-using-http-triggered-github-actions-28j9</guid>
      <description>&lt;p&gt;GitHub Pages is one of the most popular tools for developers when it comes to static site hosting. But what if the contents didn't have to be &lt;em&gt;completely&lt;/em&gt; static? In this post I'll outline how you can make a dynamic website powered by GitHub Pages and GitHub Actions and explain the nuts and bolts of how it works. Best of all, this works with a free GitHub account!&lt;/p&gt;

&lt;p&gt;If you're someone who wants to cut to the chase and see what can be built, I made:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  A &lt;a href="https://benkaiser.github.io/pages-imgur/"&gt;simple image upload site&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;  A &lt;a href="https://benkaiser.github.io/pages-pastebin/"&gt;simple pastebin clone&lt;/a&gt; and&lt;/li&gt;
&lt;li&gt;  Integrated this solution into &lt;a href="https://benkaiser.github.io/earnings/"&gt;my earnings tracker website&lt;/a&gt;, where you can &lt;a href="https://benkaiser.github.io/earnings/#/addticker"&gt;submit other companies to be added to the earnings lists&lt;/a&gt; without any sign in.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#combinging-github-actions-and-pages"&gt;
  &lt;/a&gt;
  Combinging GitHub Actions and Pages
&lt;/h3&gt;

&lt;p&gt;GitHub allows you to create actions in your repository, these are basically CI flows that can (among other things) make changes to files and commit them back to the repository. You can trigger an action run by one of many ways, but in this post we'll focus on &lt;code&gt;[repository_dispatch](https://docs.github.com/en/actions/reference/events-that-trigger-workflows#repository_dispatch)&lt;/code&gt;, which allows you to trigger an action from a HTTP request to a GitHub API endpoint.&lt;/p&gt;

&lt;p&gt;On GitHub, you can also convert your repository into a full-blown static website for free using GitHub Pages.&lt;/p&gt;

&lt;p&gt;It's not hard to imagine when combining these two features of GitHub that you could make a flow of data such that your GitHub Pages website:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Makes a HTTP call to trigger an action run&lt;/li&gt;
&lt;li&gt;  That action run then updates some files in the repo and&lt;/li&gt;
&lt;li&gt;  The repo update re-publishes the GitHub pages site.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is however one barrier to this approach, authentication.&lt;/p&gt;

&lt;p&gt;Triggering an action with &lt;code&gt;[repository_dispatch](https://docs.github.com/en/actions/reference/events-that-trigger-workflows#repository_dispatch)&lt;/code&gt; requires you to pass a bearer token. You can create a &lt;a href="https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token"&gt;PAT (Personal Access Token)&lt;/a&gt; and use that, however if you were to publish that on your GitHub Pages site it would give any visitor the ability to modify all of your repos on GitHub. So until GitHub add tighter scoping controls (ideally a specific repo and only permission to run actions) we have to use the other option, a GitHub App.&lt;/p&gt;

&lt;p&gt;I've created &lt;a href="https://github.com/apps/public-action-trigger"&gt;a GitHub app&lt;/a&gt; to support this flow, including the Azure function necessary to proxy the requests to GitHub. This allows you to delegate permission for action runs on a specific repo to the GitHub app, and then make API calls to it's public-facing Azure function endpoint to trigger a  &lt;code&gt;[repository_dispatch](https://docs.github.com/en/actions/reference/events-that-trigger-workflows#repository_dispatch)&lt;/code&gt; event. If you want to spin up your own version of the app/function, &lt;a href="https://github.com/benkaiser/dispatch-app"&gt;source is available here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-now-possible"&gt;
  &lt;/a&gt;
  What is Now Possible
&lt;/h3&gt;

&lt;p&gt;Roughly the steps are as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Install the &lt;a href="https://github.com/apps/public-action-trigger"&gt;GitHub app to your repo&lt;/a&gt; to allow &lt;code&gt;[repository_dispatch](https://docs.github.com/en/actions/reference/events-that-trigger-workflows#repository_dispatch)&lt;/code&gt; to be called unauthenticated.&lt;/li&gt;
&lt;li&gt; Add a fetch call (like below) as part of some user action on the GitHub Pages site itself.&lt;/li&gt;
&lt;li&gt; Create a GitHub action in the same repo that accepts a &lt;a href="https://docs.github.com/en/actions/reference/events-that-trigger-workflows#repository_dispatch"&gt;repository_dispatch&lt;/a&gt; trigger (triggered by the fetch call), modify some data, commit it back to the repository that will update the GitHub Pages site. Make sure the &lt;a href="https://github.com/marketplace/actions/github-commit-push-with-rebase"&gt;commit and push step handles rebasing to allow for concurrent runs&lt;/a&gt; and add some &lt;a href="https://github.com/benkaiser/testing-web-action-persistence/blob/5a6370d9aab3584a5b0ff8f24ba5a83f3eaecc4f/.github/workflows/web.yml#L12-L50"&gt;retry steps in case the rebase push fails&lt;/a&gt;.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fetch("https://publicactiontrigger.azurewebsites.net/api/dispatches/{owner}/{repo}", {
  method: 'POST',
  mode: 'cors',
  body: JSON.stringify({ event_type: 'some-event', client_payload: { data: 'somedata' } })
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For those of you that prefer technically incorrect but kind of legible diagrams, this is what is happening behind the scenes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5Glq6Gv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.kaiserapps.com/content/images/2021/05/image-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Glq6Gv---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.kaiserapps.com/content/images/2021/05/image-2.png" alt="bad diagram of the above flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#limitations"&gt;
  &lt;/a&gt;
  Limitations
&lt;/h3&gt;

&lt;p&gt;GitHub Pages and GitHub Actions weren't exactly designed with this use-case in mind, as such there are some limitations you'll run into:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Updates aren't instant. The action can often take 5-10 seconds to kick off, then depending on what your action does it may take 30 seconds to run, then another 10-30 seconds for GitHub Pages to reflect the repo changes.&lt;/li&gt;
&lt;li&gt; Payload sizes are limited. The maximum size of a payload you can send to the /dispatches endpoint is limited by GitHub to ~70kb. &lt;a href="https://github.community/t/maximum-size-of-client-payload-in-repository-dispatch/178406"&gt;Here is my ask about making this bigger.&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; Reflecting updates requires cache-busting. The only way for the users session to know if the action has taken effect is to request a file it knows will be changed once the action run is complete with a different query string parameter repeatedly. A simple way to do this is to pass a known ID (e.g. a GUID) to the dispatch call and then write that to a file in the served pages directory. &lt;a href="https://github.com/benkaiser/pages-imgur/blob/ed8bbfd17b76247e4e0dd7965ef1d8495158b51a/script.js#L88-L96"&gt;When you repeatedly ping that file from the client and get a 200 response back you know the action run has succeeded&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt; Parallel actions are &lt;a href="https://docs.github.com/en/actions/reference/usage-limits-billing-and-administration#usage-limits"&gt;capped at 20&lt;/a&gt;. If your actions run as fast as 10 seconds, you can fit a maximum of ~120 updates per minute. However if you receive a burst of user actions there is potential that some will be dropped and ignored by GitHub (or run later, I'm not sure how GitHub handles the concurrency limit). You may also run into scale issues trying to concurrently push a bunch of commits since the push will fail if the HEAD has been updated from the push in another action run, &lt;a href="https://github.com/benkaiser/testing-web-action-persistence/blob/5a6370d9aab3584a5b0ff8f24ba5a83f3eaecc4f/.github/workflows/web.yml#L12-L50"&gt;retries can help mitigate this&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt; Making concurrent changes to the same file can be challenging. Because these updates run independently on separate Action runners, if they both modify a file at the same time, the commit and push step at the end may fail due to a conflict. I'll outline possible solutions to this below.&lt;/li&gt;
&lt;li&gt; All &lt;code&gt;repostitory_disaptch&lt;/code&gt; actions are publicly available unauthenticated. This means that this architecture is generally geared towards websites where there are no formal accounts for users and everything is publicly accessible.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#handling-concurrency"&gt;
  &lt;/a&gt;
  Handling Concurrency
&lt;/h3&gt;

&lt;p&gt;If all you want is a flat-file database to be updated, say a big JSON file or an SQLite database, you will likely run into conflicts when two updates happen at the same time. Here are a couple of approaches you can take:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pushing Forward with a Single File&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One potential solution to this is to &lt;a href="https://github.community/t/how-to-retry-a-failed-step-in-github-actions-workflow/125880/2?u=benkaiser"&gt;create several retry steps&lt;/a&gt;. Such that if you hit a conflict on the push step, you clone the repo and run the update all over again. This isn't optimal as it doesn't guarantee the changes will eventually be made (all retries could fail), but this could ease some of the burden.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redesigning Your Architecture as Unique Files&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If the type of updates you are doing can be done independently of each other, you can write to different files and your actions won't conflict with each other. This is great for cases where users take some action and it can live independently of actions from other users. This is how the &lt;a href="https://benkaiser.github.io/pages-imgur/"&gt;image uploader example&lt;/a&gt; works.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Taking Advantage of Jekyll Collections&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A nice mix of separate files + listing them on a webpage can be done using &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;. Jekyll is built into GitHub Pages and you can use some of it's features &lt;a href="https://jekyllrb.com/docs/collections/"&gt;to list collections of data on a webpage&lt;/a&gt;. This is the approach taken in the &lt;a href="https://github.com/benkaiser/pages-pastebin"&gt;pastebin clone I built&lt;/a&gt;, where you &lt;a href="https://benkaiser.github.io/pages-pastebin/public.html"&gt;can view a listing of all public pastes&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-possible"&gt;
  &lt;/a&gt;
  What's Possible
&lt;/h2&gt;

&lt;p&gt;This aproach opens up a whole new type of website that can be created with GitHub Pages. Here are a couple ideas for fun ones that come to mind:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;a href="https://benkaiser.github.io/pages-pastebin/"&gt;Text sharing&lt;/a&gt; - i.e. Pastebin / GitHub Gists&lt;/li&gt;
&lt;li&gt; &lt;a href="https://benkaiser.github.io/pages-imgur/"&gt;Image sharing (of small images)&lt;/a&gt; - i.e. Imgur (although trying to create a homepage/search gets tricky with concurrency, image upload is easy)&lt;/li&gt;
&lt;li&gt; Persisted website prototyping - i.e. Codepen / JSfiddle&lt;/li&gt;
&lt;li&gt; Persisted publicly editable music library - i.e. &lt;a href="https://next.kaiserapps.com/playlist/Library"&gt;Stretto&lt;/a&gt; (disclaimer: another one of my open source projects)&lt;/li&gt;
&lt;li&gt; r/place clone (although the concurrent throughput may be an issue for a 1000x1000px grid, could work for 100x100).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#in-the-wild"&gt;
  &lt;/a&gt;
  In the Wild
&lt;/h2&gt;

&lt;p&gt;It would be awesome to hear what you manage to create with this approach. &lt;a href="https://github.com/benkaiser/dispatch-app/issues/new"&gt;Create an issue here&lt;/a&gt; to let me know how it goes.&lt;/p&gt;

</description>
      <category>github</category>
      <category>serverless</category>
      <category>javascript</category>
    </item>
    <item>
      <title>useContext for better state management!</title>
      <author>Yogini Bende</author>
      <pubDate>Tue, 25 May 2021 11:01:38 +0000</pubDate>
      <link>https://dev.to/ms_yogii/usecontext-for-better-state-management-51hi</link>
      <guid>https://dev.to/ms_yogii/usecontext-for-better-state-management-51hi</guid>
      <description>&lt;p&gt;Hi folks, &lt;/p&gt;

&lt;p&gt;Managing data in an app is little tricky when many components are sharing and updating it. useState, useReducer, useMemo etc. are some state management hooks in React, which are very efficient and have their own ways to work in different scenarios. Though all these hooks are effective, there are still some situations where managing state becomes difficult. &lt;/p&gt;

&lt;p&gt;If you already know why we need context hook, you can directly jump to its implementation &lt;a href="#how-to-use-it"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Consider an app which works on user’s data. On loading, the app fetches this data from a backend and stores it in an app component. Later, this data is shared between many other children components. If child components are just using that data, then it’s fine. But, problems will arise, if one of them will update the data. &lt;/p&gt;

&lt;p&gt;As we know, the app component fetches the data, we need to use prop drilling to share it with all the children. In this case, we create a prop &lt;code&gt;userData&lt;/code&gt; and pass it to all the children of this app component, making it look something like this - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N31pYk8k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5klsf386fillw1gmy6in.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N31pYk8k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5klsf386fillw1gmy6in.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This approach works when the children are just consuming the data and not updating it. But if you see in the diagram, the &lt;code&gt;children four&lt;/code&gt; is performing an update operation on our user data. After this update, the new version of data should be made available to all the other components. &lt;/p&gt;

&lt;p&gt;If you notice, this transaction of data becomes fairly difficult when the app is complex and there are multiple states to handle across multiple components. &lt;/p&gt;

&lt;p&gt;These are the scenarios where state management libraries like Redux are introduced in the app. But with React context in hand, we can do the state management efficiently and natively. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S Redux is a very good and very vast state management system. It is the best choice for complex applications. But if the app has only a few shared states, I prefer working with context over Redux.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-context"&gt;
  &lt;/a&gt;
  What is Context?
&lt;/h3&gt;

&lt;p&gt;React context is nothing but a global state to the app. It is a way to make a particular data available to all the components no matter how they are nested. Context helps you &lt;strong&gt;broadcast&lt;/strong&gt; the data and changes happening to that data, to all the components. That’s why it is a very useful state management hook, when it comes to use cases like we discussed above. &lt;/p&gt;

&lt;p&gt;You can read more on React context in the &lt;a href="https://reactjs.org/docs/context.html"&gt;official documentation&lt;/a&gt; of react&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-use-it"&gt;
  &lt;/a&gt;
  How to use it?
&lt;/h3&gt;

&lt;p&gt;Now that we understand the what and why behind a context. Let’s understand how we can use it. To create a context in any React app, you need to follow 4 simple steps - &lt;br&gt;
1- Create a context&lt;br&gt;
2- Create a provider&lt;br&gt;
3- Add provider to the app&lt;br&gt;
4- UseContext&lt;/p&gt;

&lt;p&gt;These terms can become super confusing in the start. The best way to understand context is, consider it as a simple state, a state which we create using useState. The only thing context will do is to share this state and its changes throughout the app. &lt;/p&gt;

&lt;p&gt;Hence, when we say, we are creating a context, we are creating a state! When we say we are creating a provider, as its name says, we are creating a wrapper component to provide that state to all the components. It is that simple!&lt;/p&gt;

&lt;p&gt;Now, let's dive into code and create a context! In the below code, we will be covering step 1 and 2.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// UserDetailsProvider.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//create a context, with createContext api&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userDetailsContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserDetailsProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// this state will be shared with all components &lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;userDetails&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUserDetails&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="c1"&gt;// this is the provider providing state&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;userDetailsContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{[&lt;/span&gt;&lt;span class="nx"&gt;userDetails&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUserDetails&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/userDetailsContext.Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;UserDetailsProvider&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above, we have used &lt;strong&gt;createContext&lt;/strong&gt; api to create our &lt;code&gt;userDetailsContext&lt;/code&gt;. Now, the context got created, so we will need to create a provider. &lt;/p&gt;

&lt;p&gt;In the function UserDetailsProvider, we created a provider for &lt;code&gt;userDetailsContext&lt;/code&gt;. &lt;code&gt;&amp;lt;contextname.Provider&amp;gt;&lt;/code&gt; is a common syntax for creating it. Please note a &lt;code&gt;value&lt;/code&gt; prop here. The value prop will be used always to pass the shared state down. In this case, we are passing both state and setState functions down. This is because, even though any component updates the state, the global state can get updated which will be available for all the components. &lt;/p&gt;

&lt;p&gt;Now that our context and provider are created. Let’s add the provider to the app. This is the most important step, as it will make the provider available to all components. Hence, let’s wrap our app component inside this provider. Our app component will look something like this -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//App Component&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;RouteWithSubRoutes&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./utils/shared&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;UserDetailsProvider&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./context/UserDetailsProvider&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Routes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BrowserRouter&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="c1"&gt;// As login do not require the userDetails state, keeping it outside.&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Login&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;exact&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="c1"&gt;// All other routes are inside provider&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserDetailsProvider&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;RouteWithSubRoutes&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="p"&gt;))}&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/UserDetailsProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Switch&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/BrowserRouter&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this code, the data will not be fetched by the app component. Note, here we are adding only those components inside UserDetailsProvider which actually needs this state. &lt;/p&gt;

&lt;p&gt;So here we come to the last part, using this context in any component. You must have guessed, this step needs the hook &lt;strong&gt;useContext&lt;/strong&gt; as we will be using a context here! (No claps on guessing 😛)&lt;/p&gt;

&lt;p&gt;This is done in the same way as we declare a state using useState. Something like this -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Profile.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getUser&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../utils/api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;userDetailsContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../context/UserDetailsProvider&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Profile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// This is how we useContext!! Similar to useState&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;userDetails&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUserDetails&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userDetailsContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleGetUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;setUserDetails&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;// TODO: better error handling&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;userDetails&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;handleGetUser&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bg-gray-gray1 h-full&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c1"&gt;// do something&amp;lt;/div&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you have noticed, the useContext looks similar to useState. And later we will be using it same as useState!! Hence, whenever the setUserDetails function is called, the state change will be effective throughout the app, saving too much prop drilling. &lt;/p&gt;

&lt;p&gt;So, that’s all about useContext hook. I have also seen many examples of context api being used in toggling and setting themes for an app. Do share your use-cases for using this context api.&lt;/p&gt;

&lt;p&gt;Thank you so much for reading this article and please let me know your comments/feedback/suggestions.  &lt;/p&gt;

&lt;p&gt;Keep learning 🙌&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Making Better Decisions</title>
      <author>Dave Sev</author>
      <pubDate>Tue, 25 May 2021 10:45:53 +0000</pubDate>
      <link>https://dev.to/dracount/making-better-decisions-2nbn</link>
      <guid>https://dev.to/dracount/making-better-decisions-2nbn</guid>
      <description>&lt;p&gt;Making difficult decisions is never fun, especially when you doubt. Give yourself the confidence to stand behind your decisions by learning about how to make decisions... better.&lt;/p&gt;

&lt;p&gt;How do you choose between two options when stuck in a dilemma? everyone will tell you to make a Pro and Con list, list the benefits and pitfalls of the decision and everything will work itself out. The problem with this approach is that its one sided, and the decision doesn't often feel any easier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CofgTu1U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28qd0y58wkmefbgo4bsn.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CofgTu1U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28qd0y58wkmefbgo4bsn.JPG" alt="Capture"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Another way to look at the same decision is the Rubber Band decision making framework. A tool to give two options an equal footing, and allow you to make the comparison in a much more direct way.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In case you're interested...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you are looking for guidance in career development, I help senior IT developers create their dream jobs through self discovery, career planning and how to make the best out of your job. Contact me if you would like to discuss further.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Lets dive in.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#should-i-take-a-new-job-at-acme-inc"&gt;
  &lt;/a&gt;
  Should I take a new job at ACME Inc?
&lt;/h1&gt;

&lt;p&gt;This question is one of the most common questions on forums, and its easy to understand why. Most people don't know how to make these types of decisions, so they throw it out to the internet hoping that someone will take that responsibility from them. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The problem is that the options looks seemingly evenly balanced&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Unfortunately every situation is different and you are the only person is able to answer this question. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X46al7SU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hdy6mca7hv8653o7j14x.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X46al7SU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hdy6mca7hv8653o7j14x.JPG" alt="Capture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-usual-way-pro-and-con-lists"&gt;
  &lt;/a&gt;
  The usual way: Pro and Con Lists
&lt;/h1&gt;

&lt;p&gt;If not the first answer to this question in the replies, its usually in the top 3: make a Pro and Con list and make your decision from there.&lt;/p&gt;

&lt;p&gt;The problem with the Pro and Con list is that it is one sided. It doesn't allow you to evaluate two different decisions equally. The options are not being evaluated against each other, rather they are being evaluated separately and this may make the two options appear evenly balanced - leaving you without a clear winner - even when they are not.&lt;/p&gt;

&lt;p&gt;Think to yourself - did a Pro's and Con's list ever help make your decisions easier?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pro's and Con's have a Negative Focus rather than a positive one&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Con's list is actually my current position, framed in a negative light against my Pro's list. Is that best way for me to evaluating my options? No - because I have two possibilities - not just one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The missing ingredient is that it is not being evaluated against my current job.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sure, there is a Con's list but it is not a direct comparison. What I need is a way to give each option an equal footing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We are also suggesting that not moving forward is a negative - which it is not!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--csMOkZhH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i17kgtpd0vxd2fy8ijoi.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--csMOkZhH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i17kgtpd0vxd2fy8ijoi.JPG" alt="Capture"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-new-framework-the-rubber-band-model"&gt;
  &lt;/a&gt;
  A New Framework: The Rubber Band Model
&lt;/h1&gt;

&lt;p&gt;The Rubber Band Model is similar, but different. The Rubber Band Model puts you in between two Rubber Bands, each one on opposite sides. One is pulling you, and one is holding you back.&lt;/p&gt;

&lt;p&gt;If I am trying to decide to take a new job, the Rubber Band would consist of my current job (holding) and my new job (pulling)&lt;/p&gt;

&lt;p&gt;Now I can think of what are the factors that are holding me and pulling me - we are now comparing two options, based on their positive features directly against one another.&lt;/p&gt;

&lt;p&gt;Pulling me:&lt;br&gt;
new environment&lt;br&gt;
better salary&lt;br&gt;
interesting work&lt;br&gt;
new role and challenges&lt;/p&gt;

&lt;p&gt;Holding me:&lt;br&gt;
I like my colleagues&lt;br&gt;
Close to home&lt;br&gt;
Shorter hours&lt;br&gt;
More leave days&lt;/p&gt;

&lt;p&gt;The con's list are reframed as benefits of the other option!&lt;/p&gt;

&lt;p&gt;Now I can compare the two against each other, and my decision seems a lot easier to make.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#give-it-a-try"&gt;
  &lt;/a&gt;
  Give It A Try
&lt;/h1&gt;

&lt;p&gt;Have you had any decisions that seem to be impossible to make? Next time give the Rubber Band method a try. Let me know your experience with making Pro's and Con's and if you have tried the Rubber Band method let me know how it goes!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In case you're interested...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you are looking for guidance in career development, I help senior IT developers create their dream jobs through self discovery, career planning and how to make the best out of your job. Contact me if you would like to discuss further.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>decisions</category>
      <category>job</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
