<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Schema, Sub-schema and Languages of DBMS</title>
      <author>hebaShakeel</author>
      <pubDate>Fri, 04 Jun 2021 11:03:41 +0000</pubDate>
      <link>https://dev.to/hebashakeel/schema-sub-schema-and-languages-of-dbms-1c4i</link>
      <guid>https://dev.to/hebashakeel/schema-sub-schema-and-languages-of-dbms-1c4i</guid>
      <description>&lt;p&gt;&lt;strong&gt;Architecture of DBMS&lt;/strong&gt;&lt;br&gt;
1) It helps in development, implementation, designing and maintenance of a database that stores and organizes information for business, agency and institution etc.&lt;/p&gt;

&lt;p&gt;2) The whole concept of DBMS depends upon its &lt;strong&gt;Architecture&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D1yXJuja--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6n8jfm2jxulshqt13lqs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D1yXJuja--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6n8jfm2jxulshqt13lqs.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1-tier Architecture&lt;/strong&gt;&lt;br&gt;
The database is directly available to the DBMS user for executing the SQL queries and storing data in it. Any changes or updates that are done here will be reflected directly to the database in the DBMS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2-tier Architecture&lt;/strong&gt;&lt;br&gt;
It is based on client-server machine. In this type of architecture, &lt;strong&gt;applications on the client-side can interact directly with the database on the server side&lt;/strong&gt;.&lt;br&gt;
&lt;strong&gt;Examples&lt;/strong&gt; are &lt;strong&gt;Oracle, Sybase, Microsoft SQL Server&lt;/strong&gt;, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3-tier Architecture&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It consists of the following layers:&lt;br&gt;
&lt;strong&gt;1) Presentation layer&lt;/strong&gt; - This layer is also known as &lt;strong&gt;client layer&lt;/strong&gt;. It is the front end layer in the 3-tier architecture and it consists of a &lt;strong&gt;user-interface&lt;/strong&gt;. The main purpose of this layer is to communicate with the application layer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Application layer&lt;/strong&gt; - This layer is also known as &lt;strong&gt;business logic layer&lt;/strong&gt;. It acts as a &lt;strong&gt;middle layer&lt;/strong&gt; between the client and the database server for &lt;strong&gt;exchange of partially processed data&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) Database layer&lt;/strong&gt; - The data or information is stored in this layer. This layer contains a method to connect with the database and to perform operations such as insert, update and delete.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DBMS Schema&lt;/strong&gt;&lt;br&gt;
1) It is the structure of database.&lt;br&gt;
2) It does not change by performing operations like insertion, deletion and updation/modification.&lt;br&gt;
3) It describes integrity constraints, domain of all attributes, Primary Key, Foreign Key and all other keys etc.&lt;br&gt;
4) It describes the overall database. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example of Schema&lt;/strong&gt;&lt;br&gt;
"Company"&lt;br&gt;
1) Emp(eID, eName, eAddress)&lt;br&gt;
2) DeptId(dID,dName, dLocation)&lt;br&gt;
3) Project(pID,EmpID,dID)&lt;br&gt;
4) Dependent(dID,EmpID,dNo)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sub-Schema&lt;/strong&gt; - It is a subset of the schema having the same properties that a schema has. It allows the user to view only that part of the database that is of interest to him.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instances&lt;/strong&gt;&lt;br&gt;
They are values of a table at a particular time.&lt;br&gt;
EMP(eID, eName, eMobile, eEmail)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VZh9KBnn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lvdcnt1cugkf6xdbg0vx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VZh9KBnn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lvdcnt1cugkf6xdbg0vx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DBMS Languages&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tfdnmopc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ay5mv0ubgc8c24gt73i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tfdnmopc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ay5mv0ubgc8c24gt73i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I) Data Definition Language (DDL)&lt;/strong&gt;- It describes the structure of database,i.e. tables (attributes, domain, key) constraints.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt; &lt;br&gt;
1) Create&lt;br&gt;
2) Rename&lt;br&gt;
3) Truncate&lt;br&gt;
4) Drop&lt;br&gt;
5) Alter&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;II) Data Modification Language (DML)&lt;/strong&gt; - It manipulates data in the table (or) selects data from table.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;br&gt;
1) Select&lt;br&gt;
2) Insert&lt;br&gt;
3) Update&lt;br&gt;
4) Delete&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;III) Data Control Language (DCL)&lt;/strong&gt; - It is used to access stored or saved data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;br&gt;
1) Grant&lt;br&gt;
2) Revoke&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IV) Transaction Control Language (TCL)&lt;/strong&gt; - They are used for controlling transactions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;br&gt;
1) Commit&lt;br&gt;
2) Rollback &lt;/p&gt;

&lt;p&gt;If you enjoyed reading so far...&lt;br&gt;
Thank you so much&lt;br&gt;
See your beautiful face in the next article.&lt;/p&gt;

</description>
      <category>database</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Input, output and memory for the BPU</title>
      <author>Alex Esoposting</author>
      <pubDate>Fri, 04 Jun 2021 10:54:58 +0000</pubDate>
      <link>https://dev.to/olus2000/input-output-and-memory-for-the-bpu-4kgg</link>
      <guid>https://dev.to/olus2000/input-output-and-memory-for-the-bpu-4kgg</guid>
      <description>&lt;p&gt;Two weeks ago I listed basic components necessary for building a simple computer, now it's time to design some of them. In this week's tutorial I'm going to design parts of the brainfuck computer that work outside of the BPU: memory and ways to communicate with the user. It will involve designing a flag circuit and learning a simple handshake protocol.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#memory"&gt;
  &lt;/a&gt;
  Memory
&lt;/h3&gt;

&lt;h6&gt;
  &lt;a href="#may-contain-knowledge"&gt;
  &lt;/a&gt;
  May contain knowledge
&lt;/h6&gt;

&lt;p&gt;This is the most important part of the computer except from the CPU. It is used to store both a program the CPU runs and data it uses in it's computation. As a consequence a standard RAM chip will not require too much additional hardware to work with the BPU: the BPU will be designed to communicate with memory, not vice versa.&lt;/p&gt;

&lt;p&gt;A memory chip is divided into cells which hold integer values, just like brainfuck memory. A BPU memory is connected to two buses: data bus, from which it will load and to which it will store it's contents, and address bus which selects a memory cell to interact with. To implement conditional jumps I also need a "Zero flag" line separate from the data bus which will check if the currently addressed memory cell is zero even if memory isn't broadcasting its contents to the data bus.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nnEbjZIo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ps7bl83hfl9oetno9pb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nnEbjZIo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ps7bl83hfl9oetno9pb.png" alt="memory module diagram"&gt;&lt;/a&gt;&lt;br&gt;Memory module in Logisim
 &lt;/p&gt;

&lt;p&gt;Memory will connect to following lines:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Address bus&lt;/td&gt;
&lt;td&gt;Input&lt;/td&gt;
&lt;td&gt;Used to address cells&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data bus&lt;/td&gt;
&lt;td&gt;Input/Output&lt;/td&gt;
&lt;td&gt;Used to communicate with other components&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Zero flag&lt;/td&gt;
&lt;td&gt;Output&lt;/td&gt;
&lt;td&gt;Used by the BPU in conditional jumps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;D-&amp;gt;RAM&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Control&lt;/td&gt;
&lt;td&gt;Enables storing data from the data bus&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;RAM-&amp;gt;D&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Control&lt;/td&gt;
&lt;td&gt;Enables loading data to the data bus&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reset&lt;/td&gt;
&lt;td&gt;Control&lt;/td&gt;
&lt;td&gt;Sets all cells to 0; connected to the computer's reset switch&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Clock&lt;/td&gt;
&lt;td&gt;Clock&lt;/td&gt;
&lt;td&gt;Data is stored on rising edges of the clock if enabled with D-&amp;gt;RAM&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h5&gt;
  &lt;a href="#zero-flag"&gt;
  &lt;/a&gt;
  Zero flag
&lt;/h5&gt;

&lt;p&gt;Note that &lt;code&gt;RAM-&amp;gt;D&lt;/code&gt; doesn't connect to &lt;code&gt;ld&lt;/code&gt; input of the RAM chip which would normally be used for this purpose. Instead &lt;code&gt;ld&lt;/code&gt; is permanently set to 1 so that data is always broadcasted, but bridged off from the data bus by a buffer controlled by the &lt;code&gt;RAM-&amp;gt;D&lt;/code&gt; signal. This way it is possible to check if a cell is zero without broadcasting it's contents to the data bus. The small "=0" circuit which calculates the flag is just a single multi-input NOR gate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hPMCLAnN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/47mg19xlyaphpmtfzc50.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hPMCLAnN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/47mg19xlyaphpmtfzc50.png" alt="Zero flag diagram"&gt;&lt;/a&gt;&lt;/p&gt;
Zero flag circuit in Logisim


 

&lt;h3&gt;
  &lt;a href="#inputoutput-overview"&gt;
  &lt;/a&gt;
  Input/Output overview
&lt;/h3&gt;

&lt;h6&gt;
  &lt;a href="#talking-to-other-devices"&gt;
  &lt;/a&gt;
  Talking to other devices
&lt;/h6&gt;

&lt;p&gt;Memory is only one of many circuits that a BPU might need to communicate with, but others don't get separate interfaces and signals: they all share the same lines and signals and may require an additional circuit to figure out which device the BPU is trying to communicate with.&lt;/p&gt;

&lt;p&gt;Fortunately I will not need such a thing because I will only implement the simplest possible I/O for debugging and to show you the handshake protocol.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#handshake"&gt;
  &lt;/a&gt;
  Handshake
&lt;/h5&gt;

&lt;p&gt;The handshake is used when two devices (possibly running on different clocks so they are not synchronised) need to communicate. Except from any lines they need to send data two one-bit lines are required to perform a handshake: a "Start" flag controlled by the device that initialises the connection (the processor) and a "Ready" flag controlled by the other one (the device). The handshake proceeds as follows:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Start&lt;/th&gt;
&lt;th&gt;Ready&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;The processor and the device are doing their separate things. When the processor wants to connect it broadcasts relevant data on the data lines, sets "Start" to 1 and waits.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;When the device is ready it starts processing data broadcasted on the data lines. It may take any amount of time. The processor waits, still broadcasting data and setting "Start" to 1. After the device is done processing it broadcasts the answer, sets "Ready" to 1 and waits.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;The device waits for the response. The processor captures data broadcasted by the device, stops broadcasting data and sets "Start" to 0 terminating the connection.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;The device stops broadcasting data, sets "Ready" to 0 and continues it's operation until another communication is requested.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;This method has many advantages: it is simple, it assumes nothing about both devices and it allows for temporary synchronisation between components that can otherwise be running on very different speeds.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#handshaking-in-the-bpu"&gt;
  &lt;/a&gt;
  Handshaking in the BPU
&lt;/h5&gt;

&lt;p&gt;Two Brainfuck Assembly Language commands are used for communication with external devices: &lt;code&gt;,&lt;/code&gt; for input and &lt;code&gt;.&lt;/code&gt; for output. They will perform a variant of the handshake described above.&lt;/p&gt;

&lt;p&gt;For this purpose the BPU needs equivalents of "Start" and "Ready" signals that would also specify whether the processor requests an input or an output. I will implement this on three signal lines: &lt;code&gt;in&lt;/code&gt; for requesting input, &lt;code&gt;out&lt;/code&gt; for requesting output and &lt;code&gt;resume&lt;/code&gt; as an equivalent of the "Ready" signal.&lt;/p&gt;

&lt;p&gt;Input handshake:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Handshake element&lt;/th&gt;
&lt;th&gt;BPU equivalent&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Start&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;in&lt;/code&gt; signal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ready&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;resume&lt;/code&gt; signal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data for the device&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;,&lt;/code&gt; command argument&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data from the device&lt;/td&gt;
&lt;td&gt;sent over the data bus&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Output handshake:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Handshake element&lt;/th&gt;
&lt;th&gt;BPU equivalent&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Start&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;out&lt;/code&gt; signal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ready&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;resume&lt;/code&gt; signal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data for the device&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;.&lt;/code&gt; command argument and contents of the data bus&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Data from the device&lt;/td&gt;
&lt;td&gt;none&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#inputoutput-design"&gt;
  &lt;/a&gt;
  Input/Output design
&lt;/h3&gt;

&lt;h6&gt;
  &lt;a href="#insert-your-implementation-here"&gt;
  &lt;/a&gt;
  [Insert your implementation here]
&lt;/h6&gt;

&lt;p&gt;With the knowledge about the handshake protocol and what signals will be used to perform it I can now design a simple manual input and a simple output display. Because I'm using only a single input and output I will not be using command arguments.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#input"&gt;
  &lt;/a&gt;
  Input
&lt;/h5&gt;

&lt;p&gt;Manual input is a really simple circuit. Almost nothing is automated so it is as straightforward as can be:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GenYqOQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/572z0sn8ev6pml3hux1g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GenYqOQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/572z0sn8ev6pml3hux1g.png" alt="input diagram"&gt;&lt;/a&gt;&lt;/p&gt;
Manual BPU input in Logisim



&lt;p&gt;When the &lt;code&gt;in&lt;/code&gt; signal is on the LED switches on to notify the user and input is broadcasted to the data bus. Pressing the button will send a &lt;code&gt;resume&lt;/code&gt; signal and continue the program.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h5&gt;

&lt;p&gt;Output display is not as easy. It requires a register to store the output value and it should also work independently of the user so it needs to implement automatic handshaking: something that emits a "Ready" signal after receiving the &lt;code&gt;in&lt;/code&gt; signal and storing data, and takes it down when the &lt;code&gt;in&lt;/code&gt; signal ends.&lt;/p&gt;

&lt;p&gt;Fortunately both are still quite simple to set up. The data register is just a standard register with its "enable" input connected to the &lt;code&gt;in&lt;/code&gt; signal so that it only loads data when it's supposed to. The handshake can be performed by a one-byte register (AKA D-flip-flop): it will pass on the &lt;code&gt;in&lt;/code&gt; signal as a &lt;code&gt;resume&lt;/code&gt; signal but synchronised with the module's clock* and will be reset asynchronously when &lt;code&gt;in&lt;/code&gt; goes down.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--852PUD1k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d6e37nnqr7bh0bnjx7gq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--852PUD1k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d6e37nnqr7bh0bnjx7gq.png" alt="output diagram"&gt;&lt;/a&gt;&lt;/p&gt;
Hex output circuit diagram in Logisim



&lt;p&gt;Outputs are set up for connection with Logisim's hex displays, so from the outside the whole setup looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---aj1BsPz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ermsni2qyjor8ktt7456.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---aj1BsPz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ermsni2qyjor8ktt7456.png" alt="output block in use"&gt;&lt;/a&gt;&lt;/p&gt;
Hex output module in use



&lt;p&gt;*In my final simulation everything will run on the same clock, but  I want to design the BPU tot be able to communicate with devices with different speeds.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;h6&gt;
  &lt;a href="#thats-all-folks"&gt;
  &lt;/a&gt;
  That's all, folks!
&lt;/h6&gt;

&lt;p&gt;This week I've shown you a handshake protocol for communication between devices of different speeds and designed the external parts needed to operate the BPU. Next week I'll begin designing the BPU itself starting from some core registers.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>esoteric</category>
      <category>hardware</category>
    </item>
    <item>
      <title>52 responsive snippets to create a website for your project</title>
      <author>Przemyslaw Michalak</author>
      <pubDate>Fri, 04 Jun 2021 10:34:57 +0000</pubDate>
      <link>https://dev.to/przemek/52-responsive-snippets-to-create-a-website-for-your-project-51e6</link>
      <guid>https://dev.to/przemek/52-responsive-snippets-to-create-a-website-for-your-project-51e6</guid>
      <description>&lt;p&gt;Hi everyone. I made 52 responsive snippets that can help you to build website for your project, portfolio, commercial website or whatever you wish, since they are free. All of them are fully responsive and customizable so I want to quickly show you how to use them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gg1hl3Aj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7101sebdlc44uuvtzvu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gg1hl3Aj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7101sebdlc44uuvtzvu.png" alt="widget collection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#edit-their-content"&gt;
  &lt;/a&gt;
  Edit their content
&lt;/h1&gt;

&lt;p&gt;Each snippet comes with its own object JSON file that provides data to it. So it is pretty straight forward to change their copy. Remember that a lot of snippets have elements as cards that takes content from an array of objects. So to control amount of elements simply copy and paste or delete objects from the array. Have a look at the picture bellow.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;getTitle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nunquam consumere boreas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;getDescription&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cur frondator mori? Ire saepe ducunt ad noster rector. Elogium de peritus castor, magicae rumor.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;getImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://via.placeholder.com/350&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="na"&gt;getCallToAction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sectams prarere!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;_self&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://www.glue.codes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="na"&gt;getCards&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sectams prarere!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cur frondator mori? Ire saepe ducunt ad noster rector. Elogium de peritus castor, magicae rumor.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;_self&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sectams prarere!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cur frondator mori? Ire saepe ducunt ad noster rector. Elogium de peritus castor, magicae rumor.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;_self&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sectams prarere!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cur frondator mori? Ire saepe ducunt ad noster rector. Elogium de peritus castor, magicae rumor.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;_self&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we have function &lt;code&gt;getCards&lt;/code&gt; that returns array with 3 objects and so snippet displays 3 cards. If you add extra or delete some of those objects you will get respectful amount of cards.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--onCHxKwn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a96urg0te1ygbypgsicp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--onCHxKwn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a96urg0te1ygbypgsicp.jpg" alt="banana widget"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#styling"&gt;
  &lt;/a&gt;
  Styling
&lt;/h1&gt;

&lt;p&gt;There is 2 ways to style your snippets.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scoped-css"&gt;
  &lt;/a&gt;
  Scoped CSS
&lt;/h2&gt;

&lt;p&gt;Each snippet has its own dedicated CSS file that can be freely edited without worries of interfering with the rest of them. It is especially useful when you want to use the same snippet more than once on your website. You can make them look absolutely different using scoped CSS files.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P6756Nd4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09og97rwwa37hdll71by.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P6756Nd4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/09og97rwwa37hdll71by.jpg" alt="apricot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#global-styles"&gt;
  &lt;/a&gt;
  Global Styles
&lt;/h2&gt;

&lt;p&gt;Each widget is also connected to the global styles file that can edit all of the snippets at once to speed up your work when it comes to consistent design of your project. And that is possible thanks to...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UQuEFhp1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5kljp3m56rr9nd84rb12.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UQuEFhp1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5kljp3m56rr9nd84rb12.jpg" alt="tomato"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#consistent-naming"&gt;
  &lt;/a&gt;
  Consistent naming
&lt;/h1&gt;

&lt;p&gt;All snippets have consistent naming when it comes to their CSS classes or object JSON file. That significantly helps with changing their design and make it easy to learn how to change their content.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HgTWbXMO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ng6gugmcai3gb57duvyb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HgTWbXMO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ng6gugmcai3gb57duvyb.jpg" alt="nectarine"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#free-to-use"&gt;
  &lt;/a&gt;
  FREE to use
&lt;/h1&gt;

&lt;p&gt;As I said right at the beginning, you can use them for free for what ever project you build. Even commercial. To get access to them visit my &lt;a href="https://www.glue.codes"&gt;website&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Solution: Open the Lock</title>
      <author>seanpgallivan</author>
      <pubDate>Fri, 04 Jun 2021 09:49:29 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-open-the-lock-24o3</link>
      <guid>https://dev.to/seanpgallivan/solution-open-the-lock-24o3</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/open-the-lock/discuss/1250681"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-752-medium-open-the-lock"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/open-the-lock/"&gt;Leetcode Problem #752 (&lt;em&gt;Medium&lt;/em&gt;): Open the Lock&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You have a lock in front of you with 4 circular wheels. Each wheel has &lt;code&gt;10&lt;/code&gt; slots: &lt;code&gt;'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'&lt;/code&gt;. The wheels can rotate freely and wrap around: for example we can turn &lt;code&gt;'9'&lt;/code&gt; to be &lt;code&gt;'0'&lt;/code&gt;, or &lt;code&gt;'0'&lt;/code&gt; to be &lt;code&gt;'9'&lt;/code&gt;. Each move consists of turning one wheel one slot.&lt;/p&gt;

&lt;p&gt;The lock initially starts at &lt;code&gt;'0000'&lt;/code&gt;, a string representing the state of the 4 wheels.&lt;/p&gt;

&lt;p&gt;You are given a list of &lt;code&gt;deadends&lt;/code&gt; dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.&lt;/p&gt;

&lt;p&gt;Given a &lt;code&gt;target&lt;/code&gt; representing the value of the wheels that will unlock the lock, return &lt;em&gt;the minimum total number of turns required to open the lock, or &lt;code&gt;-1&lt;/code&gt; if it is impossible&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;deadends = ["0201","0101","0102","1212","2002"], target = "0202"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;A sequence of valid moves would be "0000" -&amp;gt; "1000" -&amp;gt; "1100" -&amp;gt; "1200" -&amp;gt; "1201" -&amp;gt; "1202" -&amp;gt; "0202".&lt;br&gt;Note that a sequence like "0000" -&amp;gt; "0001" -&amp;gt; "0002" -&amp;gt; "0102" -&amp;gt; "0202" would be invalid, because the wheels of the lock become stuck after the display becomes the dead end "0102".&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;deadends = ["8888"], target = "0009"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;We can turn the last wheel in reverse to move from "0000" -&amp;gt; "0009".&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 3:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;deadends = ["8887","8889","8878","8898","8788","8988","7888","9888"], target = "8888"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;We can't reach the target without getting stuck.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 4:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;deadends = ["0000"], target = "8888"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= deadends.length &amp;lt;= 500&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deadends[i].length == 4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;target.length == 4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;target&lt;/code&gt; will not be in the list &lt;code&gt;deadends&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;target&lt;/code&gt; and &lt;code&gt;deadends[i]&lt;/code&gt; consist of digits only.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;There are &lt;strong&gt;10^4&lt;/strong&gt; combinations for the lock, and we can think of each one as a node on a graph. We then have to find the shortest path from &lt;strong&gt;"0000"&lt;/strong&gt; to the &lt;strong&gt;target&lt;/strong&gt; combination without going through one of the &lt;strong&gt;deadends&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In a normal problem dealing with a shortest path on a graph, we keep track of previously visited nodes in a boolean array of combinations (&lt;strong&gt;seen&lt;/strong&gt;), so we can just go ahead and add all of the &lt;strong&gt;deadends&lt;/strong&gt; into &lt;strong&gt;seen&lt;/strong&gt; by converting the strings to numbers.&lt;/p&gt;

&lt;p&gt;Then, we can solve the shortest path problem with a standard &lt;strong&gt;queue&lt;/strong&gt;. We'll have an outer loop to keep track of the number of &lt;strong&gt;turns&lt;/strong&gt; we've taken, while the inner loop will run the length of the current turn (&lt;strong&gt;qlen&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;On each turn, we'll take the current &lt;strong&gt;queue&lt;/strong&gt; entry (&lt;strong&gt;curr&lt;/strong&gt;), then we'll iterate through the four digits and create both a &lt;strong&gt;mask&lt;/strong&gt; for that digit as well as a &lt;strong&gt;masked&lt;/strong&gt; version of &lt;strong&gt;curr&lt;/strong&gt;. (For example, if &lt;strong&gt;curr = 4213&lt;/strong&gt; and we're on the &lt;strong&gt;2nd&lt;/strong&gt; digit, &lt;strong&gt;mask&lt;/strong&gt; would be &lt;strong&gt;1&lt;/strong&gt; and &lt;strong&gt;masked&lt;/strong&gt; would be &lt;strong&gt;4203&lt;/strong&gt;.) This way we can change the &lt;strong&gt;mask&lt;/strong&gt; and add it back to &lt;strong&gt;masked&lt;/strong&gt; to form the &lt;strong&gt;next&lt;/strong&gt; combination. For each digit, we'll also have to attempt both the forward and backward move, so we can add &lt;strong&gt;1&lt;/strong&gt; and then &lt;strong&gt;9&lt;/strong&gt; to the &lt;strong&gt;mask&lt;/strong&gt;, before applying &lt;strong&gt;modulo 10&lt;/strong&gt;, to get the new values.&lt;/p&gt;

&lt;p&gt;For each &lt;strong&gt;next&lt;/strong&gt; combination, if it's our &lt;strong&gt;target&lt;/strong&gt; we should &lt;strong&gt;return turns&lt;/strong&gt;, and if it's been &lt;strong&gt;seen&lt;/strong&gt;, we should &lt;strong&gt;continue&lt;/strong&gt; to the next iteration. Otherwise, we should consider it &lt;strong&gt;seen&lt;/strong&gt; and add it to the &lt;strong&gt;queue&lt;/strong&gt;. If we ever completely empty the &lt;strong&gt;queue&lt;/strong&gt;, then there are no more possible moves, so we should &lt;strong&gt;return -1&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We also need to remember to account for edge cases where &lt;strong&gt;"0000"&lt;/strong&gt; is either a &lt;strong&gt;deadend&lt;/strong&gt; or the &lt;strong&gt;target&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Time Complexity: O(1e4) or O(1)&lt;/strong&gt; because there are always a maximum of &lt;strong&gt;1e4&lt;/strong&gt; possible combinations&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Space Complexity: O(2e4) or O(1)&lt;/strong&gt; for &lt;strong&gt;seen&lt;/strong&gt; and the maximum length of the &lt;strong&gt;queue&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;openLock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;deadends&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;seen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Uint8Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;deadends&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;turns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;turns&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;qlen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;qlen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="nx"&gt;masked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;masked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;turns&lt;/span&gt;
                    &lt;span class="nx"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                    &lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;openLock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deadends&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"0000"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;turns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;deadends&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;qlen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;qlen&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popleft&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;
                    &lt;span class="n"&gt;masked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                        &lt;span class="n"&gt;nxt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;masked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nxt&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;nxt&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;turns&lt;/span&gt;
                        &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nxt&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                        &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nxt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
            &lt;span class="n"&gt;turns&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;openLock&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;deadends&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"0000"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="nc"&gt;Queue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;LinkedList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;seen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;deadends&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="o"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;targ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parseInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;turns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isEmpty&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt; &lt;span class="n"&gt;turns&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;qlen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;qlen&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;poll&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;masked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;masked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;targ&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;turns&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                        &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                        &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;openLock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;deadends&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"0000"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;]{&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;deadends&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;stoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;targ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;turns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;turns&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;qlen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;qlen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;front&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;masked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curr&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;masked&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;targ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;turns&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
    <item>
      <title>5 ways to say 'NO' to Clients</title>
      <author>Jenuel Oras Ganawed</author>
      <pubDate>Fri, 04 Jun 2021 09:48:45 +0000</pubDate>
      <link>https://dev.to/brojenuel/5-ways-to-say-no-to-clients-5dkp</link>
      <guid>https://dev.to/brojenuel/5-ways-to-say-no-to-clients-5dkp</guid>
      <description>&lt;p&gt;When we are working with a client, sometimes clients can ask a lot of questions that if we answered it correctly we can suffer from it.&lt;/p&gt;

&lt;p&gt;So here are some question you might encounter in your gigs or career, as a full timer or a freelancer, and how to say "Hell No" without losing a gig.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-can-we-see-a-pass-before-we-hire-you"&gt;
  &lt;/a&gt;
  1. Can we see a pass before we hire you?
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;I need a deposit to reserve my time
and pay for my assets needed to knock
this out of the park for you.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-can-you-do-this-for-less"&gt;
  &lt;/a&gt;
  2. Can you do this for less?
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;If budget is our priority,
lets start with the amount
you have in mind and
back into a deliverable
that makes sense for
that number
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-can-you-do-this-for-freeyour-portfolio"&gt;
  &lt;/a&gt;
  3. Can you do this for free/your portfolio?
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;The results of this
campaign (done properly)
will more than pay back
this initial
investment
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-can-we-add-this-quick-little-deliverable"&gt;
  &lt;/a&gt;
  4. Can we add this quick little deliverable?
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Absolutely, i'll just
tack the extra hours
on to your final invoice,
does that work? 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-can-we-get-unlimited-revisions"&gt;
  &lt;/a&gt;
  5. Can we get unlimited revisions?
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Sure! My quote includes
2 rounds revisions.
After those, you can have
as many as you'd like,
we'll just switch to
hourly billing.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#remember-if-you-add-value-you-get-paid"&gt;
  &lt;/a&gt;
  "Remember: If you add value, you get paid."
&lt;/h2&gt;

&lt;p&gt;Don not respond to the request, Respond to the issue behind the request.&lt;/p&gt;

</description>
      <category>career</category>
    </item>
    <item>
      <title>How to use code snippets with gatsby-source-notion-api</title>
      <author>Sergei Orlov</author>
      <pubDate>Fri, 04 Jun 2021 09:31:47 +0000</pubDate>
      <link>https://dev.to/orlowdev/how-to-use-code-snippets-with-gatsby-source-notion-api-3noi</link>
      <guid>https://dev.to/orlowdev/how-to-use-code-snippets-with-gatsby-source-notion-api-3noi</guid>
      <description>&lt;p&gt;As of today, the official Notion API doesn't support code snippets. If such block exists on your Notion page, the API returns it with a type of &lt;code&gt;unsupported&lt;/code&gt; and its contents are empty. When I was migrating my personal blog to &lt;a href="https://www.gatsbyjs.com/plugins/gatsby-source-notion-api/?=gatsby-source-notion-"&gt;gatsby-source-notion-api&lt;/a&gt;, I found two rather convenient ways to embed code.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#gatsbyremarkembedder"&gt;
  &lt;/a&gt;
  gatsby-remark-embedder
&lt;/h1&gt;

&lt;p&gt;Not sure if it will work if you use MDX, but it works perfectly with MarkdownRemark. All you need to do is to create a code snippet on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt; or &lt;a href="https://codepen.io"&gt;CodeSandBox&lt;/a&gt; and simply throw a link to the snippet onto the page.&lt;/p&gt;

&lt;p&gt;This approach has the great benefit of having all your code snippets put together. You can reuse them in different places, you can edit them separately from the writing process, and you can share them outside your blog as well. You can also find the plugin useful in other places like embedding tweets, youtube videos, and what-not.&lt;/p&gt;

&lt;p&gt;Plugin docs can be found &lt;a href="https://www.gatsbyjs.com/plugins/gatsby-remark-embedder/?=embedder#codepen"&gt;here&lt;/a&gt;. In short - install the plugin, add it to your &lt;code&gt;gatsby-config.js&lt;/code&gt;, create a code snippet &lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt; and throw its link to the page.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#markdown-syntax"&gt;
  &lt;/a&gt;
  Markdown syntax
&lt;/h1&gt;

&lt;p&gt;If you prefer things to be right inside the page, there is a way, and it's what I personally use on my blog. You can write a code snippet in Markdown syntax and simply disallow Notion to transform it to a code block. Start a line with &lt;code&gt;```&lt;/code&gt; and put a space. Notion will automatically turn it into a code block. &lt;code&gt;Cmd/Ctrl + Z&lt;/code&gt; to undo this transformation. Put the snippet contents below. Then put &lt;code&gt;```&lt;/code&gt; on a separate line again.&lt;/p&gt;

&lt;p&gt;To specify syntax you want to use in the snippet, you can put it right after the first &lt;code&gt;```&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gatsby-source-notion-api&lt;/code&gt; will transform it preserve it as Markdown syntax, and MarkdownRemark or MDX will transform it into valid HTML.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CAVEAT:&lt;/strong&gt; since it's a kind of a wallhack to make the current state of Notion API a bit more usable, it's should not be a way to go when they start to support code blocks properly. So, what you need to do to make it work is to indent the contents of the whole code snippet one level up. I.e. simply select the stuff between &lt;code&gt;```&lt;/code&gt; and press &lt;code&gt;Tab&lt;/code&gt; once. This will ensure snippet contents are rendered as snippet contents, not just as separate paragraphs.&lt;/p&gt;

&lt;p&gt;Here's an example of what it looks like as a result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here's what it looks like in Notion to make it work:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ch01w8Qf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://orlow.dev/how-to-use-code-snippets-with-gatsby-source-notion-api-code-snippet.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ch01w8Qf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://orlow.dev/how-to-use-code-snippets-with-gatsby-source-notion-api-code-snippet.png" alt="Code Snippet"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;You probably need to sign up at &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt; or &lt;a href="https://codepen.io"&gt;CodeSandBox&lt;/a&gt; to be able to use long-lasting links to your snippets. &lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

</description>
      <category>gatsby</category>
      <category>javascript</category>
      <category>notion</category>
      <category>jamstack</category>
    </item>
    <item>
      <title>Images in "files" property with gatsby-source-notion-api</title>
      <author>Sergei Orlov</author>
      <pubDate>Fri, 04 Jun 2021 09:28:58 +0000</pubDate>
      <link>https://dev.to/orlowdev/images-in-files-property-with-gatsby-source-notion-api-2n6e</link>
      <guid>https://dev.to/orlowdev/images-in-files-property-with-gatsby-source-notion-api-2n6e</guid>
      <description>&lt;p&gt;There are many ways you can find the Notion &lt;strong&gt;files&lt;/strong&gt; property useful. One of the experiments I did was using it to provide a hero image for my blog. Currently, hero images from all blog posts come for a &lt;code&gt;Hero Image&lt;/code&gt; files property I have on my DB. In general, the process is quite straightforward. Here's an example with &lt;strong&gt;MarkdownRemark&lt;/strong&gt; that pulls in images for all notion pages, assuming that the &lt;strong&gt;files&lt;/strong&gt; property we need is called &lt;code&gt;Hero Image&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;allMarkdownRemark&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;edges&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="n"&gt;remoteImage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="n"&gt;childImageSharp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="n"&gt;gatsbyImageData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FIXED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But there are things you need to consider.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#embedding-files-via-links"&gt;
  &lt;/a&gt;
  ✅ Embedding files via links
&lt;/h1&gt;

&lt;p&gt;If you embed files via links, it should work out just fine with &lt;strong&gt;MarkdownRemark&lt;/strong&gt; or &lt;strong&gt;MDX&lt;/strong&gt;. &lt;code&gt;gatsby-source-notion-api&lt;/code&gt; will create remote file nodes for those images. You can then use Sharp to transform them and do any other stuff you would do with images in Gatsby. All you need to do is to query for the image and put it where you need it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#uploading-files"&gt;
  &lt;/a&gt;
  💥 Uploading files
&lt;/h1&gt;

&lt;p&gt;If you upload files, things get a bit trickier. The thing is that Notion API returns only the name of the asset if you upload it, not the URL where it resides. There are two ways you can bypass this&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#storing-attached-images-in-the-project-repository"&gt;
  &lt;/a&gt;
  Storing attached images in the project repository
&lt;/h2&gt;

&lt;p&gt;You could potentially attach images to a Notion page and then also copy them to your project folder, and then find the Notion attachment in the list of files you have in the repo, but this approach is quite funny and I didn't try it out. Maybe it could help in some cases. But, again, maintain it here and there if you do this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#uploaded-files-are-in-fact-links"&gt;
  &lt;/a&gt;
  Uploaded files are in fact links
&lt;/h2&gt;

&lt;p&gt;After you attach a file, you can use the kebab menu (three dots) near the image and click "View original". It will open your image in a new tab. All you need to do is to copy the link and attach it to the same property. It is observed that you can remove the initial file afterward and the embedded link will still lead you to the file correctly. I don't know for how long they cache assets and if they remove them when you remove the attachment or not, but for now and for me it works.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPD:&lt;/strong&gt; Don't remove the file, simply move it down in the attachments, so that attachments as links are always on top.&lt;/p&gt;

&lt;p&gt;After you have a file attached as a link, you can be sure that everything will work. 🎉&lt;/p&gt;

</description>
      <category>gatsby</category>
      <category>javascript</category>
      <category>notion</category>
      <category>jamstack</category>
    </item>
    <item>
      <title>How Dynamic Rendering Works Using HTML And CSS?</title>
      <author>Harish Rajora</author>
      <pubDate>Fri, 04 Jun 2021 09:19:17 +0000</pubDate>
      <link>https://dev.to/harishrajora12/how-dynamic-rendering-works-using-html-and-css-110e</link>
      <guid>https://dev.to/harishrajora12/how-dynamic-rendering-works-using-html-and-css-110e</guid>
      <description>&lt;p&gt;A user might be operating in front of a mobile screen and a desktop screen, but their expectation changes widely on both devices. A user in front of a mobile device is a little less patient, as they are mostly “on the go” compared to when they are in front of a desktop. Mobile devices have changed the overall user experience and the way a user perceives a website nowadays. In short, we need our content to render dynamically on mobile and desktop screens abiding by their requirements. If we could do that, we can create a &lt;a href="https://www.lambdatest.com/blog/responsive-web-design-all-you-need-to-know/?utm_source=dev&amp;amp;utm_medium=Blog&amp;amp;utm_campaign=Harish-4062021&amp;amp;utm_term=Harish"&gt;responsive design&lt;/a&gt; with content specific to the device users.&lt;/p&gt;

&lt;p&gt;For example, you cannot hide a “Login” button on a dropdown or hamburger menu in the corner. While you can do that on a desktop screen (even though it’s a bad design!) and the user will find it. The developers cannot mess up with the mobile design, considering the &lt;a href="https://www.statista.com/statistics/277125/share-of-website-traffic-coming-from-mobile-devices/"&gt;traffic size and data generation&lt;/a&gt; a mobile device is responsible for. Also, on the developer’s end, we have a lot to share with our users and want a large screen space to accommodate everything.&lt;/p&gt;

&lt;p&gt;Lorraine Patterson wrote an article titled “&lt;a href="https://lorrainepaterson.wordpress.com/2011/02/22/mobile-user-research-methods/"&gt;Mobile User Research Methods&lt;/a&gt;.” She explains how a mobile user’s context changes with the device in their hands and how this &lt;a href="https://www.interaction-design.org/literature/topics/user-research"&gt;context change can benefit and facilitate many types of research&lt;/a&gt;. The process of different templates on different devices should not be confused with developing a mobile website. A dynamic HTML and CSS rendering on different devices come from the same source file (and server!), but the template is chosen after checking the device via JavaScript. By the end of this post, we would be able to develop such codes and implement them in our application. But to understand how dynamic CSS rendering works, a brief introduction to &lt;strong&gt;Dynamic Rendering&lt;/strong&gt; and &lt;strong&gt;Lightning Web Components&lt;/strong&gt; is essential.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-how-dynamic-rendering-works"&gt;
  &lt;/a&gt;
  Understanding how Dynamic Rendering works
&lt;/h2&gt;

&lt;p&gt;Dynamic rendering is a helpful technique that can be used to optimize the delivery of content. In the dynamic rendering approach, the content can either be served from the UCD service or your web server. The advantage of using a web server to deliver content is that it will tend to be more reliable as redundant routing provides higher availability.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gemt5t6s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Dynamic-Rendering-1024x289.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gemt5t6s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Dynamic-Rendering-1024x289.png" alt="Dynamic Rendering"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above image, requests are routed to Renderer from crawlers, whereas user requests are normally served. However, when required, the content version is served by the dynamic renderer that suits the crawler, for example, serving a static version of the HTML. You can enable dynamic renderer for all pages by enabling it for each page.&lt;/p&gt;

&lt;p&gt;Dynamic rendering is good for content that uses JavaScript features that aren’t supported by the crawlers or indexable, public JavaScript-generated content that changes rapidly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-lightning-web-components"&gt;
  &lt;/a&gt;
  What are Lightning Web Components?
&lt;/h2&gt;

&lt;p&gt;The lightning web components (LWC) is a web framework that leverages the power of web components and makes them really fast (hence the word lightning!). LWC is lightweight and provides no responsiveness issues since it offers all the code that is run natively in the browser. Native code also helps a lot in increasing execution speed since the code is built into the browser and is optimized with the best possible algorithm. Fortunately, the LWC takes advantage of that.&lt;/p&gt;

&lt;p&gt;LWC has built-in libraries and methods that will help us render dynamic HTML and CSS on desktop and mobile. These methods will work as the core of our overall algorithm when we deal with dynamic pages. In addition to these methods, LWC also offers decorators for quick implementations, such as @api. If you have worked with Django, decorators might be very familiar to you. Lastly and most importantly, you do not need to learn any new language while working with the lightning web components. These components work with the most standard, popular, and easy web languages, like HTML, CSS, and JavaScript.&lt;/p&gt;

&lt;p&gt;Although we can talk on and on about LWC as it is a very deep topic, we would get off-road into the jungle with no final destination. If you are keen to understand more about it, the best documentation is available on &lt;a href="https://developer.salesforce.com/blogs/2018/12/introducing-lightning-web-components.html"&gt;Salesforce Diaries about Lightning Web Components&lt;/a&gt;. To implement dynamic pages, the above information will suffice.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connectedcallback-hook-to-rely-on"&gt;
  &lt;/a&gt;
  connectedCallback() – Hook To Rely On
&lt;/h3&gt;

&lt;p&gt;The connectedCallback method is a special method inside the LWC, fired when an element enters the Document Object Model. This method comes under the &lt;a href="https://developer.salesforce.com/docs/component-library/documentation/lwc/lwc.reference_lifecycle_hooks"&gt;lifecycle hook&lt;/a&gt;, which means the method is triggered at a specific phase of a component instance’s lifecycle.&lt;/p&gt;

&lt;p&gt;For the below-given code, the connectedCallback method changes the timer value to true and initiates a timer of 3 seconds. The code can be implemented accordingly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;connectedCallback() {
       setTimeout(() =&amp;gt; {
           this.ready = true;
       }, 3000);
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The connectedCallback method will help us identify what type of screen we are rendering our website on. After the identification, the only step is to render the HTML template according to the device detected through connectedCallback.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The connectedCallback method flow is directed from parent to the child, i.e., a parent’s connectedCallback is fired first, and then the child connectedCallback is fired.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dynamic-rendering-of-templates-with-connectedcallback-and-lwc"&gt;
  &lt;/a&gt;
  Dynamic Rendering of Templates with connectedCallback and LWC
&lt;/h2&gt;

&lt;p&gt;Now that we know a bit about LWC and the connectedCallback method, we need to write a JS file that will provide the logic to the LWC.&lt;/p&gt;

&lt;p&gt;First, we need to have two templates. Both of these templates will be for two different devices; mobile and desktop. They can be entirely different from each other, and if you are targeting more than two devices, you need to have that many templates ready with you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating the Template&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A template is a normal HTML web page that takes CSS files as input and constructs a web page. You can put that code under the template tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
    //HTML code
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or you can also create multiple HTML files if the code is too big. If you are using the latter method, remember to import these files into the code as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { LightningElement } from 'lwc';
import MobileTemplate from './MobileTemplate.html';
import WebTemplate from './WebTemplate.html';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above import works after &lt;a href="https://marketplace.visualstudio.com/items?itemName=salesforce.salesforcedx-vscode"&gt;Salesforce Extension Pack&lt;/a&gt; has been downloaded and added into your IDE. Make sure you do that to have all the libraries by your side.&lt;/p&gt;

&lt;p&gt;With templates being designed, we just need to code a JavaScript file to make it understand which template to render on which device.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Export the Class&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The class name has to be the same as the app name while using the LWC. Refer to the &lt;a href="https://trailhead.salesforce.com/en/content/learn/v/modules/lightning-web-components-basics/discover-lightning-web-components"&gt;official documentation&lt;/a&gt; to understand more about that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export default class DynamicRendering extends LightningElement
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Implement the “render” function, which returns the template to render on the screen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;render() {
        return window.screen.width &amp;lt; 640 ? MobileTemplate : WebTemplate;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The ternary operator used above will return the “ &lt;strong&gt;MobileTemplate.html&lt;/strong&gt; ” when the screen size is less than 640 width or else “ &lt;strong&gt;WebTemplate.html&lt;/strong&gt; ” is returned. This phenomenon can be seen in the below image:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pjyUNzSN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Export-the-Class.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pjyUNzSN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Export-the-Class.png" alt="Export the Class"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While on the mobile screen, a different template is rendered:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mck_Uler--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/different-template.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mck_Uler--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/different-template.png" alt="different template"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Through this method, we can easily implement dynamic rendering on our web application, a website that makes desktop users and mobile users happy. But just implementing the code is not enough! The next logical step is to test the website for mobile devices and responsiveness to be assured that the website will not break on different mobile devices.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#browser-support-for-dynamic-rendering"&gt;
  &lt;/a&gt;
  Browser Support For Dynamic Rendering
&lt;/h2&gt;

&lt;p&gt;Lightning web components work through a library developed by Salesforce. The library uses JavaScript functionalities and implements its own functions on top of that. Therefore, browser support is excellent and works on all mobile and desktop browsers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bN5zpK1u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Dynamic-Rendering-1-1024x150.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bN5zpK1u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/Dynamic-Rendering-1-1024x150.png" alt="Dynamic Rendering"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is no need to ponder over cross browser compatibility issues while working with the dynamic CSS rendering.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-the-website-for-responsiveness"&gt;
  &lt;/a&gt;
  Testing the Website for Responsiveness
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.lambdatest.com/lt-browser?utm_source=dev&amp;amp;utm_medium=Blog&amp;amp;utm_campaign=Harish-4062021&amp;amp;utm_term=Harish"&gt;LT Browser&lt;/a&gt; is an excellent tool with 50+ screens that can not only render your website to check for responsiveness but provides multiple additional tools, which would have been hard to test otherwise.&lt;/p&gt;

&lt;p&gt;For example, the network throttling feature of the LT browser can help you &lt;a href="https://www.lambdatest.com/responsive-test-online?utm_source=dev&amp;amp;utm_medium=Blog&amp;amp;utm_campaign=Harish-4062021&amp;amp;utm_term=Harish"&gt;test websites for responsiveness&lt;/a&gt; on various network bandwidth, defining bottleneck numbers. In addition, smart scroll can scroll the website on two devices simultaneously for better understanding rather than going back and forth on them. Take screenshots, record a video, mark bugs and do much more with the LT browser in just a few clicks. It has helped me in responsive testing, and I hope it will help you too!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9thp9Cyp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/performance-report-LT-Browser.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9thp9Cyp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.lambdatest.com/blog/wp-content/uploads/2021/04/performance-report-LT-Browser.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://downloads.lambdatest.com/lt-browser/LTBrowser.exe"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wJLESeD1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/f4d3195f-e9ba-4bea-bff3-6546b5f3740e/" alt="windows.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://downloads.lambdatest.com/lt-browser/LTBrowser.dmg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uvwloDzC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/3814c040-eaa0-4731-b0b6-7dc66dba1fb8/" alt="macos.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://downloads.lambdatest.com/lt-browser/LTBrowser.AppImage"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7JvQfi-J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ucarecdn.com/e71edc5a-9aa2-4c65-a510-a886090a7efc/" alt="linux.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;For all my friends who understand the importance of mobile users and the data generated from them today, the LWC is an added positive skill to acquire. Although the only goal is to achieve responsiveness, there are many &lt;a href="https://www.lambdatest.com/blog/responsive-design-testing-checklist/?utm_source=dev&amp;amp;utm_medium=Blog&amp;amp;utm_campaign=Harish-4062021&amp;amp;utm_term=Harish"&gt;other methods&lt;/a&gt; that are tested and proven efficient in developing a responsive website. Implement an LWC code when there are different templates that you want to render for a mobile user and a desktop user.&lt;/p&gt;

&lt;p&gt;Since it contains extra configuration and learning bumps, it is better to be sure before starting. If you do, rest assured, your website will be lightning-fast, help you implement dynamic logic through JavaScript, and provide additional methods and functionalities that are great to use. We would love to hear from you about how you leveraged LWC and implemented a logic that helped you inject different data at different data. Till then, have a development-filled day ahead!!&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>4 Best Practices for Writing Meaningful Code Comments</title>
      <author>Alex Omeyer</author>
      <pubDate>Fri, 04 Jun 2021 09:09:19 +0000</pubDate>
      <link>https://dev.to/stepsize/4-best-practices-for-writing-meaningful-code-comments-c08</link>
      <guid>https://dev.to/stepsize/4-best-practices-for-writing-meaningful-code-comments-c08</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-bother-writing-code-comments"&gt;
  &lt;/a&gt;
  Why bother writing code comments?
&lt;/h2&gt;

&lt;p&gt;In most cases, you aren’t the only person working on the same project or codebase. That means that other people get to read your code and have to understand it. That’s also true for the code comments you leave behind. Developers often write ‘quick and dirty’ comments without much context, leaving other developers clueless about what you’re trying to say. It’s a bad practice that creates only more confusion than clarifies things.&lt;/p&gt;

&lt;p&gt;So, yes - you should be bothered with writing meaningful code comments to help other developers. A code comment that describes the function, the reasoning behind the function, and its input and output will speed up the learning process of other developers. Especially for junior developers, this information comes in handy when learning the code.&lt;/p&gt;

&lt;p&gt;On the other hand, code comments lead us to the discussion whether we should write them? There’s a significant group of developers that advocate against writing code comments. The reason being that code should be self-explanatory. If another developer can’t understand the purpose of your code by looking at it, it’s bad code. This might be true, but think about the little effort code commenting requires and the potential benefits it returns.&lt;/p&gt;

&lt;p&gt;Plus, code comments are valuable to boost the onboarding process for any developer.&lt;/p&gt;

&lt;p&gt;Let’s take a look at the different types of code comments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#different-types-of-code-comments"&gt;
  &lt;/a&gt;
  Different Types of Code Comments
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. Documentation comments&lt;/strong&gt; - The main purpose of these comments is to quickly clarify the purpose of a file or component. Instead of reading a component’s entire code to understand what it does, you can include a code comment at the top of your &lt;code&gt;index&lt;/code&gt; file to explain what the component does.&lt;/p&gt;

&lt;p&gt;I’m not a big fan of this type of code commenting because they make your code very noisy. I think that these types of architecture comments should live within your internal documentation where you can maintain and discuss your project’s architecture in a centralised location. Yet, for Open Source projects, it does bring value to guide people who want to contribute to the project. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Function comments&lt;/strong&gt; - Function comments are the most useful type of comments and can be automatically generated in many languages. They describe the purpose of the function, which parameters it accepts, and what output it generates. It’s often sufficient to describe only public functions because developers using your code won’t interact with private functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * @desc Creates a welcome message
 */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3. Logic comments&lt;/strong&gt; - Logic comments are comments within functions to clarify complex code paths. As you could have guessed, it’s an evident code smell or technical debt indicating that your code is far too complex.&lt;/p&gt;

&lt;p&gt;On top of that, logic comments often provide too much detailed information. The level of detail will create more chaos and decrease the readability of your code. Here’s an example of a code comment that’s too detailed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// store today's date to calculate the elapsed time&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#code-comments-4-best-practices"&gt;
  &lt;/a&gt;
  Code Comments: 4 Best Practices
&lt;/h2&gt;

&lt;p&gt;Here’s a list of four best practices for code commenting.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-make-use-of-code-annotations-or-tags"&gt;
  &lt;/a&gt;
  1/ Make use of code annotations or tags
&lt;/h3&gt;

&lt;p&gt;Many programming languages define standards for code commenting. Java uses &lt;a href="https://www.oracle.com/be/technical-resources/articles/java/javadoc-tool.html"&gt;Javadoc&lt;/a&gt;, while JavaScript uses the &lt;a href="https://jsdoc.app/index.html"&gt;JSDoc&lt;/a&gt; code commenting system that’s supported by many documentation generation tools.&lt;/p&gt;

&lt;p&gt;For functions, you should include the following code tags:&lt;br&gt;
@desc - Write down a description for your function&lt;br&gt;
&lt;a class="mentioned-user" href="https://dev.to/param"&gt;@param&lt;/a&gt;
 - Describe all input parameters the function accepts. Make sure to define the input types.&lt;br&gt;
@returns - Describe the returned output. Make sure to define the output type.&lt;br&gt;
@throws - Describe the error type the function can throw&lt;br&gt;
@example - Include one or multiple examples that show the input and expected output&lt;/p&gt;

&lt;p&gt;Here’s an example from the &lt;a href="https://github.com/lodash/lodash/blob/master/chunk.js"&gt;Lodash code&lt;/a&gt; for the &lt;code&gt;chunk&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Creates an array of elements split into groups the length of `size`.
 * If `array` can't be split evenly, the final chunk will be the remaining
 * elements.
 *
 * @since 3.0.0
 * @category Array
 * @param {Array} array The array to process.
 * @param {number} [size=1] The length of each chunk
 * @returns {Array} Returns the new array of chunks.
 * @example
 *
 * chunk(['a', 'b', 'c', 'd'], 2)
 * // =&amp;gt; [['a', 'b'], ['c', 'd']]
 *
 * chunk(['a', 'b', 'c', 'd'], 3)
 * // =&amp;gt; [['a', 'b', 'c'], ['d']]
 */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;chunk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// logic&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-write-down-why-you-are-doing-something"&gt;
  &lt;/a&gt;
  2/ Write down why you are doing something
&lt;/h3&gt;

&lt;p&gt;Many developers use a comment to describe what their code is doing. This is not necessarily wrong. However, don’t forget to include why you have created a particular function or component. This information is called context. The context is essential to give developers more insights into the design decisions behind a function or component. This context is crucial when other developers want to make changes against your function or component.&lt;/p&gt;

&lt;p&gt;You often see code comments that use the function name in the function description. As you could have guessed, such a comment doesn’t add value. Context refers to adding information that you can’t extract from the function name or its input variables. Below you see a bad example of code commenting without context.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Sets the label property of a new form.
 *
 * @param label text for label of form
 */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setFormLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// logic&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Pro tip: try to use a free &lt;a href="https://bit.ly/3vVZsis"&gt;Stepsize VSCode extension&lt;/a&gt; to add code context for tech debt, refactoring, or TODOs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#3-dont-refer-to-other-documents-or-comments"&gt;
  &lt;/a&gt;
  3/ Don’t refer to other documents or comments
&lt;/h3&gt;

&lt;p&gt;It’s not a good idea to refer to other code comments or internal documents that clarify a function or component. If a developer wants to scan code to get a better understanding quickly, the code comments should be clear.&lt;/p&gt;

&lt;p&gt;You don’t want to spend time searching for other code comments or reading extensive design documents. If you think you need to add a document to clarify a code’s purpose, it’s a red flag for bad code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * Sets the label property of a new form.
 *
 * @see {@link https://myinternaldocument.com}
 */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setFormLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// logic&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-write-comments-while-writing-code"&gt;
  &lt;/a&gt;
  4/ Write comments while writing code
&lt;/h3&gt;

&lt;p&gt;Writing comments while writing code might sound obvious, yet many developers cheat against this rule. I’ve been guilty of this myself. In some situations, I’ve completed my code before writing any code comments to submit my pull request for review. &lt;/p&gt;

&lt;p&gt;You might forget part of the logic you wrote in this situation, leading to lower quality code comments. It’s especially true if you work multiple days on a single pull request. It’s best to write comments when you complete a function or module.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-commenting-is-an-art"&gt;
  &lt;/a&gt;
  Code Commenting Is an Art?
&lt;/h2&gt;

&lt;p&gt;If you care about &lt;a href="https://www.stepsize.com/blog/the-engineers-complete-guide-to-code-quality?utm_source=dev.to&amp;amp;utm_medium=referral&amp;amp;utm_campaign=1"&gt;code quality&lt;/a&gt;, take time to write meaningful code comments. It takes some practice but can be quickly learned. The key concept to remember is adding context to your code comments. Describe the why behind the code you’ve created, not only the apparent information. Developers don’t need the ‘what’ because they can read your code, input parameters, and output to better understand the code.&lt;/p&gt;

&lt;p&gt;Remember to keep your code comments as concise as possible. You don’t want to spend more time writing code comments than writing code.&lt;/p&gt;

&lt;p&gt;This post was written by Michiel Mulders. Michiel is a passionate blockchain developer who loves writing technical content. Besides that, he loves learning about marketing, UX psychology, and entrepreneurship. When he’s not writing, he’s probably enjoying a Belgian beer!&lt;br&gt;
Also published on: &lt;a href="https://www.stepsize.com/blog?utm_source=dev.to&amp;amp;utm_medium=referral&amp;amp;utm_campaign=1"&gt;Managing Technical Debt&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>codequality</category>
      <category>codereview</category>
      <category>refactorit</category>
      <category>vscode</category>
    </item>
    <item>
      <title>Food delivery API-What should be used?</title>
      <author>Adamo Digital</author>
      <pubDate>Fri, 04 Jun 2021 09:01:57 +0000</pubDate>
      <link>https://dev.to/adamodigitalco/food-delivery-api-what-should-be-used-gkf</link>
      <guid>https://dev.to/adamodigitalco/food-delivery-api-what-should-be-used-gkf</guid>
      <description>&lt;p&gt;API integrations can be the most beneficial alternative in &lt;a href="https://adamodigital.com/on-demand-food-delivery-app"&gt;food delivery software&lt;/a&gt; development, which helps to speed up the development process and reduce cost.&lt;br&gt;
Research by Business Insider shows that the food delivery service is among the fastest-growing businesses currently. &lt;/p&gt;

&lt;p&gt;Its market had been worth more than US$38 billion by the end of 2020. And there are still many rooms for restaurant businesses to jump in on the trend of these on-demand deliveries, particularly in the niche of restaurant-to-customer service.&lt;/p&gt;

&lt;p&gt;According to a statistic, a restaurant needs to pay an average of US$25,000 to develop its own food delivery &lt;a href="https://adamodigital.com/our-services"&gt;software development&lt;/a&gt; from scratch. Unfortunately, not all of them can afford that much in these rough times. By using existing food delivery APIs of third-party providers, restaurants can still come up with a full-functional delivery app for a lower cost.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A8Jh2W8E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6o1fv3fuyhbvkto26l3h.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A8Jh2W8E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6o1fv3fuyhbvkto26l3h.jpg" alt="on-demand food delivery app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-api-integrations-in-software-development"&gt;
  &lt;/a&gt;
  What is API integrations in software development?
&lt;/h2&gt;

&lt;p&gt;API stands for Application Programming Interface. They are designed for systems and applications to work. Simply put, API is a set of subroutine definitions and protocols that allow performing specific functions of applications.&lt;/p&gt;

&lt;p&gt;In other words, they are defined as communicating methods between software components. When users request something from the app via an interface, the application system will send the response data to an API. An API then interprets this returned data into information that users can understand. &lt;/p&gt;

&lt;p&gt;In &lt;a href="https://adamodigital.com/our-services"&gt;custom software development&lt;/a&gt; practice, API development services are to support integration. &lt;a href="https://adamodigital.com/blog/open-api-platform-in-software-development/"&gt;API integration&lt;/a&gt; is the seamless connection and communication between two or more programs, systems, applications to exchange data via their APIs. It allows organizations to automate the data sharing process among current systems without human interruption. The solution helps to enhance the flexibility of services and information delivery and simplify the content embedding from different apps and sites. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-benefits-of-using-api-in-food-delivery-systems"&gt;
  &lt;/a&gt;
  The benefits of using API in food delivery systems
&lt;/h3&gt;

&lt;p&gt;Operators need to access data on the levels of customers, products, and inventory to manage orders and process deliveries smoothly and efficiently. Food delivery service API integration helps to achieve ongoing data interchange from the order online website to the cart. &lt;/p&gt;

&lt;p&gt;The food delivery API supports the integrated &lt;a href="https://adamodigital.com/restaurant-pos-systems"&gt;POS system&lt;/a&gt;, which consolidates orders from all delivery platforms into one &lt;a href="https://adamodigital.com/food-beverage-software-development"&gt;restaurant management app&lt;/a&gt; for process and tracking purposes. &lt;/p&gt;

&lt;p&gt;Small to medium-sized food businesses are likely to outsource the team to save operational costs regarding the delivery fleet. To meet that need, some food delivery service API also manages the delivery shippers on behalf of restaurants. &lt;/p&gt;

&lt;p&gt;Besides, the advantages of using API is to provide a data analytics tool for business owners to monitor and analyze delivery in an attempt to increase profitability. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#top-popular-food-delivery-app-api-providers"&gt;
  &lt;/a&gt;
  Top popular food delivery app API providers
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#google-maps"&gt;
  &lt;/a&gt;
  Google Maps
&lt;/h3&gt;

&lt;p&gt;Google Maps platform provides food ordering API solutions for answering queries about real-time location information, which are divided into three groups of product:&lt;/p&gt;

&lt;p&gt;• Maps API for static and dynamics maps, street view (imagery and 360° views) features&lt;br&gt;
• Routes API for high-quality directions for different transportations, roads with real-time traffic updates, and distance matrix features &lt;br&gt;
• Places API for Current Place, Places Library, Find Places, Autocomplete, Geolocation, Geocoding, and Time Zone features &lt;/p&gt;

&lt;p&gt;It requires a billing account of Google Cloud Platform to access the Google Maps API library and get the API keys. Once you set up successfully, you will get a $300 free trial of the Google Cloud Platform and a recurring $200 monthly credit for the Google Maps Platform. Google charges $2 to $30 for every 1,000 queries per day, depending on each feature, and you only have to pay for what you use. It means that it’s almost free for food businesses at small to medium size. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uber-eats"&gt;
  &lt;/a&gt;
  Uber Eats
&lt;/h3&gt;

&lt;p&gt;UberEats API is one of the simplest ways for new restaurants to join the food delivery market. The API can be integrated directly with the POS system for small restaurants to manage menus and orders. Additionally, business owners will also make use of the vast network of delivery partners from Uber Eats. &lt;br&gt;
UberEats API offers a revenue-sharing model for pricing, ranging from 15% to 40% for every successful order. This might pay off for a large-scale business as UberEats can reach much more significance than many other APIs do. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#grubhub"&gt;
  &lt;/a&gt;
  GrubHub
&lt;/h3&gt;

&lt;p&gt;The GrubHub API provides information on over 115,000 all-sized restaurants, exclusively for the United States market, to a limited extent. It gives access to updating information such as menu items, operating times, or restaurant addresses. &lt;/p&gt;

&lt;p&gt;GrubHub also implements the revenue-sharing model. Compared to Uber Eats APIs, its commission fees are slightly lower at 10 to 30%, but not coming with logistics. That said, restaurants will have to work with third-party delivery partners. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#foursquare"&gt;
  &lt;/a&gt;
  Foursquare
&lt;/h3&gt;

&lt;p&gt;Foursquare is a social networking application for search and discovery, providing personalized suggestions on activities and places of interest. Its API tool kit is a valuable investment if the major of your target customers are using the app frequently.&lt;/p&gt;

&lt;p&gt;Foursquare API offers a pricing package starting at $599, which seems to be a high cost for most small-sized businesses. Developers need to create an account from the Foursquare website to get the necessary Client ID and Secret Key. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#freshchat"&gt;
  &lt;/a&gt;
  Freshchat
&lt;/h3&gt;

&lt;p&gt;The Freshchat API tool kit allows developers to add a live chat box to the application by using Javascript code. The live messaging service on this API for food delivery, designed by Freshworks, helps restaurants to engage more with website visitors, resulting in converting them into customers. &lt;/p&gt;

&lt;p&gt;Freshchat offers a 21-day free trial with a free starter account for 10,000 website visitors and ten team members. Upgrading to the premium account for unlimited contacts will cost $15 monthly with annual billing. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#onesignal"&gt;
  &lt;/a&gt;
  Onesignal
&lt;/h3&gt;

&lt;p&gt;This API food ordering API is used to add push notifications for alerting users of updates and news via the application. &lt;/p&gt;

&lt;p&gt;The tool kit offers a free version with limited subscribers of 30,000. Beyond, businesses will need to pay $99 per month for the service. This offer is still quite enough for most companies on a small scale. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Final words&lt;/strong&gt;&lt;br&gt;
The food delivery business is such a fast-growing trend that no restaurants should ignore it. Partnering with &lt;a href="https://adamodigital.com/"&gt;dedicated software development company&lt;/a&gt; to develop your very first restaurant management system for food delivery service, do not forget to learn and make use of existing API for food delivery to save your valuable cost and time.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>What I've learnt: The importance of self-promotion</title>
      <author>Michelle Tan</author>
      <pubDate>Fri, 04 Jun 2021 08:41:42 +0000</pubDate>
      <link>https://dev.to/michelletanpy/what-i-ve-learnt-the-importance-of-self-promotion-5344</link>
      <guid>https://dev.to/michelletanpy/what-i-ve-learnt-the-importance-of-self-promotion-5344</guid>
      <description>&lt;p&gt;For as long as I remember, the phrase "Let your work speak for itself" has always been the way I live by. There is no need for promoting the work you are doing because if it is good work, people will eventually notice and know about it and spread the word. Is it?&lt;/p&gt;

&lt;p&gt;From my personal experience, this approach worked well during my studies, obviously as a student we're given projects and assignments to work on for a given period of time. Everything that we submit are graded under our names. That however is entirely different in the open world. So, I needed to change my approach.&lt;/p&gt;

&lt;p&gt;Recently, I finished a book called &lt;a href="https://amzn.to/3vHS1v6"&gt;Show Your Work&lt;/a&gt; by Austin Kleon. It's an easy book to read. I highly recommend it to anyone who is wants to start or is afraid of the idea of self-promotion and want to give it a try.&lt;/p&gt;

&lt;p&gt;The book is a beginner's manual to self-promotion. It actually made me rethink my old approach should have been "Let others know about your work and the work will speak for itself". But hey, it's never too late to learn so I'll using this moving forward.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-benefits"&gt;
  &lt;/a&gt;
  The benefits
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#show-your-progress"&gt;
  &lt;/a&gt;
  Show your progress 🧾
&lt;/h2&gt;

&lt;p&gt;Borrowing a quote from the book, "Become a documentation of what you do". This resonated with me after I wrote about my learnings &lt;a href="https://michelletanpy.hashnode.dev/what-ive-learnt-knowledge-base"&gt;What I've learnt: Knowledge Base&lt;/a&gt;. Process can be messy sometimes which makes it interesting to understand the thoughts and design that goes behind it. It's like after watching a great movie, sometimes you'd also want to watch the behind-the-scene and the magic is revealed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#let-your-voice-be-heard"&gt;
  &lt;/a&gt;
  Let your voice be heard 🎤
&lt;/h2&gt;

&lt;p&gt;I like the opening of the book with the following quote:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"For artists, the great problem to solve is how to get oneself noticed." - Honoré de Balzac&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Come to think of it, this applies to a lot of other profession, even our daily lives. As a software engineer solving problem, how do you let other people know about this GREAT solution that you have? Is it only GREAT in your own head? The truth is, it can be the greatest or worst, but you'll never know until you let others know about it.&lt;/p&gt;

&lt;p&gt;At work, our team recently started a sharing session after the weekly meeting. It's a way to demo the project that you've worked, discuss a design or any work-related topic basically. The goal is to share knowledge and get feedback. It's definitely a great way for others to know about your work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enables-collaboration-with-others"&gt;
  &lt;/a&gt;
  Enables collaboration with others 👩🧑🏻👨🏼🧑🏿
&lt;/h2&gt;

&lt;p&gt;This ties in with the benefit I mentioned above. Now that people know about your work, they might have a feedback or an idea. Some might even have a deeper understanding than you from a different perspective which if they are interested enables a conversation. These little conversations often end up as collaboration. &lt;/p&gt;

&lt;p&gt;You can pick and choose constructive feedback to better your work, in the process, you'll learn how to contribute to other's work next time. By collaborating with others, the work is improved, you learn how to communicate better, it enables team or cross-team building. Basically, it's a knock-on effect with a lot of other plus points.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#manufacturing-opportunity"&gt;
  &lt;/a&gt;
  Manufacturing opportunity ✨
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;"Opportunities are manufactured." - Biz Stone.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The very first time I heard about this idea is when I read this book &lt;a href="https://amzn.to/3ihvuSe"&gt;Things A Little Bird Told Me&lt;/a&gt; by Biz Stone. This idea seems mind-blowing at first but it's nothing new. Shawn Wang wrote an article that describes this really well&lt;br&gt;
&lt;a href="https://www.swyx.io/create-luck/"&gt;Create Luck&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;This again ties in with what I've mentioned earlier. So how do you create opportunities and better your luck? One method is to let others know about your work; then small conversation might* happen. From there, the possibilities are endless.&lt;/p&gt;

&lt;p&gt;Another method is to be more active, show up and contribute to other's work - the other way around. Give constructive feedback or leverage other's work and ask if you can collaborate with them. Respect others if they say no.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;If you loath the idea of self-promoting, just think of it as telling stories. Just state what you are doing, be honest and don't lie, no added fancy verb.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"I did x, y, z" vs "I did x incredibly", "came up with the best y", "and z".&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Give it a try and let me know how it works out for you. 😀&lt;/p&gt;

&lt;p&gt;Thanks for reading and hope this helps.&lt;/p&gt;

&lt;p&gt;Image from &lt;a href="https://www.creativebloq.com/self-promotion/designers-guide-self-promotion-101517297"&gt;The designer's guide to self-promotion&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devjournal</category>
      <category>career</category>
      <category>womenintech</category>
      <category>learning</category>
    </item>
    <item>
      <title>Back to Basic: UI Design Fundamental for Developers</title>
      <author>Theodorus Clarence</author>
      <pubDate>Fri, 04 Jun 2021 08:33:48 +0000</pubDate>
      <link>https://dev.to/theodorusclarence/back-to-basic-ui-design-fundamental-for-developers-m41</link>
      <guid>https://dev.to/theodorusclarence/back-to-basic-ui-design-fundamental-for-developers-m41</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;According to Gary Simon, there are 7 UI Design Fundamental that has to be met&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These 7 fundamentals were heavily inspired by &lt;a href="https://www.youtube.com/watch?v=tRpoI6vkqLs"&gt;Design Course - The 2020 UI Design Fundamentals Crash Course&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The 7 UI Design Fundamentals are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Whitespace&lt;/li&gt;
&lt;li&gt;Alignment&lt;/li&gt;
&lt;li&gt;Contrast&lt;/li&gt;
&lt;li&gt;Scale&lt;/li&gt;
&lt;li&gt;Typography&lt;/li&gt;
&lt;li&gt;Color&lt;/li&gt;
&lt;li&gt;Visual Hierarchy&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I will give you some ilustrations to elaborate on,&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-white-space"&gt;
  &lt;/a&gt;
  1. White Space
&lt;/h2&gt;

&lt;p&gt;By having enough whitespace, our design will not be crowded. We need to give enough breathing room to our design.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0FsFyAYf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/veoehri6r4s5z8o6a7vk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0FsFyAYf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/veoehri6r4s5z8o6a7vk.png" alt="alt text"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Give enough padding and margin to your design, also make sure that you give consistent number on them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-alignment"&gt;
  &lt;/a&gt;
  2. Alignment
&lt;/h2&gt;

&lt;p&gt;Alignment means that your design aligns perfectly. By using this fundamental, your design will look more neat and natural.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Unilv3vW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kt1ma93iiyi8tq3a54lr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Unilv3vW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kt1ma93iiyi8tq3a54lr.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Usually, when developing, we can add a container to give constrained space by using &lt;code&gt;max-width&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
   &lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="err"&gt;Width&lt;/span&gt; &lt;span class="err"&gt;can&lt;/span&gt; &lt;span class="err"&gt;also&lt;/span&gt; &lt;span class="err"&gt;changed&lt;/span&gt; &lt;span class="err"&gt;with&lt;/span&gt; &lt;span class="err"&gt;padding&lt;/span&gt; &lt;span class="err"&gt;--&amp;gt;&lt;/span&gt;
     &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;90%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

     &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.section&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="err"&gt;you&lt;/span&gt; &lt;span class="err"&gt;can&lt;/span&gt; &lt;span class="err"&gt;add&lt;/span&gt; &lt;span class="err"&gt;background&lt;/span&gt; &lt;span class="err"&gt;color&lt;/span&gt; &lt;span class="err"&gt;here&lt;/span&gt; &lt;span class="err"&gt;--&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-contrast"&gt;
  &lt;/a&gt;
  3. Contrast
&lt;/h2&gt;

&lt;p&gt;Contrast is the color difference between text and the background. You need to have enough contrast so it will be easier to read. Contrast needs to meet WCAG 2.0 rules, you can use &lt;a href="https://contrastchecker.com/"&gt;this tool&lt;/a&gt; to check the WCAG. There is also a figma extension which is &lt;a href="https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwj97tzEzM_uAhUIfSsKHSGLCE8QFjAAegQIAhAC&amp;amp;url=https%3A%2F%2Fwww.figma.com%2Fcommunity%2Fplugin%2F733159460536249875&amp;amp;usg=AOvVaw0QYyNcsQnWIqfZevLmZSvf"&gt;A11y - color contrast checker&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Fun fact: A11y stands for Accessibility, 11 was taken from letters between A and y.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8g_szu6_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eut4uxtmjt7slc6p3z2t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8g_szu6_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eut4uxtmjt7slc6p3z2t.png" alt="alt text"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-scale"&gt;
  &lt;/a&gt;
  4. Scale
&lt;/h2&gt;

&lt;p&gt;Scale is the font-size that you use. Choose a font-size that is not too big and not too small. The default is &lt;code&gt;16px&lt;/code&gt;. &lt;strong&gt;Contrast&lt;/strong&gt; and &lt;strong&gt;Scale&lt;/strong&gt; plays a big role in WCAG 2.0 rules.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dROqBuGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0cpfunw2h5j7lzg4z288.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dROqBuGE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0cpfunw2h5j7lzg4z288.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Don't make them squint&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E7LyaIrV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://theodorusclarence.com/images/blogs/btb-ui-fundamental/squint.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E7LyaIrV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://theodorusclarence.com/images/blogs/btb-ui-fundamental/squint.gif" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-typography"&gt;
  &lt;/a&gt;
  5. Typography
&lt;/h2&gt;

&lt;p&gt;Typography is the font-family that we choose. Don't use too much font, usually, I only use 1 or 2 fonts. Use fonts that can complement each other&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MxIE2dtT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1x7orhd4i5rbp72mg6n0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MxIE2dtT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1x7orhd4i5rbp72mg6n0.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pro tip: Don't use comic sans ;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p9WQXJ7p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7psm4z5odalfdt13kkn1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p9WQXJ7p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7psm4z5odalfdt13kkn1.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-color"&gt;
  &lt;/a&gt;
  6. Color
&lt;/h2&gt;

&lt;p&gt;The color you choose for your website will affect the design looks. Don't use too much color. There are some design system that recommends using 3 colors which are primary, secondary, and accent color.&lt;/p&gt;

&lt;p&gt;You can also use a website that gives you color recommendation like &lt;a href="https://mycolor.space/"&gt;mycolor.space&lt;/a&gt; and &lt;a href="https://coolors.co"&gt;coolors&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---gg2j4xp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4zufc5k6h5omjz6m3vts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---gg2j4xp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4zufc5k6h5omjz6m3vts.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-visual-hierarchy"&gt;
  &lt;/a&gt;
  7. Visual Hierarchy
&lt;/h2&gt;

&lt;p&gt;Visual Hierarchy is very important to direct the eye of the user to the flow of the website that you want to make. Give a bigger font-size if you want them to see it first.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xPNRlHhx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/utrl5tb8a6c5ikginr1e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xPNRlHhx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/utrl5tb8a6c5ikginr1e.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;User of a website didn't really read, they skim.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ne0iIFvl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8f3bh3uwtuvi74h5yjp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ne0iIFvl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8f3bh3uwtuvi74h5yjp.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;There it is the 7 UI Design Fundamental, hopefully, this blog can make your design improve!&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Originally posted on &lt;a href="https://theodorusclarence.com/?ref=devto"&gt;my personal site&lt;/a&gt;, find more &lt;a href="https://theodorusclarence.com/blog?ref=devto"&gt;blog posts&lt;/a&gt; and &lt;a href="https://theodorusclarence.com/library?ref=devto"&gt;code snippets library&lt;/a&gt; I put up for easy access on my site 🚀&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>beginners</category>
      <category>ux</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
