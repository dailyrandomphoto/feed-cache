<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network. Open source and radically transparent.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How I used Reddit &amp; Twitter to Make Your README More Effective</title>
      <author>Michael Bagley</author>
      <pubDate>Sun, 13 Dec 2020 21:20:57 +0000</pubDate>
      <link>https://dev.to/mbagley1020/how-i-used-reddit-twitter-to-make-your-readme-more-effective-36bi</link>
      <guid>https://dev.to/mbagley1020/how-i-used-reddit-twitter-to-make-your-readme-more-effective-36bi</guid>
      <description>&lt;p&gt;Many lessons from my time at university have stuck with me throughout the years. One of the most important was in regards to technical writing (&lt;em&gt;thank you to my CS 787 professor&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;The lesson being that the process of technical writing is focused on being &lt;strong&gt;clear&lt;/strong&gt; and &lt;strong&gt;concise&lt;/strong&gt;. Every aspect of this technical work, whether it be visual or text, should be without redundancy or unrelated content.&lt;/p&gt;

&lt;p&gt;This does not mean that your writing shouldn't be sophisticated or tedious, it just means you should be conveying relevant information. In other words, &lt;strong&gt;get to the point&lt;/strong&gt;.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#my-story" class="anchor"&gt;
  &lt;/a&gt;
  My Story
&lt;/h1&gt;

&lt;p&gt;So that brings me to the README I've been working on. I have a repo that I wanted to be more alluring to potential users. This is a common situation that many open-source developers find themselves in. I didn't have too much experience writing high-quality READMEs.&lt;/p&gt;

&lt;p&gt;Over years of using GitHub, I've seen some awesome READMEs with unique styles and crazy visuals/animations, but now I don't necessarily think that is always the most effective way to improve your README.&lt;/p&gt;

&lt;p&gt;Last week I posted on various programming-related subreddits something along the lines of 'Looking for tips/criticism on my Github README?', about five in total. Furthermore, I DMed a couple of experienced open-source developers.&lt;/p&gt;

&lt;p&gt;Over the following 48 hours, I received staggered feedback that I'm excited to share with you today. I've compiled the three most important points featured in the responses.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#1-informative-visuals" class="anchor"&gt;
  &lt;/a&gt;
  1. Informative Visuals
&lt;/h1&gt;

&lt;p&gt;A picture is worth a thousand words. By that logic, too many pictures mean too many words. Take a look at &lt;a href="https://github.com/CCOSTAN/Home-AssistantConfig#readme"&gt;this repo&lt;/a&gt; for example. There's a lot of images that clutter up the repo aesthetically. Are all of these images necessary? Too much large imagery damages the navigability of the page.&lt;/p&gt;

&lt;p&gt;Imagery is very important as long it's purposeful. No-one likes reading a boring wall of text, but one or two branding/business images is enough. Your README should come off as a tool for potential developers to understand the purpose of your project, not as a sales pitch.&lt;/p&gt;

&lt;p&gt;Furthermore, over-stimulating imagery can be a turn off to potential users as opposed to a mature, organized aesthetic.&lt;/p&gt;

&lt;p&gt;This feedback led me to change the position and size of some of my more massive imagery. &lt;strong&gt;Stick to less than two branding images&lt;/strong&gt;. Any other pictures/animations should be essential to either learning how to get up and running or understanding your project's purpose.&lt;/p&gt;

&lt;p&gt;By the way, &lt;a href="https://github.com/easybase/easybase-react"&gt;here's a link to my work-in-progress README&lt;/a&gt;. A star on the GitHub repo would be greatly appreciated if you liked this article. Thanks!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-navigability" class="anchor"&gt;
  &lt;/a&gt;
  2. Navigability
&lt;/h1&gt;

&lt;p&gt;For something like a GitHub page, organization and navigability go hand-in-hand. Users will likely reference your README multiple times. It's a one-stop shop for developers to find more information on specific topics (installation, dependencies, etc).&lt;/p&gt;

&lt;p&gt;In my opinion, the most effective way to fulfill this navigability requirement is through the use of a Table of Contents. Many small to &lt;a href="https://github.com/cvxgrp/cvxpy"&gt;medium sized quality projects&lt;/a&gt; have some sort of ToC even if it's rudimentary.&lt;/p&gt;

&lt;p&gt;This serves two purposes. First, it's a place for potential users to instantly navigate to their desired section. Second, it gives your README a structure to follow. Readers get a preview of what is to come as they continue forward. This structure results in a README that is &lt;strong&gt;organized&lt;/strong&gt; and &lt;strong&gt;engaging&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ecotrust-canada.github.io/markdown-toc/"&gt;Here's a tool&lt;/a&gt; that will automatically create a table of contents for an existing markdown document.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-expandable-content" class="anchor"&gt;
  &lt;/a&gt;
  3. Expandable Content!
&lt;/h1&gt;

&lt;p&gt;Now this one isn't as much feedback as much as it is my suggestion based on feedback. I didn't even consider using this markdown functionality until someone specifically suggested it to me. Turns out you can create expandable sections in your README with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;details&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;Section Header!&lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;

Some information...

&lt;span class="sb"&gt;`# Here's some code`&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/details&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After trying this formatting method in my README, I can say that I'll probably be using it in the future. It made the layout much more concise and aesthetically pleasing.&lt;/p&gt;

&lt;p&gt;As I said previously, no-one likes reading a wall of text. This dramatically improved the readability of my repo. What's great about this markdown feature is that it dramatically reduces README clutter without losing content.&lt;/p&gt;

&lt;p&gt;Users don't have to leave the page if they want more detail on a specific subject, they just have to click the dropdown arrow. &lt;a href="https://github.com/easybase/easybase-react#usage"&gt;Here's my specific implementation for reference&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For a more robust discussion on drop-downs in markdown, take a look at &lt;a href="https://gist.github.com/citrusui/07978f14b11adada364ff901e27c7f61"&gt;this gist&lt;/a&gt;.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Thanks for reading! These three tips can certainly boost the effectiveness of your READMEs. Remember, the core goal of your README is to be &lt;strong&gt;clear&lt;/strong&gt; and &lt;strong&gt;concise&lt;/strong&gt; at every step.&lt;/p&gt;

&lt;p&gt;The three suggestions above were chosen by me, based on feedback from multiple sources. Be sure to consider informative visuals, navigability, and collapsable content in your future projects.&lt;/p&gt;

&lt;p&gt;Feel free to leave a response regarding any questions or concerns. I'll be sure to get back to you!&lt;/p&gt;

</description>
      <category>github</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>react</category>
    </item>
    <item>
      <title>Understanding the test pyramid</title>
      <author>Harris Geo üë®üèª‚Äçüíª</author>
      <pubDate>Sun, 13 Dec 2020 19:36:15 +0000</pubDate>
      <link>https://dev.to/harrisgeo88/understanding-the-test-pyramid-h31</link>
      <guid>https://dev.to/harrisgeo88/understanding-the-test-pyramid-h31</guid>
      <description>&lt;p&gt;&lt;em&gt;Originally posted on my blog &lt;a href="https://www.harrisgeo.me/blogs/understanding-the-test-pyramid"&gt;harrisgeo.me&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b8kYShIc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://harrisgeo.xyz/images/pyramid-sunset.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b8kYShIc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://harrisgeo.xyz/images/pyramid-sunset.jpg" alt="https://harrisgeo.xyz/images/pyramid-sunset.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@stephenleo1982?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Stephen Leonardi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Testing is a really important part of coding that is very often ignored by developers. How many times have we all experienced that pushing code to production (or not even reaching that far) had broken part our service / website?&lt;/p&gt;

&lt;p&gt;It especially sucks when a part of the system that is totally unrelated to our code ends up having a problem due to our changes. That phenomenon is usually referred to as a &lt;code&gt;side effect&lt;/code&gt;. Putting together several chunks of code that were written by multiple developers is a recipe for disaster as a result of side effects.&lt;/p&gt;

&lt;p&gt;Conflicts may arise in files that were modified by more than one person. These conflicts often end up causing bugs and other unpleasant system behaviour. So what do we do to put ourselves in a better place?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-testing-pyramid" class="anchor"&gt;
  &lt;/a&gt;
  The testing pyramid
&lt;/h2&gt;

&lt;p&gt;You might have heard this term by quality engineers (brrr who even talks to them? üòÜ) when they want to describe how testing can be abstracted in multiple levels. In a world where releasing doesn‚Äôt result in us being in a cold sweat, we need to make use of the testing pyramid (along with a ‚Äúfew‚Äù other concepts).  That way, we will feel more confident that our new code is not going to break the system that easily.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KkqgDyea--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://harrisgeo.xyz/images/testing-pyramid.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KkqgDyea--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://harrisgeo.xyz/images/testing-pyramid.png" alt="https://harrisgeo.xyz/images/testing-pyramid.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Image by &lt;a href="https://www.oreilly.com/library/view/hands-on-microservices-with/9781788471459/assets/01267588-6cc9-4efc-8ab9-440779228bcb.png"&gt;oreilly.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As shown in the image above, the testing pyramid includes 3 stages.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;unit tests (small tests)&lt;/li&gt;
&lt;li&gt;integration tests (medium tests)&lt;/li&gt;
&lt;li&gt;end to end tests or e2e tests (large tests)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While at Google they like to refer to each one of them based on the impact it has on the system (thus the size), I think the rest of the world prefers the technical term when referring to each one of them.&lt;/p&gt;

&lt;p&gt;If you notice in the image above, the unit section is quite bigger than the integration section and the second one itself is bigger than the one for e2e. That is a good way to quickly visualise the amount of tests that are supposed to be written to ensure good testing balance. We will analyse each stage further down in this post.&lt;/p&gt;

&lt;p&gt;To help us understand each test's purpose, let‚Äôs use as an example the construction for a multi floor building.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#unit-tests" class="anchor"&gt;
  &lt;/a&gt;
  Unit tests
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs think of unit tests as the idea of making sure that each tile, brick or cable behind the wall works fine.&lt;/p&gt;

&lt;p&gt;Unit tests should be testing small pieces of code that run on a single process. Examples of such pieces can be helper functions, independent React components and other I/O operations. We want to test code that has a single purpose and mainly makes our development work smoother. For that reason the majority of the tests our system is going to have will be unit tests.&lt;/p&gt;

&lt;p&gt;Another important requirement for unit tests is that they should not be accessing the disk or network. For cases where they rely on libraries or external sources, the use of &lt;code&gt;test doubles&lt;/code&gt; is what will help us solve that problem without breaking the rule of no network / disk access. There are cases where unit tests can access public APIs and other external sources but in this article let's keep it simple.&lt;/p&gt;

&lt;p&gt;Test doubles are common in all kinds of tests and they include a few different types that can be quite useful for us. These are &lt;code&gt;stubs&lt;/code&gt;, &lt;code&gt;test fakes&lt;/code&gt; and  &lt;code&gt;interaction testing&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stubs" class="anchor"&gt;
  &lt;/a&gt;
  Stubs
&lt;/h3&gt;

&lt;p&gt;Stubs (often referred to as mocks) are the most commonly used test doubles in unit tests. Stubs work in a way where we return a hardcoded result we have already predefined before executing the test. That is really useful when our code uses external libraries and dependencies that are supposed to make asynchronous requests to our network or other distributed sources. That technique keeps us on track and we can continue testing without relying on communication with code we have no control over.&lt;/p&gt;

&lt;p&gt;Unit tests are usually really fast both to execute and to write. For that reason they should always be included when pushing changes to our code. Most teams I have worked with would reject your PR if it didn‚Äôt include any unit tests. Again, with unit tests, the more the merrier.&lt;/p&gt;

&lt;p&gt;However, it is really important to mention that only focusing on adding unit tests DOES NOT mean that our system is going to be bug free. That is why I think that concepts like 100% test coverage are b*^%#$‚Ç¨t. But again, that‚Äôs my personal opinion. If we want to ensure quality then maybe we should start worrying about the rest of the stages in the test pyramid as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integration-tests" class="anchor"&gt;
  &lt;/a&gt;
  Integration tests
&lt;/h2&gt;

&lt;p&gt;Now let‚Äôs think of the whole room for the office. Maybe the walls, the floor or even the whole kitchen. They all contain lots of smaller units that when put together as a group do something bigger. Stuff like turning on the lights or making sure the coffee maker will have enough and continuous electricity to work when we want to make some coffee.&lt;/p&gt;

&lt;p&gt;Integration tests are used for testing groups of smaller units where we want to see how they behave as a whole. In the frontend world integration tests are often referred to as &lt;code&gt;UI tests&lt;/code&gt;. A good example of a library that helps us with that in the React world, is &lt;a href="https://testing-library.com/docs/react-testing-library/intro/"&gt;react-testing-library&lt;/a&gt;. In the backend world they are often referred to as &lt;code&gt;contract tests&lt;/code&gt; or &lt;code&gt;api tests&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When it comes to speed, integration tests sit right between unit and e2e tests. The idea is that we want our code to only reach &lt;a href="http://localhost"&gt;localhost&lt;/a&gt; in order to read or write any data. In other words, even though they are allowed to talk to other services, these services are only allowed to be on the &lt;strong&gt;same machine&lt;/strong&gt;. To achieve that we need to once again make use of test doubles. This is where we can make good use of &lt;code&gt;test fakes&lt;/code&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-fakes" class="anchor"&gt;
  &lt;/a&gt;
  Test fakes
&lt;/h3&gt;

&lt;p&gt;Test fakes as the name suggests are fake representations of the original service our code is supposed to be talking to. Setting up test fakes can be a bit painful as we need to mock the service and or database we are supposed to be talking to but once this part is done, the value it returns is spectacular. Libraries like &lt;a href="https://github.com/nock/nock"&gt;nock&lt;/a&gt; or &lt;a href="https://github.com/mswjs/msw"&gt;mock-service-worker&lt;/a&gt; are some really good tools that can help us achieve test fakes.&lt;/p&gt;

&lt;p&gt;For Node.js services we can spin up a temporary Database and seed it with some controlled data. Doing that, our API will work as intended but it will instead use our fake Database and test data.&lt;/p&gt;

&lt;p&gt;For the temporary Database we can spin up a Docker container that will contain an instance of that Database we are using (like MySQL, PostgresQL, etc). We can then execute all the available migration scripts and then have an exact copy of our required tables.&lt;/p&gt;

&lt;p&gt;We can then use  &lt;code&gt;fixtures&lt;/code&gt; to send controlled data into that instance. That way, calling an API for e.g. all the available food recipes a user has, will return us the actual controlled data that we instructed our code to insert into the Database.&lt;/p&gt;

&lt;p&gt;If you think about it, test fakes are basically setting up a quick Database to temporarily write to and once the test is finished, that Database can be destroyed. I have to admit it took me a while to get comfortable with that concept but now it sounds that simple. Maybe the fact that it touches multiple areas all together is something that makes it look a bit more terrifying. However, like everything in programming, at the beginning it may look scary but after doing that a few times, we get used to it and see the real value it provides.&lt;/p&gt;

&lt;p&gt;Making integration tests easy to deal with, really depends on the setup of our system. If it is that painful to set them up, that usually is a sign that we need to refactor and / or simplify certain parts of our system.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interaction-tests" class="anchor"&gt;
  &lt;/a&gt;
  Interaction tests
&lt;/h3&gt;

&lt;p&gt;Interaction tests can be part of either unit or integration tests. They are mainly designed to test how a function is called without calling its implementation or relying on its result. Some common examples you might have already seen with jest is properties like &lt;code&gt;toHaveBeenCalled&lt;/code&gt; or &lt;code&gt;toHavebeenCalledWith(x, y)&lt;/code&gt;. Such tests can be quite useful if we want to test concepts like &lt;em&gt;if a user resets their password, the function for sending an email with the new password setup link is called with user's email&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Unlike unit tests, for integration tests it makes sense to set them up to be testing multiple things in each one of them. I know that some developers may disagree with multi scoped tests but I think that it saves a lot of time and lines of code as the majority of the times the testing scenarios are the same but we just change the target of the test.&lt;/p&gt;

&lt;p&gt;What I really like about integration tests is that when releasing, amongst other tests, they give us the highest amount of confidence that if something is about to break, that should appear here. That is because they touch a decent amount of code, are not that slow and with that combination, they can help us spot most of the bugs that can occur.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#end-to-end-tests" class="anchor"&gt;
  &lt;/a&gt;
  End to end tests
&lt;/h2&gt;

&lt;p&gt;We thought of the bricks and tiles of the room, we thought of the different rooms and other groups of units but we haven't thought of how we are going to make sure that they all glue together properly. Now it's time to worry about the entirety of the building. What rooms does each floor have? How do we move between floors? Is it a good idea to add a gym on floor 4 where directly underneath it there is a library?&lt;/p&gt;

&lt;p&gt;Systems usually have several microservices, 3rd party apps and more that talk to each other in order to achieve a certain goal. Imagine how many different layers the code visits every time we want to register to a service, login or complete any other full journey. This is what the e2e tests are designed for.&lt;/p&gt;

&lt;p&gt;At the end of the day every line of code that we write has one and only one purpose, which is to solve end users problems. Testing these entire journeys users take in order to perform an action is what e2e tests are all about. However unlike unit and integration tests, e2e tests can be really slow in comparison as they are supposed to be talking to the real services and not mock that much. They need to talk to the real database, go through the entirety of our microservices so that we feel confident that everything works well. However e2e tests are prone to network connection issues that may occur that will cause the test to fail.&lt;/p&gt;

&lt;p&gt;For these reasons e2e are usually not running that often comparing to unit test and integration tests. We want the development flow to be as fast as possible and sadly e2e tests sometimes may be a blocker. That is why e2e tests are common to run pre deploying to an environment to even furtherly ensure we are not going to break.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#moral-of-the-story" class="anchor"&gt;
  &lt;/a&gt;
  Moral of the story
&lt;/h2&gt;

&lt;p&gt;We can all agree that releasing "bug free" code is a bit of mission impossible but that does not mean that we are just going to give up like that. Sooner or later, all developers will realise that the most important part of our jobs is to focus on solving problems. Adding quality to our code is a really decent way of proving that we know what we're doing. Then, having the confidence to say that code that we release is not going to introduce new problems to our system is the way going forward. &lt;/p&gt;

&lt;p&gt;Understanding the test pyramid and making use of it is not just another trendy topic that we need to learn because it is asked in interviews. It is a fundamental concept that will help us better debug problems when dealing with the entire stack of our system. Most importantly it is one of the things that knowing how to deal with is great to level up our skills as developers.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Feel free to contact me with any questions! Share this post with your friends and colleagues&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Follow me on &lt;a href="https://twitter.com/harrisgeo88"&gt;Twitter&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Add me on &lt;a href="https://www.linkedin.com/in/charilaos-georgakakis/"&gt;LinkedIn&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>testing</category>
      <category>javascript</category>
      <category>fullstack</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Make Arrays your best friend with these methods!</title>
      <author>Soumya Dey</author>
      <pubDate>Sun, 13 Dec 2020 18:45:23 +0000</pubDate>
      <link>https://dev.to/soumyadey/make-arrays-your-best-friend-with-these-methods-59ld</link>
      <guid>https://dev.to/soumyadey/make-arrays-your-best-friend-with-these-methods-59ld</guid>
      <description>&lt;p&gt;I know many people have already written a lot about arrays, but most of them only contain the most used and basic methods.&lt;/p&gt;

&lt;p&gt;But there are lots of not so popular methods that you can use to manipulate, iterate, and do many things with your arrays. So we are going to talk about those methods in this post using JavaScript.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#arrays" class="anchor"&gt;
  &lt;/a&gt;
  Arrays
&lt;/h2&gt;

&lt;p&gt;JavaScript array is a non-primitive data type that can store multiple values in it which can be of the same data type or different data type. Also, the length of a JavaScript array is not fixed.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#array-methods" class="anchor"&gt;
  &lt;/a&gt;
  Array methods
&lt;/h2&gt;

&lt;p&gt;We all know about &lt;code&gt;push()&lt;/code&gt;, &lt;code&gt;pop()&lt;/code&gt;, &lt;code&gt;indexOf()&lt;/code&gt; methods.&lt;br&gt;
&lt;code&gt;arr.push('x')&lt;/code&gt; adds &lt;code&gt;x&lt;/code&gt; at the end of the array &lt;code&gt;arr&lt;/code&gt; and &lt;code&gt;arr.pop()&lt;/code&gt; removes the last item from &lt;code&gt;arr&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;arr.indexOf('x')&lt;/code&gt; finds the index of &lt;code&gt;x&lt;/code&gt; in &lt;code&gt;arr&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So let's talk about the unpopular but equally important guys here.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#manipulate-arrays" class="anchor"&gt;
  &lt;/a&gt;
  Manipulate arrays
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;unshift()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;unshift()&lt;/code&gt; method &lt;em&gt;adds the new element at the beginning of the array&lt;/em&gt; and returns the new length of the array.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unshift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["hello", "world"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;shift()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;shift()&lt;/code&gt; method &lt;em&gt;removes the first element from the array and returns the removed element&lt;/em&gt;. It also changes the length of the array.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// "hello"&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["world"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;slice()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;slice()&lt;/code&gt; method returns a &lt;em&gt;shallow copy of a portion of an array into a new array object selected from start to end&lt;/em&gt;, excluding the item at the end index. The original array is not modified&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;py&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;java&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;c++&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;c#&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [ 'c++', 'c#' ]&lt;/span&gt;

&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [ 'js', 'py' ]&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["js", "py", "java", "c++", "c#"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;splice()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;splice()&lt;/code&gt; method changes the contents of an array by &lt;em&gt;removing or replacing existing elements and/or adding new elements in place&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;py&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;java&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;c++&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;c#&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// delets 2 items starting from index 0&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["java", "c++", "c#"]&lt;/span&gt;

&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;kotlin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// delets 1 item starting from index 0,&lt;/span&gt;
&lt;span class="c1"&gt;// and puts 'kotlin' in that place&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["kotlin", "c++", "c#"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;join()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;join()&lt;/code&gt; method &lt;em&gt;creates and returns a new string by concatenating all of the elements in an array&lt;/em&gt; separated by commas or a specified separator string.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;array1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// "1,2,3"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;love&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;programming&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;array2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "I-love-programming"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;concat()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;concat()&lt;/code&gt; method is used to &lt;em&gt;merge two or more arrays&lt;/em&gt;. This method does not change the existing arrays but instead returns a new array.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;e&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;f&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["a", "b", "c", "d", "e", "f"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#iterate-over-arrays" class="anchor"&gt;
  &lt;/a&gt;
  Iterate over arrays
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;every()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;every()&lt;/code&gt; method &lt;em&gt;tests whether all elements in the array pass the test implemented by the provided function&lt;/em&gt;. It returns a Boolean value.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;some()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;some()&lt;/code&gt; method tests whether at least one element in the array passes the test implemented by the provided function. It returns a Boolean value.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// checks whether an element is even&lt;/span&gt;
&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;map()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;map()&lt;/code&gt; method creates a new array populated with the results of calling a provided function on every element in the calling array.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doubleOfArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;doubleOfArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [2, 4, 6, 8, 10]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;filter()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;filter()&lt;/code&gt; method creates a new array with all elements that pass the test implemented by the provided function.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// only the element that are even&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;evenArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evenArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [2, 4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#reduction-methods" class="anchor"&gt;
  &lt;/a&gt;
  Reduction methods
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;reduce()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;reduce()&lt;/code&gt; method &lt;em&gt;executes a reducer function defined by you on each element of the array&lt;/em&gt;, resulting in a single output value.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// ((((1-2)-3)-4)-5) = -13&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;accumulator&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// -13&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;reduceRight()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;reduceRight()&lt;/code&gt; method &lt;em&gt;applies a function against an accumulator and each value of the array (from right-to-left) to reduce it to a single value&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// ((((5-4)-3)-2)-1) = -5&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduceRight&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;accumulator&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// -5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#sorting-arrays" class="anchor"&gt;
  &lt;/a&gt;
  Sorting arrays
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;sort()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;sort()&lt;/code&gt; method &lt;em&gt;sorts the elements of an array in place&lt;/em&gt; and returns the sorted array. The default sort order is ascending.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;months&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;March&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Feb&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dec&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;months&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;months&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ["Dec", "Feb", "Jan", "March"]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [1, 2, 3, 4, 5, 6, 7]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;reverse()&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;reverse()&lt;/code&gt; method &lt;em&gt;reverses an array in place&lt;/em&gt; and returns the sorted array. Don't confuse it with sorting in descending order.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [3, 7, 1, 5, 2, 6, 4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;That's it. You have made a new best friend now.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;br&gt;
If you want to get a deeper knowledge of Arrays in JavaScript then make sure to read the MDN docs of Array here üëâ &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"&gt;Array - JavaScript | MDN&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#comment-here-if-you-have-any-questions-about-these-awesome-array-methods" class="anchor"&gt;
  &lt;/a&gt;
  Comment here if you have any questions about these awesome array methods.
&lt;/h3&gt;

&lt;p&gt;If you like my blogs &lt;a href="https://dev.to/soumyadey"&gt;Follow me here on Dev.to&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Soumya-Dey"&gt;My Github&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>Build responsive websites without a framework</title>
      <author>Blossom Babs</author>
      <pubDate>Sun, 13 Dec 2020 17:59:47 +0000</pubDate>
      <link>https://dev.to/blossom/build-responsive-websites-without-a-framework-47e6</link>
      <guid>https://dev.to/blossom/build-responsive-websites-without-a-framework-47e6</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;Summary&lt;/strong&gt;: Responsiveness is fundamental in web development. With multiple devices and screen resolutions, you want to build a website that works on ALL these screens. In this article, I would be taking you through five things you &lt;strong&gt;must&lt;/strong&gt; consider when building a responsive website without a framework.&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-responsive-web-development" class="anchor"&gt;
  &lt;/a&gt;
  What is Responsive Web development?
&lt;/h1&gt;

&lt;p&gt;Responsive web development is an approach to web design that makes web pages render well on a variety of devices and screen sizes. Web development has advanced past simply designing static pages for the computer. Now, your web pages and applications have to support multiple devices viewport; there are lots of them.&lt;/p&gt;

&lt;p&gt;Every frontend developer has heard or read the above multiple times. Responsive web development was one of the first things that I heard over and over again. However, I was introduced to bootstrap for responsiveness.&lt;/p&gt;

&lt;p&gt;There are lots of CSS frameworks, However Bootstrap was one of my favourite frameworks to use. I used bootstrap in all my projects including react based projects for responsiveness till I realised I was overly dependent on it. Also, Bootstrap can have a lot of dependencies in instances of small-scale projects.&lt;/p&gt;

&lt;p&gt;In my journey to build fully responsive without frameworks and with just HTML and CSS, I found out 5 crucial things to do to make sites responsive and developments less cluttered.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-always-design-mobilefirst" class="anchor"&gt;
  &lt;/a&gt;
  1. Always design mobile-first
&lt;/h2&gt;

&lt;p&gt;Contrary to popular opinion, this is not gate-keeping. Designing mobile-first ensures that you are able to get as much information as you can on a smaller screen. When it is scaled up, the components would scale up too. However, if you design for desktop first, most components will go out of place when shrinked down for  a smaller sized screen.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;As a challenge; you should replicate a simple landing page. Build mobile first then desktop first, see which was easier to scale.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-define-a-fluid-layout" class="anchor"&gt;
  &lt;/a&gt;
  2. Define a fluid layout
&lt;/h2&gt;

&lt;p&gt;My go-to keywords for defining the overall layout of the webpage are:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;width: 90%;
margin: 0 auto;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The width ensures that everything on the web page is a set width from the border of the screen size. Margin sets the content of the webpage to the center of the screen width.&lt;/p&gt;

&lt;p&gt;You can play around with the width depending on what you need.&lt;/p&gt;

&lt;p&gt;Make sure you use percentage to define the width, this is because percentages are fluid and will adjust to the size of the device viewport.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;As a challenge; you should add width and margin to the landing page you created above. It would make the scaling up or down much more fluid.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-know-when-to-use-rems-and-ems" class="anchor"&gt;
  &lt;/a&gt;
  3. Know when to use Rems and Ems
&lt;/h2&gt;

&lt;p&gt;Rems and Ems are size units just like pixels and percentages. Rems and Ems are relative units and are much more preferred when defining font size, border, padding etc.&lt;/p&gt;

&lt;p&gt;They are very different though.&lt;/p&gt;

&lt;p&gt;Em is relative to the size of its direct or nearest parent, while Rem is only relative to the html (root) font-size.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.body{
font-size: 14px;
}

.container{
width:50%;
background-color:red;
font-size: 1.5em;

h1{
font-size: 3em;
}

}

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;code&gt;h1{font-size:3rem;}&lt;/code&gt;&lt;br&gt;
&lt;code&gt;h1{font-size:3em;}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;As a challenge, run both codes or variations of it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Both h1 sizes would differ. The em unit will be relative to its parents element(the container); the h1 will be three times the size of the container.&lt;br&gt;
While the rem unit will be relative to the body, not the parent.&lt;/p&gt;

&lt;p&gt;When using units, you want to know when to use which so as to avoid cascading effect.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#4-use-css-layouts" class="anchor"&gt;
  &lt;/a&gt;
  4. Use CSS layouts
&lt;/h2&gt;

&lt;p&gt;Grid and Flex are powerful tools for structuring the layout of the web. Use them!&lt;/p&gt;

&lt;p&gt;Once I found out how similar the bootstrap grid was to css native grid and flex, there simply was no going back for me. Infact I find the css grid much simpler, customizable and with no dependencies.&lt;/p&gt;

&lt;p&gt;If for some reason, I have to use the Bootstrap framework, it would definitely not for the layouts.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#5-use-media-queries" class="anchor"&gt;
  &lt;/a&gt;
  5. Use media queries
&lt;/h2&gt;

&lt;p&gt;When I started writing responsive designs without frameworks, I used media queries everywhere.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@media and screen(max-width: 500px){
//
}

@media and screen(max-width: 320px){
//
}

@media and screen(max-width: 480px){
//
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;It was a mess and this is why I have saved this for last.&lt;/p&gt;

&lt;p&gt;It is impossible not to use media queries when talking about responsiveness. But, if you take note of the points above, you wouldn't need media queries for every breakpoint. Instead, they would be used sparingly and specifically. E.g, the point where the screen goes from being a phone to tablet and tablet to laptop and laptop to the television. Not for every brand of iPhone viewport.&lt;/p&gt;

&lt;p&gt;Familiarize yourself with the use of width and max-width. The width can be used to set the width for a screen, then max-width for lager screens all in the same block of code. Neither affecting the other.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bonus point&lt;/strong&gt;: Avoid setting a fixed width and height for your image. Either set width or height, it would scale up nicely and responsively. Setting a width and height distorts it and makes it unresponsive.&lt;br&gt;
Pro-tip: Use a percentage to define the widths.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Introduction to Custom [HTML] Elements (CSS ART)</title>
      <author>Michael Salaverry</author>
      <pubDate>Sun, 13 Dec 2020 17:56:58 +0000</pubDate>
      <link>https://dev.to/barakplasma/introduction-to-custom-html-elements-136c</link>
      <guid>https://dev.to/barakplasma/introduction-to-custom-html-elements-136c</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-are-custom-html-elements" class="anchor"&gt;
  &lt;/a&gt;
  What are Custom [HTML] Elements?
&lt;/h1&gt;

&lt;p&gt;Custom Elements are reusable html elements which can encapsulate implementation details into components. Custom Elements are part of the Web Component spec, which is supported by all the major browsers. Custom Elements can be used to bring the component model of React/Angular/Vue to the native web platform without any added dependencies costing valuable network capacity.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-do-custom-elements-look-like" class="anchor"&gt;
  &lt;/a&gt;
  What do Custom Elements look like?
&lt;/h1&gt;

&lt;p&gt;Here's an example:&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/barakplasma/embed/JjREOvx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;For this example, and in honor of the current Jewish Holiday of Hanukkah, I decided to create a Custom Element for Menorah lights. A menorah has 9 spaces for lights (candles or oil lamps) in total. Each night of Hanukkah, we ignite one more light using the helper light, the shamash. The shamash is always a bit taller than the rest. &lt;/p&gt;

&lt;p&gt;Let's take a look at the HTML to see what makes this special:&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/barakplasma/embed/JjREOvx?height=600&amp;amp;default-tab=html&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Rather than rewrite the same HTML 9 times (span&amp;gt;img.candle), I created one reusable custom element for a candle. A "candle-el" can be (lit or unlit) and (normal or shamash). We can create custom attributes on custom elements which can modify that element's styling, behavior, or contents. In this case, each candle listens for the "lit" and the "shamash" attributes to see if it needs to have different styling. I want this to work like the "checked" attribute on HTMLInputElements.&lt;/p&gt;

&lt;p&gt;(Homework idea: Click "edit on codepen" and try adding and removing "lit" from the various candle elements in the codepen to see how it changes the styling.)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-do-i-get-started-with-custom-elements" class="anchor"&gt;
  &lt;/a&gt;
  How do I get started with Custom Elements?
&lt;/h1&gt;

&lt;p&gt;Custom Elements are probably built into your browser, and require no transpilation/bundling/etc, so all you'll need is your browser and a text editor. Codepen is great for this.&lt;/p&gt;

&lt;p&gt;Since the appeal of Custom Elements is no dependencies, let's try getting started without any frameworks. While Custom Elements are a useful tool even in a React/Angular/Vue project, we don't need those to get started.&lt;/p&gt;

&lt;p&gt;To begin with, we'll need some experience with Javascript. Web Components are built by defining Custom Elements in Javascript. Let's take a look at the Javascript from the example.&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/barakplasma/embed/JjREOvx?height=600&amp;amp;default-tab=js&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
The line at the bottom of the Javascript file defines the Custom Element for use in our HTML.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="cm"&gt;/*custom element name=*/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;candle-el&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="cm"&gt;/*Javascript class for the custom element=*/&lt;/span&gt;&lt;span class="nx"&gt;Candle&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The Javascript class must extend an HTMLElement. Within the constructor, we need to call super() and create a shadow DOM root. Later on in the constructor, we need to append the elements within the Custom Element to that shadow DOM root. The shadow DOM root is how we encapsulate the HTML and CSS for the custom element. That shadow root isolates the component from its siblings and parents. You can see this if you inspect element on any candle.&lt;/p&gt;

&lt;p&gt;Custom Elements are mostly created with Javascript within the constructor. As you can see, I used &lt;code&gt;document.createElement&lt;/code&gt; &lt;code&gt;Element.appendChild&lt;/code&gt; and &lt;code&gt;Element.[has/set/get]Attribute&lt;/code&gt; through out the constructor to create the elements. This is vanilla Javascript, available without Custom Elements as well. As an aside, React also uses &lt;code&gt;document.createElement&lt;/code&gt; to create elements for rendering into the DOM.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Web Components are a standardized and future proof tool for Frontend Web Developers to build consistent experiences. With just a bit of vanilla (ordinary) Javascript, HTML, and CSS, we can create well encapsulated, reusable, and fast loading Custom Elements which can be used across projects and frameworks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-resources" class="anchor"&gt;
  &lt;/a&gt;
  More resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components"&gt;MDN: Web Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements"&gt;MDN: Using Custom Elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/fundamentals/web-components/customelements"&gt;Google: Custom Elements tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Just in case CodePen doesn't work for you, here's the same thing as a &lt;a href="https://gist.github.com/barakplasma/b78bc7c9dc1d6a7182a3a52d3d17315a"&gt;Github Gist&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>codepen</category>
      <category>css</category>
    </item>
    <item>
      <title>How to: highly available load balancer - HAProxy with Keepalived</title>
      <author>Mirek @ webmastah.net</author>
      <pubDate>Sun, 13 Dec 2020 17:36:59 +0000</pubDate>
      <link>https://dev.to/webmastah_net/how-to-highly-available-load-balancer-haproxy-with-keepalived-366p</link>
      <guid>https://dev.to/webmastah_net/how-to-highly-available-load-balancer-haproxy-with-keepalived-366p</guid>
      <description>&lt;p&gt;In this article I will guide you through the process of installing and configuring a highly available load balancer. But before we start, we have some names and concepts to decode, which may still be unknown to a beginner.&lt;/p&gt;

&lt;p&gt;Let's start with what we want to achieve. We do not have to let our imagination run wild: with current web applications it is quite natural to separate traffic into more than one machine.&lt;/p&gt;

&lt;p&gt;Let's assume that we have an application that can no longer handle the traffic on a single server (e.g., there is already quite a large and expensive VPS instance) and it's time to split some of its services into several servers. Let it be a web server (nginx, apache, whatever). And here we meet the first problem: how to split this traffic flow into more servers? &lt;/p&gt;

&lt;p&gt;The answer is the load balancer, a service that can juggle traffic between machines according to the criteria set. There are many possibilities to choose a load balancer (e.g., hardware or often in cloud services as a separate service), even the popular Nginx web server has such a possibility. But we'll take care of one of the most popular software in this area, &lt;strong&gt;HAProxy&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;OK, we have our servers, we have a load balancer in front, but wait a minute, if this load balancer crashes, we won't need those many web servers. After all, this is a classic SPoF (‚Äúsingle point of failure‚Äù). And where is high availability here? &lt;/p&gt;

&lt;p&gt;And here we come to the second component of our puzzle, Keepalived. How will it help us? We will duplicate the instances with the load balancer, i.e., we will have two load balancers, and thanks to Keepalived we will be able to switch between them if one of them falls. Cool? Yes üòâ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-we-need" class="anchor"&gt;
  &lt;/a&gt;
  What do we need?
&lt;/h2&gt;

&lt;p&gt;We will need to make our puzzle:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;two instances of the loadbalancer (HAProxy)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;lb1.webmastah.dev - 192.168.0.100&lt;/li&gt;
&lt;li&gt;lb2.webmastah.dev - 192.168.0.101&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;two instances for a web server (nginx)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;web1.webmastah.dev - 192.168.0.102&lt;/li&gt;
&lt;li&gt;web2.webmastah.dev - 192.168.0.103&lt;/li&gt;
&lt;li&gt;virtual IP (also known as floating IP, ask your VPS service provider about it), which will be plugged into one of the load balancer instances - 192.168.0.99&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The whole thing will eventually look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a6X31exC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mshx3g2rke7bnh3ol2bl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a6X31exC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mshx3g2rke7bnh3ol2bl.png" alt="Haproxy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-servers" class="anchor"&gt;
  &lt;/a&gt;
  WEB servers
&lt;/h2&gt;

&lt;p&gt;Let's start with the simplest thing ‚Äî preparing web servers. There is no philosophy here, we just install nginx on both servers. You can add &lt;em&gt;‚ÄúWEB 1‚Äù / ‚ÄúWEB 2‚Äù&lt;/em&gt; to the default page displayed by nginx to make the tests easier ‚Äî you can see which server is responding to your request.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lb-servers" class="anchor"&gt;
  &lt;/a&gt;
  LB servers
&lt;/h2&gt;

&lt;p&gt;Install &lt;strong&gt;HAProxy&lt;/strong&gt; and go to &lt;code&gt;/etc/haproxy/haproxy.cfg&lt;/code&gt; for edit.&lt;/p&gt;

&lt;p&gt;Two sections of this configuration are crucial: frontend and backend settings. By frontend, we mean the traffic that enters HAProxy, and by backend we mean the traffic that is pushed to the given web servers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;defaults
    log     global
    mode    tcp
    option  tcplog

frontend www
    bind 192.168.0.99:80
    default_backend nginx

backend nginx
    balance roundrobin
    mode tcp
    server web1 192.168.0.102:80 check
    server web2 192.168.0.103:80 check
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the frontend section we set our main IP where there will be incoming traffic and which IP will be interchanged between the main and backup load balancer if necessary. In the backend section we put our WEB servers.&lt;/p&gt;

&lt;p&gt;HAProxy's configuration is a topic for a completely different article, above I've focused only on the part necessary to do this tutorial, but worth adding, that we can add in the global section: &lt;code&gt;option dontlog-normal&lt;/code&gt; which will only log errors, and: &lt;code&gt;option log-health-checks&lt;/code&gt; which will help to &lt;a href="https://cbonte.github.io/haproxy-dconv/1.8/configuration.html#4-option%20log-health-checks"&gt;catch (log) stability problems&lt;/a&gt; (more about this topic can be found here: &lt;a href="https://www.haproxy.com/documentation/aloha/latest/traffic-management/lb-layer7/health-checks/"&gt;Performing Health Checks&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;We restart &lt;strong&gt;HAProxy&lt;/strong&gt; and check if it works and if everything is OK in logs. From now on, when we run our main IP we should see the pages served by WEB servers. If we have previously marked on each nginx what server number it is, we can now see how they are randomly response (they don't have to be random, there are different mechanisms of traffic separation, but this is a separate topic).&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;HAProxy&lt;/strong&gt; to be able to assign to our main IP on the second machine (the one that is currently backup) we need to allow this action by adding &lt;code&gt;net.ipv4.ip_nonlocal_bind=1&lt;/code&gt; in &lt;code&gt;/etc/sysctl.conf&lt;/code&gt; (after adding the entry reload &lt;code&gt;sysctl -p&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;At this stage, it is also worth making sure that &lt;strong&gt;HAProxy&lt;/strong&gt; boots itself after rebooting. This is dependent on your system, for Debian or Ubuntu you need an edit &lt;code&gt;/etc/default/haproxy&lt;/code&gt; and add &lt;code&gt;ENABLED=1&lt;/code&gt;, for CentOS 6 &lt;code&gt;chkconfig haproxy on&lt;/code&gt;, CentOS 7 &lt;code&gt;systemctl enable haproxy&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keepalived" class="anchor"&gt;
  &lt;/a&gt;
  Keepalived
&lt;/h2&gt;

&lt;p&gt;Okay, we already have a load balancer, in that case we have to repeat the above steps to configure LB2 in the same way. And now we can move on to the mechanism that will switch to load balancer from LB2 in case of problems with LB1.&lt;/p&gt;

&lt;p&gt;On both servers we need to configure &lt;strong&gt;Keepalived&lt;/strong&gt;. Edit &lt;code&gt;/etc/keepalived/keepalived.conf&lt;/code&gt;, on LB1 (MASTER) it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vrrp_script chk_haproxy {
    script "killall -0 haproxy"   # verify the pid existance
    interval 2                    # check every 2 seconds
    weight 2                      # add 2 points of prio if OK
}

vrrp_instance VI_1 {
    interface eth0                # interface to monitor
    state MASTER
    virtual_router_id 51          # Assign one ID for this route
    priority 101                  # 101 on master, 100 on backup
    virtual_ipaddress {
        192.168.0.99              # the virtual IP
    }
    track_script {
        chk_haproxy
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;On LB2 (SLAVE) we modify two variables: &lt;strong&gt;priority&lt;/strong&gt; and &lt;strong&gt;state&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vrrp_script chk_haproxy {
    script "killall -0 haproxy"   # verify the pid existance
    interval 2                    # check every 2 seconds
    weight 2                      # add 2 points of prio if OK
}

vrrp_instance VI_1 {
    interface eth0                # interface to monitor
    state BACKUP
    virtual_router_id 51          # Assign one ID for this route
    priority 100                  # 101 on master, 100 on backup
    virtual_ipaddress {
        192.168.0.99              # the virtual IP
    }
    track_script {
        chk_haproxy
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;How does it work? It's simple: Keepalived demons check each other to see if the other side is still &lt;em&gt;‚Äúalive‚Äù&lt;/em&gt;. In case the SLAVE server finds out that the MASTER is not responding, it assigns our main IP to the working server, taking over all the traffic. Of course, LB1 and LB2 must be in the network where multicast is running.&lt;/p&gt;

&lt;p&gt;Let's check this: let's stop HAProxy on LB1 and after a few seconds our traffic should already be served from LB2. Magic!&lt;/p&gt;

&lt;p&gt;In this situation our original diagram changes to:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RoBPPjdy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xrbg1k56oicr05eknwp2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RoBPPjdy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xrbg1k56oicr05eknwp2.png" alt="Final architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can view the communication of Keepalived demons through: &lt;code&gt;tcpdump -i &amp;lt;interface to which Keepalived&amp;gt; vrrp -c 10 -v&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;As you can see in a simple way up to an hour we can set up and configure a multi-server high availability environment. Nowadays, where we have a lot of &lt;em&gt;‚ÄúVPS in cloud‚Äù&lt;/em&gt; services with a basic package for $5, we can run pretty good scaled production environment at a very low cost. By adding some automation in the configuration and in setting up new VPS instances, we can maintain a very flexible and efficient environment for really little money, which, contrary to appearances, may be enough for a very, very long development of our project. It has never been so easy and so cheap!&lt;/p&gt;

</description>
      <category>devops</category>
      <category>linux</category>
      <category>cloud</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>üìΩ Presentador: Build a presentation by writing Markdown</title>
      <author>Kostas Bariotis</author>
      <pubDate>Sun, 13 Dec 2020 17:00:13 +0000</pubDate>
      <link>https://dev.to/kbariotis/presentador-an-opinionated-presentation-framework-5cci</link>
      <guid>https://dev.to/kbariotis/presentador-an-opinionated-presentation-framework-5cci</guid>
      <description>&lt;p&gt;More often than not, when I'm creating a presentation, I find myself being distracted on each slide by the looks of it and start editing and altering the fonts and colors and sizes.&lt;/p&gt;

&lt;p&gt;All I want is to write a presentation and make my points. That's why I built &lt;a href="https://www.presentador.dev"&gt;Presentador&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;üìΩ With Presentador, you write your presentation in Markdown files and it will produce a beautiful website. No code or configuration required.&lt;/p&gt;

&lt;p&gt;It's easy! Let me show you how:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#write-your-presentation" class="anchor"&gt;
  &lt;/a&gt;
  Write your presentation
&lt;/h2&gt;

&lt;p&gt;Create a folder and start writing your presentation in Markdown files. Create one file for each slide and name them after the order you want them to take, e.g. &lt;code&gt;1.md&lt;/code&gt;, &lt;code&gt;2.md&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;Use regular Markdown. Presentador will parse each slide and assign a predefined layout to each of them based on the elements in them. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you find a combination of elements that could be presented differently, &lt;a href="https://github.com/kbariotis/presentador/issues"&gt;please open an issue&lt;/a&gt;. üëç&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-your-presentation" class="anchor"&gt;
  &lt;/a&gt;
  Build your presentation
&lt;/h2&gt;

&lt;p&gt;Run:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;gt; npx presentador build -d FOLDER_NAME&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and Presentador will produce a website ready to be hosted anywhere you want. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;While developing your presentation, run &lt;code&gt;npx presentador serve -d FOLDER_NAME&lt;/code&gt; for instant changes while you're editing it.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That's it!&lt;/p&gt;

&lt;p&gt;Head over to &lt;a href="https://www.presentador.dev"&gt;https://www.presentador.dev&lt;/a&gt; to see it in action. üôÇ&lt;/p&gt;

&lt;p&gt;Let me know what you think, I really need your feedback to make Presentador better.&lt;/p&gt;

&lt;p&gt;Also, Presentador is open source. Let's build it together. ü§ù &lt;/p&gt;

</description>
      <category>opensource</category>
    </item>
    <item>
      <title>Working With an HTML Element's Position Onscreen in Vanilla JavaScript</title>
      <author>Nathan Pasko</author>
      <pubDate>Sun, 13 Dec 2020 16:55:17 +0000</pubDate>
      <link>https://dev.to/sprite421/working-with-an-html-element-s-position-onscreen-in-vanilla-javascript-436h</link>
      <guid>https://dev.to/sprite421/working-with-an-html-element-s-position-onscreen-in-vanilla-javascript-436h</guid>
      <description>&lt;p&gt;HTML elements move around the screen because of the way we scroll documents on the web. Furthermore, embracing responsiveness with regards to screen size means that elements might change size and position depending on context. These are a couple reasons you might want to look at an HTML element's position onscreen using JavaScript. Below we'll discuss the basics of how we can work with element position onscreen. Though these techniques, like anything on the web, might be implemented differently from browser to browser, we can use them to begin working with an element's position onscreen.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-viewport" class="anchor"&gt;
  &lt;/a&gt;
  The Viewport
&lt;/h1&gt;

&lt;p&gt;For starters, we need to understand what the viewport is. &lt;strong&gt;The viewport is the part of a web page that's visible onscreen.&lt;/strong&gt; The beginning or the end of the document might have been scrolled offscreen, but the viewport shows us the part of the document that we're currently scrolled to.&lt;/p&gt;

&lt;p&gt;We might be interested in grabbing references to the viewport's height and weight in our JavaScript. A good way to do this is accessing &lt;code&gt;window.innerHeight&lt;/code&gt; and &lt;code&gt;window.innerWidth&lt;/code&gt;. These properties provide the viewport dimensions in pixels.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Grab pixel dimensions of the viewport&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;viewportHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;viewportWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Of course, the viewport's dimensions can change quite easily! For example, users might resize the browser window or change the orientation of their phone from portrait to landscape. You may wish to set up a pair of &lt;strong&gt;event listeners&lt;/strong&gt; to keep your viewport dimension variables current.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Wrap viewport check in its own function&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;checkViewportSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;viewportHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHeight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;viewportWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerWidth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;viewportHeight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;h x&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;viewportWidth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;w&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Now we'll assign this to events&lt;/span&gt;

&lt;span class="c1"&gt;// Set event listener for window resize&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;resize&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;checkViewportSize&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;// Set event listener for device orientation change&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;orientationchange&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;checkViewportSize&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;em&gt;CSS Note!&lt;/em&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;The CSS length units &lt;code&gt;vh&lt;/code&gt; and &lt;code&gt;vw&lt;/code&gt; refer to the viewport's height and width respectively. You can use the viewport's size by employing these units in your stylesheet! &lt;code&gt;1vh&lt;/code&gt; is 1% of the height of the viewport; &lt;code&gt;80vw&lt;/code&gt; is 80% of the width of the viewport.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#finding-an-elements-position-in-the-viewport" class="anchor"&gt;
  &lt;/a&gt;
  Finding an Element's Position in the Viewport
&lt;/h1&gt;

&lt;p&gt;Knowing the dimensions of the viewport is more useful once we start to check an HTML element's position relative to the viewport. For this we can use &lt;code&gt;Element.getBoundingClientRect()&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-the-position-data" class="anchor"&gt;
  &lt;/a&gt;
  Getting the Position Data
&lt;/h2&gt;

&lt;p&gt;Calling &lt;code&gt;getBoundingClientRect()&lt;/code&gt; on an element will return data about its size and position relative to the viewport. The data is wrapped in a DOMRect object that provides the element's &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; positions in the viewport, and its &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;. It also provides measurements of the &lt;code&gt;top&lt;/code&gt; side's distance from the top of the viewport, the &lt;code&gt;bottom&lt;/code&gt; side's distance from the top of the viewport, the &lt;code&gt;left&lt;/code&gt; side's distance from the left side of the viewport, and the &lt;code&gt;right&lt;/code&gt; side's distance from the left side of the viewport. Thus, the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;left&lt;/code&gt; properties of the DOMRect will always be the same, and the &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;top&lt;/code&gt; properties should always be the same as well. &lt;/p&gt;

&lt;p&gt;To test this out, let's create an HTML element and give it the ID &lt;code&gt;target&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"target"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Target element&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now we can grab this element in our JavaScript and check its position onscreen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Grab the target element&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;target&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Get a rect object&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// The rect has all the data we want&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;By logging the DOMRect that we get from &lt;code&gt;Element.getBoundingClientRect()&lt;/code&gt;, we can see all of the target element's size and viewport-relative position data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#check-if-an-element-is-visible-in-the-viewport" class="anchor"&gt;
  &lt;/a&gt;
  Check If an Element is Visible in the Viewport
&lt;/h2&gt;

&lt;p&gt;To determine whether or not an element is currently visible within the viewport, we might want to write a little helper function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;isInViewport&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;viewportHeight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This function checks whether the element passed into it is within the viewport and returns either true or false. We can also get more granular using the same approach and logic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#check-how-far-an-element-is-scrolled-in-the-viewport" class="anchor"&gt;
  &lt;/a&gt;
  Check How Far an Element is Scrolled in the Viewport
&lt;/h2&gt;

&lt;p&gt;Divide the &lt;code&gt;top&lt;/code&gt; property by the &lt;code&gt;viewportHeight&lt;/code&gt; to determine what percentage of the screen the element is scrolled from the top. &lt;strong&gt;Zero&lt;/strong&gt; would put our element at the very top of the viewport. &lt;strong&gt;1&lt;/strong&gt; or &lt;strong&gt;100%&lt;/strong&gt; would put our element at the very bottom of the page. A negative value represents scrolling the element up beyond the top of the viewport, and a number larger than 1 would be scrolled beyond the bottom of the viewport, that is, more than 100% of the viewport height.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Function to check target element's position&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;checkTargetPosition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// get bounding client rect from element&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// grab measurements and percentage conversion&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fromTop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fraction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;viewportHeight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;percentage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fraction&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;target scroll:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fromTop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;px from top.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fraction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;percentage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;%&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Listen for scroll event and check position&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;scroll&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;checkTargetPosition&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Both the &lt;code&gt;checkTargetPosition()&lt;/code&gt; and the &lt;code&gt;isInViewport()&lt;/code&gt; functions above use the same approach of dividing the &lt;code&gt;top&lt;/code&gt; property by the viewport height and apply the same logic in the interpretation of the results.&lt;/p&gt;

&lt;p&gt;While this exercise illustrates how to check element position, firing the &lt;code&gt;checkTargetPosition()&lt;/code&gt; function constantly during scrolling is performance-heavy, and probably doesn't look too smooth. We might want to &lt;a href="https://dev.to/sprite421/borrowing-a-javascript-debounce-3m59"&gt;use an approach like debounce&lt;/a&gt; to limit how often we fire that function.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#try-it-out" class="anchor"&gt;
  &lt;/a&gt;
  Try It Out
&lt;/h1&gt;

&lt;p&gt;While the functions above illustrate checking the dimensions of the viewport and the usage of &lt;code&gt;Element.getBoundingClientRect()&lt;/code&gt;, we need a beefier sample to really demonstrate how this stuff works: we need a page with enough content that we &lt;strong&gt;can actually scroll our target element around&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Try this--HTML boilerplate with styles for readability and scrollability, and long passages of &lt;em&gt;lorem ipsum&lt;/em&gt; on either side of our target element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nf"&gt;#target&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ccc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Etiam porta sem malesuada magna mollis euismod. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Sed posuere consectetur est at lobortis. Donec id elit non mi porta gravida at eget metus. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&lt;/span&gt;Etiam porta sem malesuada magna mollis euismod. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Sed posuere consectetur est at lobortis. Donec id elit non mi porta gravida at eget metus. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&lt;/span&gt;Etiam porta sem malesuada magna mollis euismod. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Sed posuere consectetur est at lobortis. Donec id elit non mi porta gravida at eget metus. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"target"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Target element&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Etiam porta sem malesuada magna mollis euismod. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Sed posuere consectetur est at lobortis. Donec id elit non mi porta gravida at eget metus. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&lt;/span&gt;Etiam porta sem malesuada magna mollis euismod. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Sed posuere consectetur est at lobortis. Donec id elit non mi porta gravida at eget metus. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&lt;/span&gt;Etiam porta sem malesuada magna mollis euismod. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Sed posuere consectetur est at lobortis. Donec id elit non mi porta gravida at eget metus. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;// We need to reassemble our JavaScript here&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We need to be sure to keep all our JavaScript on the page.&lt;/p&gt;

&lt;p&gt;One thing you may notice as you play around with this newly-scrollable test page is that the &lt;code&gt;top&lt;/code&gt; parameter that we're working with to see how far an element is scrolled might not be as useful as a parameter that provided the location of the vertical &lt;strong&gt;center&lt;/strong&gt; of the element in question. To get that position, we would need to get half the &lt;a href="https://dev.to/sprite421/checking-the-dimensions-of-an-html-element-in-vanilla-javascript-3kpn"&gt;height of the element&lt;/a&gt; itself and add that to the &lt;code&gt;top&lt;/code&gt; value.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#put-it-to-good-use" class="anchor"&gt;
  &lt;/a&gt;
  Put It To Good Use
&lt;/h1&gt;

&lt;p&gt;Here's an idea to try out: can you make the elements on a page change CSS class as they scroll up the screen? To get started, you might create an array of objects, each detailing a scroll threshold where class changes occur.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;thresholds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;class1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;class2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;150&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;class3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;250&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Use more JavaScript to setup a function that fires on scroll and checks an object's onscreen position, then compares that to the positions in the array of thresholds and applies the appropriate class.&lt;/p&gt;

&lt;p&gt;Of course, there are JavaScript libraries that wrap up scrolling/viewport behaviors but I haven't tried them. After all, the idea of this series is to demonstrate the power of vanilla JavaScript. One final caveat before you go out into the world to use these techniques--different situations may call for a different approach. Try things out and build up a sense for when you'll need certain JavaScript tools! And always remember the importance of cross-browser testing. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Introduction to Postman Scripts</title>
      <author>Automation Bro</author>
      <pubDate>Sun, 13 Dec 2020 16:28:19 +0000</pubDate>
      <link>https://dev.to/automationbro/introduction-to-postman-scripts-1e67</link>
      <guid>https://dev.to/automationbro/introduction-to-postman-scripts-1e67</guid>
      <description>&lt;p&gt;In this post, we will do a quick introduction to Postman Scripts. Learning scripting will give you the power to automate your API collections, so it‚Äôs really important you understand how Scripting works if you want to do API automation using Postman.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-are-postman-scripts" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What are Postman Scripts?&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Postman Scripting allows you to add dynamic behavior to requests and collections by executing JavaScript code. Essentially, what you are doing is using JavaScript code to manipulate your API requests.&lt;/p&gt;

&lt;p&gt;There are 2 types of scripting you can do with Postman ‚Äì&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pre-requests scripts&lt;/li&gt;
&lt;li&gt;Test scripts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Pre-request Scripts&lt;/strong&gt; ‚Äì manipulate the data of the request before Postman sends the request&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Test Scripts&lt;/strong&gt; ‚Äì validate the response of the request by writing tests (gets executed after Postman receives the response)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-can-you-do-with-the-scripts" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What can you do with the Scripts?&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Postman Scripts allow you to change the behavior of the requests, let‚Äôs understand what that means. Using Scripts you can do some of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set or Get the variable values / parameters / headers / body data etc‚Ä¶ in the request directly&lt;/li&gt;
&lt;li&gt;Debugging (log output to the console)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let‚Äôs take a look at an example ‚Äì&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eWKuCAfx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://automationbro.com/wp-content/uploads/2020/12/image-3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eWKuCAfx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://automationbro.com/wp-content/uploads/2020/12/image-3.png" alt="Postman Scripts"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs assume you are creating a user using the POST request and then you need to fetch the id of that user in your GET request. Instead of manually copy/pasting the id, you can take advantage of scripts to do that for you.&lt;/p&gt;

&lt;p&gt;First, you can set a variable called ‚Äòid‚Äô in the &lt;strong&gt;Tests&lt;/strong&gt; script of the POST request. Then, get the variable in the &lt;strong&gt;Pre-request&lt;/strong&gt; script of the GET request and set it in the parameter.&lt;/p&gt;

&lt;p&gt;This allows us to automate this flow using Postman collection without having to worry about relying on existing data.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#check-out-the-video-below-to-learn-more-about-postman-scripts-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Check out the video below to learn more about Postman Scripts ‚Äì ‚Äì&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/UkKdwxbFzsY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#to-learn-about-api-test-automation-using-javascript-check-out-my-free-tutorial-series-here-" class="anchor"&gt;
  &lt;/a&gt;
  To learn about API Test Automation using JavaScript, check out my free tutorial series here ‚Äì
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=ZSVw3TyZur4&amp;amp;list=PL6AdzyjjD5HDR2kNRU2dA1C8ydXRAaaBV"&gt;JavaScript API Test Automation Tutorial Series&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;üìß Subscribe to my &lt;a href="https://automationbro.com/mailing-list"&gt;mailing list&lt;/a&gt; to get access to more content like this &lt;br&gt;
üëç Follow &lt;a class="comment-mentioned-user" href="https://dev.to/automationbro"&gt;@automationbro&lt;/a&gt;
 on Twitter for the latest updates&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;I love coffees! And, if this post helped you out and you would like to support my work, you can do that by clicking on the button below and buying me a cup of coffee -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/automationbro"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lUHFj71T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4aw2ub3f4qkyjk0ivwt4.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also support me by liking and sharing this content.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>postman</category>
      <category>testing</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>It‚Äôs Okay to be An Average Developer</title>
      <author>Adam Kiss</author>
      <pubDate>Sun, 13 Dec 2020 16:26:12 +0000</pubDate>
      <link>https://dev.to/adamkss/it-s-okay-to-be-an-average-developer-41ik</link>
      <guid>https://dev.to/adamkss/it-s-okay-to-be-an-average-developer-41ik</guid>
      <description>&lt;p&gt;You &lt;strong&gt;do not&lt;/strong&gt; have to code 13 hours a day.&lt;/p&gt;

&lt;p&gt;You &lt;strong&gt;do not&lt;/strong&gt; have to be up to date with the latest libraries and frameworks.&lt;/p&gt;

&lt;p&gt;You &lt;strong&gt;do not&lt;/strong&gt; have to write top libraries.&lt;/p&gt;

&lt;p&gt;You &lt;strong&gt;do not&lt;/strong&gt; have to build 3 side projects in parallel.&lt;/p&gt;

&lt;p&gt;You &lt;strong&gt;do not&lt;/strong&gt; have to be accepted at Facebook, Amazon, Google or your local hyped company.&lt;/p&gt;

&lt;p&gt;You &lt;strong&gt;do not&lt;/strong&gt; have to be a specialist in Frontend, Backend, Machine Learning, Augmented Reality whilst knowing your way through AWS, and oh, let‚Äôs not forget, also work on your Flutter and React Native side projects in the evenings!&lt;/p&gt;

&lt;p&gt;You don‚Äôt have to, because‚Ä¶&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#being-average-may-just-be-the-best-for-you" class="anchor"&gt;
  &lt;/a&gt;
  Being Average may just be The Best for You
&lt;/h1&gt;

&lt;p&gt;Employers are mostly searching for developers they can trust. For developers that can get their assigned tasks done in their own pace. For &lt;em&gt;average&lt;/em&gt; developers.&lt;/p&gt;

&lt;p&gt;Remember, there are &lt;em&gt;very few&lt;/em&gt; people that are truly exceptional. These developers, well, you can see from a thousand miles. They quickly get up the ladder and are put into tech lead roles. A lot of responsibility. Stress. Long workings hours. Would you even want that if that‚Äôs not what you were born for?&lt;/p&gt;

&lt;p&gt;The vast majority of us are average. We get our tasks done. We solve problems. And that, in most cases, &lt;strong&gt;is perfectly fine&lt;/strong&gt;!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#about-guilt" class="anchor"&gt;
  &lt;/a&gt;
  About Guilt
&lt;/h1&gt;

&lt;p&gt;We all get that &lt;em&gt;nasty&lt;/em&gt; feeling sometimes! Am I doing enough? Am I learning, building, hustling enough? Am I enough?&lt;/p&gt;

&lt;p&gt;Do &lt;strong&gt;not&lt;/strong&gt; feel guilty that you did not work on your side project on Saturday evening!&lt;/p&gt;

&lt;p&gt;Do &lt;strong&gt;not&lt;/strong&gt; feel guilty that you haven‚Äôt had the time to experiment with the latest frameworks!&lt;/p&gt;

&lt;p&gt;It‚Äôs fine!&lt;/p&gt;

&lt;p&gt;As long as you get your tasks done at your own pace, you should feel pretty darn good about yourself!&lt;/p&gt;

&lt;p&gt;As long as you are conscious enough to know that you will always need to learn new things on some occasions, do &lt;strong&gt;not&lt;/strong&gt; let the complicated and quickly changing world of programming overwhelm you.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#progress-amp-opportunities" class="anchor"&gt;
  &lt;/a&gt;
  Progress &amp;amp; Opportunities
&lt;/h1&gt;

&lt;p&gt;Take everything in at your own pace.&lt;/p&gt;

&lt;p&gt;Learn, experiment and build in your free time &lt;strong&gt;only&lt;/strong&gt; when you feel like it.&lt;/p&gt;

&lt;p&gt;Do &lt;strong&gt;not&lt;/strong&gt; do it out of obligation, as this only puts more unnecessary stress on you and won‚Äôt get you anywhere.&lt;/p&gt;

&lt;p&gt;Remember, most of the jobs are filled by average developers. You, me, the average Joe.&lt;/p&gt;

&lt;p&gt;Learn, experiment and build only out of &lt;strong&gt;fun and passion!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you liked this short opinion post, feel free to follow me and my newsletter at &lt;a href="https://adamkiss.net"&gt;https://adamkiss.net&lt;/a&gt;. I would love that!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>devjournal</category>
      <category>motivation</category>
      <category>career</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Internationalize your React App In 5 Easy Steps With React Intl</title>
      <author>Adam Kiss</author>
      <pubDate>Sun, 13 Dec 2020 16:11:34 +0000</pubDate>
      <link>https://dev.to/adamkss/internationalize-your-react-app-in-5-easy-steps-with-react-intl-3i3b</link>
      <guid>https://dev.to/adamkss/internationalize-your-react-app-in-5-easy-steps-with-react-intl-3i3b</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-internationalization" class="anchor"&gt;
  &lt;/a&gt;
  What is Internationalization?
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Internationalization&lt;/strong&gt; is the term used for making a website suitable for multiple locales (i.e. one or more places and/or languages).&lt;/p&gt;

&lt;p&gt;Internationalization is oftentimes shortened to i18n as it starts with an ‚Äúi‚Äù, ends with an ‚Äún‚Äù and there are 18 other characters in between. Developers just love their abbreviations, don‚Äôt they?&lt;/p&gt;

&lt;p&gt;A good internationalization framework should provide a decent DX (developer experience) without taking up a lot of implementation time.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#react-intl" class="anchor"&gt;
  &lt;/a&gt;
  React Intl
&lt;/h1&gt;

&lt;p&gt;The library this article presents is called &lt;strong&gt;React Intl&lt;/strong&gt;. With more than 800,000 monthly downloads it‚Äôs one of the most used tools for internationalization in the world of React.&lt;/p&gt;

&lt;p&gt;React Intl can do a lot more than just choosing messages/strings based on the locale. It can also format numbers and dates based on it! &lt;br&gt;
In this article, however, only the messages aspect of it is covered as this is what most people are mainly looking for.&lt;/p&gt;

&lt;p&gt;React Intl will now be presented in the context of a React app bootstrapped with create-react-app, using English and German as demo languages.&lt;/p&gt;

&lt;p&gt;The repository with the working code can be found here: &lt;a href="https://github.com/adamkss/react-intl-demo"&gt;https://github.com/adamkss/react-intl-demo&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-adding-the-dependencies" class="anchor"&gt;
  &lt;/a&gt;
  1. Adding the dependencies
&lt;/h2&gt;

&lt;p&gt;First of all, React Intl has to be added as a dependency by running: &lt;code&gt;yarn add react-intl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We also need one more dependency to add, and that is &lt;code&gt;extract-react-intl-messages&lt;/code&gt;. This development depndency will be used to extract the internationalized messages into their own language files. Thus, run: &lt;code&gt;yarn add -D extract-react-intl-messages&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In order for &lt;code&gt;extract-react-intl-messages&lt;/code&gt; to work, make sure to also create a &lt;code&gt;.babelrc&lt;/code&gt; file in the root of your project with the following content:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#2-creating-the-locale-specific-files" class="anchor"&gt;
  &lt;/a&gt;
  2. Creating the locale specific files
&lt;/h2&gt;

&lt;p&gt;Each locale to be supported needs to have its own file which stores the localised messages in JSON format.&lt;/p&gt;

&lt;p&gt;Create a new folder called &lt;code&gt;translations&lt;/code&gt;, and create &lt;code&gt;en.json&lt;/code&gt; and &lt;code&gt;de.json&lt;/code&gt;. Both should be, for now, empty:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Let‚Äôs also create an &lt;code&gt;index.js&lt;/code&gt; in the translations folder which will export the translations themselves:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#3-wrap-your-react-tree-with-react-intls-provider" class="anchor"&gt;
  &lt;/a&gt;
  3. Wrap your React tree with React Intl‚Äôs provider
&lt;/h2&gt;

&lt;p&gt;The React tree must be wrapped withr &lt;code&gt;react-intl&lt;/code&gt;‚Äôs &lt;code&gt;IntlProvider&lt;/code&gt; so the internationalized messages become accessible in each and every component.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;IntlProvider&lt;/code&gt; expects 2 important props: the actual &lt;code&gt;locale&lt;/code&gt; and the internationalized messages selected by the locale.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;In the above example the locale is hardcoded. In general, you should either check the browser‚Äôs default language (via the navigator object: &lt;code&gt;navigator.language&lt;/code&gt;), geo locate the user or let them simply select from a language list.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-start-defining-the-messages" class="anchor"&gt;
  &lt;/a&gt;
  4. Start defining the messages
&lt;/h2&gt;

&lt;p&gt;Each internationalized message should have an ID and a default value. Defining a default value is not mandatory, but it‚Äôs good if you start building your webpage in one language.&lt;/p&gt;

&lt;p&gt;Defining an internationalized message is as simple as using the &lt;code&gt;FormattedMessage&lt;/code&gt; component of &lt;code&gt;react-intl&lt;/code&gt;:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Let‚Äôs define a simple React component which shows this greetings message and use it in the app:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;This would show us the default message:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2o7YObiS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lhmxc7nkhge9t048iv4w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2o7YObiS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/lhmxc7nkhge9t048iv4w.png" alt="Screenshot 2020-12-13 at 13.01.41"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#5-adding-messages-in-another-language" class="anchor"&gt;
  &lt;/a&gt;
  5. Adding messages in another language
&lt;/h2&gt;

&lt;p&gt;As pointed out in the beginning of this article, all messages are stored in the language specific files (in this demo‚Äôs case &lt;code&gt;en.json&lt;/code&gt; and &lt;code&gt;de.json&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;We must use the development dependency we added (&lt;code&gt;extract-react-intl-messages&lt;/code&gt;) to fill these out with the keys (IDs) of our messages. For example, the &lt;code&gt;greetingsMessage&lt;/code&gt; we used above.&lt;/p&gt;

&lt;p&gt;For this we need to add a new script called &lt;code&gt;extract-intl&lt;/code&gt; to the &lt;code&gt;package.json&lt;/code&gt;'s scripts key right below the react-scripts:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;This script, &lt;code&gt;extract-intl&lt;/code&gt;, runs &lt;code&gt;extract-messages&lt;/code&gt; with a few arguments:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;-l&lt;/code&gt;: defines the available locales, in this demo en(universal English) and de(universal German)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-o&lt;/code&gt;: defines the location of the internationalized JSONs (&lt;code&gt;de.json&lt;/code&gt; and &lt;code&gt;en.json&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-d&lt;/code&gt;: defines the default locale, in our demo it is set to English. Based on this argument, &lt;code&gt;extract-messages&lt;/code&gt; copies the default messages we define in the code to the default locale‚Äôs JSON, in our case &lt;code&gt;en.json&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After running this command via &lt;code&gt;yarn extract-intl&lt;/code&gt;, take a look at the two JSON files:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;You can see that the default language‚Äôs localized file has been filled out with the default messages present in the code, whilst the other language file only has the keys. The values are now ready to be defined there as well!&lt;/p&gt;

&lt;p&gt;The German version of &lt;code&gt;greetingsMessage&lt;/code&gt; can be manually set by modifying &lt;code&gt;de.json&lt;/code&gt;:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now, to try it out, the German locale (&lt;code&gt;de&lt;/code&gt;) needs to be passed to &lt;code&gt;IntlProvider&lt;/code&gt;, which in turn will use all the German messages defined in &lt;code&gt;de.json&lt;/code&gt;:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;By doing this modification (swapping the locale passed to &lt;code&gt;react-intl&lt;/code&gt;), we now get the German message, without having needed to actually touch the code of the component:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vIgMGXHp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i5lq18yeyktq8gosdak0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vIgMGXHp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i5lq18yeyktq8gosdak0.png" alt="Screenshot 2020-12-13 at 13.19.01"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great! Here is a summary of what needed to be done for internationalization:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Define the languages and language files&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;&amp;lt;FormattedMessage&amp;gt;&lt;/code&gt; component with the ID of the internationalized message to get the message based on the currently selected locale&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;yarn extract-intl&lt;/code&gt; to fill out your localisation JSONs with the existing message IDs. This also automatically inserts the default messages (defined in the code) into the default language‚Äôs JSON (set in the &lt;code&gt;extract-intl&lt;/code&gt; command)&lt;/li&gt;
&lt;li&gt;Fill out the rest of the JSONs (languages) with the correct values&lt;/li&gt;
&lt;li&gt;Change the locale passed to &lt;code&gt;IntlProvider&lt;/code&gt; based on your needs (by the user‚Äôs region, manually, by the browser‚Äôs language etc.) which automatically inserts the right messages in your app from the selected locale! &lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#other-ways-to-access-the-messages" class="anchor"&gt;
  &lt;/a&gt;
  Other ways to access the messages
&lt;/h1&gt;

&lt;p&gt;Sometimes you cannot use the &lt;code&gt;&amp;lt;FormattedMessage&amp;gt;&lt;/code&gt; tag to get/define a message. Think about the situation where the title attribute has to be set on an HTML element.&lt;/p&gt;

&lt;p&gt;No worries! React Intl provides us with a hook and a HOC (higher order component you wrap your component with) that we can use to get access to the intl object (hook for functional components and a HOC, injectIntl, for class based components):&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#in-closing" class="anchor"&gt;
  &lt;/a&gt;
  In closing
&lt;/h1&gt;

&lt;p&gt;React Intl provides a clean and simple way to internationalize your application üåç. Feel free to give it a try!&lt;/p&gt;

&lt;p&gt;Thank you for reading this article all the way through, you rock!&lt;/p&gt;

&lt;p&gt;If you liked the content, I would love if you subscribed to my newsletter by visiting &lt;a href="https://adamkiss.net/"&gt;https://adamkiss.net/&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>frontend</category>
    </item>
    <item>
      <title>AdminKit - A modern Bootstrap 5 template now available in Flask and Django</title>
      <author>Sm0ke</author>
      <pubDate>Sun, 13 Dec 2020 15:12:38 +0000</pubDate>
      <link>https://dev.to/sm0ke/adminkit-a-modern-bootstrap-5-template-now-available-in-flask-and-django-5aj4</link>
      <guid>https://dev.to/sm0ke/adminkit-a-modern-bootstrap-5-template-now-available-in-flask-and-django-5aj4</guid>
      <description>&lt;p&gt;Hello Coders,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AdminKit&lt;/strong&gt;, a professional admin dashboard template based on Bootstrap 5 is now available for download in Flask and Django. The products, released under the MIT license, can be used for unlimited hobby &amp;amp; commercial products.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! Content is provided by &lt;strong&gt;&lt;a href="https://appseed.us/?ref=dev"&gt;AppSeed&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://adminkit.io/"&gt;AdminKit&lt;/a&gt; - (HTML) product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/flask-adminkit"&gt;AdminKit Flask&lt;/a&gt; - source code and &lt;a href="https://flask-adminkit.appseed-srv1.com/"&gt;LIVE Demo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/django-adminkit"&gt;AdminKit Django&lt;/a&gt; - source code and &lt;a href="https://django-adminkit.appseed-srv1.com/login/"&gt;LIVE Demo&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For support, please use Github (issues tracker) or join the &lt;a href="https://discord.gg/fZC6hup"&gt;Discord&lt;/a&gt; Server - 24/7 LIVE Service.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GXq8rV1v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/app-generator/flask-adminkit/master/media/flask-adminkit-intro.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GXq8rV1v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/app-generator/flask-adminkit/master/media/flask-adminkit-intro.gif" alt="AdminKit - Open-source Bootstrap 5 template, now available in Flask and Django."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#adminkit-ui-kit" class="anchor"&gt;
  &lt;/a&gt;
  AdminKit - UI Kit
&lt;/h2&gt;

&lt;p&gt;This modern template is released by AdminKit.io under the MIT license. The project can be downloaded directly for Github and compiled via modern tooling.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Vendor Notes&lt;/em&gt; - A professional package that comes with hundreds of UI components, forms, tables, charts, pages, and icons. Built on top of Bootstrap 5.&lt;/p&gt;

&lt;p&gt;Built with Bootstrap 5 - Built on top of the latest version of Bootstrap 5 and HTML5, which means - robust, responsive, and easy to customize.  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://adminkit.io/"&gt;AdminKit&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://adminkit.io/pricing/"&gt;AdminKit PRO&lt;/a&gt; - the premium version (more components, pages and PREMIUM support)&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#adminkit-flask" class="anchor"&gt;
  &lt;/a&gt;
  AdminKit Flask
&lt;/h2&gt;

&lt;p&gt;Flask version comes with a basic set of modules, database, authentication and deployment scripts for Docker, HEROKU and Gunicorn/Nginx stack.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/flask-adminkit"&gt;AdminKit Flask&lt;/a&gt; - sources&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://flask-adminkit.appseed-srv1.com/"&gt;AdminKit Flask&lt;/a&gt; - LIVE demo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This simple Flask starter can be complied with ease if the workstation has a Python3 environment and GIT accessible via the terminal. The steps (copied from the &lt;a href="https://github.com/app-generator/flask-adminkit/blob/master/README.md"&gt;README&lt;/a&gt; file):&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;#1 - Clone the sources&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Get the code&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/flask-adminkit.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;flask-adminkit
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;#2 - Install modules&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Virtualenv modules installation (Unix based systems)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source env&lt;/span&gt;/bin/activate
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Install modules - SQLite Database&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pip3 &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;#3 - Start the app&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Set the FLASK_APP environment variable&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;FLASK_APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;run.py
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Start the application (development mode)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# --host=0.0.0.0 - expose the app on all network interfaces (default 127.0.0.1)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# --port=5000    - specify the app port (default 5000)  &lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;flask run &lt;span class="nt"&gt;--host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0.0.0.0 &lt;span class="nt"&gt;--port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;5000
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Access the dashboard in browser: http://127.0.0.1:5000/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Once the project is up &amp;amp; running in the browser, we should see the login page. By default, the app redirects guest users to authenticate. To pass the login, we need to register a new user and use the credentials to Sign IN.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8lZl-0H0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/app-generator/flask-adminkit/master/media/flask-adminkit-screen.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8lZl-0H0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/app-generator/flask-adminkit/master/media/flask-adminkit-screen.png" alt="AdminKit - Open-Source Bootstrap 5 template, Flask version."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#adminkit-django" class="anchor"&gt;
  &lt;/a&gt;
  AdminKit - Django
&lt;/h2&gt;

&lt;p&gt;The Django version is provided with an identical feature set (full information provided in the README file):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SQLite Database, Django Native ORM&lt;/li&gt;
&lt;li&gt;Modular design, clean codebase&lt;/li&gt;
&lt;li&gt;Session-Based Authentication, Forms validation&lt;/li&gt;
&lt;li&gt;Deployment scripts: Docker, Gunicorn / Nginx&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;To compile and execute the app, please type the following commands using the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Get the code&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/django-adminkit.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;django-adminkit
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Virtualenv modules installation (Unix based systems)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source env&lt;/span&gt;/bin/activate
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Install modules - SQLite Storage&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pip3 &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Create tables&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py makemigrations
&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py migrate
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Start the application (development mode)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;python manage.py runserver &lt;span class="c"&gt;# default port 8000&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Access the web app in the browser: http://127.0.0.1:8000/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;To pass the login, please create a new user using the registration page or &lt;code&gt;createsuperuser&lt;/code&gt; command.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;AdminKit - Settings Page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RONlbbFQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/app-generator/flask-adminkit/master/media/flask-adminkit-screen-settings.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RONlbbFQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/app-generator/flask-adminkit/master/media/flask-adminkit-screen-settings.png" alt="AdminKit - Open-Source Bootstrap 5 template, settings page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;AdminKit - Google Maps Page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OCUIvPja--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/app-generator/flask-adminkit/master/media/flask-adminkit-screen-maps.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OCUIvPja--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/app-generator/flask-adminkit/master/media/flask-adminkit-screen-maps.png" alt="AdminKit - Open-Source Bootstrap 5 template, Google maps page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! For more resources please access:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;More &lt;a href="https://appseed.us/admin-dashboards/flask?ref=dev"&gt;Flask&lt;/a&gt; and &lt;a href="https://appseed.us/admin-dashboards/django?ref=dev"&gt;Django&lt;/a&gt; starters provided by AppSeed&lt;/li&gt;
&lt;li&gt;Access the full index with 300+ starters on &lt;a href="https://github.com/app-generator"&gt;Github&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Btw, my (nick) name is &lt;strong&gt;Sm0ke&lt;/strong&gt; and I'm pretty active also on &lt;a href="https://twitter.com/Sm0keDev"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>python</category>
      <category>flask</category>
      <category>django</category>
    </item>
  </channel>
</rss>
