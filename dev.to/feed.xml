<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>¿Qué es MGPanel?</title>
      <author>Eloy Manuel Chacón Martínez</author>
      <pubDate>Sun, 02 Jan 2022 03:32:02 +0000</pubDate>
      <link>https://dev.to/eloymanuelch/que-es-mgpanel-3e0d</link>
      <guid>https://dev.to/eloymanuelch/que-es-mgpanel-3e0d</guid>
      <description>&lt;p&gt;Holaaa programador... Arranco este 2022 respondiendo esta pregunta, &lt;strong&gt;¿qué es MGPanel?&lt;/strong&gt; si es primera vez que escuchas esta palabra, te felicito, porque esa curiosidad es la que nos caracteriza a nosotros los programadores, siempre estamos en búsqueda de nuevas herramientas para hacer mejor el trabajo que hacemos cada día. &lt;/p&gt;

&lt;p&gt;Directo al grano, MGPanel es un Sistema de Gestión Web o CMS como también lo conocemos en nuestro mundo, sii digamos que como wordpress, joomla o cualquier otro CMS con el que seguro has trabajado, pero con la diferencia que MGPanel fue pensado para hacer la vida más fácil al programador.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UiQLOoZ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxi4ypbzg3wx9lwxrawf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UiQLOoZ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxi4ypbzg3wx9lwxrawf.gif" alt="Image description" width="306" height="284"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¿Cómo es eso? bueno MGPanel fue creado para que los programadores que desarrollan web tengan mayor libertad para programar, porque realmente construyen todo el sitio web con sus propios html, css y javascript, es decir no funciona a base de plantillas y plugins sino que el programador desarrolla el 100% de su código teniendo más control sobre el mismo.&lt;/p&gt;

&lt;p&gt;¿y eso no es más trabajo para el programador? eso parece al principio, pero realmente las apariencias engañan y más cuando hablamos de clientes (del mundo real que piden 1000 cambios) a largo plazo, a menos que seas de los programadores que desarrollan y crean las plantillas para wordpress no tienes muchos problemas cuando el cliente pida cambios en la estructura de la plantilla, pero si ese no es tu caso, sabes que es así y te lo digo porque lo padecí muchas veces, que hacer un simple cambio en la estructura de estos otros CMS se puede convertir una tortura y mucho tiempo de ejecución.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9qw0gjnP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l18rn1fc3id0u13e0uvh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9qw0gjnP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l18rn1fc3id0u13e0uvh.gif" alt="Image description" width="498" height="498"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A que voy con esto, que mantener una sitio web, estable, con los cambios regulares que solicitan los clientes, con nuevos aplicativos (o plugins como los de otros CMS), puede convertirse en un dolor de cabeza para ti y por su puesto para el cliente, y por eso, es la razón principal que muchos programadores no son capaces de mantener clientes a largo plazo porque no es rentable para el programador, ni lo es grato para el cliente.&lt;/p&gt;

&lt;p&gt;Aquí es donde juega un papel muy importante MGPanel, ya que si el código del sitio web ha sido escrito por ti, cuando el cliente pida cambios, en cuestión de minutos y sin importar dónde estes lo puedes realizar sin problemas. Si el cliente pide un aplicativo o módulo nuevo, también lo puedes programar y agregar al sitio web activo, sin preocuparte si la versión del plugin es diferente a la del sistema o que no sean compatibles y pare de contar problemas que seguro has vivido con otros CMS, porque ahora tu mismo desarrollas los aplicativos.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u-RTXfJg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/41tbrk4q6s9hn5831hrq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u-RTXfJg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/41tbrk4q6s9hn5831hrq.png" alt="Image description" width="880" height="468"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¿Cuál es con contra de todo esto? ¡qué debes programar de verdad! aquí no se trata de arrastras y soltar que tanto daño ha hecho a los programadores, ojo esos aplicativos están bien para clientes finales o para aquellos que no quieren contratar a un programador para que le haga su sitio web, pero si tu eres programador de verdad no dejes de escribir código y darle el valor real a tu profesión.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ok6zL-jE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/urwzu0xt3snotrq4z0wz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ok6zL-jE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/urwzu0xt3snotrq4z0wz.gif" alt="Image description" width="220" height="161"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Como programador y tu colega te invito a que te animes a probar MGPanel, creando tu primer sitio aquí: &lt;a href="https://app.mgpanel.org/signup"&gt;https://app.mgpanel.org/signup&lt;/a&gt; es totalmente GRATIS, así que no hay nada que perder.&lt;/p&gt;

&lt;p&gt;Si te gustó o quieres saber más de MGPanel sígueme en DEV &lt;a class="mentioned-user" href="https://dev.to/eloymanuelch"&gt;@eloymanuelch&lt;/a&gt; o comenta este post, igualmente voy a seguir subiendo por aquí contenido de valor para tu crecimiento como programador web.&lt;/p&gt;

&lt;p&gt;¡Nos vemos!&lt;/p&gt;

&lt;p&gt;Instagram: &lt;a href="https://www.instagram.com/eloymanuelch/"&gt;@eloymanuelch&lt;/a&gt;&lt;/p&gt;

</description>
      <category>mgpanel</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Useful JavaScript Code Snippets</title>
      <author>Kiran Raj R</author>
      <pubDate>Sun, 02 Jan 2022 02:59:01 +0000</pubDate>
      <link>https://dev.to/kiranrajvjd/useful-javascript-code-snippets-4lki</link>
      <guid>https://dev.to/kiranrajvjd/useful-javascript-code-snippets-4lki</guid>
      <description>&lt;h4&gt;
  &lt;a href="#calculate-mouse-position-with-respect-to-an-element"&gt;
  &lt;/a&gt;
  Calculate mouse position with respect to an element.
&lt;/h4&gt;

&lt;p&gt;Element.getBoundingClientRect() method returns a DOMRect object. DOMRect object represents a smallest rectangle which contains the entire element including its padding and border-width, which also contain information about size of the element like the width and height and position of the element relative to the viewport.&lt;/p&gt;

&lt;p&gt;To calculate the position of mouse click event with respect to an element on which the event occur, first we need the position of the click event with respect to the main element(here it is the document). e.clientX and e.clientY will help you to get that value, it will return the x axis and y axis value with respect to the top left corner of the main element. Secondly we need to get the position of the element with respect to the main element, left and top properties of the getBoundingClientRect() method will help to get that value. Substracting the left/top values from clientX/clientY values will give the position of mouse click with respect to the element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mousedown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rectVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;rectVal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientY&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;rectVal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#get-the-position-of-an-element-relative-to-the-document"&gt;
  &lt;/a&gt;
  Get the position of an element relative to the document
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ele&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Here ScrollLeft / ScrollTop measures the width and height of the document even if some part of the document is scrolled out. &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollTop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollLeft&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#toggle-password-show-function"&gt;
  &lt;/a&gt;
  Toggle password show function
&lt;/h4&gt;

&lt;p&gt;Input type "password" make the entered text hidden by replacing each letter with an asterisk ("*") or a dot ("•"). If we change the type of the input into text we will be able to see the actual text. This approach is used to make the password text visible, we use a button, when clicked, will checks the attribute of the input field. If it is "password" we will set it to "text" and the password will be visible, when button is clicked again we will set the type back to password.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;html&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;classs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pass&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tbtn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Toggle&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="nx"&gt;JavaScript&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;passInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.pass&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggleBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.tbtn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;toggleBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inputType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;passInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputType&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;passInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputType&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;passInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#scroll-to-top-of-the-page"&gt;
  &lt;/a&gt;
  Scroll to top of the page
&lt;/h4&gt;

&lt;p&gt;ScrollTo(x,y) method cause the web page to scroll to the value specified by the method with respect to the document's top left corner. i.e. window.scrollTo(0, 0), cause the page to scroll to a position which is 0px from left and 0px from top relative to the document's top left corner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#toggle-visibility-of-an-element"&gt;
  &lt;/a&gt;
  Toggle visibility of an element
&lt;/h4&gt;

&lt;p&gt;We can remove an element from the DOM just by setting the CSS display property of the element into "none", we can create a toggle to set the display value from none to block or block to none using the conditional operator in JavaScript. Conditional operator takes three operands: a condition followed by a question mark, then an expression to execute if the condition is truth followed by a colon and then an expression to execute if the condition is false.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;visibility&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;displayType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;displayType&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#detecting-dark-mode-in-browser"&gt;
  &lt;/a&gt;
  Detecting Dark mode in browser
&lt;/h4&gt;

&lt;p&gt;First we detect if matchMedia object exists in the browser, if not that means the browser does not support dark mode. Next we need to check the current color scheme, &lt;code&gt;window.matchMedia('(prefers-color-scheme: dark)').matches&lt;/code&gt; will return true if dark mode is enabled.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isDarkMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(prefers-color-scheme: dark)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Feedback welcomed, Thanks in advance. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Hashicorp Vault | What &amp; Why? | All you need to know about Vault | Secrets management for roadrunners</title>
      <author>Tharun Shiv</author>
      <pubDate>Sun, 02 Jan 2022 02:29:08 +0000</pubDate>
      <link>https://dev.to/developertharun/hashicorp-vault-what-why-all-you-need-to-know-about-vault-secrets-management-for-roadrunners-3j1n</link>
      <guid>https://dev.to/developertharun/hashicorp-vault-what-why-all-you-need-to-know-about-vault-secrets-management-for-roadrunners-3j1n</guid>
      <description>&lt;p&gt;Video version:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4FeIlpuQY08"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Podcast version:&lt;br&gt;
&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/5Eof2mAvdsbXip66jyNYjb"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hashicorp-vault"&gt;
  &lt;/a&gt;
  Hashicorp Vault
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--raUIJUVP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2gcp6356v8m47z3tlnge.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--raUIJUVP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2gcp6356v8m47z3tlnge.PNG" alt="Mind Map" width="880" height="463"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hashicorp Vault is an opensource software from Hashicorp. Vault is used to manage secrets. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-secret"&gt;
  &lt;/a&gt;
  What is a secret?
&lt;/h3&gt;

&lt;p&gt;Secrets can be considered as anything that one uses to authenticate, authorize themselves. Secrets are also pieces of information that are private to any user. &lt;/p&gt;

&lt;p&gt;Examples of secrets:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Username, password&lt;/li&gt;
&lt;li&gt;API Tokens&lt;/li&gt;
&lt;li&gt;Database credentials&lt;/li&gt;
&lt;li&gt;TLS certificates&lt;/li&gt;
&lt;li&gt;Credit card information&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#state-of-secret-sprawl"&gt;
  &lt;/a&gt;
  State of secret sprawl
&lt;/h3&gt;

&lt;p&gt;Applications use a lot of credentials to connect to various external services like databases, message brokers &amp;amp; cloud services. These credentials tend to stay in the config files, source code, version control systems like Github, log files, and plain text files. This form of exposing the secrets and making them vulnerable to unintended access is known as 'state of secret sprawl'. Vault tries to solve this problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-vault-solve-this"&gt;
  &lt;/a&gt;
  How does Vault solve this?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_syvC_OZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0kjzc4ogayfv3gjo38p.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_syvC_OZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0kjzc4ogayfv3gjo38p.PNG" alt="Mind map" width="880" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Centralization of secrets:&lt;/strong&gt;&lt;br&gt;
Vault stores secrets in a centralized set of servers. This way, the process makes sure that the secrets are saved only at a single source and not at several places, which led to the 'state of secret sprawl'.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Access control via ACLS:&lt;/strong&gt;&lt;br&gt;
Vault provides the capability to create access policies for the users who will be authenticated &amp;amp; authorized to access the vault. The vault operator can decide what capabilities the user will have with the access that he has to the vault. For example, users with only read access to the public key can be created. Admin user who has the access to create new root certificates can be created. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Audits:&lt;/strong&gt;&lt;br&gt;
Vault logs every interaction of the users with Vault. This way, the audits are present on who generated, updated, accessed, revoked the credentials. In conventional credential management, this process is minimal or absent.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Encryption of secrets:&lt;/strong&gt;&lt;br&gt;
Vault provides several options to the user to choose the type of storage backend that the user needs, according to their use cases.  Vault makes sure to encrypt the secrets stored at rest/in transit. This makes Vault more secure as Vault is less vulnerable to the hacked data being understood.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Dynamic secrets:&lt;/strong&gt;&lt;br&gt;
Vault provides an ability to create dynamic secrets that are short-lived TTL specific to individual clients such that the credentials can be easily revoked or rotated with a minimum possible blast radius. Here, a client can be a single instance of the application that is running anywhere in the infra. The credentials can be unique to that client, managed easily, and in case the credentials are compromised, due to the short-lived TTL either the credentials expire or they can also be revoked and a new set of credentials can be provided.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Encryption as a service&lt;/strong&gt;&lt;br&gt;
When we store confidential data like credit card details, phone numbers, Govt. ID card details of the users, which are very common, we do not want to put the users at risk of data theft. In case the backend data gets compromised, the hacker will find the details in plain text. Instead, it is better to encrypt the user's data and store it in the backend. There are various programming languages with various libraries that can do this encryption and decryption. Vault provides encryption as a service, where it exposes APIs using which the user can encrypt &amp;amp; decrypt the data and store it in his backend of choice. This makes sure that Vault does the heavy lifting of managing the keys by providing them, rotating them, encrypting, and decrypting the data, thereby making sure uniformity in the cryptographic operations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. High availability:&lt;/strong&gt;&lt;br&gt;
We all are aware of how crucial secret management in an organization is. In fact, it could also turn out to be a single point of failure unless the applications cache the credentials for a while. This makes us realize that we need more than one Vault instance running to have high availability. Vault also comes with HA, where you could have three instances of Vault in which one of them is elected master. The client can query any of the nodes, and the request is proxied by Vault to the actual master node and the master node sends back the response in the same flow.&lt;/p&gt;

&lt;p&gt;In the upcoming episodes, we will look into &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The setup of Vault&lt;/li&gt;
&lt;li&gt;Deep dive into the individual features of Vault&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Links that help:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://coggle.it/diagram/YdBcEtuO1UXy-FKH/t/hashicorp-vault/cbe6352d534de9839c2b94fc6714a33d5b9948b91e4ddbab8d6f4867bcda4fd4"&gt;Link to the mind map used in this episode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.vaultproject.io"&gt;Link to Hashicorp Vault&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=VYfl-DpZ5wM"&gt;An Introduction to Hashicorp Vault by Armon&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can find more articles here: &lt;a href="https://www.tharunshiv.com"&gt;https://www.tharunshiv.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Roadrunners is a series that is aimed at delivering concepts as precisely as possible. Here, a roadrunner is referred to as a person who does things super fast &amp;amp; efficiently. Are you a roadrunner?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Thank you&lt;/p&gt;

</description>
      <category>security</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>devops</category>
    </item>
    <item>
      <title>System Design Interview Question: Designing a URL Shortening Service</title>
      <author>Arslan Ahmad</author>
      <pubDate>Sun, 02 Jan 2022 01:25:11 +0000</pubDate>
      <link>https://dev.to/arslan_ah/system-design-interview-question-designing-a-url-shortening-service-4029</link>
      <guid>https://dev.to/arslan_ah/system-design-interview-question-designing-a-url-shortening-service-4029</guid>
      <description>&lt;p&gt;&lt;em&gt;How to design a URL shortening service like TinyURL?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Software engineers usually struggle with system design interviews partly due to their lack of experience developing large-scale systems and partly due to the unstructured nature of system design interviews. Even advanced and experienced developers find system design interviews challenging since the design questions are open-ended and have no standard answer. To help with that, in my previous &lt;a href="https://designgurus.org/blog/step-by-step-guide"&gt;post&lt;/a&gt;, we discussed a step-by-step approach for solving system design interview questions. Let’s follow that approach to solve a classical system design question: Designing a URL shortening service like TinyURL.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question Statement:&lt;/strong&gt; Let’s design a URL shortening service like TinyURL. This service will provide short aliases redirecting to long URLs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-why-do-we-need-url-shortening"&gt;
  &lt;/a&gt;
  1. Why do we need URL shortening?
&lt;/h2&gt;

&lt;p&gt;URL shortening is used to create shorter aliases for long URLs. Let’s call these shortened aliases “short links.” Users are redirected to the original URL when they hit these short links. Short links save a lot of space when displayed, printed, messaged, or tweeted. Additionally, users are less likely to mistype shorter URLs.&lt;br&gt;
For example, when we shortened this page through TinyURL:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.designgurus.org/course/grokking-the-system-design-interview"&gt;https://www.designgurus.org/course/grokking-the-system-design-interview&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We got:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://tinyurl.com/vzet59pa"&gt;https://tinyurl.com/vzet59pa&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The shortened URL is nearly one-third the size of the actual URL.&lt;/p&gt;

&lt;p&gt;URL shortening is used to optimize links across devices, track individual links to analyze audience, measure ad campaigns’ performance, or hide affiliated original URLs.&lt;br&gt;
If you haven’t used tinyurl.com before, please try creating a new shortened URL and spend some time going through the various options their service offers. This will help you a lot in understanding this chapter.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-requirements-and-goals-of-the-system"&gt;
  &lt;/a&gt;
  2. Requirements and Goals of the System
&lt;/h2&gt;

&lt;p&gt;Our URL shortening system should meet the following requirements:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#functional-requirements"&gt;
  &lt;/a&gt;
  Functional Requirements:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Given a URL, our service should generate a shorter and unique alias of it. This is called a short link. This link should be short enough to be easily copied and pasted into applications.&lt;/li&gt;
&lt;li&gt;When users access a short link, our service should redirect them to the original link.&lt;/li&gt;
&lt;li&gt;Users should optionally be able to pick a custom short link for their URL.&lt;/li&gt;
&lt;li&gt;Links will expire after a standard default timespan. Users should be able to specify the expiration time.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#nonfunctional-requirements"&gt;
  &lt;/a&gt;
  Non-Functional Requirements:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Such a system should be highly available. This is required because, if our service is down, all the URL redirections will start failing.&lt;/li&gt;
&lt;li&gt;URL redirection should happen in real-time with minimal latency.&lt;/li&gt;
&lt;li&gt;Shortened links should not be guessable (not predictable).&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#extended-requirements"&gt;
  &lt;/a&gt;
  Extended Requirements:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Analytics; e.g., how many times a redirection happened?&lt;/li&gt;
&lt;li&gt;Our service should also be accessible through REST APIs by 
other services.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#3-capacity-estimation-and-constraints"&gt;
  &lt;/a&gt;
  3. Capacity Estimation and Constraints
&lt;/h2&gt;

&lt;p&gt;Our system will be read-heavy. There will be lots of redirection requests compared to new URL shortenings. Let’s assume a 100:1 ratio between read and write.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#traffic-estimates"&gt;
  &lt;/a&gt;
  Traffic estimates
&lt;/h3&gt;

&lt;p&gt;Assuming, we will have 500M new URL shortenings per month, with 100:1 read/write ratio, we can expect 50B redirections during the same period: &lt;strong&gt;100 * 500M =&amp;gt; 50B&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What would be Queries Per Second (QPS) for our system? New URLs shortenings per second: &lt;strong&gt;500 million / (30 days * 24 hours * 3600 seconds) = ~200 URLs/s&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Considering 100:1 read/write ratio, URLs redirections per second will be: &lt;strong&gt;100 * 200 URLs/s = 20K/s&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#storage-estimates"&gt;
  &lt;/a&gt;
  Storage estimates
&lt;/h3&gt;

&lt;p&gt;Let’s assume we store every URL shortening request (and associated shortened link) for 5 years. Since we expect to have 500M new URLs every month, the total number of objects we expect to store will be 30 billion: &lt;strong&gt;500 million * 5 years * 12 months = 30 billion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s assume that each stored object will be approximately 500 bytes (just a ballpark estimate–we will dig into it later). We will need 15TB of total storage: &lt;strong&gt;30 billion * 500 bytes = 15 TB&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#bandwidth-estimates"&gt;
  &lt;/a&gt;
  Bandwidth estimates
&lt;/h3&gt;

&lt;p&gt;For write requests, since we expect 200 new URLs every second, total incoming data for our service will be 100KB per second: &lt;strong&gt;200 * 500 bytes = 100 KB/s&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For read requests, since every second we expect ~20K URLs redirections, total outgoing data for our service would be 10MB per second: &lt;strong&gt;20K * 500 bytes = ~10 MB/s&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#memory-estimates"&gt;
  &lt;/a&gt;
  Memory estimates
&lt;/h3&gt;

&lt;p&gt;If we want to cache some of the hot URLs that are frequently accessed, how much memory will we need to store them? If we follow the 80–20 rule, meaning 20% of URLs generate 80% of traffic, we would like to cache these 20% hot URLs.&lt;/p&gt;

&lt;p&gt;Since we have 20K requests per second, we will be getting 1.7 billion requests per day: &lt;strong&gt;20K * 3600 seconds * 24 hours = ~1.7 billion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To cache 20% of these requests, we will need 170GB of memory: &lt;strong&gt;0.2 * 1.7 billion * 500 bytes = ~170GB&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One thing to note here is that since there will be many duplicate requests (of the same URL), our actual memory usage will be less than 170GB.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#4-system-apis"&gt;
  &lt;/a&gt;
  4. System APIs
&lt;/h2&gt;

&lt;p&gt;We can have SOAP or REST APIs to expose the functionality of our service. Following could be the definitions of the APIs for creating and deleting URLs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;createURL(api_dev_key, original_url, custom_alias=None, 
user_name=None, expire_date=None)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;br&gt;
api_dev_key (string): The API developer key of a registered account. This will be used to, among other things, throttle users based on their allocated quota.&lt;br&gt;
original_url (string): Original URL to be shortened.&lt;br&gt;
custom_alias (string): Optional custom key for the URL.&lt;br&gt;
user_name (string): Optional user name to be used in the encoding.&lt;br&gt;
expire_date (string): Optional expiration date for the shortened URL.&lt;br&gt;
&lt;strong&gt;Returns: (string)&lt;/strong&gt;&lt;br&gt;
A successful insertion returns the shortened URL; otherwise, it returns an error code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;deleteURL(api_dev_key, url_key)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where “url_key” is a string representing the shortened URL to be retrieved; a successful deletion returns ‘URL Removed’.&lt;/p&gt;

&lt;p&gt;How do we detect and prevent abuse? A malicious user can put us out of business by consuming all URL keys in the current design. To prevent abuse, we can limit users via their api_dev_key. Each api_dev_key can be limited to a certain number of URL creations and redirections per some time period (which may be set to a different duration per developer key).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-database-design"&gt;
  &lt;/a&gt;
  5. Database Design
&lt;/h2&gt;

&lt;p&gt;A few observations about the nature of the data we will store:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We need to store billions of records.&lt;/li&gt;
&lt;li&gt;Each object we store is small (less than 1K).&lt;/li&gt;
&lt;li&gt;There are no relationships between records — other than storing which user created a URL.&lt;/li&gt;
&lt;li&gt;Our service is read-heavy.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Database Schema:&lt;/strong&gt;&lt;br&gt;
We would need two tables: one for storing information about the URL mappings and one for the user’s data who created the short link.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7af3aQjr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lyu1fxdyksvkwlavo811.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7af3aQjr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lyu1fxdyksvkwlavo811.png" alt="URL Shortening DB Schema" width="463" height="174"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What kind of database should we use? Since we anticipate storing billions of rows, and we don’t need to use relationships between objects — a NoSQL store like DynamoDB, Cassandra, or Riak is a better choice. A NoSQL choice would also be easier to scale.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-basic-system-design-and-algorithm"&gt;
  &lt;/a&gt;
  6. Basic System Design and Algorithm
&lt;/h2&gt;

&lt;p&gt;The problem we are solving here is how to generate a short and unique key for a given URL.&lt;/p&gt;

&lt;p&gt;In the TinyURL example in Section 1, the shortened URL is “&lt;a href="https://tinyurl.com/vzet59pa%E2%80%9D"&gt;https://tinyurl.com/vzet59pa”&lt;/a&gt;. The last eight characters of this URL constitute the short key we want to generate. We’ll explore two solutions here:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-encoding-actual-url"&gt;
  &lt;/a&gt;
  a. Encoding actual URL
&lt;/h3&gt;

&lt;p&gt;We can compute a unique hash (e.g., MD5 or SHA256, etc.) of the given URL. The hash can then be encoded for display. This encoding could be base36 ([a-z ,0–9]) or base62 ([A-Z, a-z, 0–9]) and if we add ‘+’ and ‘/’ we can use Base64 encoding. A reasonable question would be, what should be the length of the short key? 6, 8, or 10 characters?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Using base64 encoding, a 6 letters long key would result in 64⁶ = ~68.7 billion possible strings.&lt;br&gt;
Using base64 encoding, an 8 letters long key would result in 64⁸ = ~281 trillion possible strings.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With 68.7B unique strings, let’s assume six letter keys would suffice for our system.&lt;/p&gt;

&lt;p&gt;If we use the MD5 algorithm as our hash function, it will produce a 128-bit hash value. After base64 encoding, we’ll get a string having more than 21 characters (since each base64 character encodes 6 bits of the hash value). Now we only have space for 6 (or 8) characters per short key; how will we choose our key then? We can take the first 6 (or 8) letters for the key. This could result in key duplication; to resolve that, we can choose some other characters out of the encoding string or swap some characters.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are the different issues with our solution?&lt;/strong&gt; We have the following couple of problems with our encoding scheme:&lt;br&gt;
If multiple users enter the same URL, they can get the same shortened URL, which is not acceptable.&lt;/p&gt;

&lt;p&gt;What if parts of the URL are URL-encoded? e.g., &lt;a href="http://www.designgurus.org/distributed.php?id=design"&gt;http://www.designgurus.org/distributed.php?id=design&lt;/a&gt;, and &lt;a href="http://www.designgurus.org/distributed.php%3Fid%3Ddesign"&gt;http://www.designgurus.org/distributed.php%3Fid%3Ddesign&lt;/a&gt; are identical except for the URL encoding.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Workaround for the issues:&lt;/strong&gt; We can append an increasing sequence number to each input URL to make it unique and then generate its hash. We don’t need to store this sequence number in the database. Possible problems with this approach could be an ever-increasing sequence number. Can it overflow? Appending an increasing sequence number will also impact the performance of the service.&lt;/p&gt;

&lt;p&gt;Another solution could be to append the user id (which should be unique) to the input URL. However, if the user has not signed in, we would have to ask the user to choose a uniqueness key. Even after this, if we have a conflict, we have to keep generating a key until we get a unique one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--emiqnhhB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rah0j50hq8nbu4skj623.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--emiqnhhB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rah0j50hq8nbu4skj623.png" alt="Image description" width="558" height="269"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#b-generating-keys-offline"&gt;
  &lt;/a&gt;
  b. Generating keys offline
&lt;/h3&gt;

&lt;p&gt;We can have a standalone Key Generation Service (KGS) that generates random six-letter strings beforehand and stores them in a database (let’s call it key-DB). Whenever we want to shorten a URL, we will take one of the already-generated keys and use it. This approach will make things quite simple and fast. Not only are we not encoding the URL, but we won’t have to worry about duplications or collisions. KGS will make sure all the keys inserted into key-DB are unique&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can concurrency cause problems?&lt;/strong&gt; As soon as a key is used, it should be marked in the database to ensure that it is not used again. If there are multiple servers reading keys concurrently, we might get a scenario where two or more servers try to read the same key from the database. How can we solve this concurrency problem?&lt;/p&gt;

&lt;p&gt;Servers can use KGS to read/mark keys in the database. KGS can use two tables to store keys: one for keys that are not used yet, and one for all the used keys. As soon as KGS gives keys to one of the servers, it can move them to the used keys table. KGS can always keep some keys in memory to quickly provide them whenever a server needs them.&lt;/p&gt;

&lt;p&gt;For simplicity, as soon as KGS loads some keys in memory, it can move them to the used keys table. This ensures each server gets unique keys. If KGS dies before assigning all the loaded keys to some server, we will be wasting those keys–which could be acceptable, given the huge number of keys we have.&lt;/p&gt;

&lt;p&gt;KGS also has to make sure not to give the same key to multiple servers. For that, it must synchronize (or get a lock on) the data structure holding the keys before removing keys from it and giving them to a server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What would be the key-DB size?&lt;/strong&gt; With base64 encoding, we can generate 68.7B unique six letters keys. If we need one byte to store one alpha-numeric character, we can store all these keys in:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;6 (characters per key) * 68.7B (unique keys) = 412 GB.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Isn’t KGS a single point of failure?&lt;/strong&gt; Yes, it is. To solve this, we can have a standby replica of KGS. Whenever the primary server dies, the standby server can take over to generate and provide keys.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can each app server cache some keys from key-DB?&lt;/strong&gt; Yes, this can surely speed things up. Although, in this case, if the application server dies before consuming all the keys, we will end up losing those keys. This can be acceptable since we have 68B unique six-letter keys.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How would we perform a key lookup?&lt;/strong&gt; We can look up the key in our database to get the full URL. If it’s present in the DB, issue an “HTTP 302 Redirect” status back to the browser, passing the stored URL in the “Location” field of the request. If that key is not present in our system, issue an “HTTP 404 Not Found” status or redirect the user back to the homepage.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Should we impose size limits on custom aliases?&lt;/strong&gt; Our service supports custom aliases. Users can pick any ‘key’ they like, but providing a custom alias is not mandatory. However, it is reasonable (and often desirable) to impose a size limit on a custom alias to ensure we have a consistent URL database. Let’s assume users can specify a maximum of 16 characters per customer key (as reflected in the above database schema).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tv4b8jOa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k7f329cjancoewwr92x7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tv4b8jOa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k7f329cjancoewwr92x7.png" alt="Image description" width="611" height="245"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-data-partitioning-and-replication"&gt;
  &lt;/a&gt;
  7. Data Partitioning and Replication
&lt;/h2&gt;

&lt;p&gt;To scale out our DB, we need to partition it so that it can store information about billions of URLs. Therefore, we need to develop a partitioning scheme that would divide and store our data into different DB servers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-range-based-partitioning"&gt;
  &lt;/a&gt;
  a. Range Based Partitioning
&lt;/h3&gt;

&lt;p&gt;We can store URLs in separate partitions based on the hash key’s first letter. Hence we save all the URL hash keys starting with the letter ‘A’ (and ‘a’) in one partition, save those that start with the letter ‘B’ in another partition, and so on. This approach is called range-based partitioning. We can even combine certain less frequently occurring letters into one database partition. Thus, we should develop a static partitioning scheme to always store/find a URL in a predictable manner.&lt;/p&gt;

&lt;p&gt;The main problem with this approach is that it can lead to unbalanced DB servers. For example, we decide to put all URLs starting with the letter ‘E’ into a DB partition, but later we realize that we have too many URLs that start with the letter ‘E.’&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#b-hashbased-partitioning"&gt;
  &lt;/a&gt;
  b. Hash-Based Partitioning
&lt;/h3&gt;

&lt;p&gt;In this scheme, we take a hash of the object we are storing. We then calculate which partition to use based upon the hash. In our case, we can take the hash of the ‘key’ or the short link to determine the partition in which we store the data object.&lt;/p&gt;

&lt;p&gt;Our hashing function will randomly distribute URLs into different partitions (e.g., our hashing function can always map any ‘key’ to a number between [1…256]). This number would represent the partition in which we store our object.&lt;/p&gt;

&lt;p&gt;This approach can still lead to overloaded partitions, which can be solved using &lt;a href="https://medium.com/interviewnoodle/how-to-use-consistent-hashing-in-a-system-design-interview-b738be3a1ae3"&gt;Consistent Hashing&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-cache"&gt;
  &lt;/a&gt;
  8. Cache
&lt;/h2&gt;

&lt;p&gt;We can cache URLs that are frequently accessed. We can use any off-the-shelf solution like Memcached, which can store full URLs with their respective hashes. Thus, the application servers, before hitting the backend storage, can quickly check if the cache has the desired URL.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How much cache memory should we have?&lt;/strong&gt; We can start with 20% of daily traffic and, based on clients’ usage patterns, we can adjust how many cache servers we need. As estimated above, we need 170GB of memory to cache 20% of daily traffic. Since a modern-day server can have 256GB of memory, we can easily fit all the cache into one machine. Alternatively, we can use a couple of smaller servers to store all these hot URLs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Which cache eviction policy would best fit our needs?&lt;/strong&gt; When the cache is full, and we want to replace a link with a newer/hotter URL, how would we choose? Least Recently Used (LRU) can be a reasonable policy for our system. Under this policy, we discard the least recently used URL first. We can use a Linked Hash Map or a similar data structure to store our URLs and Hashes, which will also keep track of the URLs that have been accessed recently.&lt;/p&gt;

&lt;p&gt;To further increase the efficiency, we can replicate our caching servers to distribute the load between them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can each cache replica be updated?&lt;/strong&gt; Whenever there is a cache miss, our servers would be hitting a backend database. Whenever this happens, we can update the cache and pass the new entry to all the cache replicas. Each replica can update its cache by adding the new entry. If a replica already has that entry, it can simply ignore it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2MumWxeF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v1xri3msy5hn0zbb58g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2MumWxeF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v1xri3msy5hn0zbb58g.png" alt="Image description" width="700" height="345"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-load-balancer-lb"&gt;
  &lt;/a&gt;
  9. Load Balancer (LB)
&lt;/h2&gt;

&lt;p&gt;We can add a Load balancing layer at three places in our system:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Between Clients and Application servers&lt;/li&gt;
&lt;li&gt;Between Application Servers and database servers&lt;/li&gt;
&lt;li&gt;Between Application Servers and Cache servers&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Initially, we could use a simple Round Robin load balancer that distributes incoming requests equally among backend servers. This LB is simple to implement and does not introduce any overhead. Another benefit is that if a server is dead, LB will take it out of the rotation and stop sending any traffic to it.&lt;/p&gt;

&lt;p&gt;A problem with Round Robin LB is that we do not consider the server load. As a result, if a server is overloaded or slow, the LB will not stop sending new requests to that server. To handle this, a more intelligent LB solution can be placed that periodically queries the backend server about its load and adjusts traffic based on that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-purging-or-db-cleanup"&gt;
  &lt;/a&gt;
  10. Purging or DB cleanup
&lt;/h2&gt;

&lt;p&gt;Should entries stick around forever, or should they be purged? If a user-specified expiration time is reached, what should happen to the link?&lt;/p&gt;

&lt;p&gt;If we chose to continuously search for expired links to remove them, it would put a lot of pressure on our database. Instead, we can slowly remove expired links and do a lazy cleanup. Our service will ensure that only expired links will be deleted, although some expired links can live longer but will never be returned to users.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Whenever a user tries to access an expired link, we can delete the link and return an error to the user.&lt;/li&gt;
&lt;li&gt;A separate Cleanup service can run periodically to remove expired links from our storage and cache. This service should be very lightweight and scheduled to run only when the user traffic is expected to be low.&lt;/li&gt;
&lt;li&gt;We can have a default expiration time for each link (e.g., two years).&lt;/li&gt;
&lt;li&gt;After removing an expired link, we can put the key back in the key-DB to be reused.&lt;/li&gt;
&lt;li&gt;Should we remove links that haven’t been visited in some length of time, say six months? This could be tricky. Since storage is getting cheap, we can decide to keep links forever. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cwz9DY4D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kx2nqo85loq0kup8l36a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cwz9DY4D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kx2nqo85loq0kup8l36a.png" alt="Image description" width="700" height="337"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-security-and-permissions"&gt;
  &lt;/a&gt;
  11. Security and Permissions
&lt;/h2&gt;

&lt;p&gt;Can users create private URLs or allow a particular set of users to access a URL?&lt;/p&gt;

&lt;p&gt;We can store the permission level (public/private) with each URL in the database. We can also create a separate table to store UserIDs that have permission to see a specific URL. If a user does not have permission and tries to access a URL, we can send an error (HTTP 401) back. Given that we are storing our data in a NoSQL wide-column database like Cassandra, the key for the table storing permissions would be the ‘Hash’ (or the KGS generated ‘key’). The columns will store the UserIDs of those users that have permission to see the URL.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#12-summary"&gt;
  &lt;/a&gt;
  12. Summary
&lt;/h2&gt;

&lt;p&gt;In my experience, every successful software developer has followed a systematic approach to solve a system design question during an interview. The current interview process requires us to present a reasonable solution within 45 minutes and the key to success is being organized during the system design interview. Hopefully, this step-by-step approach will help you stay on track during the interview.&lt;/p&gt;

&lt;p&gt;Please take a look at &lt;a href="https://www.designgurus.org/course/grokking-the-system-design-interview"&gt;Grokking the System Design Interview&lt;/a&gt; for more system design interview questions like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Designing a file sharing service like Google Drive or Dropbox.&lt;/li&gt;
&lt;li&gt;Designing a popular messaging service like Facebook Messenger.&lt;/li&gt;
&lt;li&gt;Designing popular social network sites like Twitter or Facebook.&lt;/li&gt;
&lt;li&gt;Designing a global video streaming service like Youtube.&lt;/li&gt;
&lt;li&gt;Designing a global ride hailing service like Uber.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To learn software architecture and practice advanced system design interview questions take a look at &lt;a href="https://www.designgurus.org/course/grokking-the-advanced-system-design-interview"&gt;Grokking the Advanced System Design Interview&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>career</category>
      <category>distributedsystems</category>
      <category>architecture</category>
      <category>beginners</category>
    </item>
    <item>
      <title>I've Been Contributing to Ruby Documentation</title>
      <author>Burdette Lamar</author>
      <pubDate>Sat, 01 Jan 2022 23:49:03 +0000</pubDate>
      <link>https://dev.to/burdettelamar/ive-been-contributing-to-ruby-documentation-3o82</link>
      <guid>https://dev.to/burdettelamar/ive-been-contributing-to-ruby-documentation-3o82</guid>
      <description>&lt;p&gt;tl;dr? -- Cut to &lt;a href="#the-chase"&gt;The Chase&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Having spent 40 years in the software industry -- as a documentor, developer, and test automator -- I can't see that any of the work I did, however relevant at the time, survives:  &lt;a href="https://www.poetryfoundation.org/poems/46565/ozymandias"&gt;Nothing beside remains&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Well, it's now almost five years since I got retired.  For the first three of those, I worked on projects of my own, blogged, posted here, and contributed some to Ruby's spec project.  As for the posts to my blog and posts here, it's amazing how quickly the search engines learn to ignore your posts and cast them into the darkness-- think &lt;a href="https://en.wikipedia.org/wiki/Redshift"&gt;red shift&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then in September 2019 I came to my senses, and started doing something that will last: contributing enhanced RDoc for &lt;a href="https://github.com/ruby/ruby"&gt;the Ruby project itself&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-chase"&gt;
  &lt;/a&gt;
  The Chase
&lt;/h3&gt;

&lt;p&gt;So far, in the Ruby documentation I've:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Added "What's Here" sections for about 20 classes and modules.&lt;/li&gt;
&lt;li&gt;Re-written the introductory material for about 15 classes and modules.&lt;/li&gt;
&lt;li&gt;Re-written entirely the methods documentation for about 15 classes.&lt;/li&gt;
&lt;li&gt;Added separate documents for bsearch, dig, and implicit conversion.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From time to time I'll post here, linking to some of these changes.&lt;/p&gt;

&lt;p&gt;Happy new year!&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rdoc</category>
      <category>documentation</category>
    </item>
    <item>
      <title>How to get a start in a software developer job, how to learn and what to know. </title>
      <author>Brian Ngamsom</author>
      <pubDate>Sat, 01 Jan 2022 23:24:16 +0000</pubDate>
      <link>https://dev.to/ngamsomset/how-to-get-a-start-in-a-software-developer-job-how-to-learn-and-what-to-know-23mh</link>
      <guid>https://dev.to/ngamsomset/how-to-get-a-start-in-a-software-developer-job-how-to-learn-and-what-to-know-23mh</guid>
      <description>&lt;p&gt;In this blog, I will explain how to get started in a software development job. In this blog, I will be able to write only in terms of my point of view as a front-end web developer so if you found something unsure about what is expecting to learn please DM me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-learn"&gt;
  &lt;/a&gt;
  What to learn?
&lt;/h2&gt;

&lt;p&gt;Well, this is a very broad question to start with. The answer would be millions of things to learn. But what you need to know is that "What is your end goal?" What do you want to do?&lt;/p&gt;

&lt;p&gt;Type of software developer jobs&lt;/p&gt;

&lt;p&gt;There are many types of software developer jobs from web developer to data science which is also included in the software field. You must be able to answer this question before you even sit down and start to work on something, as the details/knowledge that you need to know will be interestingly different. For example, most data science jobs need a foundation of Python while web development builds on JavaScript. These are two distinct languages that serve different platforms. JavaScript rules the web app, so you can't become a modern front-end developer without a solid foundation of JavaScript. Once you decided what you want to become then you move on with the next step.&lt;/p&gt;

&lt;p&gt;Build your foundation&lt;/p&gt;

&lt;p&gt;In a modern time where there are many frameworks to choose from when it comes to building a web app. It is also undeniable that you still need a solid foundation of the language itself. React, which is probably the most hype framework at the moment is a JavaScript library, to say this, you can't just jump into React while you lack foundation skills from JavaScript. React got the 'react way' of writing code but at the same time, those syntaxes are still under JavaScript rules. To be honest with you, it is not hard to learn syntaxes, you could catch it pretty quick if you know what you are going to write. For you to write a React 'comfortably', you will need to know JavaScript ES6+ because mostly you will use it all the time in React.&lt;/p&gt;

&lt;p&gt;HTML and CSS also play a big part as a front-end developer as you will need to work with the UI all the time. I hate to say this but it doesn't matter how much you hate CSS, you still need to master it because it will be your day to day work skill that you need. In a big project you won't write raw CSS, but sometimes styled-components or some other CSS frameworks. For instance, Chakra UI, Material UI and Semantic UI. All in all, you still need an understanding of how CSS works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-start"&gt;
  &lt;/a&gt;
  Where to start?
&lt;/h2&gt;

&lt;p&gt;Personally, I'd recommend "Zero To Mastery": &lt;a href="https://zerotomastery.io/"&gt;https://zerotomastery.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Why do I recommend this? This will give you the WHOLE picture of how web development works. You must have an understanding of how everything is put together before you start your journey. I'd recommend skimming through each chapter and course available for you to see which one catch your interest and then start from there. This course also contains a roadmap for which direction you will be going after you finish a certain course so you won't have to waste your time learning the thing that you do not need.&lt;/p&gt;

&lt;p&gt;After that, you will get a rough idea of what you want to do. Then you start to dig deep into a specific niche that interested you. As this is a long term journey, you better choose wisely. To put this in a perspective, I spend more than 6 months just with React before I landed my first job as a React developer. This does not include the time I spent with CSS or Javascript. I mean, I still re-visit Javascript docs all the time when I need to write something, it is totally fine to do that.&lt;/p&gt;

&lt;p&gt;From this point, I can't give you exactly where to go next. It is up to you which direction you want to go or which topic you still want to improve. And make sure that you don't limit yourself to just one learning medium. I always stick to video-based materials when I first started out but later in my journey, I found out that books and documentation also give me lots of knowledge that video can't give me. So make sure that when you get stuck at some point, allow yourself to switch around.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-much-do-i-actually-need-to-know-to-get-a-job"&gt;
  &lt;/a&gt;
  How much do I actually need to know to get a job?
&lt;/h2&gt;

&lt;p&gt;This is probably one of the most asked questions that I get or see people ask. The answer to this question is "you never know". This might sound random but I meant it. Don't forget that along your journey, it is just you, no one else. The point is you can't evaluate yourself. You can test yourself with some test platform on the internet but that doesn't mean you are not competent. It is hard when you have to answer this question to yourself while you still learning. The downside of being self-taught is there will be no one to tell you that you are ready, go out there and find a job. That doesn't mean people who went to college or university get any advantage over you. They(uni gangs) might think that once they graduate they will be ready for a job(approval). But in the real world, this is unrelated. I saw many people who grads from top tier uni and struggle to find a job, not to mention got rejected many times. So, what is the problem here?&lt;/p&gt;

&lt;p&gt;Let me tell you why. You have to understand that skills that are required to work as a software developer and skills that you obtain from uni or college don't necessarily be the same thing. In some cases, it might be different. That is a good thing about being self-taught, you can teach yourself just what you need. Just enough to get a job. Don't get me wrong here, I didn't mean to offend any uni grad that what you learn will be useless. It gives you something with our without your conscious. But I'm trying to talk about those skills that are subjective.&lt;/p&gt;

&lt;p&gt;You might get confused at this point that "so what do you mean by skills?" Let me give you a real-world example. Let's say that the company that you want to apply for build a web app for various company. The tech stack they use might be something like this&lt;/p&gt;

&lt;p&gt;Front-end: Next.js, React, Redux, Recoil, React-queries&lt;/p&gt;

&lt;p&gt;Backend: Laravel / Node&lt;/p&gt;

&lt;p&gt;Server/DB: AWS&lt;/p&gt;

&lt;p&gt;VCS: Github, Gitlab&lt;/p&gt;

&lt;p&gt;The question is when you grad from uni or college do you know any of this?&lt;/p&gt;

&lt;p&gt;Don't forget that software technologies move fast. What you think you know today might be useless or not used anymore in the next few months. So as a self-taught you choose what you have to know not someone else tells you what you have to. You cut so much time that you will spend in the uni.&lt;/p&gt;

&lt;p&gt;To conclude, be confident in yourself. This is very important as a self-taught because you will be on your own. You need to cheer up yourself, pat yourself at the back and lift yourself. Once you are confident in your skills, start applying for a job. Don't underestimate yourself. You can do much more than you think you can but you just need to be confident.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>#90DaysOfDevOps - Day 1</title>
      <author>Michael Cade</author>
      <pubDate>Sat, 01 Jan 2022 22:46:18 +0000</pubDate>
      <link>https://dev.to/michaelcade1/90daysofdevops-day-1-kn8</link>
      <guid>https://dev.to/michaelcade1/90daysofdevops-day-1-kn8</guid>
      <description>&lt;p&gt;This post originates from &lt;a href="https://github.com/MichaelCade/90DaysOfDevOps"&gt;https://github.com/MichaelCade/90DaysOfDevOps&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction-day-1"&gt;
  &lt;/a&gt;
  Introduction - Day 1
&lt;/h2&gt;

&lt;p&gt;Day 1 of our 90 days and adventure to learn a good foundational understanding of DevOps and tools that help with a DevOps mindset. &lt;/p&gt;

&lt;p&gt;This learning journey started for me a few years back but my focus then was around virtualisation platforms and cloud based technologies, I was looking mostly into Infrastructure as Code and Application configuration management with Terraform and Chef. &lt;/p&gt;

&lt;p&gt;Fast forward to March 2021, I was given an amazing oppurtunity to concentrate my efforts around the Cloud Native strategy at Kasten by Veeam. Which was going to be a massive focus on Kubernetes and DevOps and the community surrounding these technologies. I started my learning journey and quickly realised there was a very wide world aside from just learning the fundamentals of Kubernetes and Containerisation and it was then when I started speaking to the community and learning more and more about the DevOps culture, tooling and processes so I started documenting some of the areas I wanted to learn in public. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.kasten.io/devops-learning-curve"&gt;So you want to learn DevOps?&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#let-the-journey-begin"&gt;
  &lt;/a&gt;
  Let the journey begin
&lt;/h2&gt;

&lt;p&gt;If you read the above blog you will see this is a high level contents for my learning journey and I will say at this point I am no where near an expert in any of these sections but what I wanted to do was share some resources both FREE and some paid for but an option for both as we all have different circumstances. &lt;/p&gt;

&lt;p&gt;Over the next 90 days I want to document these resources and cover those foundational areas, I would love for the community to also get involved share your journey and resources so we can learn in public and help each other. &lt;/p&gt;

&lt;p&gt;You will see from the opening readme in the project repository that I have split things into sections and it is basically 12 weeks plus 6 days. The first 6 days we will explore the fundamentals of DevOps in general before diving into some of the specific areas, by no way is this list exhaustive and again would love for the community to assist in making this a useful resource. &lt;/p&gt;

&lt;p&gt;Another resource I will share at this point that I think everyone should have a good look at and maybe create your own mind map for yourself and your interest and position is the following: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://roadmap.sh/devops"&gt;DevOps Roadmap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I found this a great resource when I was creating my initial list and blog post on this topic. You can also see there are other areas that go into a lot more detail outside of the 12 topics I have listed here in this repository. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-steps-what-is-devops"&gt;
  &lt;/a&gt;
  First Steps - What is DevOps?
&lt;/h2&gt;

&lt;p&gt;There are so many blog articles and YouTube videos to list here, but as we start the 90 day challenge and we focus on spending around an hour a day learning something new or about DevOps I thought it was good to get some of the high level of "what DevOps is" down to begin. &lt;/p&gt;

&lt;p&gt;Firstly, DevOps is not a tool. You cannot buy it, it is not a software sku or an open source github repository you can download. It is also not a programming language, it is also not some dark art magic either. &lt;/p&gt;

&lt;p&gt;DevOps is a way to do smarter things in Software Development. - Hold up... But if you are not a software developer should you turn away right now and not dive into this project??? No Not at all, Stay... Because DevOps brings together a combination of software development and operations. I mentioned earlier that I was more on the VM side and that would generally fall under the Operations side of the house, but within the community there are people with all different backgrounds where DevOps is 100% going to benefit the individual, Developers, Operations and QA Engineers all can equally learn these best practices by having a better understanding of DevOps. &lt;/p&gt;

&lt;p&gt;DevOps is a set of practices that help to reach the goal of this movement: reducing the time between the ideation phase of a product and its release in production to the end-user or whomever it could be an internal team or customer. &lt;/p&gt;

&lt;p&gt;Another area we will dive into in this first week is around &lt;strong&gt;The Agile Methodology&lt;/strong&gt; DevOps and Agile are widely adopted together to achieve continuous delivery of your &lt;strong&gt;Application&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;The high level take away is with a DevOps mindset or culture its about taking a way the long drawn out software release process from potentially years to being able to drop smaller releases more frequently. The other key fundamental to take away here is it's about breaking down silos between the teams I previously mentioned, Developers, Operations and QA. &lt;/p&gt;

&lt;p&gt;From a DevOps perspective, &lt;strong&gt;Development, Testing and Deployment&lt;/strong&gt; all land with the DevOps team. &lt;/p&gt;

&lt;p&gt;The final point I will make is to make this as effective and effcient as possible we must leverage &lt;strong&gt;Automation&lt;/strong&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;I am always open to adding additional resources to these readme files as it is here as a learning tool.  &lt;/p&gt;

&lt;p&gt;My advice is to watch all of the below and hopefully you also picked something up from the text and explanations above. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Xrgk023l4lI"&gt;DevOps in 5 Minutes&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=_Gpe1Zn-1fE&amp;amp;t=43s"&gt;What is DevOps? Easy Way&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=7l_n97Mt0ko"&gt;DevOps roadmap 2022 | Success Roadmap 2022&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you made it this far then you will know if this is where you want to be or not. See you on Day 2.  &lt;/p&gt;

</description>
      <category>devops</category>
      <category>sre</category>
      <category>operations</category>
      <category>development</category>
    </item>
    <item>
      <title>Convert images to mosaics in p5.js</title>
      <author>&amp;y H. Golang (he/him)</author>
      <pubDate>Sat, 01 Jan 2022 22:22:54 +0000</pubDate>
      <link>https://dev.to/andyhaskell/convert-images-to-mosaics-in-p5js-2dlc</link>
      <guid>https://dev.to/andyhaskell/convert-images-to-mosaics-in-p5js-2dlc</guid>
      <description>&lt;p&gt;p5.js is a fun JavaScript library for drawing on an HTML5 canvas, and it has &lt;a href="https://p5js.org/get-started/"&gt;some of the clearest tutorials I have seen&lt;/a&gt;. It gives you functionality for things like image manipulation, drawing lines and shapes, displaying images, working with trigonometry, and more. And it is especially popular for &lt;a href="https://dev.to/aspittel/intro-to-generative-art-2hi7"&gt;generative art&lt;/a&gt;, such as fractals.&lt;/p&gt;

&lt;p&gt;In this tutorial, I will show you how to use p5.js to convert an image like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WJ0ggw9o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cz8m78ut9yjsiamaki9g.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WJ0ggw9o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cz8m78ut9yjsiamaki9g.jpg" alt="Photograph of large boulders on the sand at Singing Beach in Manchester By The Sea. Behind them is the Atlantic Ocean, in many shades of blue" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;to a mosaic of dots like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZTvYandq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1l2wy8sgh5y45yhm6hcg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZTvYandq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1l2wy8sgh5y45yhm6hcg.png" alt="The same photograph of Singing Beach, converted to a mosaic of dots, rather than pixels. Each dot is the color of the pixel of the original image that's located at the center of that dot" width="880" height="650"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This tutorial assumes a working knowledge of JavaScript and familiarity with pre-algebra, but prior knowledge of p5.js isn't strictly necessary. You can follow along on this by creating an account on the &lt;a href="https://editor.p5js.org/"&gt;p5.js online editor&lt;/a&gt; and logging in. The finished product can be found &lt;a href="https://editor.p5js.org/andyhaskell/sketches/fwaWSmAh_"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-a-first-canvas"&gt;
  &lt;/a&gt;
  📝 Making a first canvas
&lt;/h2&gt;

&lt;p&gt;As a basic p5.js program, let's start by making a canvas and drawing a single small dot there. We would do that by taking this code to the p5.js editor:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;createCanvas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ellipse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are starting with basic implementations two of the major functions in a p5.js program: &lt;code&gt;setup&lt;/code&gt; and &lt;code&gt;draw&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;setup&lt;/code&gt; function runs at the beginnng of a p5.js program, and what we're doing in it is calling &lt;a href="https://p5js.org/reference/#/p5/createCanvas"&gt;createCanvas&lt;/a&gt;, a built-in function from p5.js, to create a small HTML5 &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element of width 300 and height 200.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;draw&lt;/code&gt; function runs repeatedly in the JavaScript event loop, and what we're doing is calling &lt;code&gt;ellipse&lt;/code&gt; to put a circle on the canvas, with a diameter of 15 pixels and its center at point &lt;code&gt;(50, 60)&lt;/code&gt; of that canvas. Remember at school plotting points on Cartesian coordinate grids in math class? That is the same concept here with drawing on a canvas. In fact, a lot of concepts from math class can be used as tools to make cool art!&lt;/p&gt;

&lt;p&gt;Now that we've got our setup and draw functions, press play on the p5.js editor, and you should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2_BaPsPD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2x9ytz1h69mm9htikvha.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2_BaPsPD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2x9ytz1h69mm9htikvha.png" alt="Blank white canvas in the p5.js editor, with a single white circle with a black outline in its top left corner" width="880" height="404"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One key difference between the Cartesian grids in math class, and the ones in an HTML5 canvas, though, is that as you can see, point &lt;code&gt;(50, 60)&lt;/code&gt; is at the top-left of the canvas, not the bottom-left. Unlike in the graphs from math class, the y-axis on an HTML5 canvas goes from top to bottom, not bottom to top. The x-axis, though, still goes left to right.&lt;/p&gt;

&lt;p&gt;By the way, since we're only drawing our picture once rather than repeatedly (like if we were making an animated p5.js sketch), it's kind of pointless to call &lt;code&gt;draw&lt;/code&gt; repeatedly. So let's make it so we're only calling &lt;code&gt;draw&lt;/code&gt; once.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;  function setup() {
    createCanvas(300, 200);
&lt;span class="gi"&gt;+   noLoop();
&lt;/span&gt;  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By adding a call to &lt;a href="https://p5js.org/reference/#/p5/noloop"&gt;noLoop&lt;/a&gt;, now after the first time we call &lt;code&gt;draw&lt;/code&gt;, we don't call &lt;code&gt;draw&lt;/code&gt; again unless our code calls &lt;a href="https://p5js.org/reference/#/p5/redraw"&gt;redraw&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before we move on to loading an image, one other thing worth noting, circles/ellipses are not the only shape you can draw in p5. You can find code to draw other shapes, like lines, curves, rectangles, and more, in the links at &lt;a href="https://p5js.org/reference/#group-Shape"&gt;this reference&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#loading-an-image"&gt;
  &lt;/a&gt;
  📷 Loading an image
&lt;/h2&gt;

&lt;p&gt;We've got our canvas made, but now we need a way of loading the image we're editing.&lt;/p&gt;

&lt;p&gt;First, in the p5 editor, left of the &lt;code&gt;sketch.js&lt;/code&gt; filename, click the right arrow to pop our the "sketch files" panel, click the down triangle on the line that says "sketch files", select "upload file" in the dropdown, and then upload your image.&lt;/p&gt;

&lt;p&gt;Now, to use the image, add the following code to the p5.js editor, adding a &lt;code&gt;preload&lt;/code&gt; function and replacing the &lt;code&gt;setup&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;preload&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;loadImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./beach.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;createCanvas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;noLoop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;preload&lt;/code&gt; function runs before &lt;code&gt;setup&lt;/code&gt; to load any assets needed for our p5.js program. What we're doing in our preload function is calling p5.js's &lt;a href="https://p5js.org/reference/#/p5/loadImage"&gt;loadImage&lt;/a&gt; function to load an image, represented in JavaScript as a &lt;a href="https://p5js.org/reference/#/p5.Image"&gt;p5.Image&lt;/a&gt; object, that we can manipulate. We store that Image in the &lt;code&gt;img&lt;/code&gt; global variable. Note that if you're using an image besides &lt;code&gt;beach.jpg&lt;/code&gt;, you'll want to change the name of the image you're loading in &lt;code&gt;loadImage&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, in &lt;code&gt;setup&lt;/code&gt;, we call &lt;code&gt;createCanvas&lt;/code&gt; like before, but now we use the &lt;code&gt;Image&lt;/code&gt; object to load the image. We then retrieve the image's width and height so the canvas we make is now the same size as the image.&lt;/p&gt;

&lt;p&gt;Now that we've got the image's width and height, and a canvas made in that size, we're going to switch over to drawing the dots on our mosaic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#plotting-the-dots"&gt;
  &lt;/a&gt;
  🐆 Plotting the dots
&lt;/h2&gt;

&lt;p&gt;Circling back to our &lt;code&gt;draw&lt;/code&gt; function, let's replace that function's entire code with this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;drawMosaic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;drawMosaic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dotRadius&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// [TODO] Add code to put the dots on the mosaic!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just like how in programming languages like Go, it's a good idea to have the &lt;code&gt;main&lt;/code&gt; relatively simple, I like having my &lt;code&gt;draw&lt;/code&gt; function be just a one-liner that calls the function that does the bulk of the action. We're going to have &lt;code&gt;drawMosaic&lt;/code&gt; be the central function of this program; it takes in the radius we want each dot to be, and it will be in charge of drawing all our dots.&lt;/p&gt;

&lt;p&gt;We want dots all over the picture, so let's break up the image into columns; each column will be about 1.5 times the width of a dot (3 times the radius), and will be filled top to bottom with dots. So we'll need to know:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How many columns the image will have&lt;/li&gt;
&lt;li&gt;With that knowledge, how to draw a column.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's start by just displaying a vertical line for each column. We'll get rid of the line later, but for now this is helpful as scaffolding, so if something is off about how we render the dots, such as what size they are, or where the dots are drawn, we can figure out what's being drawn in a given column relative to that column's lines.&lt;/p&gt;

&lt;p&gt;So let's add these functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;columnWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dotRadius&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dotRadius&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numberOfColumns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dotRadius&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;columnWidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dotRadius&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;drawColumnDots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dotRadius&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;offsetX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// [TODO] Replace the line with a column of dots&lt;/span&gt;
  &lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;offsetX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;offsetX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;drawMosaic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dotRadius&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;numberOfColumns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dotRadius&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;offsetX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;columnWidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dotRadius&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;drawColumnDots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dotRadius&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;offsetX&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's our functions so far:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;columnWidth&lt;/code&gt; is a helper function to get the width of a column. We have a column be triple the radius of a dot, so that we give each dot a bit of wiggle room as to where it will be drawn.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;numberOfColumns&lt;/code&gt; tells us how many columns of dots we can fit in the picture. Which is the width of the image divided by the width of a column.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;drawColumnDots&lt;/code&gt; will be in charge of adding all the dots to a given column, starting at the x-coordinate &lt;code&gt;offsetX&lt;/code&gt; we pass in and ending at &lt;code&gt;offsetX + dotRadius&lt;/code&gt;. For now, as scaffolding, we will just draw a straight vertical line at the left edge of the column.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;drawMosaic&lt;/code&gt; draws every column; we loop over the number of columns we have, and for each one we create a column that starts at the x-coordinate &lt;code&gt;i&lt;/code&gt; times the width of a column. For example, if we have a column width of 15, then the sixth column of dots (zero indexed, so i = 5) of the mosaic starts at an &lt;code&gt;offsetX&lt;/code&gt; of 75 pixels.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Press play on the p5.js editor, and you should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_K_t0k4C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a2jf3d38vk737as67w0z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_K_t0k4C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a2jf3d38vk737as67w0z.png" alt="p5.js editor showing an HTML5 canvas displaying several vertical 1-pixel-wide black lines, indicating the left edge of each column of dots" width="880" height="315"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But we didn't come here to draw some vertical lines, we came here to draw some dots, so let's do that!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;drawColumnDots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dotRadius&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;offsetX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// [TODO] Replace the line with a column of dots&lt;/span&gt;
  &lt;span class="nx"&gt;line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;offsetX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;offsetX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dotDiameter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;dotRadius&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dotHeightWithPadding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dotDiameter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numDotsInColumn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;dotHeightWithPadding&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;numDotsInColumn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;centerX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;offsetX&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;dotRadius&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;offsetX&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;columnWidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dotRadius&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;dotRadius&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;centerY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;dotHeightWithPadding&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;dotRadius&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;ellipse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;centerX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;centerY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dotDiameter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dotDiameter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's what happens:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, we declare variables for the diameter of a dot, and the height of each dot, with two pixels of padding so the dots aren't touching each other. We then divide the height of the image by &lt;code&gt;dotHeightWithPadding&lt;/code&gt; to get the number of dots in the column.&lt;/li&gt;
&lt;li&gt;Then, in the for loop, we will draw all the dots, from the top of the column to the bottom. First, we calculate the coordinates of the pixel at the center of the dot.

&lt;ul&gt;
&lt;li&gt;For the x-coordinate, the leftmost position a dot can be is &lt;code&gt;dotRadius&lt;/code&gt; pixels to the right of the start of the column. And the rightmost column is &lt;code&gt;dotRadius&lt;/code&gt; pixels to the left of the end of the column. So if a column is 15 pixels wide with a 5-pixel dot radius, we would randomly select an x-coordinate between 5 and 10 pixels to the right of the start of a column.&lt;/li&gt;
&lt;li&gt;For the y-coordinate, each dot is &lt;code&gt;dotHeightWithPadding&lt;/code&gt; pixels lower than the dot above it. We place the top dot's center at &lt;code&gt;dotRadius&lt;/code&gt; pixels below the top of the pixel, so that the top dots don't get cut off.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WQAvIyt1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lblzf44av9d1n3kvz09d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WQAvIyt1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lblzf44av9d1n3kvz09d.png" alt="Our HTML5 canvas. Now, in each column marked by the lines, there are black circle outlines a couple pixels apart from each other." width="224" height="176"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looks good, but we could use some randomness vertically too to so the dots aren't necessarily at the same height as the ones to the left and right of each other.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gi"&gt;+ let topY = Math.floor(random(10));
&lt;/span&gt;
  for (let i = 0; i &amp;lt; numDotsInColumn; i++) {
    let centerX = Math.floor(random(
      offsetX + dotRadius,
      offsetX + columnWidth(dotRadius) - dotRadius,
    ))

-   let centerY = i * dotHeightWithPadding + dotRadius;
&lt;span class="gi"&gt;+   let centerY = topY + i * dotHeightWithPadding + dotRadius;
&lt;/span&gt;
    ellipse(centerX, centerY, dotDiameter, dotDiameter);
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2pbojqrz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wnpa6knrxs98f0ojo1lz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2pbojqrz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wnpa6knrxs98f0ojo1lz.png" alt="Our HTML5 canvas. Now, the columns of dots start at different pixel positions" width="224" height="138"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looks good! Before we go on to fill in the colors of the columns, remove the call to &lt;code&gt;line&lt;/code&gt;, since we no longer need that piece of scaffolding.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#giving-the-dots-their-colors"&gt;
  &lt;/a&gt;
  🎨 Giving the dots their colors
&lt;/h2&gt;

&lt;p&gt;The last step of drawing our mosaic is to color the dots. Each dot will be the same color as the color of the pixel at the center of the dot. Here's how we would do that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dotColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;centerX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;centerY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;noStroke&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dotColor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;ellipse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;centerX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;centerY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dotDiameter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dotDiameter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's what happens:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, we use &lt;code&gt;Image.get&lt;/code&gt; to retrieve the color of the pixel at the coordinates &lt;code&gt;(centerX, centerY)&lt;/code&gt;. This is represented as an array of 4 numbers: red, green, blue, and alpha-transparency (how see-through a pixel is).&lt;/li&gt;
&lt;li&gt;We call &lt;a href="https://p5js.org/reference/#/p5/nostroke"&gt;noStroke&lt;/a&gt; to remove the outline on the dots, and we call &lt;a href="https://p5js.org/reference/#/p5/fill"&gt;fill&lt;/a&gt; to set the color of a dot.&lt;/li&gt;
&lt;li&gt;Finally, calling &lt;code&gt;ellipse&lt;/code&gt; draws the dot in the color we selected.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Press play on the p5.js editor, and now the canvas will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0j14OaAK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3i4elxpdz6htoyscq4j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0j14OaAK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3i4elxpdz6htoyscq4j.png" alt="Our canvas, now showing all the dots from earlier, but each dot's color is taken from the image" width="880" height="601"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cool! One other thing I'd like to add though. This picture has a lot of light-colored pixels, so the dots would stand out better on a dark-colored background. So let's refactor &lt;code&gt;drawMosaic&lt;/code&gt; so that you can pick the color of the background.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;drawMosaic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;drawMosaic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dotRadius&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// ... rest of the code in the function ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We add a new parameter &lt;code&gt;backgroundColor&lt;/code&gt; to our &lt;code&gt;drawMosaic&lt;/code&gt; function, and we pass that into &lt;a href="https://p5js.org/reference/#/p5/background"&gt;background&lt;/a&gt; to draw a background. In &lt;code&gt;draw&lt;/code&gt;, I picked the color &lt;code&gt;30, 30, 30&lt;/code&gt;; since red/green/blue go from 0 to 255, this gives us a charcoal-black background color. I also made the dot radius 10 pixels instead of 5 to make the picture feel more abstract. Run the play button on the sketch, and now the mosaic looks like this!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZTvYandq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1l2wy8sgh5y45yhm6hcg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZTvYandq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1l2wy8sgh5y45yhm6hcg.png" alt="Our canvas, now showing all the dots from earlier, but each dot's color is taken from the image, and the background the dots are on is charcoal black" width="880" height="650"&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We've made a cool piece of artwork with just 46 lines of code, but we've only scratched the surface of the kinds of art you can do with p5.js. If you had fun with this, you should check out the docs for more of p5's code, other people's sketches and YouTube videos for ideas on how you can work with p5 concepts, and check out your old notes from math class to see what other kinds of math, like trigonometry, can be used to make cool artwork!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>art</category>
      <category>tutorial</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>JavaScript Event Loop</title>
      <author>Ejjraifi Hamza</author>
      <pubDate>Sat, 01 Jan 2022 21:37:11 +0000</pubDate>
      <link>https://dev.to/ejjraifihamza/javascript-event-loop-3kd4</link>
      <guid>https://dev.to/ejjraifihamza/javascript-event-loop-3kd4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#javascript-singlethreaded-model"&gt;
  &lt;/a&gt;
  JavaScript single-threaded model
&lt;/h2&gt;

&lt;p&gt;everyone knows that JavaScript is a single-threaded programming language. In other words, JavaScript can do only one thing at a single point in time.&lt;/p&gt;

&lt;p&gt;The JavaScript engine executes a script from the top of the file and works its way down. JavaScript creates the execution contexts and pushes and pops functions onto and off the call stack in the execution process.&lt;/p&gt;

&lt;p&gt;If a function takes a long time to execute, you cannot interact with the web browser during the function’s execution because the page hangs.&lt;/p&gt;

&lt;p&gt;A function that takes a long time to complete is called a blocking function. Technically, a blocking function blocks all the interactions of the webpage, such as mouse click.&lt;/p&gt;

&lt;p&gt;A blocking function can be a function that downloads a file from a remote server or calls an API from an external server.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-of-blocking-function"&gt;
  &lt;/a&gt;
  Example of blocking function
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// emulate time consuming task&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Start script...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Download a file.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Done!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So what we have here is a big &lt;code&gt;while&lt;/code&gt; loop inside the task() function to emulates a time-consuming task, the task() function is a blocking function, why ? because it takes a long time to complete.&lt;/p&gt;

&lt;p&gt;And therefore the script will hangs for a few seconds (depending on how fast the computer is) and issues the following output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Start&lt;/span&gt; &lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nx"&gt;Download&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nx"&gt;Done&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to execute the script, the JavaScript engine places the first call &lt;code&gt;console.log()&lt;/code&gt; on top of the stack and executes it. Then, JavaScript places the &lt;code&gt;task()&lt;/code&gt; function on top of the call stack and executes the function.&lt;/p&gt;

&lt;p&gt;However, it’ll take a while to complete the &lt;code&gt;task()&lt;/code&gt; function. Therefore, you’ll see the message &lt;code&gt;'Download a file.'&lt;/code&gt; a little time later. After the &lt;code&gt;task()&lt;/code&gt; function completes, the JavaScript engine pops it off the call stack.&lt;/p&gt;

&lt;p&gt;Finally, the JavaScript engine places the last call to the &lt;code&gt;console.log('Done!')&lt;/code&gt; function and executes it, which will be very fast.&lt;/p&gt;

&lt;p&gt;The following figure illustrates this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8WiBGM-i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/749du6idwe6psfvmnc26.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8WiBGM-i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/749du6idwe6psfvmnc26.gif" alt="Blocking Function" width="880" height="452"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#callbacks-to-the-rescue"&gt;
  &lt;/a&gt;
  Callbacks to the rescue
&lt;/h2&gt;

&lt;p&gt;To prevent a blocking function from blocking other activities, you typically put it in a callback function for execution later&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// emulate time consuming task&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Start script...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Download a file.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Done!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, you’ll see the message &lt;code&gt;'Start script...'&lt;/code&gt; and &lt;code&gt;'Done!'&lt;/code&gt; immediately. And after that, you’ll see the message &lt;code&gt;'Download a file'&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here’s the output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Start&lt;/span&gt; &lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nx"&gt;Done&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="nx"&gt;Download&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you call the &lt;code&gt;setTimeout()&lt;/code&gt; function, make a fetch request or click a button, the web browser can do these activities concurrently and asynchronously.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;setTimeout()&lt;/code&gt;, fetch requests, and DOM events are parts of the Web APIs of the web browser.&lt;/p&gt;

&lt;p&gt;In our example, when you call the &lt;code&gt;setTimeout()&lt;/code&gt; function, the JavaScript engine places it on the call stack, and the Web API creates a timer that expires in 1 second.&lt;/p&gt;

&lt;p&gt;Then JavaScript engine place the task() function is into a queue called a callback queue or a task queue.&lt;/p&gt;

&lt;p&gt;The following figure illustrates this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--peVvdZL_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q628qtq4gmwjalefu1qp.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--peVvdZL_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q628qtq4gmwjalefu1qp.gif" alt="Event Loop" width="880" height="485"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The event loop is a constantly running process that monitors both the callback queue and the call stack.&lt;/p&gt;

&lt;p&gt;The event loop before move task() from the callback queue, first ask call stack if empty, if not the event loop waits until it is, however if empty then he moves task() to the call stack.&lt;/p&gt;

&lt;p&gt;that's it for call stack, next post will be about hoisting&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;In this post, you have learned about the JavaScript event loop, a constantly running process that coordinates the tasks between the call stack and callback queue to achieve concurrency.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>A Minimal Pluggy Example</title>
      <author>Waylon Walker</author>
      <pubDate>Sat, 01 Jan 2022 21:21:42 +0000</pubDate>
      <link>https://dev.to/waylonwalker/a-minimal-pluggy-example-3mp0</link>
      <guid>https://dev.to/waylonwalker/a-minimal-pluggy-example-3mp0</guid>
      <description>&lt;p&gt;Pluggy makes it so easy to allow users to modify the behavior of a framework without thier specific feature needing to be implemented in the framework itself.&lt;/p&gt;

&lt;p&gt;I've really been loving the workflow of frameworks built with pluggy.  The first one that many python devs have experience with is pytest.  I've never created a pytest plugin, and honestly at the time I looked into how they were made was a long time ago and it went over my head.  I use a data pipelining framework called kedro, and have build many plugins for it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-a-plugin"&gt;
  &lt;/a&gt;
  Making a plugin
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;super easy to do&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As long as the framework document the hooks that are available and what it passes to them it's so easy to make a plugin.  Its just importing the&lt;br&gt;
&lt;code&gt;hook_impl&lt;/code&gt;, making a class with a function that represents one of the hooks,&lt;br&gt;
and decorating it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;hook_impl&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LowerHook&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;hook_impl&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pluggy_example&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;pluggy_example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pluggy_example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#installing-pluggy"&gt;
  &lt;/a&gt;
  installing pluggy
&lt;/h2&gt;

&lt;p&gt;Installing pluggy is just like most python applications, install python, make your virtual environment, and pip install it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;pluggy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#making-a-plugin-driven-framework"&gt;
  &lt;/a&gt;
  Making a plugin driven framework
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;much less easy&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At the time I started playing with pluggy, their docs were less complete, or I was just plain blind, but this was a huge part of the docs that were missing for me that now actually appear to be there.  But to get some more examples out there, here is my version.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pluggy&lt;/span&gt;

&lt;span class="c1"&gt;# These don't need to match
&lt;/span&gt;&lt;span class="n"&gt;HOOK_NAMESPACE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"pluggy_example"&lt;/span&gt; &lt;span class="n"&gt;PROJECT_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"pluggy_example"&lt;/span&gt;

&lt;span class="n"&gt;hook_spec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pluggy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HookspecMarker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HOOK_NAMESPACE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;hook_impl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pluggy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HookimplMarker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HOOK_NAMESPACE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PluggyExampleSpecs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""
    This is where we spec out our frameworks hooks, I like to refer to them as
    the lifecycle.  Each of these functions is a hook that we are exposing to
    our users, with the kwargs that we expect to pass them.
    """&lt;/span&gt;
    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;hook_spec&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pluggy_example&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'PluggyExample'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;"""
        The first hook that runs.
        """&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;hook_spec&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pluggy_example&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'PluggyExample'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;"""
        The last hook that runs.
        """&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PluggyExample&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""
    This may not need to be a class, but I wanted a container where all the
    hooks had access to the message.  This made sense to me to do as a class.
    """&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hooks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;"""
        Setup the plugin manager and register all the hooks.
        """&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_pm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pluggy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PluginManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PROJECT_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_hookspecs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PluggyExampleSpecs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hooks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hooks&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_register_hooks&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_register_hooks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;hook&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hooks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hook&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;"""
        Run the hooks in the documented order, and pass in any kwargs the hook
        needs access to.  Here I am storing the message within this same class.
        """&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hook&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pluggy_example&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_pm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hook&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pluggy_example&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DefaultHook&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""
    These are some hooks that run by default, maybe these are created by the
    framework author.
    """&lt;/span&gt;
    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;hook_impl&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pluggy_example&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;pluggy_example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pluggy_example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;hook_impl&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pluggy_example&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pluggy_example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""
    The user of this framework can apply the hook in their own code without
    changing the behavior of the framework, but the library has
    implemented it's own default hooks.
    """&lt;/span&gt;
    &lt;span class="n"&gt;pe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PluggyExample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"hello world"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;hooks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;DefaultHook&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#modifying-behavior"&gt;
  &lt;/a&gt;
  Modifying behavior
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;as a user of PluggyExample&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now Lets pretent the user of this library likes everything about it, except, they don't like all the shouting.  They can either search for a plugin on Google, github, or pypi and find one, or make it themself. the magic here is that they do not need to have the package maintainer patch the core library itself.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LowerHook&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""
    This is a new hook that a plugin author has created to modify the behavior
    of the framework to lowercase the message.
    """&lt;/span&gt;
    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;hook_impl&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pluggy_example&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;pluggy_example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pluggy_example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pluggy_example&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PluggyExample&lt;/span&gt; &lt;span class="n"&gt;pe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PluggyExample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"hello world"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;hooks&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;DefaultHook&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;LowerHook&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#running-pluggy-example"&gt;
  &lt;/a&gt;
  Running Pluggy Example
&lt;/h2&gt;

&lt;p&gt;Here is a short clip of me running the pluggy example in it's default state, then adding the LowerHook, and running a second time.&lt;/p&gt;


      
      
      Sorry, your browser doesn't support embedded videos.
     

</description>
      <category>python</category>
    </item>
    <item>
      <title>2021 pnpm recap</title>
      <author>Zoltan Kochan</author>
      <pubDate>Sat, 01 Jan 2022 21:18:19 +0000</pubDate>
      <link>https://dev.to/pnpm/2021-pnpm-recap-43a3</link>
      <guid>https://dev.to/pnpm/2021-pnpm-recap-43a3</guid>
      <description>&lt;p&gt;It is the end of the year and it was a good year for pnpm, so let's see how it went.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#download-stats"&gt;
  &lt;/a&gt;
  Download stats
&lt;/h3&gt;

&lt;p&gt;My goal this year was to beat Bower by the number of downloads. We were able to achieve this goal &lt;a href="https://npm-stat.com/charts.html?package=pnpm&amp;amp;package=bower&amp;amp;from=2021-01-01&amp;amp;to=2021-12-29"&gt;in November&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RMhXIuiQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pnpm.io/img/blog/pnpm-vs-bower-stats.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RMhXIuiQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pnpm.io/img/blog/pnpm-vs-bower-stats.png" alt="" width="880" height="351"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;pnpm was downloaded about &lt;a href="https://npm-stat.com/charts.html?package=pnpm&amp;amp;from=2016-12-01&amp;amp;to=2021-12-29"&gt;3 times more&lt;/a&gt; in 2021 than in 2020:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bcdv60W---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pnpm.io/img/blog/download-stats-2021.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bcdv60W---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pnpm.io/img/blog/download-stats-2021.png" alt="" width="880" height="353"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;These stats don't even measure all the different ways that pnpm may be installed!&lt;br&gt;
They only measure the downloads of the &lt;a href="https://www.npmjs.com/package/pnpm"&gt;pnpm npm package&lt;/a&gt;. This year we also added compiled binary versions of pnpm, which are shipped differently.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#docs-visits"&gt;
  &lt;/a&gt;
  Docs visits
&lt;/h3&gt;

&lt;p&gt;We collect some unpersonalized stats from our docs using Google Analytics.&lt;br&gt;
In 2021, sometimes we had more than 2,000 unique visitors a week.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gxKJT0UP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pnpm.io/img/blog/ga-unique-visits-2021.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gxKJT0UP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pnpm.io/img/blog/ga-unique-visits-2021.png" alt="" width="665" height="509"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Most of our users are from the United States and China.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KLYFLObG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pnpm.io/img/blog/countries-2021.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KLYFLObG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pnpm.io/img/blog/countries-2021.png" alt="" width="585" height="498"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#github-stars"&gt;
  &lt;/a&gt;
  GitHub stars
&lt;/h3&gt;

&lt;p&gt;Our &lt;a href="https://github.com/pnpm/pnpm"&gt;main GitHub repository&lt;/a&gt; received +5,000 stars this year.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LyXozx5B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pnpm.io/img/blog/stars-2021.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LyXozx5B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pnpm.io/img/blog/stars-2021.png" alt="" width="880" height="771"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-users"&gt;
  &lt;/a&gt;
  New users
&lt;/h3&gt;

&lt;p&gt;Our biggest new user this year is &lt;a href="https://github.com/pnpm/pnpm.github.io/pull/89"&gt;Bytedance&lt;/a&gt; (the company behind TikTok).&lt;/p&gt;

&lt;p&gt;Also, many great open-source projects started to use pnpm. Some switched to pnpm because of its great support of monorepos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/vuejs/vue-next"&gt;Vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/vitejs/vite"&gt;Vite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;and &lt;a href="https://pnpm.io/workspaces#usage-examples"&gt;others&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some switched because they like how efficient, fast, and beautiful pnpm is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Autoprefixer/status/1476226146488692736"&gt;Autoprefixer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/PostCSS/status/1470438664006258701"&gt;PostCSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Browserslist/status/1468264308308156419"&gt;Browserslist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#feature-highlights"&gt;
  &lt;/a&gt;
  Feature highlights
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#new-lockfile-format-since-v600"&gt;
  &lt;/a&gt;
  New lockfile format (since &lt;a href="https://github.com/pnpm/pnpm/releases/tag/v6.0.0"&gt;v6.0.0&lt;/a&gt;)
&lt;/h3&gt;

&lt;p&gt;One of the first and most important changes this year was the new &lt;code&gt;pnpm-lock.yaml&lt;/code&gt; format. This was a breaking change, so we had to release v6. But it was a success. The old lockfile was causing Git conflicts frequently. Since the new format was introduced, we did not receive any complaints about Git conflicts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#managing-nodejs-versions-since-v6120"&gt;
  &lt;/a&gt;
  Managing Node.js versions (since &lt;a href="https://github.com/pnpm/pnpm/releases/tag/v6.12.0"&gt;v6.12.0&lt;/a&gt;)
&lt;/h3&gt;

&lt;p&gt;We shipped a new command (&lt;code&gt;pnpm env&lt;/code&gt;) that allows to manage Node.js versions. So you may use pnpm instead of Node.js version managers like nvm or Volta.&lt;/p&gt;

&lt;p&gt;Also, pnpm is shipped as a standalone executable, so you can run it even with no Node.js preinstalled on the system.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#injecting-local-dependencies-since-v6200"&gt;
  &lt;/a&gt;
  Injecting local dependencies (since &lt;a href="https://github.com/pnpm/pnpm/releases/tag/v6.20.0"&gt;v6.20.0&lt;/a&gt;)
&lt;/h3&gt;

&lt;p&gt;You may "inject" a local dependency. By default, local dependencies are symlinked to &lt;code&gt;node_modules&lt;/code&gt; but with this new feature you may instruct pnpm to hard link the files of the package instead.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#improved-reporting-of-peer-dependency-issues-since-v6240"&gt;
  &lt;/a&gt;
  Improved reporting of peer dependency issues (since &lt;a href="https://github.com/pnpm/pnpm/releases/tag/v6.24.0"&gt;v6.24.0&lt;/a&gt;)
&lt;/h3&gt;

&lt;p&gt;Peer dependency issues used to be printed as plain text and it was hard to understand them. They are now all grouped and printed in a nice hierarchy structure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-competition"&gt;
  &lt;/a&gt;
  The competition
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#yarn"&gt;
  &lt;/a&gt;
  Yarn
&lt;/h3&gt;

&lt;p&gt;Yarn added a pnpm linker in &lt;a href="https://dev.to/arcanis/yarn-31-corepack-esm-pnpm-optional-packages--3hak#new-install-mode-raw-pnpm-endraw-"&gt;v3.1&lt;/a&gt;. So Yarn can create a similar node-modules directory structure to the one that pnpm creates.&lt;/p&gt;

&lt;p&gt;Also, the Yarn team plans to implement a content-addressable storage to be more disk space efficient.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#npm"&gt;
  &lt;/a&gt;
  npm
&lt;/h3&gt;

&lt;p&gt;The npm team decided to also adopt the symlinked node-modules directory structure that pnpm uses (related &lt;a href="https://github.com/npm/rfcs/blob/main/accepted/0042-isolated-mode.md"&gt;RFC&lt;/a&gt;).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#others"&gt;
  &lt;/a&gt;
  Others
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://twitter.com/jarredsumner/status/1473416431291174912/photo/1"&gt;Bun&lt;/a&gt; written in Zig and &lt;a href="https://github.com/voltpkg/volt"&gt;Volt&lt;/a&gt; written in Rust both claim to be faster than npm/Yarn/pnpm. I did not benchmark these new package managers yet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#future-plans"&gt;
  &lt;/a&gt;
  Future Plans
&lt;/h2&gt;

&lt;p&gt;Faster, better, best.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
    </item>
    <item>
      <title>Decorator in Ruby on Rails</title>
      <author>Sergio Turpín</author>
      <pubDate>Sat, 01 Jan 2022 21:12:21 +0000</pubDate>
      <link>https://dev.to/sturpin/decorator-in-ruby-on-rails-14kk</link>
      <guid>https://dev.to/sturpin/decorator-in-ruby-on-rails-14kk</guid>
      <description>&lt;h3&gt;
  &lt;a href="#-english-version-"&gt;
  &lt;/a&gt;
  &lt;center&gt;- English Version -&lt;/center&gt;
&lt;/h3&gt;




&lt;p&gt;Decorators provide a flexible alternative to subclassing for extending functionality. Simple! 😉&lt;/p&gt;

&lt;p&gt;There are several ways to implement it, but the easiest for me is using &lt;a href="https://rubygems.org/gems/draper"&gt;Draper gem&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-create-rails-app"&gt;
  &lt;/a&gt;
  1. Create Rails app
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; rails new decorator-rails
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-install-draper-gem"&gt;
  &lt;/a&gt;
  2. Install Draper gem
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; bundle add draper
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well, from this moment when we create a controller it will automatically create our decorator file in &lt;code&gt;app/decorator&lt;/code&gt; folder.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-create-user-scaffold"&gt;
  &lt;/a&gt;
  3. Create user scaffold
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; rails g scaffold User first_name last_name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Among other files, the file &lt;code&gt;app/decorators/user_decorator.rb&lt;/code&gt; has been created automatically.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-add-custom-method"&gt;
  &lt;/a&gt;
  4. Add custom method
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/decorators/user_decorator.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserDecorator&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Draper&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Decorator&lt;/span&gt;
  &lt;span class="n"&gt;delegate_all&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;full_name&lt;/span&gt;
    &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;last_name&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That allows behavior to be added to an individual object without affecting the behavior of other objects from the same class.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-decorate-object-in-controller"&gt;
  &lt;/a&gt;
  5. Decorate object in controller
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/users_controller.rb&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;
  &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;decorate&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-show-it-in-view"&gt;
  &lt;/a&gt;
  6. Show it in View
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;# app/views/users/show.html.erb

First name: &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first_name&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
Last name: &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;last_name&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
Full name: &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;full_name&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now your view logic has been abstracted and organized to where it should be. This will greatly help you to reduce the code in your view files.&lt;/p&gt;

&lt;p&gt;Usually it is used with &lt;strong&gt;Presenters&lt;/strong&gt;, but I prefer to do it in another post 😉&lt;/p&gt;

&lt;p&gt;🔍 &lt;strong&gt;Recommended reading&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://refactoring.guru/es/design-patterns/decorator"&gt;Refactoring GURU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Decorator_pattern"&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.thegreatcodeadventure.com/rails-refactoring-part-iii-the-decorator-pattern/"&gt;The great code adventure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for reading 🙏  &lt;/p&gt;

&lt;p&gt;🌎 &lt;a href="https://sergioturpin.es"&gt;https://sergioturpin.es&lt;/a&gt;&lt;br&gt;
📷 &lt;a href="https://instagram.com/sergioturpin"&gt;Instagram&lt;/a&gt;&lt;br&gt;
🐦 &lt;a href="https://twitter.com/sergio_turpin"&gt;Twitter&lt;/a&gt;&lt;br&gt;
🐙 &lt;a href="https://github.com/sturpin"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-versi%C3%B3n-en-espa%C3%B1ol-"&gt;
  &lt;/a&gt;
  &lt;center&gt;- Versión en Español -&lt;/center&gt;
&lt;/h3&gt;




&lt;p&gt;El patrón &lt;strong&gt;Decorator&lt;/strong&gt; nos permite poder encapsular un objeto para que podamos extender su funcionalidad antes de su instanciación, así de simple! 😉&lt;/p&gt;

&lt;p&gt;Existen muchas formas de implementarlo, pero una de las más sencillas es hacerlo con la gema &lt;a href="https://rubygems.org/gems/draper"&gt;Draper&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-creamos-la-app-de-rails"&gt;
  &lt;/a&gt;
  1. Creamos la app de Rails
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; rails new decorator-rails
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-instalamos-la-gema-draper"&gt;
  &lt;/a&gt;
  2. Instalamos la gema Draper
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; bundle add draper
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bien, a partir de este momento cuando nosotros creemos un controlador, automáticamente se creará también su decorador en el directorio &lt;code&gt;app/decorator&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-creamos-el-scaffold-de-usuario"&gt;
  &lt;/a&gt;
  3. Creamos el scaffold de usuario
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; rails g scaffold User first_name last_name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Además de otros archivos, el fichero &lt;code&gt;app/decorators/user_decorator.rb&lt;/code&gt; ha sido creado automáticamente.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-a%C3%B1adimos-un-m%C3%A9todo-personalizado"&gt;
  &lt;/a&gt;
  4. Añadimos un método personalizado
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/decorators/user_decorator.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UserDecorator&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Draper&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Decorator&lt;/span&gt;
  &lt;span class="n"&gt;delegate_all&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;full_name&lt;/span&gt;
    &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;last_name&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Esto nos permite agregar comportamiento a un objeto individual sin afectar al comportamiento de otros objetos de la misma clase.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-decoramos-el-objeto-en-el-controlador"&gt;
  &lt;/a&gt;
  5. Decoramos el objeto en el controlador
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/users_controller.rb&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;
  &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]).&lt;/span&gt;&lt;span class="nf"&gt;decorate&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-lo-mostramos-en-la-vista"&gt;
  &lt;/a&gt;
  6. Lo mostramos en la Vista
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;# app/views/users/show.html.erb

First name: &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first_name&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
Last name: &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;last_name&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
Full name: &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;full_name&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Y ahora su lógica de vista se ha abstraído y organizado donde debería estar. Esto le ayudará enormemente a reducir el código en sus archivos de vista.&lt;/p&gt;

&lt;p&gt;Normalmente es usado conjuntamente con el patrón &lt;strong&gt;Presenters&lt;/strong&gt;, pero he preferido hacerlo en otro post 😉&lt;/p&gt;

&lt;p&gt;🔍 &lt;strong&gt;Lecturas recomendadas&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://refactoring.guru/es/design-patterns/decorator"&gt;Refactoring GURU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Decorator_pattern"&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.thegreatcodeadventure.com/rails-refactoring-part-iii-the-decorator-pattern/"&gt;The great code adventure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gracias por leer 🙏  &lt;/p&gt;

&lt;p&gt;🌎 &lt;a href="https://sergioturpin.es"&gt;https://sergioturpin.es&lt;/a&gt;&lt;br&gt;
📷 &lt;a href="https://instagram.com/sergioturpin"&gt;Instagram&lt;/a&gt;&lt;br&gt;
🐦 &lt;a href="https://twitter.com/sergio_turpin"&gt;Twitter&lt;/a&gt;&lt;br&gt;
🐙 &lt;a href="https://github.com/sturpin"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>webdev</category>
      <category>design</category>
    </item>
  </channel>
</rss>
