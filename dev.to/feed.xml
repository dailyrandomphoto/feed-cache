<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The CSS @property</title>
      <author>Sowjanya</author>
      <pubDate>Fri, 19 Nov 2021 16:38:36 +0000</pubDate>
      <link>https://dev.to/sowg/the-css-property-f07</link>
      <guid>https://dev.to/sowg/the-css-property-f07</guid>
      <description>&lt;p&gt;Have you every tried to animate a CSS custom variable and ended up getting this result:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/sowg/embed/mdMqLwY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Well then I got Good news for you there is a way to animate CSS Custom Properties! &lt;br&gt;
It can be done with the CSS &lt;code&gt;@property&lt;/code&gt;.&lt;br&gt;
I will show you how to use it with a simple example.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#css-way"&gt;
  &lt;/a&gt;
  CSS WAY
&lt;/h1&gt;

&lt;p&gt;1) Declare it(Its pretty hard but you will get he hang of it):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@property&lt;/span&gt; &lt;span class="n"&gt;--c&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;syntax&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'&amp;lt;color&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;inherits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;initial-value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2) Use it in a property and add css animation property:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/*Some Styles*/&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="m"&gt;2s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="n"&gt;alternate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3) Now create an animation with it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="py"&gt;--c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;pink&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;End Result:&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/sowg/embed/ZEJavqv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#js-way"&gt;
  &lt;/a&gt;
  JS Way
&lt;/h1&gt;

&lt;p&gt;The CSS and JS way are pretty much the same except you declare the &lt;code&gt;@property&lt;/code&gt; in JS instead of CSS.&lt;br&gt;
How you Declare it in JS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CSS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerProperty&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;syntax&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;lt;color&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;inherits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example of the JS way:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/sowg/embed/MWvOGop?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;That's it, Thanks for reading!&lt;/p&gt;

</description>
      <category>css</category>
      <category>codepen</category>
    </item>
    <item>
      <title>ReactJs Qrcode generator library</title>
      <author>Naim Malek</author>
      <pubDate>Fri, 19 Nov 2021 16:30:34 +0000</pubDate>
      <link>https://dev.to/naimmalek/reactjs-qrcode-generator-library-139p</link>
      <guid>https://dev.to/naimmalek/reactjs-qrcode-generator-library-139p</guid>
      <description>&lt;h1&gt;
  &lt;a href="#reactjsqrcodegenerator"&gt;
  &lt;/a&gt;
  reactjs-qrcode-generator
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;reactjs-qrcode-generator is a clean and simple QRcode generator library for reactJS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/reactjs-qrcode-generator"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5qfGWZZ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/npm/v/reactjs-qrcode-generator.svg" alt="NPM" width="80" height="20"&gt;&lt;/a&gt; &lt;a href="https://standardjs.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--atFcFrlw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/code_style-standard-brightgreen.svg" alt="JavaScript Style Guide" width="124" height="20"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install"&gt;
  &lt;/a&gt;
  Install
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save&lt;/span&gt; reactjs-qrcode-generator
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Demo &lt;a href="https://naimmalek.github.io/reactjs-qrcode-generator-demo/"&gt;https://naimmalek.github.io/reactjs-qrcode-generator-demo/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ReactQrcode&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;reactjs-qrcode-generator&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ReactQrcode&lt;/span&gt; &lt;span class="na"&gt;qrvalue&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;qrvalue&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;level&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Attribute&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;level&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;QR ECC level (1, 2, 3, 4)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;qrvalue&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;This is Qrcode&lt;/td&gt;
&lt;td&gt;Your String&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;size&lt;/td&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td&gt;200&lt;/td&gt;
&lt;td&gt;(Width/Height value)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#ecc-level-description"&gt;
  &lt;/a&gt;
  Ecc level description
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Level&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;low&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;medium&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;quartile&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;high&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#license"&gt;
  &lt;/a&gt;
  License
&lt;/h2&gt;

&lt;p&gt;MIT © &lt;a href="https://github.com/naimmalek"&gt;naimmalek&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>opensource</category>
    </item>
    <item>
      <title>How To Learn Better And Avoid Procrastination</title>
      <author>Mark Vassilevskiy</author>
      <pubDate>Fri, 19 Nov 2021 16:18:30 +0000</pubDate>
      <link>https://dev.to/abstract/how-to-learn-better-and-avoid-procrastination-546l</link>
      <guid>https://dev.to/abstract/how-to-learn-better-and-avoid-procrastination-546l</guid>
      <description>&lt;p&gt;In this article, I will tell you why Switching modes of thinking is one of the most important parts of learning, why sometimes you shouldn't chase those who have already achieved success in this area (Math, Physics, Programming, and whatever else you want), What is the "Einstellung Effect", misunderstanding and making mistakes are common things, we will be fighting with your Procrastination (when it is needed) and many other really useful outputs&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#focused-and-diffused-modes-of%C2%A0thinking"&gt;
  &lt;/a&gt;
  Focused and Diffused Modes of Thinking
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;The ability to Switch Attention - first to grasp the detail of the general picture being studied, and then return to the subject&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Focused - mode is very important and useful for learning, it assumes direct access to the problem being solved and uses a rational, consistent, and analytical approach.&lt;/p&gt;

&lt;p&gt;Diffused - mode is essential for learning too. It allows you to experience sudden insights and find unexpected solutions.&lt;/p&gt;

&lt;p&gt;With focused thinking, you sometimes can find yourself focusing deeply on a problem and trying to solve it in the wrong way. And with absent-minded thinking, does not allow you to clearly focus, but it allows you to get closer to the solution. The difference between them can also be explained with the help of a flashlight, which has two modes: focused and diffuse. If you are trying to understand or learn something new, then it is better to turn off precise focused thinking and turn on diffuse mode, which allows us to see the big picture. to switch from one mode to another, you need to distract yourself, for example: take a walk, do a few push-ups, eat, talk to someone or even play video games with your friends&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-einstellung-effect-and-how-to-get-rid-of%C2%A0it"&gt;
  &lt;/a&gt;
  What is the "Einstellung Effect" and How to Get Rid of It
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;"Einstellung Effect" - this is when the failure in the assimilation of new concepts and solving problems is due to our fixation on the wrong approach&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Its essence is that sometimes it is difficult even to determine from which side to approach a decision. One of the common mistakes when studying math and science is that people jump into the water before they can learn to swim. In other words, they start working on the problem without reading the textbook. To remove that barrier we should switch our thinking as we said earlier. Remember that flexibility is your helper&lt;/p&gt;

&lt;p&gt;The more you try to tune your brain to creativity, the less creative your ideas will be. Relaxation is an important part of hard work&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#confusion-and-misunderstanding-is-a-common%C2%A0reaction"&gt;
  &lt;/a&gt;
  Confusion and Misunderstanding is a Common Reaction
&lt;/h2&gt;

&lt;p&gt;Misunderstanding is a useful part of the learning process; as soon as a student meets a dead end, he immediately gives up. It is even more difficult for excellent students in this because study has always been easy for them and they do not even realize that the feeling of misunderstanding and deadlock is a standard part of the process. Learning is overcoming mistakes. Asking the right question - 80% success&lt;/p&gt;

&lt;p&gt;"I have not failed. I've just found 10,000 ways that won't work" - Thomas Edison&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-avoid-procrastination"&gt;
  &lt;/a&gt;
  How to Avoid Procrastination
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Procrastination is not uncommon. If you postpone classes until later, you leave yourself time only for the superficial study of the material in a focused mode&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If procrastination is your weakness, try to remove any noises and just sit for 25 minutes, concentrating on the task, but not thinking about the solution itself, but thinking about finding these solutions, and then reward yourself by surfing the Internet for aphids. You will be surprised at how effective it is. Will you get results if you postpone your training for an essential race until the last day? So it is with mathematics and natural sciences. The habit of procrastination affects all aspects of life negatively and when you remove it you will notice Improvement everywhere&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-sleep-so-important"&gt;
  &lt;/a&gt;
  Why Is Sleep So Important?
&lt;/h2&gt;

&lt;p&gt;it can be compared to a rest stop during mountain climbing, in other words, if you are in an absent-minded state, this does not mean that you can wander around and wait for you to come somewhere, but just restore strength. Also, it flushes out toxins and deepens neural connections. If you repeat the material fractured by sleep, then in a dream the brain will abundantly chop it&lt;/p&gt;

&lt;p&gt;Don't try to keep up with the excellent students&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#there-are-working-and-longterm-memory"&gt;
  &lt;/a&gt;
  There are "Working" and "Long-Term" Memory
&lt;/h2&gt;

&lt;p&gt;"Working" - which is working at the moment. It can store up to 4 objects on which you need to keep attention, otherwise, the information will be forgotten, you should not hammer it over trifles. Long-term memory as a warehouse. It is capable of accommodating billions of objects, many of which will remain buried. To move information from work to long-term, spaced repetition will help us. It is better to repeat the material several times a week than to repeat it 20 times in one day&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ideal-memory-isnt-the-better%C2%A0way"&gt;
  &lt;/a&gt;
  Ideal Memory Isn't the Better Way
&lt;/h2&gt;

&lt;p&gt;Focused thinking plus repetition gives an imprint on the memory. And if you have a phenomenal memory, then each memory imprint will be emotional and colorful, it will be difficult for you to compose an understandable portion for assimilation. In other words, you will not see the whole forest, because every tree will be alive for&lt;/p&gt;

&lt;p&gt;The illusion of competence - when a solution has already been given and the student glances over it, saying that he understood the material&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conceptual-portions"&gt;
  &lt;/a&gt;
  Conceptual Portions
&lt;/h3&gt;

&lt;p&gt;It's one of the main things of learning, there are 3 steps how to format it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;The first step&lt;/em&gt;&lt;/strong&gt; - chunking is to just focus on the information&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;The second&lt;/em&gt;&lt;/strong&gt; - to understand the main idea&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;The third&lt;/em&gt;&lt;/strong&gt; - to accumulate context so that you know not only how to apply this information, but also where you can use it&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;The fourth&lt;/em&gt;&lt;/strong&gt; - practice periodically, nothing can be learned without a good practice&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As Alan Baddeley said, the intention to learn only helps with the right learning strategy Knowing about gaps is the first step in closing them&lt;/p&gt;

&lt;p&gt;The illusion of competence - when a solution has already been given and the student glances over it, saying that he understood the material&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-interlining-so-important-for-further%C2%A0training"&gt;
  &lt;/a&gt;
  Why Is "Interlining" So Important For Further Training
&lt;/h2&gt;

&lt;p&gt;Practicing only one problem-solving sport, will bring you to automatism, and in the subsequent time it will be useless to waste time on it, for this, you need to combine different approaches. You must understand that the ability to use a particular method is only part of the success, you need to know when to apply it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-change%C2%A0habits"&gt;
  &lt;/a&gt;
  How to Change Habits
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Signal&lt;/em&gt;&lt;/strong&gt;. Find out why you are procrastinating. In the case of procrastination, this is an automatic habit and you don't even notice when you start scrolling through the feed-in social networks. It is useful to introduce new signals, for example, do homework right after school. Pierce Steele notes "if you protect your daily routine, it starts to protect you."&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;The sequence of actions&lt;/em&gt;&lt;/strong&gt;. The key to change is planning and developing a new ritual. The Tomato Method - This can be especially useful when you are training a new response to signals. Difficult classes should not start on an empty stomach&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Reward&lt;/em&gt;&lt;/strong&gt;. Can you win a bet with yourself? Spend the whole evening watching TV without remorse or guilt?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Faith&lt;/em&gt;&lt;/strong&gt;. Faith in your strength is needed. Overcoming the cravings for old, comfortable habits can be done by believing in a new approach. One of the most effective methods is mental comparisons when you compose the current state of affairs with which you want to achieve&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope that you enjoyed this article. These are some of the most useful tips for better learning that will help you. Don't forget about like :)&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>discuss</category>
      <category>career</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Social Media Buttons With Tooltip</title>
      <author>Muhammad Rauf</author>
      <pubDate>Fri, 19 Nov 2021 16:18:07 +0000</pubDate>
      <link>https://dev.to/softcodeon/social-media-buttons-with-tooltip-34jb</link>
      <guid>https://dev.to/softcodeon/social-media-buttons-with-tooltip-34jb</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QuL00kbx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/srpw1v92w75ultycqdcd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QuL00kbx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/srpw1v92w75ultycqdcd.jpg" alt="Image description" width="600" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#social-media-buttons-with-tooltip"&gt;
  &lt;/a&gt;
  Social Media Buttons With Tooltip
&lt;/h2&gt;

&lt;p&gt;In this post you’ll learn how to create the Social Media Buttons with Tooltip on Hover using only HTML &amp;amp; CSS. Earlier I have shared a blog on &lt;a href="https://dev.to/softcodeon/how-to-create-animated-progress-bar-html-218o"&gt;How To Create Animated Progress Bar HTML&lt;/a&gt; and now I’m going to create the Tooltip for Social Media Buttons or Icons.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Social Media Buttons&lt;/strong&gt; allow your website visitors and content viewers to easily share your content with their social media connections and networks. A tooltip is a short, informative message that appears when a user interacts with an element.&lt;/p&gt;

&lt;p&gt;In this program &lt;a href="https://softcodeon.com/tutorials/social-media-buttons-with-tooltip.htm"&gt;Social Media Buttons with Tooltip&lt;/a&gt;, at first, on the webpage, there are five social media buttons - Facebook, Twitter, Instagram, Dribble, and Linkedin. When you hover on a particular button or icon then the tooltip appears with sliding animation. Inside tooltip, there is the name of a particular hovered social media icon as you have seen in the image.&lt;/p&gt;

&lt;p&gt;Now, We just need to have two files one is HTML and other one is CSS or you can simply add CSS in your HTML File.&lt;/p&gt;

&lt;p&gt;HTML Code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"http://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"soft-icons"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"soft-icon soft-icon--facebook"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fa fa-facebook"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tooltip"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Facebook&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"soft-icon soft-icon--twitter"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fa fa-twitter"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tooltip"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Twitter&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"soft-icon soft-icon--dribbble"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fa fa-dribbble"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tooltip"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Dribbble&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"soft-icon soft-icon--instagram"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fa fa-instagram"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tooltip"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Instagram&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"soft-icon soft-icon--linkedin"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fa fa-linkedin"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tooltip"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;LinkedIn&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CSS Code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nc"&gt;.tooltip&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.8rem&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.8rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;pointer-events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;0.3s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.tooltip&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;);}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icons&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;0.15s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="nc"&gt;.tooltip&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;visibility&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-150%&lt;/span&gt;&lt;span class="p"&gt;);}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0px&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;inset&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon--linkedin&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#006599&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon--linkedin&lt;/span&gt; &lt;span class="nc"&gt;.tooltip&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#006599&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;currentColor&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon--linkedin&lt;/span&gt; &lt;span class="nc"&gt;.tooltip&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;border-top-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#006599&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon--twitter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2b97f1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon--twitter&lt;/span&gt; &lt;span class="nc"&gt;.tooltip&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2b97f1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;currentColor&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon--twitter&lt;/span&gt; &lt;span class="nc"&gt;.tooltip&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;border-top-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2b97f1&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon--codepen&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon--facebook&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#3b5a9b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon--facebook&lt;/span&gt; &lt;span class="nc"&gt;.tooltip&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#3b5a9b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;currentColor&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon--facebook&lt;/span&gt; &lt;span class="nc"&gt;.tooltip&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;border-top-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#3b5a9b&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon--instagram&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#527fa6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon--instagram&lt;/span&gt; &lt;span class="nc"&gt;.tooltip&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#527fa6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;currentColor&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon--instagram&lt;/span&gt; &lt;span class="nc"&gt;.tooltip&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;border-top-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#527fa6&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon--dribbble&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ef5a92&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon--dribbble&lt;/span&gt; &lt;span class="nc"&gt;.tooltip&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ef5a92&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;currentColor&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon--dribbble&lt;/span&gt; &lt;span class="nc"&gt;.tooltip&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nl"&gt;border-top-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ef5a92&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;

&lt;span class="nc"&gt;.soft-icon&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it. You're able to add above HTMl and CSS code where you want to show. Like in the bottom of your blog post. or any Web Page. If you face any difficuly in above code and design, Discuss below I'll help you to solve your problem. Thank you.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Do car mechanics get burnout?</title>
      <author>Nočnica Fee</author>
      <pubDate>Fri, 19 Nov 2021 16:13:39 +0000</pubDate>
      <link>https://dev.to/run-x/do-car-mechanics-get-burnout-30dj</link>
      <guid>https://dev.to/run-x/do-car-mechanics-get-burnout-30dj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#burn-out-has-become-synonymous-with-tech-jobs"&gt;
  &lt;/a&gt;
  Burn Out Has Become Synonymous with Tech Jobs
&lt;/h2&gt;

&lt;p&gt;While the technology industry has always been associated with high levels of stress, greater numbers of employees and organizations are facing the repercussions of widespread workplace burnout. The rate at which high levels of continuing stress lead to burnout in the tech industry occurs due to a myriad of reasons with perhaps the most important being the very foundational values of the industry itself. Tech companies are expected to champion a rigorous workplace culture that demands unsustainably high levels of productivity, commitment, and ingenuity. Employees in the technology industry are plagued by significant work overload, poor leadership that frequently fails to provide clear direction, and toxic workplace cultures. This stress is then exacerbated by anything from extensive overtime leading up to important software rollouts, the brutal live-to-work mentality, and a fiercely competitive job market with intensive interviewing processes. Additionally technology professionals are now nearly two years into a global pandemic that has killed millions while news sources describe a tumultuous political climate punctuated with debate over vaccine mandates, increasing rates of violence and incarceration, financial instability and the threat of economic collapse, and the ever pervasive terror of climate change consequences brewing steadily in the background and adding to the ambient stress. It’s no surprise that many people and companies are buckling under the weight of burn out that is caused by unrelenting stress. This is a problem that must be addressed from a holistic perspective to truly begin addressing the culture of burn out that is exacerbating high turnover rates, hostile work environments, and unstable operations.&lt;/p&gt;

&lt;p&gt;When the pandemic began and employees stopped coming into the office one major source of daily stress was removed from the equation: daily commute to and from work. Unexpectedly the stress from working at home has further increased burnout instead of helping to alleviate it. According to the most recent survey in October 2020 by the anonymous workplace chat app Blind, 68% of technology workers experience more burn out than they did when they worked at an office. While the ability to work from home reduced stress caused by commuting, there are many aspects of working at home that worsened employee mental health. &lt;/p&gt;

&lt;p&gt;An employee working from home is frequently interrupted by daily life. This includes interactions with pets and children and conflicts with family members. There is often a perceived or expressed pressure to work longer hours in order to be seen as productive which hastens the erosion of boundaries between work and life. Zoom exhaustion is another ongoing source of stress in which continuous meetings and the need to be on camera at all times further allows the infiltration of work into employees' homes. The need to always be available to your boss and team is already exhausting, but when being trapped in a barrage of endless webcam meetings are what defines your work day instead of the time to actually focus on your tasks is overwhelming.&lt;/p&gt;

&lt;p&gt;Workplace burnout negatively impacts not just job performance but also employee health. We can begin to remedy this issue by acknowledging and addressing the cause of work-related stressors collaboratively within our workplace cultures. When companies address employee burnout they have the ability to improve not just on an operational level, but a humane one as well. The work over life mentality of the technology industry cannot be sustained. We work with machines day in and day out, but we are not machines.&lt;/p&gt;

&lt;p&gt;Let me know if you've experienced burnout in another industry, and how you feel tech compares!&lt;/p&gt;

&lt;p&gt;Sources&lt;br&gt;
1.&lt;a href="https://thenewstack.io/this-cant-be-normal-the-tech-industry-after-a-year-of-burnout/"&gt;https://thenewstack.io/this-cant-be-normal-the-tech-industry-after-a-year-of-burnout/&lt;/a&gt;&lt;br&gt;
2.&lt;a href="https://www.theburnoutgamble.com/blog/how-does-the-tech-industry-contribute-to-burnout#:%7E:text=However%2C%20it%20seems%20to%20be,unreasonably%20high%20levels%20of%20productivity.&amp;amp;text=Additionally%2C%20the%20industry's%20top%20stress,and%20a%20toxic%20work%20culture"&gt;https://www.theburnoutgamble.com/blog/how-does-the-tech-industry-contribute-to-burnout#:~:text=However%2C%20it%20seems%20to%20be,unreasonably%20high%20levels%20of%20productivity.&amp;amp;text=Additionally%2C%20the%20industry's%20top%20stress,and%20a%20toxic%20work%20culture&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>burnout</category>
      <category>softskills</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Aliases - Using Linux made easier</title>
      <author>Ayush Agarwal</author>
      <pubDate>Fri, 19 Nov 2021 15:54:34 +0000</pubDate>
      <link>https://dev.to/ayushdev_24/aliases-using-linux-made-easier-3j49</link>
      <guid>https://dev.to/ayushdev_24/aliases-using-linux-made-easier-3j49</guid>
      <description>&lt;p&gt;It is a lovely day, you are sitting in front of your laptop on your work desk writing some excellent code, and your terminal is full of some scripts or commands.&lt;/p&gt;

&lt;p&gt;Now you realize I need to navigate to a directory inside another directory that is inside another. The chain continues for about 4-5 directories until you reach the required folder.&lt;/p&gt;

&lt;p&gt;Such a mood spoiler, right! This potential move has the tendency to force you to get up from your desk and take a 5-minute break which can very quickly turn into a long break. &lt;/p&gt;

&lt;p&gt;See, the damaging domino effect it can have? Now you will argue, ah! You don't know, I can keep pressing the "up" arrow and find the command I need because I used it just about a few hours ago. &lt;/p&gt;

&lt;p&gt;But is that the most efficient way or the best we can do?&lt;/p&gt;

&lt;p&gt;Of course not, and this is where the magic of Aliases come in.&lt;/p&gt;

&lt;p&gt;To understand things better, let's assume you have to go to a folder named "test," inside 5 folders A,B,C,D, and E.&lt;/p&gt;

&lt;p&gt;Most people will do either of the below two:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd A/B/C/D/E/test&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#or"&gt;
  &lt;/a&gt;
  or
&lt;/h4&gt;



&lt;p&gt;&lt;code&gt;cd A&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;cd B&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;cd C&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;cd D&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;cd E&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;cd test&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Now let's do the same task using Aliases. (The reason for all the build-up until now,)&lt;/p&gt;

&lt;p&gt;In simple terms, Aliases are one-word replacements of those types of long commands you see above. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aliases-in-action-"&gt;
  &lt;/a&gt;
  Aliases in Action :
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Create a ".bashrc" file. Now let us create an alias for the task we did above. In the file, write :
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;alias test="cd /users/$USER/A/B/C/D/E/test"&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;$USER will be replaced by your system username.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now, to have this working, you will have to run this .bashrc file every time the system starts. Sounds redundant, right? &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is a simple solution to it. You must have a file named ".zshenvuser." This is the file that runs every time your system starts. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In that file, just put:&lt;br&gt;
&lt;br&gt;
&lt;code&gt;~/.bashrc&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This will ensure the .bashrc file runs on every system too. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If you don't have the ".zshenvuser" file, create a ".bash_profile" and put the below code in it:
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;if [ -r ~/.bashrc ]; &lt;br&gt;
    then&lt;br&gt;
    source ~/.bashrc&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;These are the two ways to automate the running of bashrc. If you know of any other, please comment below. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, after all, this, what have we achieved. &lt;/p&gt;

&lt;p&gt;Go to your Linux terminal and just type "test." It will take you to the test directory exactly what&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;cd A/B/C/D/E/test&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
 does. &lt;/p&gt;

&lt;p&gt;Similarly, you can create different aliases for all the commands you use frequently and make your coding session more productive. &lt;/p&gt;

&lt;p&gt;To create more alias, just add another line with the same name alias="."&lt;/p&gt;

&lt;p&gt;That's it for this tech Friday blog. I would love your feedback, even negative ones. &lt;/p&gt;

&lt;p&gt;Comment below if you feel I have missed something. After we are all learning. &lt;/p&gt;

</description>
      <category>linux</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Check Internet Speed with Apple Network Responsiveness</title>
      <author>NaveenKumar Namachivayam ⚡</author>
      <pubDate>Fri, 19 Nov 2021 15:50:18 +0000</pubDate>
      <link>https://dev.to/qainsights/check-internet-speed-with-apple-network-responsiveness-2n9</link>
      <guid>https://dev.to/qainsights/check-internet-speed-with-apple-network-responsiveness-2n9</guid>
      <description>&lt;p&gt;There are umpteen tools available to check the internet speed. SpeedTest, &lt;a href="https://qainsights.com/deep-dive-into-cloudflares-speed-test/" rel="noreferrer noopener"&gt;Speed from Cloudflare&lt;/a&gt;, Netflix's &lt;a href="https://fast.com" rel="noreferrer noopener"&gt;Fast&lt;/a&gt;, or if you use &lt;a href="https://www.google.com/search?q=internet+speed" rel="noreferrer noopener"&gt;Google search&lt;/a&gt;, you can test the internet speed and its analytics. In macOS Monterey, Apple has released a command line tool called &lt;code&gt;networkQuality&lt;/code&gt;. In this blog article we will deep dive into networkQuality and its usage.&lt;/p&gt;

&lt;h2&gt;Launching networkQuality&lt;/h2&gt;

&lt;p&gt;The only prerequisite to launch &lt;code&gt;networkQuality&lt;/code&gt; is macOS Monterey. Launch the &lt;code&gt;terminal&lt;/code&gt; from the &lt;code&gt;Finder&lt;/code&gt;. In the terminal, type &lt;code&gt;networkQuality&lt;/code&gt; and hit enter.&lt;/p&gt;

&lt;p&gt;The tool will display the download and upload capacity for every second as shown below. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/11/image-2.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hUniC0Lu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/11/image-2-1024x87.png" alt="Testing" width="880" height="75"&gt;&lt;/a&gt;Testing&lt;/p&gt;

&lt;p&gt;Once the test is done after ~15 seconds, you can see the summary of your internet performance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/11/image-3.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H6MZi7d_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/11/image-3.png" alt="" width="638" height="320"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Responsiveness&lt;/code&gt; in the above summary is in roundtrips completed per minute (RPM). Responsiveness measures the quality of the network by the number of roundtrips per minute.&lt;/p&gt;

&lt;p&gt;There are three categories in Responsiveness. &lt;strong&gt;Low, Medium, and High&lt;/strong&gt;. High means there is a reliable network connection. Low means, you can see the issues while on a call or downloading a huge document or media file. Medium means, you can see a brief delay in the network.&lt;/p&gt;

&lt;p&gt;To view the manual page, enter &lt;code&gt;man networkQuality&lt;/code&gt; and hit enter.&lt;/p&gt;

&lt;p&gt;By default, networkQuality tests with parallel upload/download. If you want to test in sequential order add &lt;code&gt;-s&lt;/code&gt; option to the command.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/11/image-4.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G_O4V4St--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/11/image-4-1024x68.png" alt="Download Stats" width="880" height="58"&gt;&lt;/a&gt;Download Stats&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/11/image-5.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xvo_AJG4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/11/image-5-1024x87.png" alt=" Upload Stats " width="880" height="75"&gt;&lt;/a&gt; Upload Stats &lt;/p&gt;

&lt;p&gt;To view the output in JSON format, enter &lt;code&gt;networkQuality -c&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/11/image-7.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T4yJ2ghJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/11/image-7-470x1024.png" alt="JSON output" width="470" height="1024"&gt;&lt;/a&gt;JSON output&lt;/p&gt;

&lt;p&gt;To view the verbose output, enter &lt;code&gt;networkQuality -v&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/11/image-6.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7VrYnoTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/11/image-6.png" alt="Summary" width="756" height="368"&gt;&lt;/a&gt;Summary&lt;/p&gt;

&lt;p&gt;To test other interface in the network, enter &lt;code&gt;networkQuality -I &amp;lt;interface_name&amp;gt;&lt;/code&gt;. This will bind the interface and run the tests.&lt;/p&gt;

&lt;p&gt;By default, networkQuality uses the below configuration for testing.If you want to configure, you can use &lt;code&gt;the -C&lt;/code&gt; option.&lt;/p&gt;

&lt;p&gt;In the JSON file, there are three different URLs to test the network speed. Small and Large are for GET requests. The Upload URL is for POST request.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  "version": 1,
  "urls": {
    "small_https_download_url": "https://mensura.cdn-apple.com/api/v1/gm/small",
    "large_https_download_url": "https://mensura.cdn-apple.com/api/v1/gm/large",
    "https_upload_url": "https://mensura.cdn-apple.com/api/v1/gm/slurp"
  },
  "test_endpoint": "usqas2-edge-bx-023.aaplimg.com"
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is an example of a &lt;a href="https://github.com/QAInsights/networkQuality/blob/main/config.json" rel="noreferrer noopener"&gt;custom configuration file&lt;/a&gt;. But it is not properly working; If you find a solution, please share it in the comments.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/QAInsights/networkQuality" rel="noreferrer noopener"&gt;networkQuality Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;!-- /wp:button --&amp;gt;&lt;/p&gt;

&lt;p&gt;Using the &lt;a href="https://qainsights.com/jump-start-with-fiddler-everywhere/" rel="noreferrer noopener"&gt;Fiddler Everywhere&lt;/a&gt;, I captured the traffic when the test was running. Here is the screenshot. Totally, there were around 40+ requests made to conclude the testing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/11/image-8.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DwKUI88D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/11/image-8-1024x573.png" alt="" width="880" height="492"&gt;&lt;/a&gt;Fiddler Capture during the test&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Apple's &lt;code&gt;networkQuality&lt;/code&gt; is not a full-fledged solution to test the network speed. There are many matured solutions that are available for free. But if you are in the Apple ecosystem and love being a fan of Apple, you can add &lt;code&gt;networkQuality&lt;/code&gt; in your shell file.&lt;/p&gt;

</description>
      <category>performance</category>
      <category>tooling</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>PlanetScale integrates with Arctype's MySQL GUI</title>
      <author>etnoctua</author>
      <pubDate>Fri, 19 Nov 2021 15:47:58 +0000</pubDate>
      <link>https://dev.to/planetscale/planetscale-integrates-with-arctypes-mysql-gui-3mc4</link>
      <guid>https://dev.to/planetscale/planetscale-integrates-with-arctypes-mysql-gui-3mc4</guid>
      <description>&lt;p&gt;Check out our exclusive integration with &lt;a href="https://arctype.com/"&gt;Arctype&lt;/a&gt;, our favorite database GUI for developers. &lt;/p&gt;

&lt;p&gt;Arctype features a fast, modern interface with &lt;a href="https://docs.arctype.com/keyboard-shortcuts"&gt;keyboard shortcuts&lt;/a&gt;, a &lt;a href="https://docs.arctype.com/getting-started/quick-find"&gt;command bar&lt;/a&gt; to quickly find objects, and the best support for JSON in a SQL client. It’s also free to use. You can already &lt;a href="https://arctype.com/mysql/setup/planetscale-mac"&gt;connect to the main branch&lt;/a&gt; of your PlanetScale database in Arctype, but today it’s possible to connect to development branches, switch between them, and even create deploy requests. The power of PlanetScale is experienced within a beautiful GUI! &lt;/p&gt;

&lt;p&gt;For a full walk through, check out the &lt;a href="https://planetscale.com/blog/planetscale-free-sql-gui-with-arctype"&gt;demo video&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>mysql</category>
      <category>devops</category>
      <category>database</category>
      <category>tooling</category>
    </item>
    <item>
      <title>Bluetooth Low Energy (BLE) Tutorial for Arduino using BleuIO</title>
      <author>Bleuio tech</author>
      <pubDate>Fri, 19 Nov 2021 15:44:02 +0000</pubDate>
      <link>https://dev.to/bleuiot/bluetooth-low-energy-ble-tutorial-for-arduino-using-bleuio-1dom</link>
      <guid>https://dev.to/bleuiot/bluetooth-low-energy-ble-tutorial-for-arduino-using-bleuio-1dom</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AalPVydb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mnuztvnm88rp0ej0vtyh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AalPVydb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mnuztvnm88rp0ej0vtyh.png" alt="Arduino with BleuIO Dongle." width="800" height="413"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-introduction"&gt;
  &lt;/a&gt;
  1. Introduction
&lt;/h2&gt;

&lt;p&gt;The project is a simple example showcasing a quick way to setup an Arduino with a USB Host Shield as a USB CDC Host capable of communicating with the BleuIO Dongle.&lt;/p&gt;

&lt;p&gt;When a BleuIO Dongle is connected to the USB port, the BleuIO Dongle will start advertising. It will then act as a terminal, taking input and sending data to the Arduino Virtual Com Port.&lt;/p&gt;

&lt;p&gt;We have used an Arduino Uno Rev. 3 with SparkFun's USB Host Shield (DEV-09947) for this example.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-about-the-code"&gt;
  &lt;/a&gt;
  2. About the Code
&lt;/h2&gt;

&lt;p&gt;You can get project &lt;a href="https://github.com/smart-sensor-devices-ab/arduino_bleuio_example"&gt;&lt;strong&gt;HERE&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/smart-sensor-devices-ab/arduino_bleuio_example"&gt;https://github.com/smart-sensor-devices-ab/arduino_bleuio_example&lt;/a&gt;&lt;br&gt;&lt;br&gt;
This project based on the 'acm_terminal' example in the &lt;a href="https://felis.github.io/USB_Host_Shield_2.0/"&gt;Host USB Shield Library 2.0&lt;/a&gt; &lt;br&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dqh5Of9Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2d696ulrdw7bnta7ks6p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dqh5Of9Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2d696ulrdw7bnta7ks6p.png" alt="acm example" width="465" height="491"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;The largest possible max.packet size for the function Acm.RcvData() is 64 bytes, so to accommodate the amount of data we will receive, we are using three buffers to receive the data from the BleuIO Dongle.&lt;/p&gt;

&lt;p&gt;If the buffers have received any data, we print it out to the serial terminal connected to the Virtual COM Port.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Usb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;Acm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isReady&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;rcode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;rcode2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;rcode3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

       &lt;span class="cm"&gt;/* reading the keyboard */&lt;/span&gt;
       &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;available&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
         &lt;span class="cm"&gt;/* sending to the BleuIO Dongle */&lt;/span&gt;
         &lt;span class="n"&gt;rcode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Acm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SndData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rcode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;ErrorMessage&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PSTR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"SndData"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;rcode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="c1"&gt;//if(Serial.available()...&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start_flag&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;rcode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Acm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SndData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;START_CMDS&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;START_CMDS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rcode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;ErrorMessage&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PSTR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"SndData"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;rcode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

          &lt;span class="n"&gt;start_flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x01&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="cm"&gt;/* reading the BleuIO Dongle */&lt;/span&gt;
        &lt;span class="kt"&gt;uint8_t&lt;/span&gt;  &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;rcvd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;uint8_t&lt;/span&gt;  &lt;span class="n"&gt;buf2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;rcvd2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;uint8_t&lt;/span&gt;  &lt;span class="n"&gt;buf3&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;rcvd3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;uint8_t&lt;/span&gt;  &lt;span class="n"&gt;dongle_input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;input_indx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dongle_input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dongle_input&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

        &lt;span class="n"&gt;rcode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Acm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RcvData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;rcvd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;rcode2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Acm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RcvData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;rcvd2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;rcode3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Acm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RcvData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;rcvd3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rcode&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;rcode&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;hrNAK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;ErrorMessage&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PSTR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Ret"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;rcode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;

         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rcode2&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;rcode2&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;hrNAK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="n"&gt;ErrorMessage&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PSTR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Ret"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;rcode2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;

         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rcode3&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;rcode3&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;hrNAK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="n"&gt;ErrorMessage&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;uint8_t&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PSTR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Ret"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;rcode3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;


            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;rcvd&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//more than zero bytes received&lt;/span&gt;
              &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;rcvd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;//printing on the screen&lt;/span&gt;
                &lt;span class="n"&gt;dongle_input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;input_indx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;input_indx&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;rcvd2&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//more than zero bytes received&lt;/span&gt;
              &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;rcvd2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;buf2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;//printing on the screen&lt;/span&gt;
                &lt;span class="n"&gt;dongle_input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;input_indx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;buf2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;input_indx&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;rcvd3&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;//more than zero bytes received&lt;/span&gt;
              &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;rcvd3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;buf3&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;//printing on the screen&lt;/span&gt;
                &lt;span class="n"&gt;dongle_input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;input_indx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;buf3&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="n"&gt;input_indx&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;dongle_input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;input_indx&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="c1"&gt;// Example on a way for the Arduino to react to BleuIO events&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;dongle_input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strstr&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;dongle_input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"handle_evt_gap_connected"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;&amp;lt;CONNECTION DETECTED!&amp;gt;&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strstr&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;dongle_input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"handle_evt_gap_disconnected"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;&amp;lt;CONNECTION LOST!&amp;gt;&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="c1"&gt;//if( Usb.getUsbTaskState() == USB_STATE_RUNNING..&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;We also store the latest data from the dongle into the dongle_input buffer and run it through a simple "parser" to showcase an easy way of how you can react to events and have the Arduino do something.&lt;/p&gt;

&lt;p&gt;In this example, we are explicitly looking for BLE connection or disconnect events. When found, we just print out "&amp;lt;&amp;gt;" or "&amp;lt;&amp;gt;" to the terminal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-using-the-example-project"&gt;
  &lt;/a&gt;
  3. Using the example project
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#31-what-you-will-need"&gt;
  &lt;/a&gt;
  3.1 What you will need
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A BleuIO dongle with firmware version 2.1.0 or later (&lt;a href="https://www.bleuio.com/getting_started/docs/release_history/#release-v210"&gt;https://www.bleuio.com/getting_started/docs/release_history/#release-v210&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;An Arduino Uno Rev. 3 (&lt;a href="https://store.arduino.cc/products/arduino-uno-rev3"&gt;https://store.arduino.cc/products/arduino-uno-rev3&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;An USB Host Shield (&lt;a href="https://www.sparkfun.com/products/9947"&gt;https://www.sparkfun.com/products/9947&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The Arduino IDE (&lt;a href="https://www.arduino.cc/en/software"&gt;https://www.arduino.cc/en/software&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#32-requirments-for-the-sparkfun-board"&gt;
  &lt;/a&gt;
  3.2 Requirments for the SparkFun board
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;With the SparkFun board, it seems like you MUST supply external power on Vin or the barrel jack. 5V from the USB cable did not work.&lt;/li&gt;
&lt;li&gt;You must also apply a jumper from pin D7 to RESET.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-how-to-setup-project"&gt;
  &lt;/a&gt;
  4. How to setup project
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#41-downloading-the-project-from-github"&gt;
  &lt;/a&gt;
  4.1 Downloading the project from GitHub
&lt;/h3&gt;

&lt;p&gt;Get project &lt;a href="https://github.com/smart-sensor-devices-ab/arduino_bleuio_example"&gt;HERE&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://github.com/smart-sensor-devices-ab/arduino_bleuio_example"&gt;https://github.com/smart-sensor-devices-ab/arduino_bleuio_example&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Either clone the project, or download it as a zip file and unzip it, into your Arduino folder.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#42-downloading-the-usb-host-shield-library-20"&gt;
  &lt;/a&gt;
  4.2 Downloading the USB Host Shield Library 2.0
&lt;/h3&gt;

&lt;p&gt;Either download the Library from Here (&lt;a href="https://felis.github.io/USB_Host_Shield_2.0/"&gt;https://felis.github.io/USB_Host_Shield_2.0/&lt;/a&gt;) and place the folder into your libraries folder inside your Arduino folder.&lt;br&gt;
(For information on installing libraries, see: &lt;a href="http://www.arduino.cc/en/Guide/Libraries"&gt;http://www.arduino.cc/en/Guide/Libraries&lt;/a&gt;)&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Or download it through the Arduino IDE:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In Arduino IDE choose Sketch&amp;gt;Include Library&amp;gt;Manage Library
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UH3ad7n2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oxzs0zrz74yv2kclf27b.png" alt="Import BleuIO Arduino project" width="593" height="273"&gt;

&lt;/li&gt;
&lt;li&gt;Search for USB Host Shield Library 2.0 and click 'Install'
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l4_gdj3O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8v04f3b4licwkv2u8pfk.png" alt="Existing Projects." width="786" height="443"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5-running-the-example"&gt;
  &lt;/a&gt;
  5. Running the example
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In Arduino IDE click the upload button to upload the project to your Arduino.&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xgH7rbYT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzze6y5fgv5zwqirkrwu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xgH7rbYT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzze6y5fgv5zwqirkrwu.png" alt="BleuIO Arduino Projects." width="203" height="46"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open up the 'Arduino Uno Viritual COM Port' with a serial terminal emulation program like TeraTerm, Putty or CoolTerm.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Serial port Setup:&lt;br&gt;&lt;br&gt;
Baudrate: 115200&lt;br&gt;&lt;br&gt;
Data Bits: 8&lt;br&gt;&lt;br&gt;
Parity: None&lt;br&gt;&lt;br&gt;
Stop Bits: 1&lt;br&gt;&lt;br&gt;
Flow Control: None&lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Or inside the Arduino IDE open up Arduino Monitor and in the bottom right corner select 'Carriage Return' and '115200 baud'&lt;br&gt;
&lt;br&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oB25zvMl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzqgtcowt3f3fvy1y4l0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oB25zvMl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hzqgtcowt3f3fvy1y4l0.png" alt="BleuIO Arduino Projects." width="326" height="73"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You should see the word 'Start' and then see the dongle running two commands: setting response data and starting the advertising. You can now type commands to the dongle.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AkjKbIfX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b1i89nv7zvclqxc8bg0n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AkjKbIfX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b1i89nv7zvclqxc8bg0n.png" alt="BleuIO Arduino Projects." width="681" height="171"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Github Actions (Lab 9)</title>
      <author>Ahmad</author>
      <pubDate>Fri, 19 Nov 2021 15:42:51 +0000</pubDate>
      <link>https://dev.to/ar/github-actions-lab-9-37d7</link>
      <guid>https://dev.to/ar/github-actions-lab-9-37d7</guid>
      <description>&lt;h1&gt;
  &lt;a href="#setting-up"&gt;
  &lt;/a&gt;
  Setting up
&lt;/h1&gt;

&lt;p&gt;For my CI workflow, I went with Anaconda.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--65sBEEBY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shf4d7e9d2bgnqv1vigg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--65sBEEBY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shf4d7e9d2bgnqv1vigg.png" alt="Image description" width="880" height="353"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I altered the default YAML to run on push and pull requests on the main branch.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ZE95s22--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uv9lyij25ztugh4a3sca.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ZE95s22--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uv9lyij25ztugh4a3sca.png" alt="Image description" width="159" height="105"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When installing dependencies, the default YAML looks for a &lt;code&gt;environment.yml&lt;/code&gt; file. I don't have that in my project so I set it up to install each dependency individually.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vwnlenor--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v9mwx0d0btctrjxrf3ka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vwnlenor--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v9mwx0d0btctrjxrf3ka.png" alt="Image description" width="193" height="119"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#testing-the-workflow"&gt;
  &lt;/a&gt;
  Testing the workflow
&lt;/h1&gt;

&lt;p&gt;After committing the YAML, I noticed that the workflow failed with this reason:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Version 3.1 with arch x64 not found The list of all available versions can be found here: https://raw.githubusercontent.com/actions/python-versions/main/versions-manifest.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I fixed this by changing the python version to 3.9.5, the version on my local machine.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W8cuxR7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9u4xy0py8i8b52ftcprv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W8cuxR7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9u4xy0py8i8b52ftcprv.png" alt="Image description" width="231" height="144"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The workflow then passed successfully.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U9yQqxHd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bzvwi22k7lu69zxio4re.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U9yQqxHd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bzvwi22k7lu69zxio4re.png" alt="Image description" width="307" height="123"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Python Package using Conda&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;main&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build-linux&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;max-parallel&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Set up Python 3.9.5&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-python@v2&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;python-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;3.9.5&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Add conda to system path&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;# $CONDA is an environment variable pointing to the root of the miniconda directory&lt;/span&gt;
        &lt;span class="s"&gt;echo $CONDA/bin &amp;gt;&amp;gt; $GITHUB_PATH&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install dependencies&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;conda install black&lt;/span&gt;
        &lt;span class="s"&gt;conda install flake8&lt;/span&gt;
        &lt;span class="s"&gt;conda install markdown&lt;/span&gt;
        &lt;span class="s"&gt;conda install pygments&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Lint with flake8&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;conda install flake8&lt;/span&gt;
        &lt;span class="s"&gt;# stop the build if there are Python syntax errors or undefined names&lt;/span&gt;
        &lt;span class="s"&gt;flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics&lt;/span&gt;
        &lt;span class="s"&gt;# exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide&lt;/span&gt;
        &lt;span class="s"&gt;flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Test with pytest&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;conda install pytest&lt;/span&gt;
        &lt;span class="s"&gt;pytest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#writing-a-test-for-another-repo"&gt;
  &lt;/a&gt;
  Writing a test for another repo
&lt;/h1&gt;

&lt;p&gt;I chose to work on &lt;a href="https://github.com/roman-rezinkin/RomanStaticSG"&gt;Roman Rezinkin's SSG&lt;/a&gt; for this part. I looked through his testing file &lt;code&gt;roman_ssg_util.py&lt;/code&gt; for any functions he may have missed and found &lt;code&gt;create_index_page()&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;After writing a simple test for it that calls the function and checks if the index page file was created, I created a &lt;a href="https://github.com/roman-rezinkin/RomanStaticSG/pull/29"&gt;pull request&lt;/a&gt;. The workflow Roman had set up passed and it was quickly merged.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_create_index_page&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;roman_ssg_util&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_index_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"en-US"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"1.html"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"./index.html"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"index.html"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#outcomes"&gt;
  &lt;/a&gt;
  Outcomes
&lt;/h1&gt;

&lt;p&gt;This lab really showed me how powerful Github Actions can be, especially when reviewing pull requests. It ensures that the pull request adheres to your rules, customizable in the YAML file.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>13 Sublime Text Plugins that Every Developer Must Use</title>
      <author>Mark Vassilevskiy</author>
      <pubDate>Fri, 19 Nov 2021 15:39:17 +0000</pubDate>
      <link>https://dev.to/abstract/13-sublime-text-plugins-that-every-developer-must-use-3ei0</link>
      <guid>https://dev.to/abstract/13-sublime-text-plugins-that-every-developer-must-use-3ei0</guid>
      <description>&lt;p&gt;Sublime Text 3 is one of the most popular free IDEs for writing your code. You can use it for opening files (.txt and more), as well as for small projects that use Python and Web-dev. Earlier, I had written an article about VSCode Extensions. However, if you prefer to use Sublime Text 3 rather than VSCode, then this compilation of the 13 plugins is exactly for you.&lt;br&gt;
I think these are the most common and the greatest Sublime Text 3 plugins that every developer (doesn't matter who are you - full-stack developer or data scientist) should work with.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-package%C2%A0control"&gt;
  &lt;/a&gt;
  1. Package Control
&lt;/h2&gt;

&lt;p&gt;When you just install Sublime Text 3, you should immediately install the Package Control plugin. It is the most basic plugin that will allow you to install, delete, redact other plugins easily and without any problems. As I said earlier, after installing this plugin you don't have to do this anymore.&lt;br&gt;
Use command ctrl+shift+p (for Windows or Linux) or cmd+shift+p (For Mac).&lt;br&gt;
Type "Install-Package Control" and press enter.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hIuODK3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u0rkrjkq4yz5rtcxvhnx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hIuODK3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u0rkrjkq4yz5rtcxvhnx.png" alt="Image description" width="800" height="294"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-emmet"&gt;
  &lt;/a&gt;
  2. Emmet
&lt;/h2&gt;

&lt;p&gt;This plugin is second in popularity and one of the most useful. Emmet helps you to write a lot less. It lets you use abbreviations that automatically deflate into fully functional code.&lt;br&gt;
You will need to use Package Control as we mentioned earlier. Write "Install-Package Control" again and then write "Emmet" and press enter.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vSH__ofe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uamy9s1fpsoqv8ccul7f.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vSH__ofe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uamy9s1fpsoqv8ccul7f.gif" alt="Image description" width="640" height="209"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cztsji-l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/stdkogapxreyivcb56c5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cztsji-l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/stdkogapxreyivcb56c5.gif" alt="Image description" width="640" height="445"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-alignment"&gt;
  &lt;/a&gt;
  3. Alignment
&lt;/h2&gt;

&lt;p&gt;Alignment is a useful tool for aligning multiple sections or multi-line sections, which means you can align multiple selections, or lines, via delimiter such as =. Simply type ctrl + alt + a on Windows, or cmd + ctrl + a on a Mac. And again use "Install-Package Control" command to install it.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--97hTHVJG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7buzytkg60v0p0fn9jqs.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--97hTHVJG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7buzytkg60v0p0fn9jqs.gif" alt="Image description" width="800" height="170"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-git"&gt;
  &lt;/a&gt;
  4. Git
&lt;/h2&gt;

&lt;p&gt;This plugin brings Git into Sublime Text 3, so you don't need to go back and forth between the command line and your text editor. To get started quickly, install the plugin and use the Command Palette to launch your Git commands&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wqIRxrA2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7c6x1r4nogmto0pz15ml.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wqIRxrA2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7c6x1r4nogmto0pz15ml.png" alt="Image description" width="800" height="328"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-jshint"&gt;
  &lt;/a&gt;
  5. JSHint
&lt;/h2&gt;

&lt;p&gt;JSHint is a really good plugin without which I can't normally write JavaScript code. As you might have noticed it helps with your JavaScript code, specifically it shows where you made an error and also proposes to you how to fix it.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SKRmCwOw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8y9mv0n68lahs1rcno4j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SKRmCwOw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8y9mv0n68lahs1rcno4j.png" alt="Image description" width="797" height="612"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-colorpicker"&gt;
  &lt;/a&gt;
  6. ColorPicker
&lt;/h2&gt;

&lt;p&gt;ColorPicker a really good plugin for Sublime Text 3 because it adds a color panel to your CSS code. To open the color picker, simply type cmd+shift+c on a Mac, or ctrl+shift+c on Windows or Linux.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JieJUpea--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxifa6mnz2rlsn30p7fi.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JieJUpea--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxifa6mnz2rlsn30p7fi.jpeg" alt="Image description" width="800" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-terminal"&gt;
  &lt;/a&gt;
  7. Terminal
&lt;/h2&gt;

&lt;p&gt;The Terminal plugin lets you open your project folders in the terminal directly from Sublime Text 3 - with a hotkey. It is a very helpful plugin when you need to execute command lines inside the given folder.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--efnCvICs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mkxtvo2iyz1nfevpand4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--efnCvICs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mkxtvo2iyz1nfevpand4.gif" alt="Image description" width="880" height="412"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-brackethighlighter"&gt;
  &lt;/a&gt;
  8. BracketHighlighter
&lt;/h2&gt;

&lt;p&gt;When you work with many count of brackets it's very difficult and painful to find the right brackets. BracketHighlighter underscores and highlights all brackets.&lt;br&gt;
BracketHighlighter matches a variety of brackets such as: [], (), {}, "", '', , and even custom brackets.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--709725Ft--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sg2arqpt0raz3ur33eob.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--709725Ft--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sg2arqpt0raz3ur33eob.png" alt="Image description" width="769" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-livereload"&gt;
  &lt;/a&gt;
  9. LiveReload
&lt;/h2&gt;

&lt;p&gt;A small but necessary plugin for most web developers is LiveReload. Instead of having to refresh your browser every time you make a tiny change to a file in order to see results, LiveReload will simply sync with your browser of choice and instantly display the updated results.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-autofilename"&gt;
  &lt;/a&gt;
  10. AutoFileName
&lt;/h2&gt;

&lt;p&gt;The AutoFileName plugin completes filenames automatically. It triggers a dropdown with file names relative to your existing file and the subsequent path as you type. For example, when you want to write something for the url attribute in your HTML tag, it will propose the name of the file in your folder.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7rltOIa0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcq5bt7c81ypjasvtxgi.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7rltOIa0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcq5bt7c81ypjasvtxgi.jpeg" alt="Image description" width="554" height="308"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-sidebar%E2%80%8Benhancements"&gt;
  &lt;/a&gt;
  11. SideBar​Enhancements
&lt;/h2&gt;

&lt;p&gt;The SideBarEnhancements plugin adds a new window to your Sublime Text 3 where you can easily manage your folders. Also, it provides delete options such as "Move to trash", includes an "Open with…", gives you the ability to move files and more.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_7CuT1Lz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9rvv79yguvqgl9abpmap.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_7CuT1Lz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9rvv79yguvqgl9abpmap.jpeg" alt="Image description" width="800" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#12-a-file%C2%A0icon"&gt;
  &lt;/a&gt;
  12. A File Icon
&lt;/h2&gt;

&lt;p&gt;This plugin is great for easily scanning what files you have in your project. It simply adds pretty and customizable icons to supported files in your project sidebar.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LddxKi7i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8wf7f7egv2g0c9uzuin.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LddxKi7i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8wf7f7egv2g0c9uzuin.png" alt="Image description" width="800" height="336"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#13-theme%E2%80%8A%E2%80%8Aone%C2%A0dark"&gt;
  &lt;/a&gt;
  13. Theme - One Dark
&lt;/h2&gt;

&lt;p&gt;And the last plugin for today is "One Dark", which is a theme for Sublime Text. This plugin doesn't have any functionality but adds a really beautiful interface with which you can code in a prettier environment.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yPbYasMT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/latkngo1g46gon8om8eh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yPbYasMT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/latkngo1g46gon8om8eh.png" alt="Image description" width="800" height="563"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;These were the most common and useful plugins for Sublime Text 3 - one of the most popular IDEs. I hope you enjoyed this article. Let me know in the comments if you want more articles like this.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>python</category>
    </item>
    <item>
      <title>Add a video background to your landing page to make it more gorgeous</title>
      <author>Anjan Shomooder</author>
      <pubDate>Fri, 19 Nov 2021 15:38:40 +0000</pubDate>
      <link>https://dev.to/thatanjan/add-a-video-background-to-your-landing-page-to-make-it-more-gorgeous-3nmk</link>
      <guid>https://dev.to/thatanjan/add-a-video-background-to-your-landing-page-to-make-it-more-gorgeous-3nmk</guid>
      <description>&lt;p&gt;In this blog you will learn how to add a video background to your landing page to make it more gorgeous.&lt;/p&gt;

&lt;p&gt;Preview:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/nVryoBkVEzc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic HTML &amp;amp; CSS knowledge&lt;/li&gt;
&lt;li&gt;Basic Javascript(Optional. only required for the navigation toggle effect)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have already created a video about it on my youtube channel. Check that out for more details.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/s6J2Q2vOhf0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you like this video, please like share, and Subscribe to my channel.&lt;/p&gt;

&lt;p&gt;source code: &lt;a href="https://github.com/thatanjan/video-background-landing-page-yt"&gt;https://github.com/thatanjan/video-background-landing-page-yt&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#starter-code"&gt;
  &lt;/a&gt;
  Starter code
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Taylor Swift&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"nav.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"content.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"responsive.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        This is body

        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"index.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#lets-add-the-video-and-overlay-to-html"&gt;
  &lt;/a&gt;
  Let's add the video and overlay to html.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"video_container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;video&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./media/background.mp4"&lt;/span&gt; &lt;span class="na"&gt;autoplay&lt;/span&gt; &lt;span class="na"&gt;loop&lt;/span&gt; &lt;span class="na"&gt;muted&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/video&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"overlay"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T4fwlEdL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjzp8464atlc7x38y8p4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T4fwlEdL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjzp8464atlc7x38y8p4.png" alt="video with no style - Add video background to your landing page to make it more gorgeous by cules coding " width="880" height="446"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Explanation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A video container to contain the video and overlay.&lt;/li&gt;
&lt;li&gt;Video will be started automatically with a loop. It will also be muted.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#css-reset"&gt;
  &lt;/a&gt;
  Css reset
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow-x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Explanation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The entire webpage should not be bigger than the screen width.&lt;/li&gt;
&lt;li&gt;Webpage will not have any horizontal scrolling.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#lets-style-the-video"&gt;
  &lt;/a&gt;
  Let's style the video:
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.video_container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;max-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.video_container&lt;/span&gt; &lt;span class="nt"&gt;video&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;object-fit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;object-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Rsix-RK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/recuxoyiwft08256si2u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Rsix-RK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/recuxoyiwft08256si2u.png" alt="video styled but no overlay - Add video background to your landing page to make it more gorgeous by Cules Coding " width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Explanation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The video container is taking the full width of the screen without any overflow. It is also positioned as &lt;code&gt;relative&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Actual video is positioned &lt;code&gt;absolute&lt;/code&gt; and aligned with the container. It is also taking the full height and width.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have confusion with Css position then you can watch this video.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/tO2KjMlor4o"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To make the video fit, we need to use &lt;code&gt;object-fit&lt;/code&gt; to &lt;code&gt;cover&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the user adjusts screen width, the user will always see the center of the video because of &lt;code&gt;object-position: center;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#lets-style-the-overlay"&gt;
  &lt;/a&gt;
  Let's style the overlay.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--primary-red&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#70000e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.overlay&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--primary-red&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="py"&gt;mix-blend-mode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;soft-light&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w-MmzRV---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4llmdtpsn2c1u224dfi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w-MmzRV---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4llmdtpsn2c1u224dfi.png" alt="with overlay" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Explanation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Overlay element is aligned with the container using position &lt;code&gt;absolute&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The background color is stored inside a variable. If you don't know about css variable, then you can check out this &lt;a href="https://www.culescoding.space/blog/everything-you-need-to-know-about-css-variables"&gt;blog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Overlay has been blended with the background using a blend mode. We need to use &lt;code&gt;mix-blend-mode&lt;/code&gt; property to do so. I will use &lt;code&gt;soft-light&lt;/code&gt; as value. You can learn about &lt;code&gt;mix-blend-mode&lt;/code&gt; from &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that's how you add a video background to a landing page to make it more gorgeous. If you want to learn how the rest of the project was made please watch the video.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/s6J2Q2vOhf0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;source code: &lt;a href="https://github.com/thatanjan/video-background-landing-page-yt"&gt;https://github.com/thatanjan/video-background-landing-page-yt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Final result:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/nVryoBkVEzc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shameless-plug"&gt;
  &lt;/a&gt;
  Shameless Plug
&lt;/h2&gt;

&lt;p&gt;I have made a video about how to build a carousel postcard with React, Material-UI, and Swiper.js.&lt;br&gt;
If you are interested you can check the video.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/NDyjI7hd4uE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;You can also demo the application form &lt;a href="https://insta-carousel-demo.vercel.app/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sXlAWXXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/thatanjan/insta-carousel-yt/development/public/Screenshot%2520of%2520the%2520App.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sXlAWXXh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/thatanjan/insta-carousel-yt/development/public/Screenshot%2520of%2520the%2520App.png" alt="Screenshot of Insta Carousel" width="880" height="445"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please like and subscribe to &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt;. It motivates me to create more content like this.&lt;/p&gt;

&lt;p&gt;If you have any questions, please comment down below.&lt;br&gt;
You can reach out to me on social media as &lt;a class="mentioned-user" href="https://dev.to/thatanjan"&gt;@thatanjan&lt;/a&gt;
.&lt;br&gt;
Stay safe. Goodbye.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#about-me"&gt;
  &lt;/a&gt;
  About me
&lt;/h2&gt;
&lt;h4&gt;
  &lt;a href="#why-do-i-do-what-i-do"&gt;
  &lt;/a&gt;
  Why do I do what I do?
&lt;/h4&gt;

&lt;p&gt;The Internet has revolutionized our life. I want to make the internet more beautiful and useful.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-do-i-do"&gt;
  &lt;/a&gt;
  What do I do?
&lt;/h4&gt;

&lt;p&gt;I ended up being a full-stack software engineer.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-can-i-do"&gt;
  &lt;/a&gt;
  What can I do?
&lt;/h4&gt;

&lt;p&gt;I can develop complex full-stack web applications like social media applications or e-commerce sites.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-have-i-done"&gt;
  &lt;/a&gt;
  What have I done?
&lt;/h4&gt;

&lt;p&gt;I have developed a social media application called &lt;a href="https://con-fession.vercel.app/"&gt;Confession&lt;/a&gt;. The goal of this application is to help people overcome their imposter syndrome by sharing our failure stories.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XbQiTDS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjay62pz7byne4d8ja8v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XbQiTDS2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gjay62pz7byne4d8ja8v.png" alt="Alt Text" width="880" height="442"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also love to share my knowledge. So, I run a youtube channel called &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt; where I teach people full-stack web development, data structure algorithms, and many more. So, Subscribe to Cules Coding so that you don't miss the cool stuff.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#want-to-work-with-me"&gt;
  &lt;/a&gt;
  Want to work with me?
&lt;/h2&gt;

&lt;p&gt;I am looking for a team where I can show my ambition and passion and produce great value for them.&lt;br&gt;
Contact me through my email or any social media as &lt;a class="mentioned-user" href="https://dev.to/thatanjan"&gt;@thatanjan&lt;/a&gt;
. I would be happy to have a touch with you.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#contacts"&gt;
  &lt;/a&gt;
  Contacts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Email: &lt;a href="mailto:thatanjan@gmail.com"&gt;thatanjan@gmail.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;linkedin: &lt;a href="https://linkedin.com/in/thatanjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;portfolio: &lt;a href="https://thatanjan.me/"&gt;anjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Github: &lt;a href="https://github.com/thatAnjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Instagram (personal): &lt;a href="https://instagram.com/thatAnjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Instagram (youtube channel): &lt;a href="https://instagram.com/cules_coding/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Twitter: &lt;a href="https://twitter.com/thatAnjan"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Facebook: &lt;a href="https://www.facebook.com/thatanjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Blogs you might want to read:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/setup-eslint-prettier-with-typescript-and-react"&gt; Eslint, prettier setup with TypeScript and react &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/what-is-client-side-rendering"&gt;What is Client-Side Rendering?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/what-is-server-side-rendering"&gt;What is Server Side Rendering?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/everything-you-need-to-know-about-tree-data-structure"&gt;Everything you need to know about tree data structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/13-reasons-why-you-should-use-Nextjs"&gt;13 reasons why you should use Nextjs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Videos might you might want to watch:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/rSa8sUC8m_4"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/T-n0mrssDiw"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/0an2g0lq7LU"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Be_C_Op8Tx8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
