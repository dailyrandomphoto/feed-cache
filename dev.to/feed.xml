<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>
Why Developers Should Care About Knowledge Sharing</title>
      <author>Adriano Martins</author>
      <pubDate>Mon, 18 Oct 2021 09:18:44 +0000</pubDate>
      <link>https://dev.to/reviewpad/why-developers-should-care-about-knowledge-sharing-3ilg</link>
      <guid>https://dev.to/reviewpad/why-developers-should-care-about-knowledge-sharing-3ilg</guid>
      <description>&lt;p&gt;&lt;em&gt;Sharing knowledge usually comes as the last step of a process, or even worse, as something optional, that can be passed on if need be. This makes it easy to skip on this step if you feel you’re tired, or your team is busy. Developers are almost always creating new technologies and figuring out new solutions. Odds are, whatever knowledge you acquire won’t be available anywhere else. The time has come to remind everyone of the fundamental benefits of making whatever knowledge you’ve acquired available to your colleagues.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-it-helps-you"&gt;
  &lt;/a&gt;
  Why it helps you
&lt;/h2&gt;

&lt;p&gt;Knowledge sharing is &lt;a href="https://codingsans.com/state-of-software-development-2020"&gt;the second biggest problem software companies face&lt;/a&gt;. It affects everyone, so it also affects anyone. With the advent of remote work, this issue may become even more important. First of all, let’s appeal to our own self-interest. Sharing knowledge doesn’t only help our team, it actually helps those who are imparting the knowledge in more ways than one.&lt;/p&gt;

&lt;p&gt;Let’s see:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  You are &lt;strong&gt;advancing your own knowledge&lt;/strong&gt;. By explaining what you’ve learnt to someone else, you are consolidating what you’ve learnt. You will retain it better, systematise it better, and, frankly, you’ll probably advance it by seeing it through others’ eyes. You will have to consider what you’re sharing and think twice about it. That reflection will bring with it valuable learning.&lt;/li&gt;
&lt;li&gt;  You will be &lt;strong&gt;receiving feedback&lt;/strong&gt;. No developer is an island. We learn from others. By sharing what you’ve learnt, you will be receiving other people’s thoughts on the subject, which will surely advance your own understanding. Maybe they will even correct some aspect of it that you misunderstood.&lt;/li&gt;
&lt;li&gt;  You will &lt;strong&gt;help future you&lt;/strong&gt;. If you learn something and just file it away in the caverns of a closed pull request, odds are you may not remember it fully whenever you bump into the same problem again. If you write it down, though, and teach it to others, it will be right there for you when you need it. It’s the easiest way to &lt;strong&gt;only solve problems once&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;  You will be &lt;strong&gt;advancing your career&lt;/strong&gt;. Sharing knowledge and contributing to the team’s success does not go unnoticed. If when people are in trouble and seek solutions your name pops up all the time, everyone will take notice. This is how promotions happen.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why-it-helps-your-team"&gt;
  &lt;/a&gt;
  Why it helps your team
&lt;/h2&gt;

&lt;p&gt;But sharing isn’t just about oneself, now is it? There must be advantages for the whole team. Let’s see what they are.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  It helps &lt;strong&gt;build team spirit&lt;/strong&gt;. This may sound like a meaningless phrase, but it isn’t. What goes around comes around, and a team that is accustomed to helping each other will resort to helping each other naturally. Giving everyone a hand shouldn’t be contingent on someone being in trouble.&lt;/li&gt;
&lt;li&gt;  You will be &lt;strong&gt;saving everyone A LOT of time&lt;/strong&gt;. How long did it take you to solve the problem? An hour? Two? A whole day? Whenever someone on your team runs into the exact same issue, they will (depending on skill level or just sheer instinct) take roughly the same amount of time. If there’s an explanation available, though, that everyone has knowledge of… Not so much.&lt;/li&gt;
&lt;li&gt;  You will be &lt;strong&gt;building a knowledge base&lt;/strong&gt;. It may seem like just a small addition, but small additions build up. If your team develops a culture of sharing knowledge, they will inevitably create a repository that will become a cornerstone of success.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-do-it"&gt;
  &lt;/a&gt;
  How to do it
&lt;/h2&gt;

&lt;p&gt;So, are there any best practices, aside from simply gathering the team and telling them, or writing stuff down somewhere public, such as an internal Wiki?&lt;/p&gt;

&lt;p&gt;We do have some ideas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  If you’re using &lt;strong&gt;Reviewpad&lt;/strong&gt;, which you should, the &lt;em&gt;Comments from the Past&lt;/em&gt; feature makes it so whenever someone touches code with comments, they’ll be able to see what was shared when that code was made. Forget about re-working the same problems, or going down avenues that somebody else already found out that don’t work.&lt;/li&gt;
&lt;li&gt;  Whenever a team member explains something to you, &lt;strong&gt;encourage them to document it&lt;/strong&gt;. If it was useful to you, it will likely be useful to others.&lt;/li&gt;
&lt;li&gt;  Much in the same way, whenever someone asks you for help, &lt;strong&gt;document it&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;  Whenever you are the one who needs an explanation, avoid asking in private. &lt;strong&gt;Ask on a public forum&lt;/strong&gt;, so everyone can read the discussion and take advantage of it.&lt;/li&gt;
&lt;li&gt;  Make it &lt;strong&gt;easily accessible&lt;/strong&gt;. Your knowledge base needs to be freely and easily accessible to everyone, at all times. Developers don’t particularly like over complicated wikis, so it’s up to you to create this space.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the reasons why we are building Reviewpad is making knowledge sharing easier and more convenient to everyone involved.&lt;/p&gt;

&lt;p&gt;Reviewpad is about communication as much as it is about reviews.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.reviewpad.com/get-started"&gt;Are you ready to give it a go?&lt;/a&gt;&lt;/p&gt;

</description>
      <category>knowledgesharing</category>
      <category>teamwork</category>
      <category>culture</category>
    </item>
    <item>
      <title>Docker for Dummies</title>
      <author>Vincent Bradbury</author>
      <pubDate>Mon, 18 Oct 2021 08:48:12 +0000</pubDate>
      <link>https://dev.to/sdronin/docker-for-dummies-55bm</link>
      <guid>https://dev.to/sdronin/docker-for-dummies-55bm</guid>
      <description>&lt;p&gt;So, what is Docker? The Docker Engine is a virtualization platform and service that deploys and runs apps in containers.  That's a common, concise, and yet very esoteric description.  In order to try and explain this description of Docker, some basics of how a program is installed and run must first be covered.&lt;/p&gt;

&lt;p&gt;Generally, whether the operating system on a host machine is Windows, MacOS, or Linux, when the user needs to use a certain app or software they must first download and install that app.  There are many ways to do this, but the most simple and common way is to download the app directly to your hard drive.  The installation process is slightly different depending on the operating system, but installing it will put the main program in your operating system's directory for programs, and a bunch of other supporting files throughout your entire file system.  To run an app in this simple setup, the operating system then dedicates specified amounts of resources like RAM, CPU, and additional hard drive space. For all the above processes to work, the installer or package manager must know which files must go where, and the app itself must be able to communicate directly to the operating system.  The more accessible a development team wants their app to be, the more operating systems they have to program for.  The more operating systems they program for, the more file systems they have to account for.  To deal with this growing complexity in both the development and deployment of the app, virtualization can be used. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y4mVNPzJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lqh3hs5hhr0g30mg4u1b.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y4mVNPzJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lqh3hs5hhr0g30mg4u1b.jpg" alt="Virtual Machine Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With a traditional Virtual Machine, an app can be written for use in one operating system but used on a host machine that has a different operating system installed and running.  For example, a machine running Windows can run a program that needs to run in a Linux operating system by using a hypervisor like WSL to translate between the two operating systems.  Additional Virtual Machines can be generated for how many different types of operating systems that are needed.  Unfortunately, this has downsides as each additional Virtual Machine is a whole new operating system that uses redundant files and each app has to get two operating systems to agree on how much resources it can be allocated.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I54u0Wtz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eijpohr4ckov0lbkamip.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I54u0Wtz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eijpohr4ckov0lbkamip.jpg" alt="Docker Platform and Containers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is where Docker and its containers comes in.  Containers are environments in the Docker Engine where the app and all its supporting files resides all in one place.  The Docker Engine also talks directly to the host machine's operating system to allocate a fixed amount of resources to each container.  The main benefit of the fixed resource allocation is stability as the app should always have enough; the downside is that if it is allocated too much, those resources will be wasted and unusable by the host machine.&lt;/p&gt;

&lt;p&gt;It should be noted that Docker is run natively in Linux.  When run on a Linux operating system, Docker can talk directly to the kernel in resource requests.  This direct connection saves additional resources and time.  When Docker is run on MacOS or Windows, it is run much like a Virtual Machine in that the Docker Engine must talk to a hypervisor first.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8iB7XhFt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f68lc1cc0iwnoquxqnrb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8iB7XhFt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f68lc1cc0iwnoquxqnrb.png" alt="The Office meme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In summary, because everything the apps need are in the containers, docker simplifies many of the processes to develop and deploy said apps. The apps should be more stable since it has a fixed amount of resources reserved for it. Using Docker on a Linux machine can save additional resources by not having to use a hypervisor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt; &lt;br&gt;
Docker -&lt;br&gt;
&lt;a href="https://www.docker.com/"&gt;https://www.docker.com/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.docker.com/"&gt;https://docs.docker.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wikipedia -&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Docker_(software)"&gt;https://en.wikipedia.org/wiki/Docker_(software)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Additional Links:&lt;/strong&gt;&lt;br&gt;
Docker - Command Line Interface documentation&lt;br&gt;
&lt;a href="https://docs.docker.com/engine/reference/commandline/cli/"&gt;https://docs.docker.com/engine/reference/commandline/cli/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When not to use Docker -&lt;br&gt;
&lt;a href="https://www.freecodecamp.org/news/7-cases-when-not-to-use-docker/"&gt;https://www.freecodecamp.org/news/7-cases-when-not-to-use-docker/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>docker</category>
    </item>
    <item>
      <title>First Open Source Contribution Doesn't Have To Be Hard.</title>
      <author>Kiran S Baliga</author>
      <pubDate>Mon, 18 Oct 2021 08:42:46 +0000</pubDate>
      <link>https://dev.to/tinkerhub_mace/first-open-source-contribution-doesnt-have-to-be-hard-5195</link>
      <guid>https://dev.to/tinkerhub_mace/first-open-source-contribution-doesnt-have-to-be-hard-5195</guid>
      <description>&lt;p&gt;It's October and we all know what it's all about - Hacktoberfest. People are busy celebrating open-source and making contributions.&lt;br&gt;&lt;br&gt;
Contributions? 🤔 Wondering how to get started with your first open-source contribution? You're in the right place! Keep scrolling...&lt;br&gt;
Let's get to it step by step ✨&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#so-what-exactly-is-hacktoberfest"&gt;
  &lt;/a&gt;
  So what exactly is Hacktoberfest?
&lt;/h3&gt;

&lt;p&gt;Hacktoberfest is a month-long celebration of open source software run by DigitalOcean in partnership with GitHub and Twilio. It encourages participation in the open source community, which grows bigger every year.&lt;/p&gt;

&lt;p&gt;Complete the  challenge by contributing and getting 4 pull requests merged and earn a limited edition T-shirt. It is open to everyone in our global community! Four quality pull requests must be submitted to public GitHub repositories.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don't know how to use git/github?

 &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/apGV9Kg7ics"&gt;
&lt;/iframe&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#sounds-cool"&gt;
  &lt;/a&gt;
  Sounds cool?
&lt;/h4&gt;

&lt;p&gt;Now it's time for your first step! 🤩&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#mashithandu"&gt;
  &lt;/a&gt;
  Mashithandu
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/tinkerhubmace"&gt;
        tinkerhubmace
      &lt;/a&gt; / &lt;a href="https://github.com/tinkerhubmace/mashithandu"&gt;
        mashithandu
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A repo for beginners to do their first contribution in GitHub
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
mashithandu&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/tinkerhub-org/mashithandu/blob/main/resources/rajesh-mashithandu.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RC9Ws6jS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/tinkerhub-org/mashithandu/raw/main/resources/rajesh-mashithandu.jpg" alt="mashithandu"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Table of contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tinkerhubmace/mashithandu#about-this-repo"&gt;About this repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tinkerhubmace/mashithandu#students-instructions"&gt;Students Instructions&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tinkerhubmace/mashithandu#fork-this-repo"&gt;Fork this repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tinkerhubmace/mashithandu#contribute"&gt;Contribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tinkerhubmace/mashithandu#create-a-pull-request"&gt;Create a pull request&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tinkerhubmace/mashithandu#campus-instructions"&gt;Campus Instructions&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tinkerhubmace/mashithandu#create-a-github-organization-for-your-chapter-if-it-doesnt-exist"&gt;Create a GitHub organization for your chapter if it doesn't exist.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tinkerhubmace/mashithandu#fork-this-repo-to-your-organization"&gt;Fork this repo to your organization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tinkerhubmace/mashithandu#create-a-folder"&gt;Create a folder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tinkerhubmace/mashithandu#lock-main-branch"&gt;Lock main branch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tinkerhubmace/mashithandu#teach-git-and-github"&gt;Teach git and GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tinkerhubmace/mashithandu#ask-students-to-do-their-first-contribution"&gt;Ask Students to do their first contribution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tinkerhubmace/mashithandu#review-the-prs"&gt;Review the PRs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tinkerhubmace/mashithandu#occasionally-send-prs-to-the-repo-in-tinkerhub-org"&gt;Occasionally send PRs to the repo in TinkerHub Org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tinkerhubmace/mashithandu#resources"&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
About this repo&lt;/h2&gt;
&lt;p&gt;This is a repo for beginners to experience the path of open source contribution&lt;/p&gt;
&lt;h2&gt;
Students Instructions&lt;/h2&gt;
&lt;h3&gt;
Fork this repo&lt;/h3&gt;
&lt;p&gt;Create a fork of this repo to your account.&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;💡 search StackOverflow on how to Fork a repo in GitHub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;
Contribute&lt;/h3&gt;
&lt;p&gt;Add your contribution to the repo by editing the contents of the folder with your campus name.&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;💡 Contact your campus lead for exact instructions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;
Create a pull request&lt;/h3&gt;
&lt;p&gt;After committing and pushing your changes go to your fork and create…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/tinkerhubmace/mashithandu"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
Celebrating this വിദ്യാരംഭം,&lt;br&gt;
Make your First contribution to the &lt;a href="https://github.com/tinkerhubmace/mashithandu"&gt;Mashithandu&lt;/a&gt; project.

&lt;p&gt;Here is how to contribute to Mashithandu...&lt;/p&gt;

&lt;p&gt;Step 1: Head over to &lt;a href="https://github.com/tinkerhubmace/mashithandu/tree/main/TinkerHub%20MACE"&gt;this link&lt;/a&gt; and simply follow the instructions provided there.&lt;br&gt;
Step 2: There is no step 2... It's easy as that! 😉&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#loved-contributing-how-about-one-more-then"&gt;
  &lt;/a&gt;
  Loved contributing?🙅 How about one more then? 😁
&lt;/h4&gt;


&lt;h2&gt;
  &lt;a href="#wikisyllabus"&gt;
  &lt;/a&gt;
  WikiSyllabus
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/gtechatfg"&gt;
        gtechatfg
      &lt;/a&gt; / &lt;a href="https://github.com/gtechatfg/WikiSyllabus"&gt;
        WikiSyllabus
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A collaborative project to build an evolving website/wiki to host, enhance, link, extend &amp;amp; update the university syllabus to help students find a way to connect their education to what’s new in the industry.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
WikiSyllabus : Take your syllabus online&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/gtechatfg/WikiSyllabus#contributors-"&gt;&lt;img src="https://camo.githubusercontent.com/53f9a656235e69ec7d261f9ee1fc301bc8f717185e15dfa7fcbac37230f65b5f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f616c6c5f636f6e7472696275746f72732d332d6f72616e67652e7376673f7374796c653d666c61742d737175617265" alt="All Contributors"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A collaborative project to build an evolving website/wiki to host, enhance, link, extend &amp;amp; update the university syllabus to help students find a way to connect their education to what’s new in the industry.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gtechatfg/WikiSyllabus/blob/main/CONTRIBUTING.md"&gt;How to Contribute ?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Contributors ✨
&lt;/h2&gt;
&lt;p&gt;Thanks goes to these wonderful people (&lt;a href="https://allcontributors.org/docs/en/emoji-key" rel="nofollow"&gt;emoji key&lt;/a&gt;):&lt;/p&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tbody&gt;
&lt;tr&gt;
    &lt;td&gt;
&lt;a href="https://github.com/CLiz17"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sWNhKRn2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/68838221%3Fv%3D4%3Fs%3D100" width="100px;" alt=""&gt;&lt;br&gt;&lt;b&gt; Chaitanya Liz&lt;/b&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/gtechatfg/WikiSyllabus/commits?author=CLiz17" title="Code"&gt;💻&lt;/a&gt;
&lt;/td&gt;
    &lt;td&gt;
&lt;a href="https://github.com/umavm"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KSHAkpe1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/80395383%3Fv%3D4%3Fs%3D100" width="100px;" alt=""&gt;&lt;br&gt;&lt;b&gt;Uma V Menon &lt;/b&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/gtechatfg/WikiSyllabus/commits?author=umavm" title="Code"&gt;💻&lt;/a&gt;
&lt;/td&gt;
    &lt;td&gt;
&lt;a href="https://github.com/Angelrose19"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VyZUvceM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://avatars.githubusercontent.com/u/84169295%3Fv%3D4%3Fs%3D100" width="100px;" alt=""&gt;&lt;br&gt;&lt;b&gt;Angel Rose&lt;/b&gt;&lt;/a&gt;&lt;br&gt;&lt;a href="https://github.com/gtechatfg/WikiSyllabus/commits?author=Angelrose19" title="Code"&gt;💻&lt;/a&gt;
&lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;



&lt;p&gt;This project follows the &lt;a href="https://github.com/all-contributors/all-contributors"&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind welcome!&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/gtechatfg/WikiSyllabus"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;p&gt;&lt;a href="https://github.com/gtechatfg/WikiSyllabus"&gt;WikiSyllabus&lt;/a&gt; is a collaborative project to build an evolving website/wiki to host, enhance, link, extend &amp;amp; update the university syllabus to help students find a way to connect their education to what’s new in the industry.&lt;br&gt;
Head over to &lt;a href="https://github.com/gtechatfg/WikiSyllabus/blob/main/CONTRIBUTING.md"&gt;this link&lt;/a&gt; for further instructions on how to contribute!&lt;/p&gt;

&lt;p&gt;💚 Love OpenSource?&lt;/p&gt;

&lt;p&gt;Here are some more repos to contribute&lt;br&gt;
&lt;a href="https://hacktoberfest.digitalocean.com/resources/beginners"&gt;https://hacktoberfest.digitalocean.com/resources/beginners&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;



&lt;pre&gt;
    ❤️ &lt;a href="https://linktr.ee/tinkerhub.mace"&gt;Join US&lt;/a&gt;  |  📷&lt;a href="https://www.instagram.com/tinkerhub.mace/"&gt;Instagram &lt;/a&gt;  |  💼&lt;a href="https://www.linkedin.com/company/tinkerhub-mace"&gt;LinkedIn&lt;/a&gt;   |  🐥&lt;a href="https://twitter.com/TinkerhubMace"&gt;Twitter&lt;/a&gt;    
&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://linktr.ee/tinkerhub.mace"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YXRcmU-3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ruj5t5aov5kej3u7i7de.png"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>hacktoberfest</category>
      <category>programming</category>
      <category>tinkerhubmace</category>
    </item>
    <item>
      <title>A deep dive into Javascript Object properties</title>
      <author>Mustapha Aouas</author>
      <pubDate>Mon, 18 Oct 2021 08:40:58 +0000</pubDate>
      <link>https://dev.to/mustapha/a-deep-dive-into-javascript-object-properties-598h</link>
      <guid>https://dev.to/mustapha/a-deep-dive-into-javascript-object-properties-598h</guid>
      <description>&lt;p&gt;In this post we’ll take a dive to see how objects are created then we'll talk about some interesting properties of object’s properties, but first let's start by taking a look at how we usually create an objects using object literals:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;numberplate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1234&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We have created an object containing a property &lt;code&gt;numberplate&lt;/code&gt; with a value of &lt;code&gt;'1234'&lt;/code&gt;. Behind the scene javascipt is using &lt;code&gt;Object.create&lt;/code&gt; method to create this object. This is how it looks like:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;numberplate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;enumerable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;configurable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1234&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The two snippets of code above are absolutely equivalent and you can see why we use object literals, but let's take a moment to understand what is happening in the second snippet.&lt;br&gt;
As a first argument the &lt;code&gt;Object.create&lt;/code&gt; takes the object which should be the prototype of the newly-created object, since we don't have/want any prototypal inheritance, we specify that it should take the default object prototype.&lt;br&gt;
More interestingly, the second argument specify the property descriptors to be added to the newly-created object, with the corresponding property names.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that you can also use &lt;code&gt;Object.defineProperties&lt;/code&gt; or &lt;code&gt;Object.defineProperty&lt;/code&gt; to specify property descriptors for any given object. More on it &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties"&gt;here&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's see what each property descriptor is responsible of.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#property-descriptors"&gt;
  &lt;/a&gt;
  Property descriptors
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#writable"&gt;
  &lt;/a&gt;
  Writable
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;writable&lt;/code&gt; property descriptor defines whether the property (in this case &lt;code&gt;numberplate&lt;/code&gt;) value can be changed from its initial value.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;numberplate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1234&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numberplate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numberplate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; Uncaught TypeError&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Note that if you don't use strict mode (with &lt;code&gt;'use strict'&lt;/code&gt;)  in the exemple above, the interpreter will not throw an error and the value will not be changed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is a caveat to be aware of. The &lt;code&gt;writable&lt;/code&gt; property descriptor stops the pointer of the property from moving. that means if the property points toward an object, the members of that object can still be changed, for exemple:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;plane&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;numberplate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1234&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;plane&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numberplate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;plane&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numberplate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;plane&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numberplate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; '0000'&lt;/span&gt;

&lt;span class="nx"&gt;plane&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numberplate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; Uncaught TypeError&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#enumerable"&gt;
  &lt;/a&gt;
  Enumerable
&lt;/h3&gt;

&lt;p&gt;By default object properties are enumerable, so we can enumerate over them with &lt;code&gt;for...in&lt;/code&gt; loops and we can get them as an array with &lt;code&gt;Object.keys&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that the difference between these two ways of getting the enumerable properties is that &lt;code&gt;Object.keys&lt;/code&gt; returns only an array with the own properties of the object, while the &lt;code&gt;for...in&lt;/code&gt; loop returns also the keys found in the prototype chain.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;numberplate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1234&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;brand&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Koenigsegg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numberplate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;enumerable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; [brand]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Setting &lt;code&gt;enumerable&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; will also affect the &lt;code&gt;JSON&lt;/code&gt; serialisation of the property as it won't be serialised. That can be useful in some cases.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#configurable"&gt;
  &lt;/a&gt;
  Configurable
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;configurable&lt;/code&gt; descriptor of a property prevents the descriptors (of that given property ex: &lt;code&gt;platenumber&lt;/code&gt;) from being changed. Also it prevents the property from being deleted from the object. Let's see an exemple:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;numberplate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1234&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numberplate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;configurable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numberplate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; Uncaught TypeError&lt;/span&gt;

&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numberplate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;enumerable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; Uncaught TypeError&lt;/span&gt;

&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numberplate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;configurable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; Uncaught TypeError&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Once you set the configurable descriptor of a property to &lt;code&gt;false&lt;/code&gt;, you can not switch it back to &lt;code&gt;true&lt;/code&gt; later.&lt;/p&gt;

&lt;p&gt;One caveat to be aware of is that even if you set &lt;code&gt;configurable&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;, you still can change the &lt;code&gt;writable&lt;/code&gt; descriptor.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#value"&gt;
  &lt;/a&gt;
  Value
&lt;/h3&gt;

&lt;p&gt;Finally the value descriptor is here to set or change the value of the property.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="na"&gt;numberplate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1234&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;numberplate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numberplate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; '0000'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#setter-and-getter"&gt;
  &lt;/a&gt;
  Setter and getter
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#getters"&gt;
  &lt;/a&gt;
  Getters
&lt;/h3&gt;

&lt;p&gt;Another useful thing you could also do with &lt;code&gt;Object.create&lt;/code&gt; (or &lt;code&gt;Object.defineProperty&lt;/code&gt; or &lt;code&gt;Object.defineProperties&lt;/code&gt;) is implementing setters and getters. Let's see how we can do it.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;point&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;point&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;position&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;point&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; [0, 0]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To create a getter, you set the &lt;code&gt;get&lt;/code&gt; attribute to a function, this function is our getter.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#setters"&gt;
  &lt;/a&gt;
  Setters
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;point&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;point&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;position&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pointArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pointArray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;point&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;point&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; 4&lt;/span&gt;
&lt;span class="nx"&gt;point&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Like we did for the getter, to implement a setter we set the &lt;code&gt;set&lt;/code&gt; attribute to a function that takes an argument, the argument is the value you want to set.&lt;/p&gt;

&lt;p&gt;Note that when you set a getter or setter for a property, it can't have a writable or a value property descriptor. See below:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getOwnPropertyDescriptor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;point&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;position&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// -&amp;gt; { enumerable: false,&lt;/span&gt;
   &lt;span class="c1"&gt;//      configurable: false,&lt;/span&gt;
   &lt;span class="c1"&gt;//      get: ƒ, set: ƒ }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Notice that when you set a getter or a setter, the &lt;code&gt;enumerable&lt;/code&gt; and &lt;code&gt;configurable&lt;/code&gt; descriptors are automatically set to &lt;code&gt;false&lt;/code&gt;. So you may want to set the getters and the setters in the same expression, or manually set &lt;code&gt;configurable&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; while implementing them.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;That's it for this post. I hope you liked it. If you did, please share it with your friends and colleagues. Also you can follow me on twitter at &lt;a href="https://twitter.com/TheAngularGuy"&gt;@theAngularGuy&lt;/a&gt; as it would greatly help me.&lt;/p&gt;

&lt;p&gt;Next week we will talk about ES6 classes and how they compare to constructor functions, so make sure to stay around.&lt;br&gt;
Have a nice day and see you soon.&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#what-to-read-next"&gt;
  &lt;/a&gt;
  What to read next?
&lt;/h4&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mustapha" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TjMto4tb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Bz3nRw5I--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/174804/95610498-02ee-4f3f-846b-b85ccb539f0a.jpg" alt="mustapha"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mustapha/css-grid-illustrated-introduction-52l5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;CSS Grid: illustrated introduction&lt;/h2&gt;
      &lt;h3&gt;Mustapha Aouas ・ Sep 12 '19 ・ 12 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>5 Tips to Scale your App</title>
      <author>Aidan Gee</author>
      <pubDate>Mon, 18 Oct 2021 08:34:46 +0000</pubDate>
      <link>https://dev.to/aidangee/5-tips-to-scale-your-app-11ck</link>
      <guid>https://dev.to/aidangee/5-tips-to-scale-your-app-11ck</guid>
      <description>&lt;p&gt;Original Post: &lt;a href="https://aidangee.dev/blog/5-tips-to-help-scale-your-app-scale"&gt;https://aidangee.dev/blog/5-tips-to-help-scale-your-app-scale&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;You want your multichannel application to grow and have more users. But as this grows you will need to be able to handle the increased traffic whilst also balancing the cost of infrastructure. If you get that big brand customer you don't want them to take down your service for themselves and other customers! (seen this first hand!)&lt;/p&gt;

&lt;p&gt;The quick solution is often to vertically or horizontally scale the compute, but costs can quickly get out of control. &lt;/p&gt;

&lt;p&gt;I have worked on both small and extremely high traffic applications and wanted to share some techniques I have seen successfully used.   &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-serverless"&gt;
  &lt;/a&gt;
  1. Serverless
&lt;/h2&gt;

&lt;p&gt;Serverless Architecture is ideal for allowing an initially small web application to scale over time. Serverless infrastructure is both auto-scaling and pay per use. So whilst your app is small you will not need to pay for idle compute costs and when the time comes you have the capacity for significant growth in the future.&lt;/p&gt;

&lt;p&gt;This fits well with applications that have a 'spikey' traffic pattern. For example ticket sales or product launches, in these use cases the user traffic is generally condensed into a short window of time and serverless compute like lambda or cloud functions allow for the instant scale needed to support this. Whilst keeping costs low. &lt;/p&gt;

&lt;p&gt;This doesn't just end with compute, there is a growing number of serverless database solutions as well. DynamoDB, MongoDB, FaunaDB, Aurora these all offer a serverless way to store your data. Meaning there is little to no infrastructure for you to worry about managing across your stack.&lt;/p&gt;

&lt;p&gt;Example of a Serverless Application built on top of AWS:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cuSYsdhP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1.awsstatic.com/diagrams/Serverless_Architecture.5434f715486a0bdd5786cd1c084cd96efa82438f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cuSYsdhP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1.awsstatic.com/diagrams/Serverless_Architecture.5434f715486a0bdd5786cd1c084cd96efa82438f.png" alt="AWS Serverless stack diagram" title="AWS Serverless Stack from https://aws.amazon.com/getting-started/hands-on/build-serverless-web-app-lambda-apigateway-s3-dynamodb-cognito/"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What to check out: &lt;a href="https://www.serverless.com/"&gt;Serverless Framework&lt;/a&gt;, &lt;a href="https://aws.amazon.com/lambda/"&gt;Lambda&lt;/a&gt;, &lt;a href="https://cloud.google.com/functions"&gt;Cloud Functions&lt;/a&gt;, &lt;a href="https://cloud.google.com/run"&gt;Cloud Run&lt;/a&gt;, &lt;a href="https://workers.cloudflare.com/"&gt;Cloudflare Workers&lt;/a&gt;, &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-client-side-rendering-prerendering-hybrid"&gt;
  &lt;/a&gt;
  2. Client side rendering / Pre-rendering / Hybrid
&lt;/h2&gt;

&lt;p&gt;Depending on the user experience you need to provide and your SEO requirements, the way you render your UI can make a big difference to how your application scales. &lt;/p&gt;

&lt;p&gt;If your application is purely server side rendered, it might be worth asking yourself the question "does it need to be?". Moving some server-side work to the user's browser or pre-rendering it at build time could save on some resources. For example, in the past I have moved an e-commerce website's checkout process to an SPA which cut down the traffic hitting their web servers on average by 30%. This made a big difference to infrastructure costs and scale at high traffic events. With little change to the users experience. &lt;/p&gt;

&lt;p&gt;This is a varied subject based on your use case, I have written a &lt;a href="https://aidangee.dev/blog/quick-tip-javascript-rendering"&gt;whole post on rendering options with JavaScript&lt;/a&gt; if you want to learn more.&lt;/p&gt;

&lt;p&gt;Theres also a &lt;a href="https://www.youtube.com/watch?v=860d8usGC0o"&gt;fantastic talk&lt;/a&gt; recently from Rich Harris (Svelte Maintainer) on the trade-offs between server rendering and SPA's. &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-queues-amp-asynchronous-workers"&gt;
  &lt;/a&gt;
  3. Queues &amp;amp; Asynchronous Workers
&lt;/h2&gt;

&lt;p&gt;Queues and background workers can help improve the scalability of your application by offloading slow or intensive tasks. This is commonly by decoupling a user action from some processing that could cause a backlog and effect performance.&lt;/p&gt;

&lt;p&gt;Some common examples of this might be uploading an image, generating a report or processing a video. If we take the example of generating a report for a large dataset, this might take a few minutes for a user. You do &lt;em&gt;not&lt;/em&gt; want this process using up a large amount of resources and holding open connections on the same infrastructure that is dealing with the requests of your other users. You risk an extra large report or a few reports running simultaneously to start effecting performance or cost. &lt;/p&gt;

&lt;p&gt;Shifting this work to the background can allow this to be dealt with predictably. Sending these requests to a queue that can push (or pull) the work to a set of worker processes allows you to control the scaling of infrastructure and not risk the affecting other requests coming in. &lt;/p&gt;

&lt;p&gt;What to check out: &lt;a href="https://aws.amazon.com/sqs/"&gt;AWS SQS&lt;/a&gt;, &lt;a href="https://cloud.google.com/tasks"&gt;Cloud Tasks&lt;/a&gt;, &lt;a href="https://render.com/docs/background-workers"&gt;render.com background workers&lt;/a&gt;, &lt;a href="https://devcenter.heroku.com/articles/background-jobs-queueing"&gt;Heroku workers&lt;/a&gt;, &lt;a href="https://github.com/gocraft/work"&gt;Go Worker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-spot-preemptible-instances"&gt;
  &lt;/a&gt;
  4. Spot / Preemptible Instances
&lt;/h2&gt;

&lt;p&gt;If you have auto-scaling servers, costs can quickly rack up as you grow. Spot instances (&lt;a href="https://cloud.google.com/compute/docs/instances/preemptible"&gt;preemptible VMs on GCP&lt;/a&gt;) make use of unused compute for upto 90% savings on the usual on-demand price. &lt;/p&gt;

&lt;p&gt;Integrating with spot instances has been made much easier the past year or so with integrations with EC2 auto-scaling and &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet.html"&gt;Spot fleet&lt;/a&gt;. But there can still be some responsibility to handle interruptions and rebalancing if your application is not 'fault-tolerant'. To take away these concerns services like &lt;a href="https://spot.io/solutions/amazon-web-services/"&gt;Spot&lt;/a&gt; can guarantee a high availability and abstract away some of the complexities. &lt;/p&gt;

&lt;p&gt;What to check out: &lt;a href="https://aws.amazon.com/ec2/spot/"&gt;Spot intances&lt;/a&gt;, &lt;a href="https://cloud.google.com/compute/docs/instances/preemptible"&gt;Preemptible VM instances&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-event-driven-architecture"&gt;
  &lt;/a&gt;
  5. Event Driven Architecture
&lt;/h2&gt;

&lt;p&gt;Applications usually start with monolithic design. A singular running process to do everything from logging &amp;amp; metrics to sending emails. If part of that fails, or you get a long running task, then this could clog up the system.&lt;/p&gt;

&lt;p&gt;An event driven approach allows you to decouple these different pieces into seperate services that can scale &amp;amp; fail independently of one another. This system uses events to trigger and communicate between decoupled services. &lt;br&gt;
 &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y96f34Ir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/wubo/image/upload/f_auto/v1634050228/blog/simple-event-driven-architecture-diagram_zsgrmg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y96f34Ir--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/wubo/image/upload/f_auto/v1634050228/blog/simple-event-driven-architecture-diagram_zsgrmg.png" alt="A simple example of event driven architecture"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;/p&gt;

&lt;p&gt;What to check out: &lt;a href="https://pages.awscloud.com/AWS-Learning-Path-How-to-Use-Amazon-EventBridge-to-Build-Decoupled-Event-Driven-Architectures_2020_LP_0001-SRV.html"&gt;AWS video series&lt;/a&gt;, &lt;a href=""&gt;Event Bridge&lt;/a&gt;, &lt;a href="https://cloud.google.com/eventarc/docs/overview%5D"&gt;Eventarc&lt;/a&gt;&lt;br&gt;
 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-monitoring"&gt;
  &lt;/a&gt;
  Bonus: Monitoring!
&lt;/h2&gt;

&lt;p&gt;Something that I think is often overlooked is the power of performance monitoring. How do you know if a new release is using significantly more resources, is it from your metrics or when you get the big infrastructure bill at the end of the month?&lt;/p&gt;

&lt;p&gt;Theres a ton of Application monitoring solutions out there with integrations for all types of languages. &lt;a href="https://newrelic.com/"&gt;New Relic&lt;/a&gt; &amp;amp; &lt;a href="https://www.datadoghq.com/"&gt;DataDog&lt;/a&gt; are 2 popular examples. They allow you to get much more fined grained than just CPU, Memory usage &amp;amp; scaling. You can see information such as :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;External API performance&lt;/li&gt;
&lt;li&gt;Code-level visibility e.g. inspecting a particular methods performance&lt;/li&gt;
&lt;li&gt;Traces for slow performing request&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And way more !&lt;/p&gt;

&lt;p&gt;Performance monitoring can help you stay scalable whilst you continue to make changes. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>architecture</category>
      <category>devops</category>
      <category>aws</category>
    </item>
    <item>
      <title>Running out of memory when running `craco build` on bitbucket pipline</title>
      <author>Theivendram Athavan</author>
      <pubDate>Mon, 18 Oct 2021 08:21:17 +0000</pubDate>
      <link>https://dev.to/aaketk17/running-out-of-memory-when-running-craco-build-on-bitbucket-pipline-1j00</link>
      <guid>https://dev.to/aaketk17/running-out-of-memory-when-running-craco-build-on-bitbucket-pipline-1j00</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bljvRFby--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ri2d5qo4p11sdn3klxha.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bljvRFby--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ri2d5qo4p11sdn3klxha.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;got this error when deploying the branch in gitlab. changes made before the deployment were ( in package.json )&lt;/p&gt;

&lt;p&gt;"scripts": {&lt;br&gt;
"start": "craco start",&lt;br&gt;
"build": "craco build",&lt;br&gt;
"test": "craco test",&lt;br&gt;
"eject": "react-scripts eject",&lt;br&gt;
"format": "prettier --write src/&lt;strong&gt;/*.ts{,x}",&lt;br&gt;
"lint": "tsc --noEmit &amp;amp;&amp;amp; eslint src/&lt;/strong&gt;/*.ts{,x}"&lt;/p&gt;

&lt;p&gt;},&lt;/p&gt;

&lt;p&gt;later fixed this error by modifying the above script as follows&lt;/p&gt;

&lt;p&gt;"scripts": {&lt;br&gt;
    "start": "craco --max_old_space_size=4096 start",&lt;br&gt;
    "build": "craco --max_old_space_size=4096 build",&lt;br&gt;
    "test": "craco test",&lt;br&gt;
    "eject": "react-scripts eject",&lt;br&gt;
    "format": "prettier --write src/&lt;strong&gt;/*.ts{,x}",&lt;br&gt;
    "lint": "tsc --noEmit &amp;amp;&amp;amp; eslint src/&lt;/strong&gt;/*.ts{,x}"&lt;br&gt;
  },&lt;/p&gt;

&lt;p&gt;am new to craco. I have used craco to customize the antd theme and followed the guidelines mention in their documentation. later on, I went through the usage of craco but still, I don't have complete knowledge in craco. I need some explanation why it has not given an error without craco and it's giving an error when using craco. so does this mean craco will consume more memory than using react-script start&lt;/p&gt;

</description>
      <category>craco</category>
      <category>javascript</category>
      <category>react</category>
      <category>gitlab</category>
    </item>
    <item>
      <title>AWS open source news and updates #86</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Mon, 18 Oct 2021 08:15:56 +0000</pubDate>
      <link>https://dev.to/aws/aws-open-source-news-and-updates-86-2hpa</link>
      <guid>https://dev.to/aws/aws-open-source-news-and-updates-86-2hpa</guid>
      <description>&lt;h2&gt;
  &lt;a href="#october-18th-2021-instalment-86"&gt;
  &lt;/a&gt;
  October 18th, 2021 - Instalment #86
&lt;/h2&gt;

&lt;p&gt;Newsletter #86.&lt;/p&gt;

&lt;p&gt;This week we have a very broad variety of topics. Starting off with some fresh open source projects such as cfn-diagram, aws-jwt-verify, damo, aws-dotnet-deploy, automated-account-configuration, BayerCLAW and more. For mains, we have new AWS and community authored posts on MySQL, OpenSearch, .NET, miniwdl, OpenMRS, Apache Hudi, Apache Spark, ROS, cdk8s, Jax, Deep Graph Library and more. Finally, for pudding we have this weeks video that provides an insight into contributing to Apache Airflow and we have some new events added so check those out and add them to your diary. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#celebrating-open-source-contributors"&gt;
  &lt;/a&gt;
  Celebrating open source contributors
&lt;/h3&gt;

&lt;p&gt;The articles posted in this series are only possible thanks to contributors and project maintainers and so I would like to shout out and thank those folks who really do power open source and enable us all to build on top of what they have created. &lt;/p&gt;

&lt;p&gt;So thank you to the following open source heroes: Ian Avilez, Tim Pavlick, Jarek Potiuk, Ash Berlin-Taylor, Norm Johanson, Trivikram Kamat, Madhavan Sriram, Diego Menin, Gabriele Cacciola, Kunal Gautam, Mike Lin, Lee Pang, Krishna Singh, Razvan Ionasec, Archis Joglekar, Sean Morgan, Eddie Zaneski, Rohin Bhargava, Gopala Krishna, Saikumar Karanam, François Bouteruche and Nik Krichko.&lt;/p&gt;

&lt;p&gt;Make sure you find and follow these builders and keep up to date with their open source projects and contributions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#latest-open-source-projects"&gt;
  &lt;/a&gt;
  Latest open source projects
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;cfn-diagram&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/4r"&gt;cfn-diagram&lt;/a&gt; whilst I did cover this project back in Feb, I was &lt;a href="https://aws-oss.beachgeek.co.uk/10b"&gt;notified&lt;/a&gt; by Lars from Mathem that there was now a new capability, ascii graphics.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z9lTaOLN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/mhlabs/cfn-diagram/master/demo-ascii.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z9lTaOLN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/mhlabs/cfn-diagram/master/demo-ascii.gif" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-jwt-verify&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/10c"&gt;aws-jwt-verify&lt;/a&gt; this project provides a NodeJS library for verifying JWTs signed by Amazon Cognito, and any OIDC-compatible IDP that signs JWTs with RS256 (currently, only signature algorithm RS256 is supported)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-appconfig-codepipeline-cdk&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/10d"&gt;aws-appconfig-codepipeline-cdk&lt;/a&gt; this project provides a sample application demos setup of AWS AppConfig using AWS CDK. AWS AppConfig application is set up to use AWS CodePipeline as configuration store. It also sets up AWS Lambda validator to validate the configuration.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jkz3zk6U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/aws-appconfig-codepipeline-cdk/blob/main/infrastructure/src/main/resources/asset/arch.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jkz3zk6U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/aws-appconfig-codepipeline-cdk/blob/main/infrastructure/src/main/resources/asset/arch.png%3Fraw%3Dtrue" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-cloud-map-mcs-controller-for-k8s&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/10e"&gt;aws-cloud-map-mcs-controller-for-k8s&lt;/a&gt; this project that snuck out late last week, AWS Cloud Map multi-cluster service discovery for Kubernetes (K8s) is a controller that implements existing multi-cluster services API that allows services to communicate across multiple clusters. The implementation relies on AWS Cloud Map for enabling cross-cluster service discovery.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BayerCLAW&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/10f"&gt;BayerCLAW&lt;/a&gt; this project from the Bayer Group is a workflow orchestration system for AWS, targeted at bioinformatics pipelines. A workflow consists of a sequence of computational steps, each of which is captured in a Docker container. Some steps may parallelise work across many executions of the same container (scatter/gather pattern).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;damo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/10g"&gt;damo&lt;/a&gt; this is a cool project, damo is a user space tool for &lt;a href="https://aws-oss.beachgeek.co.uk/10h"&gt;DAMON&lt;/a&gt;. Using this, you can monitor the data access patterns of your system or workloads and make data access-aware memory management optimisations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f3kV6hi2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/awslabs/damo/blob/next/images/damo_monitor_water_nsquared.gif%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f3kV6hi2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/awslabs/damo/blob/next/images/damo_monitor_water_nsquared.gif%3Fraw%3Dtrue" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-dotnet-deploy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/b7"&gt;aws-dotnet-deploy&lt;/a&gt; this repository contains the AWS .NET deployment tool for .NET CLI - the opinionated tooling that simplifies deployment of .NET applications with minimum AWS knowledge. The tool suggests the right AWS compute service to deploy your application to. It then builds and packages your application as required by the chosen compute service, generates the deployment infrastructure, deploys your application by using the Cloud Development Kit (CDK), and displays the endpoint. Norm Johanson has put together a couple of blog posts. First we have &lt;a href="https://aws-oss.beachgeek.co.uk/102"&gt;Update on our new AWS .NET Deployment Experience&lt;/a&gt; which provides you with an update of the recent updates to this project. Following that we have &lt;a href="https://aws-oss.beachgeek.co.uk/zz"&gt;Deployment Projects with the new AWS .NET Deployment Experience&lt;/a&gt; that walks you through a new feature of this project, deployment projects[hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;automated-account-configuration&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/zy"&gt;automated-account-configuration&lt;/a&gt; this project is the Automated Account Configuration, a sample solution to enable operational scale for AWS customers by automating repeatable steps required before AWS accounts are used for customer workloads. Steps include setting up backups and patching for the resources within the account.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LckqUrKm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1.awsstatic.com/Solutions/Solutions%2520Category%2520Template%2520Draft/Solution%2520Architecture%2520Diagrams/automated-account-config-architecture.34216591b80a575a38cd215fe59608925054d50f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LckqUrKm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1.awsstatic.com/Solutions/Solutions%2520Category%2520Template%2520Draft/Solution%2520Architecture%2520Diagrams/automated-account-config-architecture.34216591b80a575a38cd215fe59608925054d50f.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-and-community-blog-posts"&gt;
  &lt;/a&gt;
  AWS and Community blog posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;MySQL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nik Krichko has put together this post, &lt;a href="https://aws-oss.beachgeek.co.uk/10i"&gt;Comparing Graviton (ARM) Performance to Intel and AMD for MySQL&lt;/a&gt; that takes a closer look at running MySQL against different instance types on AWS to see what the different performance characteristics are. If you are running MySQL workloads you should check this out - no spoilers, but very interesting indeed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;headless-recorder&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon CloudWatch Synthetics to create canaries, configurable scripts that run on a schedule, to monitor your endpoints and APIs. Canaries offer programmatic access to a headless Google Chrome Browser via Puppeteer or Selenium Webdriver. Amazon provides a CloudWatch Synthetics Recorder to help you create canaries more easily. The recorder is a Google Chrome extension and based on the open source project,  &lt;a href="https://aws-oss.beachgeek.co.uk/10a"&gt;Headless recorder&lt;/a&gt;. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/109"&gt;Visual monitoring of applications with Amazon CloudWatch Synthetics&lt;/a&gt; Mahanth Jayadeva and Yesh Ravindra walk through how the visual monitoring blueprint for Amazon CloudWatch Synthetics can be utilised to monitor your applications for visual defects. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rftetKtx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2021/10/04/9-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rftetKtx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2021/10/04/9-1.png" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.NET&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My colleague François Bouteruche is back with another instalment of the story of My Local Farmer, a fictional company inspired by customer interactions with AWS Solutions Architects. This episode, &lt;a href="https://aws-oss.beachgeek.co.uk/108"&gt;Migrating our trusty ol’ .NET Framework applications to AWS, I couldn’t believe it!&lt;/a&gt; takes a look at a number of open source projects you can use to help move your .NET workloads over to AWS. Tres bien!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cdk8s&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Perfect timing with Kubecon last week, was Eddie Zaneski in his post, &lt;a href="https://aws-oss.beachgeek.co.uk/106"&gt;Announcing the general availability of cdk8s and support for Go&lt;/a&gt;. For those who may not be familiar with cdk8s, this is a CNCF Sandbox project, an open-source software development framework for defining Kubernetes applications using general-purpose programming languages. The output of a CDK8s program is Kubernetes YAML that you can apply directly to any cluster.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenSearch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Rohin Bhargava, Gopala Krishna, and Saikumar Karanam provide a brief overview of the cross-cluster replication feature within OpenSearch, and the thought process behind the design and implementation. Read on in &lt;a href="https://aws-oss.beachgeek.co.uk/107"&gt;Introduction to Cross-Cluster Replication&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jax&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JAX is NumPy on the CPU, GPU, and TPU, with great automatic differentiation for high-performance machine learning research. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/105"&gt;Train and deploy deep learning models using JAX with Amazon SageMaker&lt;/a&gt; Archis Joglekar and Sean Morgan show how you can utilise the Bring Your Own Container (BYOC) paradigm to train ML models on GPUs using the increasingly popular JAX library from Google. As a bonus, the post shows how to serialise trained models into the TensorFlow SavedModel format so that we can use the existing TensorFlow Serving infrastructure provided by SageMaker. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deep Graph Library&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ian Avilez and Tim Pavlick from HawkEye 360 provide some insights in how they are using the open source Deep Graph Library and Amazon Neptune to find risks for nearby ships in the post &lt;a href="https://aws-oss.beachgeek.co.uk/10j"&gt;HawkEye 360 predicts vessel risk using the Deep Graph Library and Amazon Neptune&lt;/a&gt;. The graph networks in Neptune and GNN models enable HawkEye 360 to reveal hidden relationships among vessels that would otherwise be lost in the vast sea of complexity. Read on to find out more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--umYi_AmQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2021/09/07/image001-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--umYi_AmQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2021/09/07/image001-1.png" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenMRS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;OpenMRS is a collaborative open-source project to develop software to support the delivery of health care. In the post &lt;a href="https://aws-oss.beachgeek.co.uk/104"&gt;Deploying OpenMRS Electronic Health Record (EHR) system on AWS&lt;/a&gt;, Krishna Singh and Razvan Ionasec explore how to deploy a OpenMRS EHR system on AWS so you can support hundreds of concurrent HCP users and tens of thousands of patients. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nVQJzfdk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/10/05/kbs_openmrs-aws_f1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nVQJzfdk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/10/05/kbs_openmrs-aws_f1.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;miniwdl&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Workflow Description Language (WDL) is a way to specify data processing workflows with a human-readable and -writeable syntax. WDL makes it straightforward to define analysis tasks, chain them together in workflows, and parallelise their execution. miniwdl is a local runner and developer toolkit for the bioinformatics-focused Workflow Description Language (WDL). In the blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/103"&gt;Using miniwdl, GWFCore, and SageMaker Studio as a cloud IDE for genomics workflows&lt;/a&gt; written by Mike Lin and Lee Pang, will show you how you can combine these open source tools together with AWS to build workflows and manage ad hoc analysis runs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J8zlcFMv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/c5b76da3e608d34edb07244cd9b875ee86906328/2021/10/11/VPC-in-Cloud.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J8zlcFMv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/c5b76da3e608d34edb07244cd9b875ee86906328/2021/10/11/VPC-in-Cloud.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Hudi&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Apache Hudi is an open-source data management framework used to simplify incremental data processing and data pipeline development. In this case study from Amazon's Transportation service, they share how they enabled near-real-time event analytics at petabyte scale using Apache Hudi tables created by AWS Glue Spark jobs. For data analytics afficiondos, read on in &lt;a href="https://aws-oss.beachgeek.co.uk/101"&gt;How Amazon Transportation Service enabled near-real-time event analytics at petabyte scale using AWS Glue with Apache Hudi&lt;/a&gt; [warning, may contain gratuitous use of graphs!]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZKIoCarT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2021/10/01/BDB1611-image001.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZKIoCarT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/b6692ea5df920cad691c20319a6fffd7a4a766b8/2021/10/01/BDB1611-image001.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS SDKs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Trivikram Kamat shares how they were able to reduce the publish size of v3 SDK for Javascript modular packages by ~50% in the post, &lt;a href="https://aws-oss.beachgeek.co.uk/100"&gt;How we halved the publish size of modular AWS SDK for JavaScript clients&lt;/a&gt;. A must read this week.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FBOKRg4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/0716d9708d321ffb6a00818614779e779925365c/2021/10/14/aws_sdk_client_sts_install_size_reduction_packagephobia-1024x787.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FBOKRg4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/0716d9708d321ffb6a00818614779e779925365c/2021/10/14/aws_sdk_client_sts_install_size_reduction_packagephobia-1024x787.png" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#open-data"&gt;
  &lt;/a&gt;
  Open Data
&lt;/h3&gt;

&lt;p&gt;Whilst not open source, open data sets help democratise access to data by making it available to the public for analysis on AWS; develop new cloud-native techniques, formats, and tools that lower the cost of working with data; and encourage the development of communities that benefit from access to shared datasets. In the post, &lt;a href="https://aws-oss.beachgeek.co.uk/10k"&gt;Climate data, koala genomes, analysis ready radar data, and highly-queryable genomic data: The latest open data on AWS&lt;/a&gt; Joe Flasher shares 26 new data sets released.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-updates"&gt;
  &lt;/a&gt;
  Quick updates
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Apache Spark&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon EMR 6.4 release version now supports Apache Spark 3.1.2 and provides runtime improvements with Amazon EMR Runtime for Apache Spark. Amazon EMR 6.4 provides Presto runtime improvements for PrestoDB 0.254, and runtime improvements for Apache Hive 3.1.2 when you use AWS Glue Data Catalog for your metastore.&lt;/p&gt;

&lt;p&gt;Amazon EMR 6.4 supports Apache Hudi 0.8.0, Trino 359, PrestoDB 0.254, Apache HBase 2.4.4, Apache Phoenix 5.1.2, Apache Flink 1.13.1, Apache Livy 0.7.1, JupyterHub 1.4.1, Apache Zookeeper 3.5.7 and Apache MXNet 1.8.0. Please see our release guide to learn more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ActiveMQ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can now launch Apache ActiveMQ 5.16.3 brokers on Amazon MQ. This version update to ActiveMQ contains several fixes and improvements compared to the previously supported version, ActiveMQ 5.16.2.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS CDK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;During September, 2021, 5 new versions of the AWS Cloud Development Kit  (CDK) for JavaScript, TypeScript, Java, Python, .NET and Go were released (v1.121.0 through v.125.0). With these releases, the CDK CLI now has support for hotswap deployments for faster inner-loop development iterations on the application code in your CDK project. Hotswap initially supports AWS Lambda handler code, but support is planned for additional resource types and a “watch” mode which continually watches for changes and deploys any updates. Additionally, users can preserve successfully provisioned resources by disabling automatic stack rollbacks, further reducing deployment and iteration time. These releases also resolve 21 issues and introduce 40 new features that span over 30 different modules across the library. Many of these changes were contributed by the developer community.&lt;/p&gt;

&lt;p&gt;Read the full release notes for &lt;a href="https://aws-oss.beachgeek.co.uk/zt"&gt;1.121.0&lt;/a&gt;, &lt;a href="https://aws-oss.beachgeek.co.uk/zu"&gt;1.122.0&lt;/a&gt;, &lt;a href="https://aws-oss.beachgeek.co.uk/zv"&gt;1.123.0&lt;/a&gt;, &lt;a href="https://aws-oss.beachgeek.co.uk/zw"&gt;1.124.0&lt;/a&gt;, &lt;a href="https://aws-oss.beachgeek.co.uk/zx"&gt;1.125.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ROS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS RoboMaker, a service that allows customers to simulate robotics applications at cloud scale, now supports GPU based simulation jobs for compute-intensive simulation workloads such as high fidelity simulation, vision processing, and machine learning (ML). Previously, AWS RoboMaker simulation jobs ran only on central processing unit (CPU) instances; now you can choose between a CPU based or GPU based simulation job. Developers can run, scale, and automate GPU based simulations. GPU based simulations support higher frames-per-second, higher resolutions, lower sensor latencies, and faster simulation job completion times than CPU based simulation jobs. These capabilities enable improved sensing by cameras and realistic rendering needed for use cases such as ML model training, reinforcement learning, and testing use cases that require high fidelity simulations. When running a GPU based simulation job, the AWS RoboMaker GUI tool viewer now supports higher resolutions, enabling you to see simulated objects in greater detail.&lt;/p&gt;

&lt;p&gt;Also new, AWS RoboMaker now supports expanded configuration for any robot and simulation software. Previously Robot Operating System (ROS) and Gazebo are the only supported robot and simulation software configuration in RoboMaker. This new feature enables customers to use and configure any robot and simulation software of their choice while running simulations in RoboMaker. To use this feature, you select General software suite for Robot application and Simulation runtime for Simulation Application. By choosing the Simulation Runtime configuration, RoboMaker bypasses validations for any specific robot or simulation software, and provides generic simulation features such as sourcing files to the simulation environment, logging, launching simulation tools, and streaming tool GUIs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video-of-the-week"&gt;
  &lt;/a&gt;
  Video of the week
&lt;/h3&gt;

&lt;p&gt;Want to contribute to Apache Airflow? Find out more as to how this works by checking out this video, where Jarek Potiuk and Ash Berlin-Taylor, Apache Airflow maintainers walk you through why developer and contributor experience matters for Apache Community projects such as Apache Airflow and what they have done together with other members of the community to improve it.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/7MOuUnCxmt8"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#events-for-your-diary"&gt;
  &lt;/a&gt;
  Events for your diary
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Enterprise Scale NLP with Hugging Face &amp;amp; SageMaker&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;October 26th 2021 - 5:00 PM (BST)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this workshop, &lt;a href="https://aws-oss.beachgeek.co.uk/10l"&gt;Getting Started with Amazon SageMaker: Training your first NLP Transformer model with Hugging Face&lt;/a&gt; you will learn how to use Amazon SageMaker to train a Hugging Face Transformer model and deploy it afterwards. The workshop covers preparing and uploading  test dataset to S3, fine-tuning a script to be used with Amazon SageMaker Training jobs, launching a training job and storing the trained model into S3 and then deploying the model after successful training.&lt;/p&gt;

&lt;p&gt;Everything you need will be provided, so &lt;a href="https://aws-oss.beachgeek.co.uk/10l"&gt;read more and register using this link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flink Forwards Global 2021&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;October 26th/27th&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Flink Forward Global 2021 is a 2-day virtual conference for the Apache Flink and stream processing communities. Apache Flink is an open-source distributed engine for processing data streams that can support both streaming and batch workloads. Flink Forward has keynote presentations and talks on production Flink use cases, technical deep dive sessions, and the growth of the Flink ecosystem. You can meet core Flink committers, new and experienced users, and thought leaders who share experiences and best practices in stream processing, real-time analytics, and the management of mission-critical Flink deployments in production.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/wh"&gt;Read more and sign up here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Databricks | AWS Lakehouse Dev Day Live Workshop&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;November 16th 9:00 AM PT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Delta Lake is an open source storage layer that provides ACID transactions, scalable metadata handling, and unifies streaming and batch data processing. You can use Delta Lake on top of your existing data lake. During this workshop you will learn how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make your existing Amazon S3 data lakes into a lakehouse with Delta Lake.
&lt;/li&gt;
&lt;li&gt;Provide an easy-to-use platform for analysts to directly query data on your data lake using SQL Analytics&lt;/li&gt;
&lt;li&gt;Simplify and automate data pipelines for streaming and batch data to lower costs and boost productivity for your data teams&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/zs"&gt;Read more and sign up here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stay-in-touch-with-open-source-at-aws"&gt;
  &lt;/a&gt;
  Stay in touch with open source at AWS
&lt;/h3&gt;

&lt;p&gt;I hope this summary has been useful. Remember to check out the &lt;a href="https://aws.amazon.com/opensource/?opensource-all.sort-by=item.additionalFields.startDate&amp;amp;opensource-all.sort-order=asc"&gt;Open Source homepage&lt;/a&gt; to keep up to date with all our activity in open source by following us on &lt;a href="https://twitter.com/AWSOpen"&gt;@AWSOpen&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>aws</category>
    </item>
    <item>
      <title>Build an Ecommerce Store with Next.js, Auth0 and Cloudinary</title>
      <author>nefejames</author>
      <pubDate>Mon, 18 Oct 2021 08:14:51 +0000</pubDate>
      <link>https://dev.to/hackmamba/build-an-ecommerce-store-with-nextjs-auth0-and-cloudinary-dgo</link>
      <guid>https://dev.to/hackmamba/build-an-ecommerce-store-with-nextjs-auth0-and-cloudinary-dgo</guid>
      <description>&lt;p&gt;Multimedia content optimization is the process of delivering high-quality media files in the right dimension, size, and format without sacrificing quality. &lt;/p&gt;

&lt;p&gt;When poorly optimized, the images and videos in your websites can lead to a poor user experience, loss of traffic, and low SEO rankings. &lt;/p&gt;

&lt;p&gt;In this article, we will learn how Cloudinary enables us to serve fast-loading images and videos through their CDN. We will also learn to set up user authentication with Auth0 and create responsive components with Chakra UI. We will combine these technologies to develop an eCommerce application.  &lt;/p&gt;

&lt;p&gt;We completed the project demo in &lt;a href="https://codesandbox.io/s/broken-wood-4vb7o"&gt;a codesandbox&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;You can find the deployed version &lt;a href="https://hackmamba-project-19or6wbnq-nefejames.vercel.app/"&gt;here&lt;/a&gt; and the codebase in this &lt;a href="https://github.com/nefejames/hackmamba-project"&gt;Github repo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisitesinstallation"&gt;
  &lt;/a&gt;
  Prerequisites/Installation
&lt;/h2&gt;

&lt;p&gt;Having some knowledge of and experience with, React.js and Chakra UI are required to follow the steps in this article. We will use the images and videos hosted on &lt;a href="https://cloudinary.com/"&gt;Cloudinary&lt;/a&gt; so you will need a &lt;a href="https://cloudinary.com/users/register/free"&gt;Cloudinary account&lt;/a&gt;. &lt;a href="https://auth0.com/"&gt;Auth0&lt;/a&gt; will handle the user authentication through their &lt;a href="https://auth0.com/docs/login/universal-login"&gt;universal login&lt;/a&gt; service, so you must &lt;a href="https://auth0.com/signu%20p"&gt;create an account&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As I mentioned earlier, we will be using Next.js in this project, so we need to &lt;a href="https://nextjs.org/docs/api-reference/create-next-ap"&gt;scaffold a new Next.js application&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We will also use the following packages in the application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/cloudinary/cloudinary-react"&gt;cloudinary-react&lt;/a&gt;’s Video component to display videos.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/auth0/nextjs-auth0"&gt;Auth0’s Next.js SDK&lt;/a&gt; to handle the user authentication.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/chakra-ui/chakra-ui"&gt;Chakra UI&lt;/a&gt; to create the user interface.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We install the required packages in our application using the CLI command:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i chakra-ui cloudinary-react auth0/nextjs-auth0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#creating-the-homepage"&gt;
  &lt;/a&gt;
  Creating the Homepage
&lt;/h2&gt;

&lt;p&gt;The homepage consists of a header and a hero section; the header consists of the logo and a login/sign-in button, and the hero consists of the website copy on the left and an image on the right.&lt;/p&gt;

&lt;p&gt;We can see the appearance of the homepage in the image below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jp8p1A9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_D65A090A5542872AAE6A8DDDEE64FCB43060C51AA27CE7D7D1C131AFDB8E304B_1632582978011_homepage.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jp8p1A9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_D65A090A5542872AAE6A8DDDEE64FCB43060C51AA27CE7D7D1C131AFDB8E304B_1632582978011_homepage.PNG" alt="PetShop Homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s begin by creating the layout for the homepage.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import { Box, Container } from "@chakra-ui/react";
    import HomeHeader from "@components/Headers/Home";

    export default function HomeLayout({ children }) {
      return (
        &amp;lt;Box&amp;gt;
          &amp;lt;Container maxW={"7xl"}&amp;gt;
            &amp;lt;HomeHeader /&amp;gt;

            {children}
          &amp;lt;/Container&amp;gt;
        &amp;lt;/Box&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the homepage layout, we create a component, &lt;code&gt;HomeLayout&lt;/code&gt;. &lt;code&gt;HomeLayout&lt;/code&gt; consists of a &lt;code&gt;HomeHeader&lt;/code&gt; component and the children we will pass into it later. &lt;code&gt;HomeLayout&lt;/code&gt; is where the hero section will sit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating the Homepage Header&lt;/strong&gt;&lt;br&gt;
Next, we create the homepage header.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import NextLink from "next/link";
    import { Box, Flex, Button } from "@chakra-ui/react";
    import Logo from "@svgs/Logo";

    export default function HomeHeader() {
      return (
        &amp;lt;Box&amp;gt;
          &amp;lt;Flex&amp;gt;
            &amp;lt;NextLink href="/" rel="noopener noreferrer" target="_blank"&amp;gt;
              &amp;lt;a&amp;gt;
                &amp;lt;Logo /&amp;gt;
              &amp;lt;/a&amp;gt;
            &amp;lt;/NextLink&amp;gt;
          &amp;lt;/Flex&amp;gt;      
        &amp;lt;/Box&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;HomeHeader&lt;/code&gt; component is made up of the Logo. We will add a login button later in the article.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating the Hero Section&lt;/strong&gt;&lt;br&gt;
Now, we move on to the hero section.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import { Stack, Flex, Box, Heading, Text, Image } from "@chakra-ui/react";
    import HomeLayout from "@layout/Home";

    export default function Home() {
      return (
        &amp;lt;HomeLayout&amp;gt;
          &amp;lt;Stack&amp;gt;
            &amp;lt;Stack flex={1} spacing={{ base: 5, md: 10 }}&amp;gt;
              &amp;lt;Heading lineHeight={1.1} fontWeight={600} fontSize={["3xl", "4xl", "6xl"]}
              &amp;gt;
                Get your perfect companion{" "}
                &amp;lt;Text as="span" color="blue.500"&amp;gt;
                  today!
                &amp;lt;/Text&amp;gt;
              &amp;lt;/Heading&amp;gt;
              &amp;lt;Text color="gray.200" fontSize={["lg"]}&amp;gt;
                Buyng a pet is a big decision, and we are here to help you through
                the process. It's time to add a new love to your family. Discover
                the right pet for you. It's time to find your new best friend.
              &amp;lt;/Text&amp;gt;
            &amp;lt;/Stack&amp;gt;
            &amp;lt;Flex&amp;gt;
              &amp;lt;Box&amp;gt;
                &amp;lt;Image alt="Hero Image" fit="cover" align="center" w="100%" h="100%"
                  src=" https://res.cloudinary.com/nefejames/image/upload/q_auto,f_auto,w_auto/v1632501665/Hackmamba/Images/hero.jpg"
                /&amp;gt;
              &amp;lt;/Box&amp;gt;
            &amp;lt;/Flex&amp;gt;
          &amp;lt;/Stack&amp;gt;
        &amp;lt;/HomeLayout&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The hero image is gotten from our Cloudinary media repository. Let’s breakdown the URL of the image:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;q_auto&lt;/code&gt;: produces a high quality image with a minimal the file size.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;f_auto&lt;/code&gt;: delivers the image in the best format supported by the browser.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;w_auto&lt;/code&gt;: serves images proportional to users’ device resolution and screen sizes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-dashboard"&gt;
  &lt;/a&gt;
  Creating the Dashboard
&lt;/h2&gt;

&lt;p&gt;The dashboard consists of a header, sidebar, and dashboard view that contains the products.&lt;br&gt;
The header consists of the logo and a button to toggle the sidebar.&lt;br&gt;
The sidebar consists of a link to illustrate how a dashboard looks in a full-scale application.&lt;/p&gt;

&lt;p&gt;Let’s start by creating the layout of the dashboard.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import { useMediaQuery, Box, Stack } from "@chakra-ui/react";
    import Header from "@components/Headers/Dashboard/";
    import Page from "./Page";
    import { DesktopSidebar, MobileSidebar } from "@components/DashboardSidebar";

    export default function DashboardLayout({ children }) {
      const [isSmallScreen] = useMediaQuery("(max-width: 768px)");

      return (
        &amp;lt;Box w="full"&amp;gt;
          &amp;lt;Header /&amp;gt;
          &amp;lt;Box pos="relative" h="max-content"&amp;gt;
            &amp;lt;Stack direction="row" spacing={{ md: 5 }}&amp;gt;
              &amp;lt;DesktopSidebar /&amp;gt;
              {isSmallScreen &amp;amp;&amp;amp; &amp;lt;MobileSidebar /&amp;gt;}
              &amp;lt;Page&amp;gt;{children}&amp;lt;/Page&amp;gt;
            &amp;lt;/Stack&amp;gt;
          &amp;lt;/Box&amp;gt;
        &amp;lt;/Box&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The dashboard layout consists of two dashboards, a mobile dashboard, and another for desktops.&lt;br&gt;
We create a &lt;code&gt;DashboardLayout&lt;/code&gt; component and use Chakra’s &lt;code&gt;[useMediaQuery](https://chakra-ui.com/docs/hooks/use-media-query)&lt;/code&gt; hook to set up a &lt;code&gt;isSmallScreen&lt;/code&gt; boolean. We show the mobile sidebar when &lt;code&gt;isSmallScreen&lt;/code&gt; is true - when the max-width is 768px.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Dashboard Context and Interactivity Flow&lt;/strong&gt;&lt;br&gt;
Before we continue building the dashboard, we need to understand its flow. We want to add some interactivity to the dashboard to boost the user experience.&lt;/p&gt;

&lt;p&gt;We want to be able to toggle the width of the desktop sidebar. We also want the mobile sidebar to slide in and out when toggled.  &lt;/p&gt;

&lt;p&gt;A core aspect of this functionality is a sidebar context, which we will create. The value of the sidebar context is gotten from Chakra UI’s &lt;code&gt;[useDisclosure](https://chakra-ui.com/docs/hooks/use-disclosure)&lt;/code&gt; &lt;a href="https://chakra-ui.com/docs/hooks/use-disclosure"&gt;&lt;/a&gt;hook. &lt;code&gt;useDisclosure&lt;/code&gt; is a custom hook used to help handle common open, close, or toggle scenarios.&lt;/p&gt;

&lt;p&gt;When setting up the sidebar, we will create and export a &lt;code&gt;useSidebarAuth&lt;/code&gt; hook that consumes the sidebar context and makes its values accessible throughout the application.&lt;/p&gt;

&lt;p&gt;We will pass the &lt;code&gt;useSidebarAuth&lt;/code&gt; hook to a &lt;code&gt;SidebarToggleButton&lt;/code&gt; component which we will create later. &lt;code&gt;SidebarToggleButton&lt;/code&gt; will enable us to toggle the sidebar context’s &lt;code&gt;isOpen&lt;/code&gt; value when clicked. We will pass &lt;code&gt;SidebarToggleButton&lt;/code&gt; to the dashboard header later.&lt;br&gt;
Whenever a user clicks the &lt;code&gt;SidebarToggleButton&lt;/code&gt;, we alter the behavior of the desktop or mobile sidebars based on the current value of &lt;code&gt;isOpen&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The flow chart image below shows us how the sidebar context works with the dashboard components and how we will set up the interactivity.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5YsxVirp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_D65A090A5542872AAE6A8DDDEE64FCB43060C51AA27CE7D7D1C131AFDB8E304B_1632614220694_Untitled%2BDiagram.drawio1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5YsxVirp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_D65A090A5542872AAE6A8DDDEE64FCB43060C51AA27CE7D7D1C131AFDB8E304B_1632614220694_Untitled%2BDiagram.drawio1.png" alt="dashboard context and interactivity flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating the Sidebar Context&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that we understand the sidebar context and how it is used in the dashboard, let us set up the context.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import { createContext, useContext } from "react";
    import { useDisclosure } from "@chakra-ui/react";

    const SidebarContext = createContext(null);
    export const useSidebarAuth = () =&amp;gt; useContext(SidebarContext);

    export default function SidebarContextProvider({ children }) {
      const sidebarState = useDisclosure();

      return (
        &amp;lt;SidebarContext.Provider value={sidebarState}&amp;gt;
          {children}
        &amp;lt;/SidebarContext.Provider&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As stated earlier, we use the &lt;code&gt;useDisclosure&lt;/code&gt; hook to set up the context and export a &lt;code&gt;useSidebarAuth&lt;/code&gt; hook that consumes the context.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating the Sidebar Toggle Button&lt;/strong&gt;&lt;br&gt;
The next thing we need to do is create the  &lt;code&gt;SidebarToggleButton&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import { Icon, IconButton } from "@chakra-ui/react";
    import { CgClose, CgMenu } from "react-icons/cg";
    import { useSidebarAuth } from "@context/sidebarContext";

    export default function SidebarToggleButton() {
      const { onToggle, isOpen } = useSidebarAuth();
      const icon = isOpen ? CgClose : CgMenu;
      return (
        &amp;lt;IconButton
          size="sm"
          fontSize="lg"
          variant="ghost"
          onClick={onToggle}
          icon={&amp;lt;Icon as={icon} /&amp;gt;}
          aria-label="Toggle Actions"
          transition="all .4s ease-in-out"
        /&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As explained earlier, when &lt;code&gt;SidebarToggleButton&lt;/code&gt; is clicked, the &lt;code&gt;isOpen&lt;/code&gt; value of the context is toggled.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating the Dashboard Header&lt;/strong&gt;&lt;br&gt;
Next we set up the dashboard header.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import NextLink from "next/link";
    import { Flex, Spacer, Stack, Button, Link } from "@chakra-ui/react";
    import SidebarToggleButton from "./components/SidebarToggleButton";
    import Logo from "@svgs/Logo";

    export default function DashboardHeader() {
      return (
        &amp;lt;Flex
          h="10vh"
          minH="70px"
          pos="sticky"
          top="0"
          zIndex="2"
        &amp;gt;
          &amp;lt;Stack direction="row" w="full" alignItems="center" spacing="8"&amp;gt;
            &amp;lt;NextLink href="/" rel="noopener noreferrer" target="_blank"&amp;gt;
              &amp;lt;a&amp;gt;
                &amp;lt;Logo /&amp;gt;
              &amp;lt;/a&amp;gt;
            &amp;lt;/NextLink&amp;gt;
            &amp;lt;SidebarToggleButton /&amp;gt;

          &amp;lt;/Stack&amp;gt;
        &amp;lt;/Flex&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As I explained with the flow chart, we add the &lt;code&gt;SidebarToggleButton&lt;/code&gt; component to the dashboard header.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating the Desktop Sidebar&lt;/strong&gt;&lt;br&gt;
The dashboard has two sidebars, one for mobile devices, and another for desktop devices. Let’s start with the desktop sidebar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import { useRouter } from "next/router";
    import { useSidebarAuth } from "@context/sidebarContext";

    export default function Sidebar() {
      const router = useRouter();

      return (
        &amp;lt;Stack
          minH="full"
          h="90vh"
          pos="sticky"
          top="10vh"
          display={["none", , "initial"]}
          transition="width .4s ease-in-out"
        &amp;gt;
          &amp;lt;NavLink
            active={router.pathname === "/"}
            name="Home"
            href="/"
            icon={IoHomeSharp}
          /&amp;gt;
        &amp;lt;/Stack&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We want the desktop sidebar to be hidden on mobile, so we set the display to none. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating the Mobile Sidebar&lt;/strong&gt;&lt;br&gt;
We make use of Chakra’s &lt;code&gt;[Drawer](https://chakra-ui.com/docs/overlay/drawe)&lt;/code&gt; component to set up the mobile sidebar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import { useEffect } from "react";
    import { useRouter } from "next/router";
    import {
      Drawer,
      DrawerCloseButton,
      DrawerContent,
      DrawerOverlay,
    } from "@chakra-ui/react";
    import { useSidebarAuth } from "@context/sidebarContext";
    import FullNavLink from "./FullNavLink";

    export default function MobileSidebar() {
      const router = useRouter();
      const { isOpen, onClose } = useSidebarAuth();

      useEffect(() =&amp;gt; {
        router.events.on("routeChangeComplete", onClose);
        return () =&amp;gt; {
          router.events.off("routeChangeComplete", onClose);
        };
      }, []);
      return (
        &amp;lt;Drawer isOpen={isOpen} onClose={onClose} placement="left"&amp;gt;
          &amp;lt;DrawerOverlay display={["initial", , "none"]}&amp;gt;
            &amp;lt;DrawerContent layerStyle="neutral" py={12} bg="gray.900"&amp;gt;
              &amp;lt;Stack spacing={2} fontSize="sm"&amp;gt;
                &amp;lt;DrawerCloseButton /&amp;gt;
                &amp;lt;FullNavLink
                  active={router.pathname === "/"}
                  name="Home"
                  href="/"
                  icon={IoHomeSharp}
                /&amp;gt;
              &amp;lt;/Stack&amp;gt;
            &amp;lt;/DrawerContent&amp;gt;
          &amp;lt;/DrawerOverlay&amp;gt;
        &amp;lt;/Drawer&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next.js provides a &lt;a href="https://nextjs.org/docs/api-reference/next/router#routerevents"&gt;router event&lt;/a&gt;, &lt;code&gt;routeChangeComplete&lt;/code&gt;, which we use to toggle the mobile sidebar when a link is clicked.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Dashboard View&lt;/strong&gt; &lt;br&gt;
Before we proceed, we need to break down the dashboard view. The dashboard view consists of the &lt;code&gt;DashboardLayout&lt;/code&gt; component we set up earlier, a grid of products in a &lt;code&gt;ProductCard&lt;/code&gt; component, and a &lt;code&gt;ModalProduct&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;Let’s set up the dashboard view.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import { useState } from "react";
    import { Box, SimpleGrid } from "@chakra-ui/react";
    import { motion } from "framer-motion";
    import ProductCard from "@components/ProductCard";
    import DashboardLayout from "@layout/Dashboard";
    import ModalProduct from "@components/ModalProduct";
    import data from "@root/data";
    const MotionSimpleGrid = motion(SimpleGrid);
    const MotionBox = motion(Box);

    export default function Dashboard() {
      const [modalData, setModalData] = useState(null);
      return (
        &amp;lt;DashboardLayout&amp;gt;
          &amp;lt;Box&amp;gt;
            &amp;lt;MotionSimpleGrid&amp;gt;
              {data.map((product) =&amp;gt; (
                &amp;lt;MotionBox variants={cardVariant} key={product.id}&amp;gt;
                  &amp;lt;ProductCard product={product} setModalData={setModalData} /&amp;gt;
                &amp;lt;/MotionBox&amp;gt;
              ))}
            &amp;lt;/MotionSimpleGrid&amp;gt;
            &amp;lt;ModalProduct
              isOpen={modalData ? true : false}
              onClose={() =&amp;gt; setModalData(null)}
              modalData={modalData}
            /&amp;gt;
          &amp;lt;/Box&amp;gt;
        &amp;lt;/DashboardLayout&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s breakdown the snippet above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We define a &lt;code&gt;modalData&lt;/code&gt; state where the data of the clicked product will be stored. &lt;/li&gt;
&lt;li&gt;We pass &lt;code&gt;setModalData&lt;/code&gt; and the product data to the &lt;code&gt;ProductCard&lt;/code&gt; component. We will use this to update the &lt;code&gt;modalData&lt;/code&gt; state with the data from the current product being clicked.&lt;/li&gt;
&lt;li&gt;We pass an &lt;code&gt;isOpen&lt;/code&gt; boolean, an &lt;code&gt;onClose&lt;/code&gt; method and and the &lt;code&gt;modalData&lt;/code&gt; state to the &lt;code&gt;ModalProduct&lt;/code&gt; component. The value of &lt;code&gt;isOpen&lt;/code&gt; depends on the value of &lt;code&gt;modalData&lt;/code&gt;. If &lt;code&gt;modalData&lt;/code&gt; is null, then &lt;code&gt;isOpen&lt;/code&gt; is false. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When &lt;code&gt;ProductCard&lt;/code&gt; is clicked, it triggers &lt;code&gt;ModalProduct&lt;/code&gt; and causes &lt;code&gt;ModalProduct&lt;/code&gt; to pop up.&lt;/p&gt;

&lt;p&gt;Here’s a sample of the data we map through and pass to &lt;code&gt;ProductCard&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    const data = [
      {
        title: "First Pet",
        price: 250,
        img: "https://res.cloudinary.com/nefejames/image/upload/q_auto,f_auto,w_auto/Hackmamba/Images/pet1.jpg",
        video: "/Hackmamba/Videos/pet1",
      },
      {
        title: "Second Pet",
        price: 250,
        img: "https://res.cloudinary.com/nefejames/image/upload/q_auto,f_auto,w_auto/Hackmamba/Images/pet2.jpg",
        video: "/Hackmamba/Videos/pet2",
      },
      // other data objects below
    ]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Creating the&lt;/strong&gt; &lt;code&gt;**ProductCard**&lt;/code&gt; &lt;strong&gt;and&lt;/strong&gt; &lt;code&gt;**ModalProduct**&lt;/code&gt; &lt;strong&gt;Component&lt;/strong&gt;&lt;br&gt;
Now that we understand how &lt;code&gt;ProductCard&lt;/code&gt; and &lt;code&gt;ModalProduct&lt;/code&gt; work, let’s create them.&lt;/p&gt;

&lt;p&gt;Let’s start with setting up &lt;code&gt;ProductCard&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import Image from "next/image";
    import { Box, Flex } from "@chakra-ui/react";
    import { StarIcon } from "@chakra-ui/icons";

    export default function ProductCard({ product, setModalData }) {
      const { img, beds, baths, title, price } = product;
      const score = Math.floor(Math.random(5) * 5);
      const reviewCount = Math.floor(Math.random(50) * 50);

      return (
        &amp;lt;Flex&amp;gt;
          &amp;lt;Box onClick={() =&amp;gt; setModalData(product)}&amp;gt;
            &amp;lt;Box&amp;gt;
              &amp;lt;Image
                src={img}
                objectFit="cover"
                alt="picture of an animal"
                layout="fill"
                objectFit="cover"
              /&amp;gt;
            &amp;lt;/Box&amp;gt;

            &amp;lt;Box p="6"&amp;gt;
              &amp;lt;Box&amp;gt; {title} &amp;lt;/Box&amp;gt;
              &amp;lt;Box&amp;gt;${price}&amp;lt;/Box&amp;gt;

              &amp;lt;Box d="flex" mt="3" alignItems="center"&amp;gt;
                {Array(5)
                  .fill("")
                  .map((_, i) =&amp;gt; (
                    &amp;lt;StarIcon key={i} color={i &amp;lt; score ? "teal.500" : "gray.300"} /&amp;gt;
                  ))}
                &amp;lt;Box as="span" ml="2" color="gray.600" fontSize="sm"&amp;gt;
                  {reviewCount} reviews
                &amp;lt;/Box&amp;gt;
              &amp;lt;/Box&amp;gt;
            &amp;lt;/Box&amp;gt;
          &amp;lt;/Box&amp;gt;
        &amp;lt;/Flex&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As stated earlier, we pass &lt;code&gt;setModalData&lt;/code&gt; to &lt;code&gt;ProductCard&lt;/code&gt;. When &lt;code&gt;ProductCard&lt;/code&gt; is clicked, the &lt;code&gt;modalData&lt;/code&gt; state is updated with the data of the product card that was clicked.&lt;/p&gt;

&lt;p&gt;Next, let’s set up &lt;code&gt;ModalProduct&lt;/code&gt;. To do that we use Chakra UI’s &lt;a href="https://chakra-ui.com/docs/overlay/modal"&gt;Modal&lt;/a&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import { Modal, ModalOverlay, ModalContent, ModalHeader, ModalFooter, ModalBody,
      ModalCloseButton, Button, useToast } from "@chakra-ui/react";
    import { Video } from "cloudinary-react";

    export default function ModalProduct({ isOpen, onClose, modalData }) {
      const { title, price, video } = modalData || {};
      const toast = useToast();

      const handleModalClose = () =&amp;gt; {
        toast({
          title: "Purchase successsful.",
          description: "One more happy pet.",
          status: "success",
          duration: 3000,
          isClosable: true,
        });
        setTimeout(() =&amp;gt; {
          onClose();
        }, 1000);
      };

      return (
        &amp;lt;Modal isOpen={isOpen} onClose={onClose} size="xl"&amp;gt;
          &amp;lt;ModalOverlay /&amp;gt;
          &amp;lt;ModalContent&amp;gt;
            &amp;lt;ModalCloseButton /&amp;gt;
            &amp;lt;ModalHeader&amp;gt;Pet Details&amp;lt;/ModalHeader&amp;gt;
            &amp;lt;ModalBody&amp;gt;
              &amp;lt;Box w="full" h="full"&amp;gt;
                &amp;lt;Video controls publicId={video} width={300} crop="scale" /&amp;gt;

                &amp;lt;Box pt="3"&amp;gt;
                  &amp;lt;Box&amp;gt; {title} &amp;lt;/Box&amp;gt;
                  ${price}
                &amp;lt;/Box&amp;gt;
              &amp;lt;/Box&amp;gt;
            &amp;lt;/ModalBody&amp;gt;
            &amp;lt;ModalFooter&amp;gt;
              &amp;lt;Button onClick={handleModalClose}&amp;gt;
                Purchase
              &amp;lt;/Button&amp;gt;
            &amp;lt;/ModalFooter&amp;gt;
          &amp;lt;/ModalContent&amp;gt;
        &amp;lt;/Modal&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Earlier, we passed &lt;code&gt;isOpen&lt;/code&gt;, &lt;code&gt;onClose&lt;/code&gt;, and &lt;code&gt;modalData&lt;/code&gt; to &lt;code&gt;ModalProduct&lt;/code&gt; from the dashboard view. In the snippet above, we access them through props. We use &lt;code&gt;isOpen&lt;/code&gt; and &lt;code&gt;onClose&lt;/code&gt; to set up the modal and pass the data from &lt;code&gt;modalData&lt;/code&gt; to the appropriate parts of &lt;code&gt;ModalProduct&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We also define a function, &lt;code&gt;handleModalClose&lt;/code&gt;, and pass it to the modal’s purchase button. The &lt;code&gt;handleModalClose&lt;/code&gt; function displays a &lt;a href="https://chakra-ui.com/docs/feedback/toast"&gt;success toast&lt;/a&gt; and closes the modal when it is called. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#user-authentication"&gt;
  &lt;/a&gt;
  User Authentication
&lt;/h2&gt;

&lt;p&gt;As stated earlier, we will use Auth0 to handle the user authentication in this application. Auth0 has provided &lt;a href="https://auth0.com/blog/ultimate-guide-nextjs-authentication-auth0/"&gt;a guide&lt;/a&gt; on how to work with their Next.js SDK. &lt;br&gt;
The &lt;code&gt;useUser&lt;/code&gt; hook exports two objects, user and error, and an isLoading boolean. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;user&lt;/code&gt; contains information about the authenticated user.&lt;/li&gt;
&lt;li&gt;We use &lt;code&gt;isLoading&lt;/code&gt; to check if the SDK has completed loading.&lt;/li&gt;
&lt;li&gt;We use the &lt;code&gt;error&lt;/code&gt; object to check if there were any authentication errors. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will use the logged-in user profile in the following parts of our application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;index.js&lt;/code&gt; page&lt;/li&gt;
&lt;li&gt;the homepage header&lt;/li&gt;
&lt;li&gt;the dashboard header&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The Index.js Page&lt;/strong&gt;&lt;br&gt;
When the user logs in from the homepage, we want to redirect them to the dashboard route. We set up a &lt;code&gt;useEffect&lt;/code&gt; and check if &lt;code&gt;user&lt;/code&gt; exists. If it does, we redirect the user to the app route.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import { useEffect } from "react";
    import HomePage from "@views/Home";
    import { useUser } from "@auth0/nextjs-auth0";
    import { useRouter } from "next/router";

    export default function Home() {
      const { user } = useUser();
      const router = useRouter();

      useEffect(() =&amp;gt; {
        if (user) {
          router.push("/app");
        }
      }, [user, router]);

      return (
        &amp;lt;div&amp;gt;
          &amp;lt;Head&amp;gt;
            &amp;lt;title&amp;gt;Hackmamba PetShop&amp;lt;/title&amp;gt;
          &amp;lt;/Head&amp;gt;

          &amp;lt;HomePage /&amp;gt;
        &amp;lt;/div&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;The Homepage Header&lt;/strong&gt;&lt;br&gt;
Here, we conditionally show the logout and login buttons. We show the login button if there is no user and the logout button if there is a logged-in user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import NextLink from "next/link";
    import { Box, Flex, Button } from "@chakra-ui/react";
    import Logo from "@svgs/Logo";
    import { useUser } from "@auth0/nextjs-auth0";

    export default function HomeHeader() {
      const { user, isLoading } = useUser();

      return (
        &amp;lt;Box&amp;gt;
          &amp;lt;Flex&amp;gt;
            &amp;lt;NextLink href="/" rel="noopener noreferrer" target="_blank"&amp;gt;
              &amp;lt;a&amp;gt;
                &amp;lt;Logo /&amp;gt;
              &amp;lt;/a&amp;gt;
            &amp;lt;/NextLink&amp;gt;

            {!isLoading &amp;amp;&amp;amp; !user &amp;amp;&amp;amp; (
              &amp;lt;NextLink href="/api/auth/login" passHref&amp;gt;
                &amp;lt;Button as="a" bg="blue.700" _hover={{ bg: "blue.900" }}&amp;gt;
                  Sign In/Log in
                &amp;lt;/Button&amp;gt;
              &amp;lt;/NextLink&amp;gt;
            )}

            {user &amp;amp;&amp;amp; (
              &amp;lt;NextLink href="/api/auth/logout" passHref&amp;gt;
                &amp;lt;Button as="a" bg="blue.700" _hover={{ bg: "blue.900" }}&amp;gt;
                  Logout
                &amp;lt;/Button&amp;gt;
              &amp;lt;/NextLink&amp;gt;
            )}
          &amp;lt;/Flex&amp;gt;
        &amp;lt;/Box&amp;gt;
      );
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;The Dashboard Header&lt;/strong&gt;&lt;br&gt;
Here, we show the logout button when a user is logged in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import NextLink from "next/link";
    import { Flex, Spacer, Stack, Button, Link } from "@chakra-ui/react";
    import SidebarToggleButton from "./components/SidebarToggleButton";
    import { useUser } from "@auth0/nextjs-auth0";
    import Logo from "@svgs/Logo";

    export default function DashboardHeader() {
      const { user } = useUser();

      return (
        &amp;lt;Flex&amp;gt;
          &amp;lt;Stack direction="row" w="full" alignItems="center" spacing="8"&amp;gt;
            &amp;lt;NextLink href="/" rel="noopener noreferrer" target="_blank"&amp;gt;
              &amp;lt;a&amp;gt;
                &amp;lt;Logo /&amp;gt;
              &amp;lt;/a&amp;gt;
            &amp;lt;/NextLink&amp;gt;
            &amp;lt;SidebarToggleButton /&amp;gt;

            &amp;lt;Spacer /&amp;gt;

            {user &amp;amp;&amp;amp; (
              &amp;lt;Link href="/api/auth/logout"&amp;gt;
                &amp;lt;Button bg="blue.700" _hover={{ bg: "blue.900" }}&amp;gt;Logout&amp;lt;/Button&amp;gt;
              &amp;lt;/Link&amp;gt;
            )}
          &amp;lt;/Stack&amp;gt;
        &amp;lt;/Flex&amp;gt;
      );
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We learned how to use Auth0, Next.js, Chakra UI, and Cloudinary to create an eCommerce application. We also learned how to add interactivity to our applications and make them responsive with Chakra UI’s &lt;code&gt;useDisclosure&lt;/code&gt; and &lt;code&gt;useMediaQuery&lt;/code&gt; hooks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h2&gt;

&lt;p&gt;You can learn more about the technologies used from the links below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloudinary&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://cloudinary.com/documentation/react_video_manipulation"&gt;React video transformations&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cloudinary.com/documentation/image_optimization"&gt;Image optimization&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/cloudinary/cloudinary-react"&gt;&lt;/a&gt;&lt;a href="https://github.com/cloudinary/cloudinary-react"&gt;cloudinary-react&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Auth0&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://auth0.com/docs/quickstart/webapp/nextjs/01-login"&gt;How to authenticate Next.js apps with Auth0&lt;/a&gt; &lt;br&gt;
&lt;a href="https://auth0.com/blog/ultimate-guide-nextjs-authentication-auth0/"&gt;The ultimate guide to Next.js authentication with Auth0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next.js&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://nextjs.org/docs/getting-started"&gt;Getting started with Next.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Content created for the &lt;a href="https://content.hackmamba.io/"&gt;Hackmamba&lt;/a&gt; Jamstack Content Hackathon&lt;/p&gt;

</description>
      <category>auth0</category>
      <category>cloudinary</category>
      <category>nextjs</category>
      <category>jamstack</category>
    </item>
    <item>
      <title>5 lines of CSS style for disabled elements.(from Material Design)</title>
      <author>Kavindu Santhusa</author>
      <pubDate>Mon, 18 Oct 2021 08:11:52 +0000</pubDate>
      <link>https://dev.to/ksengine/5-lines-of-css-style-for-disabled-elementsfrom-material-design-122d</link>
      <guid>https://dev.to/ksengine/5-lines-of-css-style-for-disabled-elementsfrom-material-design-122d</guid>
      <description>&lt;p&gt;If I are creating a form with HTML, sometimes I wanted to disable a text box for users. Here came the &lt;strong&gt;&lt;code&gt;disabled&lt;/code&gt; attribute&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disabled-controls"&gt;
  &lt;/a&gt;
  Disabled Controls
&lt;/h2&gt;

&lt;p&gt;The Boolean disabled attribute, when present, makes the element not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.&lt;/p&gt;

&lt;p&gt;If the disabled attribute is specified on a form control, the element and its form control descendants do not participate in constraint validation. Often browsers grey out such controls and it won't receive any browsing events, like mouse clicks or focus-related ones.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#read-only-controls"&gt;
  &lt;/a&gt;
  Read only controls
&lt;/h2&gt;

&lt;p&gt;What about &lt;strong&gt;read only&lt;/strong&gt; controls.&lt;br&gt;
The difference between &lt;code&gt;disabled&lt;/code&gt; and &lt;code&gt;readonly&lt;/code&gt; is that read-only controls can still function and are still focusable, whereas disabled controls can not receive focus and are not submitted with the form and generally do not function as controls until they are enabled.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#required-fields"&gt;
  &lt;/a&gt;
  Required fields
&lt;/h2&gt;

&lt;p&gt;What about &lt;strong&gt;required&lt;/strong&gt; controls.&lt;br&gt;
Because a &lt;code&gt;disabled&lt;/code&gt; field cannot have its value changed, &lt;code&gt;required&lt;/code&gt; does not have any effect on inputs with the disabled attribute also specified. Additionally, since the elements become immutable, most other attributes, such as pattern, have no effect, until the control is enabled.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: The &lt;code&gt;required&lt;/code&gt; attribute is not permitted on inputs with the &lt;code&gt;disabled&lt;/code&gt; attribute specified.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#material-design"&gt;
  &lt;/a&gt;
  Material Design
&lt;/h2&gt;

&lt;p&gt;Material Design is a design language developed by Google in 2014. Expanding on the "cards" that debuted in Google Now, Material Design uses more grid-based layouts, responsive animations and transitions, padding, and depth effects such as lighting and shadows.&lt;/p&gt;

&lt;p&gt;According to Material Design&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A disabled state communicates when a component or element isn’t interactive, and should be deemphasized in a UI. Disabled states are displayed at 38% opacity of the enabled state.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Disabled states can also indicate they are not interactive through color changes and reduced elevation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R4JO31xY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/ZWFDVVYAkiFCGvmxT7PQKKyIQz1l_-QKSeXyCCO96cmmXGsNMOmGFFTHzzA0oweCHYgyGv-iF5LCdqR5nVEPxmuE0FDxlQQbAdCWjg%3Dw1064-v0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R4JO31xY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/ZWFDVVYAkiFCGvmxT7PQKKyIQz1l_-QKSeXyCCO96cmmXGsNMOmGFFTHzzA0oweCHYgyGv-iF5LCdqR5nVEPxmuE0FDxlQQbAdCWjg%3Dw1064-v0" alt="(1) Enabled and (2) disabled buttons differentiate through color and elevation changes."&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The code
&lt;/h2&gt;

&lt;p&gt;So here is the Materialized disabled CSS snippet&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:disabled&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;disabled&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.38&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;pointer-events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ksenginew/embed/abyNJqQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;That's all. Enjoy it.&lt;br&gt;
Follow me for more tricks.🏃‍♀️🏃‍♂️&lt;br&gt;
Thanks 💖💖💖.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Hacktoberfest2021 Journey</title>
      <author>Rod Fetalvero</author>
      <pubDate>Mon, 18 Oct 2021 08:05:53 +0000</pubDate>
      <link>https://dev.to/nyorja/hacktoberfest2021-journey-27m1</link>
      <guid>https://dev.to/nyorja/hacktoberfest2021-journey-27m1</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P9pNyt6r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rip0dtyd983tcdwqytb4.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P9pNyt6r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rip0dtyd983tcdwqytb4.PNG" alt="Image description"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rzIijiof--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3gn3k3te6eky5omtjtif.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rzIijiof--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3gn3k3te6eky5omtjtif.PNG" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-experience-in-hacktoberfest"&gt;
  &lt;/a&gt;
  First experience in Hacktoberfest
&lt;/h3&gt;

&lt;p&gt;There was a Digital Ocean meeting a long time ago. It was introduced to the event by the speaker.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h3&gt;

&lt;p&gt;I'm a Software Engineer who loves open source technology. Java and a little javascript are used in coding. I play video games when I'm not working. I love music and I play instruments like guitar and bass.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#progress"&gt;
  &lt;/a&gt;
  Progress
&lt;/h3&gt;

&lt;p&gt;It is quite challenging because the review of my PR's are quite too long to be accepted and some has no labels. I decided to contribute project's that are implemented in Spring Framework after working on snippets for the first week. Most of my contributions are focused on code quality and unit test.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#contributions"&gt;
  &lt;/a&gt;
  Contributions
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;DVHacktoberfest- &lt;a href="https://github.com/DVB7781/DV-Hacktoberfest/pull/20"&gt;https://github.com/DVB7781/DV-Hacktoberfest/pull/20&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Stockshare - &lt;a href="https://github.com/Sarthakdtu/StockShare/pull/4"&gt;https://github.com/Sarthakdtu/StockShare/pull/4&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;provider/hackerrank - &lt;a href="https://github.com/pro-vider/HackerRank/pull/4"&gt;https://github.com/pro-vider/HackerRank/pull/4&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;iedcbootcampcec/Hacktoberfest21-letshack - &lt;a href="https://github.com/iedcbootcampcec/Hacktoberfest21-letshack/pull/16"&gt;https://github.com/iedcbootcampcec/Hacktoberfest21-letshack/pull/16&lt;/a&gt;
5.mansiparashar/springboot-mongodb - &lt;a href="https://github.com/mansiparashar/springboot-mongodb/pull/2"&gt;https://github.com/mansiparashar/springboot-mongodb/pull/2&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;ninjaarun/SpringFramework - &lt;a href="https://github.com/ninjaarun/SpringFramework/pull/3"&gt;https://github.com/ninjaarun/SpringFramework/pull/3&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;GregorioPM/Spring-Rest - &lt;a href="https://github.com/GregorioPM/Spring-Rest/pull/7"&gt;https://github.com/GregorioPM/Spring-Rest/pull/7&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;tino097/awesome-spring-boot-rest-api - &lt;a href="https://github.com/tino097/awesome-spring-boot-rest-api/pull/5"&gt;https://github.com/tino097/awesome-spring-boot-rest-api/pull/5&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#maintainer"&gt;
  &lt;/a&gt;
  Maintainer
&lt;/h3&gt;

&lt;p&gt;I also participate in maintaining a repo &lt;a href="https://github.com/abhpd/hacktoberfest2021"&gt;https://github.com/abhpd/hacktoberfest2021&lt;/a&gt;. I focus on java snippets that can be used in a real world application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reflections"&gt;
  &lt;/a&gt;
  Reflections
&lt;/h3&gt;

&lt;p&gt;Well, its FUN. Looking forward to participating next year.&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>java</category>
      <category>github</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Spiral lifecycle model Part 2</title>
      <author>Aatmaj</author>
      <pubDate>Mon, 18 Oct 2021 07:54:22 +0000</pubDate>
      <link>https://dev.to/aatmaj/spiral-lifecycle-model-part-2-1ci9</link>
      <guid>https://dev.to/aatmaj/spiral-lifecycle-model-part-2-1ci9</guid>
      <description>&lt;p&gt;&lt;strong&gt;In the last post, we studied about the spiral lifecycle model. Let us now continue discussing about the model in this part. Just in case you missed it, you can check it out &lt;a href="https://dev.to/aatmaj/spiral-lifecycle-model-part-1-4cjh"&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#advantages-of-the-model"&gt;
  &lt;/a&gt;
  Advantages of the model
&lt;/h3&gt;

&lt;p&gt;The spiral lifecycle model helps you analyze risks and eliminate them before they get too big. One of the moist important advantages of the spiral model is that as the cost increases, the risk decreases. The more time and money you spend, the lesser risk you are actually taking, which is exactly what we all want in any lifecycle model.&lt;/p&gt;

&lt;p&gt;The spiral model provides at least as much management control as the traditional waterfall model, you have the checkpoints ready just from the start of every iteration. Because the model is risk oriented, it provides you with the early indications of any risks possible. If in the worst case, the project cant be done for technical or any other reasons, you will find that out early on. Moreover the users can see the system easily from the start due to &lt;strong&gt;effective prototyping&lt;/strong&gt;. This results in &lt;strong&gt;Early user engagement&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The spiral lifecycle model can be coupled with other lifecycle models in a couple of different ways. This is why this model is very adaptable. And yes, the transition from building a project to maintaining it is so smooth that this boosts the overall maintainability of the project &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disadvantages"&gt;
  &lt;/a&gt;
  Disadvantages
&lt;/h3&gt;

&lt;p&gt;The only disadvantage of the spiral model is that it's a lot complicated.  It requires conscientious, attentive and knowledgeable management. It can be difficult to define objective, verifiable milestones that indicate weather you're ready to add the next layer to the model or not. In some cases, the product development is straight forward enough and project risks are modest enough that you don't need the flexibility and risk management provided by the spiral model. Not suitable for small or low risk projects and could be expensive for small projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use-this-model"&gt;
  &lt;/a&gt;
  When to use this model
&lt;/h3&gt;

&lt;p&gt;Use this model when you have an experienced management staff. Use in projects where user involvement is to be preferred over expected time to complete.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Use For&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#for-medium-to-highrisk-projects"&gt;
  &lt;/a&gt;
  For medium to high-risk projects.
&lt;/h5&gt;
&lt;h5&gt;
  &lt;a href="#when-there-is-adequate-to-fair-time"&gt;
  &lt;/a&gt;
  When there is adequate to fair time.
&lt;/h5&gt;
&lt;/blockquote&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Support two authentication providers with .NET 5</title>
      <author>Ivan Pesenti</author>
      <pubDate>Mon, 18 Oct 2021 07:33:26 +0000</pubDate>
      <link>https://dev.to/ivan_pesenti/support-two-authentication-providers-with-net-5-1ajd</link>
      <guid>https://dev.to/ivan_pesenti/support-two-authentication-providers-with-net-5-1ajd</guid>
      <description>&lt;p&gt;Hi folks 👋🏻! I'm super happy to have you here for the last episode of the series about &lt;strong&gt;Authentication&lt;/strong&gt; in .NET 5.&lt;br&gt;&lt;br&gt;
This post will be our icing on the cake 🍰.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;🔴IMPORTANT❗🔴&lt;/strong&gt;: this post heavily relies on stuff made in the previous two episodes. So I strongly encourage you to checkout the links above and then jump back here again.&lt;br&gt;&lt;br&gt;
As always, if u get in trouble in following this tutorial u can check the final solution in GitHub at this &lt;a href="https://github.com/ivan-pesenti/auth-series"&gt;link&lt;/a&gt;.  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#rewind-the-tape"&gt;
  &lt;/a&gt;
  Rewind the tape 🔙
&lt;/h2&gt;

&lt;p&gt;Up to now, we have built out what follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A Google Firebase proj (create with Google Developer console) with a test user who can sign-in with username and password. You can open the Google console with this &lt;a href="https://console.firebase.google.com/"&gt;link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Built a web api proj that makes use of token-based authentication with Jwt format&lt;/li&gt;
&lt;li&gt;Connected our web api with the Firebase proj so users can access protected resources (after a successful sign-in on Firebase)&lt;/li&gt;
&lt;li&gt;Implemented our custom sign-in mechanism by exposing an endpoint to issue a Jwt token to users
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;👀&lt;em&gt;NOTE&lt;/em&gt;👀: if you've not followed the previous posts but you have a similar solution to the one presented here (maybe with different auth providers) the following approach still works for you even if you probably have to make some adjustments.  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#final-challenge"&gt;
  &lt;/a&gt;
  Final challenge 🎯
&lt;/h2&gt;

&lt;p&gt;During this post we're going to change our web api in order to support two authentication providers at the same time. What this means is that a user &lt;em&gt;can choice&lt;/em&gt; how to &lt;strong&gt;sign-in&lt;/strong&gt; against our web api. The user could authenticates himself against Google Firebase or against our custom endpoint. If the sign-in phase is successful the user will got back a valid Jwt token which can be used to access our protected resources. As before, if the sign-in is not successful he'll got back an error response and cannot access our super-secure resources 😎.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;p&gt;To follow this post on your machine you must have installed the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;NET 5 Runtime. You can download from &lt;a href="https://dotnet.microsoft.com/download/dotnet/5.0"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Visual Studio Code (you can use another IDE if you wish). Download can be found &lt;a href="https://code.visualstudio.com/download"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Postman (you can use another program to consume REST-api if you wish). Download can be found &lt;a href="https://www.postman.com/downloads/"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;C# extension for VSCode (powered by Omnisharp)
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#lets-start"&gt;
  &lt;/a&gt;
  Let's start 🚀
&lt;/h2&gt;

&lt;p&gt;To complete the task we've to carry about two sections: the settings and authentication's registration. After these tasks we'll do the final test.  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#check-settings"&gt;
  &lt;/a&gt;
  Check settings 🔧
&lt;/h2&gt;

&lt;p&gt;First open up the "appsettings.json" file and check that you have an identical structure like me (obviously replace the value with yours):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"Jwt"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Firebase"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"ValidIssuer"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://securetoken.google.com/auth-series"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"ValidAudience"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"auth-series"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"AuthDemo"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"Key"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"This is where you should specify your secret key, which is used to sign and verify Jwt tokens."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"ValidIssuer"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"localhost:5001"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"ValidAudience"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"localhost:5001"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;⚠️WARNING⚠️&lt;/strong&gt;: in a real-world app you must not store these &lt;strong&gt;sensitive data&lt;/strong&gt; in a non-secure location such as appsettings.json. Moreover the key should not be so easy to guess 😋.&lt;br&gt;&lt;br&gt;
Here you see that we're going to support two authentication providers: "Firebase" and "AuthDemo" (that is our custom endpoint).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#providers-registration-%F0%9F%8E%99"&gt;
  &lt;/a&gt;
  Providers Registration 🎙
&lt;/h2&gt;

&lt;p&gt;The next file you have to open is "Startup.cs" and look at the ConfigureServices() method.&lt;br&gt;&lt;br&gt;
After the Firebase registration you have to adjust the code in a way that looks similar to the one below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddTransient&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ITokenService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TokenService&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// firebase auth&lt;/span&gt;
    &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddAuthentication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JwtBearerDefaults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AuthenticationScheme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddJwtBearer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Firebase"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Authority&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Jwt:Firebase:ValidIssuer"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TokenValidationParameters&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TokenValidationParameters&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;ValidateIssuer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;ValidateAudience&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;ValidateLifetime&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;ValidateIssuerSigningKey&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;ValidIssuer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Jwt:Firebase:ValidIssuer"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;ValidAudience&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Jwt:Firebase:ValidAudience"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="c1"&gt;// auth demo&lt;/span&gt;
    &lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddAuthentication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JwtBearerDefaults&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AuthenticationScheme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddJwtBearer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"AuthDemo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TokenValidationParameters&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TokenValidationParameters&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;ValidateIssuer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;ValidateAudience&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;ValidateLifetime&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;ValidateIssuerSigningKey&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;ValidIssuer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Jwt:AuthDemo:ValidIssuer"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;ValidAudience&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Jwt:AuthDemo:ValidAudience"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;IssuerSigningKey&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;SymmetricSecurityKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Encoding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UTF8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetBytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Jwt:AuthDemo:Key"&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The main change in this code is that we're going to use another overload of the method &lt;em&gt;AddJwtBearer&lt;/em&gt;. This overload accepts as the first parameter the &lt;strong&gt;authentication schema name&lt;/strong&gt; which is used to identify the providers uniquely.&lt;br&gt;&lt;br&gt;
🧐 &lt;em&gt;NOTE&lt;/em&gt; 🧐: you should not read the settings in this way as it's not &lt;strong&gt;strongly-typed&lt;/strong&gt; and so it's a more &lt;strong&gt;error-prone&lt;/strong&gt; method. Consider using the &lt;strong&gt;Options pattern&lt;/strong&gt;. More on this &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options?view=aspnetcore-5.0"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#add-policy-to-manage-multiple-schemas"&gt;
  &lt;/a&gt;
  Add policy to manage multiple schemas 📜
&lt;/h2&gt;

&lt;p&gt;The last step left is to add a policy to our web api that allow it to &lt;em&gt;manage&lt;/em&gt; multiple authentication schemas at the same time. This policy must be written right below the code of the previous section. So open up "Startup.cs" and locate the "ConfigureServices()" method and write the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddAuthorization&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DefaultPolicy&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;AuthorizationPolicyBuilder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;AddAuthenticationSchemes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Firebase"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"AuthDemo"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;RequireAuthenticatedUser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code snippet is self-explanatory. Its purposes are to register the schemas declared above as you should notice from the command &lt;code&gt;.AddAuthenticationSchemes("Firebase", "AuthDemo")&lt;/code&gt; and to require the users to be authenticated in order to access our resources.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-test"&gt;
  &lt;/a&gt;
  Final Test 🐲
&lt;/h2&gt;

&lt;p&gt;We've finished the coding phase so we can finally give a try to our work ⚒. In your terminal go into the folder where it's contained the .csproj file.&lt;br&gt;&lt;br&gt;
Issue a &lt;code&gt;dotnet run&lt;/code&gt; command and wait for the web api to start properly.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#postman"&gt;
  &lt;/a&gt;
  Postman
&lt;/h3&gt;

&lt;p&gt;To test our software we need of three requests (that you can build by following the recipes from the previous posts). Below you can find the three requests with their titles and purposes: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;FirebaseSignIn: used to sign-in a user in Firebase platform&lt;/li&gt;
&lt;li&gt;AuthDemoSignIn: used to sign-in a user against our custom endpoint&lt;/li&gt;
&lt;li&gt;WeatherForecast: used to access our restricted resource
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Foremost, try to execute the &lt;strong&gt;WeatherForecast&lt;/strong&gt; without authentication configured:  &lt;/p&gt;

&lt;p&gt;
    &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KDbA3lT7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ivan-pesenti/auth-series/blob/main/blog/part-three/img/weather-forecast-no-auth.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KDbA3lT7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ivan-pesenti/auth-series/blob/main/blog/part-three/img/weather-forecast-no-auth.png%3Fraw%3Dtrue" alt="Postman request without authentication"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;You should get back a &lt;strong&gt;401 Unauthorized&lt;/strong&gt; error.&lt;br&gt;&lt;br&gt;
Now execute the &lt;strong&gt;FirebaseSignIn&lt;/strong&gt; request and copy the "idToken" value returned. Then switch back to the WeatherForecast request and change the authorization type to "Bearer Token" and paste in the token as you can see below:&lt;/p&gt;

&lt;p&gt;
    &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uJkaGwX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ivan-pesenti/auth-series/blob/main/blog/part-three/img/weather-forecast-with-auth.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uJkaGwX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ivan-pesenti/auth-series/blob/main/blog/part-three/img/weather-forecast-with-auth.png%3Fraw%3Dtrue" alt="Postman request with Bearer authentication"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Execute again this request and check if you receive a &lt;strong&gt;200 OK&lt;/strong&gt; response together with the requested data.&lt;br&gt;&lt;br&gt;
Now open the &lt;strong&gt;AuthDemoSignIn&lt;/strong&gt; request and execute it to get back the Jwt token. Copy the returned token.&lt;br&gt;
Switch back to &lt;strong&gt;WeatherForecast&lt;/strong&gt; request and replace the Firebase token with the latter one. Execute again and now it should works as expected 🌟!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts 💭
&lt;/h2&gt;

&lt;p&gt;Now we reached the end 🏁. During this series you learned a bunch of things about &lt;strong&gt;authentication&lt;/strong&gt; 🔐 within .NET 5. To show off these capabilities we make use of web api project template but the same still applies to other projs such as MVC or Single Page Application.&lt;br&gt;&lt;br&gt;
Supporting multiple authentication providers could be a &lt;em&gt;transient&lt;/em&gt; phase such as when you're migrating from one auth provider to another or &lt;em&gt;permanent&lt;/em&gt; as you would like to let users decide which authentication provider utilize.&lt;br&gt;&lt;br&gt;
In both cases this series will provide you some guidelines about the steps you have to follow.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#greetings"&gt;
  &lt;/a&gt;
  Greetings 👋🏻
&lt;/h2&gt;

&lt;p&gt;Now, it's time to say goodbye 😄.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;🔵IMPORTANT🔵&lt;/strong&gt;: remember that authentication is one &lt;strong&gt;CRUCIAL&lt;/strong&gt; aspect of software development, so don't joke with it as you'll pay the consequences for sure 🤕.&lt;br&gt;&lt;br&gt;
I hope you enjoy this post and find it useful. If you have any questions or you want to spot me some errors I really appreciate it and I'll make my best to follow up. If you enjoy it and would like to sustain me consider giving a like and sharing on your favorite socials. If u want u can add me on your socials this makes me very very happy!&lt;/p&gt;

&lt;p&gt;Stay safe and see you soon! 😎&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>jwt</category>
      <category>firebase</category>
      <category>vscode</category>
    </item>
  </channel>
</rss>
