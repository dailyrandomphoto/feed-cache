<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The 7 software testing principles</title>
      <author>Lucas Andrade</author>
      <pubDate>Sun, 10 Oct 2021 21:19:41 +0000</pubDate>
      <link>https://dev.to/lucashdoa/the-7-software-testing-principles-hlc</link>
      <guid>https://dev.to/lucashdoa/the-7-software-testing-principles-hlc</guid>
      <description>&lt;p&gt;Hello there! üëã &lt;/p&gt;

&lt;p&gt;I'm Lucas, a brazilian QA engineer, and this is Another QA Content nobody asked for (but i made it anyway üòÇ). My goal with this blog is to talk about things related to the QA world in my own way, giving my opinion and point of view. If you like it, follow me for more posts like this one!&lt;/p&gt;

&lt;p&gt;Today i want to talk about a subject that is covered at the first chapter of the CTFL syllabus. The seven &lt;del&gt;commandments&lt;/del&gt; principles of software testing. (This was a Moses pun if you didn't get it). No more puns &lt;del&gt;for now&lt;/del&gt;, let's open this ocean of knowlegde!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b6Mm6r7s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0adzng72s3gcnca7vkrh.gif" alt="Alt Text"&gt;
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#testing-shows-the-presence-of-defects-not-their-absence"&gt;
  &lt;/a&gt;
  1Ô∏è‚É£ Testing shows the presence of defects, not their absence
&lt;/h2&gt;

&lt;p&gt;Many QA engineers may have been in a situation like the following before: The product owner or even the client says your job is to guarantee the sprint deliverable is bug free.&lt;/p&gt;

&lt;p&gt;Testing is a destructive activity, it's goal is to make the software fail. When a tester write a test case, it is meant to find a bug, not to prove there is none.&lt;/p&gt;

&lt;p&gt;So, this principle states that it's impossible to guarantee that a testing object is defect free.&lt;/p&gt;

&lt;p&gt;Some points to be aware: Maybe a non-QA person will misunderstood this principle as an excuse for a QA that isn't good at his job. And on the other hand, it can be misused by a QA to justify not catching a bug that should have been found easily. I personally think this principle isn't meant to justify a bug that has got into production, i think it's meant to avoid creating false expectation on the product and the QA job.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exhaustive-testing-is-impossible"&gt;
  &lt;/a&gt;
  2Ô∏è‚É£ Exhaustive testing is impossible
&lt;/h2&gt;

&lt;p&gt;As a QA, you will probably never have the time to test every possible scenario of a software. &lt;/p&gt;

&lt;p&gt;Imagine a small form with 3 select fields, every field has 10 options. To test every possible scenario, it would take you 10¬≥ = 1000 test cases.&lt;/p&gt;

&lt;p&gt;We can use a black box testing technique called equivalent partitioning. Briefly explaining, it consists of dividing test data into partitions in such a way that all the members of a given partition are expected to be processed in the same way.&lt;/p&gt;

&lt;p&gt;There can even be a situation in wich time is a concern. In this case it's more recomended to perform a risk analysis, and prioritize tests based on the higher risks for the business.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#early-testing-saves-time-and-money"&gt;
  &lt;/a&gt;
  3Ô∏è‚É£ Early testing saves time and money
&lt;/h2&gt;

&lt;p&gt;This principle is probably the parent of the trending shift-left testing approach. It states that the testing activities should start as soon as possible in a project.&lt;/p&gt;

&lt;p&gt;Testing activities are not limited to execute or automate E2E tests when a feature is ready. A tester can also review documentation and requisits, to prevent errors and mistakes from advancing to later stages of the software development life cycle. Remember, the later you find a problem, the more it will cost to fix.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defects-cluster-together"&gt;
  &lt;/a&gt;
  4Ô∏è‚É£ Defects cluster together
&lt;/h2&gt;

&lt;p&gt;This principle is an application of the Pareto Principle. Maybe you don't know it by its name, but you might have heard about it somewhere. Here is a brief about it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For many outcomes, roughly 80% of consequences come from 20% of causes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In software testing, there's a high probability that 80% of the problems can be found at 20% of the modules/components. So be aware when you find a bug, for there can be more, hiding on the same feature.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#beware-of-the-pesticide-paradox"&gt;
  &lt;/a&gt;
  5Ô∏è‚É£ Beware of the pesticide paradox
&lt;/h2&gt;

&lt;p&gt;To explain this one i'll borrow a paragraph from a Guru99 article about the 7 principles of testing (you can find the link bellow in the references section).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Repetitive use of the same pesticide mix to eradicate insects during farming will over time lead to the insects developing resistance to the pesticide.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, if you repeat the same test case again and again, chances are it will become less effective (consider an effective test case one that has a higher probability of finding bugs). Because of that, as a QA you need to review your testing techniques and test cases frequently. In an Agile project where requisits change very often, this is even more crucial.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-is-context-dependent"&gt;
  &lt;/a&gt;
  6Ô∏è‚É£ Testing is context dependent
&lt;/h2&gt;

&lt;p&gt;This principle talks about how different contexts may influence the test in different ways.&lt;/p&gt;

&lt;p&gt;Testing in an agile project is done differently than it's done in waterfall, due to the differences in release periodicity.&lt;/p&gt;

&lt;p&gt;Testing an e-commerce is done differently than testing an internet banking system, due to the different risks involved.&lt;/p&gt;

&lt;p&gt;The correct tool for automating regression tests depends heavily on the context too. As you get more experienced, the more you get to understand the context you're incerted, and plan your QA job to fit it well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#absenceoferrors-is-a-falacy"&gt;
  &lt;/a&gt;
  7Ô∏è‚É£ Absence-of-errors is a falacy
&lt;/h2&gt;

&lt;p&gt;Like we have seen in principle number 2, testing shows the presence of defects and not their absence. What this principle states is that no matter how much effort you or your team put on testing activities, the tests alone can never guarantee an error-free software.&lt;/p&gt;

&lt;p&gt;A software isn't considered to have an error only when something doesn't work as expected. A system that is overcomplicated for the user (bad usability) or doesn't fullfil the user needs (bad modeling) is also considered to have errors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#b%C3%B4nus"&gt;
  &lt;/a&gt;
  üí∞B√¥nus
&lt;/h2&gt;

&lt;p&gt;To test your understanding of the seven testing principles presented above, try to solve this question from the CTFL 2018 sample exam:&lt;/p&gt;

&lt;p&gt;ü§î&lt;b&gt;(Sample Exam C, Question 4)&lt;/b&gt;: A product owner says that your role as a tester on an Agile team is to catch all the bugs before the end of each iteration. Which of the following is a testing principle that could be used to respond to this (false) statement?&lt;/p&gt;

&lt;p&gt;a) Defect clustering&lt;br&gt;
b) Testing shows the presence of defects&lt;br&gt;
c) Absence of error fallacy&lt;br&gt;
d) Root cause analysis&lt;/p&gt;

&lt;p&gt;The answer is below.&lt;/p&gt;




&lt;p&gt;If you've read this far, i hope the content has added something for you. If not, remember: &lt;em&gt;This is just another ordinary QA content&lt;/em&gt; üò¨.&lt;/p&gt;

&lt;p&gt;üçÄ See ya!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#b%C3%B4nus-question-answer"&gt;
  &lt;/a&gt;
  ‚ùó B√¥nus question answer
&lt;/h3&gt;

&lt;p&gt;&lt;b&gt;b&lt;/b&gt; is correct. Testing can show the presence of defects but cannot prove their absence, which makes it impossible to know if you have caught all the bugs. Further, the impossibility of exhaustive testing makes it impossible for you to catch all the bugs&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  üîç References
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.istqb.org/downloads/category/2-foundation-level-documents.html"&gt;CTFL Syllabus 2018&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.guru99.com/software-testing-seven-principles.html"&gt;Guru99&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.geeksforgeeks.org/software-engineering-seven-principles-of-software-testing/"&gt;Geek for Geeks&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-chat"&gt;
  &lt;/a&gt;
  üòÅ Let's chat!
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/lucashdoa"&gt;Github&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/lucashdoa/"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ctfl</category>
      <category>testing</category>
      <category>qa</category>
      <category>test</category>
    </item>
    <item>
      <title>‚úÖ Tell Me About A Time You Had To Handle Pressure | Facebook Behavioral Interview (Jedi) Series üî•</title>
      <author>The Interview Sage</author>
      <pubDate>Sun, 10 Oct 2021 21:12:10 +0000</pubDate>
      <link>https://dev.to/theinterviewsage/tell-me-about-a-time-you-had-to-handle-pressure-facebook-behavioral-interview-jedi-series-mj9</link>
      <guid>https://dev.to/theinterviewsage/tell-me-about-a-time-you-had-to-handle-pressure-facebook-behavioral-interview-jedi-series-mj9</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/LO_e3CDkPmM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Before we discuss this question, let us recap what the Behavioral Interview Round at Facebook is.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Behavioral Interview Round is also known as the Jedi Interview round at Facebook.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is about you and your history, your r√©sum√©, and your motivation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The purpose of this interview is to assess whether the candidate will thrive in Facebook's peer-to-peer, minimal process, and unstructured engineering organization.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For Software Engineers, the behavioral interview is actually part behavioral and part coding. The coding part is a shorter version of the usual coding interviews and is included to supplement the other two coding interviews to get an additional coding signal.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tips-amp-tricks-to-effectively-prepare-for-behavioral-interviews"&gt;
  &lt;/a&gt;
  Tips &amp;amp; Tricks to effectively prepare for Behavioral Interviews
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_kgnGQmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4y9t832s7yc0j58aycqb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_kgnGQmN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4y9t832s7yc0j58aycqb.png" alt="Tips &amp;amp; Tricks to effectively prepare for Behavioral Interviews" title="Behavioral Interview Tips &amp;amp; Tricks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Know yourself! Take the time to review your r√©sum√©, as the interviewer will almost certainly ask about key events in your work history.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Have concrete examples or anecdotes to support each of the questions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Familiarize yourself with Facebook's mission statement and its five core values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Be Bold&lt;/li&gt;
&lt;li&gt;Focus on Impact&lt;/li&gt;
&lt;li&gt;Move Fast&lt;/li&gt;
&lt;li&gt;Be Open&lt;/li&gt;
&lt;li&gt;Build Social Value&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Be yourself! Be open and honest about your successes and failures.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Be humble and focus on teamwork, leadership, and mentorship qualities.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, let us review how to effectively answer this question.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#question-tell-me-about-a-time-you-had-to-handle-pressure"&gt;
  &lt;/a&gt;
  Question: Tell Me About A Time You Had To Handle Pressure
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j7614MME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rzsfuu4aupr90rm67i4j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j7614MME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rzsfuu4aupr90rm67i4j.png" alt="Tell Me About A Time You Had To Handle Pressure" title="Tell Me About A Time You Had To Handle Pressure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="https://www.youtube.com/watch?v=Hr5UJnKxwyg&amp;amp;t=53s"&gt;Video Explanation&lt;/a&gt; with Evaluation Criteria, Response Framework, Tips &amp;amp; Tricks, Sample Answer (Example), and a Special Case of "Never Worked Under Pressure".&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Handling work pressure and stressful situations is a crucial part of everyone's career journey. Interviewers often ask candidates to tell about a time they had to handle pressure at their workplace.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#evaluation-criteria"&gt;
  &lt;/a&gt;
  Evaluation Criteria
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TkzFVgbO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ysjci4cyntgfv1p6z3r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TkzFVgbO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ysjci4cyntgfv1p6z3r.png" alt="Evaluation Criteria for Tell Me About A Time You Had To Handle Pressure" title="Evaluation Criteria for 'Tell Me About A Time You Had To Handle Pressure'"&gt;&lt;/a&gt; &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ke0R6l2N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rk3t26r3449d1cumhyao.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ke0R6l2N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rk3t26r3449d1cumhyao.png" alt="Evaluation Criteria for Tell Me About A Time You Had To Handle Pressure" title="Evaluation Criteria for 'Tell Me About A Time You Had To Handle Pressure'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Everyone faces stressful situations and comes under pressure once in a while at their jobs. Through this question, the interviewer's goal is to assess whether you can perform in challenging situations or unstructured environments and distinguish between the urgent and the important.&lt;/p&gt;

&lt;p&gt;They are trying to understand if you can stay calm, exercise judgment, and act responsibly in such unexpected high-pressure scenarios. They are also evaluating your:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Communication,&lt;/li&gt;
&lt;li&gt;Time management,&lt;/li&gt;
&lt;li&gt;Problem-solving, and&lt;/li&gt;
&lt;li&gt;Decision-making skills.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Employers want to know if you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Handle competing priorities,&lt;/li&gt;
&lt;li&gt;Shift gears when needed, and&lt;/li&gt;
&lt;li&gt;Understand the implications of missing deadlines.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They are looking to see if your coworkers can rely on you to get the work done.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#response-framework"&gt;
  &lt;/a&gt;
  Response Framework
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YI-pyOs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmt1nvw5z0m9zk6494y4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YI-pyOs1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gmt1nvw5z0m9zk6494y4.png" alt="Response Framework for Tell Me About A Time You Had To Handle Pressure" title="Response Framework for 'Tell Me About A Time You Had To Handle Pressure'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our advice is to pick a compelling and honest story that can articulate a real-life experience where you had to manage a high-pressure situation at your workplace.&lt;/p&gt;

&lt;p&gt;Describe the situation, the events that occurred, and explain how it became challenging while working on a particular project. For example, it can be any of the following scenarios:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A few of your colleagues working with you on the project unexpectedly left the team or the company, and you were left short-staffed to complete it within the deadline.&lt;/li&gt;
&lt;li&gt;Your manager or coworker might hand you a last-minute request that is of higher priority.&lt;/li&gt;
&lt;li&gt;Something genuinely urgent comes up, like a production issue, for which you had to drop everything else.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Explain to the interviewer how you evaluated and decided your plan of action. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You worked with your manager or technical lead to redefine your current OKRs and deprioritize a few optional tasks so that you can deliver the necessary features on time.&lt;/li&gt;
&lt;li&gt;Describe how you were creative and resourceful to get additional help from your own or another team to deliver the project within the deadline.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, elaborate on how you communicated about this shift with your manager, coworkers, and other stakeholders.&lt;/p&gt;

&lt;p&gt;Finally, express how the outcome and the impact were beneficial to the company or team. Also, explain the learnings you took from this challenging situation and how they helped you become a better engineer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tips-amp-tricks"&gt;
  &lt;/a&gt;
  Tips &amp;amp; Tricks
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cEftAEMj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f0nol2we68fhjkwpvjg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cEftAEMj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f0nol2we68fhjkwpvjg.png" alt="Tips and Tricks for Tell Me About A Time You Had To Handle Pressure" title="Tips &amp;amp; Tricks for 'Tell Me About A Time You Had To Handle Pressure'"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are some tips and tricks that will help you effectively prepare this question for the behavioral interview.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use a compelling story that is honest and believable.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is most desirable to describe a real-life example to the interviewer to show that you have actually faced such a situation in your career and not just talk about a generic strategy.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Always remain calm, composed, and confident while answering this question.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do not sugarcoat your answer with irrelevant details.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spend more time talking about the actions you took to handle the challenging situation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Show that you proactively communicated about the shifting priorities to all the stakeholders to keep them well informed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Focus on the business impact that you had on your company or team.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The biggest way to mess up answering this question is by simply saying that you have never worked under pressure at your workplace.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Instead, explain your strategies for dealing with stress in your day-to-day life.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prepare the response for this question beforehand, as it will be tough to structure your answer on the spot during the interview.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do not memorize the answer as it should come naturally, and you should sound confident to the interviewer.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#sample-answer-example"&gt;
  &lt;/a&gt;
  Sample Answer (Example)
&lt;/h2&gt;

&lt;p&gt;Here is Chandler. He is currently working as a tech lead at an internet startup. He is interviewing for the role of Staff Software Engineer at Facebook.&lt;/p&gt;

&lt;p&gt;üéß Listen to his response to this question in this &lt;a href="https://www.youtube.com/watch?v=Hr5UJnKxwyg&amp;amp;t=287s"&gt;YouTube Video&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#special-case-never-worked-under-pressure"&gt;
  &lt;/a&gt;
  Special Case: Never Worked Under Pressure
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eJXo4NCw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfdkozfzw58zwu7t2oim.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eJXo4NCw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfdkozfzw58zwu7t2oim.png" alt="Special Case: Never Worked Under Pressure" title="Special Case: Never Worked Under Pressure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It may be the case that you never had to work in a challenging and stressful situation at your workplace. New Grads and entry-level software engineers may fall under this category.&lt;/p&gt;

&lt;p&gt;If you are in such a situation, do not end your answer by simply saying that you have never worked under pressure. Instead, try to use a real experience from your college or day-to-day life. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Handling multiple courses and projects, dividing the time between your part-time job and coursework, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will help the interviewer evaluate you on the following attributes mentioned earlier:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How you manage your time,&lt;/li&gt;
&lt;li&gt;Stay calm in stressful situations,&lt;/li&gt;
&lt;li&gt;Exercise judgment,&lt;/li&gt;
&lt;li&gt;Communicate, and&lt;/li&gt;
&lt;li&gt;Shift gears when needed.&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#preparation-material"&gt;
  &lt;/a&gt;
  Preparation Material
&lt;/h1&gt;

&lt;p&gt;Learn more about the Evaluation Criteria, Response Framework, Tips &amp;amp; Tricks, and Sample Answers (Examples) to effectively prepare and answer these top questions asked in the Behavioral Interviews at Facebook. Certain special cases are also discussed which are usually faced by the candidates during these interviews.&lt;/p&gt;

&lt;p&gt;‚¨áÔ∏è &lt;a href="https://www.buymeacoffee.com/interviewsage/e/40678"&gt;Detailed Notes on Top Facebook Behavioral Interview Questions - Part 2&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#cracking-the-facebook-behavioral-interview"&gt;
  &lt;/a&gt;
  Cracking the Facebook Behavioral Interview
&lt;/h1&gt;

&lt;p&gt;If you have not read our first article on Top Facebook Behavioral Interview Questions, we recommend reading it by clicking the below link:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/theinterviewsage" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xMM4L2Ac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--B2cc8AK0--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/553012/244b250a-5230-4388-84d4-0c1d1ff70fb9.png" alt="theinterviewsage"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/theinterviewsage/top-facebook-behavioral-interview-questions-part-1-2a0o" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;‚úÖ Top Facebook Behavioral Interview Questions (Part 1) | Facebook Jedi Interview Round üî•&lt;/h2&gt;
      &lt;h3&gt;The Interview Sage „Éª May 15 „Éª 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;h1&gt;
  &lt;a href="#cracking-the-facebook-system-design-interview"&gt;
  &lt;/a&gt;
  Cracking the Facebook System Design Interview
&lt;/h1&gt;

&lt;p&gt;In case if you have not read our series on Cracking the Facebook System Design Interview, we recommend reading it by clicking the below link:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/theinterviewsage" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xMM4L2Ac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--B2cc8AK0--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/553012/244b250a-5230-4388-84d4-0c1d1ff70fb9.png" alt="theinterviewsage"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/theinterviewsage/top-facebook-system-design-interview-questions-31np" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Top Facebook System Design Interview Questions (Part 1) | Facebook Pirate Interview Round&lt;/h2&gt;
      &lt;h3&gt;The Interview Sage „Éª Jan 4 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;h1&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful Links
&lt;/h1&gt;

&lt;p&gt;‚úÖ &lt;a href="https://bit.ly/Educative-Unlimited"&gt;Educative.io Unlimited Plan [üí∞ 10% off for first 100 users]&lt;/a&gt;&lt;br&gt;
‚úÖ &lt;a href="https://bit.ly/Try-Exponent"&gt;TryExponent.com Membership [üí∞ Limited Time 10% offer]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üë©‚Äçüíª &lt;a href="https://www.educative.io/courses/grokking-the-system-design-interview?aff=KQZl"&gt;Best System Design Interview Course&lt;/a&gt;&lt;br&gt;
üöÄ &lt;a href="https://bit.ly/SWE-Interview-Course"&gt;Complete SWE Interview Course [üí∞ Limited Time 10% offer]&lt;/a&gt;&lt;br&gt;
üôã‚Äç‚ôÄÔ∏è &lt;a href="https://www.buymeacoffee.com/interviewsage/e/30176"&gt;Behavioral Interview Guide [üí∞ Special Discount]&lt;/a&gt;&lt;br&gt;
üìö &lt;a href="https://smarturl.it/InterviewPrepBook"&gt;Recommended Interview Preparation Book (on Amazon)&lt;/a&gt;&lt;/p&gt;




&lt;center&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/InterviewSage"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--121vjxPu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/o2l00b1bt3nl8fdfb0nn.png" alt="Buy Me a Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚òïÔ∏è Buy us a Coffee at &lt;a href="https://www.buymeacoffee.com/InterviewSage"&gt;BuyMeACoffee.com/InterviewSage&lt;/a&gt;&lt;/p&gt;


&lt;/center&gt;




&lt;center&gt;

&lt;p&gt;To stay updated about new posts, Subscribe &amp;amp; Follow Us!&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://www.youtube.com/TheInterviewSage?sub_confirmation=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CRCmz2gQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3uqifmelnuenxiik8pwx.png" alt="Subscribe to our YouTube channel" title="Subscribe to our YouTube channel"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://www.instagram.com/TheInterviewSage"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OADCpudp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ovhcxjpg0v5z2tidtydk.png" alt="Follow us on Instagram" title="Follow us on Instagram"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://www.facebook.com/TheInterviewSage"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zohyoISu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xyy3kyo44tmv645vvrqw.png" alt="Like &amp;amp; Follow us on Facebook" title="Like &amp;amp; Follow us on Facebook"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="http://twitter.com/intent/follow?source=followbutton&amp;amp;variant=1.0&amp;amp;screen_name=InterviewSage"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UoV_1sI3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xwwcu44k00a0a8hpfbmf.png" alt="Follow us on Twitter" title="Follow us on Twitter"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://www.linkedin.com/in/TheInterviewSage"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5QaEiEG6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zcrwzwc9tnv0q3zmkih8.png" alt="Follow &amp;amp; Connect on LinkedIn" title="Follow &amp;amp; Connect on LinkedIn"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;


&lt;/center&gt;



&lt;blockquote&gt;
&lt;p&gt;This article is part of the series on Behavioral Interviews at Facebook. So, follow us to get notified when our next article in this series is published. Thanks for reading! &lt;/p&gt;
&lt;div class="ltag__user ltag__user__id__553012"&gt;
  
    .ltag__user__id__553012 .follow-action-button {
      background-color: #3b49df !important;
      color: #f9fafa !important;
      border-color: #3b49df !important;
    }
  
    &lt;a href="/theinterviewsage" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xMM4L2Ac--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--B2cc8AK0--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/553012/244b250a-5230-4388-84d4-0c1d1ff70fb9.png" alt="theinterviewsage image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/theinterviewsage"&gt;The Interview Sage&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/theinterviewsage"&gt;Our goal is to create Software Eng Interview tutorials to help you get a job at companies like Facebook, Google, Apple, &amp;amp; Amazon. We will deep-dive into System Design, Coding, &amp;amp; Behavioral interviews.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;/blockquote&gt;

&lt;p&gt;üì∏ Some images used are from free&lt;span&gt;pik&lt;/span&gt;.com: Freepik, pch.vector, vectorjuice, pikisuperstar, raw&lt;span&gt;pixel&lt;/span&gt;.com, slidesgo, stories, Upklyak, jcomp, macrovector_official, syarifahbrit, redgreystock&lt;/p&gt;

&lt;p&gt;&lt;a href="https://disclosureanddisclaimer.theinterviewsage.com/"&gt;Full Disclosure &amp;amp; Disclaimer&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>programming</category>
      <category>career</category>
    </item>
    <item>
      <title>Analysis of Building a Web Component</title>
      <author>Nick Alico</author>
      <pubDate>Sun, 10 Oct 2021 19:39:42 +0000</pubDate>
      <link>https://dev.to/nro337/analysis-of-building-a-web-component-1nbe</link>
      <guid>https://dev.to/nro337/analysis-of-building-a-web-component-1nbe</guid>
      <description>&lt;h2&gt;
  &lt;a href="#design-build-extend"&gt;
  &lt;/a&gt;
  Design, Build, Extend
&lt;/h2&gt;

&lt;p&gt;I like to approach the idea of designing and building a web component similar to how I have been trained to approach UX Design: following the Design Thinking Method. For those of you who are unfamiliar, the Design Thinking Method is a design approach which incentivises considering all potential aspects and perspectives of design, and applies an iterative approach to discover design components, user requirements, and refine implementation decisions. The 5 part system consists of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Empathize&lt;/li&gt;
&lt;li&gt;Define&lt;/li&gt;
&lt;li&gt;Ideate&lt;/li&gt;
&lt;li&gt;Prototype&lt;/li&gt;
&lt;li&gt;Test&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Courtesy of the Hasso-Plattner Institute of Design at Stanford&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's break down how these 5 steps dictated my considerations and approach when building a web component and developing on its API.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Empathize&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We do this innately, but in the form of web components it's important to think about the type of component you will be developing and the people that will be using it. What is the background of the people who will likely use the component? Are there any usability and/or accessibility considerations that you will need to prioritize to meet the needs of your stakeholders? The goal is to try to paint a representative picture of the types of people who could use your component, and the types of ways they may try to use it. What if you component was used in a fashion or application other than what it was intended for? Would it be able to support that user's or that developer's intentions? Becasue web components are meant to be reused and extensible, it is important to keep these concepts in mind so that you avoid developing such a restricted component that it impossible to have it apply to other needs and use cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Define&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Defining the web component and its API can be one of the most challenging parts of building a component as it is one of the most crucial parts of the entire development process. If your empathize phase has clarified a base need or functionality, this will likely indicate that your need is aligned with a base behavior that is similar to a simple HTML element or well-known component that exists on the web today. For my first web component project, I knew I was building a CTA button which immediately meant I would need to include some type of &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; and/or &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags to complete the click and action-based events that are performed when a user clicks on a CTA button. You are then able to think about the bounds of your component. What use cases do you want to design for and support natively, and what considerations are not as crucial to your component? Maybe responsiveness for an array of different devices is crucial, but the level of animation or "flashiness" is not a huge concern because you are aiming for a minimalistic component. Situating this stance will allow you to better identify where to focus your efforts and how to plan your building process.
&lt;/li&gt;
&lt;li&gt;It is at this stage, once you have defined the bounds of your component, that you also need to consider the component's and associated element's APIs. What are the states that you need to design and implement for your component? What happens when you hover over it, or click on a button or icon? What happens when you use your keyboard to navigate to it? Is that behavior consistent with your hover behavior? Considering the states of your component will give you a better idea of the breadth required in building out the properties of you components. See the next section "Ideate" for further details on this.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ideate&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This is one of my favorite parts of designing and developing software, the ability to have free reign over iterations of the design and structure of a project or component. The goal of ideating is to creatively and iteratively enact your plan for your component, and to specifically come up with variations and styles that you think would serve as interesting approachng to your component design. As mentioned above, the properties of you component come into play between the define and ideate stages. Think about the elements of your component, considering how the could change both with a change in your component's state or to meet the design needs of another developer. For the CTA button I worked on, my team and I considered aspects such as the button icon, title, whether the button was disabled, and theme properties such as dark or high contrast mode. Using these properties for the criteria to inform how you should develop CSS variations for you component will allow you to easily "reflect" certain properties within each implementation of your component. You can think of it almost as turning on or off a lightswitch: All a developer has to do is pass a value to that property on the component and they will be able to leverage a different design or theme. The reward of ideation emerges in the implementing and use phase, but it is a crucial step in driving the flexibility and use case support of your web component.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prototype&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Here is the step where you are actually building out base versions of your component in an iterative fashion. At this period of the building process, it is important to understand that there are really no "bad" approaches: this is the point where you want to build elements into your component and style them in diverse ways from what you may initially think to be the correct approach. For example, I started out my CTA button using no animations because I thought it would be distracting from the button's functioning itself. However, our team ended up implmenting a fade-to-transparent transition on our button background that looks very smooth and is still fully accessible. Try using CSS variable to make this process easier on yourself, this way you can change the text color or font in one location in code, and see this change persist throughout your entire component. This is the best way to approach using themes, as you can simply overwrite the traditional component style with a themed style simply by checking the value of a reflected property on the component in HTML. Prototyping is meant for quick and dirty development in the beginning, and wil turn into a refinement process as you develop. This is done on purpose, and allows you to focus on more intricate logic and stylistic edge cases as your prototypes become more refined and situated.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Our final and often most disliked component of software development: testing. Testing is so crucial for any web component, as they are specifically designed to be reusable and adaptive components of code to allow for a wide array of applications and use cases. Testing for responsive design, accessibility, state management, navicability, etc. can be a nightmare as your components become more complex and add more elements into them. This is why I highly recommend using CSS variables for quick design manipulation, as well as the use of Storybook. Storybook functions as a customizable design library which easily lets developers implement and test different states, formats, and styles of their component side-by-side in one compact demo platform. It acts more as a visual testing platform, but allows for easy iteration and design management in later steps of the component development process.&lt;/li&gt;
&lt;li&gt;It is also crucial to write programming logic tests yourself as well. I won't go into this much, but it is crucial to understand whether certain content or data types will impact the functionality of your component. Most of this testing comes down to logic handling and edge-case recognition to see long-term benefits, but writing tests for your components will assure you are supporting a consistent experience across different states and use cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#component-breakdown"&gt;
  &lt;/a&gt;
  Component Breakdown
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Naturally, your component will need to be broken down into its constituent parts based on the modularity and flexibility that your design requirements specify, as well as based on the actual HTML structure of your component. The more complex your component, and the higher number of nested HTML tags, the all the more crucial it is to scaffold out a clear structure of how each element behaves. For example, my first web component involved designing a CTA button. This button consisted of a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; tag with an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag wrapped around it. The purpose of wrapping the button instead of using only a button tag was to allow the CTA button to function as a button that acts more as a hyperlink than a traditional button. The use case dictated that the button needed to open a completely new URL in a new browser tab, so it made more sense to nest the button tag so that the href used for the hyperlink could be attached across the entire button as well as any other elements that needed to be added to the button. If you wanted to add other clickable elements to the button in the future, it is as simple as nesting those elements at the same level as the button inside the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag.&lt;/li&gt;
&lt;li&gt;The point of this example is to show that the way you structure and nest elements plays a huge role in the complexity of your CSS and the readability of your code. Poor element structuring can lead to messy CSS with dense logic to control different states, whereas a structured component like my CTA button allows for very simple implementation and customization as necessary by anyone intending to use the component.&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;Another component I am now working on consists of building a card web component. What is unique about the card compared to the initial button component I worked on is the fact that a card is a container of smaller elements. These smaller elements include a banner, content body, and an extensible icon. Our team was provided with a starter component that includes a basic scaffold of a card containing text and images, and demos a few different examples of the card's scaffolding to depict how the use of the &lt;em&gt;type&lt;/em&gt; keyword can allow for matching of card CSS styles to a specific card tag itself. The component is expected to use the button I have assisted in developing previously as a devDependency to demo interactivity of the card component. The component will utilize LitElement properties and Lifecycle functions to keep track of updating the behavior of the card based on each state and property value.&lt;/li&gt;
&lt;li&gt;For this component, it will be crucial to consider how each of these element's designs and dimensions will be leveraged together to allow for a cohesive stylistic experience when interacting with the card. For example, accessibility when users navigate with a keyboard through each of the elements is paramount, as we will need to be sure that a logical tab path allows for interaction with any actionable elements on the card. Another example would be the behavior of the card when a user clicks an item within the bounds of the component. We play to support a sliding card with hidden content behind the front pane, so it will be important in our scaffolding implementation to assure that selection of content inside the card will bubble up content and focus to the front pane of the card after click event occurs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1alcVf57--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8hqppzwshsv4f5ui3zu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1alcVf57--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8hqppzwshsv4f5ui3zu.png" alt="Basic Card Scaffolding Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#provided-card-example"&gt;
  &lt;/a&gt;
  &lt;em&gt;Provided Card Example&lt;/em&gt;
&lt;/h3&gt;




&lt;h2&gt;
  &lt;a href="#expected-difficulties"&gt;
  &lt;/a&gt;
  Expected Difficulties
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Building web components is hard: there I said it. Handling the vast number of states, properties, design edge cases, logic edge cases, and behaviors while supporting the extensibility that you desire for your component means much of your time will be spent writing specific CSS and monitoring how you pass properties into your component. One of the greatest challenges I faced was structuring my CSS in a way that targeted specific states without overwriting other states or thematic behavior.  If you have a poorly scaffolded component in the define and ideate stages, you will really struggle to reflect the visual aspects you want to have on your component behave the way it should in a readable manner. &lt;/li&gt;
&lt;li&gt;Another difficulty I faced was with deciding when my prototype was "complete". I would argue that a web component is never really complete, perhaps by design, but it can be hard to know when it is ready to ship as a usable component. I found myself considering more complex state logic and subsequent stylistic behavior of my CSS button, but realized these ideas were more than I needed to support given the purpose of the CTA button in the first place. This doesn't mean you shouldn't extend and update your components, or at least build in support for this customization, but that you should take this into account during ideation so you minimize the risk of scope creep.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#reflection-on-my-first-experience"&gt;
  &lt;/a&gt;
  Reflection on my First Experience
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Overall, my first experience developing a web component was an incredibly rewarding learning experience. I didn't really realize the complexity of considerations that went into designing something as "simple" as a button, so it gives me a great deal of respect for the designers and developers responsible for building our entire design systems and libraries at larger companies. These guides can become thousands of components and states as use cases become more precise, so having the forethought to look into how to ideate early while keeping a component's scalability in mind was a really valuable perspective to adopt as I continue into my professional career. It really comes down to motivation and consistency. The future of the web is component-based, and I think it is a highly valuable skill to bring component knowledge to your place of work as a front-end engineer. The modularity of web components really is the future of the web, and I think this will allow for a more simplistic customization process in the future of web design.&lt;/li&gt;
&lt;li&gt;It became easier for me to understand how components can relate to larger components within a webpage, and how explicit component-based design can make it very easy to support additional requirements and use cases within a system later on. Compared to a "one-and-done" UI development approach, web components make this experience of designing for the future night-and-day.&lt;/li&gt;
&lt;li&gt;Finally, I recommend working with partners when you are developing a component or set of components. You are really limited to your own mental model, which greatly restricts the use cases and value you may place on certain development decisions of a web component. Collaborating with others lets you test ideas more quickly, promotes your group to experiment and make mistakes, and will ultimately make you aware of more features and nuances of the platform you are using, whether that be LitElement or a JS framework such as React or Vue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please take a look into building your first web component! It's a fun and rewarding experience that creates a more customizable and inclusive internet for all.&lt;/p&gt;

&lt;p&gt;Here's my group's button if you're interested: &lt;a href="https://www.npmjs.com/package/@table-in-the-corner/invisi-button"&gt;https://www.npmjs.com/package/@table-in-the-corner/invisi-button&lt;/a&gt; &lt;/p&gt;

</description>
      <category>webcomponents</category>
      <category>lit</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Making the most boring website ever with TypeScript, NestJs, React and others. Part 3. </title>
      <author>NordicBeaver</author>
      <pubDate>Sun, 10 Oct 2021 19:34:58 +0000</pubDate>
      <link>https://dev.to/nordicbeaver/making-the-most-boring-website-ever-with-typescript-nestjs-react-and-others-part-3-3i6a</link>
      <guid>https://dev.to/nordicbeaver/making-the-most-boring-website-ever-with-typescript-nestjs-react-and-others-part-3-3i6a</guid>
      <description>&lt;p&gt;&lt;em&gt;This series is about making a generic website for a local business with TypeScript, NodeJs, NestJs, Prisma, React and NextJs. I'm trying to make my videos quite short, about 10 minutes each (except for the first one), while putting as much content there as I can. &lt;a href="https://www.youtube.com/playlist?list=PL7b0cPjh8z6K_4qLNu_QdE3RpiU6omViC"&gt;Here&lt;/a&gt; is the full playlist.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this video we will implement file uploading on our server. Then we will add picture setting for the barbers in the admin panel. And finally we'll create a new page for barbers on the client website.&lt;/p&gt;

&lt;p&gt;Enjoy :).&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8xuyTxvBQcg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Building A Payment Application using Python Flask Framework, Docker and  and the Beyonic API.</title>
      <author>Mwenda Harun Mbaabu</author>
      <pubDate>Sun, 10 Oct 2021 19:12:24 +0000</pubDate>
      <link>https://dev.to/grayhat/building-a-payment-application-using-python-flask-framework-docker-and-and-the-beyonic-api-2284</link>
      <guid>https://dev.to/grayhat/building-a-payment-application-using-python-flask-framework-docker-and-and-the-beyonic-api-2284</guid>
      <description>&lt;p&gt;In this article, we are going to learn how to create a payment application using Python flask framework, Docker and the Beyonic API. &lt;/p&gt;

&lt;p&gt;If you want some basics on how to use Flask to build web applications or APIS, I recommend you to read my previous article on Getting Started with Python Web Development üëáüèª &lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/grayhat" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZkVjs71l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--6aap2Bou--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/308943/da7a617c-9287-40bc-b4d6-cf99d762bedf.jpeg" alt="grayhat"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/grayhat/getting-started-with-python-web-development-1jl9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Getting Started with Python Web Development. &lt;/h2&gt;
      &lt;h3&gt;Mwenda Harun Mbaabu „Éª Jul 30 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#python&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#datascience&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#machinelearning&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#beyonic-api"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Beyonic Api&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The Beyonic API is a REST based application programming interface that lets you extend the Beyonic dashboard features into your application and systems, allowing you to build amazing payment experiences.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;With the Beyonic API you can:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Receive and send money and prepaid airtime.&lt;/li&gt;
&lt;li&gt;List currencies and networks supported by the Beyonic API.&lt;/li&gt;
&lt;li&gt;Check whether a bank is supported by the Beyonic API.&lt;/li&gt;
&lt;li&gt;View your account transactions history.&lt;/li&gt;
&lt;li&gt;Add, retrieve, list, and update contacts to your Beyonic account.&lt;/li&gt;
&lt;li&gt;Use webhooks to send notifications to URLs on your server that when specific events occur in your Beyonic account (e.g. payments). &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Getting Help&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For usage, general questions, and discussions about the Beyonic API the best place to go to is &lt;a href="https://beyonic.com/join-community"&gt;Beyhive Slack Community&lt;/a&gt;, also feel free to clone and edit this repository to meet your project, application or system requirements.&lt;/p&gt;

&lt;p&gt;You can download all code snippets used in this article from this GitHub repository üëáüèª&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/HarunMbaabu"&gt;
        HarunMbaabu
      &lt;/a&gt; / &lt;a href="https://github.com/HarunMbaabu/BeyonicAPI-Python-Examples"&gt;
        BeyonicAPI-Python-Examples
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Beyonic API Python official client library simplified examples using Flask, Django and Fast API.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h3&gt;
&lt;strong&gt;Beyonic API Python Examples.&lt;/strong&gt;
&lt;/h3&gt;
&lt;p&gt;The beyonic APIs Doc Reference: &lt;a href="https://apidocs.beyonic.com/" rel="nofollow"&gt;https://apidocs.beyonic.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Beyonic API is a &lt;a href="https://en.wikipedia.org/wiki/Representational_state_transfer" rel="nofollow"&gt;representational state transfer&lt;/a&gt;, REST based application programming interface that lets you extend the Beyonic dashboard features into your application and systems, allowing you to build amazing payment experiences.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;With the Beyonic API you can:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Receive and send money  and prepaid airtime.&lt;/li&gt;
&lt;li&gt;List currencies and networks supported by the Beyonic API.&lt;/li&gt;
&lt;li&gt;Check whether a bank is supported by the Beyonic API.&lt;/li&gt;
&lt;li&gt;View your account transactions history.&lt;/li&gt;
&lt;li&gt;Add, retrieve, list, and update contacts to your Beyonic account.&lt;/li&gt;
&lt;li&gt;Use webhooks to send notifications to URLs on your server that when specific events occur in your Beyonic account (e.g. payments).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
&lt;strong&gt;Getting Help&lt;/strong&gt;
&lt;/h3&gt;
&lt;p&gt;For usage, general questions, and discussions the best place to go to is &lt;a href="https://beyonic.com/join-community" rel="nofollow"&gt;Beyhive Slack Community&lt;/a&gt;, also feel free to clone and edit this repository to meet your project, application or system requirements.&lt;/p&gt;
&lt;p&gt;To start‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/HarunMbaabu/BeyonicAPI-Python-Examples"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;To start using the Beyonic Python API, you need to start by downloading the Beyonic API official Python client library and setting your secret key.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install the Beyonic API Python Official client library.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;beyonic&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Setting your secret key.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To set the secret key install the python-dotenv modeule, Python-dotenv is a Python module that allows you to specify environment variables in traditional UNIX-like ‚Äú.env‚Äù (dot-env) file within your Python project directory, it helps us work with SECRETS and KEYS without exposing them to the outside world, and keep them safe during development too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installing python-dotenv modeule&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dotenv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Creating a .env file to keep our secret keys.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;touch&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside your .env file specify the Beyonic API Token .&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.env file&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;BEYONIC_ACCESS_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"enter your API key here"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will get your API Token by clicking your user name on the bottom left of the left sidebar menu in the Beyonic web portal and selecting ‚ÄòManage my account‚Äô from the dropdown menu. The API Token is shown at the very bottom of the page. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;getExamples.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; 
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;beyonic&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_dotenv&lt;/span&gt; 

&lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;myapi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'BEYONIC_ACCESS_KEY'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;beyonic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myapi&lt;/span&gt; 

&lt;span class="c1"&gt;# Listing account: Working. 
&lt;/span&gt;&lt;span class="n"&gt;accounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;beyonic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accounts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;#Listing currencies: Not working yet.
&lt;/span&gt;&lt;span class="s"&gt;'''
supported_currencies = beyonic.Currency.list()
print(supported_currencies)

Supported currencies are: USD, UGX, KES, BXC, GHS, TZS, RWF, ZMW, MWK, BIF, EUR, XAF, GNF, XOF, XOF
'''&lt;/span&gt;

&lt;span class="c1"&gt;#Listing networks: Not working yet.
&lt;/span&gt;&lt;span class="s"&gt;"""
networks = beyonic.Network.list()
print(networks)
"""&lt;/span&gt;

&lt;span class="c1"&gt;#Listing transactions: Working. 
&lt;/span&gt;&lt;span class="n"&gt;transactions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;beyonic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transactions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="c1"&gt;#Listing contact: Working. 
&lt;/span&gt;&lt;span class="n"&gt;mycontacts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;beyonic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Contact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mycontacts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 


&lt;span class="c1"&gt;#Listing events: Not working yet.
&lt;/span&gt;&lt;span class="s"&gt;'''
events = beyonic.Event.list()
print(events)

Error: AttributeError: module 'beyonic' has no attribute 'Event'
'''&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can get these and more examples implemented using flask and Fast API frameworks from the links below: &lt;/p&gt;

&lt;p&gt;1). &lt;a href="https://github.com/HarunMbaabu/BeyonicAPI-Python-Examples/tree/main/FLASK"&gt;Flask framework examples&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;2). &lt;a href="https://github.com/HarunMbaabu/BeyonicAPI-Python-Examples/tree/main/FASTAPI"&gt;Fast API framework examples&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dockerfile"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Dockerfile&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;A &lt;strong&gt;Dockerfile&lt;/strong&gt; is a text document that contains all the commands a user could call on the command line to assemble an image. Using docker build users can create an automated build that executes several command-line instructions in succession.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3.8-slim-buster&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./requirements.txt ./requirements.txt&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; .&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt

&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [ "python3", "getExamples.py" ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Build docker image called demo&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;bey&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run docker image called demo&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;bey&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let create a Docker compose file to build and run a docker container using the Docker image we just created.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dockercomposeyml"&gt;
  &lt;/a&gt;
  &lt;strong&gt;docker-compose.yml&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;docker-compose.yml&lt;/strong&gt; is a config file for docker-compose. it allows to deploy, combine and configure multiple docker-container at the same time. the Docker "rule" is to outsource every single process to an own docker container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3.6"&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;python getExamples.py&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;.:/pythonBeyonicExamples&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are going to run the following command from the same directory where the &lt;strong&gt;docker-compose.yml&lt;/strong&gt; file is located. The docker compose up command will start and run the entire app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; docker compose up 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;br&gt;
NB: The screenshot below might differ according to your account deatils and your transcations in deatils. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mj2ZU_NW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tq80x9uds7w47owi7mu9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mj2ZU_NW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tq80x9uds7w47owi7mu9.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To stop the container running on daemon mode use the below command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;compose&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ArNRmt2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3rfdgh8x0v2cfmj0xjc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ArNRmt2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g3rfdgh8x0v2cfmj0xjc.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#contributing-to-this-repository"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Contributing to this repository.&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;All contributions, bug reports, bug fixes, enhancements, and ideas are welcomed. I hope you enjoy reading the article as much as i enjoyed writing it, you can connect with me on twitter üëâüèª &lt;a href="https://twitter.com/HarunMbaabu"&gt;@HarunMbaabu&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>python</category>
      <category>payment</category>
      <category>flask</category>
      <category>docker</category>
    </item>
    <item>
      <title>Mastering Mutations in React Query</title>
      <author>Dominik D</author>
      <pubDate>Sun, 10 Oct 2021 18:57:02 +0000</pubDate>
      <link>https://dev.to/tkdodo/mastering-mutations-in-react-query-dm6</link>
      <guid>https://dev.to/tkdodo/mastering-mutations-in-react-query-dm6</guid>
      <description>&lt;p&gt;We've covered a lot of ground already when it comes to the features and concepts React Query provides. Most of them are about &lt;em&gt;retrieving&lt;/em&gt; data - via the &lt;em&gt;useQuery&lt;/em&gt; hook. There is however a second, integral part to working with data: updating it.&lt;/p&gt;

&lt;p&gt;For this use-case, React Query offers the &lt;em&gt;useMutation&lt;/em&gt; hook.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-are-mutations"&gt;
  &lt;/a&gt;
  What are mutations?
&lt;/h1&gt;

&lt;p&gt;Generally speaking, mutations are functions that have a side effect. As an example, have a look at the &lt;em&gt;push&lt;/em&gt; method of Arrays: It has the side effect of &lt;em&gt;changing&lt;/em&gt; the array in place where you're pushing a value to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [1, 2]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;em&gt;immutable&lt;/em&gt; counterpart would be &lt;em&gt;concat&lt;/em&gt;, which can also add values to an array, but it will return a new Array instead of directly manipulating the Array you operate on:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//  [1]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// [1, 2]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As the name indicates, &lt;em&gt;useMutation&lt;/em&gt; also has some sort of side effect. Since we are in the context of &lt;a href="https://tkdodo.eu/blog/react-query-as-a-state-manager"&gt;managing server state&lt;/a&gt; with React Query, mutations describe a function that performs such a side effect &lt;em&gt;on the server&lt;/em&gt;. Creating a todo in your database would be a mutation. Logging in a user is also a classic mutation, because it performs the side effect of creating a token for the user.&lt;/p&gt;

&lt;p&gt;In some aspects, &lt;em&gt;useMutation&lt;/em&gt; very similar to &lt;em&gt;useQuery&lt;/em&gt;. In others, it is quite different.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#similarities-to-usequery"&gt;
  &lt;/a&gt;
  Similarities to useQuery
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;useMutation&lt;/em&gt; will track the state of a mutation, just like &lt;em&gt;useQuery&lt;/em&gt; does for queries. It'll give you &lt;em&gt;loading&lt;/em&gt;, &lt;em&gt;error&lt;/em&gt; and &lt;em&gt;status&lt;/em&gt; fields to make it easy for you to display what's going on to your users.&lt;/p&gt;

&lt;p&gt;You'll also get the same nice callbacks that &lt;em&gt;useQuery&lt;/em&gt; has: &lt;em&gt;onSuccess&lt;/em&gt;, &lt;em&gt;onError&lt;/em&gt; and _ onSettled_. But that's about where the similarities end.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#differences-to-usequery"&gt;
  &lt;/a&gt;
  Differences to useQuery
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;useQuery&lt;/em&gt; is declarative, &lt;em&gt;useMutation&lt;/em&gt; is imperative.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By that, I mean that queries mostly run automatically. You define the dependencies, but React Query takes care of running the query immediately, and then also performs smart background updates when deemed necessary. That works great for queries because we want to keep what we see on the screen &lt;em&gt;in sync&lt;/em&gt; with the actual data on the backend.&lt;/p&gt;

&lt;p&gt;For mutations, that wouldn't work well. Imagine a new todo would be created every time you focus your browser window ü§®. So instead of running the mutation instantly, React Query gives you a function that you can invoke whenever you want to make the mutation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;AddComment&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// this doesn't really do anything yet&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addComment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMutation&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;newComment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/posts/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/comments`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newComment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;
      &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;// ‚úÖ mutation is invoked when the form is submitted&lt;/span&gt;
        &lt;span class="nx"&gt;addComment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentTarget&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;comment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;textarea&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"comment"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Comment&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another difference is that mutations don't share state like &lt;em&gt;useQuery&lt;/em&gt; does. You can invoke the same &lt;em&gt;useQuery&lt;/em&gt; call multiple times in different components and will get the same, cached result returned to you - but this won't work for mutations.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tying-mutations-to-queries"&gt;
  &lt;/a&gt;
  Tying mutations to queries
&lt;/h1&gt;

&lt;p&gt;Mutations are, per design, not directly coupled to queries. A mutation that likes a blog post has no ties towards the query that fetches that blog post. For that to work, you would need some sort of underlying schema, which React Query doesn't have.&lt;/p&gt;

&lt;p&gt;To have a mutation reflect the changes it made on our queries, React Query primarily offers two ways:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#invalidation"&gt;
  &lt;/a&gt;
  Invalidation
&lt;/h2&gt;

&lt;p&gt;This is conceptually the simplest way to get your screen up-to-date. Remember, with server state, you're only ever displaying a snapshot of data from a given point in time. React Query tries to keep that up-to-date of course, but if you're deliberately changing server state with a mutation, this is a great point in time to tell React Query that some data you have cached is now "invalid". React Query will then go and refetch that data if it's currently in use, and your screen will update automatically for you once the fetch is completed. The only thing you have to tell the library is &lt;em&gt;which&lt;/em&gt; queries you want to invalidate:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useAddComment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQueryClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useMutation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newComment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/posts/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/comments`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;newComment&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ‚úÖ refetch the comments list for our blog post&lt;/span&gt;
        &lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;invalidateQueries&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;comments&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Query invalidation is pretty smart. Like all &lt;a href="https://react-query.tanstack.com/guides/filters#query-filters"&gt;Query Filters&lt;/a&gt;, it uses fuzzy matching on the query key. So if you have multiple keys for your comments list, they will all be invalidated. However, only the ones that are currently active will be refetched. The rest will be marked as stale, which will cause them to be refetched the next time they are used.&lt;/p&gt;

&lt;p&gt;As an example, let's assume we have the option to sort our comments, and at the time the new comment was added, we have two queries with comments in our cache:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;['posts', 5, 'comments', { sortBy: ['date', 'asc'] }
['posts', 5, 'comments', { sortBy: ['author', 'desc'] }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we're only displaying one of them on the screen, &lt;em&gt;invalidateQueries&lt;/em&gt; will refetch that one and mark the other one as stale.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#direct-updates"&gt;
  &lt;/a&gt;
  Direct updates
&lt;/h2&gt;

&lt;p&gt;Sometimes, you don't want to refetch data, especially if the mutation already returns everything you need to know. If you have a mutation that updates the title of your blog post, and the backend returns the complete blog post as a response, you can update the query cache directly via &lt;em&gt;setQueryData&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useUpdateTitle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQueryClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useMutation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newTitle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/posts/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;newTitle&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// üí° response of the mutation is passed to onSuccess&lt;/span&gt;
      &lt;span class="na"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newPost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ‚úÖ update detail view directly&lt;/span&gt;
        &lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setQueryData&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;newPost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Putting data into the cache directly via &lt;em&gt;setQueryData&lt;/em&gt; will act as if this data was returned from the backend, which means that all components using that query will re-render accordingly.&lt;/p&gt;

&lt;p&gt;I'm showing some more examples of direct updates and the combination of both approaches in &lt;a href="https://tkdodo.eu/blog/effective-react-query-keys#structure"&gt;#8: Effective React Query Keys&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;I personally think that most of the time, invalidation should be preferred. Of course, it depends on the use-case, but for direct updates to work reliably, you need more code on the frontend, and to some extent duplicate logic from the backend. Sorted lists are for example pretty hard to update directly, as the position of my entry could've potentially changed because of the update. Invalidating the whole list is the "safer" approach.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#optimistic-updates"&gt;
  &lt;/a&gt;
  Optimistic updates
&lt;/h1&gt;

&lt;p&gt;Optimistic updates are one of the key selling points for using React Query mutations. The &lt;em&gt;useQuery&lt;/em&gt; cache give us data instantly when switching between queries, especially when combined with &lt;a href="https://react-query.tanstack.com/guides/prefetching"&gt;prefetching&lt;/a&gt;. Our whole UI feels very snappy because of it, so why not get the same advantage for mutations as well?&lt;/p&gt;

&lt;p&gt;A lot of the time, we are quite certain that an update will go through. Why should the user wait for a couple of seconds until we get the okay from the backend to show the result in the UI? The idea of optimistic updates is to fake the success of a mutation even before we have sent it to the server. Once we get a successful response back, all we have to do is invalidate our view again to see the real data. In case the request fails, we're going to roll back our UI to the state from before the mutation.&lt;/p&gt;

&lt;p&gt;This works great for small mutations where instant user feedback is actually required. There is nothing worse than having a toggle button that performs a request, and it doesn't react at all until the request has completed. Users will double or even triple click that button, and it will just feel "laggy" all over the place.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;I've decided to &lt;em&gt;not&lt;/em&gt; show an additional example. The &lt;a href="https://react-query.tanstack.com/guides/optimistic-updates"&gt;official docs&lt;/a&gt; cover that topic very well, and they also have a codesandbox example &lt;a href="https://react-query.tanstack.com/examples/optimistic-updates"&gt;in JavaScript&lt;/a&gt; and &lt;a href="https://react-query.tanstack.com/examples/optimistic-updates-typescript"&gt;in TypeScript&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I further think that optimistic updates are a bit over-used. Not every mutation needs to be done optimistically. You should really be sure that it rarely fails, because the UX for a rollback is not great. Imagine a Form in a Dialog that closes when you submit it, or a redirect from a detail view to a list view after an update. If those are done prematurely, they are hard to undo.&lt;/p&gt;

&lt;p&gt;Also, be sure that the instant feedback is really required (like in the toggle button example above). The code needed to make optimistic updates work is non-trivial, especially compared to "standard" mutations. You need to mimic what the backend is doing when you're faking the result, which can be as easy as flipping a Boolean or adding an item to an Array, but it might also get more complex really fast:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the todo you're adding needs an id, where do you get it from?&lt;/li&gt;
&lt;li&gt;If the list you're currently viewing is sorted, will you insert the new entry at the right position?&lt;/li&gt;
&lt;li&gt;What if another user has added something else in the meantime - will our optimistically added entry switch positions after a refetch?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All these edge cases might make the UX actually worse in some situations, where it might be enough to disable the button and show a loading animation while the mutation is in-flight. As always, choose the right tool for the right job.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#common-gotchas"&gt;
  &lt;/a&gt;
  Common Gotchas
&lt;/h1&gt;

&lt;p&gt;Finally, let's dive into some things that are good to know when dealing with mutations that might not be that obvious initially:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#awaited-promises"&gt;
  &lt;/a&gt;
  awaited Promises
&lt;/h2&gt;

&lt;p&gt;Promises returned from the mutation callbacks are awaited by React Query, and as it so happens, &lt;em&gt;invalidateQueries&lt;/em&gt; returns a Promise. If you want your mutation to stay in &lt;em&gt;loading&lt;/em&gt; state while your related queries update, you have to return the result of &lt;em&gt;invalidateQueries&lt;/em&gt; from the callback:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// üéâ will wait for query invalidation to finish&lt;/span&gt;
  &lt;span class="nl"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;invalidateQueries&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;comments&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// üöÄ fire and forget - will not wait&lt;/span&gt;
  &lt;span class="na"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;invalidateQueries&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;comments&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#mutate-or-mutateasync"&gt;
  &lt;/a&gt;
  Mutate or MutateAsync
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;useMutation&lt;/em&gt; gives you two functions - &lt;em&gt;mutate&lt;/em&gt; and &lt;em&gt;mutateAsync&lt;/em&gt;. What's the difference, and when should you use which one?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;mutate&lt;/em&gt; doesn't return anything, while &lt;em&gt;mutateAsync&lt;/em&gt; returns a Promise containing the result of the mutation. So you might be tempted to use &lt;em&gt;mutateAsync&lt;/em&gt; when you need access to the mutation response, but I would still argue that you should almost always use &lt;em&gt;mutate&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You can still get access to the &lt;em&gt;data&lt;/em&gt; or the &lt;em&gt;error&lt;/em&gt; via the callbacks, and you don't have to worry about error handling: Since &lt;em&gt;mutateAsync&lt;/em&gt; gives you control over the Promise, you also have to catch errors manually, or you might get an &lt;a href="https://stackoverflow.com/questions/40500490/what-is-an-unhandled-promise-rejection"&gt;unhandled promise rejection&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ‚úÖ accessing the response via onSuccess&lt;/span&gt;
  &lt;span class="nx"&gt;myMutation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// üö® works, but is missing error handling&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;myMutation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mutateAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// üòï this is okay, but look at the verbosity&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;myMutation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mutateAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// do nothing&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Handling errors is not necessary with &lt;em&gt;mutate&lt;/em&gt;, because React Query catches (and discards) the error for you internally. It is literally implemented with: &lt;em&gt;mutateAsync().catch(noop)&lt;/em&gt;üòé&lt;/p&gt;

&lt;p&gt;The only situations where I've found &lt;em&gt;mutateAsync&lt;/em&gt; to be superior is when you really need the Promise for the sake of having a Promise. This can be necessary if you want to fire off multiple mutations concurrently and want to wait for them all to be finished, or if you have dependent mutations where you'd get into callback hell with the callbacks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mutations-only-take-one-argument-for-variables"&gt;
  &lt;/a&gt;
  Mutations only take one argument for variables
&lt;/h2&gt;

&lt;p&gt;Since the last argument to &lt;em&gt;mutate&lt;/em&gt; is the options object, &lt;em&gt;useMutation&lt;/em&gt; can currently only take &lt;em&gt;one&lt;/em&gt; argument for variables. This is certainly a limitation, but it can be easily worked around by using an object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// üö® this is invalid syntax and will NOT work&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mutation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMutation&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;updateTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nx"&gt;mutation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// ‚úÖ use an object for multiple variables&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mutation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMutation&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;updateTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nx"&gt;mutation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;'hello', body: 'world' })&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To read more on why that is currently necessary, have a look at &lt;a href="https://github.com/tannerlinsley/react-query/discussions/1226"&gt;this discussion&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-callbacks-might-not-fire"&gt;
  &lt;/a&gt;
  Some callbacks might not fire
&lt;/h2&gt;

&lt;p&gt;You can have callbacks on &lt;em&gt;useMutation&lt;/em&gt; as well as on &lt;em&gt;mutate&lt;/em&gt; itself. It is important to know that the callbacks on &lt;em&gt;useMutation&lt;/em&gt; fire before the callbacks on &lt;em&gt;mutate&lt;/em&gt;. Further, the callbacks on &lt;em&gt;mutate&lt;/em&gt; might not fire &lt;em&gt;at all&lt;/em&gt; if the component unmounts before the mutation has finished.&lt;/p&gt;

&lt;p&gt;That's why I think it's a good practice to separate concerns in your callbacks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do things that are absolutely necessary and logic related (like query invalidation) in the &lt;em&gt;useMutation&lt;/em&gt; callbacks.&lt;/li&gt;
&lt;li&gt;Do UI related things like redirects or showing toast notifications in &lt;em&gt;mutate&lt;/em&gt; callbacks. If the user navigated away from the current screen before the mutation finished, those will purposefully not fire.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This separation is especially neat if &lt;em&gt;useMutation&lt;/em&gt; comes from a custom hook, as this will keep query related logic in the custom hook while UI related actions are still in the UI. This also makes the custom hook more reusable, because how you interact with the UI might vary on a case by case basis - but the invalidation logic will likely always be the same:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useUpdateTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;useMutation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updateTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ‚úÖ always invalidate the todo list&lt;/span&gt;
    &lt;span class="na"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;invalidateQueries&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;list&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// in the component&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useUpdateTodo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;updateTodo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mutate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;'newTitle' },&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="c1"&gt;// ‚úÖ only redirect if we're still on the detail page&lt;/span&gt;
  &lt;span class="c1"&gt;// when the mutation finishes&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;onSuccess&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;That's it for today. Feel free to reach out to me on &lt;a href="https://twitter.com/tkdodo"&gt;twitter&lt;/a&gt;&lt;br&gt;
if you have any questions, or just leave a comment below ‚¨áÔ∏è&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>PFX dosyalarƒ± hakkƒ±nda</title>
      <author>Ali Orhun Akkirman</author>
      <pubDate>Sun, 10 Oct 2021 18:45:43 +0000</pubDate>
      <link>https://dev.to/aciklab/pfx-dosyalari-hakkinda-3f1o</link>
      <guid>https://dev.to/aciklab/pfx-dosyalari-hakkinda-3f1o</guid>
      <description>&lt;h2&gt;
  &lt;a href="#pfx-nedir"&gt;
  &lt;/a&gt;
  PFX nedir?
&lt;/h2&gt;

&lt;p&gt;PFX dosya formatƒ± temel olarak "&lt;strong&gt;PKCS #12&lt;/strong&gt;" olarak bilinen standartƒ±n √∂nc√ºl√ºd√ºr. Bu standart, birden fazla kriptografik objenin bir dosyada kullanƒ±lmasƒ±nƒ± saƒülamaktadƒ±r. ƒ∞√ßerisinde tek bir sertfikayƒ± barƒ±ndƒ±ran diƒüer sertifikalardan en b√ºy√ºk farkƒ± tam olarak budur. Bu standartƒ±n genellikle kullanƒ±lan kullanƒ±m ≈üekli bir &lt;em&gt;sertifika zinciri&lt;/em&gt; 'nin sertifikalarƒ± ile birlikte "&lt;em&gt;√∂zel anahtar&lt;/em&gt;" barƒ±ndƒ±rmasƒ±dƒ±r. Bu dosya standartƒ± hakkƒ±nda bilmemiz gereken bir ba≈üka √∂zellik de ≈üifreli ve imzalƒ± olabilmesidir. A√ßƒ±k kaynak kodlu openssl uygulamasƒ±nƒ±n bu standardƒ± kullanarak i≈ülem yapmasƒ± i√ßin &lt;strong&gt;pkcs12&lt;/strong&gt; parametresi kullanƒ±lmaktadƒ±r.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pzl83NDD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5zxtp0p6lg6hcpnx8bng.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pzl83NDD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5zxtp0p6lg6hcpnx8bng.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#openssl-ile-pfx-i%C5%9Flemleri"&gt;
  &lt;/a&gt;
  OpenSSL ile PFX i≈ülemleri
&lt;/h2&gt;

&lt;p&gt;OpenSSL √ºzerinde PFX i≈ülemleri i√ßerisindeki sertifikalarƒ± ve anahtarlarƒ± ayƒ±rma i≈ülemleridir.&lt;/p&gt;

&lt;p&gt;Bir PFX dosyasƒ± i√ßindeki √∂zel anahtar'ƒ±n √ßƒ±kartƒ±lmasƒ± (sertifikalarƒ±n √ßƒ±kartƒ±lmamasƒ±) i√ßin a≈üaƒüƒ±daki komut kullanƒ±lmaktadƒ±r. Anahtar dosyasƒ± √∂rnekte .key olarak g√∂sterilmi≈ütir fakat bazƒ± durumlarda .pem olarak da kullanƒ±labilmektedir.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;openssl pkcs12 &lt;span class="nt"&gt;-in&lt;/span&gt; tekdosya.pfx &lt;span class="nt"&gt;-nocerts&lt;/span&gt; &lt;span class="nt"&gt;-out&lt;/span&gt; ozelanahtar.key &lt;span class="nt"&gt;-nodes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bir PFX dosyasƒ± i√ßindeki sertifikalarƒ±n √ßƒ±kartƒ±lmasƒ± (anahtarlarƒ±n √ßƒ±kartƒ±lmamasƒ±) i√ßin a≈üaƒüƒ±daki komut kullanƒ±lmaktadƒ±r. Sertifika dosyasƒ± √∂rnekte .crt olarak g√∂sterilmi≈ütir fakat bazƒ± durumlarda .pem olarak da kullanƒ±labilmektedir.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;openssl pkcs12 &lt;span class="nt"&gt;-in&lt;/span&gt; tekdosya.pfx &lt;span class="nt"&gt;-nokeys&lt;/span&gt; &lt;span class="nt"&gt;-out&lt;/span&gt; sertifikalar.crt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#pfxteki-%C3%B6zel-anahtarlar"&gt;
  &lt;/a&gt;
  PFX'teki √∂zel anahtarlar
&lt;/h2&gt;

&lt;p&gt;PFX dosyasƒ±ndan yukarƒ±da anlatƒ±lan y√∂ntem ile √ßƒ±kartƒ±lan √∂zel anahtar PKCS#8 standartƒ±na uygundur. Yani a≈üaƒüƒ±daki gibi ba≈ülayan bir dosya g√∂z√ºkmektedir:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-----BEGIN PRIVATE KEY-----
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-----BEGIN ENCRYPTED PRIVATE KEY-----
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Oysa ki bazƒ± durumlarda elimizde PKCS#1 standartƒ±na uygun RSA ≈üifreleme ile olu≈üturulmu≈ü bir anahtar olmasƒ± gerekebilir. Bu gibi durumda yukarƒ±daki komut yerine a≈üaƒüƒ±daki gibi bir komut √ßalƒ±≈ütƒ±rƒ±lmasƒ± gerekmektedir:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;openssl pkcs12 &lt;span class="nt"&gt;-in&lt;/span&gt; tekdosya.pfx &lt;span class="nt"&gt;-nodes&lt;/span&gt; &lt;span class="nt"&gt;-nocerts&lt;/span&gt; | openssl rsa &lt;span class="nt"&gt;-out&lt;/span&gt; ozelanahtar.key
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bu ≈üekilde olu≈üturulan √∂zel anahtar PKCS#1 standartƒ±na uygun ve a≈üaƒüƒ±daki gibi ba≈ülayan bir dosya olarak RSA ≈üifreleme y√∂ntemi ile sunulacaktƒ±r.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;----------BEGIN RSA PRIVATE KEY-----
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#parola-konular%C4%B1"&gt;
  &lt;/a&gt;
  Parola konularƒ±
&lt;/h2&gt;

&lt;p&gt;PFX dosyasƒ±nƒ±n kullanƒ±labilmesi i√ßin √ßoƒüu zaman parola korumasƒ± bulunmaktadƒ±r. Normal ≈üartlarda OpenSSL sizden bu bilgileri talep etmektedir. Fakat tek komut ile yapƒ±lmasƒ± istenirse a≈üaƒüƒ±daki parametreler kullanƒ±labilmektedir. ƒ∞lk parametre ile var olan PFX dosyasƒ±nƒ±n parolasƒ± kullanƒ±lƒ±rken, ikinci parametre ise √ßƒ±ktƒ± dosyasƒ±na da parola koyulup koyulmayacaƒüƒ±nƒ± anlatmaktadƒ±r.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nt"&gt;-passin&lt;/span&gt; pass:&lt;span class="s2"&gt;"parola1"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nt"&gt;-passout&lt;/span&gt; pass:&lt;span class="s2"&gt;"parola2"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ayrƒ±ca √ßƒ±kan √∂zel anahtardaki parolanƒ±n silinmesi gerektiƒüi zaman a≈üaƒüƒ±daki gibi parolayƒ± kaldƒ±rabilrisiniz:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;openssl rsa &lt;span class="nt"&gt;-in&lt;/span&gt; ozelanahtar.key &lt;span class="nt"&gt;-out&lt;/span&gt; parolasizanahtar.key
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#sertifikalar%C4%B1n-tiplerine-g%C3%B6re-%C3%A7%C4%B1kart%C4%B1lmas%C4%B1"&gt;
  &lt;/a&gt;
  Sertifikalarƒ±n tiplerine g√∂re √ßƒ±kartƒ±lmasƒ±
&lt;/h2&gt;

&lt;p&gt;PFX konusunda en √ßok kullanƒ±lan bir diƒüer √∂zellik ise i√ßerisinde birden fazla sertfiikanƒ±n yer almasƒ±. Ve bu sertifikalar √ßoƒüu zaman sertfiika zincirini olu≈üturmaktadƒ±r. Bu zincirin tepesinde de Sertifika Otoritesi (CA) bulunup altta da ƒ∞stemci (client) bulunmaktadƒ±r. PFX dosyasƒ±nda bu ≈üekilde bir ayrƒ±m yapƒ±lmasƒ± isteniyorsa a≈üaƒüƒ±daki gibi yapƒ±labilmektedir.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;openssl pkcs12 &lt;span class="nt"&gt;-in&lt;/span&gt; tekdosya.pfx &lt;span class="nt"&gt;-clcerts&lt;/span&gt; &lt;span class="nt"&gt;-nokeys&lt;/span&gt; &lt;span class="nt"&gt;-out&lt;/span&gt; clientcert.crt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;openssl pkcs12 &lt;span class="nt"&gt;-in&lt;/span&gt; tekdosya.pfx &lt;span class="nt"&gt;-cacerts&lt;/span&gt; &lt;span class="nt"&gt;-nokeys&lt;/span&gt; &lt;span class="nt"&gt;-out&lt;/span&gt; cacert.crt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#yeni-bir-pfx-dosyas%C4%B1-olu%C5%9Fturmak"&gt;
  &lt;/a&gt;
  Yeni bir PFX dosyasƒ± olu≈üturmak
&lt;/h2&gt;

&lt;p&gt;PFX dosyasƒ± ba≈üta bahsettiƒüim gibi birden fazla sertifika veya √∂zel anahtarƒ± barƒ±ndƒ±rdƒ±ƒüƒ± i√ßin a≈üaƒüƒ±daki formatta bir komut ile yeni pfx dosyalarƒ± olu≈üturulabilmektedir:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;openssl pkcs12 &lt;span class="nt"&gt;-export&lt;/span&gt; &lt;span class="nt"&gt;-in&lt;/span&gt; sertifika1.pem &lt;span class="nt"&gt;-inkey&lt;/span&gt; anahtar1.key &lt;span class="nt"&gt;-out&lt;/span&gt; tekdosya1.pfx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>pfx</category>
      <category>sertifika</category>
      <category>openssl</category>
    </item>
    <item>
      <title> Introduction to Data structures and Algorithms in Python</title>
      <author>Phylis Jepchumba</author>
      <pubDate>Sun, 10 Oct 2021 18:44:47 +0000</pubDate>
      <link>https://dev.to/luxacademy/data-structures-and-algorithms-in-python-2i88</link>
      <guid>https://dev.to/luxacademy/data-structures-and-algorithms-in-python-2i88</guid>
      <description>&lt;p&gt;Data structures are a way of organizing and storing data so that they can be accessed and worked with efficiently while Algorithms are sequence of well defined instructions  for solving a problem or a accomplishing a given task.&lt;/p&gt;

&lt;p&gt;This article gives a detailed understanding of the most commonly used data structures that is Stack and queue and their implementation in python.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#stack"&gt;
  &lt;/a&gt;
  STACK
&lt;/h6&gt;

&lt;p&gt;Stack is one of the earliest data structure defined in computer science as a linear data structure which stores items using LIFO( Last In Last Out) principle for insertion and deletion.&lt;/p&gt;

&lt;p&gt;To get a clear understanding of a stack think about a pile/stack of books. You add a book at the top of the stack, so the first one to be picked up will be the last one that was added to the stack.&lt;/p&gt;

&lt;p&gt;Stack has two operations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Push- adds an item to the top of the stack.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mSTJKdkZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdfuftiufnmwhcpbbh1i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mSTJKdkZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdfuftiufnmwhcpbbh1i.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pop- removes an item from the stack.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yx_3jLxR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92m8rulj7nn08wry5dkf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yx_3jLxR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92m8rulj7nn08wry5dkf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#why-do-we-use-stacks"&gt;
  &lt;/a&gt;
  Why do we use stacks?
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Stack are simple to learn and implement.&lt;/li&gt;
&lt;li&gt;Stack allows us store and retrieve data sequentially.&lt;/li&gt;
&lt;li&gt;Stacks take O(1) time for insert and delete operations.&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;
  &lt;a href="#real-world-use-cases-of-a-stack"&gt;
  &lt;/a&gt;
  Real world use cases of a stack.
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Web browsers use stack to keep track of URL that you have accessed previously. When you visit a new page, it is added to the stack when you hit the back button, stack is popped and previous URL is accessed.&lt;/li&gt;
&lt;li&gt;Undo mechanism in text editor uses stack to keep all changes.&lt;/li&gt;
&lt;li&gt;To implement other data structures- stack is used to implement searches in graphs and trees.&lt;/li&gt;
&lt;li&gt;Compilers and Parsers uses stack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://tutorialsbookmarks.com/applications-of-stack-in-data-structure/"&gt;More applications of Stack Data structures&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#stack-methods"&gt;
  &lt;/a&gt;
  Stack Methods
&lt;/h6&gt;

&lt;p&gt;Stack operations are implemented using the following methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;stack.IsEmpty- Returns True if a stack is empty and false otherwise.&lt;/li&gt;
&lt;li&gt;stack.length()- Returns length of stack.&lt;/li&gt;
&lt;li&gt;stack.top()- returns a pointer/reference to top element in stack.&lt;/li&gt;
&lt;li&gt;stack.push(x)- inserts element x to the top of the stack.&lt;/li&gt;
&lt;li&gt;stack.pop()- Removes top element of stack and returns it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;
  &lt;a href="#stack-implementation-in-python"&gt;
  &lt;/a&gt;
  Stack implementation in Python.
&lt;/h6&gt;

&lt;p&gt;In python, we can implement stack using the following ways;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using the built-in List data structure. &lt;/li&gt;
&lt;li&gt;Using the deque library which efficiently provides stack operations in one object. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Stack Using List.&lt;/p&gt;

&lt;p&gt;To implement stack using list, &lt;strong&gt;append&lt;/strong&gt; and &lt;strong&gt;pop&lt;/strong&gt; methods are used.&lt;br&gt;
append() method in python adds a single item to the existing list&lt;br&gt;
pop() removes the element at the specified position&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'stack'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'queue'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'list'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'tuple'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;['stack', 'queue', 'list', 'tuple']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using pop&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;tuple&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;IndexError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pop&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;empty&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://colab.research.google.com/drive/1HaKVwd6zhK92vLn45xm1Cim-0fIoD0bu?usp=sharing"&gt;Check this implementation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.edureka.co/blog/stack-in-python/"&gt; Read More about stacks&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#queues"&gt;
  &lt;/a&gt;
  QUEUES
&lt;/h6&gt;

&lt;p&gt;Just like a stack, a queue is a linear data structure. &lt;br&gt;
Queue stores items using FIFO (First in first out) principle for insertion and deletion.&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#operations-associated-with-queue-in-python"&gt;
  &lt;/a&gt;
  Operations Associated with Queue in Python.
&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Enqueue: It adds an element to the end of the queue. When the queue reaches its total capacity, it reaches an overflow condition. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dequeue: Removes an element from the queue.  When the queue becomes empty, it reaches an underflow condition. &lt;/li&gt;
&lt;li&gt;Front: returns the first item from the queue. &lt;/li&gt;
&lt;li&gt;Rare: Returns the last item from the queue.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;
  &lt;a href="#applications-of-a-queue"&gt;
  &lt;/a&gt;
  Applications of a Queue
&lt;/h6&gt;

&lt;p&gt;A queue is useful in the following scenarios;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Handling interrupts in real-time systems- interrupts are handled in same order as they arrive.&lt;/li&gt;
&lt;li&gt;Handling website traffic.&lt;/li&gt;
&lt;li&gt;Serving request on a single shared resource like a printer or CPU task scheduling.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.geeksforgeeks.org/applications-of-queue-data-structure/"&gt;Applications of Queue Data Structure&lt;/a&gt;&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#how-to-implement-queue-in-python"&gt;
  &lt;/a&gt;
  How to implement queue in Python
&lt;/h6&gt;

&lt;p&gt;There are different ways to implement a queue in Python. The &lt;br&gt;
common ways are;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using built-in List data structure.&lt;/li&gt;
&lt;li&gt;Using collections.deque library&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;
  &lt;a href="#implementing-a-queue-in-python-with-a-list"&gt;
  &lt;/a&gt;
  Implementing a Queue in Python with a List
&lt;/h6&gt;

&lt;p&gt;The list‚Äôs append() and pop() methods are used to insert and delete elements from the queue.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Initialize a queue
&lt;/span&gt;
&lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="c1"&gt;# Adding elements to the queue
&lt;/span&gt;
&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Python'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Javascript'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Typescript'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;['Python', 'Javascript', 'Typescript']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Removing elements from the queue
&lt;/span&gt;


&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Python
Javascript
Typescript
[]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#implementing-a-queue-in-python-with-collectionsdeque"&gt;
  &lt;/a&gt;
  Implementing a Queue in Python with collections.deque
&lt;/h6&gt;

&lt;p&gt;The deque class from the python collections module can also be used to implement a queue. It is more efficient because deque provides faster enqueue and dequeue operations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;

&lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Black'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'White'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Orange'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;deque(['Black', 'White', 'Orange'])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope you enjoy reading the article as much as I enjoyed writing it, the following are the useful resources and reference materials that i used. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://colab.research.google.com/drive/1bd6jJFKrOZLgxMC_ieJYJNe2L48n4Fx1?usp=sharing"&gt;Find the full source code here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.section.io/engineering-education/queue-data-structure-python/"&gt;Using the Queue Data Structure in Python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.educative.io/edpresso/how-to-implement-a-queue-in-python?utm_term=&amp;amp;utm_campaign=%5BTest%5D+Dynamic+Verticals&amp;amp;utm_source=adwords&amp;amp;utm_medium=ppc&amp;amp;hsa_acc=5451446008&amp;amp;hsa_cam=14045073269&amp;amp;hsa_grp=128822123241&amp;amp;hsa_ad=535845844735&amp;amp;hsa_src=g&amp;amp;hsa_tgt=aud-597782228546:dsa-1394252596758&amp;amp;hsa_kw=&amp;amp;hsa_mt=b&amp;amp;hsa_net=adwords&amp;amp;hsa_ver=3&amp;amp;gclid=Cj0KCQjwnoqLBhD4ARIsAL5JedKJSQeXV9jwhJBGLrU1JocjSGoeNKUGTkvbmC6EPXogXDL7tKFmaBgaAo2CEALw_wcB"&gt;How to implement a queue in Python&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Creating a simple timer and score keeper in JavaScript.</title>
      <author>davidchedrick</author>
      <pubDate>Sun, 10 Oct 2021 18:40:31 +0000</pubDate>
      <link>https://dev.to/davidchedrick/creating-a-simple-timer-and-score-keeper-in-javascript-394g</link>
      <guid>https://dev.to/davidchedrick/creating-a-simple-timer-and-score-keeper-in-javascript-394g</guid>
      <description>&lt;p&gt;We are going to focus on creating a simple timer and score keeper using just HTML and JavaScript.&lt;/p&gt;

&lt;p&gt;First we will start with creating our index.html with just basic HTML and our script tag that will connect our index.html and index.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;title&amp;gt;Game&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;script src="index.js" type="text/javascript"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, within the body we will add a div with an ID of "gameDiv". This div will hold the content of our game. Within "gameDiv" we will add two more divs that will hold our Time and Score. Both will contain a span that will hold our counts. These count numbers are what we will be manipulating with our JavaScript. As you see bellow, I named the spans with an ID of "timer" and "score". Remember,all of these ID names are what I chose to call them. You can name them whatever you want, but the name should be something that makes since to you and other people reading your code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;body&amp;gt;
    &amp;lt;div id="gameDiv"&amp;gt;
        &amp;lt;div&amp;gt;Time: &amp;lt;span id="timer"&amp;gt;10&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;Score: &amp;lt;span id="score"&amp;gt;0&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script src="index.js" type="text/javascript"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is all we will put in our HTML file. Everything else will be done with JavaScript.&lt;br&gt;
Start with creating a index.js that we already connected to our index.html. &lt;/p&gt;

&lt;p&gt;First we will start with our global variables. &lt;br&gt;
The .querySelector() makes it easier to write our code buy adding our selections into variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const gameDiv= document.querySelector('#gameDiv');
let timer = document.querySelector('#timer');
let score = document.querySelector('#score');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;startCountDown holds our setInterval() method which calls our function countDown, and we will add a 1000 millisecond delay:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let startCountDown = setInterval(countDown, 1000);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Variables timeLeft and totalScore will hold the current values of our timer and score:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let timeLeft = 10;
let totalScore = 0;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next method we will utilize will be .addEventListener()&lt;br&gt;
Once the DOM content is fully loaded it will call our first function renderGame:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.addEventListener('DOMContentLoaded', renderGame())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are into our first function. Inside this function we still have access to our variables set in our global scope, but now we will add some variables that will now only have a function scope and will not be available outside of this function.&lt;br&gt;
First we will create a new DIV using the .createElement() method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function renderGame() {
    const gameCard = document.createElement('div');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we will create a button. &lt;br&gt;
Now that we stored that created button into the variable click we can now type click to access our button.&lt;br&gt;
Now we add in some text for our button and then we add on an event listener to our button. Our event listener will be triggered by a click from the mouse and will call on our function pointsClick:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    const click = document.createElement('button');
    click.textContent = 'CLICK FOR POINTS ';
    click.addEventListener('click', pointsClick);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly in this function we append our click variable to our gamecard. Then we append our gamecard to our gameDiv:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    gameCard.append(click);
    gameDiv.append(gameCard);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next function is pointsClick. It is called by the previous event listener we added in. Every time the button we created is clicked it triggers the event listener. &lt;br&gt;
First in this function totalScore++ adds one to our score and score.innerText changes our score from a 0 to 1 on our webpage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function pointsClick() {
    totalScore++
    score.innerText = totalScore
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our countDown function was called at the top when we set our variable in global scope for our .setInterval() method. &lt;br&gt;
First timeLeft-- will countdown our timer and timer.innerText will reflect that on our webpage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function countDown(){
    timeLeft--;
    timer.innerText = timeLeft;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once timeLeft hits 0 we need an if statement to let the program know to go to our gameOver function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    if(timeLeft === 0){
        gameOver();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our last function is gameOver(). &lt;br&gt;
First we clearInterval so that our timer stops at 0.&lt;br&gt;
Next, we have to grab that button we created earlier and tell the event listener to stop. Without taking off the event listener we would be able to continue to click for points even after the timer stopped.&lt;br&gt;
Now we want to tell the player that the game is over and display the finial score.&lt;br&gt;
So we create one more element, an h1 that will display our end game text on the screen.&lt;br&gt;
Lastly we append the gameOver variable to our gameDiv.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function gameOver() {
    clearInterval(startCountDown);

    const button = document.querySelector('button')
    button.removeEventListener('click', pointsClick)

    const gameOver = document.createElement('h1');
    gameOver.innerHTML = 'GAME OVER!' + '&amp;lt;br&amp;gt;' + `Total Score: ${totalScore}`;

    gameDiv.append(gameOver);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is all we need to create a timer and score keeper. Try it out for yourself and then add this into a more complicated JavaScript game.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codepen.io/davidchedrick/pen/GRvRBNZ"&gt;Click to see my example code.&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Terminal Animation for your website using Typed.js</title>
      <author>Mr.Shah</author>
      <pubDate>Sun, 10 Oct 2021 18:21:13 +0000</pubDate>
      <link>https://dev.to/shahstavan/terminal-animation-for-your-website-using-typed-js-2hcl</link>
      <guid>https://dev.to/shahstavan/terminal-animation-for-your-website-using-typed-js-2hcl</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZI4aT6e2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdni.iconscout.com/illustration/premium/thumb/web-development-2081748-1764588.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZI4aT6e2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdni.iconscout.com/illustration/premium/thumb/web-development-2081748-1764588.png" alt="Web Development"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Many times when we come through some interesting thing such as animations or Transitions we are eager to know how to implement it in real practice.&lt;/p&gt;

&lt;p&gt;I came to know many developers are using Terminal Animations for their website why should I help Beginner Web Developers to implement it for their website.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/shahstavan07/embed/ZEJEMYN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Besides, you can also add other stuffs in animations like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;startDelay: 0 - [startDelay time before typing starts in milliseconds]&lt;/li&gt;
&lt;li&gt;shuffle: false - [shuffle the strings]&lt;/li&gt;
&lt;li&gt;loopCount: Infinity - [Amount of loops]

For more you can checkout this GitHub Repo:
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mattboldt"&gt;
        mattboldt
      &lt;/a&gt; / &lt;a href="https://github.com/mattboldt/typed.js"&gt;
        typed.js
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A JavaScript Typing Animation Library
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/mattboldt/typed.js" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/eb826b5c4cff3ed6a0abe9fbc2c19322bfb07b1b828eec5f3188b876fd419968/68747470733a2f2f7472617669732d63692e6f72672f6d617474626f6c64742f74797065642e6a732e7376673f6272616e63683d74797065642d322e30" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://codeclimate.com/github/mattboldt/typed.js" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d336235b6df4d0a219e09ab2ab560715858488b0b0e1690949293e6dad97ed81/68747470733a2f2f636f6465636c696d6174652e636f6d2f6769746875622f6d617474626f6c64742f74797065642e6a732f6261646765732f6770612e737667" alt="Code Climate"&gt;&lt;/a&gt;
&lt;a href="https://github.com/mattboldt/typed.js"&gt;&lt;img src="https://camo.githubusercontent.com/cc01525466017233efb51affe79a698366c39ebdbec0f10caa4561c5429d743c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f6d617474626f6c64742f74797065642e6a732e737667" alt="GitHub release"&gt;&lt;/a&gt;
&lt;a href="https://img.shields.io/npm/dt/typed.js.svg" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/25ef105d22bea464df194ebd3588577423b3c4cbe0a769bcce2be2b0928c9afa/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f64742f74797065642e6a732e737667" alt="npm"&gt;&lt;/a&gt;
&lt;a href="https://raw.githubusercontent.com/mattboldt/typed.js/master/LICENSE.txt" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/83d3746e5881c1867665223424263d8e604df233d0a11aae0813e0414d433943/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e737667" alt="GitHub license"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/mattboldt/typed.js/master/logo-cropped.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cHZo11ua--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/mattboldt/typed.js/master/logo-cropped.png" width="450px" title="Typed.js"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
&lt;a href="http://www.mattboldt.com/demos/typed-js/" rel="nofollow"&gt;Live Demo&lt;/a&gt; | &lt;a href="http://mattboldt.github.io/typed.js/" rel="nofollow"&gt;View All Demos&lt;/a&gt; | &lt;a href="http://mattboldt.github.io/typed.js/docs" rel="nofollow"&gt;View Full Docs&lt;/a&gt; | &lt;a href="http://www.mattboldt.com" rel="nofollow"&gt;mattboldt.com&lt;/a&gt;
&lt;/h3&gt;
&lt;p&gt;Typed.js is a library that types. Enter in any string, and watch it type at the speed you've set, backspace what it's typed, and begin a new sentence for however many strings you've set.&lt;/p&gt;

&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;h4&gt;
Choose One&lt;/h4&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;npm install typed.js
yarn add typed.js
bower install typed.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;
CDN&lt;/h4&gt;
&lt;div class="highlight highlight-text-html-basic position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;script&lt;/span&gt; &lt;span class="pl-c1"&gt;src&lt;/span&gt;="&lt;span class="pl-s"&gt;https://cdn.jsdelivr.net/npm/typed.js@2.0.12&lt;/span&gt;"&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;script&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h4&gt;
Setup&lt;/h4&gt;
&lt;p&gt;This is really all you need to get going.&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;// Can also be included with a regular script tag&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-v"&gt;Typed&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'typed.js'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-k"&gt;var&lt;/span&gt; &lt;span class="pl-s1"&gt;options&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-c1"&gt;strings&lt;/span&gt;: &lt;span class="pl-kos"&gt;[&lt;/span&gt;&lt;span class="pl-s"&gt;'&amp;lt;i&amp;gt;First&amp;lt;/i&amp;gt; sentence.'&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-s"&gt;'&amp;amp;amp; a second sentence.'&lt;/span&gt;&lt;span class="pl-kos"&gt;]&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-c1"&gt;typeSpeed&lt;/span&gt;: &lt;span class="pl-c1"&gt;40&lt;/span&gt;
&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-k"&gt;var&lt;/span&gt; &lt;span class="pl-s1"&gt;typed&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-v"&gt;Typed&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'.element'&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-s1"&gt;options&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Use with ReactJS&lt;/h3&gt;
&lt;p&gt;Hook-based function component: &lt;a href="https://jsfiddle.net/mattboldt/60h9an7y/" rel="nofollow"&gt;https://jsfiddle.net/mattboldt/60h9an7y/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Class component: &lt;a href="https://jsfiddle.net/mattboldt/ovat9jmp/" rel="nofollow"&gt;https://jsfiddle.net/mattboldt/ovat9jmp/&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Use with Vue.js&lt;/h3&gt;
&lt;p&gt;Check out the Vue.js component: &lt;a href="https://github.com/Orlandster/vue-typed-js"&gt;https://github.com/Orlandster/vue-typed-js&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Use it as WebComponent&lt;/h3&gt;
&lt;p&gt;Check‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/mattboldt/typed.js"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


Hope you guys have gained some Knowledge ‚úåÔ∏è&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>10 Free Cloud Storage</title>
      <author>Beginner Developer</author>
      <pubDate>Sun, 10 Oct 2021 18:08:46 +0000</pubDate>
      <link>https://dev.to/beginnerdeveloper/10-free-cloud-storage-33i6</link>
      <guid>https://dev.to/beginnerdeveloper/10-free-cloud-storage-33i6</guid>
      <description>&lt;p&gt;With cloud storage, all your data is safely stored in a remote database, so you do not need to store it locally on your computer hard drive or other storage device.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-sync"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://www.sync.com/"&gt;Sync&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1XA3HzYU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46i7er9xhi46984yr5az.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1XA3HzYU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46i7er9xhi46984yr5az.PNG" alt="Sync"&gt;&lt;/a&gt;&lt;br&gt;
Most cloud storage providers differ from Sync because they can access, scan and read your files. Sync's end-to-end encrypted storage platform and apps ensure that only you can access your data in the cloud. Sync can‚Äôt read your files and no one else can either.&lt;br&gt;
&lt;strong&gt;Storage: 5GB&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-blomp"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://www.blomp.com/"&gt;Blomp&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NhWwxaic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfhi9m9b6bs41k8zwj5a.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NhWwxaic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xfhi9m9b6bs41k8zwj5a.PNG" alt="Blomp"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Storage: 20GB&lt;/strong&gt;&lt;br&gt;
Get 20GB of storage for every referral.&lt;br&gt;
Up to 200GB of storage can be added.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-degoo"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://degoo.com/"&gt;Degoo&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bw5kTI7T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqeyzhqxrgjcbg785109.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bw5kTI7T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqeyzhqxrgjcbg785109.PNG" alt="Degoo"&gt;&lt;/a&gt;&lt;br&gt;
AI based cloud storage that helps you rediscover your best photos.&lt;br&gt;
&lt;strong&gt;Storage: 100GB&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-icedrive"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://icedrive.net/"&gt;Icedrive&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GTeBnJ7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzp1cop856pogny5bqnr.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GTeBnJ7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzp1cop856pogny5bqnr.PNG" alt="Icedrive"&gt;&lt;/a&gt;&lt;br&gt;
You can easily access, manage, and update your cloud storage with Icedrive, a next-generation cloud service.&lt;br&gt;
&lt;strong&gt;Storage: 10GB&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-mega"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://mega.io/"&gt;Mega&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KkAUZ0ii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avv90w9b30fg6el1qyiy.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KkAUZ0ii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/avv90w9b30fg6el1qyiy.PNG" alt="Mega"&gt;&lt;/a&gt;&lt;br&gt;
COVID-19 has forever changed the way we work. Working remotely is now a reality and the need to keep your data secure is more important than ever. At MEGA we give millions of users with peace of mind thanks to our no-compromise user-controlled end-to-end encryption. You can rest easy knowing MEGA is a very strong link in your security chain.&lt;br&gt;
&lt;strong&gt;Storage: 20GB&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-media-fire"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://www.mediafire.com/"&gt;Media Fire&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3EdTTdit--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qw5lf8oq8n9bfoqdpwyd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3EdTTdit--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qw5lf8oq8n9bfoqdpwyd.PNG" alt="Media Fire"&gt;&lt;/a&gt;&lt;br&gt;
File storage made easy ‚Äì including powerful features you won‚Äôt find anywhere else. Whether you‚Äôre sharing photos, videos, audio, or docs, MediaFire can simplify your workflow.&lt;br&gt;
&lt;strong&gt;Storage: 10GB&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-pcloud"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://www.pcloud.com/"&gt;pCloud&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---zK61vBf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qoyodxt7l4l2ksymr0ds.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---zK61vBf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qoyodxt7l4l2ksymr0ds.PNG" alt="pCloud"&gt;&lt;/a&gt;&lt;br&gt;
No matter how many files and folders you store in the pCloud, all of your data will be at your fingertips. Regardless of how you use your space in the cloud - via web, desktop or mobile - your files are truly easy to manage.&lt;br&gt;
&lt;strong&gt;Storage: 10GB&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8internxt"&gt;
  &lt;/a&gt;
  8.&lt;a href="https://internxt.com/"&gt;Internxt&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0EfE8N2U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nq9yhqy016ots5sde552.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0EfE8N2U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nq9yhqy016ots5sde552.PNG" alt="Internxt"&gt;&lt;/a&gt;&lt;br&gt;
Transfer all your files to Yandex.Disk to access and edit them as easily as files on your hard drive.&lt;br&gt;
&lt;strong&gt;Storage: 10GB&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-google-drive"&gt;
  &lt;/a&gt;
  10. &lt;a href="https://www.google.com/drive/"&gt;Google Drive&lt;/a&gt; üòÅüòÄ
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e5M6ImHt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6nngec1ydaeqrr9v38vx.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e5M6ImHt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6nngec1ydaeqrr9v38vx.PNG" alt="Google Drive"&gt;&lt;/a&gt;&lt;br&gt;
This one doesn't need a description üòÅ.&lt;br&gt;
&lt;strong&gt;Storage: 15GB&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My Blog:- &lt;a href="https://beginners-developer.blogspot.com"&gt;Beginner Developer Blog&lt;/a&gt;&lt;br&gt;
Website:- &lt;a href="https://ejaazrkhan.github.io/portfolio"&gt;https://ejaazrkhan.github.io/portfolio&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>React  useState</title>
      <author>abhisheks-12</author>
      <pubDate>Sun, 10 Oct 2021 18:05:35 +0000</pubDate>
      <link>https://dev.to/abhisheks12/react-usestate-4o71</link>
      <guid>https://dev.to/abhisheks12/react-usestate-4o71</guid>
      <description>&lt;p&gt;Hey guys this is my first blog...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8LFfsrzC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vnx1f7048a9pik1ujpt1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8LFfsrzC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vnx1f7048a9pik1ujpt1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Suppose we have to render name in react app . We can save that name  in simple variable and render that name .&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RGEzS6lF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sb840l0texxq5mbbj17b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RGEzS6lF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sb840l0texxq5mbbj17b.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
But what if we want to change name to Alfred after clicking Change Name button , so let's pass changeName function . In changeName function if we change value of variable name to Alfred that's not going to work.&lt;/p&gt;

&lt;p&gt;So here we use useState hook .&lt;br&gt;
for using useState hook first we need to import it from react.&lt;br&gt;
Example-&lt;br&gt;
1.import { useState } from "react";&lt;/p&gt;

&lt;p&gt;With help of useState we set two variables like &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5Y34dCR9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/val54vomp5w5bfjfiatd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Y34dCR9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/val54vomp5w5bfjfiatd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here name variable represents Bruce , after that in changeName  function we use setName variable to set name to Alfred.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--evYQAXtg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dnanxubx46drkvk062cw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--evYQAXtg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dnanxubx46drkvk062cw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
now after click name will change to Alfred. We can pass different type of  data in useState hook.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>react</category>
      <category>reacthooks</category>
    </item>
  </channel>
</rss>
