<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Preparing a Phoenix 1.6 app for deployment with Elixir Releases</title>
      <author>Miguel Cobá</author>
      <pubDate>Mon, 04 Oct 2021 09:19:58 +0000</pubDate>
      <link>https://dev.to/miguelcoba/preparing-a-phoenix-1-6-app-for-deploying-with-elixir-releases-3gf6</link>
      <guid>https://dev.to/miguelcoba/preparing-a-phoenix-1-6-app-for-deploying-with-elixir-releases-3gf6</guid>
      <description>&lt;p&gt;I'm going to prepare a Phoenix application for deployment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;Ensure to have your &lt;a href="https://dev.to/miguelcoba/creating-a-phoenix-application-with-asdf-16km"&gt;Phoenix 1.6 app&lt;/a&gt; running locally.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#runtime-configuration"&gt;
  &lt;/a&gt;
  Runtime configuration
&lt;/h2&gt;

&lt;p&gt;When deploying to production is better to inject runtime info to the application when it starts instead of having that info hardcoded in the source code. We pass info to the app to affect the way it works depending on the environment we are deploying the app to (e.g. staging, production).&lt;/p&gt;

&lt;p&gt;Elixir 1.11 has introduced a way to inject this runtime info easily with the &lt;code&gt;config/runtime.exs&lt;/code&gt; config file. If you open that file you'll see that it obtains some values from environment variables. The default environment variables to configure are &lt;code&gt;POOL_SIZE&lt;/code&gt;, &lt;code&gt;PORT&lt;/code&gt;, &lt;code&gt;DATABASE_URL&lt;/code&gt; and &lt;code&gt;SECRET_KEY_BASE&lt;/code&gt;. We need to specify a value for those envvars if we want our deployment to work correctly.&lt;/p&gt;

&lt;p&gt;For now we are going to test it locally, in our laptop. In a deployment service, like Gigalixir or Fly.io, those envvars are going to be provided when the app starts. We are going to do that manually here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export POOL_SIZE=2
export PORT=4001
export DATABASE_URL=ecto://postgres:postgres@localhost/saturn_dev
export SECRET_KEY_BASE=$(mix phx.gen.secret)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have my database named locally saturn_dev and the user and password the ones shown. You can see your own connection parameters in &lt;code&gt;config/dev.exs&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-in-production-mode"&gt;
  &lt;/a&gt;
  Build in production mode
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#compile-elixir-code"&gt;
  &lt;/a&gt;
  Compile elixir code
&lt;/h3&gt;

&lt;p&gt;We can now get the production dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mix deps.get --only prod
MIX_ENV=prod mix compile
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#compile-assets"&gt;
  &lt;/a&gt;
  Compile assets
&lt;/h3&gt;

&lt;p&gt;If the project has JS, CSS or other assets you can also compile them with the esbuild wrapper that phoenix now uses:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MIX_ENV=prod mix assets.deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#test-that-the-project-starts-in-prod-mode"&gt;
  &lt;/a&gt;
  Test that the project starts in prod mode
&lt;/h3&gt;

&lt;p&gt;By now, if you haven't closed the terminal, you'll have the previous envvars still defined. If you have closed the terminal, you need to set them again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MIX_ENV=prod mix phx.server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you go to &lt;a href="http://localhost:4001/"&gt;http://localhost:4001/&lt;/a&gt; you'll see the homepage of the app, but this time it is using the configuration that the &lt;code&gt;config/runtime.exs&lt;/code&gt; read from the terminal when it started instead of using the &lt;code&gt;config/dev.exs&lt;/code&gt; configuration. One thing you'll notice is that the LiveDashboard link is gone. This works only in dev mode.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kt3GIdux--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/psllr3788go8fbzn9koc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kt3GIdux--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/psllr3788go8fbzn9koc.png" alt="Phoenix App running in prod mode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generate-a-release"&gt;
  &lt;/a&gt;
  Generate a release
&lt;/h2&gt;

&lt;p&gt;We need to do an extra step before building the release using Elixir Releases. Open &lt;code&gt;config/runtime.exs&lt;/code&gt; and uncomment the following line, in the section titled "Using releases"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;config :saturn, SaturnWeb.Endpoint, server: true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This direct the app to start the webserver when running the release executable. When we used &lt;code&gt;mix phx.server&lt;/code&gt; this was done for us. Now we need to explicitly enable it.&lt;/p&gt;

&lt;p&gt;After saving those changes we can now generate the release:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MIX_ENV=prod mix release
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#run-the-release"&gt;
  &lt;/a&gt;
  Run the release
&lt;/h2&gt;

&lt;p&gt;We can now run the release executable generated by the mix release task:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;_build/prod/rel/saturn/bin/saturn start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you go again to &lt;a href="http://localhost:4001/"&gt;http://localhost:4001/&lt;/a&gt; you'll see the app running, but this time from the self-contained bundle that the Elixir Releases generated for us. &lt;/p&gt;

&lt;p&gt;You can put the contents of the &lt;code&gt;_build/prod/rel/saturn&lt;/code&gt; folder in any production server and start it. You don't need anything else installed because this folder includes all the dependencies and binaries required to run the application.&lt;/p&gt;

&lt;p&gt;You could do that manually, for example, by copying this folder to a DigitalOcean droplet or any other VPS provider, but there are better ways to do that.&lt;/p&gt;

&lt;p&gt;I'll show you how to deploy to &lt;a href="https://gigalixir.com/"&gt;Gigalixir&lt;/a&gt; in a future post.&lt;/p&gt;

&lt;p&gt;Miguel Cobá&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>beginners</category>
      <category>deploy</category>
    </item>
    <item>
      <title>Kicking off Otomato Blog on Dev.to</title>
      <author>Ant(on) Weiss</author>
      <pubDate>Mon, 04 Oct 2021 08:38:53 +0000</pubDate>
      <link>https://dev.to/otomato_io/kicking-off-otomato-blog-on-dev-to-4iga</link>
      <guid>https://dev.to/otomato_io/kicking-off-otomato-blog-on-dev-to-4iga</guid>
      <description>&lt;p&gt;&lt;em&gt;Cover Photo by Leah Kelley from Pexels&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I've always loved blogging. And was never consistent about it.&lt;br&gt;
Nevertheless in the 5 years of Otomato we've published numerous technical and conceptual posts on all kinds of online media: the official &lt;a href="https://otomato.io"&gt;Otomato website&lt;/a&gt;, LinkedIn, Medium, &lt;a href="https://devopscon.io/blog/do-we-need-a-service-mesh/"&gt;DevOpsCon newsletter&lt;/a&gt; and even our clients' dev &lt;a href="https://blog.taboola.com/scaling-out-jenkins-based-ci-with-docker-and-nomad/"&gt;blogs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the last year I grew more and more in love with Dev.to as a platform for engineering-oriented blogging.&lt;/p&gt;

&lt;p&gt;And it's time we started growing our presence here.&lt;/p&gt;

&lt;p&gt;From now on the plan is to publish blogs on our website and republish everything here - where more engineers can actually access and enjoy this content.&lt;/p&gt;

&lt;p&gt;A series of exciting new posts on CircleCI from &lt;a class="mentioned-user" href="https://dev.to/spiroman"&gt;@spiroman&lt;/a&gt;
 is coming up very soon! &lt;/p&gt;

&lt;p&gt;Stay tuned!&lt;/p&gt;

</description>
      <category>otomato</category>
      <category>devops</category>
      <category>blog</category>
    </item>
    <item>
      <title>Today best product hunt GrabStar</title>
      <author>Mansurul Haque</author>
      <pubDate>Mon, 04 Oct 2021 08:30:18 +0000</pubDate>
      <link>https://dev.to/mdmh_sami/today-best-product-hunt-grabstar-4h7</link>
      <guid>https://dev.to/mdmh_sami/today-best-product-hunt-grabstar-4h7</guid>
      <description>&lt;p&gt;Hello everyone,&lt;br&gt;
We are really excited to launch GrabStar on product 🎉🎉🎉&lt;br&gt;
&lt;a href="https://lnkd.in/gNCmfuCC"&gt;https://lnkd.in/gNCmfuCC&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#grabstar-todayproducthunt-bestproductoftheday"&gt;
  &lt;/a&gt;
  Grabstar #todayproducthunt #bestproductoftheday
&lt;/h1&gt;

</description>
    </item>
    <item>
      <title>Build Simple Node Js API: no external package</title>
      <author>Abayomi Ogunnusi</author>
      <pubDate>Mon, 04 Oct 2021 07:56:34 +0000</pubDate>
      <link>https://dev.to/drsimplegraffiti/build-simple-node-js-api-no-external-package-5h9j</link>
      <guid>https://dev.to/drsimplegraffiti/build-simple-node-js-api-no-external-package-5h9j</guid>
      <description>&lt;h2&gt;
  &lt;a href="#raw-node"&gt;
  &lt;/a&gt;
  Raw Node:
&lt;/h2&gt;

&lt;p&gt;Frameworks like Express Js or Kao Js have made writing APIs a lot easier. Nonetheless, it is expedient that a developer knows how to write code from the ground up using the in-built module like os, fs, and so on. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#toc"&gt;
  &lt;/a&gt;
  TOC
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#import"&gt;Import in-built module&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#server"&gt;Create a server&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#listen"&gt;Listen to server&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#router"&gt;Routes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#read"&gt;Reading Data&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#status"&gt;Content-Type and Status&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-start"&gt;
  &lt;/a&gt;
  Let's start
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LWCaAm3O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/nDMyoNRkCesJdZAuuL/giphy.gif%3Fcid%3D82a1493bql2igvv8wtf5nw585omfvttu0p2dlzgysjjn2l5r%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LWCaAm3O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/nDMyoNRkCesJdZAuuL/giphy.gif%3Fcid%3D82a1493bql2igvv8wtf5nw585omfvttu0p2dlzgysjjn2l5r%26rid%3Dgiphy.gif%26ct%3Dg" alt="stone"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🥦  Create a file &lt;code&gt;app.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dTKdERiV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ihvzehlqu1ty27wj88n8.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dTKdERiV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ihvzehlqu1ty27wj88n8.PNG" alt="raw9"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Import the fs and url modules&lt;br&gt;
&lt;a&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;url&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🥦 Next, in the sample &lt;code&gt;app.js&lt;/code&gt; we create a server.&lt;a&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;puppies are friendly...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;puppies are friendly...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-next-main-thing-is-to-listen-to-a-server"&gt;
  &lt;/a&gt;
  The next main thing is to listen to a server &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;127.0.0.1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;server is running on port 3001&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  🥦
&lt;/h2&gt;

&lt;p&gt;The moment of truth. Now let's run &lt;code&gt;node app&lt;/code&gt; from our terminal &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--saiOd4yU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dn8b5fm0i2grunxu94eg.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--saiOd4yU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dn8b5fm0i2grunxu94eg.PNG" alt="raw1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Visit any browser (in my case, Fire 🦊...) and test your endpoint.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
     &lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3001&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sVChgxhx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/so932ir0cgnx7uobeimy.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sVChgxhx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/so932ir0cgnx7uobeimy.PNG" alt="raw4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You also get a console log response.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4mZHDxIy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0q9nfezsec5c405dbznx.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4mZHDxIy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0q9nfezsec5c405dbznx.PNG" alt="raw5"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#routing"&gt;
  &lt;/a&gt;
  Routing &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Let's create multiple endpoints using the url module. As it is, any endpoint/resource we hit will get returned to back to the home page.&lt;/p&gt;

&lt;p&gt;To make this work we use the &amp;gt;url&amp;gt; module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;endPoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;endPoint&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;endPoint&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/dogs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

            &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is the puppy landing page&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;endPoint&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/adopt-a-puppy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Adopt our cute puppies&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

                &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;... 404!!!, page not found&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;

     &lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#writing-headers-and-status-code"&gt;
  &lt;/a&gt;
  Writing Headers and Status Code&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Let's write headers and responses, i.e., what kind of response are we sending, either &lt;code&gt;html/text&lt;/code&gt; or &lt;code&gt;application/json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;endPoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;endPoint&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;endPoint&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/dogs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is the puppy landing page&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;endPoint&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/adopt-a-puppy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Adopt our cute puppies&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeHead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text/html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;drsimple-header&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no puppies response&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;... 404!!!,  Page not found&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lets-test-again"&gt;
  &lt;/a&gt;
  Let's test again
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aMcXXFOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yyz07fxhrh9uo6gucpj1.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aMcXXFOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yyz07fxhrh9uo6gucpj1.PNG" alt="raw11"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#reading-data-with-fs-module-asynchronously"&gt;
  &lt;/a&gt;
  Reading data with fs module (asynchronously). &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Next, we will create &lt;code&gt;data.json&lt;/code&gt; and read all registered puppies 🐕🐕🐕. Here, we will set our Content-type to &lt;code&gt;application/json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HFfVoYDN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6gzp1m731wj1p9pw6fx6.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HFfVoYDN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6gzp1m731wj1p9pw6fx6.PNG" alt="raw14"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;endPoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;endPoint&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;endPoint&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/dogs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is the puppy landing page&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;endPoint&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/adopt-a-puppy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="nx"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./data.json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;puppyData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeHead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

                &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

                &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;drsimple-header&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no puppies response&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

            &lt;span class="p"&gt;});&lt;/span&gt;

            &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeHead&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text/html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;drsimple-header&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;no puppies response&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;... 404!!!,  Page not found&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wuz2r4xg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/agqw6ctd190h5d3i5xwl.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wuz2r4xg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/agqw6ctd190h5d3i5xwl.PNG" alt="raw2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's check our developer console, network tab to be specific. (On windows, hit f12)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z4Bq-dCE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tawebt0ucj6bs4h2yeh8.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z4Bq-dCE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tawebt0ucj6bs4h2yeh8.PNG" alt="raw4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v1jEEGGd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amnpugu8r4itafbulupb.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v1jEEGGd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amnpugu8r4itafbulupb.PNG" alt="raw9"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the picture above, you can see the 200 status code, which means OK. Just to confirm if our headers went through...double click on the 200 status code. Here you will see the headers I wrote deliberately and the content type.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m3LHWyXj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/70065792/135759677-8a3a352f-515f-49ae-9baf-61ecc5b59fc8.mp4" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m3LHWyXj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/70065792/135759677-8a3a352f-515f-49ae-9baf-61ecc5b59fc8.mp4" alt="demo result link"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yKCt5bdt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qy1zf2tur656m5dxvub6.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yKCt5bdt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qy1zf2tur656m5dxvub6.PNG" alt="raw8"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This is just a basic introduction to what you can do with raw node. Check the NodeJs Docs  for more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=9MEEzJ_q9HQ"&gt;Video reference&lt;/a&gt;&lt;br&gt;
&lt;a href="https://nodejs.org/en/docs/"&gt;Node Js&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>React Project Architecture</title>
      <author>Ezran Bayantemur</author>
      <pubDate>Mon, 04 Oct 2021 07:48:24 +0000</pubDate>
      <link>https://dev.to/ezranbayantemur/react-project-architecture-25m</link>
      <guid>https://dev.to/ezranbayantemur/react-project-architecture-25m</guid>
      <description>&lt;p&gt;I’ve been developing applications with React for a long time and I’m loving it more and more. React is such an amazing library for creating application architecture and it’s plan. It’s offering the opportunity of applying basic software principles (like SOC , like SOLID ..) on our project and keeping codebase clean even if our project scale grows. Especially after hooks it’s became so yummy!&lt;/p&gt;

&lt;p&gt;In this article I wanted to talk about how can you create project structure and architecture with React. You can think it’s will be mixed article of best practices and React basics. Of course they are not “rules” or something else, you can go on however you want, I just want to light some blub on mind :)&lt;br&gt;
It will be a little long article but I think it will be helpful. In addition; I’m gonna give examples on React Native but you can think exactly the same struct on web, ReactJS.&lt;br&gt;
If you ready, let’s go! 🤟&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ezranbayantemur.medium.com/react-project-architecture-641da390ebe7"&gt;https://ezranbayantemur.medium.com/react-project-architecture-641da390ebe7&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Adding external frontend widgets in TYPO3</title>
      <author>Rune Piper</author>
      <pubDate>Mon, 04 Oct 2021 07:06:16 +0000</pubDate>
      <link>https://dev.to/visuellverstehen/adding-external-frontend-widgets-in-typo3-5e6m</link>
      <guid>https://dev.to/visuellverstehen/adding-external-frontend-widgets-in-typo3-5e6m</guid>
      <description>&lt;p&gt;Sometimes we or our clients want to include external JavaScript widgets from e. g. mobile.de or some real estate platform showing their ratings. This is totally fine, but how to implement those scripts the best way? Well, first of all: There is no perfect way but different ways in TYPO3 that all have their purpose.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fluidway"&gt;
  &lt;/a&gt;
  Fluid-way
&lt;/h2&gt;

&lt;p&gt;Since TYPO3 8.6 Fluid provides two sections provided by the core to add data to &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; and above the ending &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt;. This way is usable both in static content elements known as Fluid styled content (FSC) as well as in action templates which is a great benefit. It also does not require any developer to add the widgets to more pages, if the editor can create and move elements. Take a look at how easy it is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;f:section&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"FooterAssets"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;async&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"//www.mobile.de/bewertungen/ratingwidget.js?dealerId=1234"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/f:section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Read more about the feature &lt;a href="https://docs.typo3.org/c/typo3/cms-core/master/en-us/Changelog/8.6/Feature-79409-AutorenderAssetSectionsInFluidTemplateWithController.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is also another way, by utilizing the &lt;code&gt;AssetCollector&lt;/code&gt; introduced with TYPO3 10.3 You simply can pass the path to the local source or direct content into the &lt;code&gt;f:asset&lt;/code&gt; viewhelper like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;f:asset.css&lt;/span&gt; &lt;span class="na"&gt;identifier=&lt;/span&gt;&lt;span class="s"&gt;"identifier123"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"EXT:my_ext/Resources/Public/Css/foo.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;f:asset.css&lt;/span&gt; &lt;span class="na"&gt;identifier=&lt;/span&gt;&lt;span class="s"&gt;"identifier123"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   .foo { color: black; }
&lt;span class="nt"&gt;&amp;lt;/f:asset.css&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Read more about the feature &lt;a href="https://docs.typo3.org/c/typo3/cms-core/master/en-us/Changelog/10.3/Feature-90522-IntroduceAssetCollector.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#typoscriptway"&gt;
  &lt;/a&gt;
  TypoScript-way
&lt;/h2&gt;

&lt;p&gt;A more static way to implement external libraries is TypoScript. The following code snippet will inject the library only on pages with the uid 1 and 4. While this works perfectly fine, it needs manual effort to add this script to more pages and also needs a developer if it needs to be removed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mainPage = PAGE
mainPage { … }

[getTSFE().id in [1,4]]
    mainPage.headerData.250 = TEXT
    mainPage.headerData.250.value = &amp;lt;script async src="//www.mobile.de/bewertungen/ratingwidget.js?dealerId=1234"&amp;gt;&amp;lt;/script&amp;gt;
[end]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#extbaseway"&gt;
  &lt;/a&gt;
  Extbase-way
&lt;/h2&gt;

&lt;p&gt;Just like the Fluid-way, Extbase provides the ability to add data to the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; and above the &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; by adding items to the parsed TypoScript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$GLOBALS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'TSFE'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;additionalFooterData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'ratingwidget'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;script async src="//www.mobile.de/bewertungen/ratingwidget.js?dealerId=456306"&amp;gt;&amp;lt;/script&amp;gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is great, because developers does not have to manually add this data when an editor wants it on other pages, because he*she can create plugins himself*herself. It’s also backend driven meaning we don’t add extra data inside a view or template. This is also negative, because we write HTML in PHP code. Since TYPO3 10.3 there is a solution. Calling the above mentioned &lt;code&gt;AssetCollector&lt;/code&gt; directly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;TYPO3\CMS\Core\Page\AssetCollector&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;TYPO3\CMS\Core\Utility\GeneralUtility&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nc"&gt;GeneralUtility&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;makeInstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;AssetCollector&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;addJavaScript&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'my_ext_foo'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'EXT:my_ext/Resources/Public/JavaScript/foo.js'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'data-foo'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'bar'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are several ways we use to include external JS widgets and styles for our and our customers websites. What way(s) do you use the most? I prefer the Fluid-way.&lt;/p&gt;

</description>
      <category>typo3</category>
    </item>
    <item>
      <title>Adapter Pattern vs. Bridge Pattern</title>
      <author>Doeke Norg</author>
      <pubDate>Mon, 04 Oct 2021 07:05:29 +0000</pubDate>
      <link>https://dev.to/doekenorg/adapter-pattern-vs-bridge-pattern-11nd</link>
      <guid>https://dev.to/doekenorg/adapter-pattern-vs-bridge-pattern-11nd</guid>
      <description>&lt;p&gt;The Adapter pattern and the Bridge Pattern have brought along a lot of confusion. In this post we're going to look at what they are, what their differences are &amp;amp; where they might be similar.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adapter-pattern"&gt;
  &lt;/a&gt;
  🔌 Adapter Pattern
&lt;/h2&gt;

&lt;p&gt;The Adapter Pattern tries to solve the problem of making two (or more) &lt;em&gt;incompatible&lt;/em&gt; classes &lt;strong&gt;compatible&lt;/strong&gt;, by using an intermediate class that implements a predefined interface.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;- Wait what? Let's try this again!&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h3&gt;

&lt;p&gt;Imagine a single &lt;code&gt;Feed&lt;/code&gt; that wants to display the latest topics from multiple sources, like: Reddit &amp;amp; Hacker News. For these sources we have two API clients: &lt;code&gt;RedditApi&lt;/code&gt; and &lt;code&gt;HackerNewsApi&lt;/code&gt;. Both return a list of topics, but their APIs are not the same.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RedditApi&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;fetchTopicItems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;RedditFeedIterator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Returns a `RedditFeedIterator` that provides `Topic` objects, that hold a `title`, `date` and `url`.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HackerNewsApi&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getTopics&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// returns an array of ['topic_title' =&amp;gt; '...', 'topic_date' =&amp;gt; '...', 'topic_url' =&amp;gt; '...']&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We don't want to make our feed know about the different implementations, because we might want to add another source in the future and that would mean adding even more code to the feed. Instead, we'll apply the Adapter Pattern. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The solution
&lt;/h3&gt;

&lt;p&gt;The Adapter Pattern consists of these 4 elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;🙋 &lt;strong&gt;Client:&lt;/strong&gt; This is the class that want's to connect to multiple sources. This would be &lt;code&gt;Feed&lt;/code&gt; in our example.&lt;/li&gt;
&lt;li&gt;📚 &lt;strong&gt;Adaptee:&lt;/strong&gt; A source the &lt;em&gt;Client&lt;/em&gt; wants to connect to. In our example we have two: &lt;code&gt;RedditApi&lt;/code&gt; &amp;amp; &lt;code&gt;HackerNewsApi&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;🎯 &lt;strong&gt;Target:&lt;/strong&gt; An interface or contract that defines a single API the &lt;em&gt;Client&lt;/em&gt; will connect to.&lt;/li&gt;
&lt;li&gt;🔌 &lt;strong&gt;Adapter:&lt;/strong&gt; A class that implements the &lt;em&gt;Target&lt;/em&gt; interface and delegates to an &lt;em&gt;Adaptee&lt;/em&gt; source and formats its output.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First let's settle on a &lt;em&gt;Target&lt;/em&gt; interface; we'll call it &lt;code&gt;TopicAdapterInterface&lt;/code&gt; and it will have a &lt;code&gt;getTopics()&lt;/code&gt; method that returns an &lt;code&gt;iterable&lt;/code&gt; of topics, where every topic is an array with &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;date&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt;. So it can be an array of arrays, or a Generator/Iterator of arrays.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you aren't familiar with Generators or Iterators, then please check out my &lt;a href="https://doeken.org/blog/generators-over-arrays"&gt;Generators over arrays&lt;/a&gt; post.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;TopicAdapterInterface&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cd"&gt;/**
     * @return iterable Iterable of topic array ['title' =&amp;gt; '...', 'date' =&amp;gt; '...', 'url' =&amp;gt; '...']
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getTopics&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can create a &lt;code&gt;Feed&lt;/code&gt; class that uses these adapters. We'll loop over every adapter, and &lt;code&gt;yield&lt;/code&gt; their results, so we get a single continuous stream of topics as a &lt;code&gt;Generator&lt;/code&gt;. This of course doesn't take a date into consideration, but it's enough for this example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Feed&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cd"&gt;/**
     * @param TopicAdapterInterface[] $adapters The adapters.
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;public&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$adapters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getAllTopics&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;iterable&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;adapters&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$adapter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="nv"&gt;$adapter&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getTopics&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we have a &lt;em&gt;Client&lt;/em&gt; &lt;code&gt;Feed&lt;/code&gt;, a &lt;em&gt;Target&lt;/em&gt; &lt;code&gt;TopicAdapterInterface&lt;/code&gt; and two &lt;em&gt;Adaptees&lt;/em&gt; &lt;code&gt;RedditApi&lt;/code&gt; &amp;amp; &lt;code&gt;HackerNewsApi&lt;/code&gt;. That means that we are only missing two &lt;em&gt;Adapters&lt;/em&gt;. We'll create these first, and then we'll look at what makes them tick.&lt;/p&gt;

&lt;p&gt;To make it a bit easier working with the Iterators, I'll be using the &lt;code&gt;iterator_map()&lt;/code&gt; function from my &lt;a href="https://github.com/doekenorg/iterator-functions"&gt;&lt;code&gt;doekenorg/iterator-functions&lt;/code&gt;&lt;/a&gt; package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RedditTopicAdapter&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;TopicAdapterInterface&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;RedditApi&lt;/span&gt; &lt;span class="nv"&gt;$reddit_api&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getTopics&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;iterable&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;iterator_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Topic&lt;/span&gt; &lt;span class="nv"&gt;$topic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'title'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$topic&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getTitle&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                &lt;span class="s1"&gt;'date'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$topic&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Y-m-d H:i:s'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="s1"&gt;'url'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$topic&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getUrl&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;reddit_api&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;fetchTopicItems&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HackerNewsTopicAdapter&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;TopicAdapterInterface&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;HackerNewsApi&lt;/span&gt; &lt;span class="nv"&gt;$hacker_news_api&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getTopics&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;iterable&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;iterator_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$topic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'title'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$topic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'topic_title'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="s1"&gt;'date'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;DateTime&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;createFromFormat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'H:i:s Y-m-d'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$topic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'topic_date'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Y-m-d H:i:s'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="s1"&gt;'url'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$topic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'topic_url'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;hacker_news_api&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getTopics&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here you can see our two adapters: &lt;code&gt;RedditTopicAdapter&lt;/code&gt; and &lt;code&gt;HackerNewsTopicAdapter&lt;/code&gt;. Both of these classes implement the &lt;code&gt;TopicAdapterInterface&lt;/code&gt; and provide the required &lt;code&gt;getTopics()&lt;/code&gt; method. They each get their own &lt;em&gt;Adaptee&lt;/em&gt; injected as a dependency, and use this to retrieve topics and format it to the required array.&lt;/p&gt;

&lt;p&gt;This means that our &lt;code&gt;Feed&lt;/code&gt; can now use these adapters by injecting them in its constructor. To connect this all together it could look a little something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$hacker_news_adapter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;HackerNewsAdapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;HackerNewsApi&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nv"&gt;$reddit_adapter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;RedditTopicAdapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;RedditApi&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nv"&gt;$feed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Feed&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nv"&gt;$hacker_news_adapter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$reddit_adapter&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$feed&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getAllTopics&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$topic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;var_dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$topic&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// arrays of [`title`, `date` and `url`]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#benefits-of-the-adapter-pattern"&gt;
  &lt;/a&gt;
  Benefits of the Adapter Pattern
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;🔄 You can plug in an extra &lt;em&gt;Adapter&lt;/em&gt; at a later time, without having to change he &lt;em&gt;Client&lt;/em&gt; implementation.&lt;/li&gt;
&lt;li&gt;🖖 Only the &lt;em&gt;Adapter&lt;/em&gt; needs to know about the &lt;em&gt;Adaptee&lt;/em&gt; which enforces separation of concerns.&lt;/li&gt;
&lt;li&gt;🔬 The &lt;em&gt;Client&lt;/em&gt; code is easily testable, because it only relies on a &lt;em&gt;Target&lt;/em&gt; interface.&lt;/li&gt;
&lt;li&gt;📦 When working with an IoC container you can usually get / tag all services with a specific interface, making it very easy to find and inject or auto-wire all &lt;em&gt;Adapters&lt;/em&gt; into the &lt;em&gt;Client&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#real-world-examples"&gt;
  &lt;/a&gt;
  Real world examples
&lt;/h3&gt;

&lt;p&gt;The Adapter Pattern is one of the most used patterns, because of its extendability. It can even be extended by other packages without the original packages having to change. Here are some real world examples of this.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cache-adapters"&gt;
  &lt;/a&gt;
  Cache adapters
&lt;/h4&gt;

&lt;p&gt;Most frameworks have a caching system that has a single API for working with it, while providing adapters for different implementations, like: redis, memcache or a filesystem cache. Laravel calls these adapters a &lt;code&gt;Store&lt;/code&gt; and you can find these stores in &lt;a href="https://github.com/illuminate/cache"&gt;&lt;code&gt;illuminate/cache&lt;/code&gt;&lt;/a&gt;. They provide the &lt;em&gt;Target&lt;/em&gt; interface for such a store in the &lt;a href="https://github.com/illuminate/contracts/blob/master/Cache/Store.php"&gt;&lt;code&gt;illuminate/contracts&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
repository.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#filesystem-adapters"&gt;
  &lt;/a&gt;
  Filesystem adapters
&lt;/h4&gt;

&lt;p&gt;Another common thing is to write data to files. Files that may be located somewhere else, like: an FTP server, a Dropbox folder or Google Drive. One of the most used packages for writing data to files is &lt;a href="https://github.com/thephpleague/flysystem"&gt;&lt;code&gt;thephpleague/flysystem&lt;/code&gt;&lt;/a&gt;. This packages provides a &lt;a href="https://github.com/thephpleague/flysystem/blob/2.x/src/FilesystemAdapter.php"&gt;FilesystemAdapter&lt;/a&gt; interface that can have specific implementations. And because of this &lt;em&gt;Target&lt;/em&gt; interface, others can build 3rd-party packages that provide another Filesystem; like: &lt;a href="https://github.com/spatie/flysystem-dropbox"&gt;&lt;code&gt;spatie/flysystem-dropbox&lt;/code&gt;&lt;/a&gt; by Spatie.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#bridge-pattern"&gt;
  &lt;/a&gt;
  🔀 Bridge Pattern
&lt;/h2&gt;

&lt;p&gt;The Bridge Pattern is often confused with the Adapter Pattern, and with good reasons. Let's look at what problem this pattern tries to solve and how it is different from the Adapter Pattern.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h3&gt;

&lt;p&gt;Let's say we have two editors: a &lt;code&gt;MarkdownEditor&lt;/code&gt; and a &lt;code&gt;WysiwygEditor&lt;/code&gt;. Both editors can read and format some file and update the source on that file. The &lt;code&gt;MarkdownEditor&lt;/code&gt; obviously returns Markdown text, while the &lt;code&gt;WysiwygEditor&lt;/code&gt; returns HTML.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WysiwygEditor&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;public&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;h1&amp;gt;Source&amp;lt;/h1&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// The formatted source.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;file_get_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;file_put_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MarkdownEditor&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;public&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'# Source'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// The formatted source.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;file_get_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;file_put_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At some point in time, we need a Markdown editor and a WYSIWYG editor that can read &amp;amp; store files on an FTP server. We could create a new editor that extends the &lt;code&gt;MarkdownEditor&lt;/code&gt; or &lt;code&gt;WysiwygEditor&lt;/code&gt; and overwrites the &lt;code&gt;read()&lt;/code&gt; and &lt;code&gt;store()&lt;/code&gt; method. However, this will likely introduce a lot of duplicate code between the two. Instead, we'll use the Bridge Pattern.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The solution
&lt;/h3&gt;

&lt;p&gt;The Bridge Pattern also consist of 4 elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;🎨 &lt;strong&gt;Abstraction:&lt;/strong&gt; An abstract base class that delegates some predefined functions to a &lt;em&gt;Implementor&lt;/em&gt;. In our example this will be an &lt;code&gt;AbstractEditor&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;🧑‍🎨 &lt;strong&gt;Refined Abstraction:&lt;/strong&gt; A specific implementation of the &lt;em&gt;Abstraction&lt;/em&gt;. In our example this will be &lt;code&gt;MarkdownEditor&lt;/code&gt; and &lt;code&gt;WysiwygEditor&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;🖌️ &lt;strong&gt;Implementor:&lt;/strong&gt; An interface that the &lt;em&gt;Abstraction&lt;/em&gt; uses for delegation. In our example this will be a &lt;code&gt;FileSystemInterface&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;🖼️ &lt;strong&gt;Concrete Implementor:&lt;/strong&gt; A specific implementation of the &lt;em&gt;Implementor&lt;/em&gt; that actually does the work. In our example this will be &lt;code&gt;LocalFileSystem&lt;/code&gt; and a &lt;code&gt;FtpFileSystem&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is at this point, I think one of the things that makes this pattern hard to grasp is this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--doYuSvbh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://doeken.org/assets/img/there-is-no-bridge.jpg" class="article-body-image-wrapper"&gt;&lt;img alt="There is no bridge" src="https://res.cloudinary.com/practicaldev/image/fetch/s--doYuSvbh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://doeken.org/assets/img/there-is-no-bridge.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unlike the Adapter Pattern, where there is an actual &lt;em&gt;Adapter&lt;/em&gt;; the Bridge Pattern does &lt;em&gt;not&lt;/em&gt; have a &lt;em&gt;Bridge&lt;/em&gt;. But no worries, we'll see the thing that makes this the &lt;em&gt;Bridge&lt;/em&gt; soon enough!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#refactoring-the-code"&gt;
  &lt;/a&gt;
  Refactoring the code
&lt;/h4&gt;

&lt;p&gt;Let's refactor our example code by implementing the Bridge Pattern. We'll start by extracting the &lt;em&gt;Abstraction&lt;/em&gt; from our two Editors.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AbstractEditor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;public&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;file_get_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;file_put_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WysiwygEditor&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;AbstractEditor&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;h1&amp;gt;Source&amp;lt;/h1&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// The formatted source.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MarkdownEditor&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;AbstractEditor&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'# Source'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// The formatted source.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this refactoring we've created an &lt;code&gt;AbstractEditor&lt;/code&gt; that now contains all the duplicate code there was between the editors, and made the editors extend this abstraction. This way the editors, or &lt;em&gt;Refined Abstractions&lt;/em&gt;, are only focussing on what they do best: formatting the source of the file.&lt;/p&gt;

&lt;p&gt;But remember, we still don't have a &lt;em&gt;Implementor&lt;/em&gt; or a &lt;em&gt;Refined Implementor&lt;/em&gt; and we really want to use multiple file systems. So let's create the &lt;em&gt;Implementor&lt;/em&gt; and a &lt;code&gt;LocalFileSystem&lt;/code&gt; as the first &lt;em&gt;Refined Implementor&lt;/em&gt;. Then we'll update the &lt;code&gt;AbstractEditor&lt;/code&gt; to use the &lt;em&gt;Implementor&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;FilesystemInterface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$file_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$file_contents&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LocalFileSystem&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;FilesystemInterface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$file_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;file_get_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$file_path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$file_contents&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;file_put_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$file_contents&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AbstractEditor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;FilesystemInterface&lt;/span&gt; &lt;span class="nv"&gt;$filesystem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;private&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;filesystem&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;filesystem&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So here is the &lt;em&gt;"Bridge"&lt;/em&gt;. It's the connection between the &lt;em&gt;Abstraction&lt;/em&gt; and the &lt;em&gt;Implementor&lt;/em&gt;. It connects one editor to one filesystem. But now the two can vary independently. We can add multiple editors that all have their own formatting, like &lt;code&gt;yaml&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt; or &lt;code&gt;csv&lt;/code&gt;. And all these editors can use any filesystem to read and store those files.&lt;/p&gt;

&lt;p&gt;So now we can create a &lt;code&gt;FtpFileSystem&lt;/code&gt; that reads and stores the formatted content on an FTP server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FtpFileSystem&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;FilesystemInterface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$file_path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Imagine the ultimate FTP file reading code here.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$file_contents&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Imagine the ultimate FTP file writing code here.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By using the Bridge Pattern we've made it possible to make 4 different implementation combinations:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 1. A local markdown file editor&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;MardownEditor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;LocalFileSystem&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;'local-file.md'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// 2. An FTP markdown file editor&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;MardownEditor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;FtpFileSystem&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;'ftp-file.md'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// 3. A local WYSIWYG file editor&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;WysiwygEditor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;LocalFileSystem&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;'local-file.html'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// 4. An FTP WYSIWYG file editor&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;WysiwygEditor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;FtpFileSystem&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s1"&gt;'ftp-file.html'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And if we were to add another &lt;code&gt;AbstractEditor&lt;/code&gt; and another &lt;code&gt;FileSystem&lt;/code&gt; we'd have 9 possible combination, while only adding 2 classes 🤯!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benefits-of-the-bridge-pattern"&gt;
  &lt;/a&gt;
  Benefits of the Bridge Pattern
&lt;/h3&gt;

&lt;p&gt;As we've seen there are some benefits to using the Bridge Pattern:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;💧 The code is more DRY (Don't Repeat Yourself) by extracting the &lt;em&gt;Abstraction&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;🧱 It is more extendable by creating two separate abstractions that can vary independently.&lt;/li&gt;
&lt;li&gt;🔬 The individual classes are smaller and therefore easier to test and understand.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#similarities-with-adapter-pattern"&gt;
  &lt;/a&gt;
  Similarities with Adapter Pattern
&lt;/h3&gt;

&lt;p&gt;Another reason why some have trouble understanding the difference between the Bridge Pattern and the Adapter Pattern is that the connecting part of the "bridge" actually looks like an &lt;em&gt;Adapter&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;Client&lt;/strong&gt; could be seen as the &lt;strong&gt;Abstraction&lt;/strong&gt; as that also delegates to an interface.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;Target&lt;/strong&gt; could be seen as the &lt;strong&gt;Implementor&lt;/strong&gt; as this also defines an interface to adhere to.&lt;/li&gt;
&lt;li&gt;An &lt;strong&gt;Adapter&lt;/strong&gt; could be seen as the &lt;strong&gt;Refined Implementor&lt;/strong&gt; because this implements the interface and fulfills the requirements.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That last one is probably the most confusing; as a &lt;em&gt;Refined Implementor&lt;/em&gt; can actually &lt;em&gt;be&lt;/em&gt; an &lt;em&gt;Adapter&lt;/em&gt; to a dependency or &lt;em&gt;Adaptee&lt;/em&gt;, but this is not required. The &lt;em&gt;Refined Implementor&lt;/em&gt; will often be a class on its own, while an &lt;em&gt;Adapter&lt;/em&gt; will always delegate. But the two are indeed not mutually exclusive.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;I hope you enjoyed reading this article! If so, please leave a ❤️ or a 🦄 and consider subscribing! I write posts on PHP almost every week. You can also follow me on &lt;a href="https://twitter.com/intent/follow?screen_name=doekenorg"&gt;twitter&lt;/a&gt; for more content and the occasional tip.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>php</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>AWS open source news and updates 84</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Mon, 04 Oct 2021 06:45:46 +0000</pubDate>
      <link>https://dev.to/aws/aws-open-source-news-and-updates-84-4c4e</link>
      <guid>https://dev.to/aws/aws-open-source-news-and-updates-84-4c4e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#october-4th-2021-instalment-84"&gt;
  &lt;/a&gt;
  October 4th, 2021 - Instalment #84
&lt;/h2&gt;

&lt;p&gt;Newsletter #84.&lt;/p&gt;

&lt;p&gt;Welcome to issue #84 of this newsletter, and we have more great new open source projects for you this week. We have a couple of great security/compliance/governance tools that will help you with security in &lt;strong&gt;cloudgraphdev&lt;/strong&gt; and (the amazingly named) &lt;strong&gt;wonk&lt;/strong&gt;, &lt;strong&gt;placebo&lt;/strong&gt;, a tool to help you mock tests, a new cli from AWS to help you simplify those of you working with genomics workloads, and more. &lt;/p&gt;

&lt;p&gt;With the GA last week of OpenTelemetry and Prometheus managed services on AWS, we have a plethora of posts covering a number of different topics as well as Apache Tinkerpop, Bottlerocket, Apache Kafka, OpenSearch and Terraform. make sure you check out the events section too, and as always, if you use, or are creating/ working on an open source project you would like me to include in this newsletter, then please get in touch.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#celebrating-open-source-contributors"&gt;
  &lt;/a&gt;
  Celebrating open source contributors
&lt;/h3&gt;

&lt;p&gt;The articles posted in this series are only possible thanks to contributors and project maintainers and so I would like to shout out and thank those folks who really do power open source and enable us all to build on top of what they have created. &lt;/p&gt;

&lt;p&gt;So thank you to the following open source heroes: Danilo Poccia, Mitch Garnaat, jaitl, AutoCloud, Amino Inc, Kyle Davis, Jegan Sundarapandian, Chloe Goldstein, Imaya Kumar Jagannathan, Marc Chene, Vikram Venkataraman, Arun Chandapillai, Abhi Khanna, Mike George, Abhi Khanna, Channy Yun, Jeremy Cowan, Sai Charan Teja Gopaluni, and Vijay K Sikha, Alolita Sharma, Nizar Tyrewalla, Brad Bebee, Kelvin Lawrence, Stephen Mallette, Huy Vo, Iris Song, Michael Hausenblas and Garry Stafford.&lt;/p&gt;

&lt;p&gt;Make sure you find and follow these builders and keep up to date with their open source projects and contributions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#latest-open-source-projects"&gt;
  &lt;/a&gt;
  Latest open source projects
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;amazon-genomics-cli&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/yk"&gt;amazon-genomics-cli&lt;/a&gt; this open source project is a tool to simplify the processes of deploying the AWS infrastructure required to run genomics workflows in the cloud, to submit those workflows to run, and to monitor the logs and outputs of those workflows. You can find out more and get hands on by reading and working through Danilo Poccia's blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/yq"&gt;New – Amazon Genomics CLI Is Now Open Source and Generally Available&lt;/a&gt;. You can also check out &lt;a href="https://www.youtube.com/watch?v=mMeBeFbFzq0"&gt;this YT session&lt;/a&gt; that provides some additional background before showing you this in action.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cloudgraphdev&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/yp"&gt;cloudgraphdev&lt;/a&gt; another interesting tool to help you manage security on AWS, CloudGraph is an open-source search engine for your public cloud infrastructure, powered by DGraph and GraphQL. You can quickly query assets, configurations, and more across accounts and providers. CloudGraph also enables you to solve a host of security, compliance, governance, and FinOps challenges in the time it takes to write a single GraphQL query. Very nice project from the folks at AutoCloud&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hsc04t2u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/cloudgraphdev/cli/master/docs/images/init.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hsc04t2u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/cloudgraphdev/cli/master/docs/images/init.png" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;wonk&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/yl"&gt;wonk&lt;/a&gt; this project from Amino Inc is a tool for combining a set of AWS policy files into smaller compiled policy sets. Good documentation covering the typical use cases and why you might find this useful. Definitely a tool for your armoury as you look to put security first.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;placebo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/yn"&gt;placebo&lt;/a&gt; Mitch Garnaat has put together this open source tool Placebo, that allows you to mock boto3 calls that look just like normal calls but actually have no effect at all. It does this by allowing you to record a set of calls and save them to a data file and then replay those calls later (e.g. in a unit test) without ever hitting the AWS endpoints. Provide examples on how to get up and running&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;kDynamoMapper&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/yo"&gt;kDynamoMapper&lt;/a&gt; if you are a Kotlin developer, this project from jaitl will be of interest. It provides a lightweight AWS DynamoDB mapper for Kotlin written in pure Kotlin. Check out the full README.md for more details.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-and-community-blog-posts"&gt;
  &lt;/a&gt;
  AWS and Community blog posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Apache Kafka&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When it comes to the topic of Data Analytics, you can always count on Gary Stafford to come up with the goods, and last week he published another great post, &lt;a href="https://aws-oss.beachgeek.co.uk/z1"&gt;Stream Processing with Apache Spark, Kafka, Avro, and Apicurio Registry on Amazon EMR and Amazon MSK&lt;/a&gt;. This is the second part of previous post I shared a few weeks ago, and in this post he shows you how you can read and write messages to and from Amazon MSK in Apache Avro format. The post also shows how you can store the Avro-format Kafka message’s key and value schemas in Apicurio Registry and retrieve the schemas instead of hard-coding the schemas in the PySpark scripts. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RS0m3T12--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/4800/1%2AXGnUIP5Xj3w1ODheHBEl-A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RS0m3T12--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/4800/1%2AXGnUIP5Xj3w1ODheHBEl-A.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bottlerocket&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bottlerocket is an open source Linux-based operating system from Amazon that was purpose built for running containers with a strong emphasis on security. The result is an operating system that comes with a variety of built-in controls for creating a secure environment for running containerised workloads. If you want to dive deep and find out more, then Jeremy Cowan, Sai Charan Teja Gopaluni, and Vijay K Sikha have collaborated together on this post, &lt;a href="https://aws-oss.beachgeek.co.uk/yx"&gt;Security features of Bottlerocket, an open source Linux-based operating system&lt;/a&gt; where they explore several of the security features available in Bottlerocket and how they protect your environment. [deep dive]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache TinkerPop&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Apache TinkerPop is an open source computing framework for graph databases and graph analytic systems. Designed to appeal to software developers, TinkerPop lets developers add graph computing capabilities to their applications without worrying about developing APIs, graph processing engines, or graph algorithms. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/z0"&gt;Why developers like Apache TinkerPop, an open source framework for graph computing&lt;/a&gt; Brad Bebee, Kelvin Lawrence, and Stephen Mallette provide an introduction to the Apache TinkerPop open source project and explain how it helps developers create and explore directed property graphs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--clsnl97u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/09/21/lakelvin_tinkerpop_f3_sm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--clsnl97u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/09/21/lakelvin_tinkerpop_f3_sm.png" alt="graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prometheus&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Last week AWS announced the general availability (GA) of Amazon Managed Service for Prometheus, a fully managed Prometheus-compatible service. To celebreate, we saw a number of posts covering this open source project.&lt;/p&gt;

&lt;p&gt;First up we had &lt;a href="https://aws-oss.beachgeek.co.uk/ys"&gt;Amazon Managed Service for Prometheus is now Generally Available&lt;/a&gt; Imaya Kumar Jagannathan, Marc Chene, and Vikram Venkataraman walk you through everything new since the announcement at re:Invent and walk you through how to get started. [hands on] My colleague Channy Yun also wrote about this launch in &lt;a href="https://aws-oss.beachgeek.co.uk/yv"&gt;Amazon Managed Service for Prometheus Is Now Generally Available with Alert Manager and Ruler&lt;/a&gt; and covers how we contributed the high-availability alert manager to the open source Cortex project, a project providing horizontally scalable, highly available, multi-tenant, long-term store for Prometheus.&lt;/p&gt;

&lt;p&gt;If you like to receive alerts in Slack, then the next post, &lt;a href="https://aws-oss.beachgeek.co.uk/yt"&gt;How to integrate Amazon Managed Service for Prometheus with Slack&lt;/a&gt; is perfect for you. Arun Chandapillai and Abhi Khanna walk you through a solution on how to set up the Alert manager in Amazon Managed Service for Prometheus to publish alerts to a Slack channel via Amazon Simple Notification Service (SNS) and AWS Lambda. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UDWAkk3J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2021/09/30/11-2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UDWAkk3J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2021/09/30/11-2.jpg" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you prefer to receive your alerts in PagerDuty, that is cool too and Mike George and Abhi Khanna have you covered in the post, &lt;a href="https://aws-oss.beachgeek.co.uk/yu"&gt;Using Amazon Managed Service for Prometheus Alert Manager to receive alerts with PagerDuty&lt;/a&gt; [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tQJ_Ykte--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2021/09/27/Figure1-1-1024x520.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tQJ_Ykte--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2021/09/27/Figure1-1-1024x520.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The last post is &lt;a href="https://aws-oss.beachgeek.co.uk/yw"&gt;Using Prometheus Adapter to autoscale applications running on Amazon EKS&lt;/a&gt; from Vikram Venkataraman and it is a good one. He walks you through how to utilise Prometheus Adapter to autoscale Amazon EKS Pods running an Amazon App Mesh workload. AWS App Mesh is a service mesh that makes it easy to monitor and control services. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GAjpP9oN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2021/09/28/custom-metric-blog.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GAjpP9oN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/972a67c48192728a34979d9a35164c1295401b71/2021/09/28/custom-metric-blog.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Open Telemetry&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Last week saw the announcement from Alolita Sharma and Nizar Tyrewalla thatAWS Distro for OpenTelemetry (ADOT) is now generally available with production-ready tracing support, in the post &lt;a href="https://aws-oss.beachgeek.co.uk/yy"&gt;AWS Distro for OpenTelemetry is now GA for tracing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Following that we had AWS interns, software engineers Huy Vo and Iris Song, share their experience with adding StatefulSet support in the OpenTelemetry Operator in the post &lt;a href="https://aws-oss.beachgeek.co.uk/yz"&gt;Adding StatefulSet support in the OpenTelemetry Operator&lt;/a&gt;. They talk about how they added StatefulSet support to the OpenTelemetry Operator, and describe our design choices and lessons learned.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XEakkBWo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/09/02/vo-song_stateful-support-opentelemetry-operator_f3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XEakkBWo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/09/02/vo-song_stateful-support-opentelemetry-operator_f3.png" alt="design"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One final thing to share, is the always excellent, weekly roundup of Observability news from Michael Hausenblas. &lt;a href="https://aws-oss.beachgeek.co.uk/yi"&gt;This was last weeks newsletter&lt;/a&gt;, and I urge you to sign up as they always contain excellent material. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenSearch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A few weeks back I shared news about new clients for OpenSearch. Kyle Davis has now put together a nice blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/ym"&gt;OpenSearch clients in Python, Go, and Node.js&lt;/a&gt; which shows you how to get up and running with these. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Terraform&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you use Terraform as your preferred infrastructure as code (IaC) tool, then check out this post, &lt;a href="https://aws-oss.beachgeek.co.uk/yr"&gt;How to Deploy AWS Config Conformance Packs Using Terraform&lt;/a&gt; from Jegan Sundarapandian and Chloe Goldstein. They walk you through creating a Terraform template file that you can use to deploy and configure an AWS service (AWS Config) to help you with checking for conformance/compliance against Amazon S3 bucket best practices. [hands on]&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-updates"&gt;
  &lt;/a&gt;
  Quick updates
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Apache Kafka&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon Managed Streaming for Apache Kafka (Amazon MSK) now supports Apache Kafka version 2.8.1 for new and existing clusters. &lt;a href="https://aws-oss.beachgeek.co.uk/yj"&gt;Apache Kafka 2.8.1 includes several bug fixes&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#events-for-your-diary"&gt;
  &lt;/a&gt;
  Events for your diary
&lt;/h3&gt;

&lt;p&gt;Coming up later this week we have...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GraphQL API security best practices with AWS AppSync and AWS Amplify&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;14th October, 11am AEST&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As a developer, the most important parts of managing your applications should always include enhancing performance while strengthening security. In this webinar, we take you through security best practices for your GraphQL API’s with AWS AppSync and AWS Amplify, providing you with an understanding of how these can be applied to your applications. In this session, you will learn about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GraphQL Protocol and how to configure a schema&lt;/li&gt;
&lt;li&gt;Possible ways to authenticate and authorise access to GraphQL APIs&lt;/li&gt;
&lt;li&gt;How to configure network security for your API&lt;/li&gt;
&lt;li&gt;How to enable observability for your API with logging, tracing or auditing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To &lt;a href="https://aws-oss.beachgeek.co.uk/ue"&gt;register for this event, use this link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amazon SageMaker and Open-Source Tools for ML: Better Together&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;October 7 | 11 AM PT | 2 PM ET&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Many organisations rely on open-source tools to support the Machine Learning lifecycle. Amazon SageMaker has been rapidly evolving by introducing support and compatibility for various open-source frameworks. In this session, you will learn how to build a customisable ML Infrastructure based on Amazon SageMaker and open-source components. We will discuss pros and cons, the limitations of different tools that support specific stages of the ML workflow, and best practices for MLOps, to automate these stages into repeatable pipelines.&lt;/p&gt;

&lt;p&gt;To read more and &lt;a href="https://aws-oss.beachgeek.co.uk/wz"&gt;register for this event, click here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flink Forwards Global 2021&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;October 26th/27th&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Flink Forward Global 2021 is a 2-day virtual conference for the Apache Flink and stream processing communities. Apache Flink is an open-source distributed engine for processing data streams that can support both streaming and batch workloads. Flink Forward has keynote presentations and talks on production Flink use cases, technical deep dive sessions, and the growth of the Flink ecosystem. You can meet core Flink committers, new and experienced users, and thought leaders who share experiences and best practices in stream processing, real-time analytics, and the management of mission-critical Flink deployments in production.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/wh"&gt;Read more and sign up here.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stay-in-touch-with-open-source-at-aws"&gt;
  &lt;/a&gt;
  Stay in touch with open source at AWS
&lt;/h3&gt;

&lt;p&gt;I hope this summary has been useful. Remember to check out the &lt;a href="https://aws.amazon.com/opensource/?opensource-all.sort-by=item.additionalFields.startDate&amp;amp;opensource-all.sort-order=asc"&gt;Open Source homepage&lt;/a&gt; to keep up to date with all our activity in open source by following us on &lt;a href="https://twitter.com/AWSOpen"&gt;@AWSOpen&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>aws</category>
    </item>
    <item>
      <title>RxJS - Custom Operators</title>
      <author>Luca Del Puppo</author>
      <pubDate>Mon, 04 Oct 2021 06:14:29 +0000</pubDate>
      <link>https://dev.to/this-is-learning/rxjs-custom-operators-5gah</link>
      <guid>https://dev.to/this-is-learning/rxjs-custom-operators-5gah</guid>
      <description>&lt;p&gt;Hi Folks 👋&lt;br&gt;
after many articles in which I have illustrated the different types of operators already included in the RxJS library, today I show you how to create your own operators.&lt;br&gt;
You can create a new operator in two ways: mixing the different operators illustrated in the previous articles or from scratch.&lt;br&gt;
In common cases, when we need to create a new operator, all the behaviours that we need already exist in the operators exposed by the RxJS library. In these cases, we can use the "pipe" function to combine together the operators. With the "pipe" function you can create a new function that will be the new operator, and inside this function you can create the logic of your operator.&lt;br&gt;
Here's an example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;take&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UnaryFunction&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;takeLogAndDelay&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;takeNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;UnaryFunction&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="nx"&gt;take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;takeNumber&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;takeLogAndDelay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Source&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;Source 0
Source 1
Source 2
Source 3
Source 4
Source 5
Source 6
Source 7
Source 8
Source 9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, in the last example I created a new operator called "takeLogAndDelay". This operator combines together three operators: tap, take and delay.&lt;br&gt;
As you can see, it's easy to create a new operator of this type and you just need to flow these rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a new function with the name of the new operator&lt;/li&gt;
&lt;li&gt;return the pipe function&lt;/li&gt;
&lt;li&gt;combine the operators in the pipe function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In 95% of your cases, you can resolve your problem and create a new operator using this method, while in the 5% of the cases not managed by this method you can create a new operator from scratch.&lt;br&gt;
Below an example of the delay operator created from scratch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;tap&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs/operators&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;delayInMs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allTimerIDs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NodeJS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Timeout&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hasCompleted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;observable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;timerID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;allTimerIDs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timerID&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hasCompleted&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;allTimerIDs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;delayInMs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

          &lt;span class="nx"&gt;allTimerIDs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timerID&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;hasCompleted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;allTimerIDs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;allTimerIDs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;timerID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;clearTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timerID&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toLocaleTimeString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;before&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="nx"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toLocaleTimeString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;after&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;22:11:01 before 1
22:11:01 before 2
22:11:01 before 3
22:11:04 after 1
22:11:04 after 2
22:11:04 after 3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we can create a new operator and manage all the behaviours needed for our logic using the Observable constructor. It's rare to use this approach but if you find yourself in front of a case not yet solved by the existing operators, you can rely on it.&lt;/p&gt;

&lt;p&gt;Ok guys, that's all for today.&lt;/p&gt;

&lt;p&gt;See you soon&lt;br&gt;
Bye bye 👋 &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>rxjs</category>
    </item>
    <item>
      <title>What is a decentralized exchange? Introducing the best decentralized exchanges</title>
      <author>anyatito</author>
      <pubDate>Mon, 04 Oct 2021 06:14:05 +0000</pubDate>
      <link>https://dev.to/anyatito1/what-is-a-decentralized-exchange-introducing-the-best-decentralized-exchanges-3a30</link>
      <guid>https://dev.to/anyatito1/what-is-a-decentralized-exchange-introducing-the-best-decentralized-exchanges-3a30</guid>
      <description>&lt;p&gt;Decentralized exchanges are a new version of digital currency exchanges that have been created to solve the problems of centralized exchanges. However, these exchanges also have their own problems. Since it has not been long since these new exchanges started operating, you may be faced with many questions such as what is a decentralized exchange and what is the difference between them and a centralized exchange. For this reason, in this article, we intend to introduce this type of digital currency exchanges.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-decentralized-exchange-send-and-receive-digital-currency-directly"&gt;
  &lt;/a&gt;
  What is a decentralized exchange? Send and receive digital currency directly
&lt;/h2&gt;

&lt;p&gt;Exchange offices are places to buy and sell currency online. Conventional exchanges operate centrally to provide good service to their users and speed up the transaction process. That is, they have a powerful central server where user information is stored. Some traders and activists in the world of digital currency consider the centralization of exchange offices as a weakness. That is why a decentralized exchange has been created.&lt;/p&gt;

&lt;p&gt;Decentralized exchange (DEX) is a peer-to-peer online service (P2P) that allows direct transactions between two users. These types of exchanges are built on the blockchain network and allow traders to freely store or trade their digital currencies. Ethereum is the most widely used blockchain for decentralized exchange, however many exchanges have been set up on other blockchains such as graphene.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-difference-between-a-centralized-exchange-and-a-decentralized-exchange"&gt;
  &lt;/a&gt;
  What is the difference between a centralized exchange and a decentralized exchange?
&lt;/h2&gt;

&lt;p&gt;In most centralized and reputable exchanges, users must authenticate and store their digital assets in wallets designated by the exchanges. The purpose of centralized exchanges is to facilitate transactions between users, prevent fraud and abuse. For this reason, they have complete control over the transactions. For example, you can easily view the price of digital currencies in a centralized and reputable exchange and trade in the shortest time. Such a feature is possible only with full control of transactions.&lt;/p&gt;

&lt;p&gt;To answer the question of what is a decentralized exchange office, it must be said that such exchange offices act exactly against centralized exchange offices. The management of these exchanges is fully automated or semi-automated and is an independent platform. The administrators of these exchanges can change the decentralized exchange only in important decisions that are made in the presence of all members of the platform. The most important difference between a centralized and a decentralized exchange is that a decentralized exchange does not store users' assets or information on a central server, and users can trade with each other anonymously.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#decentralized-exchange-benefits-distributed-architecture-and-more-security"&gt;
  &lt;/a&gt;
  Decentralized exchange benefits; Distributed architecture and more security
&lt;/h2&gt;

&lt;p&gt;In fact, the main advantage of a decentralized exchange is the distributed and decentralized architecture that prevents a person or organization from controlling transactions. In addition, the following benefits can be mentioned.&lt;/p&gt;

&lt;p&gt;High security and resistance to hacking: Users' assets are not stored in DEX exchanges. On the other hand, hacking a distributed system is very difficult. Therefore, the security of assets and information in DEX will be more.&lt;/p&gt;

&lt;p&gt;Preventing manipulation in transactions: In the past, some exchange offices have manipulated transactions to cause prices to rise or fall. In a decentralized exchange, the possibility of such a thing is minimized.&lt;/p&gt;

&lt;p&gt;Unlimited: One of the problems that we Iranians especially face is the issue of sanctions and domestic laws. International exchange offices do not provide services to Iranians and even freeze their assets. Decentralized exchanges have also solved this problem. Because no one has the right to restrict anyone from using the facilities of these exchanges.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-disadvantages-of-decentralized-exchange-problems-that-make-using-dex-difficult"&gt;
  &lt;/a&gt;
  What are the disadvantages of decentralized exchange? Problems that make using DEX difficult
&lt;/h2&gt;

&lt;p&gt;Decentralized exchange has many unsolved problems. These problems have led traders to restrict the use of these platforms in most cases. In fact, distributed exchanges are not widely used, and currently only people with specific purposes use DEXs.&lt;/p&gt;

&lt;p&gt;Unrecoverable access: Unlike centralized exchanges, they have no way to recover forgotten passwords or wrong transactions.&lt;/p&gt;

&lt;p&gt;Limited features and tools: DEXs do not have the popular tools of traders and the many features of online exchanges.&lt;/p&gt;

&lt;p&gt;Liquidity problem: Even the best decentralized exchanges have a very small share of the trading market&lt;/p&gt;

&lt;p&gt;Low Speed: Checking and verifying transactions in a decentralized exchange is time consuming. Because this has to be done by the miners. The low volume of transactions has also led to a small number of miners. For this reason, buying bitcoin from a reputable exchange will be much easier and faster than a decentralized exchange.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-the-best-decentralized-exchanges-based-on-the-highest-daily-transaction-rate"&gt;
  &lt;/a&gt;
  Introducing the best decentralized exchanges based on the highest daily transaction rate
&lt;/h2&gt;

&lt;p&gt;A large number of decentralized exchanges have started operating in recent years, but only a handful of them have been able to achieve an acceptable daily trading volume. Here we get acquainted with the most important and best decentralized exchanges in the world (according to cointelegraph statistics).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#binance-dex-decentralized-exchange-the-best-decentralized-exchange-in-the-world"&gt;
  &lt;/a&gt;
  Binance DEX decentralized exchange; The best decentralized exchange in the world
&lt;/h3&gt;

&lt;p&gt;Binance is the largest digital currency exchange in the world and its decentralized version is also known as the largest and most important decentralized digital currency exchange in the world. Binance DEX uses the core technology of Binance China to conduct its trading, so its trading capacity is almost binance. Thus, the problem of speed and power that existed in many other decentralized exchanges does not exist in Binance DEX. In addition, Binance DEX also supports hardware and software wallets, and the fees are very low. Thus, this exchange is the best decentralized exchange in the world. Unfortunately, it is not possible for Iranians to use this exchange.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#idex-decentralized-exchange-the-best-decentralized-exchange-for-ethereum"&gt;
  &lt;/a&gt;
  IDEX decentralized exchange; The best decentralized exchange for Ethereum
&lt;/h3&gt;

&lt;p&gt;IDEX Exchange ranks second in terms of daily trading volume after binance. This decentralized exchange has very good facilities and is very similar to centralized exchanges in terms of user environment. IDEX is the first Ethereum-based decentralized smart contract exchange to offer full trading facilities fast and high volume to its users.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#escodex-exchange"&gt;
  &lt;/a&gt;
  EscoDex Exchange
&lt;/h3&gt;

&lt;p&gt;EscoDex decentralized exchange with the support of 100 different currency codes, the ability to confirm transactions, high speed and ease of working with the Scodex platform environment, the ability to convert any asset to another asset and high security have been able to attract many positive comments. Unlike the previous two exchanges, Skodex does not offer many additional features to its users and is just a simple and fast environment for trading.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#decentralized-switcheo-exchange"&gt;
  &lt;/a&gt;
  Decentralized switcheo exchange
&lt;/h3&gt;

&lt;p&gt;Switcheo Exchange is the first decentralized NEO blockchain exchange to offer EOS, Ethereum and Neo tokens in addition to NEO. This exchange is in the fourth rank of the highest daily trading volume after Escodex. The goal of the switcheo network project is to provide more facilities for a world-class trading experience. This exchange provides safe and free trading for its users.&lt;/p&gt;

&lt;p&gt;Decentralized exchange still has a long way to go&lt;br&gt;
In this article, we tried to answer the question "What is a decentralized exchange?" Nearly three years after the launch of powerful decentralized exchanges such as Binance DEX, offering more features and increasing network speed, decentralized exchanges still have a small share of the global market. These exchanges will have a long way to go to attract the attention of professional traders.&lt;/p&gt;

</description>
      <category>dex</category>
      <category>blockchain</category>
      <category>ethereum</category>
      <category>bitcoin</category>
    </item>
    <item>
      <title>How I maintain large-scale dataset in react</title>
      <author>menomanabdulla</author>
      <pubDate>Mon, 04 Oct 2021 06:08:12 +0000</pubDate>
      <link>https://dev.to/menomanabdulla/how-i-maintain-large-scale-dataset-in-react-23la</link>
      <guid>https://dev.to/menomanabdulla/how-i-maintain-large-scale-dataset-in-react-23la</guid>
      <description>&lt;p&gt;Frontend technology turns in robust at current decades. Modern web technology now more dynamic, more interactive seems like more realistic then earlier. Business owners want more engaging of user and there is a cold-war among companies to, how provides more realistic feel, more efficient user-experience for potential customers. And here data plays a big game. If we are on frontend side then terms going like how efficiently maintain data at frontend. Today we are going to explore, how productively we could maintain large-scale data-set at frontend.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://large-dataset-with-react.netlify.app/"&gt;Live Preview&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/menomanabdulla/large-dataset-with-react"&gt;Source Code&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pagination"&gt;
  &lt;/a&gt;
  Pagination:
&lt;/h2&gt;

&lt;p&gt;Pagination is one of conventional and proven way of handling large-scale of dataset. We can reduce pressure from DOM tree by using pagination in large data context. As well as it’s also favorable for makes   frontend UI organized and clean. For paginate I use react-paginate npm package. It’ s really highly customizable and super simple to use. For customization it has a large list of props,  personally  I found it handy for dealing with large-scale data-set. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#infinitescroll"&gt;
  &lt;/a&gt;
  Infinite-scroll:
&lt;/h2&gt;

&lt;p&gt;Infinite-scroll is more trendy approach of maintain large-scale of data-set at frontend. I love infinite-scroll for its smoothness. Infinite-scroll is a bunch handy for news-feed component for this a large amount if popular platform are using infinite-scroll like facebook, twitter, linkedin most of the social-media platform are using infinite-scroll concept. In react we can use infinite-scroll by a popular package called ‘react-infinite-scroll’. Most interesting things about ‘react-infinite-scroll’ are its size and usability. Super simple to use, with super handy use-case. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#virtualized-and-window"&gt;
  &lt;/a&gt;
  Virtualized and Window:
&lt;/h2&gt;

&lt;p&gt;According to react-windows doc: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;React-window reduce the amount of work required to render the initial view and to process updates.&lt;/li&gt;
&lt;li&gt;It reduces the memory footprint by avoiding over allocation of DOM nodes. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;React-window is new form of react-virtualized. React-window is smaller and faster than react-virtualized. I would suggest go for react-window instead of react-virtualized for those size, customizability and speed issues.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lastwords"&gt;
  &lt;/a&gt;
  Last-words:
&lt;/h3&gt;

&lt;p&gt;Thanks for staying till now; I highly appreciate your effort. If you have any suggestion about maintaining large-scale data-set at frontend especially in react please share in comment box so that it will resourceful for others too. If you love this article let me know by your activity. Happy coding.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>API Testing - Database State Validation in vREST NG</title>
      <author>Dheeraj Aggarwal</author>
      <pubDate>Mon, 04 Oct 2021 05:50:27 +0000</pubDate>
      <link>https://dev.to/dheerajaggarwal/api-testing-database-state-validation-in-vrest-ng-gj5</link>
      <guid>https://dev.to/dheerajaggarwal/api-testing-database-state-validation-in-vrest-ng-gj5</guid>
      <description>&lt;p&gt;Watch our video #tutorial on how you may validate the database state during the execution of API Test cases in the #vREST NG Application.&lt;/p&gt;

&lt;p&gt;Video Link: &lt;a href="https://youtu.be/dVdc8e0keiE"&gt;https://youtu.be/dVdc8e0keiE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Playlist: &lt;a href="https://youtube.com/playlist?list=PLmua155_WrDzt1AbB6iV5Lsw_Z7QrzZZ0"&gt;https://youtube.com/playlist?list=PLmua155_WrDzt1AbB6iV5Lsw_Z7QrzZZ0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;vREST NG is an enterprise-ready application for Automated API Testing. You can download and install the vREST NG application directly on Windows, OSX, and Linux via our website.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Important Links:&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://vrest.io/?utm_source=devto&amp;amp;utm_medium=devto-desc&amp;amp;utm_campaign=video"&gt;vREST NG Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//support@vrest.io"&gt;Contact Email&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discord.gg/NtRa7kw"&gt;Community Chat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://meetings.hubspot.com/dheeraj-aggarwal"&gt;Book a Live Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Please do like and share if you found this video helpful and let the voice heard by the testing community. Also, let us know your feedback by commenting on this post.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>vrestng</category>
      <category>apitesting</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
