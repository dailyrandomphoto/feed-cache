<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Nodejs Express in AWS Lambda via SAM</title>
      <author>Paul</author>
      <pubDate>Sun, 11 Jul 2021 08:26:04 +0000</pubDate>
      <link>https://dev.to/paul_k/nodejs-express-in-aws-lambda-via-sam-1a5</link>
      <guid>https://dev.to/paul_k/nodejs-express-in-aws-lambda-via-sam-1a5</guid>
      <description>&lt;p&gt;I like NodeJS and Express it's handy, easy to use and light weight.  I have used this at work and in personal projects even though I tend to choose Python and Flask these days.  What I like about express is that I can host my Frontend ( and SSR content ) and API in the same project.  If I am building a PoC or a small site/application this make perfect sense.&lt;/p&gt;

&lt;p&gt;A year or so ago as I was building out a lab for the local &lt;a href="https://www.meetup.com/Melbourne-AWS-Programming-and-Tools-Meetup/"&gt;"AWS Programming and Tools"&lt;/a&gt; Meetup I built a small demo using localstack and Dynamo.  A team that is building an adaption of &lt;a href="http://scrumblr.ca/"&gt;Scrumbler&lt;/a&gt; Where having some issues so I whipped up a quick example of Express, wrapped up into a SAM template and deployed to AWS Lambda.&lt;/p&gt;

&lt;p&gt;The set this up simply I have used &lt;a href="https://www.npmjs.com/package/@vendia/serverless-express"&gt;@vendia/serverless-express&lt;/a&gt; as a wrapper/proxy for lambda.  In this way I can develop locally with hot reloading and push the same code without change to Lambda.&lt;/p&gt;

&lt;p&gt;There are 2 entry points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Local (app.local.js)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`listening on http://localhost:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;lambda.js
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;serverlessExpress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@vendia/serverless-express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;serverlessExpress&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then of course the application itself.  This application is simple and small and is all in one file ( app.js )&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bodyParser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body-parser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cors&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;FruitBox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="c1"&gt;//Static content ie images&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/static&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;static&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cors&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bodyParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bodyParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlencoded&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;view engine&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ejs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;views&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;views&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;fruitBox&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FruitBox&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/index&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;fruitBox&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;FruitBox&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/ping&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;incomming&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ping &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;resonse&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pong &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/fruitbox&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;FruitBox&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/fruitbox/:item&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;FruitBox&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;


&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/fruitbox&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruitName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fruitName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;qty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;qty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fruitName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;qty&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;qty&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;FruitBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;FruitBox&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;errorMessage&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ensure your POST body contains both a fruitName and a qty and content type is application/json &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The full repo can be seen &lt;a href="https://github.com/kukielp/aws-sam-nodejs-express"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll now explain how this comes together....tbc&lt;/p&gt;

</description>
      <category>aws</category>
      <category>node</category>
      <category>serverless</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Git Learning Materials</title>
      <author>Vansh Sharma</author>
      <pubDate>Sun, 11 Jul 2021 08:11:04 +0000</pubDate>
      <link>https://dev.to/vanshsh/git-learning-materials-1ho2</link>
      <guid>https://dev.to/vanshsh/git-learning-materials-1ho2</guid>
      <description>&lt;p&gt;Thanks, Everyone&lt;/p&gt;

&lt;p&gt;For being part of the series &lt;strong&gt;&lt;em&gt;From Git to GitHub&lt;/em&gt;&lt;/strong&gt;.  This is the 4th and the last &lt;strong&gt;Blog of the series&lt;/strong&gt;.&lt;br&gt;
In this blog, I will give you various resources to learn, apply, read about Git and GitHub.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-git"&gt;
  &lt;/a&gt;
  Install Git
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#youtube-playlists-to-learn-git"&gt;
  &lt;/a&gt;
  Youtube Playlists to Learn Git
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://youtu.be/3RjQznt-8kE"&gt;The Net Ninja&lt;/a&gt; .&lt;/li&gt;
&lt;li&gt; &lt;a href="https://youtu.be/SWYqp7iY_Tc"&gt;Traversy Media&lt;/a&gt;. &lt;/li&gt;
&lt;li&gt; &lt;a href="https://youtu.be/SWYqp7iY_Tc"&gt;Tech with Tim&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#reading-resources"&gt;
  &lt;/a&gt;
  Reading Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.w3schools.com/GIT/default.asp"&gt;W3School/Git&lt;/a&gt;  .&lt;/li&gt;
&lt;li&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/GitHub"&gt;MDN docs&lt;/a&gt; .&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#open-source-contribution"&gt;
  &lt;/a&gt;
  Open Source Contribution
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://github.com/firstcontributions"&gt;First contribution &lt;/a&gt;.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://up-for-grabs.net/#/"&gt;Up for Grab&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/danthareja/contribute-to-open-source/issues/1"&gt;DRY&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://github.com/TEAMMATES/teammates/contribute"&gt;TEAMMATES&lt;/a&gt; .&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#books"&gt;
  &lt;/a&gt;
  Books
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://git-scm.com/book/en/v2"&gt;Pro Git Book&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cheatsheet"&gt;
  &lt;/a&gt;
  Cheatsheet
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://gitcheatsheet.org/"&gt;Git Cheatsheet&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt; &lt;a href="https://education.github.com/git-cheat-sheet-education.pdf"&gt;Cheathsheet by GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step-by-step-method"&gt;
  &lt;/a&gt;
  Step by Step Method
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://www.deployhq.com/git"&gt;Learn How to use Git&lt;/a&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Thanks again&lt;/strong&gt; for being part of the series. And don't worry Git is not that difficult as it seems also you have to not learn everything there are only 10-15 commands that you will use mostly throughout your life.&lt;/p&gt;

&lt;p&gt;There are more informative and interesting blogs to come. So stay tuned. &lt;/p&gt;

&lt;p&gt;Until then &lt;strong&gt;Keep Learning, Keep Growing&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;Connect with me 👇 &lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Twitter&lt;/th&gt;
&lt;th&gt;LinkedIn&lt;/th&gt;
&lt;th&gt;Gmail&lt;/th&gt;
&lt;th&gt;DEV&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://twitter.com/Vanshsh2701"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y-ozPGI4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.icons8.com/clouds/60/000000/twitter.png"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.linkedin.com/in/vanshsharma27/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ObNF6flA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.icons8.com/bubbles/60/000000/linkedin.png"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="mailto:vanshsharma9354@gmail.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VDnSwS5v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.icons8.com/clouds/60/000000/gmail.png"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://dev.to/vanshsh"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DfwG4qYV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.icons8.com/office/50/000000/blog.png"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>github</category>
    </item>
    <item>
      <title>Serendipity, a new VS Code Theme.</title>
      <author>michael-andreuzza</author>
      <pubDate>Sun, 11 Jul 2021 07:48:02 +0000</pubDate>
      <link>https://dev.to/michaelandreuzza/serendipity-a-new-vs-code-theme-1f9b</link>
      <guid>https://dev.to/michaelandreuzza/serendipity-a-new-vs-code-theme-1f9b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#wvsc-serendipity-theme-for-vs-code"&gt;
  &lt;/a&gt;
  WVSC Serendipity Theme for VS Code
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=wicked-labs.wvsc-serendipity"&gt;https://marketplace.visualstudio.com/items?itemName=wicked-labs.wvsc-serendipity&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Open &lt;strong&gt;Extensions&lt;/strong&gt; sidebar panel in VS Code. &lt;code&gt;View → Extensions&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Search for &lt;code&gt;wvsc-serendipity&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Install&lt;/strong&gt; to install it.&lt;/li&gt;
&lt;li&gt;Code &amp;gt; Preferences &amp;gt; Color Theme &amp;gt; &lt;strong&gt;wvsc-serendipity&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Optional: Use the recommended settings below for best experience&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#recommended-settings"&gt;
  &lt;/a&gt;
  Recommended Settings
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// This is are my personal prefferences&lt;/span&gt;
  &lt;span class="c1"&gt;// Personally I use monospace, and it feels lovely.&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;workbench.colorTheme&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;wvsc-serendipity&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.fontFamily&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;'Jet Brains Mono' , Consolas, 'Courier New', monospace&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.fontSize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.lineHeight&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.letterSpacing&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;files.trimTrailingWhitespace&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.fontWeight&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;400&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prettier.eslintIntegration&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.cursorStyle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;line&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.cursorWidth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.cursorBlinking&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;phase&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;editor.renderWhitespace&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;all&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#colours"&gt;
  &lt;/a&gt;
  Colours
&lt;/h2&gt;

&lt;p&gt;DarkGray: #232834&lt;br&gt;
Peppermint: #9EF0F0&lt;br&gt;
Cherry: #F06897&lt;br&gt;
Violeta: #BE95FF&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#feedback"&gt;
  &lt;/a&gt;
  Feedback
&lt;/h2&gt;

&lt;p&gt;Anything you wonder just me on twitter @mike_andreuzza&lt;/p&gt;

&lt;p&gt;/Mike&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>ux</category>
      <category>productivity</category>
    </item>
    <item>
      <title>5 Best recommended VSCode Extensions </title>
      <author>akshat-2110</author>
      <pubDate>Sun, 11 Jul 2021 07:36:52 +0000</pubDate>
      <link>https://dev.to/akshat2110/5-best-recemented-vscode-extensions-1mpm</link>
      <guid>https://dev.to/akshat2110/5-best-recemented-vscode-extensions-1mpm</guid>
      <description>&lt;p&gt;Visual Studio Code is a source-code editor made by Microsoft for Windows, Linux and macOS. Features include support for debugging, syntax highlighting, intelligent code completion, snippets, code refactoring, and embedded Git. Users can change the theme, keyboard shortcuts, preferences, and install extensions that add additional functionality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#top-5-recommendation-for-extensions"&gt;
  &lt;/a&gt;
  Top 5 recommendation for extensions
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-code-spell-checker"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker"&gt;Code Spell Checker&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This extension does what it exactly says. It checks spelling mistakes as you write code by default VSCode will check some spelling but it's not the best and only does so in specific file types but code spell checker will highlight any word it sees that is not in the dictionary and provides spelling suggestions for you it's smart enough to understand camel case snake case pascal case etc and it won't flag compound words in things like variable names.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-prettier-code-formatter"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Prettier - Code formatter&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Prettier is a very popular extension that provides auto code formatting for most programming languages it's especially useful in html javascript and other languages where there's a lot of nested blocks and opening and closing tags after you install prettier you can configure your formatting by pressing CTRL+SHIFT+P&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-bracket-pair-colorizer-2"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2"&gt;Bracket Pair Colorizer 2&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is the new version of the original bracket colorizer that simply colors corresponding brackets such that it's easier to see where each block starts and ends now we'll do that with parentheses&lt;br&gt;
brackets angle brackets square brackets squiggly brackets all the different type of brackets&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-gitlens-git-supercharged"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"&gt;GitLens — Git supercharged&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is an add-on for git now git is integrated by default in VSCode and so you can already do a lot of git related stuff in VSCode but what git lens allows you to do is see more information about the code that you're working in in the git repository so specifically you can see things like authorship modifications you can go and look through all of the commit history and just gives you a better user interface than the default interface you have with vs code by default what it also does is provide file annotations related to commits authorships and also provides a bunch of different views for navigating revisions and changes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-settings-sync"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync"&gt;Settings Sync&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is extremely useful especially if you work with VSCode on multiple machines and that is called settings sync. Now as the name suggests this will allow you to sync all of your VSCode settings, keybinds, extensions, extension settings and more across all of  your different devices. You do need to manually configure and install this extension on all of your different devices before.&lt;br&gt;
To upload all of your settings SHIFT+ALT+U.&lt;br&gt;
To download all of your settings SHIFT+ALT+D&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>extension</category>
      <category>ide</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Learning to toggle Dark Mode through React Hooks</title>
      <author>Ellaine Tolentino</author>
      <pubDate>Sun, 11 Jul 2021 07:20:38 +0000</pubDate>
      <link>https://dev.to/tolentinoel/learning-to-toggle-dark-mode-through-react-hooks-43l1</link>
      <guid>https://dev.to/tolentinoel/learning-to-toggle-dark-mode-through-react-hooks-43l1</guid>
      <description>&lt;p&gt;I recently revisited a project of mine and found a feature that I think I can recreate with the use of React Hooks.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;My current goal is to try out things from React to deepen my familiarity of it and maybe others can relate or give tips to #codenewbies like myself about React Hooks. So if you have any resource suggestions, feel free to drop them in the comments below!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So for starters..&lt;/p&gt;

&lt;p&gt;The app that I mentioned is called &lt;a href="https://splashglam.herokuapp.com/"&gt;SplashGlam&lt;/a&gt;. It is powered by ReactJS and hosted through Heroku. Feel free to toggle the day and night mode using the button on the top navigator to see what are we working with.&lt;/p&gt;

&lt;p&gt;On Day/Bright mode..&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fw6txzZ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrubarynm8n9bchy3ux7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fw6txzZ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrubarynm8n9bchy3ux7.png" alt="Day mode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On Night/Dark mode..&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ava9hPiG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46r4bl1h80fsdk50rjkg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ava9hPiG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46r4bl1h80fsdk50rjkg.png" alt="Night mode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also have discussed how I built the toggling feature using LocalStorage on my other blog.(&lt;a href="https://dev.to/tolentinoel/what-is-localstorage-3ffh"&gt;What is LocalStorage?&lt;/a&gt;) This time around, I wanted to try Hooks to recreate at least the toggling part.&lt;/p&gt;

&lt;p&gt;I created a repo to test things out and feel free to check it out if you wanted to test it out on your own. &lt;a href="https://github.com/tolentinoel/randomHex"&gt;Github repo&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#small-breakdown-of-my-code"&gt;
  &lt;/a&gt;
  Small breakdown of my code:
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#first"&gt;
  &lt;/a&gt;
  First
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KNZOT51q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5zz3e9bdavvtotm3xqdp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KNZOT51q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5zz3e9bdavvtotm3xqdp.png" alt="JSX for DOM elements"&gt;&lt;/a&gt;-So I built the elements on the page first with the corresponding attributes needed like an onClick eventListener.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#second"&gt;
  &lt;/a&gt;
  Second
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bz9e7eCw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/siij491kn6b0f0hibtmr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bz9e7eCw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/siij491kn6b0f0hibtmr.png" alt="Function snapshot"&gt;&lt;/a&gt;-Here's how I incorporate useState in the toggle &amp;amp; using a function that has an if statement to trigger changes.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#third"&gt;
  &lt;/a&gt;
  Third
&lt;/h4&gt;

&lt;p&gt;CSS! Now that we have our functions and elements all set. Remember our function has a line of code where we change/replace the className of the body from &lt;code&gt;dayMode&lt;/code&gt; to &lt;code&gt;nightMode&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Here's my corresponding CSS to see DOM change!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_C9sA9_9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aupzy3b6gj04mfxdeb9i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_C9sA9_9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aupzy3b6gj04mfxdeb9i.png" alt="CSS snapshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--auluF-g1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3y535mzrnjm6rw1dkco.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--auluF-g1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b3y535mzrnjm6rw1dkco.png" alt="Day Mode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tAgWroaw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cqot4i6lv4uji4zos7ka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tAgWroaw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cqot4i6lv4uji4zos7ka.png" alt="Night Mode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that is pretty much it! I hope anyone that needs an example in using hooks to toggle day/night mode find this helpful!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#let-me-know-if-i-missed-anything-in-the-comments-please-until-the-next"&gt;
  &lt;/a&gt;
  Let me know if I missed anything in the comments please! Until the next!
&lt;/h3&gt;

</description>
      <category>react</category>
      <category>codenewbie</category>
      <category>hooks</category>
    </item>
    <item>
      <title>C# Dictionary</title>
      <author>Ishaan Sheikh</author>
      <pubDate>Sun, 11 Jul 2021 06:55:15 +0000</pubDate>
      <link>https://dev.to/sheikh_ishaan/c-dictionary-191c</link>
      <guid>https://dev.to/sheikh_ishaan/c-dictionary-191c</guid>
      <description>&lt;p&gt;The Dictionary in C# is a generic collection, which is used to store data in key-value pairs. It is available under the &lt;code&gt;System.Collections.Generic&lt;/code&gt; namespace.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Dictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;TValue&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#tkey"&gt;
  &lt;/a&gt;
  TKey
&lt;/h3&gt;

&lt;p&gt;It represents the data type of the &lt;strong&gt;key&lt;/strong&gt;. For example, &lt;strong&gt;string, bool, int&lt;/strong&gt;, etc. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tvalue"&gt;
  &lt;/a&gt;
  TValue
&lt;/h3&gt;

&lt;p&gt;It represents the data type of the &lt;strong&gt;value&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-dictionary"&gt;
  &lt;/a&gt;
  Creating a Dictionary
&lt;/h2&gt;

&lt;p&gt;The Dictionary collection provides an &lt;code&gt;Add()&lt;/code&gt; method to add elements to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Dictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Dictionary&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"John"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Jane"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Smith"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#accessing-an-element"&gt;
  &lt;/a&gt;
  Accessing an element
&lt;/h2&gt;

&lt;p&gt;We can access the element from dictionary by providing the key inside &lt;code&gt;[]&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// John&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#removing-an-element"&gt;
  &lt;/a&gt;
  Removing an element
&lt;/h2&gt;

&lt;p&gt;We can remove an element from the dictionary using the &lt;code&gt;Remove&lt;/code&gt; method by providing the key to be removed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#iterating-over-the-dictionary"&gt;
  &lt;/a&gt;
  Iterating over the dictionary
&lt;/h2&gt;

&lt;p&gt;We can use the &lt;code&gt;foreach&lt;/code&gt; loop in C# to iterate over the dictionary collection.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KeyValuePair&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" - "&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>csharp</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Demystifying Position Property</title>
      <author>Bharati Subramanian</author>
      <pubDate>Sun, 11 Jul 2021 06:38:20 +0000</pubDate>
      <link>https://dev.to/bharati21/demystifying-position-property-30kd</link>
      <guid>https://dev.to/bharati21/demystifying-position-property-30kd</guid>
      <description>&lt;p&gt;CSS provides the &lt;strong&gt;&lt;code&gt;position&lt;/code&gt;&lt;/strong&gt; property that specifies how an element should appear in the document. This property is helpful when you want to position elements in the DOM outside of normal flow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-this-blog-post-about"&gt;
  &lt;/a&gt;
  What is this blog post about?
&lt;/h2&gt;

&lt;p&gt;This blog post covers the &lt;strong&gt;&lt;code&gt;position&lt;/code&gt;&lt;/strong&gt; property with the &lt;strong&gt;&lt;code&gt;top&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;right&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;bottom&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;left&lt;/code&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;code&gt;z-index&lt;/code&gt;&lt;/strong&gt; properties that determine the final position of an element.&lt;/p&gt;

&lt;p&gt;Since this property has a notorious tendency to be misunderstood, let's try to figure out this property together!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Check out the demos I explained in this post &lt;a href="https://demystifying-css-position.netlify.app/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites-for-the-blog"&gt;
  &lt;/a&gt;
  Prerequisites for the blog
&lt;/h2&gt;

&lt;p&gt;This blog post assumes that you are familiar with the syntax and basics of HMTL and CSS.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#what-is-the-css-position-property"&gt;
  &lt;/a&gt;
  What is the CSS position property?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;&lt;code&gt;position&lt;/code&gt;&lt;/strong&gt; property specifies &lt;em&gt;how&lt;/em&gt; an element is placed in the DOM.&lt;/li&gt;
&lt;li&gt;Along with this, you can use &lt;strong&gt;&lt;code&gt;top&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;right&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;bottom&lt;/code&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;code&gt;left&lt;/code&gt;&lt;/strong&gt; properties that specify &lt;em&gt;where&lt;/em&gt; the element is placed.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;&lt;code&gt;position&lt;/code&gt;&lt;/strong&gt; property can take &lt;em&gt;five&lt;/em&gt; values:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;static&lt;/li&gt;
&lt;li&gt;absolute&lt;/li&gt;
&lt;li&gt;relative&lt;/li&gt;
&lt;li&gt;fixed&lt;/li&gt;
&lt;li&gt;sticky&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Before we jump in, let's understand in short what &lt;strong&gt;&lt;code&gt;top&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;right&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;bottom&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;left&lt;/code&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;code&gt;z-index&lt;/code&gt;&lt;/strong&gt; are.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;&lt;code&gt;top&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;right&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;bottom&lt;/code&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;code&gt;left&lt;/code&gt;&lt;/strong&gt;, properties specify how far away from the top/ right/ bottom/ left and element should be positioned. 

&lt;ul&gt;
&lt;li&gt;By default all these properties have value &lt;em&gt;auto&lt;/em&gt;, and the element is placed in a &lt;a href="#1-static"&gt;Static Position&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;It accepts both negative and positive integer values and common units such as &lt;em&gt;px&lt;/em&gt;, &lt;em&gt;rem&lt;/em&gt;, &lt;em&gt;em&lt;/em&gt;, &lt;em&gt;%&lt;/em&gt; etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;z-index&lt;/code&gt;&lt;/strong&gt; is used to specify the stack level, and layer elements. 

&lt;ul&gt;
&lt;li&gt;The default value for &lt;strong&gt;&lt;code&gt;z-index&lt;/code&gt;&lt;/strong&gt; is 0, and will not work unless you apply position on the element (except static).&lt;/li&gt;
&lt;li&gt;Elements with a larger &lt;strong&gt;&lt;code&gt;z-index&lt;/code&gt;&lt;/strong&gt; value overlaps elements with smaller &lt;strong&gt;&lt;code&gt;z-index&lt;/code&gt;&lt;/strong&gt; value.&lt;/li&gt;
&lt;li&gt;It accepts positive and negative integers without any unit.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


 
&lt;h3&gt;
  &lt;a href="#1-static"&gt;
  &lt;/a&gt;
  1. Static
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;&lt;code&gt;position: static;&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; is the default value of this property, and the elements appear in their normal flow in the document.&lt;/li&gt;
&lt;li&gt;Properties: &lt;strong&gt;&lt;code&gt;top&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;right&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;bottom&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;left&lt;/code&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;code&gt;z-index&lt;/code&gt;&lt;/strong&gt; have no effect on an element positioned &lt;strong&gt;&lt;code&gt;static&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Check the example below. The blue colored &lt;code&gt;div&lt;/code&gt; with class &lt;code&gt;static&lt;/code&gt; has a static position.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pDtfJPTP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g0p8fin4xqk78g6hi0s9.png" alt="Element with static position"&gt;
&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The code for the above example:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="nc"&gt;.static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;static&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Need not specify as this is default */&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check out the codepen here: &lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/bhaaratii/embed/MWmjOJa?height=600&amp;amp;default-tab=html,css&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-relative"&gt;
  &lt;/a&gt;
  2. Relative
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;When &lt;strong&gt;&lt;em&gt;&lt;code&gt;position: relative;&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; is applied to an element, it appears in the normal flow of the document.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;But unlike &lt;a href="#1-static"&gt;&lt;strong&gt;&lt;em&gt;static position&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;, it accepts accepts values for &lt;strong&gt;&lt;code&gt;top&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;right&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;bottom&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;left&lt;/code&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;code&gt;z-index&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The element is then placed relative to &lt;em&gt;itself&lt;/em&gt; depending on the values of &lt;strong&gt;&lt;code&gt;top&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;right&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;bottom&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;left&lt;/code&gt;&lt;/strong&gt;, and stacked in layers depending on the value of &lt;strong&gt;&lt;code&gt;z-index&lt;/code&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the example shown below, the blue colored &lt;code&gt;div&lt;/code&gt; element with class &lt;code&gt;relative&lt;/code&gt; has a relative position, with top and left offset values.&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g3AuPMwk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqg1m3ujunhi7s1poehl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g3AuPMwk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqg1m3ujunhi7s1poehl.png" alt="Element with relative position"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The code for the above example:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="nc"&gt;.relative&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check out the codepen here: &lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/bhaaratii/embed/mdmrwJK?height=600&amp;amp;default-tab=html,css&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-absolute"&gt;
  &lt;/a&gt;
  3. Absolute
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;When &lt;strong&gt;&lt;em&gt;&lt;code&gt;position: absolute;&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; is applied to an element, it is taken &lt;em&gt;out&lt;/em&gt; of the the normal flow of the document.&lt;/li&gt;
&lt;li&gt;It remains in it's original position unless &lt;strong&gt;&lt;code&gt;top&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;right&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;bottom&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;left&lt;/code&gt;&lt;/strong&gt; values are specified.&lt;/li&gt;
&lt;li&gt;The other elements ignore the element, and behave as if it is not present at all. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;z-index&lt;/code&gt;&lt;/strong&gt; can also be specified to stack and layer elements.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In the example below, the blue colored &lt;code&gt;div&lt;/code&gt; with class &lt;code&gt;absolute&lt;/code&gt; is given a relative position, and no values of &lt;strong&gt;&lt;code&gt;top&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;right&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;bottom&lt;/code&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;code&gt;left&lt;/code&gt;&lt;/strong&gt; are specified.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RPvECAwj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h3no7oyzye5fdczfvsg1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RPvECAwj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h3no7oyzye5fdczfvsg1.png" alt="Element with absolute position"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;See what happens when this blue box is given &lt;strong&gt;&lt;code&gt;z-index: -1;&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HdF_X-4e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v7dpra2xwqfkodw2gb3o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HdF_X-4e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v7dpra2xwqfkodw2gb3o.png" alt="absolute positioned element with z-index -1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The parent of this &lt;code&gt;div.absolute&lt;/code&gt; is the section with class &lt;code&gt;section&lt;/code&gt; and &lt;code&gt;background-color: lightskyblue;&lt;/code&gt; has &lt;code&gt;z-index: 0;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Since &lt;strong&gt;`z-index&lt;/strong&gt;&lt;code&gt; of &lt;/code&gt;section.section&lt;code&gt; is greater than that of &lt;/code&gt;div.absolute&lt;code&gt;, the &lt;/code&gt;div` is stacked below it's parent.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;Typically an element with &lt;strong&gt;&lt;code&gt;position: absolute;&lt;/code&gt;&lt;/strong&gt; is placed relative to it's closest positioned ancestor (other than static).&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If no such ancestor is found, it is simply placed relative to the document.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check out the example below, and notice how the element is placed relative to the document.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v-uy4lSl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qs4cf9en28zdafhzj569.png" alt="Element with absolute position relative to document"&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;The code for the above example:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="nc"&gt;.absolute-two&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Check out what happens, if we give the parent (or an ancestor) of an element with absolute position: &lt;code&gt;position: relative;&lt;/code&gt;.&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--swNodRPR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqjfrb093smnra71dfzr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--swNodRPR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqjfrb093smnra71dfzr.png" alt="Element with position absolute within an ancestor positioned absolute"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check the red colored &lt;code&gt;div&lt;/code&gt; with a class &lt;code&gt;absolute-three&lt;/code&gt;, and it's lightskyblue colored parent &lt;code&gt;section&lt;/code&gt; with class &lt;code&gt;section&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Note how this time the absolute &lt;code&gt;div.absolute-three&lt;/code&gt; is positioned relatively within the parent and not the document.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;The code for the above example is:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="nc"&gt;.section&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="nc"&gt;.absolute-three&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check out the final codepen here: &lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/bhaaratii/embed/KKmgqON?height=600&amp;amp;default-tab=html,css&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-fixed"&gt;
  &lt;/a&gt;
  4. Fixed
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;When &lt;strong&gt;&lt;em&gt;&lt;code&gt;position: fixed;&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; is applied to an element, it is taken &lt;em&gt;out of the the normal flow of the document&lt;/em&gt; similar to &lt;a href="#3-absolute"&gt;Absolute Position&lt;/a&gt;.

&lt;ul&gt;
&lt;li&gt;The main difference is that the &lt;strong&gt;&lt;em&gt;&lt;code&gt;position: fixed;&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; element is not given space in the layout.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;The fixed element is not affected by scrolling, and remains in the specified position depending on the &lt;strong&gt;&lt;code&gt;top&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;right&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;bottom&lt;/code&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;code&gt;left&lt;/code&gt;&lt;/strong&gt; values.&lt;/li&gt;
&lt;li&gt;The positioned element is relative to the document except when it's ancestors have &lt;strong&gt;&lt;code&gt;transform&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;perspective&lt;/code&gt;&lt;/strong&gt;, or &lt;strong&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/strong&gt; property applied with a value other than &lt;strong&gt;&lt;em&gt;none&lt;/em&gt;&lt;/strong&gt;. 

&lt;ul&gt;
&lt;li&gt;Then, the ancestor behaves as the relative parent.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Check out the example below. The text &lt;code&gt;div&lt;/code&gt; with blue background has a class &lt;code&gt;fixed&lt;/code&gt; and &lt;strong&gt;&lt;code&gt;position: fixed&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wEwD1oma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op5t9su8dwx0wn0d9e6z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wEwD1oma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op5t9su8dwx0wn0d9e6z.png" alt="Element with fixed position"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The code for the above example is:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="nc"&gt;.fixed&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check out the codepen here&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/bhaaratii/embed/KKmgXpe?height=600&amp;amp;default-tab=html,css&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-sticky"&gt;
  &lt;/a&gt;
  5. Sticky
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;When &lt;strong&gt;&lt;em&gt;&lt;code&gt;position: sticky;&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; is applied to an element, it is positioned in the the normal flow of the document similar to &lt;a href="https://dev.to!#2-relative"&gt;Relative Position&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;But as the element is scrolled within the positioned ancestor, it becomes fixed once the offset value specified in &lt;strong&gt;&lt;code&gt;top&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;right&lt;/code&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;bottom&lt;/code&gt;&lt;/strong&gt;, and &lt;strong&gt;&lt;code&gt;left&lt;/code&gt;&lt;/strong&gt; properties are crossed.&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For e.g. look at the image below of a header.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--46leBLCq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3g2zdyizf0azdtxfgs15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--46leBLCq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3g2zdyizf0azdtxfgs15.png" alt="Header with sticky positione"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The header's parent is the document, and it's &lt;strong&gt;&lt;em&gt;"sticky"&lt;/em&gt;&lt;/strong&gt; within it. As you scroll and the header is &lt;em&gt;0 away from top&lt;/em&gt;, i.e. &lt;code&gt;top: 0;&lt;/code&gt;, it becomes a fixed positioned element.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;The code for the above example is:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="nc"&gt;.hero&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sticky&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;Let's deal with another scenario. But this time let's use an element that is positioned &lt;strong&gt;sticky&lt;/strong&gt; within another positioned ancestor.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5jstazMy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m5erk9eb3fsumbe9fzse.png" alt="Element with sticky position within a relative positioned ancestor"&gt;

&lt;ul&gt;
&lt;li&gt;In this scenario, the sticky positioned element (text with blue colored background) has a class of &lt;code&gt;sticky&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;It's parent is the &lt;code&gt;section&lt;/code&gt; with class &lt;code&gt;section&lt;/code&gt;, and has a &lt;code&gt;lightskyblue background&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;As you scroll down and &lt;code&gt;div.sticky&lt;/code&gt; is &lt;code&gt;5px&lt;/code&gt; away from the top, it becomes a fixed element. Before that it remains as relatively positioned element.&lt;/li&gt;
&lt;li&gt;But there is a catch here. As the parent &lt;code&gt;section.section&lt;/code&gt; scrolls away from the layout, so does the div with &lt;strong&gt;sticky&lt;/strong&gt; position of. It no longer remains fixed, and now becomes relative again.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zO_qXWQJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9iecnxamfkq9lethmxnk.png" alt="Element with position sticky within relative positioned ancestor"&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Hence the sticky (in particular fixed) behavior of an element remains only within it's closest positioned parent.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The code for the above example is:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;  &lt;span class="nt"&gt;section&lt;/span&gt;&lt;span class="nc"&gt;.section&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="nc"&gt;.sticky&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sticky&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check the entire codepen here:&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/bhaaratii/embed/BaRLmaG?height=600&amp;amp;default-tab=html,css&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  CONCLUSION
&lt;/h2&gt;

&lt;p&gt;Phew! That was a lot. Wasn't it?&lt;/p&gt;

&lt;p&gt;I understand that sometimes CSS can be overwhelming but trust me, as you practice the concepts become clearer.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;&lt;code&gt;position&lt;/code&gt;&lt;/strong&gt; property is very important, and comes in handy in various scenarios.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Check out the demos I explained in this post &lt;a href="https://demystifying-css-position.netlify.app/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;relative&lt;/code&gt; and &lt;code&gt;absolute&lt;/code&gt; positions are often used, and mostly together when you have pseudo elements. 

&lt;ul&gt;
&lt;li&gt;These positions are also often used to stack items. &lt;/li&gt;
&lt;li&gt;The combination of &lt;code&gt;absolute&lt;/code&gt; position within &lt;code&gt;relative&lt;/code&gt; position is common, and is used to add styles such as shadows to elements.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;sticky&lt;/code&gt; position can be used for headers and navbar as shown in the example for &lt;a href="#5-sticky"&gt;Sticky&lt;/a&gt; above.

&lt;ul&gt;
&lt;li&gt;It could also be used in cases when you want to keep an element fixed on the page as long as the positioned parent/ ancestor is visible on the viewport.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;These are not the only available use cases of &lt;code&gt;position&lt;/code&gt; property. I highly recommend you to practice and get your hands dirty to understand these concepts in depth.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Thank you so much for reading this post! &lt;/p&gt;

&lt;p&gt;This was my final blog post on CSS. In the coming posts, I will focus on JavaScript and try to explain few vital concepts.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;If you liked this post then please help me out giving it a heart, unicorn or a pin!&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
Do share it among your dev friends, and comment down what you feel!&lt;/p&gt;





&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  RESOURCES:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/P6UgYq3J3Qs"&gt;Absolute and Relative Position Explained by Kevin Powell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/lUaw-AA9HnA"&gt;Practical Examples of Absolute Position by Kevin Powell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/8TyoihVGErI"&gt;Things you can do with Position Sticky by Kevin Powell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/position"&gt;CSS Position MDN docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Demystifying Software Acronyms</title>
      <author>Tamerlan Gudabayev</author>
      <pubDate>Sun, 11 Jul 2021 06:36:26 +0000</pubDate>
      <link>https://dev.to/tamerlang/demystifying-software-acronyms-40ii</link>
      <guid>https://dev.to/tamerlang/demystifying-software-acronyms-40ii</guid>
      <description>&lt;p&gt;I'm not sure why but we software developers do sure like our acronyms. &lt;/p&gt;

&lt;p&gt;There are some funny ones such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;RTFM&lt;/strong&gt; - Read the "freaking manual"&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;PICNIC&lt;/strong&gt; — Problem in Chair, Not in Computer&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;PEBCAK&lt;/strong&gt; — Problem Exists Between Chair and Keyboard&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But as much as I would love to write an article on funny acronyms, I think it would be more appropriate to first cover the most common and useful acronyms used in software development. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dry"&gt;
  &lt;/a&gt;
  DRY
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pyIyTfg5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iq9qac6xhrqqtufisr28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pyIyTfg5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iq9qac6xhrqqtufisr28.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's start of simple. &lt;/p&gt;

&lt;p&gt;I'm sure many of us have heard of DRY and rightly so because it describes a core programming fundamental: &lt;strong&gt;Don't repeat yourself.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;We all had this problem where we are just too lazy to export a function or a class, and simply duplicate the piece of code. This may seem easier but later on, makes your code hard to maintain. So the next time your thinking of duplicating your code, think of the DRY principle.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#kiss"&gt;
  &lt;/a&gt;
  KISS
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NqWnlHkr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/btrxangxg0jsglgq52x7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NqWnlHkr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/btrxangxg0jsglgq52x7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I like this one, because I'm the type of person who tends to overthink my solutions. Sometimes simple is best, and this is perfectly described in the KISS principle which stands for: "keep it simple stupid". So the next time your thinking of this grand scheme of code that your gonna write, try to KISS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yagni"&gt;
  &lt;/a&gt;
  YAGNI
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--haQ6ssro--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gx9f5hhqxzvdllbz9ese.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--haQ6ssro--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gx9f5hhqxzvdllbz9ese.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Through experience, you know that features are always being added and removed. In response to that you always try to add features just in case, or over-complicate your solution for the sake of extensibility. I'm not saying it's wrong to do that, but sometime you gotta follow the YAGNI principle which means: "You ain't gonna need it".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solid"&gt;
  &lt;/a&gt;
  SOLID
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CTlAL_fj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zpmyo7r8hbys5qme7vgs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CTlAL_fj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zpmyo7r8hbys5qme7vgs.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This one is comprised of five other principles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;S - Single Responsibility Principle&lt;/li&gt;
&lt;li&gt;O - Open Closed Principle&lt;/li&gt;
&lt;li&gt;L - Liskov Substitution Principle&lt;/li&gt;
&lt;li&gt;I - Interface Separation Principle&lt;/li&gt;
&lt;li&gt;D - Dependency Inversion Principle&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In a nutshell, they are the SOLID principles designed to make software design understandable, flexible and maintainable. If you want to learn more I have an article on each principle, you can check it out &lt;a href="https://dev.to/tamerlang/understanding-solid-principles-single-responsibility-principle-523j"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#soc"&gt;
  &lt;/a&gt;
  SOC
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7A8jBTgU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ej6q019ut1h3tbeq90do.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7A8jBTgU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ej6q019ut1h3tbeq90do.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You wouldn't write your whole program in one file right?&lt;/p&gt;

&lt;p&gt;I sure do hope not.&lt;/p&gt;

&lt;p&gt;We should separate classes based on their features or other metric your using. &lt;/p&gt;

&lt;p&gt;This is the basic premise of separation of concern, or in short SOC.&lt;/p&gt;

&lt;p&gt;This is taken a step further in service oriented architecture, where you have a separate program for each feature or domain.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bduf"&gt;
  &lt;/a&gt;
  BDUF
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6i1-ZJxx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/88ojzu3p12b777i8va3u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6i1-ZJxx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/88ojzu3p12b777i8va3u.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before the days of AGILE, we had BDUF or Big Design Up Front. &lt;/p&gt;

&lt;p&gt;BDUF is basically an approach to software development where the software design is perfected up front before the implemention. So before you would begin writing a program, you would first design it, with as much detail as possible and only then would you begin writing code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mvp"&gt;
  &lt;/a&gt;
  MVP
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uSycd6gg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3u7qjk9ybn3stu55yrw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uSycd6gg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3u7qjk9ybn3stu55yrw.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MVP stands for "Minimum Viable Product". It's basically a very early version of a product where it can be used by first customers who then can give back feedback for future product development. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#poc"&gt;
  &lt;/a&gt;
  POC
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0saF8OU0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5mmejuhtxdoiybhktqok.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0saF8OU0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5mmejuhtxdoiybhktqok.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PoC stands for "proof of concept", it basically helps you determine if you idea is a feasible product. Unlike MVP, PoC isn't a fully fledged product, it most probably has only one feature that is given to certain testers to see if it's sensible to continue development. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This was a fun article to write, and I hope an educational one too. As always if you got any questions feel free to leave them down in the comments below. &lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>career</category>
      <category>programming</category>
      <category>writing</category>
    </item>
    <item>
      <title>JavaScript library</title>
      <author>khuliso John Thavhiwa</author>
      <pubDate>Sun, 11 Jul 2021 06:29:41 +0000</pubDate>
      <link>https://dev.to/khuljohn/javascript-library-4mo0</link>
      <guid>https://dev.to/khuljohn/javascript-library-4mo0</guid>
      <description>&lt;p&gt;For front-end developer, which library is best to choose from React+redux and jQuery?&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Find the maximum element from the array in javascript</title>
      <author>Abu Jaid</author>
      <pubDate>Sun, 11 Jul 2021 06:18:32 +0000</pubDate>
      <link>https://dev.to/abu/find-the-maximum-element-from-the-array-in-javascript-42pe</link>
      <guid>https://dev.to/abu/find-the-maximum-element-from-the-array-in-javascript-42pe</guid>
      <description>&lt;p&gt;In this article i am going to find the maximum value from the array,i will use multiple approach to find the maximum value from the array.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#mehod-1-using-math-method"&gt;
  &lt;/a&gt;
  Mehod 1: using math method
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;max_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;max_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;// 20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#method-2-sort-array-in-descending-order"&gt;
  &lt;/a&gt;
  Method 2: sort array in descending order
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;max_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sortedArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;max_value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;sortedArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// 20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#method-3-using-spread-operatores6"&gt;
  &lt;/a&gt;
  Method 3: using spread operator(ES6)
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;max_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;max_value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#method-4-using-loop"&gt;
  &lt;/a&gt;
  Method 4: using loop
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;max_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;max_value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;max_value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;imax&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
 &lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;max_value&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// 20&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#method-5-using-reduce"&gt;
  &lt;/a&gt;
  Method 5: using reduce
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;max_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;max_value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please visit for more information &lt;a href="https://codewithabu.blogspot.com/"&gt;codewithabu&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>react</category>
    </item>
    <item>
      <title>Test for browser, from browser.  Introducing Zylitics!</title>
      <author>praveen tiwari</author>
      <pubDate>Sun, 11 Jul 2021 05:56:16 +0000</pubDate>
      <link>https://dev.to/prtwari/test-for-browser-from-browser-4if9</link>
      <guid>https://dev.to/prtwari/test-for-browser-from-browser-4if9</guid>
      <description>&lt;p&gt;In this post, I'm introducing a new platform that can transform the way automated tests for web applications are written, run and managed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#context"&gt;
  &lt;/a&gt;
  Context
&lt;/h2&gt;

&lt;p&gt;If you're a web developer or QA engineer, there are strong chances you write automated tests for your browser based applications. Even if you don't, for any reason, this post may encourage you to begin.&lt;/p&gt;

&lt;p&gt;Arguably the best way to test browser based applications is end to end testing (&lt;em&gt;e2e&lt;/em&gt; in short) because it encourages simulation of a real user testing your app. It also makes refactoring your application easier because these tests are not tied to the implementation path. You can write end to end tests without looking into the code making them easy to maintain than unit tests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#e2e-testing-tools"&gt;
  &lt;/a&gt;
  E2E Testing tools
&lt;/h2&gt;

&lt;p&gt;To successfully test a web app, there are a few tools you may be using currently. Some of them are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A testing framework (selenium, cypress or nightwatch)&lt;/li&gt;
&lt;li&gt;An IDE (VS code or IDEA)&lt;/li&gt;
&lt;li&gt;test runner (Mocha or JUnit)&lt;/li&gt;
&lt;li&gt;Assertion library (chaijs)&lt;/li&gt;
&lt;li&gt;Versioning system (git)&lt;/li&gt;
&lt;li&gt;Some tool for keeping track of test runs, storing test results (screenshots, videos and logs).&lt;/li&gt;
&lt;li&gt;Infrastructure to run tests on multiple OS and browsers (browserstack, saucelabs, or own setup)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition to these, you've to be good in a programming language such as &lt;code&gt;js&lt;/code&gt;, &lt;code&gt;java&lt;/code&gt; or &lt;code&gt;python&lt;/code&gt; to be able to write tests for complex parts of your web app.&lt;/p&gt;

&lt;p&gt;Wouldn't it be great if I tell you there is something that packs all these things in just a single platform and is accessible right from a web browser?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-zylitics"&gt;
  &lt;/a&gt;
  Introducing Zylitics
&lt;/h2&gt;

&lt;p&gt;Zylitics is a new testing platform that contains every tool required to successfully test web applications. It frees you from thinking in terms of drivers, frameworks, infrastructure or anything else that consumes time to manage and maintain.&lt;/p&gt;

&lt;p&gt;Zylitics manages everything else so that you can just focus on writing tests. To get started with Zylitics, all you've to do is to open a browser and begin writing tests. Following are some of the most important features and tools Zylitics provide:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;A new programming language called &lt;code&gt;ZWL&lt;/code&gt;&lt;/strong&gt;: ZWL is created to let devs/QA write complex tests in easy declarative steps. I wanted to make it easier than ever for people with less programming experience to be able to write tests comfortably. ZWL is dead easy to learn, understand and write. There are no new syntaxes. It is declarative and contains hundreds of built-in functions to make automation easiest. It abstracts away complexities, waits automatically and handles edge cases. Here is an &lt;a href="https://docs.zylitics.io/zwl/overview"&gt;overview of ZWL&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;A desktop like IDE&lt;/strong&gt;: Zylitics IDE allows you to write, run and debug tests. Tests can be run on multiple OS and browser combination. Test results are immediately accessible. Live preview and real time output are automatically relayed while tests are running. Here is how it looks:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--85356eJC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wpcyrho7x7uem7hpsxcs.png" alt="Zylitics IDE"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a3ZYQIzV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8a4y6kj8eqcflju66q1l.png" alt="Zylitics IDE Live Preview"&gt;
Read more about &lt;a href="https://docs.zylitics.io/ide/introduction"&gt;Zylitics IDE&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;A managed infrastructure&lt;/strong&gt;: Zylitics allows tests to run on various OS and browser combinations. Several old browser versions are always maintained. All tests run on remote VMs that are quickly provisioned. When developing on IDE, remote VMs are provisioned under 10 seconds.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;A built-in test runner&lt;/strong&gt;: Zylitics test runner is capable of executing hundreds of tests together and provides real time progress. Various configuration options are available to customise the handling of tests. Multiple test suites can be run in parallel.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T1OqKBuI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zeiqda293da4anje8dtd.png" alt="Zylitics test runner"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Test assets management&lt;/strong&gt;: Tests generate a lot of interesting information that are important for debugging and analysis. Zylitics provide detailed test results as soon as runs are completed. Screenshots, videos, logs, output and everything else is kept forever. You will never loose valuable details.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4YefMwcZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s8mnhb6qmspphfc7ib2x.png" alt="IDE Completed Builds"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gtkh2Xaj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hpvq0onwodp6y6nmc1lh.png" alt="Console Completed Builds"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Code management&lt;/strong&gt;: Create unlimited files, tests and their versions. Code is auto saved and parsed. Every test run captures the state of code at the time of running. You can always see what code was used to run a test even if it ran a year ago.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Excellent documentation&lt;/strong&gt;: Zylitics documentation is one of the best knowledge source for testing you'd find on internet. There are tons of guides and examples that help you handle tricky use cases very easily. Have a look at &lt;a href="https://docs.zylitics.io/"&gt;Zylitics docs&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Forum and discord server&lt;/strong&gt;: Both of these are very actively monitored. If you've a question, it will be answered in no time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#writing-tests-in-zylitics"&gt;
  &lt;/a&gt;
  Writing tests in Zylitics
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ZWL&lt;/code&gt; is used at Zylitics for automating tests. It encourages simplicity while providing powerful language features such as various string, list and map manipulation methods to help with complex use cases. Let me show you an example test written in &lt;code&gt;ZWL&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Following &lt;code&gt;ZWL&lt;/code&gt; test verifies the basic functionality of &lt;em&gt;google calculator&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;openUrl&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'https://google.com'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# Find search box and type query&lt;/span&gt;
&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;findElement&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Search'&lt;/span&gt;, by.ariaLabel&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="s1"&gt;'calculator'&lt;/span&gt;, keys.enter&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# Find the calculator so that we can limit our further searches only within calculator panel.&lt;/span&gt;
calculator &lt;span class="o"&gt;=&lt;/span&gt; findElement&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'div[role="main"] div[data-async-context="query:calculator"] &amp;gt; :first-child'&lt;/span&gt;, by.cssSelector&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# Keep the calculator buttons we require to press.&lt;/span&gt;
btn9 &lt;span class="o"&gt;=&lt;/span&gt; findElementFromElement&lt;span class="o"&gt;(&lt;/span&gt;calculator, &lt;span class="s1"&gt;'9'&lt;/span&gt;, by.text&lt;span class="o"&gt;)&lt;/span&gt;
btnMul &lt;span class="o"&gt;=&lt;/span&gt; findElementFromElement&lt;span class="o"&gt;(&lt;/span&gt;calculator, &lt;span class="s1"&gt;'×'&lt;/span&gt;, by.text&lt;span class="o"&gt;)&lt;/span&gt;
btnDiv &lt;span class="o"&gt;=&lt;/span&gt; findElementFromElement&lt;span class="o"&gt;(&lt;/span&gt;calculator, &lt;span class="s1"&gt;'÷'&lt;/span&gt;, by.text&lt;span class="o"&gt;)&lt;/span&gt;
btnEq &lt;span class="o"&gt;=&lt;/span&gt; findElementFromElement&lt;span class="o"&gt;(&lt;/span&gt;calculator, &lt;span class="s1"&gt;'='&lt;/span&gt;, by.text&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# Keep the result element that shows calculation result.&lt;/span&gt;
resultEl &lt;span class="o"&gt;=&lt;/span&gt; findElementFromElement&lt;span class="o"&gt;(&lt;/span&gt;calculator, &lt;span class="s1"&gt;'presentation'&lt;/span&gt;, by.role&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Our first calculation is 9*9&lt;/span&gt;
clickAll&lt;span class="o"&gt;(&lt;/span&gt;btn9, btnMul, btn9, btnEq&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# Assert the result is 81&lt;/span&gt;
assertTrue&lt;span class="o"&gt;(&lt;/span&gt;81 &lt;span class="o"&gt;==&lt;/span&gt; getElementText&lt;span class="o"&gt;(&lt;/span&gt;resultEl&lt;span class="o"&gt;))&lt;/span&gt;

&lt;span class="c"&gt;# Our final calculation is to divide the result by 9 twice&lt;/span&gt;
clickAll&lt;span class="o"&gt;(&lt;/span&gt;btnDiv, btn9, btnDiv, btn9, btnEq&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# Assert the result is 1&lt;/span&gt;
assertTrue&lt;span class="o"&gt;(&lt;/span&gt;1 &lt;span class="o"&gt;==&lt;/span&gt; getElementText&lt;span class="o"&gt;(&lt;/span&gt;resultEl&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code is self explanatory. It's clean, easy to read and validates some functionality of google's in-search calculator.&lt;/p&gt;

&lt;p&gt;This is a very basic test. &lt;code&gt;ZWL&lt;/code&gt; supports hundreds of built-ins to support almost all use cases. To run this test, you don't need do anything special. With a few keystroke, your tests can be run on choice of OS and browser combination and you can live preview it as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-started-with-zylitics-video"&gt;
  &lt;/a&gt;
  Get started with Zylitics video
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ZOkpb-iYuGA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope you liked the idea of Zylitics and the way it simplifies testing. It is currently in private beta and access is free for everyone. Please request an invitation from &lt;a href="https://zylitics.io/"&gt;zylitics.io&lt;/a&gt; and give it a try.&lt;/p&gt;

&lt;p&gt;I will write a series of blog posts to further discuss how to write tests for various use cases in ZWL. Please follow to get further updates.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>My journey as a Google Developer Student Club Lead</title>
      <author>Amit Tomar</author>
      <pubDate>Sun, 11 Jul 2021 05:08:15 +0000</pubDate>
      <link>https://dev.to/amittomar/my-journey-as-a-google-developer-student-club-lead-3il1</link>
      <guid>https://dev.to/amittomar/my-journey-as-a-google-developer-student-club-lead-3il1</guid>
      <description>&lt;p&gt;I have recently completed my one-year tenure as a Google Developer Student Club Lead. And I chose to pen down my journey of establishing a club from 0 to make it a 500+ members club completely online and remotely.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mxyeASMy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxvm0wjv4hkhgx9n9r59.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mxyeASMy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxvm0wjv4hkhgx9n9r59.jpeg" alt="GDSC Lead Certificate"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So it all started in 2019, I was in 2nd year and I saw a couple of posts regarding the Developer Student Club lead selection. I searched about it on Google and learned that it is a club for students interested in Google technologies. As I already missed the deadline for India, I started preparing for the 2020 cohort. I worked on my interpersonal and gained some industry experience. &lt;/p&gt;

&lt;p&gt;I applied for DSC lead in 2020, I was selected for an interview and later I cleared that interview and finally became the first Google Developer Student Club Lead from my college. I was on cloud nine and it was like a dream come true for me. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aUL_ZeoL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwug9ce2in1tpdbxubyg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aUL_ZeoL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwug9ce2in1tpdbxubyg.jpg" alt="GDSC Selection mail"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I was onboarded and even got a cool welcome kit. View the unboxing video &lt;a href="https://www.youtube.com/watch?v=G6cSQxLqwCI&amp;amp;t=4s"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--et_PcNd2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4fio3pigjvv21nas5yb4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--et_PcNd2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4fio3pigjvv21nas5yb4.jpg" alt="GDSC Welcome kit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My first responsibility as a DSC lead was to form a team. Actually, we don’t have a developer community environment in our college. Students are more interested in grades and competitive coding. They are unaware of the advantage of being connected to a community. [Hopefully, things are changing now.]&lt;/p&gt;

&lt;p&gt;I started with team formation. I would like to thank Dhruv Sharma, my classmate and core team member of our club. He helped me throughout the whole process. We mailed to all the students of our college that we are looking for core team members and in 2-3 days, we received 300+ applications. We shortlisted 70 students for interviews and then selected 12 students for our core team. We had our first team call online where we discussed everyone’s responsibility, challenges, and goals.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EVRn8bkJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/da7beu6owmq6cssu1cbt.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EVRn8bkJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/da7beu6owmq6cssu1cbt.jpeg" alt="GDSC Team call"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our second task was to introduce everyone on our campus to the Club and its aim. Somehow we managed to organize an introductory session with the help of our college and team. Later we created WhatsApp groups and Slack channels to communicate with our community members. &lt;/p&gt;

&lt;p&gt;Initially, things were difficult for us because if you are managing a club in your campus physical then it is easy to communicate with the team and community members but running a club completely online is surely a difficult task. &lt;/p&gt;

&lt;p&gt;Somehow we managed everything at the right pace and we were all set to start our journey. Our first event was Explore ML, and we got 120+ registrations and 80+ attendees. Later we organized events on multiple topics like Open source, Android, Cloud computing, interview preparation, Flutter, Kotline, Community, Entrepreneurship, etc.&lt;/p&gt;

&lt;p&gt;We also hosted some giveaways to keep our community members engaged and most of our events had some goodies and swags as prizes. &lt;/p&gt;

&lt;p&gt;After one year’s hard work, some of our club’s statics are:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Total registered community members:&lt;/strong&gt; 584&lt;br&gt;
&lt;strong&gt;Total events organized:&lt;/strong&gt; 15&lt;br&gt;
&lt;strong&gt;Average event registrations:&lt;/strong&gt; 117&lt;/p&gt;

&lt;p&gt;On 27th July 2021, We organized our last event where we invited Mrs. Mekhla Mukherjee(Global Open source community leader, Wipro) and Mr. Snehanshu Gandhi(Founder &amp;amp; Director, Kaagaz Scanner). And I graduated as a Google Developer Student Club lead on 1st July with an online graduation ceremony. &lt;/p&gt;

&lt;p&gt;We managed every event and program completely online. There are some members in my team, I never met in person. Still, we managed all the things very well. That’s why I would like to give the whole credit to my awesome team for everything they have done. &lt;/p&gt;

&lt;p&gt;The program improved my communication, team management, and leadership skills. I made some new connections and learned a lot of new things. To know more about the program, visit &lt;a href="https://developers.google.com/community/dsc"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
