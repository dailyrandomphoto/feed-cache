<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to run nested tmux session</title>
      <author>Marcin Wosinek</author>
      <pubDate>Sat, 10 Jul 2021 09:44:47 +0000</pubDate>
      <link>https://dev.to/marcinwosinek/how-to-run-nested-tmux-session-464i</link>
      <guid>https://dev.to/marcinwosinek/how-to-run-nested-tmux-session-464i</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/tmux/tmux/wiki"&gt;tmux&lt;/a&gt; is a program that provides convenient way for getting multiple terminal sessions into one window. If you are using it a lot, quickly you can find yourself asking for more - multilevel tmux. Example of nested tmux session:&lt;/p&gt;


&lt;div class="ltag_asciinema"&gt;
  
&lt;/div&gt;


&lt;p&gt;There are 2 settings necessary for this set up to work as expected. Inside &lt;code&gt;~/.tmux.conf&lt;/code&gt; you need:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bind-key -n c-g send-prefix
bind-key -n c-t send-keys c-g
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;for prefix key access to nested windows. The default prefix is ctrl+b, so here I'm setting &lt;code&gt;ctrl+g&lt;/code&gt; to work as prefix on the second level of tmux, and &lt;code&gt;ctrl+t&lt;/code&gt; to work on the third level.&lt;/p&gt;

&lt;p&gt;Thanks to configuration like this, if you use &lt;code&gt;ctrl+b&lt;/code&gt; &amp;amp; &lt;code&gt;c&lt;/code&gt; to create a new window on the first level of tmux, you will use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;ctrl+g&lt;/code&gt; &amp;amp; &lt;code&gt;c&lt;/code&gt; - to create window on the second level&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ctrl+g&lt;/code&gt; &amp;amp; &lt;code&gt;c&lt;/code&gt; - to create window on the first&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The other setting is inside your &lt;code&gt;.zshrc&lt;/code&gt; or &lt;code&gt;.profile&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;unset TMUX
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we skip this, we will end up seeing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ tmux new -s test
sessions should be nested with care, unset $TMUX to force
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h1&gt;

&lt;p&gt;In this short guide we have seen how to set up our tmux to support nesting with minimal configuration &amp;amp; nice mapping for prefix key. Let me know in the comments if you are interested in more tmux or command line tips.&lt;/p&gt;

</description>
      <category>bash</category>
    </item>
    <item>
      <title>All about HTTPS (part-3)</title>
      <author>Akash Kumar Sikarwar</author>
      <pubDate>Sat, 10 Jul 2021 09:44:27 +0000</pubDate>
      <link>https://dev.to/akashkumarsikarwar/all-about-https-part-3-1pd7</link>
      <guid>https://dev.to/akashkumarsikarwar/all-about-https-part-3-1pd7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-handshake"&gt;
  &lt;/a&gt;
  The handshake
&lt;/h2&gt;

&lt;p&gt;In the &lt;a href="https://dev.to/akashkumarsikarwar/all-about-https-part-2-2hnd"&gt;prev post&lt;/a&gt;, we talked about two types of encryption keys algorithms. In this post, let me take you to the process of the handshake.&lt;/p&gt;

&lt;p&gt;When you started reading this article, your browser displayed a green lock in the address bar. How did that happen?&lt;/p&gt;

&lt;p&gt;Your browser communicated with dev.to server, where this post is hosted, and they both established a secure connection to transmit messages. &lt;br&gt;
But first, they needed to agree on how to communicate securely. If the negotiation is not successful, your browser lets you know by showing an error or warning. If an agreement is reached, your browser is happy to display a green padlock on the address bar. This process, the negotiation between a browser and a server, is called 'the handshake'. It happens very fast without any delay. Let me help you understand it step by step.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Client Hello. Your browser sends a list of SSL/TLS versions and encryption algorithms that it can work with to dev.to server. A fancy word for the encryption algorithm list is 'cipher suite'. And then your browser waits for an answer from dev.to server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Server Hello. Server chooses the best SSL/TLS version and encryption algorithm among the ones browser sent it, and based on its preferences. Server replies with its certificate, which includes its public key, so that it can verify who it is.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Client Key Exchange. Your browser checks server's certificate to make sure its legit. It generates a 'pre-master key' so they can both user it later when they generate a unique key. Browser encrypts that pre-master key with server's public key and sends it back to the server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; Change Cipher spec. Server uses its private key to decrypt the pre-master key. So far all the communication between them has been in open. They have not secured any messages. They used asymmetric keys (public and private keys) to encrypt the pre-master key so nobody could spy on it. Now they both generate the same 'shared secret' that they are going to use as a symmetric key. Browser sends a test an encrypted test message to which server responds saying everything is OK.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5:&lt;/strong&gt; Everything is now secured. Now all data going back and forth between your browser and dev.to server is now secured for the rest of the session. Passwords, credit card details(if any), everything.&lt;/p&gt;

&lt;p&gt;Simple right? Here is a diagram to help you understand this handshake better.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ck_Ei86g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8g8uwzk8htjncbo13tuj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ck_Ei86g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8g8uwzk8htjncbo13tuj.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;a href=""&gt;next post&lt;/a&gt;, we will try to understand the differences between the terms HTTPS, SSL and TLS we talked about earlier. &lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>beginners</category>
      <category>todayilearned</category>
      <category>https</category>
    </item>
    <item>
      <title>All about HTTPS (part-2)</title>
      <author>Akash Kumar Sikarwar</author>
      <pubDate>Sat, 10 Jul 2021 09:42:53 +0000</pubDate>
      <link>https://dev.to/akashkumarsikarwar/all-about-https-part-2-2hnd</link>
      <guid>https://dev.to/akashkumarsikarwar/all-about-https-part-2-2hnd</guid>
      <description>&lt;h2&gt;
  &lt;a href="#encryption-keys"&gt;
  &lt;/a&gt;
  Encryption Keys
&lt;/h2&gt;

&lt;p&gt;Welcome to the second post of the series on All about HTTPS.&lt;br&gt;
In the &lt;a href="https://dev.to/akashkumarsikarwar/all-about-https-part-1-4032"&gt;prev post&lt;/a&gt;, we talked about why do we need HTTPS connection. In this post we will talk about how the encryption keys work.&lt;/p&gt;

&lt;p&gt;HTTPS needs a way to provide privacy, integrity and identification on the web that we talked about last time by converting the plain text into some unreadable data. And that mechanism is called encryption. For that we have two types of encryption algorithms. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Symmetric key algorithm&lt;/strong&gt;&lt;br&gt;
In this scenario, there is only one type of key to encrypt and decrypt a message. Lets try to understand this by taking a simple example. Before sending the message to Bob, Alice encrypted the message with a key. You can think of the encryption process like putting the message in a box and locking the box with a key. Only the person that has a copy of the key can open the box and read the message.&lt;br&gt;
This guarantees that the box cannot be opened until it reaches the person with the right key. When Bob gets the box, he uses his key to open it and read the message. It's important that the key is kept private. You should not share the key in plain text, or send it with the box. Remember, anyone with the key can open the box. Using the box is a nice visual to understand encryption, but it's really oversimplifying it. In reality, anyone looking at the message without the key only sees nonsense text like below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aSbcOXv5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p3lahji7wn68e2yl9e2x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aSbcOXv5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p3lahji7wn68e2yl9e2x.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
To decrypt a message, we just need to apply the same steps, but in reverse order.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rq064LCd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/th71wtvhyhhnabqi98wp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rq064LCd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/th71wtvhyhhnabqi98wp.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The encryption key is mixed in with the message, so even if you know the encryption algorithm, without the key, the message is still nonsense. &lt;br&gt;
One main issue with symmetric keys is that they are hard to share. You have to be super careful with how you distribute the key. This brings us to the next topic of discussion asymmetric keys.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Asymmetric keys algorithm&lt;/strong&gt;&lt;br&gt;
This time instead of one like in symmetric, we have two keys. One key is public, the other one is private. They are paired and work together. Share your public key with anyone. Send it in plain text, make stickers, tattoos. Anything you want! It's public!. Alice is sending his public key to Bob and now Bob is sending a message back to Alice encrypting it with Alice's public key. In other words, Bob puts the message in a box and locks it with Alice's public key. Bob can now use his private key to read the message. That's the main idea. Only the private key can open a box locked with the public key pair. Alice uses Bob's public key to send him another message. This is great not only for privacy, but also for identification since we know for sure that only the owner of the 2 keys can open the message.&lt;/p&gt;

&lt;p&gt;Next, we'll be looking at how symmetric and asymmetric keys play a role when we connect to a site with SSL. See you in the &lt;a href=""&gt;next post&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>beginners</category>
      <category>todayilearned</category>
      <category>encryption</category>
    </item>
    <item>
      <title>All about HTTPS (part-1)</title>
      <author>Akash Kumar Sikarwar</author>
      <pubDate>Sat, 10 Jul 2021 09:41:12 +0000</pubDate>
      <link>https://dev.to/akashkumarsikarwar/all-about-https-part-1-4032</link>
      <guid>https://dev.to/akashkumarsikarwar/all-about-https-part-1-4032</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-do-we-even-need-https-protocol"&gt;
  &lt;/a&gt;
  Why do we even need HTTPS protocol?
&lt;/h2&gt;

&lt;p&gt;When you arrived at this post, do you see any green pad lock on your address bar of the browser just in front of dev.to? Let me tell you what is it and why is it there?&lt;/p&gt;

&lt;p&gt;This green lock represents that the site is using HTTPS as its protocol and is relatively more secure than when it is not there.&lt;/p&gt;

&lt;p&gt;We need HTTPS for mainly three reasons:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Privacy&lt;/strong&gt;&lt;br&gt;
Lets talk about Privacy first. Lets say we have three people Alice, Bob and Candice. Alice is trying to send messages to Bob and the message is not encrypted meaning plain text. If we don't have HTTPS an evil person like Candice who is jealous of their friendship can listen on the communication and also can capture the messages potentially for doing evil things. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mZg0o4MV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wlm1i0k4b89nyyrx77kx.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mZg0o4MV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wlm1i0k4b89nyyrx77kx.gif" alt="privacy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Privacy means that no one can eavesdrop on your messages. The green padlock on the URL bar of our browser tells us that there is no one watching over our shoulder. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Integrity&lt;/strong&gt;&lt;br&gt;
Second comes Integrity. Lets suppose when Alice sends another message to Bob unencrypted saying some nice words, but before it reaches Bob Candice intercepts the message and updates it with bad words about Bob and forwards to him, ruining their friendship. This is called man-in-the-middle attack. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H99kLj9Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6u8t90fd7jw2km55n52.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H99kLj9Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6u8t90fd7jw2km55n52.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Integrity means that the message is not manipulated on the way to its destination. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Identification&lt;/strong&gt;&lt;br&gt;
Lets take the same example from above. Identification means that Bob can check that this message is indeed coming from Alice. A digital signature attached to a message can identify the sender. And when you are browsing the web, identification means that the site that you are visiting is indeed the one you think it is.&lt;br&gt;
 HTTPS, via SSL certificates, ensures you are connected exactly with the receiver you would expect. This SSL certificate is valid and has been issued by a legitimate Certificate Authority. You are good to go.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KDKwi-3R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pfnv0ye0h8p748pbx8a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KDKwi-3R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pfnv0ye0h8p748pbx8a.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we know the why, the &lt;a href="https://dev.to/akashkumarsikarwar/all-about-https-part-2-2hnd"&gt;next step&lt;/a&gt; is to understand symmetric and asymmetric encryption.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>beginners</category>
      <category>todayilearned</category>
      <category>learning</category>
    </item>
    <item>
      <title>Why I hung up my Stethoscope and became a Web Developer</title>
      <author>Simona Winnekes</author>
      <pubDate>Sat, 10 Jul 2021 09:31:40 +0000</pubDate>
      <link>https://dev.to/winnekes/why-i-hung-up-my-stethoscope-and-became-a-web-developer-oa6</link>
      <guid>https://dev.to/winnekes/why-i-hung-up-my-stethoscope-and-became-a-web-developer-oa6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hello-there"&gt;
  &lt;/a&gt;
  👋 Hello there.
&lt;/h2&gt;

&lt;p&gt;I'm Simona, a German web developer living in Amsterdam. I'm crazy about all things full-stack: &lt;strong&gt;front end&lt;/strong&gt;, &lt;strong&gt;back end&lt;/strong&gt; and recently &lt;strong&gt;devops&lt;/strong&gt; as well.&lt;/p&gt;

&lt;p&gt;This is quite a recent development. However, my journey started differently.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#once-upon-a-time-i-was-"&gt;
  &lt;/a&gt;
  🩺 Once upon a time I was ...
&lt;/h2&gt;

&lt;p&gt;... a nurse. Yes, I know. "How did that happen?"&lt;br&gt;
This is a question I'm happy to answer everyone who asks.&lt;/p&gt;

&lt;p&gt;I only ever had &lt;strong&gt;two&lt;/strong&gt; lifelong dreams:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;be a heart surgeon 🫀&lt;/li&gt;
&lt;li&gt;build a robot 🤖&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hit my first roadblock very soon after school; my father was diagnosed with lung cancer. My mother had been battling illnesses for a while as well so I had to adjust my road map a bit.&lt;br&gt;
Instead of studying medicine I decided to go for a medicine-adjacent career before switching tracks back to medicine - I would be earning money and knowledge from day 1 instead of spending several years at university.&lt;/p&gt;

&lt;p&gt;As a nurse I was able to care for my father and the family. I graduated from nursing school back in 2015 and became a cardiac nurse.&lt;/p&gt;

&lt;p&gt;It was an amazing time: working with great and intelligent colleagues, while also learning from and teaching doctors. I enjoyed the thrill of saving lives, given that we were a high risk ward for cardiac arrests, blockages and many, many other heart related problems. Often there was nothing better than a cold beer (or several) at 7 in the morning at the local hospital bar after a particularly rough night shift.&lt;/p&gt;

&lt;p&gt;I climbed ranks quickly, I became an official student mentor, came up with safety programs, and towards the end of my nursing career I was one of the youngest head nurses of the cardiac wing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-did-i-ditch-my-scrubs-for-slacks-though"&gt;
  &lt;/a&gt;
  🤔 Why did I ditch my scrubs for slacks though?
&lt;/h2&gt;

&lt;p&gt;Burnout is real, and a serious problem in the medical world. &lt;/p&gt;

&lt;p&gt;I believed I would thrive as head nurse of cardiology - I mean, I was young and had already achieved so much in just 3 years. I thought I knew what the role would entail, and it seemed quite doable to me.&lt;/p&gt;

&lt;p&gt;But it came with many downsides that I soon discovered, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Zero work-life balance.&lt;/strong&gt; I often worked 12-14 days in a row with all kinds of shifts intermixed in that time frame, with only 1-2 days of breaks in between. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Increasing amounts of responsibility and unfulfilled promises&lt;/strong&gt;. The job was supposed to come with two second-in-commands to delegate various tasks to. Unfortunately we were understaffed and overbooked, and I had no assistance during my time as the head nurse.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Everyone was miserable.&lt;/strong&gt; My colleagues, doctors, patients — it was such a negative and borderline toxic environment, you always took the misery home with you.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My boyfriend, a lifelong developer, was not happy that I was not happy. Back then we were in a long-distance relationship and he kept urging me to switch careers.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Become a developer, you will love it! I think it's something you'd be great at!"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I didn't quite believe him then as I couldn't even think of leaving the world of health care, I still had so much passion for medicine, nursing and cardiology.&lt;/p&gt;

&lt;p&gt;But towards the end of 2018 I had to take sick leave for a week to recoup after a particular rough patch. That &lt;strong&gt;week&lt;/strong&gt; turned into &lt;strong&gt;three months&lt;/strong&gt; of trying to get over the severe burnout I was going through. I never returned back to that role, or that hospital.&lt;/p&gt;




&lt;p&gt;As a nurse, I found myself sleeping when I wasn't working with no time for my hobbies. I wanted to focus back on them.&lt;/p&gt;

&lt;p&gt;Coding was one of those hobbies — or should I rather say "coding". When I was about 12 years old I joined the computer club at my school and learned how to build small, blinking and loud websites with HTML and CSS. I was hooked.&lt;/p&gt;

&lt;p&gt;A bit later I read all of the Lord of the Rings series and a few friends and I thought it would be super cool to learn Sindarin, the Elven language made up by Tolkien. Unfortunately all resources on the subject were only available in English, and my friends spoke only German. I had the idea of creating a dictionary and lecture platform, &lt;strong&gt;German &amp;lt;&amp;gt; Sindarin&lt;/strong&gt;. HTML and CSS wouldn't be enough. I had to store the translations and lectures, and more importantly allow searching for words in the dictionary. I learnt PHP and MySQL, the most popular and easiest combination back then to do this, especially in Germany.&lt;/p&gt;

&lt;p&gt;I decided to dust off my coding boots, and get back on the road. I started learning some Python and refreshing my HTML skills, but found it a big hill to climb by myself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#moving-to-amsterdam-surviving-a-coding-bootcamp-and-getting-my-first-job"&gt;
  &lt;/a&gt;
  💡 Moving to Amsterdam, surviving a coding bootcamp and getting my first job
&lt;/h2&gt;

&lt;p&gt;Fast forward to the end of 2019. My boyfriend had moved to Amsterdam some time before that and it was the perfect time to bridge the distance and move to Amsterdam.&lt;br&gt;
I was thinking of being a nurse here as well, but to be a nurse in the Netherlands, I would have to re-qualify, and also be a proficient speaker in Dutch. This would take some time, and I kind of needed a change as well for my mental health, so I started weighing my options. My boyfriend heavily suggested I give up being a nurse and switch to development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Studying computer science for several years was not an option for me. I wanted a job as soon as possible as I already had work experience of nearly 8 years.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;coding bootcamp&lt;/strong&gt; was the answer for me and I believe it is also the future of web development education. During the time it would take to get back to the role I'd just burnt out from, I could switch careers to a hobby I'd started to enjoy again. I interviewed with quite a few bootcamps in Amsterdam and eventually decided to accept the offer at &lt;a href="https://codaisseur.com"&gt;Codaisseur&lt;/a&gt; for their intensive 11-week full-stack web development course. &lt;/p&gt;

&lt;p&gt;It was the &lt;strong&gt;best decision&lt;/strong&gt; I had made in a very long time.&lt;/p&gt;

&lt;p&gt;I found my first job as a full-stack developer in March 2020 (within two months of graduating from the bootcamp), and guess what: &lt;/p&gt;

&lt;p&gt;I joined a health care company that provides a platform for freelance nurses to choose where they want to work! &lt;br&gt;
Talk about &lt;strong&gt;a&lt;/strong&gt; &lt;strong&gt;match made in heaven&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-now"&gt;
  &lt;/a&gt;
  📝 What now
&lt;/h2&gt;

&lt;p&gt;That is it for my introduction, more posts will follow soon!&lt;/p&gt;

&lt;p&gt;I will be talking more about my career switch, my experience with bootcamps, everything about my first job as a developer (and how to get one if you don't come from an academic background) in this blog series &lt;strong&gt;From Scrubs to Slacks&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But I will not only talk of career-related topics but also provide tutorials, tips and tricks around web development.&lt;/p&gt;

&lt;p&gt;I have taken so much knowledge and help from the dev community, it is time to start giving back. ✌️&lt;/p&gt;

&lt;p&gt;One more thing:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I'm building my frickin' robot!&lt;/strong&gt; 🤖&lt;/p&gt;

&lt;p&gt;More on that project in the next coming weeks here on Hashnode and other platforms (see below).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  🔗 Let's connect!
&lt;/h2&gt;

&lt;p&gt;Starting my career as a developer during Covid has been a lonely time — I look forward to joining the Hashnode community and connecting with fellow code enthusiasts. &lt;/p&gt;

&lt;p&gt;And if you know someone in a similar situation — wanting to switch careers to development but not knowing where and how to start — please point them in my direction!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/winnekes"&gt;Github&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://linkedin.com/in/winnekes"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://instagram.com/robotsandcats"&gt;Instagram&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>career</category>
      <category>webdev</category>
      <category>bootcamp</category>
    </item>
    <item>
      <title>📗 Object Behavioural: Strategy</title>
      <author>Jokerwolf</author>
      <pubDate>Sat, 10 Jul 2021 09:28:13 +0000</pubDate>
      <link>https://dev.to/jokerwolf/object-behavioral-strategy-1c3l</link>
      <guid>https://dev.to/jokerwolf/object-behavioral-strategy-1c3l</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR;
&lt;/h2&gt;

&lt;p&gt;Use this pattern if you have multiple similar classes, which differ in some logic implementation; your code contains if-else's to determine a proper algorithm to use.&lt;br&gt;
&lt;em&gt;Second pattern in a row targets to eliminate if-else's where possible - nice.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#definition"&gt;
  &lt;/a&gt;
  Definition
&lt;/h2&gt;

&lt;p&gt;Strategy pattern allows separating algorithms from the clients using them.&lt;/p&gt;

&lt;p&gt;Here is a formal diagram:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fZSIm220--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20czcbuk75kqpskb5dw5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fZSIm220--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/20czcbuk75kqpskb5dw5.png" alt="UML diagram of Strategy pattern"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have an object of type &lt;em&gt;Context&lt;/em&gt;, which holds a reference to an &lt;em&gt;IStrategy&lt;/em&gt; object. &lt;em&gt;Context&lt;/em&gt; passes some work to this &lt;em&gt;IStrategy&lt;/em&gt; object.&lt;/p&gt;

&lt;p&gt;Sounds pretty much the same as &lt;a href=""&gt;State Pattern&lt;/a&gt;, but the strategy is set once at the &lt;em&gt;Context&lt;/em&gt; instantiating time (while &lt;em&gt;state&lt;/em&gt; is changing after &lt;em&gt;Context&lt;/em&gt; is instantiated).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;Let's write some code.&lt;br&gt;
We still have a &lt;em&gt;Player&lt;/em&gt;, but this time we're more interested in its codecs.&lt;br&gt;
So we would end up with something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Player&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;paramA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;paramB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;paramC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;codecType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AlgorithmType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Setting up params&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;play&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;algorithm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAlgorithm&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;algorithm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;decodeA&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;B&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;decodeB&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;C&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;decodeC&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Play&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;getAlgorithm&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;AlgorithmType&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Some logic happens here to determine appropriate algorithm.&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;codecType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;decodeA&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;Stream&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Actual algorithm to decode the stream in some way&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Decoding with A&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;paramA&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;decodeB&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;Stream&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Actual algorithm to decode the stream in some way&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Decoding with B&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;paramB&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;decodeC&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;Stream&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Actual algorithm to decode the stream in some way&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Decoding with C&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;paramC&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have all different ways of decoding a stream inside the &lt;em&gt;Player&lt;/em&gt; class. We have a switch statement to determine which particular algorithm we should use. Not that bad right now, but imagine a real life situation where &lt;em&gt;decode&lt;/em&gt; functions could contain tens of lines of code.&lt;/p&gt;

&lt;p&gt;What &lt;em&gt;Strategy&lt;/em&gt; suggests is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create an interface to describe the strategy class &lt;/li&gt;
&lt;li&gt;move each decoding algorithm into a standalone strategy class&lt;/li&gt;
&lt;li&gt;add a reference to the particular instance to you &lt;em&gt;Player&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, let's do all these with one small change: let's not create a class for each algorithm. Look at this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Strategy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DecodeContext&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;StrategyA&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;Strategy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DecodeContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// implementation&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're in the TypeScript (JavaScript) world, functions are the first class citizens, we can pass them everywhere, we don't need to create a class just to have one function in it.&lt;/p&gt;

&lt;p&gt;So this is what our pattern implementation might look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Player&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;paramA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;paramB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;paramC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Decode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Setting up params&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;play&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;paramA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;paramB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;paramC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Play&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And all decoding algorithms now live in their own functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decodeA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Decode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;DecodeContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Actual algorithm to decode the stream in some way&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Decoding with A&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decodeB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Decode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;DecodeContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Actual algorithm to decode the stream in some way&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Decoding with B&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decodeC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Decode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Stream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;DecodeContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Actual algorithm to decode the stream in some way&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Decoding with C&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-will-it-cost"&gt;
  &lt;/a&gt;
  What will it cost?
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Potential Cons:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We might increase the number of files, which some might consider a bad thing&lt;/li&gt;
&lt;li&gt;As we define the &lt;em&gt;Decode&lt;/em&gt; interface for every algorithm we're passing all the params each algorithm might need. Less then ideal&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Potential Pros:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We got rid of the &lt;em&gt;switch&lt;/em&gt; statement&lt;/li&gt;
&lt;li&gt;We separated concerns by moving algorithms implementations outside the &lt;em&gt;Player&lt;/em&gt; class&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I do like separating concerns and avoiding conditionals when possible, so this pattern seems really useful to me so far.&lt;/p&gt;

&lt;p&gt;Hope this was a bit helpful 🙃&lt;br&gt;
&lt;a href="https://github.com/Jokerwolf/design-patterns-study"&gt;Source code if needed&lt;/a&gt;&lt;/p&gt;

</description>
      <category>designpatterns</category>
    </item>
    <item>
      <title>I launched a Developer YouTube Channel 🎉</title>
      <author>Shaan Alam</author>
      <pubDate>Sat, 10 Jul 2021 09:27:18 +0000</pubDate>
      <link>https://dev.to/shaan71845/i-launched-a-developer-youtube-channel-1h5f</link>
      <guid>https://dev.to/shaan71845/i-launched-a-developer-youtube-channel-1h5f</guid>
      <description>&lt;p&gt;Hey guys, &lt;br&gt;
I am here to tell you guys that I have launched a new Developer YouTube Channel where I will document my process of learning Web Development and creating Projects. My channel's name is &lt;strong&gt;shaancodes&lt;/strong&gt;. Check out my New video!!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/5c0fPsFpZ2g"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Link to the channel - &lt;a href="https://www.youtube.com/channel/UC9eR4oVH9IWR8SVvrw61Cog"&gt;https://www.youtube.com/channel/UC9eR4oVH9IWR8SVvrw61Cog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you guys!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Go regular expressions</title>
      <author>Alain Viguier</author>
      <pubDate>Sat, 10 Jul 2021 09:14:17 +0000</pubDate>
      <link>https://dev.to/dandyvica/go-regular-expressions-53dn</link>
      <guid>https://dev.to/dandyvica/go-regular-expressions-53dn</guid>
      <description>&lt;p&gt;This time, I wanted to tackle the regular expression package in Go. In one of my recent projects, I had to use this library. But I have to confess it's not straightforward at first sight. I hope this article will unravel this feature.&lt;/p&gt;

&lt;p&gt;To use the library (&lt;a href="https://golang.org/pkg/regexp/"&gt;https://golang.org/pkg/regexp/&lt;/a&gt;), just add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="s"&gt;"regexp"&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to your code.&lt;/p&gt;

&lt;p&gt;Following is a collection of tips for solving a specific problem. Throughout the following examples, I used the &lt;em&gt;assert&lt;/em&gt; Go package to make it easier to understand.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#compiling-the-regular-expression"&gt;
  &lt;/a&gt;
  Compiling the regular expression
&lt;/h2&gt;

&lt;p&gt;Before anything, you need to compile your regular expression before using any package function. You can use &lt;strong&gt;Compile()&lt;/strong&gt; or &lt;strong&gt;MustCompile()&lt;/strong&gt;. The difference between them is that the latter panics whenever an error is found compiling the regex but the former doesn't. If your code doesn't involve a regex provided at runtime, it's safer to use &lt;em&gt;MustCompile()&lt;/em&gt; as you know immedialty whether your regex syntax is correct.&lt;/p&gt;

&lt;p&gt;Note that the &lt;em&gt;Posix()&lt;/em&gt; versions require a Posix regex rather than a &lt;em&gt;Perl-like&lt;/em&gt; regular expression.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-my-string-matching-the-regexp-"&gt;
  &lt;/a&gt;
  Is my string matching the regexp ?
&lt;/h2&gt;

&lt;p&gt;To just check whether a string is matching your regex, you can use two different functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// don't worry, fake phone number&lt;/span&gt;
&lt;span class="n"&gt;phone&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"202-555-0147"&lt;/span&gt;
&lt;span class="n"&gt;phoneRE&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;`\d{3}\-\d{3}\-\d{4}`&lt;/span&gt;

&lt;span class="c"&gt;// returns: true &amp;lt;nil&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;matched&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;regexp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MatchString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phoneRE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;True&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matched&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Nil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;// or compile and test&lt;/span&gt;
&lt;span class="n"&gt;re&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;regexp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MustCompile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phoneRE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;True&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MatchString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c"&gt;// but this returns true as well!&lt;/span&gt;
&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;True&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MatchString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"202-555-0147mkljhfQDHMFJ"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c"&gt;// but not this&lt;/span&gt;
&lt;span class="n"&gt;re&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;regexp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MustCompile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;`\d{3}\-\d{3}\-\d{4}$`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;False&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MatchString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"202-555-0147mkljhfQDHMFJ"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Beware that the string &lt;code&gt;202-555-0147mkljhfQDHMFJ&lt;/code&gt; is matched using the first regex. The explanation is given is the &lt;em&gt;Compile()&lt;/em&gt; definition and by the term &lt;em&gt;leftmost&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;When matching against text, the regexp returns a match that begins as early as possible in the input (leftmost), and among those it chooses the one that a backtracking search would have found first. This so-called leftmost-first matching is the same semantics that Perl, Python, and other implementations use, although this package implements it without the expense of backtracking. 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can influence this behavior with the &lt;em&gt;Longest()&lt;/em&gt; function.&lt;/p&gt;

&lt;p&gt;It's wiser to use &lt;em&gt;MustCompile()&lt;/em&gt; or &lt;em&gt;Compile()&lt;/em&gt; if you have to reuse your regex to just compile it once.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-capture-groups"&gt;
  &lt;/a&gt;
  Using capture groups
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Capture groups&lt;/em&gt; are called &lt;em&gt;Submatches&lt;/em&gt; in the regexp package. You get access to capture groups using on &lt;em&gt;FindStringSubmatch()&lt;/em&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// use capture groups&lt;/span&gt;
&lt;span class="n"&gt;phoneRECaps&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;`(\d{3})\-(\d{3})\-(\d{4})$`&lt;/span&gt;
&lt;span class="n"&gt;re&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;regexp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MustCompile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phoneRECaps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;// caps is a slice of strings, where caps[0] matches the whole match&lt;/span&gt;
&lt;span class="c"&gt;// caps[1] == "202" etc&lt;/span&gt;
&lt;span class="n"&gt;matches&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FindStringSubmatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;// print out: there're 3 capture groups&lt;/span&gt;
&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NumSubexp&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;"202-555-0147"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;"202"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;"555"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;"0147"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ElementsMatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"202-555-0147"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"202"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"555"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"0147"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-named-capture-groups"&gt;
  &lt;/a&gt;
  Using named capture groups
&lt;/h2&gt;

&lt;p&gt;To fully benefit from the Python-like &lt;em&gt;named capture groups&lt;/em&gt;, you can't have a direct access to the value of the submatch for a particular name. You only have an indirect and unwieldy access: first get all names, the get the corresponding index for that name and then fetch the capture group string:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// use named capture groups&lt;/span&gt;
&lt;span class="n"&gt;phoneRENamedCaps&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;`(?P&amp;lt;area&amp;gt;\d{3})\-(?P&amp;lt;exchange&amp;gt;\d{3})\-(?P&amp;lt;line&amp;gt;\d{4})$`&lt;/span&gt;
&lt;span class="n"&gt;re&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;regexp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MustCompile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phoneRENamedCaps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;// print out: [ area exchange line], not that the first element is the empty string&lt;/span&gt;
&lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SubexpNames&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ElementsMatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"area"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"exchange"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"line"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c"&gt;// // indirect access to names&lt;/span&gt;
&lt;span class="n"&gt;matches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FindStringSubmatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;capName&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="n"&gt;nameIndex&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SubexpIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;capName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nameIndex&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;"202"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;capName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="n"&gt;nameIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SubexpIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;capName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nameIndex&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;"555"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;capName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="n"&gt;nameIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SubexpIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;capName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nameIndex&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;"0147"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#splitting-a-string"&gt;
  &lt;/a&gt;
  Splitting a string
&lt;/h2&gt;

&lt;p&gt;It might be useful sometimes to split a string delimited with characters matching a regexp:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;csv&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"a;b;c;;;;d;e;f;;;g"&lt;/span&gt;

&lt;span class="n"&gt;split1&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;regexp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MustCompile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;";"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;split2&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;regexp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MustCompile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;";*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ElementsMatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"e"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"f"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"g"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ElementsMatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"e"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"f"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"g"&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#replacing-strings"&gt;
  &lt;/a&gt;
  Replacing strings
&lt;/h2&gt;

&lt;p&gt;You can replace strings by providing a template made of references to a matched capture group. You can use &lt;em&gt;$1&lt;/em&gt; (or &lt;em&gt;${1}&lt;/em&gt;) to refer to the first submatch, &lt;em&gt;$2&lt;/em&gt; for the second etc:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;csv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"a;b;c;;;;d;e;f;;;g"&lt;/span&gt;

&lt;span class="n"&gt;split&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;regexp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MustCompile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"(;+)"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;// prints: "a;b;c;d;e;f;g"&lt;/span&gt;
&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReplaceAllString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;";"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"a;b;c;d;e;f;g"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;digits&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"0123456789"&lt;/span&gt;
&lt;span class="n"&gt;digitsRe&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;regexp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MustCompile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;`(\d)`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digitsRe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReplaceAllString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"$10$9$8$7$6$5$4$3$2$1"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"9876543210"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use names instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// using names rather than indexes&lt;/span&gt;
&lt;span class="n"&gt;digitsRe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;regexp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MustCompile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;`(?P&amp;lt;zero&amp;gt;\d)(?P&amp;lt;one&amp;gt;\d)(?P&amp;lt;two&amp;gt;\d)(?P&amp;lt;three&amp;gt;\d)(?P&amp;lt;four&amp;gt;\d)(?P&amp;lt;five&amp;gt;\d)(?P&amp;lt;six&amp;gt;\d)(?P&amp;lt;seven&amp;gt;\d)(?P&amp;lt;eight&amp;gt;\d)(?P&amp;lt;nine&amp;gt;\d)`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;digitsRe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReplaceAllString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"nine=${nine}, eight=${eight}, seven=${seven}, six=${six}, five=${five}, four=${four}, three=${three}, two=${two}, one=${one}, zero=${zero}"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s"&gt;"nine=9, eight=8, seven=7, six=6, five=5, four=4, three=3, two=2, one=1, zero=0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hope this helps !&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@rocinante_11?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Mick Haupt&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/numbers?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>go</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Module 8 - Making apps with Grid </title>
      <author>Dominik Gorczyca</author>
      <pubDate>Sat, 10 Jul 2021 08:42:22 +0000</pubDate>
      <link>https://dev.to/dgx32123/module-8-making-apps-with-grid-511c</link>
      <guid>https://dev.to/dgx32123/module-8-making-apps-with-grid-511c</guid>
      <description>&lt;p&gt;&lt;a href="https://scrimba.com/learn/frontend"&gt;&lt;strong&gt;Module 8&lt;/strong&gt;&lt;/a&gt; is completed and time to share my experience!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First Part&lt;/strong&gt; is to remind how to use flexbox and its many properties, nearly everything was covered and it ended with making a simple flexbox card (which thanks to &lt;em&gt;interactive code&lt;/em&gt; you can do fully yourself!).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vk7sTfts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r93k62x3ufjly79egxk5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vk7sTfts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r93k62x3ufjly79egxk5.png" alt="Scrimba interactive Flexbox card"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second Part&lt;/strong&gt; was about using flexbox and various APIs at once to solidify your skills. In this part you will see how 4 different websites are done and with every website you will have a challenge to make it better. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0CZgZqcS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2a6nq6v7zsvmyi9m8xvm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0CZgZqcS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2a6nq6v7zsvmyi9m8xvm.png" alt="Scrimba Interactive Hex API note"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Third Part&lt;/strong&gt;, just as the first one was made by a great teacher, &lt;a href="https://www.youtube.com/channel/UCJZv4d5rbIKd4QHMPkcABCw"&gt;Kevin Powell&lt;/a&gt;. Finally we learn about Grid. This part covers most properties, gives great explanation to how even more complicated properties like auto-fill work and gives you an easy opportunity to play with them. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Forth Part&lt;/strong&gt;, which is also the last one repeats the pattern of joining new layout tool with various APIs. You get another 5 websites built and you need to use both grid and your async skills to improve the website. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gGqtGmLo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/umzfs40vwzo68kvvdl19.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gGqtGmLo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/umzfs40vwzo68kvvdl19.png" alt="Scrimba Pokedex Website code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This module is nice to get started with Grid, refresh your API skills and you could even learn flexbox quite well if you didn't know how to use it before (I would still advise you to learn from &lt;a href="https://dev.to/dgx32123/responsive-design-338g"&gt;Module 5&lt;/a&gt; if you want to learn it solidly).&lt;br&gt;&lt;br&gt;
Despite many challenges, it's still &lt;strong&gt;not enough&lt;/strong&gt; to really make it stick so further practice is essential. If you want to know even more about Grid check out Complete Guide to Grid on &lt;a href="https://css-tricks.com/snippets/css/complete-guide-grid/"&gt;CSS-Tricks&lt;/a&gt; or very popular &lt;a href="https://dev.to/mustapha/css-grid-illustrated-introduction-52l5"&gt;Dev Post&lt;/a&gt; and make a cool website! &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>scrimba</category>
    </item>
    <item>
      <title>10 Tips for Creating a Product on Your Own - Building Keepsake</title>
      <author>Kenzo Castañeda</author>
      <pubDate>Sat, 10 Jul 2021 07:54:27 +0000</pubDate>
      <link>https://dev.to/kenzojrc/10-tips-for-creating-a-product-on-your-own-building-keepsake-22k1</link>
      <guid>https://dev.to/kenzojrc/10-tips-for-creating-a-product-on-your-own-building-keepsake-22k1</guid>
      <description>&lt;p&gt;Hey there! Kenzo here. &lt;/p&gt;

&lt;p&gt;This is the first of &lt;em&gt;hopefully&lt;/em&gt; many articles on my product-building journey with &lt;a href="https://keepsa.ke"&gt;Keepsake&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's start with its origin story.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-story-behind-keepsake"&gt;
  &lt;/a&gt;
  The Story Behind Keepsake
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;March 2020&lt;/em&gt; - it was the start of the pandemic. Newly minted bakers, &lt;a href="https://news.abs-cbn.com/life/09/21/20/plantito-plantita-filipinos-turn-to-plants-to-cope-with-coronavirus-pandemic"&gt;&lt;em&gt;plantitos and plantitas&lt;/em&gt;&lt;/a&gt;, coffee enthusiasts, TikTok dancers, and content creators have just begun their humble journeys during what would be the longest lockdown in the world. &lt;/p&gt;

&lt;p&gt;So like everyone else, I tried to make myself productive as a distraction from all the chaos happening around me. I figured, why not learn &lt;em&gt;&lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;&lt;/em&gt;? It's always been on my "To Learn" list but I never found the time. Well, there really was no silver lining to the pandemic, but we ended up with a lot of time stuck at home, so I tried to &lt;em&gt;"make the most out of it."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Personally, I learn most effectively when I work on an actual project, so I thought of things that would be &lt;strong&gt;simple enough&lt;/strong&gt; to build but at the same time be something &lt;strong&gt;I'd personally use&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;We're all looking forward to better days in a pandemic like this, so the idea started with &lt;em&gt;mementos&lt;/em&gt; that would make people smile and look back at the good in life. In high school, we had a day called &lt;em&gt;friendship day&lt;/em&gt; where we'd write each other physical letters as tokens of friendship. I still have all of the letters I got tucked safely in an envelope. When I feel a bit down or sentimental, reading them never fails to lighten my mood.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5CIu_gp5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ws1pbddtobidyt8um9y8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5CIu_gp5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ws1pbddtobidyt8um9y8.jpg" alt="My envelope of letters"&gt;&lt;/a&gt;My envelope of letters&lt;/p&gt;

&lt;p&gt;So I thought of bringing that experience back &lt;em&gt;virtually&lt;/em&gt; and making it a more regular thing, especially in these trying times. You may be thinking... can't we just send an email directly? Sure, nothing's stopping you from sending a meaningful &amp;amp; long message through email, your favorite messaging app, or even by hand, but really (and sadly), who does that nowadays? There was no platform dedicated to &lt;em&gt;meaningful letters&lt;/em&gt; yet, so I built one. &lt;/p&gt;

&lt;p&gt;I'm a fan of one-word URLs, but the tricky part is finding a fitting domain. Memen.to wasn't available so I thought of synonyms. Luckily, &lt;a href="http://keepsa.ke"&gt;keepsa.ke&lt;/a&gt; was available, and that's how Keepsake was born 👶&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#should-you-build-a-product"&gt;
  &lt;/a&gt;
  Should You Build a Product?
&lt;/h2&gt;

&lt;p&gt;Now let's get to the product-building part. Keep in mind I'm writing in the context of building &lt;em&gt;digital&lt;/em&gt; products (ex. SaaS).&lt;/p&gt;

&lt;p&gt;Creating a product is &lt;strong&gt;hard&lt;/strong&gt;. Creating and launching a product on your own is even harder. I bet you've heard this a lot already, but let me reiterate: &lt;strong&gt;&lt;em&gt;you have to wear many hats&lt;/em&gt;&lt;/strong&gt; 🤠&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;🧠 &lt;strong&gt;Product Manager.&lt;/strong&gt; What's your product's vision? What features will you prioritize?&lt;/li&gt;
&lt;li&gt;🎨 &lt;strong&gt;UX/UI Designer.&lt;/strong&gt; What's your product going to look and feel like? How is it going to work?&lt;/li&gt;
&lt;li&gt;🖼 &lt;strong&gt;Front-end Engineer.&lt;/strong&gt; How will you implement the interface of your product?&lt;/li&gt;
&lt;li&gt;🛠 &lt;strong&gt;Back-end Engineer.&lt;/strong&gt; How will you implement all the logic happening behind the scenes?&lt;/li&gt;
&lt;li&gt;💾 &lt;strong&gt;Database Engineer.&lt;/strong&gt; How will you store, organize, and fetch data efficiently?&lt;/li&gt;
&lt;li&gt;💥 &lt;strong&gt;QA/Test Engineer.&lt;/strong&gt; How will you make sure your product is reliable?&lt;/li&gt;
&lt;li&gt;☁ &lt;strong&gt;Cloud Engineer.&lt;/strong&gt; How will you deploy your product and make sure it scales?&lt;/li&gt;
&lt;li&gt;😸 &lt;strong&gt;Marketing Manager.&lt;/strong&gt; How will you get users &amp;amp; customers? What's your messaging?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you don't go crazy while building it on your own, then congrats! It's definitely worth it in the end, and without a doubt, you will gain important skills in each function above (and more).&lt;/p&gt;

&lt;p&gt;Behind Keepsake is more or less &lt;em&gt;a&lt;/em&gt; &lt;em&gt;thousand hours&lt;/em&gt; made up of research, design, development, and lots of frustration in between. After my day job, I'd work on it. On weekends, I'd work on it. On Holidays, I'd also work on it. But you definitely &lt;strong&gt;don't&lt;/strong&gt; have to work on your product 24/7. What's important (for any side project) is you work at your own pace, make small but steady progress, and actually &lt;strong&gt;enjoy&lt;/strong&gt; what you're doing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ten-productbuilding-tips"&gt;
  &lt;/a&gt;
  Ten Product-Building Tips
&lt;/h2&gt;

&lt;p&gt;In this article, I'll be sharing 10 &lt;em&gt;tips&lt;/em&gt; from what I've learned in the process of building Keepsake, so I hope you find a thing or two useful from it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-learning-can-get-overwhelming-but-dont-let-it-consume-you"&gt;
  &lt;/a&gt;
  1. Learning can get overwhelming, but don't let it consume you.
&lt;/h3&gt;

&lt;p&gt;In programming (and most likely in other fields as well), once you learn something, there's always something new that comes up. You can never truly know everything. For every new use case, bug, or fancy package you use in your app, you will have to read through tons of documentation and learn it.&lt;/p&gt;

&lt;p&gt;It can get pretty overwhelming, but that's actually a good thing. It means you'll be learning a lot. What's important is you don't let that feeling of being overwhelmed consume you and stop you from moving forward. You probably won't get it perfect the first time, and that's okay. Start small, then keep going. And going. Eventually, you'll be surprised by how much you've already built and learned in the process. &lt;/p&gt;

&lt;p&gt;When I first started with Keepsake, I treated it as a learning project. I had no plans to monetize it or treat it as a side-gig. I initially just wanted to learn React, but that was not enough to build a full-blown product. I also had to learn Next.js, Node.js, TypeScript, GraphQL, AWS Lambda, Postgres, and a lot of other stuff. I didn't learn all of them at the same time though. Again, just take small steps. Watch videos (if you're interested in the same tech stack, I suggest &lt;a href="https://www.youtube.com/channel/UC-8QAzbLcRglXeN_MY9blyw"&gt;Ben Awad's videos&lt;/a&gt;). Look at sample code. Scour Stack Overflow. Learn enough just to make progress.&lt;/p&gt;

&lt;p&gt;Although, it does help to have prior experience. Before learning React, I've been building APIs and websites with Django and WordPress, which both use different languages, Python and PHP, but I don't consider myself an expert in any of them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-be-aware-of-your-bias-and-design-with-empathy"&gt;
  &lt;/a&gt;
  2. Be aware of your bias and design with empathy.
&lt;/h3&gt;

&lt;p&gt;When creating a totally new product or MVP (Minimum Viable Product), you usually assume a lot of things based on your own intuition. In my opinion, this is okay when you're starting out, and it's usually the quickest way to build an MVP, but be aware that your assumptions are biased. Once you have actual users, be sure to gather feedback from them &amp;amp; validate your product. I built Keepsake mostly based on intuition at first, but once actual people started using it, I iterated based on their feedback. &lt;/p&gt;

&lt;p&gt;In everything you design, it would be best to always put yourself in the shoes of the user. &lt;strong&gt;What seems understandable for you may not be for your users.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aDtOKlWy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8j9eoiccc2sapnd7t6d1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aDtOKlWy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8j9eoiccc2sapnd7t6d1.png" alt="An early mockup of Keepsake's inbox page designed with Adobe XD"&gt;&lt;/a&gt;An early mockup of Keepsake's inbox page designed with Adobe XD&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-solve-a-problem-you-personally-experience"&gt;
  &lt;/a&gt;
  3. Solve a problem you personally experience.
&lt;/h3&gt;

&lt;p&gt;It's much easier to build something that tackles a problem you personally experience. Related to &lt;em&gt;Tip #2&lt;/em&gt;, you build based on intuition at first, and if you understand the problem you're tackling, your intuition has a much better chance of putting you in the right direction. You will better understand your users and their pain points, and so it will be easier for you to design with empathy. &lt;/p&gt;

&lt;p&gt;In any case, even if your app doesn't take off, at least you could be your own user when what you've built solves your own problem 😉&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-you-will-get-ideas-at-the-most-random-times-jot-them-down"&gt;
  &lt;/a&gt;
  4. You will get ideas at the most random times. Jot them down.
&lt;/h3&gt;

&lt;p&gt;When this happens, don't forget to jot those ideas down! Bring out your favorite notes app and take down at least the gist of your idea because it may never come again. Trust me. &lt;/p&gt;

&lt;p&gt;Personally, I usually get the best ideas when I exercise, take a shower, or before I sleep. I thought of Keepsake while working out. Maybe my mind is more relaxed or focused at these times? I don't really know 😅&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TFk0lfLV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a85331iq071szxqvm59w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TFk0lfLV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a85331iq071szxqvm59w.png" alt="Keepsake started as "&gt;&lt;/a&gt;Keepsake started as "Timebox website" in my To-do list in the middle of a workout&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-track-your-work"&gt;
  &lt;/a&gt;
  5. Track your work.
&lt;/h3&gt;

&lt;p&gt;Related to &lt;em&gt;Tip #4&lt;/em&gt;, jot down everything you can about your project - from your tasks to things you learn in the process. Even though it's simply a hobby project, building things alone can get pretty messy, so it's best to force yourself to organize tasks via your favorite task management tool. I personally use &lt;strong&gt;Trello&lt;/strong&gt; to track development tasks and &lt;strong&gt;Notion&lt;/strong&gt; for everything else. Your future self will thank you for taking notes and being organized.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HCwXqwcR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k99mh4qn4j4xle0sns5a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HCwXqwcR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k99mh4qn4j4xle0sns5a.png" alt="A snippet of my Trello board (but you can do the same in Notion)"&gt;&lt;/a&gt;A snippet of my Trello board (but you can do the same in Notion)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XSnbJTN8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8pg76uo1ck2huutafhos.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XSnbJTN8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8pg76uo1ck2huutafhos.png" alt="Notion's pretty good for timelining and organizing ideas"&gt;&lt;/a&gt;Notion's pretty good for timelining and organizing ideas&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-know-when-to-stop-adding-features"&gt;
  &lt;/a&gt;
  6. Know when to stop adding features.
&lt;/h3&gt;

&lt;p&gt;I get it, we always want our product to be better. There will always be a new feature to add. It's a never-ending cycle, so try not to get yourself sucked into that black hole. &lt;/p&gt;

&lt;p&gt;What's important is you get your product to your users as soon as possible to validate your idea and find out what features they actually need. From there, you can prioritize features and build a product roadmap.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-take-it-easy-on-yourself"&gt;
  &lt;/a&gt;
  7. Take it easy on yourself.
&lt;/h3&gt;

&lt;p&gt;Product-building is a very long and arduous journey. Before reaching glorious product-market fit, you will definitely come to a point where you'll question yourself if you should even continue your project. You put so much effort into something, but you do not seem to get the results you expected, and if you stop now, your efforts are basically sunk cost. That's when burnout happens, and I've been there. &lt;/p&gt;

&lt;p&gt;What's nice about a side project is that you're not pressured by any external entity. Take a break and just build at your own pace. Make small but steady progress, and &lt;strong&gt;enjoy&lt;/strong&gt; the journey.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SXgS7WiU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bdvum389cf750zgj2jqx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SXgS7WiU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bdvum389cf750zgj2jqx.png" alt="This is my GitHub contribution activity. I started developing Keepsake in April 2020 then launched in August 2020. I took a break from working on it after (see mostly black boxes after Aug)."&gt;&lt;/a&gt;This is my GitHub contribution activity. I started developing Keepsake in April 2020 then launched in August 2020. I took a break from working on it after (see mostly black boxes after Aug).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-celebrate-even-the-smallest-milestones"&gt;
  &lt;/a&gt;
  8. Celebrate even the smallest milestones.
&lt;/h3&gt;

&lt;p&gt;Getting your first paying user will feel &lt;em&gt;REALLY&lt;/em&gt; good. Hitting 500 users? Definitely something to celebrate. Reaching product-market fit? That'll probably take a long time, but it's something to look forward to and work hard for!&lt;/p&gt;

&lt;p&gt;It's important to celebrate even the smallest milestones to give yourself a sense of pride in your work and to push yourself to keep going. If you can &lt;a href="https://gabygoldberg.medium.com/the-building-in-public-how-to-guide-219d417f00c1"&gt;build in public&lt;/a&gt;, that would be even better!&lt;/p&gt;

&lt;p&gt;Give yourself a pat on the back for making it this far. You deserve it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rfm5vjAo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a01e9yj7jpt718q1toz9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rfm5vjAo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a01e9yj7jpt718q1toz9.png" alt="Keepsake was recently accepted into AWS Activate. It provides $1000 in AWS credits!"&gt;&lt;/a&gt;Keepsake was recently accepted into AWS Activate. It provides $1000 in AWS credits!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tEMQC9pP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6g0t5stwse2hxjy4a34v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tEMQC9pP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6g0t5stwse2hxjy4a34v.png" alt="Getting featured on Product Hunt's Twitter page felt awesome!"&gt;&lt;/a&gt;Getting featured on &lt;a href="https://twitter.com/ProductHunt/status/1399546493334392832"&gt;Product Hunt's Twitter page&lt;/a&gt; felt awesome!&lt;/p&gt;

&lt;p&gt;But personally, the best milestones are the positive feedback I've received from people who use Keepsake:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NUAGCy0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zafwlqs2tdoe8u9mfy4v.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NUAGCy0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zafwlqs2tdoe8u9mfy4v.jpg" alt="Feedback 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VgM4rokH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y2fx3g40998ac1ai6esr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VgM4rokH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y2fx3g40998ac1ai6esr.jpg" alt="Feedback 3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Gn9U9XM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o8zo0l1fuupjnvyecosa.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Gn9U9XM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o8zo0l1fuupjnvyecosa.jpg" alt="Feedback 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-focus-on-the-product-not-the-tool"&gt;
  &lt;/a&gt;
  9. Focus on the product, not the tool.
&lt;/h3&gt;

&lt;p&gt;You can use the most popular programming languages and the fanciest frameworks to build your product, but from an average user's perspective, they wouldn't really care much about the tech. They care if the product works well for them.&lt;/p&gt;

&lt;p&gt;Yes, I know I built Keepsake because I wanted to learn a new front-end JavaScript library in the first place, but you and I have to remember what truly matters to the end-user is the product you're creating. Don't obsess with finding the most optimized way to do things or the best framework to use, just start making it with what you already know then iterate from there.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-strive-for-sustainability"&gt;
  &lt;/a&gt;
  10. Strive for sustainability.
&lt;/h3&gt;

&lt;p&gt;Don't be afraid to monetize your work. Your project will most likely have costs to build and maintain, so you need to find a way to make it sustainable. Also, people paying for what you've built is the ultimate validation your product could receive. It means they find real value in it. &lt;/p&gt;

&lt;p&gt;My goal is to have Keepsake pay for itself. My dream would be to scale it up enough for it to pay for my living expenses. Today, many successful startups started as side projects, so we all probably want our side projects to have the same happy ending, but of course, it's a very steep but certainly not impossible mountain to climb.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Those are my 10 tips. I wish you the best of luck on your own product-building journey! 😊&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#promo"&gt;
  &lt;/a&gt;
  Promo
&lt;/h2&gt;

&lt;p&gt;If you're looking for a gift for someone special or just want to send some letters to your friends or to yourself in the future, I'd appreciate it if you gave &lt;a href="http://keepsa.ke/"&gt;Keepsake&lt;/a&gt; a try! Here's a promo code to get you started: &lt;em&gt;sendthelove&lt;/em&gt; 💌&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>showdev</category>
      <category>startup</category>
      <category>react</category>
    </item>
    <item>
      <title>Appwrite In Production: Backups and Restores</title>
      <author>Bradley Schofield</author>
      <pubDate>Sat, 10 Jul 2021 07:16:50 +0000</pubDate>
      <link>https://dev.to/appwrite/appwrite-in-production-backups-and-restores-4beg</link>
      <guid>https://dev.to/appwrite/appwrite-in-production-backups-and-restores-4beg</guid>
      <description>&lt;p&gt;Backing up and restoring data is an extremely important part of running servers. It's a virtual safety net against most bad things that can happen. Made a bad config change? Restore a backup. Messed up an update? Restore a backup. Corrupted Drives? Restore a backup.&lt;/p&gt;

&lt;p&gt;Not only that, backups can also come in handy when migrating data to other systems, for instance migrating a development server into a production environment or vice versa 🔁&lt;/p&gt;

&lt;p&gt;To make this entire process as easy as possible we've written this simple and handy guide to explain everything you need to know about backing up and restoring your Appwrite instance.&lt;/p&gt;

&lt;p&gt;Appwrite is broken down into multiple sections and most of Appwrite is stateless. This means that Appwrite only actually has two main things you need to backup: one is Appwrite's Database (MariaDB) and the other is the Docker volumes which store functions data and uploads. The rest - Appwrite can automatically handle and regenerate.&lt;/p&gt;

&lt;p&gt;Please note that all these commands need to be run within the same directory as Appwrite's &lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With all that said, lets begin! 😊&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backing-up-the-mariadb-database"&gt;
  &lt;/a&gt;
  💾 Backing up the MariaDB Database
&lt;/h2&gt;

&lt;p&gt;Due to the fact that Appwrite uses a Docker image of MariaDB it is extremely easy to dump the entire database with just one command and likewise to restore the dump.&lt;/p&gt;

&lt;p&gt;Creating a Database backup is just one command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose &lt;span class="nb"&gt;exec &lt;/span&gt;mariadb sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s1"&gt;'exec mysqldump --all-databases --add-drop-database -u"$MYSQL_USER" -p"$MYSQL_ROOT_PASSWORD"'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; ./dump.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Going into depth this command does a couple things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Docker-compose launches a temporary shell onto the MariaDB container to start work&lt;/li&gt;
&lt;li&gt;It runs &lt;code&gt;mysqldump&lt;/code&gt; on the server with two specific options &lt;code&gt;--all-databases&lt;/code&gt; and &lt;code&gt;--add-drop-database&lt;/code&gt; these are important since they ensure that when the backup is restored old data doesn't get overlapped with new data.&lt;/li&gt;
&lt;li&gt;The output of &lt;code&gt;mysqldump&lt;/code&gt; is piped into a &lt;code&gt;dump.sql&lt;/code&gt; file. This is your backup ✅️&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#restoring-the-mariadb-database"&gt;
  &lt;/a&gt;
  ✍️ Restoring the MariaDB Database
&lt;/h2&gt;

&lt;p&gt;Restoring the database is similarly easy and also requires just one command to do so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose &lt;span class="nb"&gt;exec&lt;/span&gt; &lt;span class="nt"&gt;-T&lt;/span&gt; mariadb sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s1"&gt;'exec mysql -uroot -p"$MYSQL_ROOT_PASSWORD"'&lt;/span&gt; &amp;lt; dump.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command is very simple once you break it down:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Docker-compose launches a temporary shell onto the MariaDB container to start work&lt;/li&gt;
&lt;li&gt;Using the &lt;code&gt;mysql&lt;/code&gt; command we restore the dump through a pipe&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#backing-up-your-docker-volumes"&gt;
  &lt;/a&gt;
  💿 Backing up your Docker Volumes
&lt;/h2&gt;

&lt;p&gt;Appwrite stores various things in Docker volumes. This includes your file uploads and Cloud Function data and docker volumes makes it easy for us to coordinate data between the central Appwrite container and our various Appwrite workers. Uploads are especially important to backup since they include all your app's file uploads, these commands can take a while to run depending on how much data you have to backup.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Before running these commands is it highly recommended to &lt;strong&gt;shutdown your Appwrite instance&lt;/strong&gt; to ensure you get a complete backup.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To backup the functions volume the command is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; backup &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;--volumes-from&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;docker-compose ps &lt;span class="nt"&gt;-q&lt;/span&gt; appwrite&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="nv"&gt;$PWD&lt;/span&gt;/backup:/backup ubuntu bash &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"cd /storage/functions &amp;amp;&amp;amp; tar cvf /backup/functions.tar ."&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and to backup the uploads volume the command is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; backup &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;--volumes-from&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;docker-compose ps &lt;span class="nt"&gt;-q&lt;/span&gt; appwrite&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="nv"&gt;$PWD&lt;/span&gt;/backup:/backup ubuntu bash &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"cd /storage/uploads &amp;amp;&amp;amp; tar cvf /backup/uploads.tar ."&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both these commands do similar things and when you break them down they are pretty simple.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Start a new Docker container. This Docker container has a few special options &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;--rm&lt;/code&gt; will delete the container once it's done running. The reason we want this is because this container is only being used to package up our backup and give it to the host machine. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;--volume-from&lt;/code&gt;  This flag special as it will mount all of the volumes of the container we give it. To get the container ID we want we use a &lt;code&gt;$(docker-compose ps -q appwrite)&lt;/code&gt; to get the ID within the command&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-v&lt;/code&gt; This flag is being used to mount a volume onto our new container which will give us access to a backup folder we created using the &lt;code&gt;mkdir&lt;/code&gt; command at the start&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ubuntu&lt;/code&gt; is the image we are basing our new container on&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Finally with this command created we change directories into the normal Appwrite mount point for uploads and create a tarball which will be created in the backup directory where we will be able to access it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once these commands are run you should find a new &lt;code&gt;backup&lt;/code&gt; folder which contains&lt;code&gt;uploads.tar&lt;/code&gt; and &lt;code&gt;functions.tar&lt;/code&gt; these are your backups. Keep them safe.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#restoring-your-docker-volumes"&gt;
  &lt;/a&gt;
  📝 Restoring your Docker Volumes
&lt;/h2&gt;

&lt;p&gt;Restoring your Appwrite volumes is fairly simple as well. Move the backup folder you just created to your destination machine next to the &lt;code&gt;docker-compose.yml&lt;/code&gt; file and simply run the following commands to restore the backup. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please note that the Appwrite instance should be shutdown while running these commands.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Restoring functions volume:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;--volumes-from&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;docker-compose ps &lt;span class="nt"&gt;-q&lt;/span&gt; appwrite&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="nv"&gt;$PWD&lt;/span&gt;/backup:/restore ubuntu bash &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"cd /storage/functions &amp;amp;&amp;amp; tar xvf /restore/functions.tar --strip 1"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Restoring uploads volume:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;--volumes-from&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;docker-compose ps &lt;span class="nt"&gt;-q&lt;/span&gt; appwrite&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="nv"&gt;$PWD&lt;/span&gt;/backup:/restore ubuntu bash &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"cd /storage/uploads &amp;amp;&amp;amp; tar xvf /restore/uploads.tar --strip 1"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command creates new temporary Docker container like the backup command but instead extracts the tar back into the functions and uploads endpoint which will restore the backup.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%EF%B8%8F-in-conclusion"&gt;
  &lt;/a&gt;
  ⭐️ In Conclusion
&lt;/h2&gt;

&lt;p&gt;To create a full Appwrite backup you will want to backup MariaDB and the two volumes specified here. Once you have done that make sure to keep it safe, the best backup will store the backup in multiple locations including locally and in multiple clouds. As with any Cloud Native Application, make sure that you backup your Appwrite instance regularly to ensure that you're never in a situation where you have to lose data due to a server failure.&lt;/p&gt;

&lt;p&gt;This entire process can be easily done to help migrate an Appwrite installation easily by simply copying the backup files onto another server and running the restore steps.&lt;/p&gt;

&lt;p&gt;We hope you enjoyed this article! We love contributions and encourage you to take a look at our &lt;a href="https://github.com/appwrite/appwrite/issues"&gt;open isuses&lt;/a&gt; and &lt;a href="https://github.com/appwrite/rfc/pulls"&gt;ongoing RFCs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you get stuck anywhere, feel free to reach out to us on our &lt;a href="https://appwrite.io/discord"&gt;friendly support channels&lt;/a&gt; run by humans 👩‍💻&lt;/p&gt;

&lt;p&gt;Here are some handy links for more information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite/appwrite/blob/master/CONTRIBUTING.md"&gt;Appwrite Contribution Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/appwrite"&gt;Appwrite Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/docs"&gt;Appwrite Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you to &lt;a href="https://unsplash.com/@tvick?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Taylor Vick&lt;/a&gt; for the server image.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>opensource</category>
      <category>devops</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>The Scope Chain in JavaScript</title>
      <author>Rajat Verma</author>
      <pubDate>Sat, 10 Jul 2021 07:07:37 +0000</pubDate>
      <link>https://dev.to/rajat2502/the-scope-chain-in-javascript-596o</link>
      <guid>https://dev.to/rajat2502/the-scope-chain-in-javascript-596o</guid>
      <description>&lt;h1&gt;
  &lt;a href="#chapter-3-the-scope-chain"&gt;
  &lt;/a&gt;
  Chapter 3: The Scope Chain
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;These are the notes of third chapter of the book "You Don't Know JS: Scope and Closures".&lt;/li&gt;
&lt;li&gt;The connections between scopes that are nested in the other scopes are called the scope chain.&lt;/li&gt;
&lt;li&gt;The scope chain is &lt;strong&gt;directed&lt;/strong&gt;, meaning the lookup moves upward only.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#lookup-is-mostly-conceptual"&gt;
  &lt;/a&gt;
  "Lookup" Is (Mostly) Conceptual
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;We described runtime access to a variable as a &lt;em&gt;lookup&lt;/em&gt; in the last chapter, in which the JavaScript Engine first checks if the variable is present in the current scope before moving upward up the chain of nested scopes (towards the global scope) until the variable is found, if at all.&lt;/li&gt;
&lt;li&gt;The lookup stops as soon as the first matching named declaration in scope is found.&lt;/li&gt;
&lt;li&gt;The scope of a variable is usually decided during the initial compilation process. It will not change based on anything that can happen later during runtime.&lt;/li&gt;
&lt;li&gt;Since the scope is known from compilation, this information would likely be stored with each variable's entry in the AST, which means that the &lt;em&gt;Engine&lt;/em&gt; doesn't need to lookup up a bunch of scopes to figure out which scope a variable comes from.&lt;/li&gt;
&lt;li&gt;Avoiding the need for lookup is a key optimization benefit of lexical scope.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Consider the following scenario: we have numerous files and we are unable to locate the declaration of a specific variable in one of them. It's not always an error if no declaration is found. That variable could be declared in the shared global scope by another file (program) in the runtime.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;So the ultimate determination of whether the variable was declared in some scope may need to be deferred to the runtime.&lt;/li&gt;
&lt;li&gt;Let's understand this with the &lt;em&gt;Marble and Buckets&lt;/em&gt; analogy that we discussed in the &lt;a href="https://dev.to/rajat2502/illustrating-lexical-scope-in-javascript-2h0f"&gt;last chapter&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Any reference to a variable that's initially undeclared is left as an uncolored marble during that file's compilation; this color cannot be determined until other relevant files have been compiled and the application runtime commences. That deferred lookup will eventually resolve the color to whichever scope the variable is found in (likely the global scope).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#shadowing"&gt;
  &lt;/a&gt;
  Shadowing
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;If all variables have different names it wouldn't matter if all of them were just declared in the global scope.&lt;/li&gt;
&lt;li&gt;Having different lexical scopes starts to matter more when you have two or more variables, each in different scopes, with the same lexical names.&lt;/li&gt;
&lt;li&gt;Let's consider an example:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;studentName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Suzy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;printStudent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;studentName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;studentName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;studentName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;studentName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;printStudent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Frank&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// FRANK&lt;/span&gt;
&lt;span class="nx"&gt;printStudent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;studentName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// SUZY&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;studentName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Suzy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;studentName&lt;/code&gt; declaration on line 1, creates a new variable in the global scope. &lt;/li&gt;
&lt;li&gt;All the three &lt;code&gt;studentName&lt;/code&gt; references in the &lt;code&gt;printStudent&lt;/code&gt; function refer to a different local scoped variable and not the global scoped &lt;code&gt;studentName&lt;/code&gt; variable. This behavior is called &lt;strong&gt;Shadowing&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;So, we can say that in the above example, the local scoped variable shadows the globally scoped variable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: It's lexically impossible to reference the global studentName anywhere inside of the printStudent(..) function (or from any nested scopes).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#global-unshadowing-trick"&gt;
  &lt;/a&gt;
  Global Unshadowing Trick
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;It is possible to access a global variable from a scope where that variable has been shadowed, but not through a typical lexical identifier reference.&lt;/li&gt;
&lt;li&gt;In the global scope, &lt;code&gt;var&lt;/code&gt; and &lt;code&gt;function&lt;/code&gt; declarations also expose themselves as properties (of the same name as the identifier) on the global object—essentially an object representation of the global scope. Consider the program:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;studentName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Suzy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;printStudent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;studentName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;studentName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;studentName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;printStudent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Frank&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// "Frank"&lt;/span&gt;
&lt;span class="c1"&gt;// "Suzy"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;So, as we can notice using &lt;code&gt;window.variableName&lt;/code&gt; we can still access the globally scoped shadowed variable in a function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;window.studentName&lt;/code&gt; is a mirror of the global &lt;code&gt;studentName&lt;/code&gt; variable, not a separate snapshot copy. Changes to one are still seen from the other, in either direction.&lt;/li&gt;
&lt;li&gt;This trick only works for accessing a global scope variable and not a shadowed variable from a nested scope, and even then, only one that was declared with &lt;code&gt;var&lt;/code&gt; or &lt;code&gt;function&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: Just because you can doesn't mean you should. Don't shadow a global variable that you need to access, and conversely, avoid using this trick to access a global variable that you've shadowed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#copying-is-not-accessing"&gt;
  &lt;/a&gt;
  Copying Is Not Accessing
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Consider the example:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;special&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;lookingFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;special&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;another&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;special&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;special&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;keepLooking&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;special&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3.141592&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;special&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;another&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;special&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Ooo, tricky!&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;special&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;keepLooking&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;lookingFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;112358132134&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 3.141592&lt;/span&gt;
&lt;span class="c1"&gt;// 112358132134&lt;/span&gt;
&lt;span class="c1"&gt;// 42&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;So, we noticed that we were able to get the value of &lt;code&gt;special&lt;/code&gt; variable passed as a parameter to the &lt;code&gt;lookingFor&lt;/code&gt; function in the &lt;code&gt;keepLooking&lt;/code&gt; function. Does that mean we accessed a shadowed variable?
&lt;/li&gt;
&lt;li&gt;No! &lt;code&gt;special: special&lt;/code&gt; is copying the value of the &lt;code&gt;special&lt;/code&gt; parameter variable into another container (a property of the same name). This doesn't mean that we are accessing the parameter &lt;code&gt;special&lt;/code&gt;. It means we are accessing the copy of the value it had at that moment, by way of another container. We cannot reassign the &lt;code&gt;special&lt;/code&gt; parameter to a different value from the inside &lt;code&gt;keepLooking&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;What if I'd used objects or arrays as the values instead of the numbers ( 112358132134, etc.)? Would us having references to objects instead of copies of primitive values "fix" the inaccessibility? No. Mutating the contents of the object value via a reference copy is &lt;strong&gt;not&lt;/strong&gt; the same thing as lexically accessing the variable itself. We still can't reassign the &lt;code&gt;special&lt;/code&gt; parameter.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#illegal-shadowing"&gt;
  &lt;/a&gt;
  Illegal Shadowing
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Not all combinations of declaration shadowing are allowed. &lt;code&gt;let&lt;/code&gt; can shadow &lt;code&gt;var&lt;/code&gt;, but &lt;code&gt;var&lt;/code&gt; can't shadow &lt;code&gt;let&lt;/code&gt;. Consider the example:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;something&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;special&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;special&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// totally fine shadowing&lt;/span&gt;
    &lt;span class="c1"&gt;// ..&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;another&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ..&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;special&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;special&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="c1"&gt;// ^^^ Syntax Error&lt;/span&gt;
      &lt;span class="c1"&gt;// ..&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Notice in the &lt;code&gt;another()&lt;/code&gt; function, the inner var &lt;code&gt;special&lt;/code&gt; declaration is attempting to declare a function-wide &lt;code&gt;special&lt;/code&gt;, which in and of itself is fine (as shown by the &lt;code&gt;something()&lt;/code&gt; function).&lt;/li&gt;
&lt;li&gt;The syntax error description, in this case, indicates that &lt;code&gt;special&lt;/code&gt; has already been defined.&lt;/li&gt;
&lt;li&gt;The real reason it's raised as a &lt;code&gt;SyntaxError&lt;/code&gt; is because the &lt;code&gt;var&lt;/code&gt; is basically trying to "cross the boundary" of (or hop over) the &lt;code&gt;let&lt;/code&gt; declaration of the same name, which is not allowed.&lt;/li&gt;
&lt;li&gt;That boundary-crossing prohibition effectively stops at each function boundary, so this variant raises no exception:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;another&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ..&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;special&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://some.url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// totally fine shadowing&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;special&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="c1"&gt;// ..&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#function-name-scope"&gt;
  &lt;/a&gt;
  Function Name Scope
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A function declaration looks like:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;askQuestion&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ..&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;While function expression looks like:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;askQuestion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="c1"&gt;//..&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;A function expression, takes in a function as a value, due to this, the function itself will not "hoist".&lt;/li&gt;
&lt;li&gt;Now let's consider a named function expression:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;askQuestion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ofTheTeacher&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ..&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;We know &lt;code&gt;askQuestion&lt;/code&gt; can be accessed in the outer scope, but what about &lt;code&gt;ofTheTeacher&lt;/code&gt; identifier? &lt;code&gt;ofTheTeacher&lt;/code&gt; is declared as an identifier inside the function itself:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;askQuestion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ofTheTeacher&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ofTheTeacher&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;askQuestion&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// function ofTheTeacher()...&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ofTheTeacher&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// ReferenceError: ofTheTeacher is not defined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#arrow-functions"&gt;
  &lt;/a&gt;
  Arrow Functions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Here is how an arrow function is declared:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;askQuestion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ..&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The arrow function doesn't need the word &lt;code&gt;function&lt;/code&gt; to define it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#backing-out"&gt;
  &lt;/a&gt;
  Backing Out
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;When a function (declaration or expression) is defined, a new scope is created. The positioning of scopes nested inside one another creates a natural scope hierarchy throughout the program, called the scope chain.&lt;/li&gt;
&lt;li&gt;Each new scope offers a clean slate, a space to hold its own set of variables. When a variable name is repeated at different levels of the scope chain, shadowing occurs, which prevents access to the outer variable from that point inward.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That concludes this chapter. I'll be back with the notes for the next chapter soon.&lt;/p&gt;

&lt;p&gt;Till then, &lt;strong&gt;Happy Coding :)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you enjoyed reading the notes or have any suggestions or doubts, then feel free to share your views in the comments. &lt;br&gt;
In case you want to connect with me, follow the links below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/rajat2502"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/rajat2502"&gt;GitHub&lt;/a&gt; | &lt;a href="https://twitter.com/rajatverma2502"&gt;Twitter&lt;/a&gt; | &lt;a href="https://medium.com/@rajat2502"&gt;Medium&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>vue</category>
    </item>
  </channel>
</rss>
