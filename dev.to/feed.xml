<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to enter full-screen mode in browser using JS</title>
      <author>Leonardo Schmitt </author>
      <pubDate>Fri, 01 Oct 2021 03:09:49 +0000</pubDate>
      <link>https://dev.to/leonardoschmittk/how-to-enter-full-screen-mode-in-browser-using-js-40pp</link>
      <guid>https://dev.to/leonardoschmittk/how-to-enter-full-screen-mode-in-browser-using-js-40pp</guid>
      <description>&lt;h3&gt;
  &lt;a href="#hi-there"&gt;
  &lt;/a&gt;
  Hi there!
&lt;/h3&gt;

&lt;p&gt;📌  Today, I'll show a straightforward way to enter and exit fullscreen mode on main browsers. I'll try to explain as much as I can, so introducing a subtle pace. You can open the pen below on Codepen and check by yourself.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Leoschmittk/embed/gOREOpJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There is also the fullscreen related to the video HTML element, which will be properly covered.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h2&gt;

&lt;p&gt;To get started, we'll just need to create a HTML file and add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
 &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"fsManager.checkForFullscreen()"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
         Enter fullscreen
 &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is, a simple &lt;strong&gt;button&lt;/strong&gt; element that will execute the &lt;strong&gt;checkForFullscreen()&lt;/strong&gt; function wherever the user clicks on it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h2&gt;

&lt;p&gt;To do the magic wanted we need JavaScript. The whole script is down below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;fullScreenManager&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;isFullscreen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;docEl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="nx"&gt;checkForFullscreen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFullscreen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFullscreen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

               &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFullscreen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;enterFullscreen&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
               &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exitFullscreen&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
               &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="nx"&gt;enterFullscreen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;docEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestFullscreen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
                  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;docEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webkitRequestFullscreen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
                  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;docEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msRequestFullscreen&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;exitFullscreen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exitFullscreen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
                  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webkitExitFullscreen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
                  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msExitFullscreen&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fsManager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;fullScreenManager&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here what's going on: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; we create a &lt;strong&gt;class&lt;/strong&gt; called fullscreenManager. Within it there are two private variables: &lt;strong&gt;isFullscreen&lt;/strong&gt; and &lt;strong&gt;docEl&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;The first carries a &lt;strong&gt;false&lt;/strong&gt; value because initially the fullscreen isn't enabled. &lt;/li&gt;
&lt;li&gt;The second is just a streamline name to refer to &lt;strong&gt;document.documentElement&lt;/strong&gt;, that is, the HTML element in itself.&lt;/li&gt;
&lt;li&gt;There is the &lt;strong&gt;checkForFullscreen&lt;/strong&gt; method that is used to check wheter the fullscreen is enabled or not. If it is, execute &lt;strong&gt;enterFullscreen()&lt;/strong&gt;. If not, execute &lt;strong&gt;exitFullscreen()&lt;/strong&gt;. Moreover, the variable that's responsible for carry the state (false or true) of the screen has to change to the opposite value. If it's not opened yet (if it's false) then turn it to true, and vice-versa, logic shown in &lt;strong&gt;this.isFullscreen = !this.isFullscreen&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;To be able to open the fullscreen, we can call three methods that do the same, all of them associated with the &lt;strong&gt;docEl&lt;/strong&gt; variable. Depending on the user's browser, certain methods don't work out due to its browser engine. To solve that, the logic is basically checking if the given browser "accepts" &lt;strong&gt;requestFullscreen&lt;/strong&gt;, or &lt;strong&gt;webkitRequestFullscreen&lt;/strong&gt; or even &lt;strong&gt;msRequestFullscreen&lt;/strong&gt;. To do that I'm using the  &lt;strong&gt;||&lt;/strong&gt;  logic operator. One of them has to work in almost every browser, something that you can easily check over &lt;a href="https://caniuse.com/?search=requestFullscreen"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;On the other hand, if the user presses again the button, &lt;strong&gt;isFullscreen&lt;/strong&gt; turns to false and the &lt;strong&gt;exitFullscreen&lt;/strong&gt; is executed pretty much the same way as the &lt;strong&gt;enterFullscreen&lt;/strong&gt; by using the methods to exit the fullscreen. In fact, to exit we're using the &lt;strong&gt;document&lt;/strong&gt; instead of &lt;em&gt;document.documentElement&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;To wrap it up, we declare a global varible called &lt;strong&gt;fsManager&lt;/strong&gt; and attach to it a new instance of the &lt;strong&gt;fullscreenManager&lt;/strong&gt; class, allowing us to call its methods, like we did in the HTML button.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#video-element"&gt;
  &lt;/a&gt;
  Video element
&lt;/h2&gt;

&lt;p&gt;If you want to make the same functionality but for associating it with videos, the methods used are the same, but since you're dealing with the video element, don't use &lt;em&gt;document&lt;/em&gt; or &lt;strong&gt;document.documentElement&lt;/strong&gt;. Rather, there should be something like &lt;strong&gt;document.querySelector('.video-class-example').requestFullscreen()&lt;/strong&gt; and so on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap up
&lt;/h2&gt;

&lt;p&gt;But that's all, anyway. I hope you enjoyed as much I did writing this out.&lt;/p&gt;

&lt;p&gt;If you happen to have any suggestion, I'll be pleased to modify the code for the better.&lt;/p&gt;

&lt;p&gt;Farewell 👋 👋 👋 👋 &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to send message to specific discord channel from your server application?</title>
      <author>John Melody Me</author>
      <pubDate>Fri, 01 Oct 2021 02:07:34 +0000</pubDate>
      <link>https://dev.to/johnmelodyme/how-to-send-message-to-specific-discord-channel-from-your-server-application-2n6h</link>
      <guid>https://dev.to/johnmelodyme/how-to-send-message-to-specific-discord-channel-from-your-server-application-2n6h</guid>
      <description>&lt;h4&gt;
  &lt;a href="#how-to-send-message-to-specific-discords-channel-from-your-server-application"&gt;
  &lt;/a&gt;
  How to send message to specific discord's channel from your server application?
&lt;/h4&gt;

&lt;p&gt;Had you wonder how to send the log / messages from the server application to discord channel? In my personal poject I use &lt;code&gt;NodeJs&lt;/code&gt; for the server side, each of the important details from the server will be sent to my discord's channel. For instance, each time my user made a payment or register for my app. I am about to demonstrate how exactly I did it.&lt;/p&gt;

&lt;p&gt;I use the ES6 dicipline for my application.&lt;/p&gt;

&lt;p&gt;Packages I will be using are &lt;code&gt;axios&lt;/code&gt;, and &lt;code&gt;nodemon&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Initiate a project by &lt;code&gt;npm init -y&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;get the webhok url by going to your channel's settings -&amp;gt; integration -&amp;gt; create webhook.&lt;/li&gt;
&lt;li&gt;start coding.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this case I will use the method of HTTP POST request to the webhook.&lt;br&gt;
As in &lt;code&gt;bash&lt;/code&gt; you can simply do :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;
url &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"thewebhookurl"&lt;/span&gt;

curl &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s2"&gt;"Content-Type: application/json"&lt;/span&gt; &lt;span class="nt"&gt;-X&lt;/span&gt; POST &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;'{"content":"'&lt;/span&gt;&lt;span class="s2"&gt;"YOUR WHAT EVER MESSAGE "&lt;/span&gt;&lt;span class="s1"&gt;'"}'&lt;/span&gt; &lt;span class="nv"&gt;$url&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;but in &lt;code&gt;nodejs&lt;/code&gt;,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
 &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;webhook_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;thewebhoooklink&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ABC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;webhook_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and it should work but calling the function &lt;code&gt;log('something something');&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;HAPPY CODING!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/IDTNZdo-fqU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>node</category>
      <category>discord</category>
      <category>webhook</category>
    </item>
    <item>
      <title>Junior Front-end Developer Roadmap</title>
      <author>Michael Myers</author>
      <pubDate>Fri, 01 Oct 2021 02:05:30 +0000</pubDate>
      <link>https://dev.to/devmoek/junior-front-end-developer-roadmap-4m0g</link>
      <guid>https://dev.to/devmoek/junior-front-end-developer-roadmap-4m0g</guid>
      <description>&lt;p&gt;&lt;strong&gt;Junior Frontend Developer&lt;/strong&gt; — Freshman in web development with over one year of experience. He has to know the internet basics, HTML, CSS, JavaScript, Git, Web Security Knowledge, package managers, CSS preprocessors, frameworks. It will be great if he knows react.js, vue.js, angular. Simply it’s a middle developer working on a junior position. It’s a joke, but sometimes people want all of these from junior.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Table of Contents:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#who-is-junior-frontend-developer"&gt;Who is Junior Frontend Developer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#my-story-about-php"&gt;About PHP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-start"&gt;How to start in Web Dev?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6enHUILY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632322698114/pkb0-rO-v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6enHUILY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632322698114/pkb0-rO-v.png" alt="meme from Reddit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#who-is-junior-frontend-developer"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Who is Junior Frontend Developer?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It’s a developer with basic knowledge of Web Development and the Internet as well. He knows HTML, CSS, the basics of JS, and understands how a browser works. And that’s it. He knows how to build a simple web page from scratch. Maybe he knows CSS frameworks and preprocessors such as Bootstrap, SCSS. It’s a basic that might take up to 1 year if you learn smoothly and don’t rush. In some cases, you can learn PHP as I did.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-story-about-php"&gt;
  &lt;/a&gt;
  &lt;strong&gt;My story about PHP&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;I’ve learned PHP for my school project. I needed a database, working form, and administrator panel to change/delete/add rows in a database. That was kind of hard, changing and deleting the script is not working. But still, I don’t learn PHP before this project. This project took 7 months. It was a dental clinic website with 7 pages, without design layout, logo file, text, pictures. I made and found it all by myself. I have developed it by HTML, CSS, JS, PHP without frameworks or preprocessors. That was a nice experience to work with. I’ve never done something like that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-start"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How to start?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;To start your journey in frontend development you need to understand, do you like it? Try to build a website in HTML and CSS. Just a simple static page. Of course, it’s not a frontend development for 100%, it’s basics. If you like basics you going to like to go deep. You can take courses to provide smooth learning. I have had to learn on &lt;a href="https://www.freecodecamp.org/"&gt;freeСodeСamp&lt;/a&gt;. It’s a free course that contains a lot of useful information with a certificate at the end of each course. Also, freeСodeСamp has a big learners base in Facebook, Reddit, Twitter, freeСodeСamp’s blog. You can ask a question if you don’t understand how to pass a challenge or answer if you know a solution.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O2a-IwyP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632322700015/ojJdixeMai.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O2a-IwyP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632322700015/ojJdixeMai.png" alt="A non-profit organization that consists of an interactive learning web platform"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;A non-profit organization that consists of an interactive learning web platform.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After you understand it’s yours. You need to go deep. If you are already know HTML, CSS, basics of JS and Git. Your next stage is npm packages or yarn. You can pick both as well. Then learn Webpack technology. After that pick a Framework such as React.js (Redux, MobX), Vue.js (VueX), Angular.js (RxJS, NgRx). You can check the roadmap &lt;a href="https://www.instagram.com/p/CTBYVPSoAIk/"&gt;here&lt;/a&gt;. If you would like to see more than I did, you can visit &lt;a href="https://roadmap.sh/frontend"&gt;this website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mlgrdVPB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632322701701/0zAuNp64T.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mlgrdVPB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632322701701/0zAuNp64T.png" alt="Frontend Roadmap"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Frontend Roadmap&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Thank you for reading. Those were my thoughts about the junior frontend developer roadmap. What do you think about the roadmap? If you are a junior, what do you learn right now? If you just want to start it’s a great time to do it! Do not forget that programming means forever studying. Don’t stop at what you have learned right now, keep moving.&lt;/p&gt;

&lt;p&gt;I hope you being well guys. As for me, I have a pretty hard time in my life. I don’t know what will be in 1 month. I live in Russia and the army here is mandatory. I can’t move or do something because I’m broke. Find a job I can’t too, they just bring me to the army if I’ll try to find a job. I will post articles here for long as I can. I like writing and sharing thoughts helps me to forget about the army.&lt;/p&gt;

&lt;p&gt;UPD 10/1/2021: I got a job :) And the doctor found a diagnosis that maybe I will not go to the army.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--s8UmQCWG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1443576101930881040/zdrsTnU0_normal.jpg" alt="Michael Myers 🧑‍💻 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Michael Myers 🧑‍💻
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/devmoek"&gt;@devmoek&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Today is one of the most great day in 2021 🎉🎉🎉&lt;br&gt;&lt;br&gt;First things first, I have an issue with army. The army in Russia is mandatory, but today I found a diagnosis and move in the right way😁&lt;br&gt;&lt;br&gt;The second, I got an offer in a tech company. I’m so excited about it 🎊🥳
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:07 PM - 29 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1443215906407071744" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1443215906407071744" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1443215906407071744" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Mi nueva startup - Mensajería y paquetería express en Mérida, Yucatán</title>
      <author>g7b</author>
      <pubDate>Fri, 01 Oct 2021 01:54:57 +0000</pubDate>
      <link>https://dev.to/g7b/mi-nueva-startup-mensajeria-y-paqueteria-express-en-merida-yucatan-3on2</link>
      <guid>https://dev.to/g7b/mi-nueva-startup-mensajeria-y-paqueteria-express-en-merida-yucatan-3on2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#ahora-me-voy-a-rifar-un-servicio-de-paqueter%C3%ADa-y-mensajer%C3%ADa-express-y-una-app-para-delivery-en-m%C3%A9rida-yucat%C3%A1n"&gt;
  &lt;/a&gt;
  Ahora me voy a rifar un servicio de paquetería y mensajería express y una app para delivery en Mérida, Yucatán.
&lt;/h2&gt;




&lt;h3&gt;
  &lt;a href="#por-qu%C3%A9"&gt;
  &lt;/a&gt;
  ¿Por qué?
&lt;/h3&gt;

&lt;p&gt;Pues la ciudad esta creciendo bastante y servicios como iVoy o 99minutos no dan servicio en esta ciudad y aunque estuvieran me vale madres.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#qu%C3%A9-creo-que-se-necesita"&gt;
  &lt;/a&gt;
  ¿Qué creo que se necesita?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Clientes, jaja&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#no-ya-en-serio"&gt;
  &lt;/a&gt;
  No ya en serio,
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Una landing page para ofrecer la info de los servicios.&lt;/li&gt;
&lt;li&gt;Una landing para que se registren los repartidores.&lt;/li&gt;
&lt;li&gt;Una app para rastreo de entregas y solicitud de recolección.&lt;/li&gt;
&lt;li&gt;App para repartidores, para asignar los servicios y hacer el tracking en tiempo real.&lt;/li&gt;
&lt;li&gt;Redes sociales, para esta startup chance con LinkedIn y Face la armamos.&lt;/li&gt;
&lt;li&gt;Un help desk y centro de atención a clientes.&lt;/li&gt;
&lt;li&gt;Unas 2 motos propias para las entregas.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#de-rh-qu%C3%A9-se-necesita"&gt;
  &lt;/a&gt;
  De RH, ¿qué se necesita?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;2 personas que entreguen&lt;/li&gt;
&lt;li&gt;1 persona de atención a clientes&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cu%C3%A1nto-se-va-a-cobrar"&gt;
  &lt;/a&gt;
  ¿Cuánto se va a cobrar?
&lt;/h3&gt;

&lt;p&gt;Mínimo $35 MXN hasta 4 km y $10 varitos el km extra.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%C2%A0la-plataforma-qu%C3%A9-debe-tener"&gt;
  &lt;/a&gt;
   La plataforma, ¿qué debe tener?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;En el home toda la info del servicio, qué se ofrece, dónde, por qué, cómo y cuánto cuesta.&lt;/li&gt;
&lt;li&gt;Rastreo,&lt;/li&gt;
&lt;li&gt;Solicitar recolección,&lt;/li&gt;
&lt;li&gt;Para E-commerce,&lt;/li&gt;
&lt;li&gt;Para Empresas,&lt;/li&gt;
&lt;li&gt;Regístrate como mensajero o repartidor,&lt;/li&gt;
&lt;li&gt;Mensajería express,&lt;/li&gt;
&lt;li&gt;Contacto y ayuda,&lt;/li&gt;
&lt;li&gt;Políticas y &lt;/li&gt;
&lt;li&gt;Términos y condiciones.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#c%C3%B3mo-se-va-a-llamar"&gt;
  &lt;/a&gt;
  ¿Cómo se va a llamar?
&lt;/h3&gt;

&lt;p&gt;Ya lo tengo pero todavía no lo pongo aquí hasta que compre el dominio, capaz que lo compran nomás por chingar.&lt;/p&gt;

&lt;p&gt;Ya con eso...&lt;/p&gt;

&lt;p&gt;Todo lo que me falte ahí lo voy poniendo o lo ponen aquí abajo ↓&lt;/p&gt;

</description>
      <category>startup</category>
      <category>react</category>
      <category>aws</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>6502 Assembly Language Practice</title>
      <author>Qiwen Yu</author>
      <pubDate>Fri, 01 Oct 2021 01:44:59 +0000</pubDate>
      <link>https://dev.to/qiwenyu/6502-assembly-language-practice-379</link>
      <guid>https://dev.to/qiwenyu/6502-assembly-language-practice-379</guid>
      <description>&lt;p&gt;In this blog, I would like to present simple 6502 assembly code and give a brief explanation/comments on how it works.&lt;br&gt;
The Bitmap code is the basic code I use, which will paint the whole page to yellow. And I will try to create line across the page locate on different places.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bitmap-code"&gt;
  &lt;/a&gt;
  Bitmap Code
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lda #$00    ; set a pointer at $40 to point to $0200
sta $40
lda #$02
sta $41

lda #$07    ; colour number

ldy #$00    ; set index to 0

loop:   sta ($40),y ; set pixel at the address (pointer)+Y

iny     ; increment index
bne loop    ; continue until done the page

inc $41     ; increment the page
ldx $41     ; get the current page number
cpx #$06    ; compare with 6
bne loop    ; continue until done all pages

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#draw-a-green-line-across-the-top"&gt;
  &lt;/a&gt;
  Draw a green line across the top
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lda #$00             ; set a pointer at $40 to point to $0200
sta $40
lda #$02
sta $41

lda #$05             ; set color green

ldy #$00             ; set index to 0
top:sta ($40), y         ; set pixel

iny                  ; increment index

cpy #$20            ; compare y value with 20. If the index is 20, end the loop

bne top    

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rUBTja6h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9esj52q5bkxtpovzm1pf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rUBTja6h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9esj52q5bkxtpovzm1pf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#draw-a-blue-line-across-the-bottom"&gt;
  &lt;/a&gt;
  Draw a blue line across the bottom
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lda #$05
sta $41   
lda #$03             ; set color blue

ldy #$e0             ; set the index to last line

bottom:  sta ($40), y      ; set pixel
iny                      ; increment index
bne bottom         ; continue until done the line

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VUZr4hNF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5whu63zwzb1b76ouxkr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VUZr4hNF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5whu63zwzb1b76ouxkr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#draw-a-yellow-line-down-the-left-side-and-a-purple-line-down-the-right-side"&gt;
  &lt;/a&gt;
  Draw a yellow line down the left side, and a purple line down the right side
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lda #$00             ; set a pointer at $40 to point to $0200
sta $40
lda #$02
sta $41

both_side: lda #$07         ;set the color yellow

sta ($40), y  

tax                       ; transfer A to X
tya                       ; transfer Y to A
clc                       ; clear carry flag to do ADC (add with carry)
adc #$1f              ; add with #$1f to indicates the last line

tay                       ; transfer A to Y
txa                       ; transfer X to A

lda #$04              ; set the color purple

sta ($40), y          ; 
iny                       ; increment index y
bne both_side      ; continue until done the page

inc $41                ; increment the page
ldx $41                ; get the page
cpx #$06             ; compare with 6, the last page is 05, when it reaches to 06, it means all pages are already painted
bne both_side       ; continue until done all page

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ITHpfeNo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m3bz234ydel5vakzp3nq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ITHpfeNo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m3bz234ydel5vakzp3nq.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thoughts-about-6502-assembly-language"&gt;
  &lt;/a&gt;
  Thoughts about 6502 Assembly Language
&lt;/h2&gt;

&lt;p&gt;Assembly language is the only low-level language I have learned so far. This language is a symbolic representation of machine language. Learning this language makes me understand more on how to communicate with machine. I think assembly language is a necessary bridge between the underlying hardware of a computer and the higher-level programming languages like Python. This language helps programmers to write human-readable code that is almost similar to machine language. After having a basic knowledge of this kind of machine language actually helps me to get rid of the fear of writing code. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#commands"&gt;
  &lt;/a&gt;
  Commands
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#tya-command"&gt;
  &lt;/a&gt;
  TYA Command
&lt;/h3&gt;

&lt;p&gt;"tya" stands for "Transfer Y to A". It means that every time the value in Y register is increased, the value in A register is incremented as well. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lsa-command"&gt;
  &lt;/a&gt;
  LSA Command
&lt;/h3&gt;

&lt;p&gt;"lsa" stands for "Logically Shift Right". This command shifts the color one bit to the right.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#asl-command"&gt;
  &lt;/a&gt;
  ASL Command
&lt;/h3&gt;

&lt;p&gt;"asl" stands for "Arithmetically Shift Left". ASL shifts all bits left one position. &lt;/p&gt;

</description>
      <category>assembly</category>
    </item>
    <item>
      <title>Fetching data in React: Quick guide</title>
      <author>jideabdqudus</author>
      <pubDate>Fri, 01 Oct 2021 01:04:59 +0000</pubDate>
      <link>https://dev.to/jideabdqudus/fetching-data-in-react-quick-guide-4fba</link>
      <guid>https://dev.to/jideabdqudus/fetching-data-in-react-quick-guide-4fba</guid>
      <description>&lt;p&gt;Fetching data from an API either from an external source or from the Backend of your application can be done in many ways.&lt;/p&gt;

&lt;p&gt;In this Quick guide, I would show you how to fetch data in a react app by making an HTTP request to a REST API using 4 different patterns.&lt;/p&gt;

&lt;p&gt;Before I begin, let’s have a refresher on what REST APIs are:&lt;/p&gt;

&lt;p&gt;What is a REST API?&lt;/p&gt;

&lt;p&gt;A &lt;a href="https://restfulapi.net"&gt;REST API&lt;/a&gt; (also known as &lt;strong&gt;RESTful API&lt;/strong&gt;) is an application programming interface (&lt;strong&gt;API&lt;/strong&gt; or &lt;strong&gt;web API&lt;/strong&gt;) that conforms to the constraints of REST architectural style and allows for interaction with RESTful web services. REST stands for “&lt;strong&gt;RE&lt;/strong&gt;presentational &lt;strong&gt;S&lt;/strong&gt;tate &lt;strong&gt;T&lt;/strong&gt;ransfer”.&lt;/p&gt;

&lt;p&gt;In this guide, we would be making use of the &lt;a href="https://docs.github.com/en/rest"&gt;Github REST API&lt;/a&gt; and its sample response looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
"login": "jideabdqudus",
"id": 45945474,
"node_id": "MDQ6VXNlcjQ1OTQ1NDc0",
"avatar_url": "https://avatars.githubusercontent.com/u/45945474?v=4",
"gravatar_id": "",
"url": "https://api.github.com/users/jideabdqudus",
"html_url": "https://github.com/jideabdqudus",
"followers_url": "https://api.github.com/users/jideabdqudus/followers",
"following_url": "https://api.github.com/users/jideabdqudus/following{/other_user}",
"gists_url": "https://api.github.com/users/jideabdqudus/gists{/gist_id}",
"starred_url": "https://api.github.com/users/jideabdqudus/starred{/owner}{/repo}",
"subscriptions_url": "https://api.github.com/users/jideabdqudus/subscriptions",
"organizations_url": "https://api.github.com/users/jideabdqudus/orgs",
"repos_url": "https://api.github.com/users/jideabdqudus/repos",
"events_url": "https://api.github.com/users/jideabdqudus/events{/privacy}",
"received_events_url": "https://api.github.com/users/jideabdqudus/received_events",
"type": "User",
"site_admin": false,
"name": "Jide Abdul-Qudus.",
"company": null,
"blog": "www.abdulqudus.com",
"location": "Lagos, Nigeria.",
"email": null,
"hireable": true,
"bio": "Software Engineer.",
"twitter_username": null,
"public_repos": 57,
"public_gists": 0,
"followers": 12,
"following": 0,
"created_at": "2018-12-17T15:57:35Z",
"updated_at": "2021-04-06T20:48:07Z"
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whenever a GET request is made to this &lt;a href="https://api.github.com/users/jideabdqudus"&gt;(api.github.com/users/jideabdqudus)&lt;/a&gt; endpoint it returns this Javascript Object as its response &amp;amp; we can decide to use this data in our application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fetching-data-using-the-fetch-api"&gt;
  &lt;/a&gt;
  Fetching data using the Fetch API
&lt;/h3&gt;

&lt;p&gt;The Fetch API is an inbuilt JavaScript method for getting resources from a server or an API endpoint. It s a tool that’s built into most modern browsers on the window object (&lt;code&gt;window.fetch&lt;/code&gt;) and enables us to make HTTP requests very easily using JavaScript promises.&lt;/p&gt;

&lt;p&gt;To make a simple GET request with fetch we just need to include the URL endpoint which is a compulsory argument. It returns a promise that points to the response from the request. We want to make this request once our React component has mounted hence we would be making use of a Hook called &lt;em&gt;useEffect&lt;/em&gt; for &lt;em&gt;functional-based&lt;/em&gt; components or &lt;em&gt;componentDidMount&lt;/em&gt; for &lt;em&gt;class-based&lt;/em&gt; components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState, useEffect } from "react";
export default function App() {

  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() =&amp;gt; {
    fetch("https://api.github.com/users/jideabdqudus")
      .then((response) =&amp;gt; {
        if (response.ok) {
          return response.json();
        }
        throw response;
      })
      .then((data) =&amp;gt; {
        setData(data);
      })
      .catch((error) =&amp;gt; {
        console.error("Error fetching data: ", error);
        setError(error);
      })
      .finally(() =&amp;gt; {
        setLoading(false);
      });
  }, []);

  if (loading) return "Loading...";
  if (error) return "Error!";
  return (
    &amp;lt;div style={{ textAlign: "center" }}&amp;gt;
      &amp;lt;img src={data.avatar_url} alt="Avatar" height="100" /&amp;gt;
      &amp;lt;p&amp;gt;Name: {data.name}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Bio: {data.bio}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Username: {data.login}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Location: {data.location}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Public Repos: {data.public_repos}&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above, we have created a very simple functional component that makes a fetch request once the component gets mounted and sends back the response to us in the data state.&lt;/p&gt;

&lt;p&gt;Within the useEffect we declare the API endpoint inside of our fetch function, the &lt;code&gt;.then()&lt;/code&gt; callback, was used to see if the response was okay (&lt;code&gt;response.ok&lt;/code&gt;). We call back a response as JSON data if the response is ok.&lt;/p&gt;

&lt;p&gt;If it’s not an okay response, we assume there was an error making the request. Using fetch, for us to handle the errors, we throw &lt;code&gt;response&lt;/code&gt; as an error for it to handled by our &lt;code&gt;catch&lt;/code&gt; callback.&lt;/p&gt;

&lt;p&gt;Here in our example, we are putting our error data in state with setError. If there's an error we return the text "Error!".&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;.finally()&lt;/code&gt; callback is a function that is called when our promise has resolved successfully or not. In it, we set loading to false, so that we no longer see our &lt;code&gt;loading&lt;/code&gt; text.&lt;/p&gt;

&lt;p&gt;Instead we see either our data on the page if the request was made successfully, or that there was an error in making the request if not.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-fetch-data-in-react-using-axios"&gt;
  &lt;/a&gt;
  How to Fetch Data in React Using Axios
&lt;/h3&gt;

&lt;p&gt;The second pattern is by making use of Axios. Axios is an easy to use promise-based HTTP client for the browser and node.js. With Axios, we get the ability to intercept and cancel request, it also has a built-in feature that provides client-side protection against cross-site request forgery.&lt;/p&gt;

&lt;p&gt;Axios is a React/Javascript library, so for us to use it in our app we would need to install it first.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install axios or yarn add axios

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After which we import it at the top of the component that it would be used in. Making HTTP request with Axios is quite easy, and it’s one of the most popular ways of fetching data in React. We would be converting the previous Fetch example to an axios request.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState, useEffect } from "react";
import axios from "axios";
export default function App() {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  useEffect(() =&amp;gt; {
    axios("https://api.github.com/users/jideabdqudus")
      .then((response) =&amp;gt; {
        setData(response.data);
      })
      .catch((error) =&amp;gt; {
        console.error("Error fetching data: ", error);
        setError(error);
      })
      .finally(() =&amp;gt; {
        setLoading(false);
      });
  }, []);

  if (loading) return "Loading...";
  if (error) return "Error!";
  return (
    &amp;lt;div style={{ textAlign: "center" }}&amp;gt;
      &amp;lt;img src={data.avatar_url} alt="Avatar" height="100" /&amp;gt;
      &amp;lt;p&amp;gt;Name: {data.name}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Bio: {data.bio}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Username: {data.login}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Location: {data.location}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Public Repos: {data.public_repos}&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What Axios enables us to do is to use the exact same promise syntax as fetch — but instead of using our first then callback to manually determine whether the response is okay and throw an error, Axios takes care of that for us.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fetch-data-in-react-using-raw-async-await-endraw-syntax"&gt;
  &lt;/a&gt;
  Fetch Data in React Using &lt;code&gt;async / await&lt;/code&gt; syntax
&lt;/h3&gt;

&lt;p&gt;In ES7, it became possible to resolve promises using the async / await syntax. Async/await is a relatively new way to write asynchronous code in Javascript.&lt;/p&gt;

&lt;p&gt;The benefit of this is that it enables us to remove our &lt;code&gt;.then()&lt;/code&gt;, &lt;code&gt;.catch()&lt;/code&gt;, and &lt;code&gt;.finally()&lt;/code&gt; callbacks, promises andsimply get back our asynchronously resolved data as if we were writing synchronous code without promises altogether.&lt;/p&gt;

&lt;p&gt;Why &lt;code&gt;async/await&lt;/code&gt; ? Well, simply put, async/await allows us to write asynchronous code in a synchronous manner. The one thing you need to know about async functions is that; they always returns a promise.&lt;/p&gt;

&lt;p&gt;We have to be aware of the fact that when we use &lt;code&gt;useEffect&lt;/code&gt; the effect function (the first argument) cannot be made an &lt;code&gt;async&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;To create an &lt;code&gt;async&lt;/code&gt; function all we need to do is add the &lt;code&gt;async&lt;/code&gt; keyword before the function definition, we would be converting our previous example to an async/await syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState, useEffect } from "react";
import axios from "axios";
export default function App() {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  useEffect(() =&amp;gt; {
    getData();
  }, []);

  async function getData() {
    await axios("https://api.github.com/users/jideabdqudus")
      .then((response) =&amp;gt; {
        setData(response.data);
      })
      .catch((error) =&amp;gt; {
        console.error("Error fetching data: ", error);
        setError(error);
      })
      .finally(() =&amp;gt; {
        setLoading(false);
      });
  }

  if (loading) return "Loading...";
  if (error) return "Error!";
  return (
    &amp;lt;div style={{ textAlign: "center" }}&amp;gt;
      &amp;lt;img src={data.avatar_url} alt="Avatar" height="100" /&amp;gt;
      &amp;lt;p&amp;gt;Name: {data.name}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Bio: {data.bio}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Username: {data.login}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Location: {data.location}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Public Repos: {data.public_repos}&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In summary, &lt;code&gt;async/await&lt;/code&gt; is a cleaner syntax to write asynchronous Javascript code. It enhances readability and flow of your code.&lt;/p&gt;

&lt;p&gt;Things to keep in mind while using &lt;code&gt;async/await&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Async functions return a promise.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Await can only be used inside an async block.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Await waits until the function(“promise”) resolves or rejects.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-to-fetch-data-in-react-using-a-custom-react-hook-usefetch"&gt;
  &lt;/a&gt;
  How to Fetch Data in React Using a Custom React Hook (useFetch)
&lt;/h3&gt;

&lt;p&gt;Over time, you may realize that it gets a bit tedious and time-consuming to keep writing the useEffect hook with all of its boilerplate within every component in which you want to fetch data.&lt;/p&gt;

&lt;p&gt;To cut down on our reused code, we can use a custom hook as a special abstraction, which we can write ourselves from a third party library (like we are here, using the library &lt;code&gt;react-fetch-hook&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;useFetch is an isomorphic fetch hook. That means it works with SSR (server side rendering).&lt;/p&gt;

&lt;p&gt;A custom hook that makes our HTTP request allows us to make our components much more concise. All we have to do is call our hook at the top of our component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";
import useFetch from "react-fetch-hook"

export default function App() {
  const { isLoading, error, data } = useFetch("https://api.github.com/users/jideabdqudus");
  if (isLoading) return "Loading...";
  if (error) return "Error!";

  return (
    &amp;lt;div style={{ textAlign: "center" }}&amp;gt;
      &amp;lt;img src={data.avatar_url} alt="Avatar" height="100" /&amp;gt;
      &amp;lt;p&amp;gt;Name: {data.name}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Bio: {data.bio}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Username: {data.login}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Location: {data.location}&amp;lt;/p&amp;gt;
      &amp;lt;p&amp;gt;Public Repos: {data.public_repos}&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;The 4 different patterns shown above are great ways of consuming APIs but fetch is mainly used when building relatively small applications and Axios/useFetch when building large applications for scalability reasons.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed reading this guide, I’ll be happy to answer any comment or questions you leave down below!&lt;/p&gt;

&lt;p&gt;Check out more articles on my website: &lt;a href="//blog.abdulqudus.com"&gt;blog.abdulqudus.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
    </item>
    <item>
      <title>No YAML Needed! Create GitHub Actions Workflows from VS and CLI</title>
      <author>Davide 'CoderDave' Benvegnù</author>
      <pubDate>Fri, 01 Oct 2021 00:14:28 +0000</pubDate>
      <link>https://dev.to/n3wt0n/no-yaml-needed-create-github-actions-workflows-from-vs-and-cli-50kp</link>
      <guid>https://dev.to/n3wt0n/no-yaml-needed-create-github-actions-workflows-from-vs-and-cli-50kp</guid>
      <description>&lt;p&gt;Today I'm going to show you two very easy ways to create your GitHub &lt;strong&gt;Actions CI&lt;/strong&gt; Workflow for .NET Applications, &lt;strong&gt;without writing a single line of YAML&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;Getting started with GitHub Actions may not be always easy. Especially when the alternatives for deployment are so easy (like the right-click publish in Visual Studio, for example). What if we could create our CI workflows with Actions in the same way?&lt;/p&gt;

&lt;p&gt;Btw, I'd be curious to know how you create your GitHub Actions workflow. Let me know in the comment section below if you do it directly in the GitHub UI, or in VSCode perhaps with some extension, or however else you do it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have &lt;strong&gt;the video with the whole explanation and demo&lt;/strong&gt;, which to be fair is much &lt;strong&gt;&lt;em&gt;more complete&lt;/em&gt;&lt;/strong&gt; than this post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/N2ELIqLWz0k"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/N2ELIqLWz0k"&gt;Link to the video: https://youtu.be/N2ELIqLWz0k&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... let's just continue :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-tools"&gt;
  &lt;/a&gt;
  The Tools
&lt;/h3&gt;

&lt;p&gt;The first tool we are going to take a look at is &lt;strong&gt;integrated in Visual Studio&lt;/strong&gt;, so it works on Windows, while the second one requires the &lt;strong&gt;use of the CLI&lt;/strong&gt; and therefore can be used in MacOS and Linux as well.&lt;/p&gt;

&lt;p&gt;Let's jump into VS.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#from-visual-studio"&gt;
  &lt;/a&gt;
  From Visual Studio
&lt;/h4&gt;

&lt;p&gt;Doing it from Visual Studio is pretty straight forward.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HY_FxW0T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o9zzkq0tc5qqzdg00zwa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HY_FxW0T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o9zzkq0tc5qqzdg00zwa.png" alt="Deployment Type"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just right-click on the &lt;strong&gt;Project Name&lt;/strong&gt;, select &lt;em&gt;__Publish&lt;/em&gt;&lt;em&gt;, choose your deployment target, and then you have the new _&lt;/em&gt;&lt;em&gt;Deployment Type&lt;/em&gt;_ selection.&lt;/p&gt;

&lt;p&gt;You can either deploy directly, as usual, or create a YAML file for the GitHub Actions CI/CD.&lt;/p&gt;

&lt;p&gt;After confirmation, Visual Studio will take care of the rest and create the YAML file for you in the &lt;code&gt;.github/workflows&lt;/code&gt; folder, named as your deployment target.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FPzbJANW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oefpiafjskopdjgtccqm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FPzbJANW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oefpiafjskopdjgtccqm.png" alt="YAML Generated"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see in the image, the workflow takes care of both CI and CD for your application&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are on Visual Studio 2019 and you don't see the deployment type selection, make sure the feature is enabled. Go to &lt;em&gt;Tools &amp;gt; Options &amp;gt; Environment &amp;gt; Preview Features&lt;/em&gt; and make sure the &lt;strong&gt;&lt;em&gt;GitHub Actions support in Publish&lt;/em&gt;&lt;/strong&gt; is checked.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;
  &lt;a href="#from-the-cli"&gt;
  &lt;/a&gt;
  From The CLI
&lt;/h4&gt;

&lt;p&gt;As I've said, the second way I have for you to generate a GitHub Actions Workflow without writing the YAML is using the &lt;strong&gt;dotnet CLI&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://timheuer.com"&gt;Tim Heuer&lt;/a&gt; has in fact created an &lt;strong&gt;awesome template&lt;/strong&gt; that generates the workflow files for GitHub Actions from the CLI.&lt;/p&gt;

&lt;p&gt;First thing, we need to &lt;strong&gt;install the template&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet new &lt;span class="nt"&gt;-i&lt;/span&gt; TimHeuer.GitHubActions.Templates
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will add the feature we want to use. Then just execute&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet new workflow
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;in the root folder of your project and you are done.&lt;/p&gt;

&lt;p&gt;What you’ll get is a straightforward GitHub Actions workflow to &lt;strong&gt;build and test&lt;/strong&gt; your .NET application. Keep in mind this is a starting point. It’s not going to do everything you might want, but it’s a solid base to build from.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;Cool right? Let me know down below what you think about this, and as I've said before also how you usually create your Actions workflows.&lt;/p&gt;

&lt;p&gt;Also, speaking of GitHub Actions, checkout &lt;a href="https://youtu.be/4lH_7b5lmjo"&gt;this video&lt;/a&gt;, where I talk about creating and using templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
📧 &lt;a href="https://coderdave.io/newsletter"&gt;Newsletter&lt;/a&gt;&lt;br&gt;
🌐 &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/N2ELIqLWz0k"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>github</category>
      <category>yaml</category>
      <category>cicd</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>Coding is knowing how to ask questions *well*</title>
      <author>𝙹𝚊𝚜𝚘𝚗 𝙻𝚎𝚘𝚠 👨🏻‍💻</author>
      <pubDate>Thu, 30 Sep 2021 23:44:27 +0000</pubDate>
      <link>https://dev.to/jasonleowsg/coding-is-knowing-how-to-ask-questions-well-4a7n</link>
      <guid>https://dev.to/jasonleowsg/coding-is-knowing-how-to-ask-questions-well-4a7n</guid>
      <description>&lt;p&gt;I’d been taking a web development course on Udemy and this week I finally started on learning server-side programming. Front-end development had been relatively easier for me to pick up because over the years of setting up Wordpress websites, one invariably comes across HTML, CSS and some Javascript. I realised there had been a lot of accidental immersion and learning in that aspect. But, back-end is completely foreign to me and now it’s feeling really hard.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nobody-teaches-how-to-properly-google-for-answers"&gt;
  &lt;/a&gt;
  Nobody teaches how to properly google for answers
&lt;/h3&gt;

&lt;p&gt;One of the main things I never learned though was how to properly google programming questions when I’m stuck. As a beginner, I’m completely unfamiliar with the technical terms of the language, so I end up searching using very broad, vague keywords that doesn’t help much at all. I don’t even know how to phrase my problem properly!&lt;/p&gt;

&lt;p&gt;For instance, I was learning how to make a web scraper using PHP. The instructor showed us how to use &lt;code&gt;file_get_contents&lt;/code&gt; function but just to get the whole web page. I wanted to scrape a specific text content from a specific class so just simply using &lt;code&gt;file_get_contents&lt;/code&gt; wouldn’t work . So I simply googled “PHP scrape html class element”. Some useful stuff but still kind of broad. A lot of stuff pointing me to using other libraries. I fiddled around, copy and pasted bits of code I found from Stack Overflow but nothing worked (I later realised I needed to download the libraries, which wasn’t really mentioned in the answers ?). &lt;/p&gt;

&lt;p&gt;Later on during the instructor demo, he googled “split a string” and got links to the &lt;code&gt;explode&lt;/code&gt; function, which helps to extract specific parts of the HTML code after you used the &lt;code&gt;file_get_contents&lt;/code&gt; function. Like WTF? How does a beginner even know “split a string” are the right keywords to use?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#not-even-knowing-the-right-search-key-words-to-use"&gt;
  &lt;/a&gt;
  Not even knowing the right search key words to use
&lt;/h3&gt;

&lt;p&gt;The problem is I don’t even know the right words to use to get to what I need. The right words at the right level of specificity and technicality. Learning the coding ‘vocabulary’ of terms and syntax takes time and as a beginner, that’s my weak spot in being able to find the right answers online.&lt;/p&gt;

&lt;p&gt;It felt like I was trying to learn a foreign language, like say French, but only had a German-French dictionary to learn it. If I don’t know German to start with, how do I even find the right word in French? How do I bridge English to German (i.e. rookie search keywords to right technical terms to the right answer)?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#beginners-guide-on-how-to-know-what-key-words-to-use"&gt;
  &lt;/a&gt;
  Beginner's guide on how to know what key words to use
&lt;/h3&gt;

&lt;p&gt;After doing some reading online and coming across great articles like this one, I learned that it’s like a funnel/spiral, with at least 2 layers of search to slowly zoom in on my answer:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Do a general, intentionally imperfect search first, to find the right technical terms:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;a.  Search on community forums where beginners might have phrased the same question in the same way as you would have. Stack Overflow might not be the most useful at this stage yet.&lt;/p&gt;

&lt;p&gt;b.  Or scroll through support documentation like W3 School or specific ones like PHP.net (these are like the ‘dictionaries’ of programming), where you can read through the definitions of the syntax, and starting collecting the right keywords…&lt;/p&gt;

&lt;p&gt;c.  Narrow in on a few keywords - the language/framework/library you’re using, a noun to describe the what (e.g. element, selector), a verb to describe an action/task you want to do with something (e.g. event, function)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Then get more specific and technical on the next layer of search:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;a.  This time, we can start trying more expert forums like Stack Overflow, or one for your language&lt;/p&gt;

&lt;p&gt;b.  Type and search away! &lt;/p&gt;

&lt;p&gt;Did I miss out anything? Any other useful tips on how to google for the right answer in programming?&lt;/p&gt;




&lt;p&gt;Follow my daily writings on &lt;a href="https://golifelog.com/goals/30"&gt;Lifelog&lt;/a&gt;, where I write about learning to code, goals, productivity, indie hacking and tech for good.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>decodingcoding</category>
    </item>
    <item>
      <title>Don't be an SMS Spammer. Build a tool to help you manage your SMS using Twilio and Retool.</title>
      <author>Eric Goldman</author>
      <pubDate>Thu, 30 Sep 2021 23:02:13 +0000</pubDate>
      <link>https://dev.to/thisisgoldman/don-t-be-an-sms-spammer-build-a-tool-to-help-you-manage-your-sms-using-twilio-and-retool-1l77</link>
      <guid>https://dev.to/thisisgoldman/don-t-be-an-sms-spammer-build-a-tool-to-help-you-manage-your-sms-using-twilio-and-retool-1l77</guid>
      <description>&lt;p&gt;In this tutorial, you'll add text messaging to a &lt;a href="https://retool.com/"&gt;Retool&lt;/a&gt; app using &lt;a href="https://www.twilio.com/"&gt;Twilio&lt;/a&gt; and &lt;a href="https://www.twilio.com/"&gt;Sync Inc&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Text messages (SMS) are an excellent medium for chatting with customers or notifying your team. Adding text messaging to a Retool app is easy with Twilio. Still, there are many prerequisites: Before you can send your first SMS from Retool, you'll need to set up and deploy a server that adequately handles Twilio webhooks. Then, as messages come in and out, you'll need to implement middleware to match conversations to your users appropriately. And if you want to pull insights from your conversations, you'll need to work out a process for extracting your data from Twilio.&lt;/p&gt;

&lt;p&gt;Using Sync Inc, you'll skip these prerequisites. Sync Inc replicates Twilio to your Postgres database in real-time. No need to handle webhooks, deploy a server, or rethink your schema. With all your Twilio data in your database, mapping conversations to users is a simple &lt;code&gt;JOIN&lt;/code&gt;. Pair a Sync Inc database with Retool's first-class support for SQL - and you can add SMS (or phone calls, WhatsApp, etc.) to your app in no time.&lt;/p&gt;

&lt;p&gt;To show you how these systems work together, you'll build a Retool app that allows you to select a user, read text message conversation history, and continue the conversation by sending a new reply.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-twilio"&gt;
  &lt;/a&gt;
  Setting up Twilio
&lt;/h2&gt;

&lt;p&gt;You'll need a Twilio account and a Twilio phone number. Follow &lt;a href="https://www.twilio.com/docs/sms/quickstart/node#sign-up-for-twilio-and-get-a-twilio-phone-number"&gt;Twilio's quickstart guide&lt;/a&gt; to get your account and phone number set up.&lt;/p&gt;

&lt;p&gt;Out of the box, Twilio uses webhooks to notify you of incoming messages. Without a webhook in place, Twilio will automatically respond to any incoming messages with errors. To assign a webhook to your new phone number, navigate to the &lt;a href="https://console.twilio.com/us1/develop/phone-numbers/manage/active?frameUrl=/console/phone-numbers/incoming"&gt;active numbers&lt;/a&gt; page and select the phone number you just created:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f1UQcMa3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/002_select_phone.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f1UQcMa3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/002_select_phone.png" alt="Select phone"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scroll down to the messaging section, and under &lt;strong&gt;A message comes in&lt;/strong&gt; select &lt;strong&gt;webhook&lt;/strong&gt;. Enter Sync Inc's homepage (&lt;code&gt;https://syncinc.so&lt;/code&gt;), select &lt;code&gt;HTTP GET&lt;/code&gt;, and click &lt;strong&gt;Save&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KtvtqcUE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/003_enter_webhook.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KtvtqcUE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/003_enter_webhook.png" alt="Add webhook"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As the last step, you'll want to be able to test your new messaging capabilities. To make testing possible, go to the &lt;a href="https://console.twilio.com/us1/develop/phone-numbers/manage/verified"&gt;Verified Caller ID's&lt;/a&gt; page and click the &lt;strong&gt;+ button&lt;/strong&gt; to enter and verify a phone number you can send and receive texts from:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LQnp_QOe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/004_verify_num.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LQnp_QOe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/004_verify_num.png" alt="Verify number"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You've now configured Twilio so that you can send and receive text messages. Before moving on, note down your Twilio credentials from your Twilio dashboard:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0037itbj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/005_twilio_details.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0037itbj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/005_twilio_details.png" alt="Twilio details"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Phone number&lt;/li&gt;
&lt;li&gt;Account SID&lt;/li&gt;
&lt;li&gt;Auth token&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-sync-inc"&gt;
  &lt;/a&gt;
  Setting up Sync Inc
&lt;/h2&gt;

&lt;p&gt;Sync Inc will sync your Twilio data to a Postgres database in real-time. Within a couple of seconds, all new Twilio conversation data will be updated in your database.&lt;/p&gt;

&lt;p&gt;To get your Twilio sync started, &lt;a href="https://app.syncinc.so/signup"&gt;create a Sync Inc account&lt;/a&gt; and then select &lt;strong&gt;Twilio&lt;/strong&gt; as your source:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r4GOOvR7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/006_select_twilio.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r4GOOvR7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/006_select_twilio.png" alt="Select Twilio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter your Twilio &lt;strong&gt;Account SID&lt;/strong&gt; and &lt;strong&gt;Auth Token&lt;/strong&gt; (which you noted down earlier).&lt;/p&gt;

&lt;p&gt;For your destination, you have two options. You can sync to a &lt;strong&gt;Sync Inc-hosted database&lt;/strong&gt; that will be immediately provisioned for you. Or, you can select to sync to your &lt;strong&gt;self-hosted database&lt;/strong&gt;. To get up and running quickly in this tutorial, select to sync to a new Sync Inc database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pz2WGapa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/007_enter_twilio_details.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pz2WGapa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/007_enter_twilio_details.png" alt="Enter twilio details"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For your full application, you'll likely want to sync to your database so you have more control and can query across your data with ease. You can learn more about syncing to your database in the &lt;a href="https://docs.syncinc.so/self-hosted"&gt;Sync Inc docs&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, click &lt;strong&gt;Start syncing&lt;/strong&gt;. Sync Inc will provision your database and begin syncing your Twilio data. You can learn more about the full sync process in our &lt;a href="https://docs.syncinc.so/twilio/reference"&gt;Twilio reference docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You'll be presented with the credentials for your database. Note down these credentials or keep the Sync Inc tab open as you set up Retool.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-your-data"&gt;
  &lt;/a&gt;
  Setting up your data
&lt;/h2&gt;

&lt;p&gt;The purpose of your Retool app is to quickly allow you to communicate with users or your team members using SMS. So your app is going to need some user data.&lt;/p&gt;

&lt;p&gt;Ideally, you already have this data (i.e., names and phone numbers) in your database. But for this tutorial, we'll use some fake data in Airtable to help jump-start the process:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5HxHHNoB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/008_airtable.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5HxHHNoB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/008_airtable.png" alt="Airtable base"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you don't have one already, create a &lt;a href="https://airtable.com"&gt;free Airtable account&lt;/a&gt;. Then, open up the &lt;a href="https://airtable.com/shrOWbIbTw8sdM2y1"&gt;Airtable template&lt;/a&gt; we put together for this tutorial and copy it to your workspace by clicking the &lt;strong&gt;Copy base&lt;/strong&gt; link in the top right corner.&lt;/p&gt;

&lt;p&gt;Open the &lt;strong&gt;Twilio + Retool + Sync Inc&lt;/strong&gt; base you just added to your workspace, and in the first row, enter your details - including the phone number that you verified in your Twilio account earlier.&lt;/p&gt;

&lt;p&gt;Now, sync your Airtable base to your Sync Inc database. To do so, head back to Sync Inc and click the &lt;strong&gt;Add Sync&lt;/strong&gt; button. Select Airtable and enter your &lt;strong&gt;Airtable API Key&lt;/strong&gt; (which you can find on your &lt;a href="https://airtable.com/account"&gt;Airtable account page&lt;/a&gt;). Select the &lt;strong&gt;Twilio + Retool + Sync Inc&lt;/strong&gt; base and sync all the tables:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--un7Ej0pI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/009_sync_at.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--un7Ej0pI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/009_sync_at.png" alt="Sync Airtable"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To make things easier, sync your sample user data to the same database you are using for your Twilio data. This way, you'll only need to connect one database to Retool and simplify your queries. To do so, click the &lt;strong&gt;Edit&lt;/strong&gt; button in the &lt;strong&gt;Destination&lt;/strong&gt; section and select &lt;strong&gt;Choose existing&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--azjVCS1y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/010_sync_existing.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--azjVCS1y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/010_sync_existing.png" alt="Select existing DB"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the window that appears, select the database that contains your Twilio data:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PY3ky1x8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/011_select_twilio_db.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PY3ky1x8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/011_select_twilio_db.png" alt="Select existing DB"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Change the name of the schema Sync Inc will sync to. Something like &lt;code&gt;users&lt;/code&gt; will be easy and short. Then click &lt;strong&gt;Confirm changes&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gi7hPGOT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/012_set_schema.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gi7hPGOT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/012_set_schema.png" alt="Select existing DB"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, click the &lt;strong&gt;Create&lt;/strong&gt; button to sync your data into a new schema within the same database containing all your Twilio data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-retool"&gt;
  &lt;/a&gt;
  Setting up Retool
&lt;/h2&gt;

&lt;p&gt;With all your data in place, you're ready to connect your Sync Inc database and Twilio to Retool.&lt;/p&gt;

&lt;p&gt;To get going, create a free &lt;a href="https://login.retool.com/auth/signup"&gt;Retool account&lt;/a&gt;, then go to the &lt;strong&gt;Resources tab&lt;/strong&gt; and click the &lt;strong&gt;Create new&lt;/strong&gt; button. Select &lt;strong&gt;Postgres&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Enter the name for your resource (i.e., &lt;code&gt;Sync Inc&lt;/code&gt;) and then enter the &lt;strong&gt;Host&lt;/strong&gt;, &lt;strong&gt;Port&lt;/strong&gt;, &lt;strong&gt;Database name&lt;/strong&gt;, &lt;strong&gt;Database username&lt;/strong&gt;, and &lt;strong&gt;Password&lt;/strong&gt; for your Sync Inc database (you can use the credentials from either your Twilio resource or your Airtable sample data resource — since both are in the same database, the credentials are the same!). You can copy and paste these from Sync Inc. Then click the blue &lt;strong&gt;Create resource&lt;/strong&gt; button:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zhxrCr5p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/013_add_sync_inc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zhxrCr5p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/013_add_sync_inc.png" alt="Add Sync Inc"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With your Sync Inc database connected, you'll now create a Twilio resource so you can easily write to the Twilio API. On the resources tab, click the &lt;strong&gt;Create new&lt;/strong&gt; button again. This time, select &lt;strong&gt;Twilio&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Give your resource a name (something like &lt;code&gt;Twilio&lt;/code&gt; :) ) and then enter your &lt;strong&gt;Twilio Account SID&lt;/strong&gt; and &lt;strong&gt;Twilio Auth token&lt;/strong&gt;, which you noted earlier. Click &lt;strong&gt;Create resource&lt;/strong&gt; again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bsN3Rkl5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/014_add_twilio.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bsN3Rkl5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/014_add_twilio.png" alt="Add Twilio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-your-retool-app"&gt;
  &lt;/a&gt;
  Building your Retool app
&lt;/h2&gt;

&lt;p&gt;For this Retool app, you want to select a user, see their details and conversation history, and then continue the conversation by sending a new text message to the user.&lt;/p&gt;

&lt;p&gt;To build this app, you'll first scaffold the front-end in Retool. Then you'll populate that front-end with data by querying your Sync Inc database. Finally, you'll add the ability to write and send new text messages to the selected user.&lt;/p&gt;

&lt;p&gt;To get started, create a new blank Retool app by clicking the &lt;strong&gt;Create new&lt;/strong&gt; button and selecting &lt;strong&gt;Create a blank app&lt;/strong&gt;. Then name your app something like &lt;code&gt;Comms Central Command&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scaffold-the-ui"&gt;
  &lt;/a&gt;
  Scaffold the UI
&lt;/h3&gt;

&lt;p&gt;The interface for this app will have four main components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A table where you can sort, search, and find the user you want to chat with.&lt;/li&gt;
&lt;li&gt;A user details card that shows some details about the user.&lt;/li&gt;
&lt;li&gt;A chat timeline that shows the chronological order of sent and received messages.&lt;/li&gt;
&lt;li&gt;A form where you can compose and send new messages.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Drag and drop the following components onto your canvas and enter placeholder text for now:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L9TboMc3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/001_scaffold.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L9TboMc3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/001_scaffold.png" alt="Scaffold the UI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you need more guidance on scaffolding your UI, check out our more thorough step-by-step Retool tutorial &lt;a href="https://docs.syncinc.so/playbooks/airtable/retool-svoc"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#query-your-data"&gt;
  &lt;/a&gt;
  Query your data
&lt;/h3&gt;

&lt;p&gt;With your scaffolding in place, begin to add data to your application, starting with the users table.&lt;/p&gt;

&lt;p&gt;Open up the bottom drawer where you can create a new query. Select your &lt;strong&gt;Sync Inc&lt;/strong&gt; Postgres database as the resource and enter the following query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
  &lt;span class="n"&gt;id_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;string_agg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;','&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;phone&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;
&lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;id_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This query selects several columns from the &lt;code&gt;users&lt;/code&gt; table within the &lt;code&gt;users&lt;/code&gt; schema. It also performs a &lt;em&gt;string aggregation&lt;/em&gt; to concatenate the &lt;code&gt;first_name&lt;/code&gt; and &lt;code&gt;last_name&lt;/code&gt; columns.&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Save and run&lt;/strong&gt; and then rename the query &lt;code&gt;get_users&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QX036fwR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/016_get_users.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QX036fwR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/016_get_users.png" alt="Get users"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, pipe the data from your new &lt;code&gt;get_users&lt;/code&gt; query into the table component. Select the table component on the canvas and in the inspector on the right, enter &lt;code&gt;{{get_users.data}}&lt;/code&gt; into the data field. The double brackets tell Retool you'll be entering JavaScript. Then the &lt;code&gt;get_users.data&lt;/code&gt; pulls the data in from the query.&lt;/p&gt;

&lt;p&gt;You'll see the table now contains the data from your query:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--urM_a67R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/017_pop_table.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--urM_a67R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/017_pop_table.png" alt="Populate table"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With your user data in the table, you can now populate the user details card.&lt;/p&gt;

&lt;p&gt;Select the &lt;strong&gt;First Last&lt;/strong&gt; placeholder text in the card. In the inspector on the right, replace the value with &lt;code&gt;# {{table1.selectedRow.data.name}}&lt;/code&gt;. This javascript statement pulls the &lt;code&gt;name&lt;/code&gt; field from the selected row in your table:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7j3D65mX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/018_detail_1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7j3D65mX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/018_detail_1.png" alt="Populate card 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finish populating the customer card by selecting the &lt;strong&gt;📨 user_email | 💬 user_phone&lt;/strong&gt; placeholder text. Replace the value in the inspector with &lt;code&gt;📨 {{table1.selectedRow.data.email}} | 💬 {{table1.selectedRow.data.phone}}&lt;/code&gt;. As before, this statement pulls in the user's email and phone details from the selected row in the table component:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CdZbjhL6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/019_detail_2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CdZbjhL6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/019_detail_2.png" alt="Populate card 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You have your user table and user details card populating with data. Now, pull in the conversations for each user from the &lt;code&gt;message&lt;/code&gt; table in your Sync Inc database.&lt;/p&gt;

&lt;p&gt;The first step in pulling in the users's messages is to join the &lt;code&gt;user&lt;/code&gt; data to the &lt;code&gt;message&lt;/code&gt; data using the phone number. To do so, you need to ensure that the format of the phone number is consistent. Twilio uses the &lt;a href="https://www.twilio.com/docs/glossary/what-e164"&gt;E.164 standard format&lt;/a&gt; for phone numbers - so you'll need a helper function to ensure all your user's phone numbers are converted into the E.164 format.&lt;/p&gt;

&lt;p&gt;Create a helper function by opening up the bottom drawer, and clicking to create a new JavaScript transformer. Then, paste in the following script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nx"&gt;table1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectedRow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;}}.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;0-9&lt;/span&gt;&lt;span class="se"&gt;]{0,14}&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newString&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Join parts returned from RegEx match&lt;/span&gt;
  &lt;span class="nx"&gt;newString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Start number with "+"&lt;/span&gt;
  &lt;span class="nx"&gt;newString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;newString&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Limit length to 15 characters&lt;/span&gt;
  &lt;span class="nx"&gt;newString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newString&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newString&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This script pulls in the selected phone number from the table and uses RegEx to format and return the phone number in E.164 format.&lt;/p&gt;

&lt;p&gt;Save this helper function and name it &lt;code&gt;e164_phone&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LaF34O0j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/020_transformer.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LaF34O0j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/020_transformer.png" alt="Transformer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, create a new query on your Sync Inc Postgres database and paste in the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
  &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date_sent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;
  &lt;span class="n"&gt;message&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt;
  &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;e164_phone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="err"&gt;}}&lt;/span&gt;
  &lt;span class="k"&gt;OR&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;{{&lt;/span&gt;&lt;span class="n"&gt;e164_phone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="err"&gt;}}&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date_sent&lt;/span&gt; &lt;span class="k"&gt;asc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This query uses the phone number for the selected user (formatted in e.164 by your helper function) to pull in any message sent to or received from that user. Even though the query returns an empty table for now (you haven't sent or received a text yet from your Twilio phone number) can click to save the query and name it &lt;code&gt;get_messages&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KS7CYcJA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/021_get_messages.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KS7CYcJA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/021_get_messages.png" alt="Get messages"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We'll want to run this query every 15 seconds or so to see if any new messages from the user arrived. Click on the &lt;strong&gt;Advanced&lt;/strong&gt; tab and check the box to &lt;strong&gt;Run this query periodically&lt;/strong&gt;. Then, set the period interval to &lt;strong&gt;15000&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OPUvSn3e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/022_advanced.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OPUvSn3e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/022_advanced.png" alt="Get messages"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, map this query to your UI by selecting the timeline component. In the inspector, make the following changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select &lt;strong&gt;Grouped&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;For &lt;strong&gt;Items&lt;/strong&gt; enter: &lt;code&gt;{{get_messages.data.body}}&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;For &lt;strong&gt;Timestamps&lt;/strong&gt; enter: &lt;code&gt;{{get_messages.data.date_sent}}&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The timeline will appear blank (we still haven't sent a message yet!) but your UI is now pulling in all the data you need from your database:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u7PYL7Ns--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/023_set_timeline.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u7PYL7Ns--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/023_set_timeline.png" alt="Set timeline"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#send-and-receive-messages"&gt;
  &lt;/a&gt;
  Send and receive messages
&lt;/h3&gt;

&lt;p&gt;With your database reads working, your Retool app is already configured to receive incoming messages. Now, you'll setup Twilio with the Sync Inc &lt;code&gt;/wait&lt;/code&gt; endpoint to send messages - completing the loop.&lt;/p&gt;

&lt;p&gt;Open the bottom drawer in Retool and create a new query on your Twilio resource as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iJ2hzYNv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/024_send_sms.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iJ2hzYNv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/024_send_sms.png" alt="Send SMS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Operation&lt;/strong&gt;: &lt;code&gt;POST&lt;/code&gt; to the &lt;code&gt;/2010-04-01/Accounts/{AccountSid}/Messages.json&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;To&lt;/strong&gt;: &lt;code&gt;{{format_for_twilio.value}}&lt;/code&gt; - this is the phone number of the selected customer.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;From&lt;/strong&gt;: Your Twilio phone number (enter it as a string using "")&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Body&lt;/strong&gt;: &lt;code&gt;{{textArea1.value}}&lt;/code&gt; - this is the value of the text input in your UI.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Save the query and name it &lt;code&gt;send_sms&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After sending a message to a user, you'll want to run the &lt;code&gt;get_messages&lt;/code&gt; query to populate the new message into your UI. Sync Inc provides a convenient &lt;code&gt;/wait&lt;/code&gt; endpoint. It will return a &lt;code&gt;200 ok&lt;/code&gt; after all events have been written to the database. This ensure that when you query your database for new messages it includes the message you just sent.&lt;/p&gt;

&lt;p&gt;To configure this into your Retool app, click to create one more query and select &lt;strong&gt;RESTQuery&lt;/strong&gt; as the resource. Then, configure the query as a simple &lt;code&gt;GET&lt;/code&gt; request to the &lt;code&gt;wait/&lt;/code&gt; URL for your Twilio resource (you can get the unique &lt;code&gt;wait/&lt;/code&gt; endpoint for your resource from the Sync Inc console by clicking the &lt;strong&gt;Connect&lt;/strong&gt; button on your resource):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h64IvGQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/025_wait.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h64IvGQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/025_wait.png" alt="Wait"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Save and run&lt;/strong&gt;. Then name your query &lt;code&gt;sync_inc_wait&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, you need to chain these queries together: As soon as a message is sent, the &lt;code&gt;/wait&lt;/code&gt; endpoint is called, then the &lt;code&gt;get_messages&lt;/code&gt; query is run, and simultaneously the form for sending the text messages is cleared.&lt;/p&gt;

&lt;p&gt;To do so, open the &lt;code&gt;send_sms&lt;/code&gt; query, and under &lt;strong&gt;Event handlers&lt;/strong&gt; click the &lt;strong&gt;New&lt;/strong&gt; link. Configure the event handler to trigger the &lt;code&gt;sync_inc_wait&lt;/code&gt; query on success. Then &lt;strong&gt;Save&lt;/strong&gt; your changes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PxPbv-dE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/026_event_1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PxPbv-dE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/026_event_1.png" alt="Event 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, reopen the &lt;code&gt;sync_inc_wait&lt;/code&gt; query and add two more event handlers:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ob10U3JZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/027_event_2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ob10U3JZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/027_event_2.png" alt="Event 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On success, trigger the &lt;code&gt;get_messages&lt;/code&gt; query.&lt;/li&gt;
&lt;li&gt;On success, clear the value of the &lt;code&gt;textArea1&lt;/code&gt; component.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last step is to connect the &lt;code&gt;send_sms&lt;/code&gt; query to your app.&lt;/p&gt;

&lt;p&gt;Select the &lt;strong&gt;Send&lt;/strong&gt; button in your UI, and add an event handler that triggers the &lt;code&gt;send_sms&lt;/code&gt; query when clicked:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jYSp8F5r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/028_trigger_button.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jYSp8F5r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/028_trigger_button.png" alt="Event 3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-your-app"&gt;
  &lt;/a&gt;
  Test your app
&lt;/h3&gt;

&lt;p&gt;Let's see your app in action. Select your test user in the table (i.e., the user with your validated phone number). Then, compose a quick message to yourself and click the &lt;strong&gt;Send&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;Voila - the message is sent! On your phone, reply to the message... and it appears in your app:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bhVbn2AY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/029_final.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bhVbn2AY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.syncinc.so/assets/retool-sms/029_final.png" alt="Final"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h2&gt;

&lt;p&gt;You can now message anyone with a phone number from your Retool app. You didn't need to setup a back-end, deal with webhooks, or think twice about missing an event. You used SQL to quickly pull your data together, and Retools easy to build UI and query management to string it all together.&lt;/p&gt;

&lt;p&gt;From here, you can tailor the app to your needs. Add workflows, validation, bulk messaging, and more.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>twilio</category>
      <category>tooling</category>
      <category>webdev</category>
    </item>
    <item>
      <title>HacktoberFest is here 🎯</title>
      <author>Karishma</author>
      <pubDate>Thu, 30 Sep 2021 22:34:28 +0000</pubDate>
      <link>https://dev.to/karishmashukla/hacktoberfest-is-here-3gbd</link>
      <guid>https://dev.to/karishmashukla/hacktoberfest-is-here-3gbd</guid>
      <description>&lt;p&gt;If you are someone who loves open-source or is just getting started with it, Hacktoberfest is for you! 🎉&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Hacktoberfest?&lt;/strong&gt;&lt;br&gt;
Hacktoberfest is an annual event hosted by DigitalOcean that aims to encourage developers to contribute to open-source projects and give back to the community. &lt;br&gt;
&lt;strong&gt;Register at: &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;https://hacktoberfest.digitalocean.com/&lt;/a&gt;&lt;/strong&gt; by just clicking on Start Hacking!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can I participate?&lt;/strong&gt;&lt;br&gt;
Contributions are done by submitting a pull request to any repository that is participating in Hacktoberfest. Once your pull request is accepted, it will count into your participation in Hacktoberfest.&lt;/p&gt;

&lt;p&gt;To successfully participate in Hacktoberfest, you will need to submit &lt;strong&gt;at least 4 accepted pull requests&lt;/strong&gt; to any repositories that are participating in Hacktoberfest (Seems pretty fun, right?)&lt;/p&gt;

&lt;p&gt;Once Hacktoberfest is over, which is at the end of October, &lt;em&gt;the first 55,000 participants to have submitted at least 4 accepted pull requests will receive a t-shirt with a swag pack.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can participate as a maintainer or participant! Know more about the rules and roles &lt;strong&gt;here: &lt;a href="https://hacktoberfest.digitalocean.com/"&gt;https://hacktoberfest.digitalocean.com/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;🤔 &lt;strong&gt;How do I find repositories to contribute to?&lt;/strong&gt;&lt;br&gt;
Don't panic! Look for repositories with the &lt;strong&gt;hacktoberfest label&lt;/strong&gt; and issues with the &lt;strong&gt;hacktoberfest tag.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;I recently started building a UI Component Library for React called &lt;strong&gt;Chic UI - &lt;a href="https://github.com/karishmashuklaa/chic-ui"&gt;https://github.com/karishmashuklaa/chic-ui&lt;/a&gt;&lt;/strong&gt; 🚀&lt;br&gt;
You can contribute to Chic and get started with Hacktoberfest! As I have just started building it, there are tons and tons of components that can be added! Hey you, let's build it together!&lt;/p&gt;

&lt;p&gt;Look at Hacktoberfest as an opportunity to learn more about open-source, collaboration, and lots of fun! 💅&lt;br&gt;
&lt;strong&gt;Overcome your anxiety of contributing to open-source! 💪&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Also, if any of your repositories will be participating in Hacktoberfest, drop it in the comments ✌&lt;br&gt;
All the best! Keep hacking 😎&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>github</category>
      <category>hacktoberfest</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Automatically Redirect Auth0 WordPress Users to SSO Login</title>
      <author>Cody Ogden</author>
      <pubDate>Thu, 30 Sep 2021 22:17:08 +0000</pubDate>
      <link>https://dev.to/codyogden/automatically-redirect-auth0-wordpress-users-to-sso-login-2524</link>
      <guid>https://dev.to/codyogden/automatically-redirect-auth0-wordpress-users-to-sso-login-2524</guid>
      <description>&lt;p&gt;A recent project had me working with the &lt;a href="https://wordpress.org/plugins/auth0/"&gt;Login by Auth0&lt;/a&gt; again. It's a great, simple, "does one thing and doesn't try to take over the WordPress dashboard" plugin. In my opinion, this is the best kind of plugin. And while it has its issues around documentation, I was presented with some challenges around building custom login buttons that bypass the included Auth0 login screen.&lt;/p&gt;

&lt;p&gt;Ideally, the user could click "Sign In with Google" or "Sign In with Apple," and they would be immediately sent to the services' login flow avoiding clicking through the example-tenant-domain.auth0.com login page. While &lt;a href="https://auth0.com/docs/cms/wordpress-plugin/extend-login-by-auth0"&gt;Auth0's documentation&lt;/a&gt; for this plugin could be better, I was able to create separate buttons that act much more like a native SSO login experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-skip-the-auth0-login-page-while-using-the-auth0-wordpress-plugin"&gt;
  &lt;/a&gt;
  How to skip the Auth0 Login page while using the Auth0 WordPress plugin?
&lt;/h2&gt;

&lt;p&gt;The Auth0 plugin has a built-in way to auto-direct users to a specific login provider (i.e. Users can specify &lt;code&gt;google-oauth2&lt;/code&gt; and the login will automatically redirect to Google). We're going to co-opt this ability to build our own, automatically redirecting login URLs.&lt;/p&gt;

&lt;p&gt;First, let's set a valid list of subscribers. This simple function will return a filterable array of SSO provider slugs that match our settings in Auth0.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;wpa0_sso_connections&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$connections&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;'google-oauth2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'apple'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;apply_filters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'wpa0_sso_connections'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$connections&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next, we'll build a function that can potentially replace all (or some) of the &lt;code&gt;wp_login_url()&lt;/code&gt;  function. We can use this function in templating when we create specific buttons for provider logins, or a drop-in replacement where we'd normally use &lt;code&gt;wp_login_url&lt;/code&gt;. It takes three, optional arguments: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;$connection&lt;/code&gt;: The Auth0 provider slug.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$redirect&lt;/code&gt;: The URL the user should be redirected to after they successfully login.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$force_reauth&lt;/code&gt;: Allows us to force reauthorization even if a cookie is present (force a login on the user).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If no arguments are passed, it will simply return the default &lt;code&gt;wp_login_url&lt;/code&gt;, which will redirect users to the Auth0 login page.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;wpa0_sso_login_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$redirect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$force_reauth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$login_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;wp_login_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$redirect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$force_reauth&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;apply_filters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'wpa0_sso_login_url'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$connection&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nf"&gt;add_query_arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'connection'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$login_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$login_url&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If you pass a provider slug to the $connection argument, you'll find that the &lt;code&gt;wp_login_url&lt;/code&gt; is returned with an extra query var. (e.g. &lt;code&gt;https://example.com/wp-login.php?connection=google-oauth2&lt;/code&gt;). This query var is key to letting us tell Auth0 to which provider it should automatically forward the user.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-use-auth0getautologinconnection-to-redirect-users"&gt;
  &lt;/a&gt;
  How to use auth0_get_auto_login_connection to redirect users?
&lt;/h2&gt;

&lt;p&gt;Auth0 provides a filter called &lt;a href="https://auth0.com/docs/cms/wordpress-plugin/extend-login-by-auth0#auth0_get_auto_login_connection"&gt;&lt;code&gt;auth0_get_auto_login_connection&lt;/code&gt;&lt;/a&gt; that does exactly what you might think: it returns the connection specified by a user in the plugin's settings. This filter is run during a user accessing the login link we generated above. We can return the connection slug we provided in the login link above, and the user will be automatically redirected to that provider's SSO.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nf"&gt;add_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;'auth0_get_auto_login_connection'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'wpa0_auto_login_filter'&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;wpa0_auto_login_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'connection'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'connection'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;in_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'connection'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;array_keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;wpa0_sso_connections&lt;/span&gt;&lt;span class="p"&gt;())))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$_GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'connection'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$connection&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This function checks to ensure we have a connection query var and that it's not empty, then it checks to ensure the query var that was passed is valid by checking it against our &lt;code&gt;wpa0_sso_connections&lt;/code&gt; function. If all those conditions pass, it returns the connection query var, triggering the user's login attempt to be immediately forwarded to the provider.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-create-auth0-automatic-redirect-login-button"&gt;
  &lt;/a&gt;
  How to create Auth0 automatic redirect login button?
&lt;/h2&gt;

&lt;p&gt;Let's put it all together. In our fake templating file, let's pretend we have a link to Sign In with Apple.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&amp;gt;&lt;/span&gt;Sign In with Apple&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's add our &lt;code&gt;wpa0_sso_login_url&lt;/code&gt; function with the Apple connection slug, and then let's redirect users to &lt;code&gt;/wp_admin&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="nf"&gt;wp_sso_login_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'apple'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;admin_url&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Sign In with Apple&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The above will output:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://example.com/wp-login.php?redirect_to=https%3A%2F%2Fexample.com%2Fwp-admin%2F&amp;amp;connection=apple"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Sign In with Apple&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Notice the &lt;code&gt;connection&lt;/code&gt; query variable? This will be detected by our &lt;code&gt;wpa0_auto_login_filter&lt;/code&gt; when a user clicks. Since &lt;code&gt;apple&lt;/code&gt; is a valid Auth0 connection slug in our &lt;code&gt;wpa0_sso_connections&lt;/code&gt; function, the user will automatically be sent to the Apple sign in screen and then redirected to &lt;code&gt;/wp-admin&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;You can place all these functions in your theme's &lt;code&gt;functions.php&lt;/code&gt; file or inside your custom plugin. Here's a Gist with doc comments that summarizes this post.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;






&lt;p&gt;Thanks for reading! Follow me on &lt;a href="https://twitter.com/codyogden"&gt;Twitter&lt;/a&gt;! Originally published on &lt;a href="https://codyogden.com/blog/login-by-autho-wordpress-user-automatic-sso"&gt;my blog&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>wordpress</category>
      <category>auth0</category>
      <category>php</category>
      <category>sso</category>
    </item>
    <item>
      <title>Versionless APIs</title>
      <author>S ♠️</author>
      <pubDate>Thu, 30 Sep 2021 22:10:24 +0000</pubDate>
      <link>https://dev.to/growthatwundergraph/versionless-apis-3mlo</link>
      <guid>https://dev.to/growthatwundergraph/versionless-apis-3mlo</guid>
      <description>&lt;p&gt;Hello World! My name is S and I am the head of growth here at Wundergraph. The article was written by our CEO / CTO Jens Neuse. Enjoy!&lt;/p&gt;

&lt;p&gt;Versioning APIs is an essential part of the lifecycle of APIs. Some API styles, like GraphQL, completely miss versioning and call this a feature. Others, like RESTful APIs, give developers a lot of different ways to implement versioning.&lt;/p&gt;

&lt;p&gt;I think that versioning for APIs is important but also way too complex. It’s important because backwards compatibility is critical in a world of inter-connected companies, using APIs as the bridge. At the same time, it’s also a complex problem to solve for development teams.&lt;/p&gt;

&lt;p&gt;More and more companies are starting to understand their APIs as products. The companies of tomorrow will not operate in isolation. Instead, they will be using APIs from 3rd parties while providing APIs to others themselves.&lt;/p&gt;

&lt;p&gt;Relying on other companies APIs will give these companies an advantage as they can be more focused on their own business. At the same time, proving their own APIs as a product to other companies will give them an advantage over those companies who don’t let others easily integrate with them. All this will result in a win-win situation for those participating. I expect that this trend can only lead to exponential growth. The more problems are easily solvable by integrating with an API, the easier it becomes for others to build new business models on top, which again, will add more APIs to the ecosystem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We'll eventually reach a state where every problem can be solved by using an API.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So, what are the challenges ahead of us to get there?&lt;br&gt;
If we want to be able to solve any problem with APIs, we have to make sure that all APIs involved are backwards compatible, forever. If any API in this interconnected mesh of APIs introduces breaking changes, the whole system could fail just like a house of cards.&lt;/p&gt;

&lt;p&gt;Additionally, a lot of API consumers are not able to catch up with the changes you'd like to make to your API. Think of IoT devices for example. It might not be possible to update them once deployed. Another example is native apps for iOS and Android. Users are not automatically updating an app just because the developer decided to push an update. There's always a huge lag, up to a year or even more between shipping an update and deprecating an old version.&lt;/p&gt;

&lt;p&gt;At the same time, breaking changes are important. Maintaining APIs forever is hard, especially if you're trying to move fast or are working in new uncharted territory with little experience. You'll probably not be able to get your API right with the first iteration. Having to maintain backwards compatibility for your API can be a huge burden, eating up a lot of resources while distracting you from working on something new and innovative, something that gives your users additional value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ideally, you could introduce breaking changes whenever you want, without breaking anything.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this post, I'll explain a concept on how we can achieve exactly this. I want you to be able to break your API all the time, but without breaking any of your API clients.&lt;/p&gt;

&lt;p&gt;You'll also see why we're going to be using GraphQL as the underlying API specification. Even though OpenAPI Specification has more adoption, we'll see why GraphQL is going to rule the integration market in the upcoming years.&lt;/p&gt;

&lt;p&gt;You've probably read about the "advantages" of GraphQL over REST. Most of these blog posts are just trying to surf the hype wave. In this blog post, I'll present you a real advantage, not the usual underfetching, overfetching fad, we'll also not "generate" APIs today, even though it gives you a lot of dopamine in the first 5 minutes (and a lot of stress when you have to add custom business logic).&lt;/p&gt;

&lt;p&gt;I hope, the "REST enthusiasts" are still onboard. You'll learn something cool today, I promise.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#versionless-apis"&gt;
  &lt;/a&gt;
  Versionless APIs
&lt;/h1&gt;

&lt;p&gt;I call the concept I'm explaining today Versionless APIs. Versionless doesn't mean there are no versions. Versionless APIs is meant in the same way as Serverless.&lt;/p&gt;

&lt;p&gt;Serverless is not about "no servers". Serverless means, you don't have to deal with servers.&lt;/p&gt;

&lt;p&gt;Versionless means, you don't have to deal with versions.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#misconceptions-about-versioning-graphql-and-rest-apis"&gt;
  &lt;/a&gt;
  Misconceptions about versioning GraphQL and REST APIs
&lt;/h1&gt;

&lt;p&gt;I talked about versioning before but am happy to recap again.&lt;/p&gt;

&lt;p&gt;When you read about the advantages of GraphQL over REST APIs, you'll hear quite often that GraphQL is better because you don't "have to version your API".&lt;/p&gt;

&lt;p&gt;This statement is driving me nuts, because it makes absolutely no sense at all. GraphQL is not better in any sense when it comes to versioning. If you don't version your REST API, there's absolutely no difference between the two.&lt;/p&gt;

&lt;p&gt;GraphQL simply doesn't offer a solution to versioning, Although that's not really true. You could add a new field and give it a version suffix, then deprecate the old one using the &lt;a class="mentioned-user" href="https://dev.to/deprecated"&gt;@deprecated&lt;/a&gt;
 directive.&lt;/p&gt;

&lt;p&gt;Here's an example, Version 1:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type Query {
    hello: String
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Version 2:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type Query {
    hello: String @deprecated(reason: "please use helloV2 instead")
    helloV2(arg: String!): String
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What's the difference between the example above and adding a new endpoint to your REST API, with a version tag in the URL, as a Query Parameter or maybe a Header?&lt;/p&gt;

&lt;p&gt;For both REST and GraphQL you'd have to either maintain two implementations, one for hello and one for helloV2.&lt;/p&gt;

&lt;p&gt;There's also an IETF Draft by Erik Wilde on the Deprecation HTTP Header Field which does essentially the same thing as the &lt;a class="mentioned-user" href="https://dev.to/deprecated"&gt;@deprecated&lt;/a&gt;
 directive. Another Draft, again by Erik Wilde on the Sunset HTTP Header which helps developers understand when an API gets out of service. Erik seems to care about the lifecycle of APIs. Thank you, Erik!&lt;/p&gt;

&lt;p&gt;With all this, is there really any difference between REST and GraphQL when it comes to versioning? If you don't want to version your APIs, you could just not break them.&lt;/p&gt;

&lt;p&gt;Additionally, you could also have multiple versions of your GraphQL API. Who said, example.com/graphql/v2 is not ok? It might be hard to maintain because there's little tooling to support this use case, but it could be possible although I don't think it's a great idea.&lt;/p&gt;

&lt;p&gt;To end this excursion about misconceptions, I'd like to make a point that I don't consider GraphQL by itself as Versionless. I'll discuss later what exactly is meant by Versionless.&lt;/p&gt;

&lt;p&gt;First, let's talk about why GraphQL is such a great language for API integration.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-graphql-is-going-to-take-over-the-api-integration-market"&gt;
  &lt;/a&gt;
  Why GraphQL is going to take over the API integration market
&lt;/h1&gt;

&lt;p&gt;This is the section you've probably been waiting for. I'm very happy to share this concept with you today. We're actively working on this right now, if you're interested in trying it out as early as possible, feel free to sign up with the early adopter programme.&lt;/p&gt;

&lt;p&gt;Ok, what is it that GraphQL is actually better at, compared to REST. Actually, it's not just GraphQL. GraphQL is not enough, it's about Federation.&lt;/p&gt;

&lt;p&gt;Federation allows you to extend types of another GraphQL API. The other feature that's going to help us is Interfaces, rarely used but extremely powerful.&lt;/p&gt;

&lt;p&gt;Let's look at an example. Imagine we have two companies in our universe, the first is providing an API to retrieve the Latitude and Longitude for a given address, the second one is offering an API to get the current weather for a Latitude-Longitude pair.&lt;/p&gt;

&lt;p&gt;How could our universe of APIs look like?&lt;/p&gt;

&lt;p&gt;First, let's look at the Geocoder company. What could we do to make it super easy to adopt?&lt;/p&gt;

&lt;p&gt;Instead of forcing a company into vendor lock-in, could we design an abstract API? Yes, absolutely!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;interface IGeoCoder {
    geoCode(address: String!): ILatLng
}
interface ILatLng {
    latitude: Float
    longitude: Float
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This abstract GeoCoder specification could live in a git repository, e.g. github.com/graphql-schemas/geocoder, but that's just an implementation detail. Let's keep it high level for now.&lt;/p&gt;

&lt;p&gt;Alright, how could the GeoCoder company implement this abstract GeoCoder?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type Query implements IGeoCoder {
    geoCode(address: String!): LatLng
}
type LatLng implements ILatLng @key(fields: "latitude longitude") {
    latitude: Float
    longitude: Float
}
interface IGeoCoder @specifiedBy(git: "github.com/graphql-schemas/geocoder") {
    geoCode(address: String!): ILatLng
}
interface ILatLng @specifiedBy(git: "github.com/graphql-schemas/geocoder") {
    latitude: Float
    longitude: Float
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this schema, the GeoCoder company made their API conform to the official GeoCoder standard.&lt;/p&gt;

&lt;p&gt;Side note for the people not so familiar with the Federation specification. The directive @key(fields: "latitude longitude") defines that LatLng becomes an entity as per the Federation spec. This means, any other service can look up a LatLng Object using the fields latitude and longitude.&lt;/p&gt;

&lt;p&gt;What's the benefit of this?&lt;/p&gt;

&lt;p&gt;It's not just that we've solved the vendor lock-in problem. We've also made it very easy for a company to adopt an API. As someone who's looking to solve a problem through APIs, look for an open standard, e.g. Open Banking, FHIR, or simpler ones like the GeoCoder above, search for companies that implement the spec and integrate with them.&lt;/p&gt;

&lt;p&gt;This will lead to an open market of APIs that have to compete on quality, latency, support, etc... because vendors can be swapped easily. Compare this to who things work today, this would be a huge step for API consumers. Nowadays, if you use a GeoCoder, want to send SMS or E-Mails via an API, you're very easily locked into a vendor, which doesn't have to fear competition that much because swapping vendors is expensive.&lt;/p&gt;

&lt;p&gt;There are even new startups that focus completely on helping users swap vendors for specific vendors. Ideally, you could just switch from one implementation to another and call it a day.&lt;/p&gt;

&lt;p&gt;Alright, we're done with the GeoCoder. If you liked the anti-vendor lock-in, and an open market for APIs, you'll be surprised what comes next, because this very next thing is about true API collaboration.&lt;/p&gt;

&lt;p&gt;Let's talk about the Weather API provider. How can they make sure to get as much exposure as possible? How can they be compatible to as many other APIs as possible?&lt;/p&gt;

&lt;p&gt;Here's a draft of how the Weather API "contract" could look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;interface IWeatherApi extends ILatLng
    @specifiedBy(git: "github.com/graphql-schemas/weather-api")
    @key(fields: "latitude longitude") {
        latitude: Float @external
        longitude: Float @external
        weatherInfo: IWeatherInfo
}
interface IWeatherInfo @specifiedBy(git: "github.com/graphql-schemas/weather-api") {
    temperature: ITemperature!
    summary: String!
}
interface ITemperature @specifiedBy(git: "github.com/graphql-schemas/weather-api") {
    Celsius: Float
    Farenheit: Float
}
interface ILatLng @specifiedBy(git: "github.com/graphql-schemas/geocoder") {
    latitude: Float
    longitude: Float
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's assume we're storing this specification for a simple weather API in a git repository too: "github.com/graphql-schemas/weather-api"&lt;/p&gt;

&lt;p&gt;The WeatherAPI provider can now implement the following schema:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type LatLng implements IWeatherApi @key(fields: "latitude longitude") {
    latitude: Float @external
    longitude: Float @external
    weatherInfo: WeatherInfo
}
type WeatherInfo implements IWeatherInfo {
    temperature: Temperature!
    summary: String!
}
type Temperature implements ITemperature {
    Celsius: Float
    Farenheit: Float
}
interface IWeatherApi extends ILatLng
    @specifiedBy(git: "github.com/graphql-schemas/weather-api")
    @key(fields: "latitude longitude") {
        latitude: Float @external
        longitude: Float @external
        weatherInfo: IWeatherInfo
}
interface IWeatherInfo @specifiedBy(git: "github.com/graphql-schemas/weather-api") {
    temperature: ITemperature!
    summary: String!
}
interface ITemperature @specifiedBy(git: "github.com/graphql-schemas/weather-api") {
    Celsius: Float
    Farenheit: Float
}
interface ILatLng @specifiedBy(git: "github.com/graphql-schemas/geocoder") {
    latitude: Float
    longitude: Float
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You're probably thinking what's going on here. It's indeed a lot to unpack so let's go step-by-step&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;interface IWeatherApi extends ILatLng
    @specifiedBy(git: "github.com/graphql-schemas/weather-api")
    @key(fields: "latitude longitude") {
        latitude: Float @external
        longitude: Float @external
        weatherInfo: IWeatherInfo
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We define a new contract, the IWeatherApi, which similarly to all other contracts is just an abstract definition and therefore an Interface. This Interface extends the ILatLng Interface, which as we can see below, is defined by the spec in a fictitious git repository ("github.com/graphql-schemas/weather-api"). The directive @key(fields: "latitude longitude") defines the two foreign keys for the Interface ILatLng, latitude and longitude. Furthermore, the @external directives mark the two fields a external, meaning that these come from the foreign service. The field weatherInfo has no directive attached, meaning our own service is going to provide it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;interface ILatLng @specifiedBy(git: "github.com/graphql-schemas/geocoder") {
    latitude: Float
    longitude: Float
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While defining the IWeatherApi contract, we're making use of the ILatLng Interface. By using the @specifiedBy directive, we're making sure that we link to the correct specification.&lt;/p&gt;

&lt;p&gt;By the way, it could be absolutely valid to implement multiple interfaces. If there are multiple standards, a service could implement one or more of them, allowing compatibility with all implemented (linked) specifications.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type LatLng implements IWeatherApi @key(fields: "latitude longitude") {
    latitude: Float @external
    longitude: Float @external
    weatherInfo: WeatherInfo
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we're implementing the IWeatherApi contract with a non-abstract, concrete type definition.&lt;/p&gt;

&lt;p&gt;So far, this should at least make some sense from a technical perspective. But what does all this mean from a business perspective?&lt;/p&gt;

&lt;p&gt;Both, the GeoCoder Api provider and the WeatherApi provider implement open standards, we've touched on anti vendor lock-in before. But the Weather API is a special case because it's not implementing the Query type. Instead, it's extending the ILatLng interface, specified in another open standard.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Building links between open standards of API specifications is the future of the API economy.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Instead of pushing the work of integrating multiple APIs to the API consumer, the API provider can actually add these links to other open standards, making it easy for consumers of such open standards to integrate with additional APIs.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#api-mesh-building-links-between-standardized-apis-specified-using-open-standards"&gt;
  &lt;/a&gt;
  API Mesh - building Links between standardized APIs, specified using open standards
&lt;/h1&gt;

&lt;p&gt;Imagine a world that is not just "API first", a world where we don't just treat APIs as products. Imagine a world where we standardize on specific use cases, like GeoCoding, transferring money, sending SMS, and define these as open standards.&lt;/p&gt;

&lt;p&gt;Imagine a world where we would not just define these open standards but also add links between them, a mesh of APIs or API mesh.&lt;/p&gt;

&lt;p&gt;Imagine a world where every company is API first, implements open standards and has "Links" to implementations of other API providers.&lt;/p&gt;

&lt;p&gt;Imagine the possibilities, how easily you'd be able to integrate APIs from 3rd parties. You'd look up the open standards you'd like to use, search for the best vendors and start using them.&lt;/p&gt;

&lt;p&gt;Are you interested in becoming one of the ambassadors for such a world? Join our early access program to join a group of forward thinkers and API &lt;a href="https://8bxwlo3ot55.typeform.com/to/bAaZKNd7?typeform-source=wundergraph.com"&gt;enthusiasts&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#versionless-apis-why-backwards-compatible-apis-are-so-important"&gt;
  &lt;/a&gt;
  Versionless APIs - Why backwards compatible APIs are so important
&lt;/h1&gt;

&lt;p&gt;I apologize if I drifted too far away from the core topic of this blog post. I'm going to do another write up on the concept of the API Mesh. That said, I think the stage is set to talk about why backwards compatible APIs are essential to make this future a reality.&lt;/p&gt;

&lt;p&gt;Think about a mesh of thousands of public (not unprotected) APIs with Links between all of them. APIs can be stacked on top of another. All this means, there are a lot of dependencies between all the API providers. If the GeoCoder API provider decides to rename the latitude field, it's not just affecting their own API consumers but also the Weather API provider, whose contract would immediately break. In reality, the consequences of a small breaking change could affect the whole mesh of APIs.&lt;/p&gt;

&lt;p&gt;So, I think it's clear to say that without 100% backwards compatible guarantees, it's not possible to turn this into reality.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-add-breaking-changes-to-your-graphql-api-without-breaking-clients"&gt;
  &lt;/a&gt;
  How to add breaking changes to your GraphQL API without breaking clients
&lt;/h1&gt;

&lt;p&gt;If you've made it this far, you're probably sold on the idea of an interconnected Mesh of GraphQL APIs and keen to see how it's possible to add breaking changes without breaking clients, or at least you're interested in a possible solution.&lt;/p&gt;

&lt;p&gt;If you've read a few other posts on this blog, like this super popular one on GraphQL security, you're probably familiar with the concept of how WunderGraph uses JSON-RPC in front of a virtual GraphQL API.&lt;/p&gt;

&lt;p&gt;For those not yet familiar with the concept, here's a short recap.&lt;/p&gt;

&lt;p&gt;WunderGraph takes all your REST- and GraphQL APIs as well as generated APIs from your Database and merges them into one single GraphQL Schema. This GraphQL schema is never directly exposed to the public, which is why I call it the "Virtual Schema" or "Virtual API". Instead of directly exposing a GraphQL API, we're taking the approach that is used by companies like Facebook, Twitter &amp;amp; Co., with one small adjustment, we've turned their custom-built solutions into a ready to use product.&lt;/p&gt;

&lt;p&gt;During development time, developers define the GraphQL operations they'd like to use in their application. These Operations will be compiled into something similar to "Prepared Statements", essentially removing GraphQL from the runtime and replacing it with JSON-RPC.&lt;/p&gt;

&lt;p&gt;This comes with a lot of upsides. On top of the list comes security. Not allowing clients to define arbitrary Queries is the easiest way to improve security. If you want to dive deeper into this topic, this post on security is for you.&lt;/p&gt;

&lt;p&gt;Pre-Compiling the Operations into efficient code also improves performance because a lot of complex computational steps, like validation or execution planning, can be skipped.&lt;/p&gt;

&lt;p&gt;Additionally, we're able to extract JSON-Schema definitions for each "persisted" Operation, allowing both server and client to validate the user inputs easily.&lt;/p&gt;

&lt;p&gt;But there's another fantastic side effect of this JSON-RPC GraphQL facade architecture which comes in quite handy when it comes to making APIs versionless.&lt;/p&gt;

&lt;p&gt;Coming back to the simple example from the beginning:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type Query {
    hello: String
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If a client was consuming this API, it'd probably look like this. The client would create an RPC Endpoint that stores a Query with the field hello, expecting a response looking like this (in JSON Schema format):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "type": "object",
    "properties": {
      "data": {
        "type": "object",
        "properties": {
          "hello": {
            "type": "string"
          },
          "additionalProperties": false
        }
      }
    },
    "additionalProperties": false,
    "required": ["data"]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the stored Query:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{ hello }&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Remember, this client and the whole API Mesh is relying on this API. Now, let's introduce a breaking change. We'll rename the field hello to helloV2, no deprecation, just rename and deploy.&lt;/p&gt;

&lt;p&gt;Whenever a client is generated, WunderGraph remembers which client understands which version of an API, like a Snapshot in time. If you keep a history of Schema Changes and know at which time a client was generated, you're able to tell which version of a Schema a client understands.&lt;/p&gt;

&lt;p&gt;With this information we're able to prevent the breaking change to be deployed automatically. But that's not all. We can also let you "auto-migrate" the client to the new Schema.&lt;/p&gt;

&lt;p&gt;I call it migrate, maybe the term is misleading, but I like the analogy of applying a set of migrations to a database until it reaches compatibility with the newest state.&lt;/p&gt;

&lt;p&gt;So, whenever your intention is to break an API, we'll prevent you from breaking clients by automatically stopping the deployment. Then, we'll let you write a "migration" script to migrate older clients onto the new Schema to make them compatible again.&lt;/p&gt;

&lt;p&gt;How would the migration look like in our scenario?&lt;/p&gt;

&lt;p&gt;First, instead of Querying the field hello, we should rewrite the Query to use the field helloV2. This would obviously still break the client because we're now no longer conforming to the JSON-Schema. So, in a second step we'd have to rename the field data.helloV2 to data.hello. Alternatively, we could have also rewritten the Query with an alias:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{ hello: helloV2 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this migration in place, we're good to deploy our new Schema with the breaking change.&lt;/p&gt;

&lt;p&gt;All clients with a timestamp older than the deployment time of the Schema will run through the migration.&lt;/p&gt;

&lt;p&gt;You can then look at your analytics and decide how many old versions of clients you'd like to support.&lt;/p&gt;

&lt;p&gt;What does this mean for an API provider from the business perspective?&lt;/p&gt;

&lt;p&gt;You can iterate a lot faster, break things, and move forward, all while not putting off your existing clients and users.&lt;/p&gt;

&lt;p&gt;What does it mean to developers?&lt;/p&gt;

&lt;p&gt;They've got a simple tool to migrate old clients. Thanks to the analytics, they can ship updates with confidence as they know they won't break any clients. This is going to be a game changer for those who have to support mobile clients. Mobile apps will not immediately download and install your updated app. You might have to maintain old versions of your API for months or even years. With this approach, there's one big challenge out of the way. You can use all the benefits of GraphQL while decoupling the client (which you cannot directly control) from the GraphQL Schema.&lt;/p&gt;

&lt;p&gt;You could even completely swap out the Schema, all while maintaining compatibility with all clients by migrating them over.&lt;/p&gt;

&lt;p&gt;Want to migrate from FaunaDB to dgraph or vice versa? We've got you covered!&lt;/p&gt;

&lt;p&gt;What does it mean to the API Mesh as a whole?&lt;/p&gt;

&lt;p&gt;As stated above, keeping the API Mesh as a whole intact, that is, not breaking it, is the key requirement to be able to build Links between the APIs and keeping the API contracts between implementations and clients intact.&lt;/p&gt;

&lt;p&gt;Without Versionless APIs, a Mesh of APIs isn't really possible.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#like-what-you-have-read-so-far"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Like what you have read so far?&lt;/strong&gt;
&lt;/h5&gt;

&lt;p&gt;Tell us &lt;a href="//www.wundergraph.com"&gt;here!&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#alternative-solutions-to-keep-your-graphql-api-backwards-compatible"&gt;
  &lt;/a&gt;
  Alternative solutions to keep your GraphQL API backwards compatible
&lt;/h1&gt;

&lt;p&gt;I'd like to highlight one open source solution that tries to solve the same problem with a different approach, the library is called graphql-query-rewriter and does exactly what the name suggests, it's a NodeJS compatible middleware that allows you to rewrite GraphQL requests.&lt;/p&gt;

&lt;p&gt;Istn't it ironic that some people in the GraphQL community claim that the absence of "versioning-features" in the GraphQL specification is a feature while almost 400 stars for this library indicate that there's a need for versioning?&lt;/p&gt;

&lt;p&gt;The approach taken is slightly different from the one I've proposed in this post. The library has a few supported options in rewriting GraphQL requests:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FieldArgTypeRewriter
FieldArgNameRewriter
FieldArgsToInputTypeRewriter
ScalarFieldToObjectFieldRewriter
JsonToTypedObjectRewriter
NestFieldOutputsRewriter
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The way it works is that it checks GraphQL Operation AST to find matching rewrite rules and applies them.&lt;/p&gt;

&lt;p&gt;As we can see from the list above, there are quite some options to choose from, but there will always be edge cases where a rewrite might not be possible.&lt;/p&gt;

&lt;p&gt;The library README states that there are some limitations regarding aliased feels. There's also an issue with rewriting GraphQL documents containing multiple GraphQL Operations.&lt;/p&gt;

&lt;p&gt;Here's a simple example of how to configure the rewriter:&lt;/p&gt;

&lt;p&gt;The library README states that there are some limitations regarding aliased feels. There's also an issue with rewriting GraphQL documents containing multiple GraphQL Operations.&lt;/p&gt;

&lt;p&gt;Here's a simple example of how to configure the rewriter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.use('/graphql', graphqlRewriterMiddleware({
  rewriters: [
    new FieldArgTypeRewriter({
      fieldName: 'userById',
      argName: 'id',
      oldType: 'String!',
      newType: 'ID!'
    }),
  ]
}));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What I like about this library:&lt;/p&gt;

&lt;p&gt;If you're already using a Node-JS GraphQL Server, this solution can get you pretty far without much effort. The configuration of the rules seems straight forward.&lt;/p&gt;

&lt;p&gt;A few things to think about:&lt;/p&gt;

&lt;p&gt;It seems to me that the rewrite rules are not fully typesafe. Type literals like String! (Non-Nullable String) are treated like plain strings. I guess you'd have to add additional tests to make sure that all rewrites are correct.&lt;/p&gt;

&lt;p&gt;There's also no specific version tag or anything similar. This means, the library treats all API clients the same. I think it would be beneficial to keep track of all the clients and their versions, but this seems out of scope for the library. I have a bit of a fear that over time, it can become quite messy if you don't know what clients are using which version of the schema if there's no clear cut between each version. That is, if you remove one of the rewrites, it's quite unpredictable which clients will be affected.&lt;/p&gt;

&lt;p&gt;Another problem I see with this approach is that it's a NodeJS only solution. If you're not using NodeJS for your GraphQL Server, you'd have to re-implement the logic in your language of choice or run a separate NodeJS process to handle the rewrites.&lt;/p&gt;

&lt;p&gt;In general, I believe that solutions like "rewriting requests" do not belong into an application itself. API Gateways or advanced proxies are the right place to put these rules.&lt;/p&gt;

&lt;p&gt;My biggest criticism though is about the rewrite strategy itself and has to do with the absence of version tags in the clients. Imagine there's a field foo on the type Query. In our second iteration we add a new field called bar and remove the field foo. To not break any clients, we're adding a rewrite rule from foo to bar. Later on, we decide we want to add a new field called foo (again) but with a completely different meaning. Re-adding this field is not really possible because we're only allowed to add breaking changes in one direction. Without a timestamp or version tag in the client, we're not able to distinguish between old clients that wanted the old foo field (rewritten to bar) or new clients that actually want to new foo field without rewrites.&lt;/p&gt;

&lt;p&gt;The approach taken by WunderGraph embeds a version hash into the client. This allows us to clearly identify the version of the GraphQL Schema the client understands so that we can correctly rewrite it.&lt;/p&gt;

&lt;p&gt;To sum up this section, I think this library is a really smart solution. If you're aware of what it can do for you and where it has some limitations it can be a great solution.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#summary-and-conclusion"&gt;
  &lt;/a&gt;
  Summary and Conclusion
&lt;/h1&gt;

&lt;p&gt;We've discussed why versioning of APIs is important and how it enables companies to move forward with their products. At the same time, we've looked into the challenges of maintaining backwards compatible APIs, especially with GraphQL.&lt;/p&gt;

&lt;p&gt;We've then compared the differences of versioning between REST and GraphQL APIs. I hope I've made it clear that there isn't really much of a difference.&lt;/p&gt;

&lt;p&gt;Next, we've went onto a small excursion on the topic I'm most excited about, enabling collaboration through APIs using open standards, and the ability to build Links between APIs.&lt;/p&gt;

&lt;p&gt;This led to the core of the blog post, how we can make APIs Versionless, using JSON-RPC in combination with API snapshots and automatic client migrations as described above.&lt;/p&gt;

&lt;p&gt;We've also looked into an alternative approach and discussed pros and cons of both solutions.&lt;/p&gt;

&lt;p&gt;So, Versionless APIs is not just a smart approach to keep APIs backwards compatible without a huge overhead. Versionless APIs are an enabler for a whole new ecosystem of API collaboration.&lt;/p&gt;

&lt;p&gt;If you're keen in trying this out as soon as possible and want to work on this togehter with us, shaping the future of API collaboration, sign up with our early access programme!.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#like-what-you-read"&gt;
  &lt;/a&gt;
  Like what you read?
&lt;/h1&gt;

&lt;p&gt;Interested in learning more about Wundergraph? Contact us &lt;a href="https://wundergraph.com"&gt;here!&lt;/a&gt; &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>graphql</category>
      <category>react</category>
    </item>
  </channel>
</rss>
