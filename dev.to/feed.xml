<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Integrate an Application with Prometheus Operator and Package with a Helm Chart</title>
      <author>Julien Acroute</author>
      <pubDate>Mon, 19 Jul 2021 08:59:28 +0000</pubDate>
      <link>https://dev.to/camptocamp-ops/integrate-an-application-with-prometheus-operator-and-package-with-a-helm-chart-1159</link>
      <guid>https://dev.to/camptocamp-ops/integrate-an-application-with-prometheus-operator-and-package-with-a-helm-chart-1159</guid>
      <description>&lt;p&gt;In the previous posts, we saw:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;how to implement metrics in applications&lt;/li&gt;
&lt;li&gt;how to run the monitoring stack locally&lt;/li&gt;
&lt;li&gt;how to test and debug metrics generated by a simple Python Flask application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post we will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;use Kubernetes Custom Resources to integrate our application with the Prometheus Operator&lt;/li&gt;
&lt;li&gt;define some alerts based on the metrics generated by the application&lt;/li&gt;
&lt;li&gt;deploy a custom dashboard in Grafana&lt;/li&gt;
&lt;li&gt;package everything in a Helm chart, including a Grafana dashboard&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#connect-prometheus-to-your-application"&gt;
  &lt;/a&gt;
  Connect Prometheus to your Application
&lt;/h2&gt;

&lt;p&gt;Prometheus will retrieve metrics from &lt;em&gt;Pods&lt;/em&gt; with a &lt;code&gt;/metrics&lt;/code&gt; HTTP endpoint. If the Prometheus Operator is deployed in your Kubernetes Cluster, the discovery of the &lt;em&gt;Pods&lt;/em&gt; is done by deploying one of the following custom Kubernetes objects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/api.md#servicemonitor"&gt;&lt;em&gt;ServiceMonitor&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/api.md#podmonitor"&gt;&lt;em&gt;PodMonitor&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#using-servicemonitor"&gt;
  &lt;/a&gt;
  Using &lt;em&gt;ServiceMonitor&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;When a &lt;em&gt;ServiceMonitor&lt;/em&gt; object is deployed, Prometheus will create one target per address defined in the &lt;em&gt;Endpoints&lt;/em&gt; object linked to the &lt;em&gt;Service&lt;/em&gt;. This means every &lt;em&gt;Pod&lt;/em&gt; is in a ready status used by the &lt;em&gt;Service&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For example, if you have the following &lt;em&gt;Service&lt;/em&gt; and &lt;em&gt;Deployment&lt;/em&gt; in your cluster:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Service&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;webapp&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;backend&lt;/span&gt;
    &lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;containers-my-app&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-app&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ClusterIP&lt;/span&gt;
  &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;http&lt;/span&gt;
    &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
    &lt;span class="na"&gt;protocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TCP&lt;/span&gt;
    &lt;span class="na"&gt;targetPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;webapp&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;backend&lt;/span&gt;
    &lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;containers-my-app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;apps/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deployment&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;webapp&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;backend&lt;/span&gt;
    &lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;containers-my-app&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-app&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;backend&lt;/span&gt;
      &lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;containers-my-app&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;backend&lt;/span&gt;
        &lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;containers-my-app&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
        &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ghcr.io/camptocamp/course_docker_backend:python&lt;/span&gt;
        &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;containerPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8080&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;webapp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As defined in the &lt;em&gt;Deployment&lt;/em&gt;’s &lt;code&gt;spec.template.metadata.labels&lt;/code&gt; field, &lt;em&gt;Pods&lt;/em&gt; will have the following labels: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;component: backend&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;instance: app&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name: containers-my-app&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;em&gt;Service&lt;/em&gt; has a selector that matches labels of the &lt;em&gt;Pod&lt;/em&gt;. Therefore the &lt;em&gt;Service&lt;/em&gt; will load balance traffic to &lt;em&gt;Pods&lt;/em&gt; deployed by the &lt;em&gt;Deployment&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;ServiceMonitor&lt;/em&gt; objects also use a selector to discover which &lt;em&gt;Services&lt;/em&gt; need to be monitored. Prometheus will scrape metrics from every &lt;em&gt;Pods&lt;/em&gt; behind selected &lt;em&gt;Services&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For example, to retrieve metrics from our &lt;em&gt;Pods&lt;/em&gt;, we can deploy the following &lt;em&gt;ServiceMonitor&lt;/em&gt; object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;monitoring.coreos.com/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ServiceMonitor&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;webapp&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;backend&lt;/span&gt;
    &lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;containers-my-app&lt;/span&gt;
    &lt;span class="na"&gt;release&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prom&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-app&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;namespaceSelector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchNames&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;my-app&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;backend&lt;/span&gt;
      &lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;containers-my-app&lt;/span&gt;
  &lt;span class="na"&gt;endpoints&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;http&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Prometheus Operator will search for &lt;em&gt;Services&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;in the &lt;code&gt;my-app&lt;/code&gt; namespace,&lt;/li&gt;
&lt;li&gt;with the following labels:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;component: backend&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;instance: app&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name: containers-my-app&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;with a port named: &lt;code&gt;http&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It will then use the &lt;em&gt;Service&lt;/em&gt; selector to find &lt;em&gt;Pods&lt;/em&gt;. As a result, one target per &lt;em&gt;Pod&lt;/em&gt; will be created in the Prometheus configuration.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-podmonitor"&gt;
  &lt;/a&gt;
  Using &lt;em&gt;PodMonitor&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;PodMonitor&lt;/em&gt; objects use a selector to find &lt;em&gt;Pods&lt;/em&gt; directly. No &lt;em&gt;Service&lt;/em&gt; needs to be deployed.&lt;/p&gt;

&lt;p&gt;For our &lt;em&gt;Pods&lt;/em&gt;, we can use the following &lt;em&gt;PodMonitor&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;monitoring.coreos.com/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PodMonitor&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;webapp&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;acomponent&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;backend&lt;/span&gt;
    &lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;containers-my-app&lt;/span&gt;
    &lt;span class="na"&gt;release&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prom&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-app&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;namespaceSelector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchNames&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;my-app&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;backend&lt;/span&gt;
      &lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;containers-my-app&lt;/span&gt;
  &lt;span class="na"&gt;podMetricsEndpoints&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;webapp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Prometheus operator will search for &lt;em&gt;Pods&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;in the &lt;code&gt;my-app&lt;/code&gt; namespace,&lt;/li&gt;
&lt;li&gt;with the following labels:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;component: backend&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;instance: app&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name: containers-my-app&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;with a port named: &lt;code&gt;webapp&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For each &lt;em&gt;Pod&lt;/em&gt;, a new target will be added to the Prometheus configuration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-alerts"&gt;
  &lt;/a&gt;
  Configure Alerts
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#why-use-alerts"&gt;
  &lt;/a&gt;
  Why use Alerts?
&lt;/h3&gt;

&lt;p&gt;Gathering and storing metrics is very useful to investigate when something goes wrong. But there are often some modifications of one or a combination of metrics before a service becomes completely unusable.&lt;/p&gt;

&lt;p&gt;A common example of this is remaining free disk space. Fixing hard thresholds with arbitrary values on disk space is usually inefficient (you might actually end up with 95%, 100% and 101% thresholds). What needs to be monitored is actually the estimated time left until the disk is full, which can be obtained by running &lt;a href="https://prometheus.io/docs/prometheus/latest/querying/functions/#predict_linear"&gt;a time regression on the metric&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Some other examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For an online store, having no purchases during the afternoon is unusual, maybe there is an issue that blocks users in the payment process.&lt;/li&gt;
&lt;li&gt;If the ratio of HTTP responses with code 500 suddenly increases, investigation is needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the purpose of alerts: when such events are detected, the system notifies the right person, allowing you to keep your eyes off dashboards.&lt;/p&gt;

&lt;p&gt;After investigating and finding the root cause, you should always ask yourself if you can build an alert to detect such a case. There is also the possibility of increasing the observability if some metrics are missing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-define-alerts"&gt;
  &lt;/a&gt;
  How to define Alerts?
&lt;/h3&gt;

&lt;p&gt;The Prometheus Operator allows the definition of alerts with a custom Kubernetes object: &lt;a href="https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/api.md#prometheusrule"&gt;&lt;em&gt;PrometheusRule&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this custom resource, you can define multiple alerts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;monitoring.coreos.com/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PrometheusRule&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;webapp&lt;/span&gt;
  &lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-app&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;backend&lt;/span&gt;
    &lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;containers-my-app&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kube-prometheus-stack&lt;/span&gt;
    &lt;span class="na"&gt;release&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;prom&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;groups&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
      &lt;span class="na"&gt;rules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;alert&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;NoProductViewSince1h&lt;/span&gt;
          &lt;span class="na"&gt;expr&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;(view_total - view_total offset 1h) &amp;lt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
          &lt;span class="na"&gt;for&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;5m&lt;/span&gt;
          &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;severity&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Critical&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, only one alert is defined. &lt;/p&gt;

&lt;p&gt;Find below what needs to be defined for usual cases for each alert:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;alert&lt;/code&gt;: the alert name&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;expr&lt;/code&gt;: a PromQL expression that triggers an alert if it returns something. This is why most of the time a threshold is used. With the &lt;code&gt;offset&lt;/code&gt; function we compute the views from the past hour, if the result is above the threshold &lt;code&gt;1&lt;/code&gt;, then an alert is created and pushed to AlertManager.&lt;/li&gt;
&lt;li&gt;Optional &lt;code&gt;labels&lt;/code&gt;: a set of labels, usually used for alert severity&lt;/li&gt;
&lt;li&gt;Optional &lt;code&gt;for&lt;/code&gt;: delays triggering the alert. The PromQL expression must return some sample during the duration of the field &lt;code&gt;for&lt;/code&gt;, before an alert is triggered.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#troubleshooting"&gt;
  &lt;/a&gt;
  Troubleshooting
&lt;/h2&gt;

&lt;p&gt;There are many selectors involved in this process: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;selector on &lt;em&gt;ServiceMonitor&lt;/em&gt; to find &lt;em&gt;Services&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;selector on &lt;em&gt;Service&lt;/em&gt; to find &lt;em&gt;Pods&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;selector on &lt;em&gt;PodMonitor&lt;/em&gt; to find &lt;em&gt;Pods&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are also selectors to discover &lt;em&gt;ServiceMonitor&lt;/em&gt;, &lt;em&gt;PodMonitor&lt;/em&gt;, and &lt;em&gt;PrometheusRule&lt;/em&gt; objects. Those selectors are defined in the &lt;em&gt;Prometheus&lt;/em&gt; object using the following fields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Discovery of &lt;em&gt;ServiceMonitor&lt;/em&gt;:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;spec.serviceMonitorSelector&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spec.serviceMonitorNamespaceSelector&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Discovery of &lt;em&gt;PodMonitor&lt;/em&gt;:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;spec.podMonitorSelector&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spec.podMonitorNamespaceSelector&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Dicovery of &lt;em&gt;PrometheusRule&lt;/em&gt;:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;spec.ruleSelector&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spec.ruleNamespaceSelector&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iUuTmOvT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/prometheus-operator/prometheus-operator/raw/master/Documentation/custom-metrics-elements.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iUuTmOvT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/prometheus-operator/prometheus-operator/raw/master/Documentation/custom-metrics-elements.png" alt="Selectors used by Prometheus Operator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#check-selectors"&gt;
  &lt;/a&gt;
  Check Selectors
&lt;/h3&gt;

&lt;p&gt;If the target is not discovered by Prometheus:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check that your &lt;em&gt;ServiceMonitor&lt;/em&gt; or &lt;em&gt;PodMonitor&lt;/em&gt; is deployed in a &lt;em&gt;Namespace&lt;/em&gt; that matches the namespace selector in the &lt;em&gt;Prometheus&lt;/em&gt; object.&lt;/li&gt;
&lt;li&gt;Check that labels on your &lt;em&gt;ServiceMonitor&lt;/em&gt; or &lt;em&gt;PodMonitor&lt;/em&gt; match the selector in the &lt;em&gt;Prometheus&lt;/em&gt; object.&lt;/li&gt;
&lt;li&gt;Check that the selector on your &lt;em&gt;ServiceMonitor&lt;/em&gt; or &lt;em&gt;PodMonitor&lt;/em&gt; matches labels defined in the &lt;em&gt;Service&lt;/em&gt; or &lt;em&gt;Pod&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Check that the &lt;em&gt;Service&lt;/em&gt; or &lt;em&gt;Pod&lt;/em&gt; are deployed in the &lt;em&gt;Namespace&lt;/em&gt; selected by the namespace selector defined in the &lt;em&gt;ServiceMonitor&lt;/em&gt; or &lt;em&gt;PodMonitor&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to check a label selector, you can use the &lt;code&gt;-l&lt;/code&gt; option of &lt;code&gt;kubectl&lt;/code&gt;. For example, to check the following selector in a &lt;em&gt;ServiceMonitor&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;matchLabels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;backend&lt;/span&gt;
      &lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;containers-my-app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;kubectl &lt;span class="nt"&gt;-l&lt;/span&gt; &lt;span class="nv"&gt;component&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;backend,instance&lt;span class="o"&gt;=&lt;/span&gt;app,name&lt;span class="o"&gt;=&lt;/span&gt;containers-my-app get service
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#check-port-name-or-number"&gt;
  &lt;/a&gt;
  Check Port Name or Number
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Check that the port number or name matches a port defined in a &lt;em&gt;Service&lt;/em&gt; or a &lt;em&gt;Pod&lt;/em&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;ServiceMonitor&lt;/em&gt; references either an incoming port defined in the &lt;em&gt;Service&lt;/em&gt; or a &lt;em&gt;Pod&lt;/em&gt; port:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;ServiceMonitor.spec.endpoints.port&lt;/code&gt; references the name of a &lt;em&gt;Service&lt;/em&gt; port: &lt;code&gt;Service.spec.ports.name&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ServiceMonitor.spec.endpoints.targetPort&lt;/code&gt; references a &lt;em&gt;Pod&lt;/em&gt; port: &lt;code&gt;Pod.spec.containers.ports.containerPort&lt;/code&gt; or &lt;code&gt;Pod.spec.containers.ports.name&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;PodMonitor&lt;/em&gt; references port defined on &lt;em&gt;Pod&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;PodMonitor.spec.podMetricsEndpoints.port&lt;/code&gt; reference the name of a &lt;em&gt;Pod&lt;/em&gt; port: &lt;code&gt;Pod.spec.containers.ports.name&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that Prometheus will only use &lt;em&gt;Pods&lt;/em&gt; with a Ready state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-grafana-dashboards-as-configmaps"&gt;
  &lt;/a&gt;
  Create Grafana Dashboards as ConfigMaps
&lt;/h2&gt;

&lt;p&gt;Grafana includes an auto discovery mechanism for dashboards. Any &lt;em&gt;ConfigMap&lt;/em&gt; with a label &lt;code&gt;grafana_dashboard=1&lt;/code&gt; is loaded into Grafana.&lt;/p&gt;

&lt;p&gt;The following &lt;em&gt;ConfigMap&lt;/em&gt; will create a minimal dashboard in Grafana. Note that this &lt;em&gt;ConfigMap&lt;/em&gt; needs to be deployed in the same &lt;em&gt;Namespace&lt;/em&gt; as Grafana.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ConfigMap&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-dashboard&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;grafana_dashboard&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;1"&lt;/span&gt;
&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;dashboard.json&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
    &lt;span class="s"&gt;{ "title": "Product Views",&lt;/span&gt;
      &lt;span class="s"&gt;"time": { "from": "now-6h", "to": "now" },&lt;/span&gt;
      &lt;span class="s"&gt;"editable": false,&lt;/span&gt;
      &lt;span class="s"&gt;"panels": [ {&lt;/span&gt;
          &lt;span class="s"&gt;"gridPos": { "h": 9, "w": 12, "x": 0, "y": 0 },&lt;/span&gt;
          &lt;span class="s"&gt;"id": 2,&lt;/span&gt;
          &lt;span class="s"&gt;"targets": [ {&lt;/span&gt;
              &lt;span class="s"&gt;"exemplar": true,&lt;/span&gt;
              &lt;span class="s"&gt;"expr": "rate(view_total[2m])",&lt;/span&gt;
              &lt;span class="s"&gt;"interval": "",&lt;/span&gt;
              &lt;span class="s"&gt;"legendFormat": "{{product}}",&lt;/span&gt;
              &lt;span class="s"&gt;"refId": "A"&lt;/span&gt;
            &lt;span class="s"&gt;} ],&lt;/span&gt;
          &lt;span class="s"&gt;"title": "Product View",&lt;/span&gt;
          &lt;span class="s"&gt;"type": "timeseries"&lt;/span&gt;
        &lt;span class="s"&gt;}&lt;/span&gt;
      &lt;span class="s"&gt;]&lt;/span&gt;
    &lt;span class="s"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#package-monitoring-objects-with-applications-using-helm-charts"&gt;
  &lt;/a&gt;
  Package Monitoring Objects with Applications using Helm Charts
&lt;/h2&gt;

&lt;p&gt;Including monitoring objects in Application Helm Charts is a good way to maintain the observability layer of an application. The monitoring components can be versioned with application packaging. Also the deployment of monitoring can follow the same workflow as the application.&lt;/p&gt;

&lt;p&gt;I will not explain how to package an application, but I’ll demonstrate how to include the following elements: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dashboard: &lt;em&gt;ConfigMap&lt;/em&gt; with dashboard code&lt;/li&gt;
&lt;li&gt;Alerts: &lt;em&gt;PrometheusRule&lt;/em&gt; with alerts definition&lt;/li&gt;
&lt;li&gt;Metrics endpoint: &lt;em&gt;PodMonitor&lt;/em&gt; or &lt;em&gt;ServiceMonitor&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the chart’s &lt;code&gt;values.yaml&lt;/code&gt;, add a new section for monitoring:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;monitoring&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;alerts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;dashboard&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;monitoring.alerts&lt;/code&gt; values controls the deployment of the &lt;em&gt;PrometheusRule&lt;/em&gt; object. The deployment of the &lt;em&gt;ConfigMap&lt;/em&gt; for the dashboard is controlled by &lt;code&gt;monitoring.dashboard&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For the &lt;em&gt;PodMonitor&lt;/em&gt; or &lt;em&gt;ServiceMonitor&lt;/em&gt; objects, we can check if the Prometheus Operator is installed using the &lt;a href="https://helm.sh/docs/chart_template_guide/builtin_objects/"&gt;.Capabilities.APIVersions.Has&lt;/a&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;- if .Capabilities.APIVersions.Has "servicemonitor.monitoring.coreos.com/v1"&lt;/span&gt; &lt;span class="pi"&gt;}}&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;monitoring.coreos.com/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ServiceMonitor&lt;/span&gt;
&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;span class="pi"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;- end&lt;/span&gt; &lt;span class="pi"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Additionally, for alerts and dashboards, we can check the "values" set on the Helm release:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;- if .Capabilities.APIVersions.Has "prometheusrule.monitoring.coreos.com/v1"&lt;/span&gt; &lt;span class="pi"&gt;}}&lt;/span&gt;
&lt;span class="pi"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;- if .Values.monitoring.alerts&lt;/span&gt; &lt;span class="pi"&gt;}}&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;monitoring.coreos.com/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PrometheusRule&lt;/span&gt;
&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;span class="pi"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;- end&lt;/span&gt; &lt;span class="pi"&gt;}}&lt;/span&gt;
&lt;span class="pi"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;- end&lt;/span&gt; &lt;span class="pi"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A common workflow to maintain a dashboard is to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;edit dashboards in the Grafana Web UI&lt;/li&gt;
&lt;li&gt;copy the JSON model from Web UI&lt;/li&gt;
&lt;li&gt;paste the JSON to a file in the Helm Chart&lt;/li&gt;
&lt;li&gt;commit and push modifications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;⚠ If the JSON representation of the dashboard is stored in the &lt;em&gt;ConfigMap&lt;/em&gt; code, you will have to indent the content properly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ConfigMap&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-dashboard&lt;/span&gt;
  &lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;grafana_dashboard&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;1"&lt;/span&gt;
&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="s"&gt;dashboard.json&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
    &lt;span class="s"&gt;{ "title": "Product Views",&lt;/span&gt;
      &lt;span class="s"&gt;"time": { "from": "now-6h", "to": "now" },&lt;/span&gt;
      &lt;span class="s"&gt;"editable": false,&lt;/span&gt;
      &lt;span class="s"&gt;"panels": [ {&lt;/span&gt;
          &lt;span class="s"&gt;"gridPos": { "h": 9, "w": 12, "x": 0, "y": 0 },&lt;/span&gt;
          &lt;span class="s"&gt;"id": 2,&lt;/span&gt;
          &lt;span class="s"&gt;"targets": [ {&lt;/span&gt;
              &lt;span class="s"&gt;"exemplar": true,&lt;/span&gt;
              &lt;span class="s"&gt;"expr": "rate(view_total[2m])",&lt;/span&gt;
              &lt;span class="s"&gt;"interval": "",&lt;/span&gt;
              &lt;span class="s"&gt;"legendFormat": "{{product}}",&lt;/span&gt;
              &lt;span class="s"&gt;"refId": "A"&lt;/span&gt;
            &lt;span class="s"&gt;} ],&lt;/span&gt;
          &lt;span class="s"&gt;"title": "Product View",&lt;/span&gt;
          &lt;span class="s"&gt;"type": "timeseries"&lt;/span&gt;
        &lt;span class="s"&gt;}&lt;/span&gt;
      &lt;span class="s"&gt;]&lt;/span&gt;
    &lt;span class="s"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is generally easier to store the dashboard code in a dedicated file and then load the contents in the &lt;em&gt;ConfigMap&lt;/em&gt; with some Helm templating functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;- if .Capabilities.APIVersions.Has "prometheusrule.monitoring.coreos.com/v1"&lt;/span&gt; &lt;span class="pi"&gt;}}&lt;/span&gt;
&lt;span class="pi"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;- if .Values.monitoring.dashboard&lt;/span&gt; &lt;span class="pi"&gt;}}&lt;/span&gt;
&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ConfigMap&lt;/span&gt;
&lt;span class="s"&gt;…&lt;/span&gt;
&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;                                             
  &lt;span class="s"&gt;dashboard.json&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;                               
    &lt;span class="s"&gt;{{- .Files.Get "dashboard.json" | trim | nindent 4 }}&lt;/span&gt;
&lt;span class="pi"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;- end&lt;/span&gt; &lt;span class="pi"&gt;}}&lt;/span&gt;
&lt;span class="pi"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;- end&lt;/span&gt; &lt;span class="pi"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Deploying monitoring stacks —Prometheus, Grafana, AlertManager, ElasticSearch, Loki, …— provides much more observability in a project, but at the cost of consuming more resources. Developers not using these features is a waste of resources. The project also has poor observability because only system metrics and maybe http metrics are retrieved. Adding application specific metrics and even business metrics allows you to build beautiful dashboards with colors and graphs that are very fun to report during boring review meetings.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9i-n09KS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ffu21rl2xyylx5778gb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9i-n09KS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ffu21rl2xyylx5778gb.png" alt="grafana"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>helm</category>
      <category>kubernetes</category>
      <category>alerting</category>
      <category>monitoring</category>
    </item>
    <item>
      <title>Best Top 3 Programming Fonts</title>
      <author>CoderZ90</author>
      <pubDate>Mon, 19 Jul 2021 08:31:37 +0000</pubDate>
      <link>https://dev.to/official_fire/best-top-3-programming-fonts-12dj</link>
      <guid>https://dev.to/official_fire/best-top-3-programming-fonts-12dj</guid>
      <description>&lt;p&gt;Hello guys 👋 Hope you are fine 😊&lt;/p&gt;

&lt;p&gt;So On Top of the list the font comes is - &lt;strong&gt;Operator Mono&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-operator-mono-premium-"&gt;
  &lt;/a&gt;
  1. Operator Mono ( Premium )
&lt;/h2&gt;

&lt;p&gt;This font is so cool and beautiful but its a little expensive. This font is one of my favourite font&lt;/p&gt;

&lt;p&gt;The font looks like this &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bk2cG7D9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9t61oy77mmxeottw4z3t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bk2cG7D9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9t61oy77mmxeottw4z3t.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you see it is looking so cool and clean 😊&lt;/p&gt;

&lt;p&gt;Link To Download - &lt;a href="https://www.typography.com/fonts/operator/styles"&gt;https://www.typography.com/fonts/operator/styles&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-fira-code-free-"&gt;
  &lt;/a&gt;
  2. Fira Code ( Free )
&lt;/h2&gt;

&lt;p&gt;Fira Code is a free monospaced font containing ligatures for common programming multi-character combinations.&lt;/p&gt;

&lt;p&gt;It looks pretty too here it is 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mUZ4E2hK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kusc3vinn0imz1mm6vz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mUZ4E2hK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kusc3vinn0imz1mm6vz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link To Download - &lt;a href="https://fonts.google.com/specimen/Fira+Code"&gt;https://fonts.google.com/specimen/Fira+Code&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-cascadia-code-free-from-microsoft-"&gt;
  &lt;/a&gt;
  3. Cascadia Code ( FREE from Microsoft )
&lt;/h2&gt;

&lt;p&gt;This font is also cool it is similiar to Fira code and also has Ligatures which are just amazing&lt;/p&gt;

&lt;p&gt;Here is a quick look &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UX91CA4w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygylaqh2m37jew6btrki.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UX91CA4w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygylaqh2m37jew6btrki.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link to Download - &lt;a href="https://github.com/microsoft/cascadia-code"&gt;https://github.com/microsoft/cascadia-code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cool right ? 🔥&lt;/p&gt;

&lt;p&gt;Hope you enjoyed Reading This Blog  😊&lt;/p&gt;

&lt;p&gt;Also Subscribe to my youtube Channel to Learn more about coding Thankyou! for giving your time 😊💛&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtube.com/c/codingfire?sub_confirmation=1"&gt;https://youtube.com/c/codingfire?sub_confirmation=1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>codequality</category>
      <category>vscode</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>2021 CS50x</title>
      <author>Hermes</author>
      <pubDate>Mon, 19 Jul 2021 08:28:20 +0000</pubDate>
      <link>https://dev.to/truepadawan/2021-cs50x-21bd</link>
      <guid>https://dev.to/truepadawan/2021-cs50x-21bd</guid>
      <description>&lt;p&gt;&lt;em&gt;CS50x(Intro to Computer Science)&lt;/em&gt; is a free course offered by Harvard which focuses on the Programming Aspect of Computer Science.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ha6iyTqN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626634073842/vgjlHocVP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ha6iyTqN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626634073842/vgjlHocVP.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Its 2021 session is currently on-going and you might want to check it out because its pretty decent for a free resource and you can use it as a chance to learn about other Languages. I know this because I am currently in it and I'm just about to move to Week 5 which focuses on Data Structures.&lt;/p&gt;

&lt;p&gt;Each Week(0 - 10) focuses on a different topic : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scratch(Basically just a smooth intro into Programming for beginners)&lt;/li&gt;
&lt;li&gt;C (C Programming Language)&lt;/li&gt;
&lt;li&gt;Arrays&lt;/li&gt;
&lt;li&gt;Algorithms&lt;/li&gt;
&lt;li&gt;Memory&lt;/li&gt;
&lt;li&gt;Data Structures&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;SQL&lt;/li&gt;
&lt;li&gt;HTML, CSS, JavaScript&lt;/li&gt;
&lt;li&gt;Flask&lt;/li&gt;
&lt;li&gt;Ethics&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Like I said, It's a free course and anyone can register and start immediately and it also awards you with a certificate if you manage to get over 70% total score at the end of the course(There is also a paid certificate).&lt;/p&gt;

&lt;p&gt;Each Week has a 'Problem Set' where you are tasked to solve a problem based on what you learned the following week, my most recent problem set which I just completed today was where you had to write a program using C which recovers JPEGs from a forensic image(not as complex as it sounds). The problems can get pretty complex FAST, a particular problem set for Week 3 called Tideman(Implement a Program that runs a Tideman election) is regarded as one of the hardest problems in the entire course even though it's just in Week 3 probably because that week focuses on Algorithms(Sorting algorithms and Recursion), Luckily it's not mandatory to do it so i did everything except it and moved on.&lt;/p&gt;

&lt;p&gt;The main thing about the entire course that excites me is the Final Project of the course where you develop your very own software or something similar drawing on what you've learned in the course:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GVOFPOUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626633893741/ibf2wmlHd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GVOFPOUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626633893741/ibf2wmlHd.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you're interested in CS50, you can enroll &lt;a href="https://cs50.edx.org/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also there are other CS50 Programs(PAID) you can take -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CS50 Web Development &lt;a href="https://cs50.edx.org/programs/web"&gt;Program&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;CS50 Artificial Intelligence &lt;a href="https://cs50.edx.org/programs/ai"&gt;Program&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;CS50 Game Development &lt;a href="https://cs50.edx.org/programs/games"&gt;Program&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Note : You don't necessarily have to take each lecture weekly, you can take them daily if you want to(assuming you complete all problem sets daily which is unlikely except in the beginning)&lt;/code&gt;&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Remote Jobs for Javascript, Go, Python and Fullstack Developers</title>
      <author>Stefan Wuthrich</author>
      <pubDate>Mon, 19 Jul 2021 08:26:25 +0000</pubDate>
      <link>https://dev.to/golangch/remote-jobs-for-javascript-go-python-and-fullstack-developers-4c8f</link>
      <guid>https://dev.to/golangch/remote-jobs-for-javascript-go-python-and-fullstack-developers-4c8f</guid>
      <description>&lt;p&gt;We know it all...&lt;/p&gt;

&lt;p&gt;Since Covid 19 changed all our lives, Remote Jobs offers are growing, as many companies realized that this mode of work works fine for them and can attract new developers out there.&lt;/p&gt;

&lt;p&gt;I have run now about three years four developer-related Job Boards, which have since begun a Remote Filter for Job Candidates and, of course, those options for companies adding Remote Jobs.&lt;/p&gt;

&lt;p&gt;Here the boards:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://fullstackjob.com/jobs/remote-ok"&gt;Remote Fullstack Developer Jobs&lt;/a&gt;&lt;br&gt;
&lt;a href="https://javascriptjob.xyz/jobs/remote-ok"&gt;Remote Javascript Developer Jobs&lt;/a&gt;&lt;br&gt;
&lt;a href="https://pythonjob.xyz/jobs/remote-ok"&gt;Remote Python Developer Jobs&lt;/a&gt;&lt;br&gt;
&lt;a href="https://golangjob.xyz/jobs/remote-ok"&gt;Remote Golang Developer Jobs&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>go</category>
      <category>python</category>
      <category>javascript</category>
    </item>
    <item>
      <title>A Look at Selenium and Its Alternative Solution for 2021 and Beyond
</title>
      <author>Brian Anderson</author>
      <pubDate>Mon, 19 Jul 2021 08:15:51 +0000</pubDate>
      <link>https://dev.to/briananderson2209/a-look-at-selenium-and-its-alternative-solution-for-2021-and-beyond-1n82</link>
      <guid>https://dev.to/briananderson2209/a-look-at-selenium-and-its-alternative-solution-for-2021-and-beyond-1n82</guid>
      <description>&lt;p&gt;Selenium was initially published in the mid-2000s as a Web browser plugin for recording and replaying Web browser interactions. Since then, it has undoubtedly become the most used test automation tool. According to a study of the automated testing community, the framework is utilized by more than 80% of those polled.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Selenium is an open-source framework for Web-based application automation, including Selenium WebDriver, Selenium IDE, and Selenium Grid. &lt;/li&gt;
&lt;li&gt;Selenium IDE is a browser plugin that captures and replays user interactions.&lt;/li&gt;
&lt;li&gt;Selenium Grid enables WebDriver to simultaneously execute automation tests on many computers, browsers, and OS systems.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Selenium is frequently utilized in the software automation sector due to the benefits it gives. First, it is developer-friendly, enabling developers to build and test any programming language of their choosing. Second, the framework is a cross-browser and cross-operating system, allowing teams to perform test automation across several browsers and operating systems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-structure-of-selenium-webdriver"&gt;
  &lt;/a&gt;
  The Structure of Selenium WebDriver
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---u8T-GAm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pudy65usdmmyaxeh35vb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---u8T-GAm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pudy65usdmmyaxeh35vb.png" alt="Selenium WebDriver Architecture"&gt;&lt;/a&gt;&lt;br&gt;
The Selenium WebDriver architecture is made up of three parts: the WebDriver, the Browser Specific Drivers or Drivers, and the Browser. These components communicate bidirectionally or two-ways, issuing HTTP requests and receiving HTTP replies in RESTful services.&lt;/p&gt;

&lt;p&gt;WebDriver includes language-specific client libraries, often known as language bindings, for creating automation scripts and executing script commands in the Browser using Drivers. Selenium can now enable scripting in various languages, including Java, C#, Python, Ruby, and JavaScript, thanks to these language bindings.&lt;br&gt;
Browser Specific Drivers, also known as Drivers, are responsible for running the actual Browser via delivering WebDriver requests. Drivers can be implemented and extended by third parties. Two browser driver implementations are GeckoDriver for Firefox and ChromeDriver for Chrome.&lt;br&gt;
Browser component accepts requests from the Drivers component to drive interactions on the application under test (AUT). Selenium is compatible with all major browsers, including Chrome, Firefox, Internet Explorer, Opera, and Safari.&lt;/p&gt;

&lt;p&gt;WebDriver can operate on a separate system than the Drivers and Browser components. In this configuration, WebDriver connects with these components remotely through Selenium Server or Remote WebDriver. Selenium can now perform automated tests on many browsers and computers seamlessly at the same time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-this-structure"&gt;
  &lt;/a&gt;
  Benefits of this structure
&lt;/h2&gt;

&lt;p&gt;The architecture is disjointed. Three components connect using the HTTP protocol and RESTful Web services as the mode of communication. This property enables an element to function independently of the others. Changes and improvements to one component may be performed quickly and without impacting the others. Selenium may be platform- and language-neutral thanks to its loosely linked design.&lt;br&gt;
Moreover, the architecture is accessible. Selenium WebDriver is a W3C Recommendation, which allows for many contributions from the software community.&lt;br&gt;
These architectural characteristics result in a spate of significant Selenium characteristics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cross-platform and cross-language compatibility. Because several implementations of the Drivers component are available, users may run automation scripts on various operating systems and browsers. As long as language bindings in the WebDriver are accessible, Selenium automation scripts may be developed in various languages.&lt;/li&gt;
&lt;li&gt;Developer friendly. Because Selenium supports various languages, developers may build automation scripts in their preferred language. They may also create and incorporate a binding library in the WebDriver component to help a new scripting language if necessary.&lt;/li&gt;
&lt;li&gt;Open for extension. The Selenium architecture allows for language binding expansions by supporting additional test scripting languages or Drivers for new browsers.&lt;/li&gt;
&lt;li&gt;Open for integration with a test automation framework. A new test automation framework may be constructed on top of Selenium by utilizing it as an engine for executing scripts for Web automation, as demonstrated in the figure below.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-demand-for-a-selenium-alternative-solution"&gt;
  &lt;/a&gt;
  The Demand for a Selenium Alternative Solution
&lt;/h2&gt;

&lt;p&gt;When viewed through the eyes of individuals who do not possess programming or sophisticated technical abilities, Selenium's advantages in assisting programming are really its drawbacks. Many testers see Selenium as a barrier to getting started with test automation due to complex programming. As a result, using Selenium directly presents a high learning curve for many testers.&lt;/p&gt;

&lt;p&gt;Selenium also lacks means for separating automation scripts from test data, resulting in high test script maintenance costs and difficulties with test script and test data reusability. There is also a deficiency in managing and organizing test materials such as test scripts, data, and test objects.&lt;/p&gt;

&lt;p&gt;These restrictions help to explain the rapid rise of Selenium-based products in the software test automation industry in recent years. Teams and companies want a solution that provides out-of-the-box testing capabilities without requiring them to develop their own Selenium-based framework to start their automation process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-structure-of-seleniumbased-test-frameworks"&gt;
  &lt;/a&gt;
  The Structure of Selenium-based Test Frameworks
&lt;/h2&gt;

&lt;p&gt;On top of Selenium, a variety of test automation frameworks have been developed. These frameworks attempt to solve several of Selenium's shortcomings, such as the absence of modules for reporting, logging, monitoring, and reusing test automation assets. Importantly, these frameworks aid in overcoming the challenge of developing and launching an automation effort with Selenium.&lt;/p&gt;

&lt;p&gt;The diagram below presents various components of a typical test framework that uses Selenium as its test execution engine. &lt;/p&gt;

&lt;p&gt;Many current automation solutions use this Selenium-based framework. Some examples are Katalon Studio, CrossBrowserTesting, QMetry Automation Studio, Lambda Test, and Sauce Labs. Many of these solutions go a step further by incorporating Appium as a test automation engine for mobile apps, allowing them to handle both web and mobile automation in a single tool.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Resource&lt;/em&gt;&lt;/strong&gt;: &lt;a href="https://www.katalon.com/resources-center/blog/selenium-alternative-solution/"&gt;A Deep Dive into Selenium, Its Alternative Solution for 2021 and Beyond&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.katalon.com/resources-center/blog/selenium-ide-alternative-firefox-chrome/"&gt;Top 3 Selenium IDE Alternative&lt;/a&gt;&lt;br&gt;
Also Katalon are introduce &lt;a href="https://www.katalon.com/selenium-test-migration/"&gt;how to migrate from Selenium&lt;/a&gt; &lt;/p&gt;

</description>
      <category>opensource</category>
      <category>testing</category>
      <category>testdev</category>
    </item>
    <item>
      <title>AWS open source news and updates #76</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Mon, 19 Jul 2021 07:52:13 +0000</pubDate>
      <link>https://dev.to/aws/aws-open-source-news-and-updates-76-2e23</link>
      <guid>https://dev.to/aws/aws-open-source-news-and-updates-76-2e23</guid>
      <description>&lt;h2&gt;
  &lt;a href="#19th-july-2021-instalment-76"&gt;
  &lt;/a&gt;
  19th July, 2021 - Instalment #76
&lt;/h2&gt;

&lt;p&gt;Newsletter #76.&lt;/p&gt;

&lt;p&gt;This week, we have new oss projects such as ecs-files-composer, lucid-dynamodb, kubectl-trace, tailscale-layer and more. AWS and community blog posts featuring OpenSearch, Kubernetes, COBOL, Jamulus, Firecracker, Apache Hudi, Apache Kakfa, Apache Flink, Redis and more. In the videos section we catch up with a couple of the sessions from the Airflow Summit and finally, some new events for your diary.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#celebrating-open-source-contributors"&gt;
  &lt;/a&gt;
  Celebrating open source contributors
&lt;/h3&gt;

&lt;p&gt;The articles posted in this series are only possible thanks to contributors and project maintainers and so I would like to shout out and thank those folks who really do power open source and enable us all to build on top of what they have created. &lt;/p&gt;

&lt;p&gt;So thank you to the following open source heroes: Tal Hoffman, Corey Quinn, John Preston, Pahud Hsieh, Vu Dao, Martin Baillie, Richard Austin Melchior, Re Alvarez-Parmar, Nithish Kumar Murcherla, Drew Zhang, Ali Arsanjani, Ashish Khetan, Li Zhang, Yi Xiang,  Piotr Chotkowski, John Mousa, Sascha Janssen, Veliswa Boya, Didier Durand, Scott Kellish, Asaf Porat Stoler, Zach Gardner, Yaron Sananes, Zoltan Bozoky, Soyean Kim, Victor Leung, Nelson Assis, Param Sharma, Arindam Chatterji, Kyle Thomson, Matt Asay, Antony Prasad Thevaraj, Helge Aufderheide, Dhiraj Thakur, Sameer Goel, and Imtiaz Sayed.&lt;/p&gt;

&lt;p&gt;Make sure you find and follow these builders and keep up to date with their open source projects and contributions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#latest-from-open-source-projects"&gt;
  &lt;/a&gt;
  Latest from open source projects
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;ecs-files-composer&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://aws-oss.beachgeek.co.uk/qs"&gt;ecs-files-composer&lt;/a&gt; and useful open source project from John Preston, ECS Files Composer, is a small program that will allow users to define files they need pulled out of AWS Services, such as AWS S3 or AWS SSM Parameter Store, and load the content to a given location, adding builtin capabilities to set file ownership, mode, and other handy features. Great examples, use cases and top notch documentation as you would expect from a project form Mr Preston. Nice work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;lucid-dynamodb&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/qj"&gt;lucid-dynamodb&lt;/a&gt; Dinesh Sonachalam has put together this open source project that is Python wrapper for AWS DynamoDB, and he provides plenty of documentation and examples to help you get going with this project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;kubectl-trace&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/qi"&gt;kubectl-trace&lt;/a&gt; this new project, kubectl trace, is a kubectl plugin that allows you to schedule the execution of bpftrace programs in your Kubernetes cluster. &lt;a href="https://github.com/iovisor/bpftrace"&gt;bpftrace&lt;/a&gt; is a high-level tracing language for Linux enhanced Berkeley Packet Filter (eBPF) available in recent Linux kernels (4.x). This project has good documentation and examples so you can get going.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;tailscale-layer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/qh"&gt;tailscale-layer&lt;/a&gt; what is this, an open source project from Corey Quinn? Indeed it is, and this project builds an AWS Lambda extension to provide a SOCKS5 proxy inside of the Lambda runtime environment. According to Corey, &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tailscale is a next-generation VPN approach that wraps around Wireguard. It offers a useful management interface, uses far less power on mobile devices than options like OpenVPN, and claims to run on almost anything.&lt;br&gt;
In other words, this extension can be used with any existing Lambda function to provide communication across your Tailscale network — without having to configure a bunch of network rules that, frankly, don't work very well across different provider boundaries. &lt;br&gt;
So far, I've used the extension to have Lambda functions talk to: The Raspberry Pi in my video production studio/guest room/sewing closet/screamatorium. My massively overpowered instance running in Oracle Cloud's yes-it's-actually-free tier. My iPhone and iPad. Resources living inside of my AWS VPCs, without having to use a NAT instance or Managed NAT Gateway to allow those functions to also speak to external resources.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Read more in the blog post he put around this, in &lt;a href="https://aws-oss.beachgeek.co.uk/q6"&gt;Corey Writes Open-Source Code for Lambda and Tailscale&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;serverless-mux-on-aws&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/qx"&gt;serverless-mux-on-aws&lt;/a&gt; new project from Pahud Hsieh, that shows you how you can do a local build, test and deploy your &lt;a href="https://github.com/gorilla/mux"&gt;gorilla/mux&lt;/a&gt; application for both AWS Lambda and AWS Fargate with AWS CDK.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b_kqcNps--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pahud/serverless-mux-on-aws/63e544f85d44a4de606ad2f4ad06e93578e82fd0/images/serverless-mux-go.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b_kqcNps--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pahud/serverless-mux-on-aws/63e544f85d44a4de606ad2f4ad06e93578e82fd0/images/serverless-mux-go.svg" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;blog-multi-arch-springboot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/qf"&gt;blog-multi-arch-springboot&lt;/a&gt; an open source project that shows you how you can build a multi-architecture pipeline to deploy a sample application (in this instance a Spring Boot app) onto any architecture type and to any location (thanks to the ECS Anywhere capability of Amazon ECS). The python CDK application builds everything you need, and I have written a blog post that will walk you through this in &lt;a href="https://aws-oss.beachgeek.co.uk/qg"&gt;Creating a multi architecture CI/CD deployment for Amazon ECS and ECS Anywhere&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#community-open-source-posts"&gt;
  &lt;/a&gt;
  Community open source posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Firecracker&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tal Hoffman dives deep in his blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/qz"&gt;Firecracker internals: a deep dive inside the technology powering AWS Lambda&lt;/a&gt; guiding you through some of the Firecracker code. An often forgotten fact that sometimes just going through the source code of open source projects like Firecracker is one of the best ways to improve your understanding of it. Very nice post.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NPJSMRyl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/MUj6Aon.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NPJSMRyl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/MUj6Aon.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Emacs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are an Emacs user, then Martin Baillie has a must read post for you this week, in &lt;a href="https://aws-oss.beachgeek.co.uk/r0"&gt;Emacs TRAMP over AWS SSM APIs&lt;/a&gt; showing you how you can use Emacs &lt;a href="https://www.emacswiki.org/emacs/TrampMode"&gt;TRAMP&lt;/a&gt; mode to copy files to and from different locations on an EC2 instances, using SSH proxied over SSM.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/qy"&gt;AWS EKS With EFS CSI Driver And IRSA Using CDK&lt;/a&gt; another very nice post from Vu Dao on how you can configure your Amazon EKS cluster to use AWS EFS (Elastic File Service) with the  Amazon EFS Container Storage Interface (CSI) driver, via an AWS CDK application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C4am5Ya8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--X0JpEvKy--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/efs-csi/img/efs-provisioner-arch.png%253Fraw%253Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C4am5Ya8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--X0JpEvKy--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/efs-csi/img/efs-provisioner-arch.png%253Fraw%253Dtrue" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Richard Austin Melchior has put together this post, &lt;a href="https://aws-oss.beachgeek.co.uk/qr"&gt;Ship it, Next.js on AWS with Serverless Framework&lt;/a&gt; where he shows you how you can take a built Next.js application and ship it onto an AWS serverless stack using the Serverless framework.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-and-amazon-open-source-posts"&gt;
  &lt;/a&gt;
  AWS and Amazon open source posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;OpenSearch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/qc"&gt;OpenSearch 1.0 launches&lt;/a&gt; Eli Fisher, Carl Meadows, Jules Graybill, Kyle Davis, and Mehul Shah share in this blog post the exciting news that the OpenSearch project has reached a major milestone with the launch of OpenSearch 1.0. This milestone marks the first production-ready version of OpenSearch. In addition to being production-ready, multiple new enhancements were added to the project: data streams, trace analytics span filtering, report scheduling, and more.&lt;/p&gt;

&lt;p&gt;Essential reading this week, and a great shout out to the contributors so far.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;COBOL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Great two part post from Veliswa Boya and Didier Durand, &lt;a href="https://aws-oss.beachgeek.co.uk/qk"&gt;Serverless COBOL: Rejuvenating legacy code with open source software Part 1&lt;/a&gt; (and &lt;a href="https://aws-oss.beachgeek.co.uk/ql"&gt;Part 2&lt;/a&gt;) show you how you can use open source software, in this instance GnuCOBOL, combined with AWS to extend the life of legacy code to help build modern (serverless) mainframes. They also take a look at the additional benefits of open source software when legacy features are deployed in such a modern environment. Really great post, and recommended reading this week. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4mwXu8ju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/07/08/didduran-Lambda-Cobol_architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4mwXu8ju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/07/08/didduran-Lambda-Cobol_architecture.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jamulus&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jamulus is an open source project that enables you to play music, rehearse, or just jam with anyone online with low latency and works across multiple desktop clients such as Windows, macOS, or Linux. These clients connect to Jamulus servers worldwide. In this post from Helge Aufderheide, &lt;a href="https://aws-oss.beachgeek.co.uk/qv"&gt;Running your own server for Jamulus, an open source solution to jam with other musicians online&lt;/a&gt; you will soon be able to get your own Jamulus server up and running and fulfil your musical rockstar ambitions to a global audience (rather than just the shower or car)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IwEI31qs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/06/25/ahelge-jamulus_f7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IwEI31qs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/06/25/ahelge-jamulus_f7.png" alt="jamullus"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Kafka&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/qb"&gt;Building an Apache Kafka data processing Java application using the AWS CDK&lt;/a&gt; is a post from  Piotr Chotkowski who walks you through the process of creating a simple end-to-end data processing application. Thanks to AWS Cloud Development Kit (CDK), in just a few lines of code you will have set up an Apache Kafka cluster as well as explaining how to structure your project and package your application for deployment. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--23xwxehh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/0716d9708d321ffb6a00818614779e779925365c/2021/07/12/architecture-1024x517.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--23xwxehh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/0716d9708d321ffb6a00818614779e779925365c/2021/07/12/architecture-1024x517.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Hudi&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Dhiraj Thakur, Sameer Goel, and Imtiaz Sayed have come together to write this first in a series of posts, &lt;a href="https://aws-oss.beachgeek.co.uk/qw"&gt;Query an Apache Hudi dataset in an Amazon S3 data lake with Amazon Athena part 1: Read-optimized queries&lt;/a&gt;. This series will look at Athena and Apache Hudi, and will provide a short overview of key Hudi capabilities along with detailed procedures for using read-optimized queries, snapshot queries, and bootstrapped tables. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Flink/Grafana&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;John Mousa and Sascha Janssen have put together this blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/qd"&gt;Near real-time processing with Amazon Kinesis, Amazon Timestream, and Grafana&lt;/a&gt; is part of a series of posts  that aim to explore various patterns for data ingestion and cost-effective architecture pipelines. This particular looks at device telemetry uses cases. You will see how you can monitor your devices’ operations by visualising operational data with Grafana, using Apache Flink to transforms and aggregate streaming data in near-real time, to detect and clean any errors in time series data timestamps before ingesting them in Timestream to optimise operational analytics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hnWUD6Z---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/07/06/DBB-1453-image011.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hnWUD6Z---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/887309d048beef83ad3eabf2a79a64a389ab1c9f/2021/07/06/DBB-1453-image011.png" alt="overview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All the &lt;a href="https://aws-oss.beachgeek.co.uk/qe"&gt;source code&lt;/a&gt; is available so you can reproduce this for yourself. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Redis&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/qm"&gt;Migrate Amazon ElastiCache to Graviton2 processors&lt;/a&gt; Scott Kellish, Asaf Porat Stoler, Zach Gardner, and Yaron Sananes explore the performance benefits of Graviton2 instances and how to migrate your ElastiCache for Redis cluster to Graviton2. More and more workloads are moving to Arm, and this is an area where open source projects are helping to unlock the ability for customers to run their workloads on any processor architecture.&lt;/p&gt;

&lt;p&gt;Last week we also had Matt Asay and Antony Prasad Thevaraj post, &lt;a href="https://aws-oss.beachgeek.co.uk/qu"&gt;How AWS and Redis Labs partner to make a better Redis&lt;/a&gt; which takes a look at how you can both collaborate with and compete with open source. The post explores that in detail as well as taking a look at how it all comes back to how we can best serve our customers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Param Sharma and Arindam Chatterji show you how to set up end-to-end encryption on Amazon Elastic Kubernetes Service (Amazon EKS) with AWS Certificate Manager Private Certificate Authority in the post, &lt;a href="https://aws-oss.beachgeek.co.uk/qo"&gt;TLS-enabled Kubernetes clusters with ACM Private CA and Amazon EKS&lt;/a&gt;. You will learn how you can set up an NGINX ingress controller on Amazon EKS. As part of the example, we show you how to configure an AWS Network Load Balancer (NLB) with HTTPS using certificates issued via ACM Private CA in front of the ingress controller. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p5aYan1k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/22d200f8670dbdb3e253a90eee5098477c95c23d/2021/07/13/TLS-enabled-Kubernetes-clusters-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p5aYan1k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/22d200f8670dbdb3e253a90eee5098477c95c23d/2021/07/13/TLS-enabled-Kubernetes-clusters-2.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fluentd&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Following on from last weeks Fluentd/Amazon EKS post, this week it is the turn of Re Alvarez-Parmar, Nithish Kumar Murcherla, and Drew Zhang in the post &lt;a href="https://aws-oss.beachgeek.co.uk/q8"&gt;Capturing logs at scale with Fluent Bit and Amazon EKS&lt;/a&gt; where they explore the need for optimisation when using Fluentd or Fluent Bit for log aggregation and demonstrate recent enhancements to Fluent Bit that are designed to reduce the volume API calls it makes to the Kubernetes API servers. An image is worth many words they say, so let me leave this here to tempt you into reading more. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n_Yqlncp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/07/08/image-2021-07-07T200546.692.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n_Yqlncp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/07/08/image-2021-07-07T200546.692.png" alt="graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SageMaker JumpStart&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SageMaker JumpStart is a capability in SageMaker that allows you to quickly get started with ML. JumpStart uses open-source pre-trained models to solve common ML problems like image classification, object detection, text classification, sentence pair classification, and question answering. In this first of a series, Ali Arsanjani, Ashish Khetan, and Li Zhang have put together &lt;a href="https://aws-oss.beachgeek.co.uk/qa"&gt;Run image classification with Amazon SageMaker JumpStart&lt;/a&gt;, covers image classification tasks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tensorflow Serving&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yi Xiang has put together this post, &lt;a href="https://aws-oss.beachgeek.co.uk/q9"&gt;Deploy variational autoencoders for anomaly detection with TensorFlow Serving on Amazon SageMaker&lt;/a&gt; that looks at how you can implement a variational autoencoder on SageMaker to solve an anomaly detection tasks,  showing you how you can deploy multiple trained models to a single TensorFlow Serving multi-model endpoint. [hands on]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PD4ByXHc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2021/07/01/ML1533-image017.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PD4ByXHc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/f1f836cb4ea6efb2a0b1b99f41ad8b103eff4b59/2021/07/01/ML1533-image017.png" alt="model"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#case-study"&gt;
  &lt;/a&gt;
  Case study
&lt;/h3&gt;

&lt;p&gt;Zoltan Bozoky, Soyean Kim, and Victor Leung from Providence Health Care together with Nelson Assis from AWS shared how a public health organisation can use cloud services together with open source to improve medical care, such as infection prevention and control practices in controlled environments, in the post &lt;br&gt;
&lt;a href="https://aws-oss.beachgeek.co.uk/qn"&gt;Using cloud computing to develop an open source infection prevention and disease control solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fHBIDMLD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/07/14/nlsss_quickstart-arch_f1_new.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fHBIDMLD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/07/14/nlsss_quickstart-arch_f1_new.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The open source AWS Quick Start solution described in this post can help you increase data throughput, minimise the total cost of ownership, and enable robust security, while providing enhanced availability, capacity, and scalability through access to advanced data mining and modelling services. [hands on]&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apache-airflow-summit-2021"&gt;
  &lt;/a&gt;
  Apache Airflow Summit 2021
&lt;/h3&gt;

&lt;p&gt;In case you missed it, last week was the Airflow Summit, a free online conference for the worldwide community of developers and users of Apache Airflow. There were a few sessions covering Amazon Managed Workflows for Apache Airflow (MWAA), as well as lots of other great sessions which you should check out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Airflow 2.0 on Amazon MWAA&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.crowdcast.io/e/airflowsummit2021/39"&gt;https://www.crowdcast.io/e/airflowsummit2021/39&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this session we will discuss Amazon Managed Workflows for Apache Airflow (MWAA), how Apache Airflow (and specifically version 2.0) is implemented in the service, best practices for deployment and operations, and the Amazon MWAA team’s commitment to open source usage and contributions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MWAA: Design Choices and Road Ahead&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.crowdcast.io/e/airflowsummit2021/53"&gt;https://www.crowdcast.io/e/airflowsummit2021/53&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An informal and fun chat about the journey that we took and the decisions that we made in building Amazon Managed Workflows for Apache Airflow. We will talk about Our first tryst with understanding Airflow Talking to Amazon Data Engineers and how they ran workflows at scale Key design decisions and the reasons behind them Road ahead, and what we dream about for future of Apache Airflow. Open-Source tenets and commitment from the team We will leave time at the end for a short AMA/Questions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-updates"&gt;
  &lt;/a&gt;
  Quick updates
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;AWS Toolkit for JetBrains&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/qp"&gt;AWS Toolkit for JetBrains now supports Go and TypeScript&lt;/a&gt; Kyle Thomson shares how Go and TypeScript are now supported in this open source plugin.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amplify Flutter&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Last week the AWS Amplify’s tools and libraries for Flutter were updated to support null safety for all of our use cases. Flutter developers can now enjoy all the easy-to-integrate Amplify functionality with higher reliability and improved developer ergonomics. Sound null safety is a Dart language feature in which code is non-nullable by default and turns runtime null-dereference errors into edit-time analysis errors. This enables developers to reduce bugs in their code and benefit from performance improvements through smaller binaries and faster execution.&lt;/p&gt;

&lt;p&gt;Null safety protection was introduced with Flutter 2 as an opt-in feature for developers and, as of Flutter 2.2, is enabled by default for all new Flutter apps. With this release of Amplify Flutter developers can now create new apps with null safety enabled, and no longer have to wait to migrate their existing apps to be null safe.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We have updated Amazon RDS for PostgreSQL to support PostgreSQL minor versions 13.3, 12.7, 11.12, 10.17, and 9.6.22. This release closes security vulnerabilities in PostgreSQL and contains bug fixes and improvements done by the PostgreSQL community.&lt;/p&gt;

&lt;p&gt;This release also adds support for the oracle_fdw extension, which allows your PostgreSQL database to connect and retrieve data stored in separate Oracle databases.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FreeRTOS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;FreeRTOS AWS reference integrations are pre-integrated FreeRTOS projects ported to microcontroller-based evaluation boards that demonstrate end-to-end connectivity to AWS IoT Core. This helps developers save months of development effort and accelerate time to market. FreeRTOS AWS reference integrations now include the new managed AWS IoT Over-the-Air update (OTA) library, AWS IoT Jobs library, and the AWS IoT Device Defender custom metrics feature from the FreeRTOS 202012.01 LTS release, and the coreMQTT Agent library from the FreeRTOS 202104.00 release.&lt;/p&gt;

&lt;p&gt;Developers can use the reference integrations to get started on a wide variety of evaluation boards and use the integrated libraries to remotely update IoT device firmware, manage IoT device fleets, monitor IoT device fleet metrics, and to simplify the management of MQTT connections in multi-threaded applications.&lt;/p&gt;

&lt;p&gt;Read more, including &lt;a href="https://aws-oss.beachgeek.co.uk/q3"&gt;links to supporting blog posts here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Open datasets&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Forty-four new or updated datasets from the National Library of Medicine, Digital Earth Africa, Amazon, and others are available on the Registry of Open Data in the following categories: COVID-19, Agriculture, Climate and Weather, Energy, Geospatial, Life Sciences and Machine Learning.&lt;/p&gt;

&lt;p&gt;Check out the full announcement, including links to the open datasets in, &lt;a href="https://aws-oss.beachgeek.co.uk/q4"&gt;New datasets available on the Registry of Open Data from the National Library of Medicine, Digital Earth Africa, Amazon, and others&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also read the blog post from Joe Flasher, &lt;a href="https://aws-oss.beachgeek.co.uk/qt"&gt;Satellite imagery over Africa, a large-scale climate ensemble, and product listings with 3D renderings: The latest open data on AWS&lt;/a&gt; that looks at a few of those open datasets in more detail.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hugging Face&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Last week we announced AWS Deep Learning Containers (DLCs) with integrated SDKs for inference that enable customers to easily deploy Hugging Face models in Amazon SageMaker at scale. Read the full announcement in the post, &lt;a href="https://aws-oss.beachgeek.co.uk/q5"&gt;Amazon announces new AWS Deep Learning Containers to deploy Hugging Face models faster on Amazon SageMaker&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#events-for-your-diary"&gt;
  &lt;/a&gt;
  Events for your diary
&lt;/h3&gt;

&lt;p&gt;Later this week, there are a couple of interesting looking events you should check out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developing Secure Open Source Software (OSS)&lt;/strong&gt; [FREE Event]&lt;br&gt;
&lt;strong&gt;July 20th, 9:30 – 11:00am PDT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;David Wheeler, Director of Open Source Supply Chain Security at The Linux Foundation will discuss steps you can take to develop more secure OSS and evaluate OSS for security.&lt;/p&gt;

&lt;p&gt;Read more and &lt;a href="https://aws-oss.beachgeek.co.uk/pm"&gt;register here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ML Dev Day Live Workshop&lt;/strong&gt; [FREE Event]&lt;br&gt;
&lt;strong&gt;July 21st 9:00am PDT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Learn how to build highly scalable and reliable pipelines for analytics using open source technologies such as Apache Spark, Delta Lake and open source machine learning frameworks such as TensorFlow, XGBoost, scikit-learn and MLFlow.&lt;/p&gt;

&lt;p&gt;Read more and &lt;a href="https://aws-oss.beachgeek.co.uk/pl"&gt;register here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Open Data Lakes with Presto, Apache Hudi &amp;amp; AWS Glue and S3 – the next generation of analytics&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;July 27th at 10am PT/ 1pm ET&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sign up for this roundtable discussion where experts from each layer in this stack – Presto, AWS, and Apache Hudi – will discuss why they are seeing a pronounced adoption to this next generation of cloud data lake analytics and how these technologies enable open, flexible, and highly performant analytics in the cloud.&lt;/p&gt;

&lt;p&gt;Read more &lt;a href="https://aws-oss.beachgeek.co.uk/q7"&gt;and register here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloud Native Day&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;23rd September, Bern Switzerland&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What is this, an in person event returning? A stellar line up including our own Michael Hausenblas, an event looking at CNCF projects and the future of IT. Find out more and to view prices/register, by clicking &lt;a href="https://cloudnativeday.ch/en/#speakers"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stay-in-touch-with-open-source-at-aws"&gt;
  &lt;/a&gt;
  Stay in touch with open source at AWS
&lt;/h3&gt;

&lt;p&gt;I hope this summary has been useful. Remember to check out the &lt;a href="https://aws.amazon.com/opensource/?opensource-all.sort-by=item.additionalFields.startDate&amp;amp;opensource-all.sort-order=asc"&gt;Open Source homepage&lt;/a&gt; to keep up to date with all our activity in open source by following us on [@AWSOpen](&lt;a href="https://twitter.com/AWSOpen"&gt;https://twitter.com/AWSOpen&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>aws</category>
    </item>
    <item>
      <title>How To Find Which AWS Region Is Closest To You?</title>
      <author>Lou (🚀 Open Up The Cloud ☁️)</author>
      <pubDate>Mon, 19 Jul 2021 07:23:59 +0000</pubDate>
      <link>https://dev.to/aws-builders/how-to-find-which-aws-region-is-closest-to-you-2e5e</link>
      <guid>https://dev.to/aws-builders/how-to-find-which-aws-region-is-closest-to-you-2e5e</guid>
      <description>&lt;p&gt;You can’t do anything in AWS without picking a region. You can’t navigate the console, launch a server, or even &lt;a href="https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/setting-region.html"&gt;use the SDK&lt;/a&gt;. AWS resources have to exist in some physical location. So where should you pick? And based on what?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fp0bKKEd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/aws-regions-760x425.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fp0bKKEd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/aws-regions-760x425.png" alt="Which AWS Region?"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Many first-time AWS users pick the region closest to them. This is okay to get started, but you should also understand the implications (such as cost, latency, resilience, and regulations) when choosing an AWS region.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Which AWS region is closest to you?&lt;/strong&gt; Review the &lt;a href="https://aws.amazon.com/about-aws/global-infrastructure/"&gt;AWS global infrastructure&lt;/a&gt; map to see your geographical distance to AWS regions. Use &lt;a href="https://www.cloudping.info/"&gt;cloudping.info&lt;/a&gt; to see latency from your browser, &lt;a href="http://cloudping.co"&gt;cloudping.co&lt;/a&gt; for inter-region latency, or &lt;a href="https://github.com/ekalinin/awsping"&gt;awsping&lt;/a&gt; (command line tool) to see latencies from a remote server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-closest-aws-regions-to-major-cities"&gt;
  &lt;/a&gt;
  The Closest AWS Regions To Major Cities
&lt;/h2&gt;

&lt;p&gt;Some of you will want to just get started quickly and don’t need to know the fine details involved in picking a region. If that’s you, here are the closest geographic regions to some major cities around the world. Take your pick.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Location&lt;/th&gt;
&lt;th&gt;AWS Region&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;America (San Francisco)&lt;/td&gt;
&lt;td&gt;Oregon / Northern California&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;America (New York)&lt;/td&gt;
&lt;td&gt;Northern Virginia / Ohio&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;United Kingdom (London)&lt;/td&gt;
&lt;td&gt;London&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Russia (Moscow)&lt;/td&gt;
&lt;td&gt;Stockholm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Israel (Tel Aviv)&lt;/td&gt;
&lt;td&gt;Frankfurt&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;India (New Delhi)&lt;/td&gt;
&lt;td&gt;Mumbai&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Australia (Sydney)&lt;/td&gt;
&lt;td&gt;Sydney&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;If you want to calculate your AWS region more scientifically than picking based on geography alone there are a few techniques and tools that we’ll go through that you can use to create a shortlist of suitable regions.&lt;/p&gt;

&lt;p&gt;When you have that shortlist, there are some factors to consider such as cost and functionality differences which we’ll also cover. Let’s start by looking at the different ways to find your closest region more accurately.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-shortlist-aws-regions"&gt;
  &lt;/a&gt;
  How To Shortlist AWS Regions
&lt;/h2&gt;

&lt;p&gt;Your first stop when choosing an AWS region should be the &lt;a href="https://aws.amazon.com/about-aws/global-infrastructure"&gt;AWS Global Infrastructure&lt;/a&gt;. On this part of the AWS website, you’ll find important details for each AWS region, such as the number of availability zones per region and proximity to edge locations. From here you can start to make a shortlist.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7jHwjixG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/awsglobalnetwork.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7jHwjixG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/awsglobalnetwork.png" alt="AWS Global Network Map"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don’t be fooled by choosing an AWS region based solely on geographic proximity (i.e drawing a line between two locations). Because data doesn’t travel the internet in direct lines, it has to follow the existing infrastructure of the internet within countries and between them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zy9jNdUL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/global-internet-infra.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zy9jNdUL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/global-internet-infra.png" alt="Global Internet Infrastructure Map"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Take a look at the &lt;a href="https://www.infrapedia.com/app"&gt;infrapedia global internet infrastructure map&lt;/a&gt; (above), to see what I mean. You’ll want to take the global infrastructure into account when choosing a region, and consider running latency tests before finalising your choice (more on how to do that below!).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#find-your-nearest-aws-region-from-your-browser"&gt;
  &lt;/a&gt;
  Find Your Nearest AWS Region From Your Browser
&lt;/h2&gt;

&lt;p&gt;A neat way to find the AWS region closest to your current location is the website &lt;a href="https://www.cloudping.info/"&gt;cloudping.info&lt;/a&gt;, created by Michael Leonhard. Cloud ping will show you all the latencies to different AWS regions straight-in your browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WR9JZef9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/cloudping.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WR9JZef9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/cloudping.png" alt="Cloud Ping Results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The main downside of this approach is that it doesn’t allow you to test speeds to regions from arbitrary locations other than your own. To test latencies from different locations we’ll need a tool we can run on different machines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#find-your-nearest-aws-region-via-the-command-line"&gt;
  &lt;/a&gt;
  Find Your Nearest AWS Region Via The Command Line
&lt;/h2&gt;

&lt;p&gt;If you need to automate the process of finding your nearest region, you can use &lt;a href="http://git@github.com:ekalinin/awsping.git"&gt;AWS ping&lt;/a&gt;, by Eugene Kalinin, which you can find on GitHub.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wcnqq8WN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/awsping-github.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wcnqq8WN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/awsping-github.png" alt="AWS Ping Region Latency Results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The source code for AWS ping is quite simple (written in Go) should you needed to modify or extend it to suit your needs. You can use AWS ping to test latencies from different locations, or latencies between your shortlisted regions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0HmItxWB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/awsping.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0HmItxWB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/awsping.png" alt="AWS Ping CLI Output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#find-latencies-between-all-aws-regions"&gt;
  &lt;/a&gt;
  Find Latencies Between All AWS Regions
&lt;/h2&gt;

&lt;p&gt;But, sometimes, the latency you’re after is the latency between the AWS regions themselves, for instance, if you already have a region already chosen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K9e0t_d3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/region-latency.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K9e0t_d3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/region-latency.png" alt="Latencies Between All AWS Regions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A good tool for seeing latencies between regions is &lt;a href="https://www.cloudping.co/grid"&gt;cloudping.co&lt;/a&gt; (a different one this time!) created by &lt;a href="https://twitter.com/mda590"&gt;Matt Adorjan&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#factors-which-affect-the-aws-region-you-should-choose"&gt;
  &lt;/a&gt;
  Factors Which affect The AWS Region You Should Choose
&lt;/h2&gt;

&lt;p&gt;Not all AWS regions are the same with regards to cost and functionality. We’ve looked at some ways you can shortlist AWS regions, but we’ve mostly discussed geographical distance and latency. Let’s now take a look at the factors to consider before finalising your AWS region choice.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#factor-1-latency"&gt;
  &lt;/a&gt;
  Factor 1: Latency
&lt;/h3&gt;

&lt;p&gt;As we’ve already discussed, latency to your customer is an important factor when choosing an AWS region. Be sure to factor in the internet infrastructure surrounding your chosen region, and not just the geographical distance, doing some testing of your own where you can. You’ll also want to test the latency between regions if you choose more than one.&lt;/p&gt;

&lt;p&gt;If latency is important to you, there also other AWS services and tools that are worth researching, such as &lt;a href="https://aws.amazon.com/about-aws/global-infrastructure/localzones"&gt;AWS local zones&lt;/a&gt;, and &lt;a href="https://aws.amazon.com/edge/services/"&gt;AWS edge locations&lt;/a&gt;, which allow you to lower the physical distance to your customer, and also advanced routing techniques like &lt;a href="https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html"&gt;latency and geo-based routing&lt;/a&gt; which allow you to dynamically find the most performant service to route your customers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#factor-2-cost-differences"&gt;
  &lt;/a&gt;
  Factor 2: Cost Differences
&lt;/h3&gt;

&lt;p&gt;Not all services cost the same across all regions— the differences in the price can be quite drastic where your choice of region could nearly double your cloud bill. The best way to understand the variation is to add your predicted or current architecture into the &lt;a href="https://calculator.aws/#/"&gt;the AWS cost calculator&lt;/a&gt; to compare between regions.&lt;br&gt;&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--52EPtufp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/differing-aws-costs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--52EPtufp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/differing-aws-costs.png" alt="Comparing the price of two EC2 instances in two regions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To give you an idea of the potential price differences, a &lt;strong&gt;t4g.xlarge (4 vcpus, 16 GiB RAM) EC2 instance&lt;/strong&gt; with a &lt;strong&gt;30GB EBS (GP2)&lt;/strong&gt; will cost you &lt;strong&gt;64.54 USD&lt;/strong&gt; in North Virginia, as compared with &lt;strong&gt;103.72 USD&lt;/strong&gt; in Cape town.&lt;/p&gt;

&lt;p&gt;Additionally, an often-overlooked cost factor is data transfer, which can be notoriously difficult to predict. Again, to get a high-level estimate of predicted transfer costs your best bet is to use the &lt;a href="https://calculator.aws/"&gt;AWS cost calculator&lt;/a&gt; but instead of adding a service, search for “Data Transfer”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wzBJ489_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/data-trasnfer-regions.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wzBJ489_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://openupthecloud.com/wp-content/uploads/2021/06/data-trasnfer-regions.png" alt="Comparing data transfer costs between AWS regions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now of course most of you at this point will be thinking: “Which is the cheapest AWS region?” But pricing varies based on region, so it’s hard to definitively say which AWS region is cheapest. That being said, North Virginia is commonly reported as the cheapest region anecdotally.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#factor-3-functionality-differences"&gt;
  &lt;/a&gt;
  Factor 3: Functionality Differences
&lt;/h3&gt;

&lt;p&gt;Not all regions are given equal treatment when it comes to service rollout. AWS states: “Our general policy is to deliver AWS services, features and instance types to all AWS Regions within 12 months of general availability.” (&lt;a href="https://aws.amazon.com/about-aws/global-infrastructure/regions_az/"&gt;source&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Whilst this is true in many cases, anecdotal evidence shows that some regions can wait years before a service becomes available. So if you want a cutting-edge service, it’s best to use one of the more actively updated regions (e.g. us-east-1). Find the &lt;a href="https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/?p=ngi&amp;amp;loc=4"&gt;full list of AWS services available in each region&lt;/a&gt; here.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#factor-4-stability-differs-per-region"&gt;
  &lt;/a&gt;
  Factor 4: Stability Differs Per Region
&lt;/h3&gt;

&lt;p&gt;Not all regions have the same stability. The availability of services between regions has been known to differ, with North Virginia (us-east-1) being notoriously unstable as most service updates are rolled out to that region first.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--cj5nuGlx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1373606574116245505/LDUlelgc_normal.jpg" alt="Luc van Donkersgoed profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Luc van Donkersgoed
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @donkersgood
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Honest question: since us-east-1 can objectively be considered the least stable region, why would anyone use it, aside from strict latency requirements?
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      20:05 PM - 25 Nov 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1331690522373709829" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1331690522373709829" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1331690522373709829" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Because AWS doesn’t publish any region-specific availability data it’s hard to do a scientific region stability comparison. However in line with general best practices, for high availability, your workloads should be balanced across multiple availability zones, or even regions for redundancy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#factor-5-governance-requirements"&gt;
  &lt;/a&gt;
  Factor 5: Governance Requirements
&lt;/h3&gt;

&lt;p&gt;The final factor to consider when choosing an AWS region are your legal obligations. For compliance with policies such as &lt;a href="https://gdpr.eu/"&gt;GDPR&lt;/a&gt; it could be necessary for you to store or process data within a certain region, so don’t forget to consider the requirements for locating your data and services when making your choice on which AWS region to choose.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#choose-the-aws-region-right-for-you"&gt;
  &lt;/a&gt;
  Choose The AWS Region Right For You
&lt;/h2&gt;

&lt;p&gt;Quite a bit of analysis can go into finding the closest, best-fitting AWS region. If you’re just starting with AWS you can choose a region based on practicality. However, when it comes to moving services to production, consider things like latency, cost and functionality before you make your final decision.&lt;/p&gt;

&lt;p&gt;If you’re looking to learn more about AWS and the cloud, you should also check out &lt;a href="https://openupthecloud.com/recommended-resources/"&gt;My (Highly) Recommended Books &amp;amp; Courses&lt;/a&gt;, and check out the monthly &lt;a href="http://newsletter.thedevcoach.co.uk/"&gt;Open Up The Cloud newsletter&lt;/a&gt; to stay up to date with cloud news!&lt;/p&gt;




&lt;p&gt;Hey! 👋 If we haven't met, let me introduce myself, I'm &lt;a href="https://twitter.com/loujaybee"&gt;Lou&lt;/a&gt;, and I created &lt;em&gt;&lt;a href="http://thedevcoach.co.uk/"&gt;Open Up The Cloud&lt;/a&gt;&lt;/em&gt; to help you get your start, and grow your career in cloud 🚀. &lt;/p&gt;

&lt;p&gt;If you're interested in cloud, the best way to keep up-to-date with news, and everything I publish is via the &lt;a href="http://newsletter.thedevcoach.co.uk/"&gt;monthly cloud newsletter&lt;/a&gt;. And find &lt;em&gt;Open Up The Cloud&lt;/em&gt; on &lt;a href="https://www.youtube.com/channel/UCAklaE5D59xWtip-3Jwa7xA"&gt;YouTube&lt;/a&gt;, &lt;a href="https://twitter.com/openupthecloud"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.instagram.com/openupthecloud"&gt;Instagram&lt;/a&gt;... wherever you like to hang out! 😄&lt;/p&gt;




&lt;p&gt;The post &lt;a href="https://openupthecloud.com/find-aws-region-closest/"&gt;How To Find Which AWS Region Is Closest To You?&lt;/a&gt; appeared first on &lt;a href="https://openupthecloud.com"&gt;Open Up The Cloud&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>devops</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Pro Tips For Designing Robust React Components</title>
      <author>Ali Sherief</author>
      <pubDate>Mon, 19 Jul 2021 06:51:43 +0000</pubDate>
      <link>https://dev.to/zenulabidin/pro-tips-for-designing-robust-react-components-2aii</link>
      <guid>https://dev.to/zenulabidin/pro-tips-for-designing-robust-react-components-2aii</guid>
      <description>&lt;p&gt;As you already know, React components are written as functions these days, not classes. Among other things, it allows us to dispense with binding methods and the this prop. But with both ways, you ultimately have to write a render method that returns a part of the DOM in the form of JSX.&lt;/p&gt;

&lt;p&gt;They return a part of the DOM and do not generate a completely new one because the DOM is quite expensive to update, so developers try to minimize the number of DOM updates as much as possible.&lt;/p&gt;

&lt;p&gt;Hence, most web developers reduce the number of components renders to a minimum to reduce the load on both the client's browser and the server.&lt;/p&gt;

&lt;p&gt;Another important requirement of React components is that they update their UI fairly quickly. This prevents users from unnecessarily waiting on the app frontend and improves user experience.&lt;/p&gt;

&lt;p&gt;Finally, it helps when your components are reusable. Not only do you avoid writing the same code twice, thus satisfying the DRY (Don't Repeat Yourself) principle, you can also be confident that each instance of your reusable, independent components will do a minimal number of re-renders.&lt;/p&gt;

&lt;p&gt;In this article, and in the next few articles in this series, I will share with you some tips to reduce the number of renders your web app makes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#try-to-partition-the-app-so-that-each-component-is-independent-of%C2%A0others"&gt;
  &lt;/a&gt;
  Try to partition the app so that each component is independent of others
&lt;/h2&gt;

&lt;p&gt;The reason for this is, if your components are interdependent, then each state update in one component will likely require a state update in the other component. This causes a re-render, so you end up rendering multiple times when you do a higher-level component update. Ideally, you want to update components once per high-level update, but of course, this may not always be possible.&lt;/p&gt;

&lt;p&gt;It would help if you tried to make each component partitioned in such a way that represents the UI layout of your app. For example, most apps have a header bar with buttons and links on it. So you should contain your button components in that location inside a header component.&lt;/p&gt;

&lt;p&gt;Each component you create adds complexity to the whole application. You have to make sure the parameters are correct, and the returned JSX is what you expected, and, in the case of arrow or lambda functions, that they are defined in an order such that a function does not call another such arrow or lambda function above it in the file.&lt;/p&gt;

&lt;p&gt;Try to make the nesting level of components as flat as possible. Although the way React updates the DOM ensures that nested components are not re-rendered if they have not been modified in a parent component, the advantage of making the component tree flat is that it makes it easier for you to debug each component by itself.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use-prop-destructuring"&gt;
  &lt;/a&gt;
  When to use prop destructuring
&lt;/h3&gt;

&lt;p&gt;Prop destructuring in methods can greatly cut down the length of your prop variable names - if done properly. For one thing, it is not recommended to destructure multiple layers of props simultaneously (nested destructuring) because you cannot validate the data in the intermediate-level props, so that is a source for semantic errors.&lt;/p&gt;

&lt;p&gt;It is not uncommon for components to have a few dozen props, so just the spelling of those props by itself will get messy when you write your functional component.&lt;/p&gt;

&lt;p&gt;You should destructre your props, one level at a time, when there are a small number of them like this:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Credits: &lt;a href="https://javascript.plainenglish.io/destructure-react-props-with-es6-object-destructuring-for-cleaner-code-3984453e484d"&gt;https://javascript.plainenglish.io/destructure-react-props-with-es6-object-destructuring-for-cleaner-code-3984453e484d&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So that you avoid writing functions that continuously reference &lt;code&gt;props&lt;/code&gt; like this:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Credits: &lt;a href="https://javascript.plainenglish.io/destructure-react-props-with-es6-object-destructuring-for-cleaner-code-3984453e484d"&gt;https://javascript.plainenglish.io/destructure-react-props-with-es6-object-destructuring-for-cleaner-code-3984453e484d&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Using another component as an example, we can do two different destructuring assignments to drill down the props, doing the equivalent of nested destructuring:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Credits: &lt;a href="https://stackoverflow.com/questions/60589914/destructuring-props-in-react"&gt;https://stackoverflow.com/questions/60589914/destructuring-props-in-react&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In addition to that, the spread operator fits nicely on the right side of the assignment involving a destructured variables.&lt;/p&gt;




&lt;p&gt;That's all for today folks. Stay tuned for next week's post where I write about pro tips for managing component state. Also, let me know in the comments below if you have any questions.&lt;/p&gt;

&lt;p&gt;Cover image by &lt;a href="https://unsplash.com/@les_photos_de_raph?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Raphaël Biscaldi&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/atoms?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>An introduction to bot programming: building a simple Bomberman bot (part 2)</title>
      <author>Joy</author>
      <pubDate>Mon, 19 Jul 2021 06:48:03 +0000</pubDate>
      <link>https://dev.to/joooyz/an-introduction-to-bot-programming-building-a-simple-bomberman-bot-part-2-5blg</link>
      <guid>https://dev.to/joooyz/an-introduction-to-bot-programming-building-a-simple-bomberman-bot-part-2-5blg</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This is part 2 of a series originally published on the &lt;a href="https://www.gocoder.one/blog/beginners-bot-programming-tutorial-bomberman"&gt;Coder One blog&lt;/a&gt;. Check out Part 1 here: &lt;a href="https://www.gocoder.one/blog/how-to-build-an-ai-game-bot-bomberman"&gt;Building an AI game bot for Bomberman&lt;/a&gt;. In this tutorial series, we'll build a bot in Python that can play in a variation of the classic Bomberman game called &lt;a href="https://dnds.gocoder.one"&gt;Dungeons and Data Structures&lt;/a&gt;. We'll start off simple, and add advanced strategies in the later parts of the series.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YyCwYR6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.gocoder.one/static/dungeons-and-data-structures-50eeec34d83c91cf8631383400abf3fd.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YyCwYR6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.gocoder.one/static/dungeons-and-data-structures-50eeec34d83c91cf8631383400abf3fd.gif" alt="Dungeons and Data Structures"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;p&gt;Make sure you check out &lt;a href="https://www.gocoder.one/blog/how-to-build-an-ai-game-bot-bomberman"&gt;part 1 of this bot programming tutorial&lt;/a&gt; series first. So far we've covered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Setting up the game environment &lt;a href="https://github.com/CoderOneHQ/dungeons-and-data-structures"&gt;Dungeons and Data Structures&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Working with a starter Python agent that makes random moves&lt;/li&gt;
&lt;li&gt;Getting familiar with the game environment's objects and methods&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In part 2, we'll show you how to build a simple agent called the '&lt;strong&gt;Wanderer Agent&lt;/strong&gt;' that implements some scripted logic to explore and navigate the world. More specifically, it:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Looks at its immediate surroundings&lt;/li&gt;
&lt;li&gt;Checks which directions are valid ones to move in&lt;/li&gt;
&lt;li&gt;Chooses a random valid direction to take&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you're more interested in the topic of reinforcement learning, check out my other introductory tutorial to &lt;a href="https://www.gocoder.one/blog/rl-tutorial-with-openai-gym"&gt;Reinforcement Learning With OpenAI Gym’s ‘Taxi’&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-helper-methods"&gt;
  &lt;/a&gt;
  Step 1: Helper methods
&lt;/h2&gt;

&lt;p&gt;In this section, we'll walk through creating 3 helper methods that will be useful for our agent:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;get_surrounding_tiles()&lt;/code&gt;: Returns a list of our surrounding tiles&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;get_empty_tiles()&lt;/code&gt;: Returns tiles that are valid for our agent to move into&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;move_to_tile()&lt;/code&gt;: Returns the corresponding action the agent should take to move to a tile&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You should be familiar with the &lt;code&gt;game_state&lt;/code&gt; and &lt;code&gt;player_state&lt;/code&gt; objects from &lt;a href="https://www.gocoder.one/blog/how-to-build-an-ai-game-bot-bomberman"&gt;part 1 of the tutorial&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-getsurroundingtiles-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;get_surrounding_tiles()&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Our first helper method &lt;code&gt;get_surrounding_tiles()&lt;/code&gt; will return us a list of tiles surrounding our agent's current location as an (x,y) tuple of the game map.&lt;/p&gt;

&lt;p&gt;We'll take advantage of the coordinate-representation of the map:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mqbwWFCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t59bfkevn1h72pfy3h7z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mqbwWFCM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t59bfkevn1h72pfy3h7z.png" alt="DNDS map"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Below is the skeleton code for our &lt;code&gt;get_surrounding_tiles()&lt;/code&gt; method*&lt;em&gt;.&lt;/em&gt;* We've left you some gaps to fill out. If you get stuck, check out the &lt;a href="https://gist.github.com/joooyzee/8c1282a1ad9584480f7cbf1ee2df03a4"&gt;solution&lt;/a&gt;. (💡 &lt;strong&gt;Hint:&lt;/strong&gt; check the &lt;a href="https://dnds.gocoder.one/getting-started/game-documentation#game-state"&gt;game state documentation&lt;/a&gt; for useful methods).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# given our current location as an (x,y) tuple, return the surrounding tiles as a list
# (i.e. [(x1,y1), (x2,y2),...])
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_surrounding_tiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c1"&gt;# location[0] = x-index; location[1] = y-index
&lt;/span&gt;    &lt;span class="n"&gt;tile_north&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   
    &lt;span class="n"&gt;tile_south&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;     &lt;span class="c1"&gt;################ FILL THIS ###################
&lt;/span&gt;    &lt;span class="n"&gt;tile_west&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;     &lt;span class="c1"&gt;################ FILL THIS ###################
&lt;/span&gt;    &lt;span class="n"&gt;tile_east&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;         

    &lt;span class="n"&gt;surrounding_tiles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tile_north&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tile_south&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tile_west&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tile_east&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tile&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;surrounding_tiles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# check if the tile is within the boundaries of the game
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;################ CHANGE 'NONE' ###################
&lt;/span&gt;            &lt;span class="c1"&gt;# remove invalid tiles from our list
&lt;/span&gt;            &lt;span class="n"&gt;surrounding_tiles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;surrounding_tiles&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://gist.github.com/joooyzee/8c1282a1ad9584480f7cbf1ee2df03a4"&gt;Link to solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, add your &lt;code&gt;get_surrounding_tiles()&lt;/code&gt; method to your &lt;code&gt;Agent&lt;/code&gt; class in &lt;code&gt;my_agent.py&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Agent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;game_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;player_state&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;'''
        This method is called each time your Agent is required to choose an action
        '''&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="c1"&gt;########################
&lt;/span&gt;    &lt;span class="c1"&gt;###      HELPERS     ###
&lt;/span&gt;    &lt;span class="c1"&gt;########################
&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_surrounding_tiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;'''
        Your code here
        '''&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;surrounding_tiles&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-getemptytiles-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;get_empty_tiles()&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;In order for our agent to move effectively, it will also need to know which of its surrounding tiles are actually empty (i.e. not containing a block or other player). Here's a &lt;code&gt;get_empty_tiles&lt;/code&gt; method with some blanks for you to fill out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# given a list of tiles, return only those that are empty/free
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_empty_tiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tiles&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;empty_tiles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tile&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tiles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;################ CHANGE 'NONE' ###################
&lt;/span&gt;            &lt;span class="c1"&gt;# add empty tiles to list
&lt;/span&gt;            &lt;span class="n"&gt;empty_tiles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;empty_tiles&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://gist.github.com/joooyzee/ba0d21dc7090ebefab6a0d4e45d5effe"&gt;Link to solution&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-movetotile-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;move_to_tile()&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Given an adjacent surrounding tile and our current location, &lt;code&gt;move_to_tile()&lt;/code&gt; will return the action (i.e. &lt;code&gt;u&lt;/code&gt;, &lt;code&gt;d&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt;, &lt;code&gt;r&lt;/code&gt;) that will get us there. E.g. if the tile we want to move to is directly north of us, this method will return &lt;code&gt;u&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# given an adjacent tile location, move us there
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;move_to_tile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tile&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c1"&gt;# see where the tile is relative to our current location
&lt;/span&gt;    &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;# return the action that moves in the direction of the tile
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'u'&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;     &lt;span class="c1"&gt;################ FILL THIS ###################
&lt;/span&gt;    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;     &lt;span class="c1"&gt;################ FILL THIS ###################
&lt;/span&gt;    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'l'&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://gist.github.com/joooyzee/c9fa640b4ee2ebc737388218d2da2aea"&gt;Link to solution&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-agent-logic"&gt;
  &lt;/a&gt;
  Step 2: Agent logic
&lt;/h2&gt;

&lt;p&gt;With our helper methods in place, we'll be able to implement some simple logic to control our agent to navigate the game world.&lt;/p&gt;

&lt;p&gt;Here's some sample skeleton code to help you piece together your agent. Here's also a link to our &lt;a href="https://github.com/CoderOneHQ/agent-template/blob/main/wanderer.py"&gt;own version of Wanderer Agent&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Agent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;'''
        Place any initialization code for your agent here (if any)
        '''&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next_move&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;game_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;player_state&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;'''
        This method is called each time your Agent is required to choose an action
        '''&lt;/span&gt;
        &lt;span class="c1"&gt;########################
&lt;/span&gt;        &lt;span class="c1"&gt;###    VARIABLES     ###
&lt;/span&gt;        &lt;span class="c1"&gt;########################
&lt;/span&gt;
        &lt;span class="c1"&gt;# game map is represented in the form (x,y)
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;game_state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;           &lt;span class="c1"&gt;################ FILL THIS ###################
&lt;/span&gt;
        &lt;span class="c1"&gt;# useful for later
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;game_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;game_state&lt;/span&gt; 
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;player_state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;

        &lt;span class="c1"&gt;########################
&lt;/span&gt;        &lt;span class="c1"&gt;###      AGENT       ###
&lt;/span&gt;        &lt;span class="c1"&gt;########################
&lt;/span&gt;
        &lt;span class="c1"&gt;# get our surrounding tiles
&lt;/span&gt;        &lt;span class="n"&gt;surrounding_tiles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_surrounding_tiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# get list of empty tiles around us
&lt;/span&gt;        &lt;span class="n"&gt;empty_tiles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;           &lt;span class="c1"&gt;################ FILL THIS ################### 
&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;empty_tiles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# choose an empty tile to walk to
&lt;/span&gt;            &lt;span class="n"&gt;random_tile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;empty_tiles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;            &lt;span class="c1"&gt;################ FILL THIS ################### 
&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# we're trapped
&lt;/span&gt;            &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;

    &lt;span class="c1"&gt;########################
&lt;/span&gt;    &lt;span class="c1"&gt;###      HELPERS     ###
&lt;/span&gt;    &lt;span class="c1"&gt;########################
&lt;/span&gt;
    &lt;span class="c1"&gt;# given our current location as an (x,y) tuple, return the surrounding tiles as a list
&lt;/span&gt;    &lt;span class="c1"&gt;# (i.e. [(x1,y1), (x2,y2),...])
&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_surrounding_tiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="c1"&gt;# location[0] = x-index; location[1] = y-index
&lt;/span&gt;        &lt;span class="n"&gt;tile_north&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   
        &lt;span class="n"&gt;tile_south&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;     &lt;span class="c1"&gt;################ FILL THIS ###################
&lt;/span&gt;        &lt;span class="n"&gt;tile_west&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;     &lt;span class="c1"&gt;################ FILL THIS ###################
&lt;/span&gt;        &lt;span class="n"&gt;tile_east&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;         

        &lt;span class="n"&gt;surrounding_tiles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tile_north&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tile_south&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tile_west&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tile_east&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tile&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;surrounding_tiles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# check if the tile is within the boundaries of the game
&lt;/span&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;################ CHANGE 'NONE' ###################
&lt;/span&gt;                &lt;span class="c1"&gt;# remove invalid tiles from our list
&lt;/span&gt;                &lt;span class="n"&gt;surrounding_tiles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;surrounding_tiles&lt;/span&gt;

    &lt;span class="c1"&gt;# given a list of tiles, return only those that are empty/free
&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_empty_tiles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tiles&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;empty_tiles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tile&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tiles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;################ CHANGE 'NONE' ###################
&lt;/span&gt;                &lt;span class="c1"&gt;# add empty tiles to list
&lt;/span&gt;                &lt;span class="n"&gt;empty_tiles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;empty_tiles&lt;/span&gt;

    &lt;span class="c1"&gt;# given an adjacent tile location, move us there
&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;move_to_tile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tile&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="c1"&gt;# see where the tile is relative to our current location
&lt;/span&gt;        &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="c1"&gt;# return the action that moves in the direction of the tile
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'u'&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;     &lt;span class="c1"&gt;################ FILL THIS ###################
&lt;/span&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;     &lt;span class="c1"&gt;################ FILL THIS ###################
&lt;/span&gt;        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'l'&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://github.com/CoderOneHQ/agent-template/blob/main/wanderer.py"&gt;Link to full Wanderer Agent&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Save your agent (&lt;code&gt;my_agent.py&lt;/code&gt;) then run the following command in your terminal to watch your new bot go up against itself:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;coderone-dungeon &lt;span class="nt"&gt;--watch&lt;/span&gt; my_agent my_agent
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-3-bombs-away"&gt;
  &lt;/a&gt;
  Step 3: Bombs away
&lt;/h2&gt;

&lt;p&gt;To win at &lt;a href="https://dnds.gocoder.one"&gt;Dungeons and Data Structures&lt;/a&gt;, your agent will need to do more than roam around the map. It will need to know how to place bombs strategically in order to blow up crates for points or take down your opponent. &lt;/p&gt;

&lt;p&gt;Now that you've got a better grasp of the environment, have a go at implementing some logic around bomb placements.&lt;/p&gt;

&lt;p&gt;If you're interested, check out our implementation of a &lt;a href="https://github.com/CoderOneHQ/agent-template/blob/main/flee_bot.py"&gt;very simple 'Flee Agent'&lt;/a&gt;. It uses the &lt;a href="https://iq.opengenus.org/euclidean-vs-manhattan-vs-chebyshev-distance/"&gt;Manhattan Distance&lt;/a&gt; formula to decide whether to focus on running away from nearby bombs or placing more of them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h2&gt;

&lt;p&gt;In this part, we went from a random agent that selects its moves at random, to one that can interpret its surrounding environment and explore it.&lt;/p&gt;

&lt;p&gt;In the next part of the series, we'll implement a pathfinding algorithm to help it navigate to useful objects around the map. You can follow me here on DEV or on &lt;a href="https://joooyz.medium.com/"&gt;Medium&lt;/a&gt; to get notified when Part 3 is out.&lt;/p&gt;

&lt;p&gt;P.S. If you're interested in supporting this project, please follow us on &lt;a href="https://www.producthunt.com/upcoming/dungeons-and-data-structures"&gt;Product Hunt&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Thanks for reading 🙌&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>ai</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>MATLAB MONDAYS💥- Crash Course part-4</title>
      <author>Aatmaj</author>
      <pubDate>Mon, 19 Jul 2021 06:36:48 +0000</pubDate>
      <link>https://dev.to/aatmaj/matlab-mondays-crash-course-part-4-2c43</link>
      <guid>https://dev.to/aatmaj/matlab-mondays-crash-course-part-4-2c43</guid>
      <description>&lt;h2&gt;
  &lt;a href="#welcome-all-this-monday-let-us-learn-all-about-matrices-in-matlab-and-how-to-generate-them"&gt;
  &lt;/a&gt;
  Welcome all! ❤️‍🔥 This Monday let us learn all about matrices in MATLAB, and how to generate them🤟
&lt;/h2&gt;




&lt;p&gt;&lt;strong&gt;Making matrices in MATLAB&lt;/strong&gt;&lt;br&gt;
We will now learn how to create Matrices in MATLAB.&lt;br&gt;
Similer to row vectors, the elements in a row are separated by a ',' and column by a ';'. First, type in the values for the first column separated by commas. When the row ends, type a semicolon and the proceed on to the next row. Repeat until done, and end with the square brackets.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fxal93yH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tr3x2ne4hn7pqq72coj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fxal93yH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tr3x2ne4hn7pqq72coj.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mismatch of elements in rows or columns generates this error-&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rDgOODa5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aa6dzbd8321mh79qhlia.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rDgOODa5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aa6dzbd8321mh79qhlia.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fusing two Matrices&lt;/strong&gt;&lt;br&gt;
In a similar way of making matrices, we can combine them together with this syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight matlab"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is vertical concatenation. The two matrices will be placed one on top of the other and joined together&lt;/p&gt;

&lt;p&gt;For horizontal concatenation, use the syntax c=[a,b]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ohyVLuIk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0l0pjrk9v054nmo2v6rw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ohyVLuIk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0l0pjrk9v054nmo2v6rw.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note, For horizontal Concatenation, the number of rows for both matrices must be the same, and for vertical concatenation, the number of columns must be equal. If tis rule is violated, Concatenation error is generated. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Matrix generation functions&lt;/strong&gt;&lt;br&gt;
There are a few matrix generation functions in MATLAB like eye() this function generates an Identity matrix of the size we input.&lt;br&gt;
example-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight matlab"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;eye&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;

     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;
     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;
     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;
     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;
     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;
     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;
     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;
     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;
     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;
     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The zeros() function creates a square martix of zeros&lt;br&gt;
For rectangular matrices, two arguments can be used.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight matlab"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;

     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;
     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;
     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;

     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;
     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;
     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use the exact same syntax for the ones function and the rand function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight matlab"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;

    &lt;span class="mf"&gt;0.8147&lt;/span&gt;    &lt;span class="mf"&gt;0.0975&lt;/span&gt;    &lt;span class="mf"&gt;0.1576&lt;/span&gt;    &lt;span class="mf"&gt;0.1419&lt;/span&gt;    &lt;span class="mf"&gt;0.6557&lt;/span&gt;    &lt;span class="mf"&gt;0.7577&lt;/span&gt;
    &lt;span class="mf"&gt;0.9058&lt;/span&gt;    &lt;span class="mf"&gt;0.2785&lt;/span&gt;    &lt;span class="mf"&gt;0.9706&lt;/span&gt;    &lt;span class="mf"&gt;0.4218&lt;/span&gt;    &lt;span class="mf"&gt;0.0357&lt;/span&gt;    &lt;span class="mf"&gt;0.7431&lt;/span&gt;
    &lt;span class="mf"&gt;0.1270&lt;/span&gt;    &lt;span class="mf"&gt;0.5469&lt;/span&gt;    &lt;span class="mf"&gt;0.9572&lt;/span&gt;    &lt;span class="mf"&gt;0.9157&lt;/span&gt;    &lt;span class="mf"&gt;0.8491&lt;/span&gt;    &lt;span class="mf"&gt;0.3922&lt;/span&gt;
    &lt;span class="mf"&gt;0.9134&lt;/span&gt;    &lt;span class="mf"&gt;0.9575&lt;/span&gt;    &lt;span class="mf"&gt;0.4854&lt;/span&gt;    &lt;span class="mf"&gt;0.7922&lt;/span&gt;    &lt;span class="mf"&gt;0.9340&lt;/span&gt;    &lt;span class="mf"&gt;0.6555&lt;/span&gt;
    &lt;span class="mf"&gt;0.6324&lt;/span&gt;    &lt;span class="mf"&gt;0.9649&lt;/span&gt;    &lt;span class="mf"&gt;0.8003&lt;/span&gt;    &lt;span class="mf"&gt;0.9595&lt;/span&gt;    &lt;span class="mf"&gt;0.6787&lt;/span&gt;    &lt;span class="mf"&gt;0.1712&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;ones&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;

     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similarly there is the diag function for a diagonal matrix&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight matlab"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;diag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;

     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;
     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;
     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;
     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;
     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;5&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;
     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;6&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;
     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;     &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;That's all for today. For any suggestions or doubts, please comment below 👇 (they do motivate me a lot...) 🎗️ Follow me for updates...&lt;br&gt;
Also, you can gmail me for any suggestion or help 🙌 &lt;br&gt;
&lt;a href="https://www.linkedin.com/in/aatmajmhatre/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0mtLmTxG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/linkedin-%25230077B5.svg%3F%26style%3Dfor-the-badge%26logo%3Dlinkedin%26logoColor%3Dwhite" alt="LinkedIn"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://aatmaj.mhatre@gmail.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C75QF96b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Gmail-D14836%3Fstyle%3Dfor-the-badge%26logo%3Dgmail%26logoColor%3Dwhite" alt="Gmail"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bye for now 🖐&lt;br&gt;
Happy to help always.....😃&lt;br&gt;
Meet you all soon👍&lt;/p&gt;

&lt;p&gt;➕➖✖️➗&lt;/p&gt;

</description>
      <category>matlab</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Angular - HTML Debugger Mode (feature request) </title>
      <author>Kushal J</author>
      <pubDate>Mon, 19 Jul 2021 06:25:30 +0000</pubDate>
      <link>https://dev.to/kutec/angular-html-debugger-mode-for-the-bound-keys-o6n</link>
      <guid>https://dev.to/kutec/angular-html-debugger-mode-for-the-bound-keys-o6n</guid>
      <description>&lt;p&gt;Hello Coders, &lt;/p&gt;

&lt;p&gt;Here I would like to share a feature request that I have raised to Angular community. &lt;/p&gt;

&lt;p&gt;This is to add a feature where a developer can see an object key bound over an HTML element.&lt;/p&gt;

&lt;p&gt;This can be helpful where a developer has to check for a key from a big chunk of service response.&lt;/p&gt;

&lt;p&gt;Requesting to go over the below link of Github and support by giving an upvote.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/angular/angular/issues/42269#issue-899733493"&gt;https://github.com/angular/angular/issues/42269#issue-899733493&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also share your thoughts in comments. &lt;/p&gt;

&lt;p&gt;Thanks. &lt;/p&gt;

</description>
      <category>angular</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>Functions in TypeScript: A Simple Introduction</title>
      <author>Alex Devero</author>
      <pubDate>Mon, 19 Jul 2021 06:09:08 +0000</pubDate>
      <link>https://dev.to/alexdevero/functions-in-typescript-a-simple-introduction-2745</link>
      <guid>https://dev.to/alexdevero/functions-in-typescript-a-simple-introduction-2745</guid>
      <description>&lt;p&gt;Functions are fundamental part of JavaScript. They help make code reusable while keeping it flexible. TypeScript takes these benefits further by helping you write type safe functions. This tutorial will show you how to use functions in TypeScript, how to specify types for parameters, return types and more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nothing-new-just-safer"&gt;
  &lt;/a&gt;
  Nothing new, just safer?
&lt;/h2&gt;

&lt;p&gt;Functions are among the most frequently used language features. This applies not only to JavaScript and TypeScript, but also to other programming languages. In JavaScript though, there is one problem. JavaScript is not a statically type programming language. Because of this, there are some things you can't do.&lt;/p&gt;

&lt;p&gt;For example, when you define a function, you can't specify allowed types for its parameters. This makes it easier to call a function with argument of a wrong type. You can create a function that takes two numbers as parameters and call it passing in two strings as arguments. JavaScript will not stop you.&lt;/p&gt;

&lt;p&gt;You also can't specify the return type of a function. This can lead to issues when one part of program calling a function expects to get one thing while the function returns something different. This is where TypeScript can be handy. It is true that TypeScript doesn't really add anything new to functions.&lt;/p&gt;

&lt;p&gt;Functions in TypeScript are still functions, those functions you know from JavaScript. What TypeScript does is it makes functions safer, more predictable. It does so by combining functions with its powerful type system. This helps you ensure your functions receive and return the correct types. Let's take a look at how.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#parameter-types"&gt;
  &lt;/a&gt;
  Parameter types
&lt;/h2&gt;

&lt;p&gt;When you create a function you can also specify any parameters it accepts. This makes your code more flexible and easier to reuse under different conditions. With TypeScript, you can also specify types for these parameters. When you try to call any function with an argument of a wrong type, TypeScript will warn you.&lt;/p&gt;

&lt;p&gt;The syntax for defining types for function parameters is simple. It is composed of colon (&lt;code&gt;:&lt;/code&gt;) and the type. First, you define a parameter. Then, you add colon right after it. After that, you specify what type is allowed for that specific parameter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create a function that accepts two parameters: str1 and str2.&lt;/span&gt;
&lt;span class="c1"&gt;// Both parameters must be of type string.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;joinStrings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;str2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;str1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;str2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will work:&lt;/span&gt;
&lt;span class="nx"&gt;joinStrings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Wo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rld&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'World'&lt;/span&gt;

&lt;span class="c1"&gt;// This will not work:&lt;/span&gt;
&lt;span class="nx"&gt;joinStrings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;135&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// TS error: Argument of type 'number' is not assignable to parameter of type 'string'.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;TypeScript also allows you to specify multiple types. You can achieve this by using &lt;a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types"&gt;union types&lt;/a&gt;. This basically means that you can take two or more types and tell TypeScript that any one of these types can be used. When you want to use union types, you specify all possible types and use &lt;code&gt;|&lt;/code&gt; to separate them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create a function that accepts one parameter.&lt;/span&gt;
&lt;span class="c1"&gt;// This parameter can be either number, string or boolean.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;numStrBool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will work in TypeScript:&lt;/span&gt;
&lt;span class="nx"&gt;numStrBool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'number'&lt;/span&gt;

&lt;span class="c1"&gt;// This will also work in TypeScript:&lt;/span&gt;
&lt;span class="nx"&gt;numStrBool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tea&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'string'&lt;/span&gt;

&lt;span class="c1"&gt;// This will also work in TypeScript:&lt;/span&gt;
&lt;span class="nx"&gt;numStrBool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'boolean'&lt;/span&gt;

&lt;span class="c1"&gt;// This will not work in TypeScript:&lt;/span&gt;
&lt;span class="nx"&gt;numStrBool&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// TS error: Argument of type '{ key: number; }' is not assignable to parameter of type 'string | number | boolean'.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#optional-parameters"&gt;
  &lt;/a&gt;
  Optional parameters
&lt;/h3&gt;

&lt;p&gt;Just like in JavaScript, you can also mark some parameters as optional in TypeScript. The syntax is the same. In order to mark a parameter as optional you add question mark (&lt;code&gt;?&lt;/code&gt;) right after it. When you work with functions in TypeScript, the question mark goes after the parameter name and before the colon and type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create a function that accepts two parameters,&lt;/span&gt;
&lt;span class="c1"&gt;// the first one required and the second optional:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;combineWords&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;word1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;word2&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;word1&lt;/span&gt;&lt;span class="p"&gt;}${&lt;/span&gt;&lt;span class="nx"&gt;word2&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;word2&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will work in TypeScript:&lt;/span&gt;
&lt;span class="nx"&gt;combineWords&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Helloworld'&lt;/span&gt;

&lt;span class="c1"&gt;// This will also work in TypeScript:&lt;/span&gt;
&lt;span class="nx"&gt;combineWords&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Say&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bye&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'SayBye'&lt;/span&gt;

&lt;span class="c1"&gt;// This will also work in TypeScript:&lt;/span&gt;
&lt;span class="nx"&gt;combineWords&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Hi'&lt;/span&gt;

&lt;span class="c1"&gt;// This will not work in TypeScript:&lt;/span&gt;
&lt;span class="nx"&gt;combineWords&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// TS error: Expected 1-2 arguments, but got 0.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#default-parameters"&gt;
  &lt;/a&gt;
  Default parameters
&lt;/h3&gt;

&lt;p&gt;TypeScript also allows you to define default values for function parameters. That's not all. When you define default values for functions in TypeScript, you don't have to specify types for these parameters explicitly. TypeScript will be able to use default values to infer types for parameters automatically. Less work for you.&lt;/p&gt;

&lt;p&gt;The syntax for default values is the same as in &lt;a href="https://blog.alexdevero.com/javascript-functions-pt1/#functions-and-default-parameters"&gt;JavaScript&lt;/a&gt;. You specify a parameter and right after it add an equal sign with the default value. If you also want to explicitly specify a type for the parameter, you specify the type first. This means using following order: parameter name, colon and type, equal sign and default value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Example 1: default parameters and implicit type:&lt;/span&gt;
&lt;span class="c1"&gt;// Create a function that accepts two parameters.&lt;/span&gt;
&lt;span class="c1"&gt;// Both parameters are of type numbers,&lt;/span&gt;
&lt;span class="c1"&gt;// the second has default value 0.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addTwoNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// TS will add type for num2 implicitly:&lt;/span&gt;
&lt;span class="c1"&gt;// addTwoNumbers(num1: number, num2: number = 0)&lt;/span&gt;

&lt;span class="c1"&gt;// This will work in TypeScript:&lt;/span&gt;
&lt;span class="nx"&gt;addTwoNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;98&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;656&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 754&lt;/span&gt;

&lt;span class="c1"&gt;// This will also work in TypeScript:&lt;/span&gt;
&lt;span class="nx"&gt;addTwoNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 63&lt;/span&gt;

&lt;span class="c1"&gt;// This will not work in TypeScript:&lt;/span&gt;
&lt;span class="nx"&gt;addTwoNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;13&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// TS error: Argument of type 'string' is not assignable to parameter of type 'number'.&lt;/span&gt;


&lt;span class="c1"&gt;// Example 2: default parameters and explicit type:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addTwoNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#rest-parameters"&gt;
  &lt;/a&gt;
  Rest parameters
&lt;/h3&gt;

&lt;p&gt;Some functions may accept an arbitrary number of arguments. This is where &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters"&gt;rest parameters&lt;/a&gt; syntax will be very useful. In TypeScript, you can specify type for rest parameters just as easily as any other parameters. The syntax is the same. You add the rest parameter and follow it with colon and the type.&lt;/p&gt;

&lt;p&gt;When you work with rest parameters, remember one thing. Parameters passed as rest parameters will be collected in an array. This means that you also have to use the array type, either &lt;code&gt;type[]&lt;/code&gt; or &lt;code&gt;Array&amp;lt;type&amp;gt;&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create a function that accepts two parameters.&lt;/span&gt;
&lt;span class="c1"&gt;// The first parameter is a string.&lt;/span&gt;
&lt;span class="c1"&gt;// The second is a rest parameter and is an array of strings.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;buildATeam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;leader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;teammates&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Team is composed of &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;leader&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; as a the team leader and &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;teammates&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;teammates&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nobody&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; as the core team.`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will work in TypeScript:&lt;/span&gt;
&lt;span class="nx"&gt;buildATeam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Vicky&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Thomas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Team is composed of Joe as a the team leader and Vicky, Thomas as the core team.'&lt;/span&gt;

&lt;span class="c1"&gt;// This will also work in TypeScript:&lt;/span&gt;
&lt;span class="nx"&gt;buildATeam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sandra&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Alex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jack&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Victor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Team is composed of Sandra as a the team leader and Alex, Jack, Victor as the core team.'&lt;/span&gt;

&lt;span class="c1"&gt;// This will also work in TypeScript:&lt;/span&gt;
&lt;span class="nx"&gt;buildATeam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Stuart&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 'Team is composed of Stuart as a the team leader and nobody as the core team.'&lt;/span&gt;

&lt;span class="c1"&gt;// This will not work in TypeScript:&lt;/span&gt;
&lt;span class="nx"&gt;buildATeam&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// TS error: Argument of type 'number' is not assignable to parameter of type 'string'.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#return-types"&gt;
  &lt;/a&gt;
  Return types
&lt;/h2&gt;

&lt;p&gt;TypeScript also allows you to specify the return type of a function. That said, you will not find yourself doing this very often. In most cases, TypeScript will be able to infer the function's return type based on return statements inside the function itself. You don't have to specify these types explicitly.&lt;/p&gt;

&lt;p&gt;What if TypeScript is not able to infer the return type or you want to specify by yourself? In order to specify function return type you have to add colon and the type right after the parameter list, before the function body.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create a function that accepts two parameters.&lt;/span&gt;
&lt;span class="c1"&gt;// Both parameters are numbers.&lt;/span&gt;
&lt;span class="c1"&gt;// Set the return type to be a number (the '): number {' part).&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;numToPow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="nx"&gt;exp&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will work in TypeScript:&lt;/span&gt;
&lt;span class="nx"&gt;numToPow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 2562890625&lt;/span&gt;

&lt;span class="c1"&gt;// This will not work in TypeScript:&lt;/span&gt;
&lt;span class="nx"&gt;numToPow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;9&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// TS error: Argument of type 'string' is not assignable to parameter of type 'number'.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#function-types"&gt;
  &lt;/a&gt;
  Function types
&lt;/h2&gt;

&lt;p&gt;When you work with functions in TypeScript you usually define all its types when you declare a function. What TypeScript also allows is to define a function signature before you actually create the function itself. Later, when you create the function, TypeScript will use the signature to infer all types for you automatically.&lt;/p&gt;

&lt;p&gt;This signature is called a function type. It can be useful when you expect a specific function signature. This function type is composed of two parts: parameters and return type. When you declare a function type, you have to specify both these parts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create function type for function subtract.&lt;/span&gt;
&lt;span class="c1"&gt;// This function accepts two parameters, both are numbers.&lt;/span&gt;
&lt;span class="c1"&gt;// Its return type is also a number.&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;

&lt;span class="c1"&gt;// Assign the actual function to the variable:&lt;/span&gt;
&lt;span class="nx"&gt;subtract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// This will not work in TypeScript:&lt;/span&gt;
&lt;span class="nx"&gt;subtract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// TS error: Type '(a: string, b: string) =&amp;gt; string' is not assignable to type '(a: number, b: number) =&amp;gt; number'.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember that when you declare the function type, you don't have to specify the types again when you assign the actual function. TypeScript will infer all types implicitly based on the function type you previously created.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create function type for function subtract:&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;

&lt;span class="c1"&gt;// These types are redundant:&lt;/span&gt;
&lt;span class="nx"&gt;subtract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is another way to achieve this. You can also create a function type during the function assignment. This allows you to combine both steps into one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create function with function:&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#function-types-with-types-and-interfaces"&gt;
  &lt;/a&gt;
  Function types with types and interfaces
&lt;/h3&gt;

&lt;p&gt;Those ways to create function type we just discussed have a downside. They are not really re-usable. You create a function type, you assign it a function and you are done. You can't use that type again for another function, unless you copy the code. Luckily, there is another way, two actually.&lt;/p&gt;

&lt;p&gt;You can also create function types with types and &lt;a href="https://blog.alexdevero.com/typescript-interfaces-a-quick-guide-to-help-you-get-started/"&gt;interfaces&lt;/a&gt;. The benefit of both is the already mentioned re-usability. Type and interface will not cease to exist after you use them. When you create function type with a type or interface you can use it whenever you want and as many times as you want.&lt;/p&gt;

&lt;p&gt;The syntax for type to declare a function type is very similar to the syntax you saw above. There are only two differences. First, you will replace the variable keyword with &lt;code&gt;type&lt;/code&gt; keyword. Second, you will replace the colon after variable name with equal sign. You are basically creating a new type and assign it a function signature.&lt;/p&gt;

&lt;p&gt;When you want to use your new type, you use it along with colons, when you create new &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function"&gt;function expression&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Function type with variable:&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;

&lt;span class="c1"&gt;// Function type with type:&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;TakeNumsReturnNums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;

&lt;span class="c1"&gt;// Use the "TakeNumsReturnNums" type with function expression:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TakeNumsReturnNums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;

&lt;span class="c1"&gt;// This will work in TypeScript:&lt;/span&gt;
&lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;97&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 84&lt;/span&gt;

&lt;span class="c1"&gt;// This will not work in TypeScript:&lt;/span&gt;
&lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;15&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// TS error: Argument of type 'string' is not assignable to parameter of type 'number'.&lt;/span&gt;


&lt;span class="c1"&gt;// Use the type again:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sumNumbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TakeNumsReturnNums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;

&lt;span class="c1"&gt;// And again:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;divideNumbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TakeNumsReturnNums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Doing the same with an interface requires different syntax. You create a new interface. Inside it, you will specify the types for parameter list as the key and return type as the value. Then, you use it in the same way as the type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create interface for subtract function:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;TakeNumsReturnNums&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Syntax:&lt;/span&gt;
  &lt;span class="c1"&gt;// (types for parameter list): return type;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Use the "TakeNumsReturnNums" interface with function expression:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TakeNumsReturnNums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;

&lt;span class="c1"&gt;// This will work in TypeScript:&lt;/span&gt;
&lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;55&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Output:&lt;/span&gt;
&lt;span class="c1"&gt;// 34&lt;/span&gt;

&lt;span class="c1"&gt;// This will not work in TypeScript:&lt;/span&gt;
&lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;66&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// TS error: Argument of type 'boolean' is not assignable to parameter of type 'number'.&lt;/span&gt;

&lt;span class="c1"&gt;// Use the type again:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sumNumbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TakeNumsReturnNums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;

&lt;span class="c1"&gt;// And again:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;divideNumbers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TakeNumsReturnNums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion-functions-in-typescript"&gt;
  &lt;/a&gt;
  Conclusion: Functions in TypeScript
&lt;/h2&gt;

&lt;p&gt;TypeScript makes it easy to write functions that are type safe and more predictable. I hope that this tutorial helped you understand how to use functions in TypeScript. How to define types for parameters and return types and how to create function types.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
