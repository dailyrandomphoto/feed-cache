<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Introduction to Amazon Kinesis</title>
      <author>Adit Modi</author>
      <pubDate>Sat, 15 Jan 2022 04:35:02 +0000</pubDate>
      <link>https://dev.to/aws-builders/introduction-to-amazon-kinesis-18fh</link>
      <guid>https://dev.to/aws-builders/introduction-to-amazon-kinesis-18fh</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Amazon Kinesis&lt;/strong&gt; is a platform for streaming data on AWS that makes it easy to load and analyze streaming data. Amazon Kinesis also enables you to build custom streaming data applications for specialized needs. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With Kinesis, you can ingest real-time data such as application logs, website clickstreams, Internet of Things (IoT) telemetry data, and more into your databases, data lakes, and data warehouses, or build your own real-time applications using this data. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Kinesis enables you to process and analyze data as it arrives and respond in real-time instead of having to wait until all your data is collected before the processing can begin.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Currently there are four pieces of the Kinesis platform that can be utilized based on your use case:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Amazon Kinesis Data Streams&lt;/strong&gt; enables you to build custom applications that process or analyze streaming data.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Amazon Kinesis Video Streams&lt;/strong&gt; enables you to build custom applications that process or analyze streaming video.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Amazon Kinesis Data Firehose&lt;/strong&gt; enables you to deliver real-time streaming data to AWS destinations such as such as Amazon S3, Amazon Redshift, OpenSearch Service, and Splunk.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Amazon Kinesis Data Analytics&lt;/strong&gt; enables you to process and analyze streaming data with standard SQL or with Java (managed Apache Flink).&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zIEisSf4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/687ydk73s4r9gv8vkpjt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zIEisSf4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/687ydk73s4r9gv8vkpjt.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Big Data Analytics Options on AWS&lt;/strong&gt; is a Series containing different articles that provides a basic introduction to different Big Data Analytics Options on AWS. Each article covers the detailed guide on how each service is used for collecting, processing, storing, and analyzing big data.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Kinesis Data Streams and Kinesis Video Streams enable you to build custom applications that process or analyze streaming data in real time. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Kinesis Data Streams can continuously capture and store terabytes of data per hour from hundreds of thousands of sources, such as website clickstreams, financial transactions, social media feeds, IT logs, and location-tracking events. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Kinesis Video Streams can continuously capture video data from smartphones, security cameras, drones, satellites, dashcams, and other edge devices.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With the Amazon Kinesis Client Library (KCL), you can build Amazon Kinesis applications and use streaming data to power real-time dashboards, generate alerts, and implement dynamic pricing and advertising. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can also emit data from Kinesis Data Streams and Kinesis Video Streams to other AWS services such as Amazon S3, Amazon Redshift, Amazon EMR, and AWS Lambda.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Provision the level of input and output required for your data stream, in blocks of one megabyte per second (MB/sec), using the AWS Management Console, API, or SDKs. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The size of your stream can be adjusted up or down at any time without restarting the stream and without any impact on the data sources pushing data to the stream. Within seconds, data put into a stream is available for analysis.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With Amazon Kinesis Data Firehose, you don't need to write applications or manage resources. You configure your data producers to send data to Kinesis Data Firehose and it automatically delivers the data to the AWS destination or third party (Splunk) that you specified. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can also configure Kinesis Data Firehose to transform your data before data delivery. It is a fully managed service that automatically scales to match the throughput of your data and requires no ongoing administration. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It can also batch, compress, and encrypt the data before loading it, minimizing the amount of storage used at the destination and increasing security.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Kinesis Data Analytics is the easiest way to process and analyze real-time, streaming data. With Kinesis Data Analytics, you just use standard SQL or Java (Flink) to process your data streams, so you don’t have to learn any new programming languages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Simply point Kinesis Data Analytics at an incoming data stream, write your SQL queries, and specify where you want to load the results. Kinesis Data Analytics takes care of running your SQL queries continuously on data while it’s in transit and sending the results to the destinations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For complex data processing applications, Amazon Kinesis Data Analytics provides an option use open-source libraries such as Apache Flink, Apache Beam, AWS SDK, and AWS service integrations. It includes more than ten connectors from Apache Flink, and gives you the ability to build custom integrations. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It’s also compatible with the AWS Glue Schema Registry, a serverless feature of AWS Glue that enables you to validate and control the evolution of streaming data using registered Apache Avro schemas.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can use Apache Flink in Amazon Kinesis Data Analytics to build applications whose processed records affect the results exactly once, referred to as exactly once processing. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This means that even in the case of an application disruption, like internal service maintenance or user-initiated application update, the service will ensure that all data is processed and there is no duplicate data. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The service stores previous and in-progress computations, or state, in running application storage. This enables you to compare real-time and past results over any time period, and provides fast recovery during application disruptions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The subsequent sections focus primarily on &lt;strong&gt;Amazon Kinesis Data Streams&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#ideal-usage-patterns"&gt;
  &lt;/a&gt;
  Ideal usage patterns
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Kinesis Data Steams is useful wherever there is a need to move data rapidly off producers (data sources) and continuously process it. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;That processing can be to transform the data before emitting into another data store, drive real-time metrics and analytics, or derive and aggregate multiple streams into more complex streams, or downstream processing. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The following are typical scenarios for using Kinesis Data Streams for analytics:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Real-time data analytics&lt;/strong&gt; – Kinesis Data Streams enables real-time data analytics on streaming data, such as analyzing website clickstream data and customer engagement analytics.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Log and data feed intake and processing&lt;/strong&gt; – With Kinesis Data Streams, you can have producers push data directly into an Amazon Kinesis stream. For example, you can submit system and application logs to Kinesis Data Streams and access the stream for processing within seconds. This prevents the log data from being lost if the front-end or application server fails, and reduces local log storage on the source. Kinesis Data Streams provides accelerated data intake because you are not batching up the data on the servers before you submit it for intake.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Real-time metrics and reporting&lt;/strong&gt; – You can use data ingested into Kinesis Data Streams for extracting metrics and generating KPIs to power reports and dashboards at real-time speeds. This enables data-processing application logic to work on data as it is streaming in continuously, rather than waiting for data batches to arrive.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cost-model"&gt;
  &lt;/a&gt;
  Cost model
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Kinesis Data Streams has simple pay-as-you-go pricing, with no upfront costs or minimum fees, and you pay only for the resources you consume. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An Amazon Kinesis stream is made up of one or more shards. Each shard gives you a capacity of five read transactions per second, up to a maximum total of 2 MB of data read per second. Each shard can support up to 1,000 write transactions per second, and up to a maximum total of 1 MB data written per second.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The data capacity of your stream is a function of the number of shards that you specify for the stream. The total capacity of the stream is the sum of the capacity of each shard. There are two components to pricing:&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Primary pricing includes an hourly charge per shard and a charge for each one million PUT transactions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pricing for optional components for extended retention and enhanced fan-out.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For more information, see Amazon Kinesis Data Streams Pricing. Applications that run on Amazon EC2 and process Amazon Kinesis streams also incur standard Amazon EC2 costs.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Kinesis Data Streams enables you to choose the throughput capacity you require in terms of shards. With each shard in an Amazon Kinesis stream, you can capture up to 1 megabyte per second of data at 1,000 write transactions per second. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your Amazon Kinesis applications can read data from each shard at up to 2 megabytes per second. You can provision as many shards as you need to get the throughput capacity you want; for example, a one gigabyte per second data stream would require 1024 shards.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Additionally, there is a new feature. Enhanced fan-out enables developers to scale up the number of stream consumers (applications reading data from a stream in real-time) by offering each stream consumer their own read throughput. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Developers can register stream consumers to use enhanced fan-out and receive their own 2MB/sec pipe of read throughput per shard. This throughput automatically scales with the number of shards in a stream.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#durability-and-availability"&gt;
  &lt;/a&gt;
  Durability and availability
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Kinesis Data Streams synchronously replicates data across three Availability Zones in an AWS Region, providing high availability and data durability.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Additionally, you can store a cursor in Amazon DynamoDB to durably track what has been read from an Amazon Kinesis stream. In the event that your application fails in the middle of reading data from the stream, you can restart your application and use the cursor to pick up from the exact spot where the failed application left off.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#scalability-and-elasticity"&gt;
  &lt;/a&gt;
  Scalability and elasticity
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can increase or decrease the capacity of the stream at any time according to your business or operational needs, without any interruption to ongoing stream processing. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;By using API calls or development tools, you can automate scaling of your Amazon Kinesis Data Streams environment to meet demand and ensure you only pay for what you need.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#interfaces"&gt;
  &lt;/a&gt;
  Interfaces
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There are two interfaces to Kinesis Data Streams:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Input&lt;/strong&gt; which is used by data producers to put data into Kinesis Data Streams&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Output&lt;/strong&gt; to process and analyze data that comes in&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Producers can write data using the Amazon Kinesis PUT API, an AWS Software Development Kit (SDK) or toolkit abstraction, the Amazon Kinesis Producer Library (KPL), or the Amazon Kinesis Agent.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For processing data that has already been put into an Amazon Kinesis stream, there are client libraries provided to build and operate real-time streaming data processing applications. The KCL acts as an intermediary between Amazon Kinesis Data Streams and your business applications which contain the specific processing logic. There is also integration to read from an Amazon Kinesis stream into Apache Spark Streaming running on Amazon EMR.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#antipatterns"&gt;
  &lt;/a&gt;
  Anti-patterns
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Amazon Kinesis Data Streams has the following anti-patterns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Small scale consistent throughput&lt;/strong&gt; – Even though Kinesis Data Streams works for streaming data at 200 KB per second or less, it is designed and optimized for larger data throughputs.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Long-term data storage and analytics&lt;/strong&gt; – Kinesis Data Streams is not suited for long-term data storage. By default, data is retained for 24 hours, and you can extend the retention period by up to 365 days.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Hope this guide gives you an Introduction to Amazon Kinesis.&lt;/p&gt;

&lt;p&gt;Let me know your thoughts in the comment section 👇&lt;br&gt;
And if you haven't yet, make sure to follow me on below handles:&lt;/p&gt;

&lt;p&gt;👋 &lt;strong&gt;connect with me on &lt;a href="https://www.linkedin.com/in/adit-modi-2a4362191/"&gt;LinkedIn&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
🤓 &lt;strong&gt;connect with me on &lt;a href="https://twitter.com/adi_12_modi"&gt;Twitter&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
🐱‍💻 &lt;strong&gt;follow me on &lt;a href="https://github.com/AditModi"&gt;github&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
✍️ &lt;strong&gt;Do Checkout &lt;a href="https://aditmodi.hashnode.dev"&gt;my blogs&lt;/a&gt;&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Like, share and follow me 🚀 for more content.&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__497987"&gt;
  
    .ltag__user__id__497987 .follow-action-button {
      background-color: #000000 !important;
      color: #fa6c00 !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/aditmodi" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FYJrtrA_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--mUzXbt1U--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/497987/edde8513-7308-4a4d-9592-2be160d074d2.png" alt="aditmodi image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/aditmodi"&gt;Adit Modi&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/aditmodi"&gt;Cloud Engineer | AWS Community Builder | 8x AWS Certified | 3x Azure Certified | Author of Cloud Tech , DailyDevOps &amp;amp; BigDataJournal | DEV moderator&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;





&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/whitepapers/latest/big-data-analytics-options/amazon-kinesis.html"&gt;Reference Notes&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>bigdata</category>
      <category>analytics</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Top 5 Social Media Plugins for WordPress 2022</title>
      <author>elinabey</author>
      <pubDate>Sat, 15 Jan 2022 04:04:08 +0000</pubDate>
      <link>https://dev.to/elinabey/top-5-social-media-plugins-for-wordpress-2022-161l</link>
      <guid>https://dev.to/elinabey/top-5-social-media-plugins-for-wordpress-2022-161l</guid>
      <description>&lt;p&gt;Nowadays social media plugins for WordPress have become the best interest of the internet and it is the biggest source of traffic for most websites. As we know 2022 just started and the smash of social media persists to increase day by day. It’s time we prepare for destiny and keep social media platforms a step forward from others.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#best-social-media-plugins-for-wordpress-are"&gt;
  &lt;/a&gt;
  Best Social Media Plugins for WordPress are:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Social Warfare.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Simple Social Icons&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Smash Balloon&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sassy Social Share&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shared Counts&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#social-warfare"&gt;
  &lt;/a&gt;
  Social Warfare.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://wordpress.org/plugins/social-warfare/"&gt;Social Warfare&lt;/a&gt; adds beautiful, lightning-fast social share buttons to your website or blog. Easy to use, out of the box&lt;br&gt;
Setting up your social sharing buttons has never been easier with its simple setup.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_adCaV2O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f9tak4h1wj8ncdh7w9aa.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_adCaV2O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f9tak4h1wj8ncdh7w9aa.jpg" alt="Social Warfare" width="600" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simple-social-icons"&gt;
  &lt;/a&gt;
  Simple Social Icons
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://wordpress.org/plugins/simple-social-icons/"&gt;Simple Social Icons&lt;/a&gt; is an easy to use, customizable way to display icons that link visitors to your various social profiles.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#smash-balloon"&gt;
  &lt;/a&gt;
  Smash Balloon
&lt;/h2&gt;

&lt;p&gt;Smash Balloon is the best WordPress social feeds plugin because it lets you create completely customizable social media feeds tailored to your website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bpcEC15q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/to9whdpy709puvezoscw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bpcEC15q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/to9whdpy709puvezoscw.png" alt="Smash Balloon" width="496" height="101"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shared-counts"&gt;
  &lt;/a&gt;
  Shared Counts
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://wordpress.org/plugins/shared-counts/"&gt;Shared Counts&lt;/a&gt; is a best Social sharing buttons that look great and load fast.&lt;/p&gt;

&lt;p&gt;If you want to read in detail with their features here.&lt;a href="https://softcodeon.com/wordpress/social-media-plugins-for-wordpress.htm"&gt;Top 5 Social Media Plugins &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are many button formats, and you can select where to display the button (after or before the post). You can also allow it for business post types. If you want to add social share buttons without any plugin as we have comment below.&lt;/p&gt;

</description>
      <category>wordpress</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to deploy a static website in Netlify for free</title>
      <author>Archana Gandhi</author>
      <pubDate>Sat, 15 Jan 2022 03:28:14 +0000</pubDate>
      <link>https://dev.to/archanagandhi/how-to-deploy-a-static-website-in-netlify-for-free-3dg9</link>
      <guid>https://dev.to/archanagandhi/how-to-deploy-a-static-website-in-netlify-for-free-3dg9</guid>
      <description>&lt;p&gt;The question we all have after building our first website is "how to host" and "where to host" that too for FREE. I've the same question on my mind after creating my first ever website. &lt;/p&gt;

&lt;p&gt;Here is a solution of you, In this article I'm going to show you the step-by-step process on how to host a static website in &lt;a href="https://www.netlify.com/"&gt;netlify&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-and-why-netlify"&gt;
  &lt;/a&gt;
  What and Why Netlify?
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Netlify is a cloud computing company that offers hosting and serverless backend services for web applications and static websites.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Netlife is free and easy to use. You can deploy your project in seconds from github repo. It also provides free SSL certificate.&lt;/p&gt;

&lt;p&gt;If you haven't signed up yet, Go ahead and &lt;a href="https://app.netlify.com/signup"&gt;Signup&lt;/a&gt; for free.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-add-your-website"&gt;
  &lt;/a&gt;
  Step 1: Add your website
&lt;/h3&gt;

&lt;p&gt;Once you've done with the signup process, You'll be headed to Overview page.There are two ways to add your site in netlify.You can either add from Github, Gitlab or bitbucket (or) You can simply drag and drop your website folder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PRI-cXeD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ycyfenyqawqw9x99d90n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PRI-cXeD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ycyfenyqawqw9x99d90n.png" alt="Overview page" width="836" height="459"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-method-git"&gt;
  &lt;/a&gt;
  First Method (Git)
&lt;/h3&gt;

&lt;p&gt;Once you've clicked "New site from Git", This page will appears.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PKzUDRzB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u9896f63r7n7u1viitiq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PKzUDRzB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u9896f63r7n7u1viitiq.png" alt="git" width="880" height="499"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You need to connect to your github account and authorize it.&lt;br&gt;
Now just choose the repository you want to deploy and click deploy site.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lFyoKEea--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kisyqp8d9u0udh8a3p5d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lFyoKEea--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kisyqp8d9u0udh8a3p5d.png" alt="repos" width="880" height="544"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the build completes, your site is deployed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8mjoTpcF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqinb5muz247vqgxbt7m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8mjoTpcF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqinb5muz247vqgxbt7m.png" alt="deploy" width="880" height="386"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#second-method-drag-n-drop"&gt;
  &lt;/a&gt;
  Second Method (drag N drop)
&lt;/h3&gt;

&lt;p&gt;This method is pretty simple, You just need to drag and drop the project folder and you are done with the deployment.&lt;/p&gt;

&lt;p&gt;So you can deploy in any of the methods. After deploying, Netlify will automatically create name for your site. You can change it in "site settings -&amp;gt; change site name"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ND0rdYPZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjfwklw1dl1hakxczvdo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ND0rdYPZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjfwklw1dl1hakxczvdo.png" alt="site" width="810" height="428"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also set up custom domain and push new changes to the site.&lt;/p&gt;

&lt;p&gt;Anndddd, It's all DONE. You site is now live!!!!&lt;/p&gt;

&lt;p&gt;If you like this post, Please like and follow me! &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>netlify</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>GraphQL API recon with mitmproxy</title>
      <author>fx2301</author>
      <pubDate>Sat, 15 Jan 2022 02:03:08 +0000</pubDate>
      <link>https://dev.to/fx2301/graphql-api-recon-with-mitmproxy-2f5d</link>
      <guid>https://dev.to/fx2301/graphql-api-recon-with-mitmproxy-2f5d</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h2&gt;

&lt;p&gt;Capturing live examples of GraphQL queries and responses all in one place vastly simplifies recon.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when"&gt;
  &lt;/a&gt;
  When?
&lt;/h2&gt;

&lt;p&gt;You most want to do this when introspection is disabled. Otherwise when you need examples to help make sense of the API's semantics, or to develop a better intuition for where the weaknesses may be.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How?
&lt;/h2&gt;

&lt;p&gt;This script works out-of-the-box for the majority scenario: POST requests to &lt;code&gt;/graphql&lt;/code&gt; that use the &lt;code&gt;operationName&lt;/code&gt; parameter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;mitmdump &lt;span class="nt"&gt;-s&lt;/span&gt; capture.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;capture.py:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mitmproxy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTPFlow&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/graphql'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'utf-8'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s"&gt;'[^a-zA-Z0-9]'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'_'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'operationName'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;'.example.txt'&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;// ==== REQUEST ====&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'query'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"// ==== RESPONSE ====&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>ethicalhacking</category>
      <category>cybersecurity</category>
      <category>recon</category>
      <category>graphql</category>
    </item>
    <item>
      <title>How to Declare Variables in Android String Resources?</title>
      <author>Vincent Tsen</author>
      <pubDate>Sat, 15 Jan 2022 02:00:39 +0000</pubDate>
      <link>https://dev.to/vtsen/how-to-declare-variables-in-android-string-resources-1he8</link>
      <guid>https://dev.to/vtsen/how-to-declare-variables-in-android-string-resources-1he8</guid>
      <description>&lt;p&gt;&lt;strong&gt;To be referenced by another string resources to avoid duplicated hard-coded strings in different places.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article was originally published at &lt;a href="https://vtsen.hashnode.dev/how-to-declare-variables-in-android-string-resources"&gt;vtsen.hashnode.dev&lt;/a&gt; on Dec 25, 2021.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Suppose you have 2 string resources &lt;code&gt;app_name&lt;/code&gt; and &lt;code&gt;about_text&lt;/code&gt; below, you have 2 duplicated hard-coded strings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;resources&amp;gt;
    &amp;lt;string name="app_name"&amp;gt;My App Name&amp;lt;/string&amp;gt;
    &amp;lt;string name="about_text"&amp;gt;My App Name&amp;lt;/string&amp;gt;
&amp;lt;/resources&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#reference-another-string-resources"&gt;
  &lt;/a&gt;
  Reference Another String Resources
&lt;/h2&gt;

&lt;p&gt;To get rid of duplicated hard-coded strings, what you can do is reference the &lt;code&gt;app_name&lt;/code&gt; from the &lt;code&gt;about_text&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;resources&amp;gt;
    &amp;lt;string name="app_name"&amp;gt;My App Name&amp;lt;/string&amp;gt;
    &amp;lt;string name="about_text"&amp;gt;@string/app_name&amp;lt;/string&amp;gt;
&amp;lt;/resources&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But what if you have more complicated &lt;code&gt;about_text&lt;/code&gt; like below?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;resources&amp;gt;
    &amp;lt;string name="app_name"&amp;gt;My App Name&amp;lt;/string&amp;gt;
    &amp;lt;string name="about_text"&amp;gt;My App Name is an awesome app!&amp;lt;/string&amp;gt;
&amp;lt;/resources&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-string-format"&gt;
  &lt;/a&gt;
  Use String Format
&lt;/h2&gt;

&lt;p&gt;You can change the &lt;code&gt;about_text&lt;/code&gt; to string format to allow the string to be constructed at run time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;resources&amp;gt;
    &amp;lt;string name="app_name"&amp;gt;My App Name&amp;lt;/string&amp;gt;
    &amp;lt;string name="about_text"&amp;gt;%s is an awesome app!&amp;lt;/string&amp;gt;
&amp;lt;/resources&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In code (in your activity class for example), you pass in the &lt;code&gt;app_name&lt;/code&gt; string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;val aboutText = resources.getString(
    R.string.about_text,
    resources.getString(R.string.app_name))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well, there is another better solution to use &lt;strong&gt;DOCTYPE&lt;/strong&gt;! You don't need to pass in the string variable from code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-doctype-resources-entity"&gt;
  &lt;/a&gt;
  Use DOCTYPE resources ENTITY
&lt;/h2&gt;

&lt;p&gt;The DOCTYPE resources ENTITY declaration like a variable.  You can reference it from another string resources using &lt;code&gt;&amp;amp;&amp;lt;entity_name&amp;gt;;&lt;/code&gt; syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE resources [
    &amp;lt;!ENTITY app_name "My App Name"&amp;gt;
    &amp;lt;!ENTITY another_name "Test 1 2 3"&amp;gt;
    ]&amp;gt;

&amp;lt;resources&amp;gt;
    &amp;lt;string name="app_name"&amp;gt;&amp;amp;app_name;&amp;lt;/string&amp;gt;
    &amp;lt;string name="about_text"&amp;gt;&amp;amp;app_name; is an awesome app!&amp;lt;/string&amp;gt;
&amp;lt;/resources&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;P/S: If there is another way better than using DOCTYPE, please let me know.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>android</category>
      <category>kotlin</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Opening a link in a new browser tab using HTML</title>
      <author>Ibrahim Ibrahim</author>
      <pubDate>Sat, 15 Jan 2022 00:59:11 +0000</pubDate>
      <link>https://dev.to/devwraithe/opening-a-link-in-a-new-browser-tab-using-html-7gh</link>
      <guid>https://dev.to/devwraithe/opening-a-link-in-a-new-browser-tab-using-html-7gh</guid>
      <description>&lt;p&gt;Have you ever clicked a link on a website, and it’s opened on a new tab in the browser? If you’ve been wondering how you can do that with your links, this article will act as your guide.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h1&gt;

&lt;p&gt;To follow and completely understand this guide, you will need to have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A web browser (I’m using &lt;strong&gt;Google Chrome&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;Basic understanding of HTML tags and attributes.&lt;/li&gt;
&lt;li&gt;A text editor (I'm using &lt;strong&gt;Visual Studio Code&lt;/strong&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-raw-ltagt-endraw-tag"&gt;
  &lt;/a&gt;
  What is the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag?
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag (also known as the anchor element or the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element) is an HTML tag that defines a hyperlink, which is used to point from one webpage to another. The anchor element has several attributes, but we will focus specifically on the href and target attributes in this article and a little of the rel attribute.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-attributes"&gt;
  &lt;/a&gt;
  What are attributes?
&lt;/h3&gt;

&lt;p&gt;Attributes in HTML are special words used inside the opening tag of an element to control the element's behavior. HTML attributes are a modifier of an HTML element type.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-do-the-href-and-target-attributes-do"&gt;
  &lt;/a&gt;
  What do the href and target attributes do?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;href&lt;/strong&gt; - Specifies the URL of the page the link goes to&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;target&lt;/strong&gt; - Specifies where to open the linked document&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#using-the-href-attribute"&gt;
  &lt;/a&gt;
  Using the “href” attribute
&lt;/h2&gt;

&lt;p&gt;The href attribute specifies the URL of the page the link goes to when it’s clicked. Below is an example of how to use the href attribute within the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://www.dev.to/devwraithe"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;My profile&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code consists of the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element which specifies the element as a hyperlink, the href attribute, which wraps the URL to point to and the line of text between the opening and closing tags which is the clickable link of the hyperlink.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Page 1:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kym279Sq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/io8619u9ylc0xrjpt4k2.png" alt="Page One - Links open in the current tab" width="880" height="469"&gt;
&lt;/li&gt;
&lt;li&gt;Page 2, opened in the &lt;strong&gt;current tab&lt;/strong&gt;:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fTcQwGFs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7i1x9boinuveutlp4u7d.png" alt="Page Two - Links open in the current tab" width="880" height="469"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#using-the-target-attribute"&gt;
  &lt;/a&gt;
  Using the “target” attribute
&lt;/h2&gt;

&lt;p&gt;The target attribute specifies where to open the linked document. If the link is clicked while the target attribute is present, the value of the target attribute will instruct the browser on where it will open the link.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://www.dev.to/devwraithe"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;My Profile&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The target attribute and the value “_blank” included in the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element above basically states that “when this link is clicked, open the URL in a new tab”. However, this attribute has some drawbacks, but we’ll discuss how you can prevent these drawbacks in the next section.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Page 1:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Csb_VNof--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k4ds1nmtiztu7ntx5z9y.png" alt="Page One - Links open in a new tab" width="880" height="469"&gt;
&lt;/li&gt;
&lt;li&gt;Page 2, opened in a &lt;strong&gt;new tab&lt;/strong&gt;:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gzXsWZdK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9rhezt93umhk0bigl6xs.png" alt="Page Two - Links open in a new tab" width="880" height="469"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#security-concerns-and-the-targetblank-attribute"&gt;
  &lt;/a&gt;
  Security concerns and the target=”_blank” attribute
&lt;/h2&gt;

&lt;p&gt;It is recommended that whenever the target="blank" attribute is present in an anchor element, you should include the rel="noopener noreferrer" attribute to prevent a type of phishing known as &lt;a href="https://medium.com/@shatabda/security-tabnabbing-what-how-b038a70d300e"&gt;Tabnabbing&lt;/a&gt;. The rel attribute helps to specify the relationship between the current document and the linked document.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;It’s straightforward to use the HTML anchor element to open links in a new browser tab. As you have learnt in this article, all you need are three simple, easy-to-remember attributes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The href attribute sets the URL of the page you want to link to.&lt;/li&gt;
&lt;li&gt;The target attribute is set to “_blank” to tell the browser to open the link in a new tab (or window, depending on the browser settings).&lt;/li&gt;
&lt;li&gt;The rel attribute is set to “noreferrer noopener” to prevent malicious attacks from the pages you link to.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have any questions concerning this article or other frontend-related topics, do not hesitate to contact me either on &lt;a href="https://www.twitter.com/devwraithe"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/ibrahimaibrahim"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>First PR of the Year:D</title>
      <author>dbelokon</author>
      <pubDate>Sat, 15 Jan 2022 00:49:30 +0000</pubDate>
      <link>https://dev.to/belokond/first-pr-of-the-yeard-5f1h</link>
      <guid>https://dev.to/belokond/first-pr-of-the-yeard-5f1h</guid>
      <description>&lt;p&gt;The feature I am interested to continue working on was born👶🏻 from a bigger set of features that had the purpose of integrating other types of communication and media to Telescope. I think that it would be a great addition to Telescope and it will make it a more "complete" aggregator:D Currently, Telescope aggregates blog posts from several blog feeds.&lt;/p&gt;

&lt;p&gt;The bigger set of features included things like incorporating videos to the timeline and showcasing live streams with an 'exclusive' chat. You can learn more about it in this GitHub issue &lt;a href="https://github.com/Seneca-CDOT/telescope/issues/1026"&gt;#1026&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The feature I decided to implement was incorporating videos to the timeline. Aggregating videos is exactly the same as aggregating blog posts, since platforms like YouTube implemented an RSS feed that you can use to aggregate it your own content aggregator (although this seems to be something of a hidden feature, because I only found out about this thanks to help of my professor💡).&lt;/p&gt;

&lt;p&gt;I broke up the feature implementation in two PRs, one that would address the front-end (&lt;a href="https://github.com/Seneca-CDOT/telescope/pull/2596"&gt;#2596&lt;/a&gt;), and another that would address the back-end (&lt;a href="https://github.com/Seneca-CDOT/telescope/pull/2581"&gt;#2581&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;These PRs were created some time ago, and I decided to finish them after the holidays were done👩🏻‍💻🐱‍💻. For this week, I focused mainly on the back-end PR, as it introduced the changes to actually aggregate the videos. If the changes of the back-end PR are merged, it would make the front-end PR easier to actually run (you have to do some manual set-up to do a demo of the front-end PR).&lt;/p&gt;

&lt;p&gt;For the back-end, I applied some changes that one of the reviewers requested, as well as adding a few tests to verify that it was working as intended.&lt;/p&gt;

&lt;p&gt;As of the time of this writing, the PR is pending on review. Hopefully, it will be accepted after the review is done :D&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>javascript</category>
      <category>test</category>
      <category>node</category>
    </item>
    <item>
      <title>Thirty Days of Rust: Day Three*</title>
      <author>Sammy Shear</author>
      <pubDate>Sat, 15 Jan 2022 00:32:12 +0000</pubDate>
      <link>https://dev.to/sammyshear/thirty-days-of-rust-day-three-2l7c</link>
      <guid>https://dev.to/sammyshear/thirty-days-of-rust-day-three-2l7c</guid>
      <description>&lt;p&gt;I took a few days off from this challenge due to some personal things, but I came into today ready to go. Today I wanted to make a classic little hangman game in the command line, which was a lot harder than I thought to be honest with you. I definitely also went about this in the wrong way though, I just was too stubborn to start over. Today was also the day I switched from the official Rust Language Server to rust-analyzer, which I don't regret, thanks to this comment:&lt;br&gt;
&lt;/p&gt;
&lt;div class="liquid-comment"&gt;
    &lt;div class="details"&gt;
      &lt;a href="/chayimfriedman2"&gt;
        &lt;img class="profile-pic" src="https://res.cloudinary.com/practicaldev/image/fetch/s--q8luCC9l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--l7Sld38t--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_50%2Cq_auto%2Cw_50/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/79747/7d8192fc-64f6-47a8-935f-178a6d6c9eee.png" alt="chayimfriedman2 profile image"&gt;
      &lt;/a&gt;
      &lt;a href="/chayimfriedman2"&gt;
        &lt;span class="comment-username"&gt;Chayim Friedman&lt;/span&gt;
      &lt;/a&gt;
      &lt;span class="color-base-30 px-2 m:pl-0"&gt;•&lt;/span&gt;

&lt;a href="https://dev.to/chayimfriedman2/comment/1l79g" class="comment-date crayons-link crayons-link--secondary fs-s"&gt;
  &lt;time&gt;
    Jan 12
  &lt;/time&gt;

&lt;/a&gt;

    &lt;/div&gt;
    &lt;div class="body"&gt;
      &lt;p&gt;rustup is a bit more than "better maintained", it is an official project of Rust.&lt;/p&gt;

&lt;p&gt;And rsvm? Well, never heard of it up to this moment...&lt;/p&gt;

&lt;p&gt;Another thing, I would really recommend you to try rust-analyzer out. The Rust extension is very slow and laggy, while rust-analyzer is excellent. It is also semi-official and supposed to replace the Rust extension at some point in the future.&lt;/p&gt;

&lt;p&gt;The official extension just compiles your whole project on every keystroke and decrypts a big ol' chunk of json the compiler gives back; rust-analyzer, on the other hand, incrementally parses &amp;amp; analyzes your code, and it is going rapidly better.&lt;/p&gt;


    &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Anyway, I ran into some problems today, but I managed to finish the Hangman game nonetheless.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c1"&gt;// /src/main.rs&lt;/span&gt;

&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;SliceRandom&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;thread_rng&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;rng&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;thread_rng&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;possible_words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s"&gt;"Hangman"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"Challenge"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"Programming"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"Rust"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"Thirty Days"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"Day Three"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;word_to_guess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;possible_words&lt;/span&gt;&lt;span class="nf"&gt;.choose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;rng&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;guessed_letters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;char&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nd"&gt;vec!&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;current_guess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;word_to_guess&lt;/span&gt;&lt;span class="nf"&gt;.chars&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.count&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;word_to_guess&lt;/span&gt;&lt;span class="nf"&gt;.chars&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.nth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="sc"&gt;' '&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;current_guess&lt;/span&gt;&lt;span class="nf"&gt;.push_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;current_guess&lt;/span&gt;&lt;span class="nf"&gt;.push_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"_"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;current_guess&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;word_to_guess&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;current_guess&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Make a guess"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Guessed Letters: {:?}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;guessed_letters&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;String&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.read_line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;guessed_letters&lt;/span&gt;&lt;span class="nf"&gt;.contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="nf"&gt;.chars&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.nth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;guessed_letters&lt;/span&gt;&lt;span class="nf"&gt;.push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="nf"&gt;.chars&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.nth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;new_guess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;current_guess&lt;/span&gt;&lt;span class="nf"&gt;.chars&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="py"&gt;.collect&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;word_to_guess&lt;/span&gt;&lt;span class="nf"&gt;.chars&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="py"&gt;.collect&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.len&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;word_to_guess&lt;/span&gt;&lt;span class="nf"&gt;.chars&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="py"&gt;.collect&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nf"&gt;.eq_ignore_ascii_case&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;guess&lt;/span&gt;&lt;span class="nf"&gt;.chars&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.nth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;new_guess&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word_to_guess&lt;/span&gt;&lt;span class="nf"&gt;.chars&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="py"&gt;.collect&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                    &lt;span class="n"&gt;current_guess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_guess&lt;/span&gt;&lt;span class="nf"&gt;.iter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="py"&gt;.collect&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You already guessed that"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You won! Guesses: {:?}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;guessed_letters&lt;/span&gt;&lt;span class="nf"&gt;.len&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_guess&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#problems"&gt;
  &lt;/a&gt;
  Problems
&lt;/h3&gt;

&lt;p&gt;So I went into this thinking it would be easy, I've made a hangman game in the command line before. My first mistake was trying to use primitive &lt;code&gt;str&lt;/code&gt;s instead of &lt;code&gt;String&lt;/code&gt;s because my instinct was to write out an empty string literal to make a new string variable instead of &lt;code&gt;String::new()&lt;/code&gt;. That caused me to run into a lot of concatenation problems, which I tried using the &lt;code&gt;str-concat&lt;/code&gt; crate for, causing my code to have multiple panic points. So I switched to using &lt;code&gt;String&lt;/code&gt; variables, and it was much easier from there. Then I went ahead and tried to make the game logic itself, which failed spectacularly because I attempted to replace the occurrences of each &lt;code&gt;char&lt;/code&gt; not equal to a correct guess with an underscore, instead of just replacing the underscores with the correct letters. So after I spent far too long tearing my hair out trying to get that to work, I moved to the other method. At first I tried a foreach loop, but unable to find a way to get the index of a &lt;code&gt;char&lt;/code&gt;, and also because it made more sense, I switched to standard for loop, and that's about where I stopped.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shortcomings"&gt;
  &lt;/a&gt;
  Shortcomings
&lt;/h3&gt;

&lt;p&gt;So something you'll notice if you read the code and/or run the code is that there's no way to lose. The simple reason for that is that I was running out of time, and didn't want to take another day off now that I was actually ready to come back, so I just ended it there. It might be that tomorrow's article is me adding in the loss logic though. That's about all from me for today, and thanks for reading.&lt;/p&gt;

</description>
      <category>challenge</category>
      <category>rust</category>
      <category>programming</category>
      <category>30days</category>
    </item>
    <item>
      <title>Getting Telescope's React Native App</title>
      <author>Luigi Zaccagnini</author>
      <pubDate>Sat, 15 Jan 2022 00:18:43 +0000</pubDate>
      <link>https://dev.to/luigizaccagnini/getting-telescopes-react-native-app-2h1a</link>
      <guid>https://dev.to/luigizaccagnini/getting-telescopes-react-native-app-2h1a</guid>
      <description>&lt;p&gt;Hello again! It's me, Luigi again and today I am going to talk about the vision of &lt;a href="https://telescope.cdot.systems/"&gt;Telescope&lt;/a&gt; getting a React Native App. This is a very big subject so I am going to go over as much as I can during this blog post. Things I am going to discuss are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is React Native?&lt;/li&gt;
&lt;li&gt;React vs React Native?&lt;/li&gt;
&lt;li&gt;What CLI we should use for our development?&lt;/li&gt;
&lt;li&gt;Possible Telescope Goals&lt;/li&gt;
&lt;li&gt;How can you get started to help?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-react-native"&gt;
  &lt;/a&gt;
  What is React Native?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#react-native"&gt;
  &lt;/a&gt;
  React Native?
&lt;/h3&gt;

&lt;p&gt;React Native is a framework that allows programmers to write JavaScript code to build mobile applications. Some of the devices that React Native can build for currently is &lt;strong&gt;IOS&lt;/strong&gt;, &lt;strong&gt;Android&lt;/strong&gt; and &lt;strong&gt;Windows&lt;/strong&gt;(Still new and buggy).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-vs-react-native"&gt;
  &lt;/a&gt;
  React vs React Native
&lt;/h3&gt;

&lt;p&gt;React is a &lt;strong&gt;library&lt;/strong&gt; in &lt;strong&gt;JavaScript&lt;/strong&gt; that is used for building front-end web applications. React Native uses the React library to build the front-end for the application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-react-native-cli-should-we-use-for-our-development"&gt;
  &lt;/a&gt;
  What React Native CLI Should we use for our Development?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y1ATgNWi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/856/1%2AiUuAwVgvAMXZYNNJnQjcTw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y1ATgNWi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/856/1%2AiUuAwVgvAMXZYNNJnQjcTw.png" alt="React Native Expo" width="856" height="720"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#expo-cli-vs-react-native-cli"&gt;
  &lt;/a&gt;
  Expo CLI vs React Native CLI
&lt;/h3&gt;

&lt;p&gt;When using React Native and starting a project you have the choice between two CLIs(Command Line Interfaces). You can choose between React Native's or Expo's. Both are awesome tools to build with but, each have their pros and cons.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#expo-cli"&gt;
  &lt;/a&gt;
  Expo CLI
&lt;/h4&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fast development setup&lt;/li&gt;
&lt;li&gt;Quickest way to start development with React Native&lt;/li&gt;
&lt;li&gt;Live reload in Development&lt;/li&gt;
&lt;li&gt;Library linking&lt;/li&gt;
&lt;li&gt;Can test app on apple/android devices (Expo builds apps)&lt;/li&gt;
&lt;li&gt;Can eject/convert back into a React Native CLI&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Builds are done by Expo&lt;/li&gt;
&lt;li&gt;Native modules are not supported&lt;/li&gt;
&lt;li&gt;Expo apps are bigger because all libraries are included&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#react-native-cli"&gt;
  &lt;/a&gt;
  React Native CLI
&lt;/h4&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Builds are done locally&lt;/li&gt;
&lt;li&gt;Native modules are supported&lt;/li&gt;
&lt;li&gt;You have more control over app size&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Slow development setup&lt;/li&gt;
&lt;li&gt;No live reload in Development&lt;/li&gt;
&lt;li&gt;No library linking (things need to be linked with react-native link)&lt;/li&gt;
&lt;li&gt;Can't turn into an expo app&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#why-i-recommend-expo-as-our-starting-point"&gt;
  &lt;/a&gt;
  Why I Recommend Expo as our Starting Point?
&lt;/h3&gt;

&lt;p&gt;As someone who has worked with both, I think we should start development with Expo because it is easier/faster to setup for development, easier to develop in and can always be converted back into React Native CLI. This will encourage open source developers to learn and contribute because of how much easier it is to get involved with the project. Although React Native CLI provides native module support and control of the app size, I do not believe that those things are worth the frustration of working with the React Native CLI. If there are more pros or cons you know, please leave a comment in the description.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#telescope"&gt;
  &lt;/a&gt;
  &lt;a href="https://telescope.cdot.systems/"&gt;Telescope&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dX6H7300--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1m75rqqgidzqn.cloudfront.net/wp-data/2021/08/19143713/iStock-986556936-1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dX6H7300--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1m75rqqgidzqn.cloudfront.net/wp-data/2021/08/19143713/iStock-986556936-1.jpg" alt="Target that is red" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#starting-point"&gt;
  &lt;/a&gt;
  Starting Point
&lt;/h3&gt;

&lt;p&gt;I think the first goal we should have for functionality of the app is to have blog posts with basic user information display correctly. Although it sounds easy we are designing/developing/testing a new app that requires a lot of configuration, learning and fixing. A more detailed goal list would be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Splash Screen&lt;/li&gt;
&lt;li&gt;App Icon&lt;/li&gt;
&lt;li&gt;Published on app store&lt;/li&gt;
&lt;li&gt;Get time line of blogs to display with user information correctly&lt;/li&gt;
&lt;li&gt;Basic navigation setup&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once we hit that goal we can add user authentication and eventually slowly layer more features onto the app and create better work flows with the power of Expo! If you have any ideas to add for goals please comment below!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-you-get-started-to-help"&gt;
  &lt;/a&gt;
  How can you get started to help?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s8PLg4up--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.pexels.com/photos/3280130/pexels-photo-3280130.jpeg%3Fauto%3Dcompress%26cs%3Dtinysrgb%26dpr%3D2%26h%3D650%26w%3D940" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s8PLg4up--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.pexels.com/photos/3280130/pexels-photo-3280130.jpeg%3Fauto%3Dcompress%26cs%3Dtinysrgb%26dpr%3D2%26h%3D650%26w%3D940" alt="Community" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well now you're wondering &lt;em&gt;"How can I get involved?"&lt;/em&gt;. Well to start, you should review documentation and practice using Expo so when we start development you're ready! The &lt;a href="https://docs.expo.dev/"&gt;Expo Documentation&lt;/a&gt; is an amazing source for learning how to get started with react native! They teach you everything from installing react native to learning work flows. Once you feel a little comfortable you should make a small prototype! I feel like when I learn a new framework, I try to create a small project to help me understand how to practically use the tool. Some ideas are a TODO app, Book app that displays book information, News app and really anything that inspires you! &lt;/p&gt;

</description>
      <category>opensource</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>Furmiliar: JS Project</title>
      <author>Dorthy Thielsen</author>
      <pubDate>Fri, 14 Jan 2022 23:56:41 +0000</pubDate>
      <link>https://dev.to/dotnotation/furmiliar-js-project-186m</link>
      <guid>https://dev.to/dotnotation/furmiliar-js-project-186m</guid>
      <description>&lt;p&gt;I have finally finished my JavaScript final project for the Flatiron bootcamp. I will say that this project has been by far the most challenging yet. The project had to have a Rails API with a HTML, CSS, and vanilla OO JS frontend. All aspects of processing data had to be done via JS. Trying to do forms and talk with the API was the most important aspect of the project, but most of the course material didn’t cover this at all. I had to watch multiple tutorials to get a grasp on how to approach this. A lot of the labs in this section towards the end were really lacking. I did learn a lot from doing this project but still feel shaky about my knowledge of JS.  With most of my coding adventure so far, the more you learn, the more you realize what you don’t know. &lt;/p&gt;

&lt;p&gt;The use case for my project is an app for pet owners to keep track of toys their pets did and didn’t like. Each pet has a toy box and that toy box contains all the toys for that pet. With the toy boxes and toys, there is full CRUD. The add toy form only pops up when you have opened a toy box so no toys can be added without an associated box. &lt;/p&gt;

&lt;p&gt;A big aspect of this project was to do DOM manipulation on a SPA. Doing this aspect was fun and I tried to mainly use variables as I personally like it more than just rendering everything with &lt;code&gt;.innerHTML&lt;/code&gt;. I did one of my methods with &lt;code&gt;.innerHTML&lt;/code&gt; just to show that I knew how to do it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;addToDom&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toyBoxDiv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;toy-box&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toyBoxCard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;toyBoxCard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;toy-box-card&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;toyBoxCard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data-id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;photoBox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;img&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;photoBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;photo&lt;/span&gt;
        &lt;span class="nx"&gt;photoBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;toy-box-photo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toyBoxName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;h2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;toyBoxName&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;openToyBox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;openToyBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Open Toy Box&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
        &lt;span class="nx"&gt;openToyBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`toy-box-button-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;openToyBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data-action&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;openToyBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;openEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deleteToyBox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;deleteToyBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;#10006&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;deleteToyBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;toy-box-delete&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;deleteToyBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data-action&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;delete&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;editToyBox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;editToyBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;#9999&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;editToyBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;toy-box-edit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;editToyBox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data-action&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;edit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;toyBoxDiv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toyBoxCard&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;toyBoxCard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;photoBox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;toyBoxCard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toyBoxName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;toyBoxCard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;openToyBox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;toyBoxCard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;deleteToyBox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;toyBoxCard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editToyBox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// versus innerHTML&lt;/span&gt;
&lt;span class="nx"&gt;createToyForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toyBoxAssociation&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toyFormContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;toy-form&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;toyFormContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
        &lt;span class="nx"&gt;toyFormContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;inline-block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toyForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;form&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;toyForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;h2&amp;gt;Add a New Toy&amp;lt;/h2&amp;gt;
            &amp;lt;input type="text" id="toy-photo-input" placeholder="Photo URL"&amp;gt;&amp;amp;emsp;
            &amp;lt;input type="text" id="toy-name-input" placeholder="Name"&amp;gt;&amp;amp;emsp;
            &amp;lt;input type="text" id="toy-brand-input" placeholder="Brand"&amp;gt;&amp;amp;emsp;
            &amp;lt;input type="text" id="toy-price-input" placeholder="Price"&amp;gt;&amp;amp;emsp;
            &amp;lt;input type="text" id="toy-url-input" placeholder="Website URL"&amp;gt;&amp;amp;emsp;
            &amp;lt;input type="text" id="toy-rating-input" placeholder="Rating 1-5"&amp;gt;&amp;amp;emsp;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
            &amp;lt;strong&amp;gt;Needs Repair?&amp;lt;/strong&amp;gt; &amp;lt;input type="radio" id="toy-needs-repair-input-true" name="needs-repair" value="true"&amp;gt;True
            &amp;lt;input type="radio" id="toy-needs-repair-input-false" name="needs-repair" value="false"&amp;gt;False &amp;amp;emsp;
            &amp;lt;strong&amp;gt;Squeaker?&amp;lt;/strong&amp;gt; &amp;lt;input type="radio" id="toy-squeaker-input-true" name="squeaker" value="true"&amp;gt;True
            &amp;lt;input type="radio" id="toy-squeaker-input-false" name="squeaker" value="false"&amp;gt;False &amp;amp;emsp;
            &amp;lt;strong&amp;gt;Crinkle?&amp;lt;/strong&amp;gt; &amp;lt;input type="radio" id="toy-crinkle-input-true" name="crinkle" value="true"&amp;gt;True
            &amp;lt;input type="radio" d="toy-crinkle-input-false" name="crinkle" value="false"&amp;gt;False &amp;amp;emsp;
            &amp;lt;strong&amp;gt;Hides Treats?&amp;lt;/strong&amp;gt; &amp;lt;input type="radio" id="toy-treat-input" name="treat" value="true"&amp;gt;True
            &amp;lt;input type="radio" name="treat" value="false"&amp;gt;False &amp;amp;emsp;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;`&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addToyBoxId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;addToyBoxId&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;addToyBoxId&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;toy-box-id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;addToyBoxId&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;toy-box-id-input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;addToyBoxId&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;toyBoxAssociation&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;submit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;toy-submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Add Toy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Add Toy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

        &lt;span class="nx"&gt;toyForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addToyBoxId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;toyForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;toyFormContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toyForm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="nx"&gt;toyForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toySubmit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One thing that really tripped me up on my project was in my fetch requests I was initially told that since I had a nested array of attributes that I needed to use dot notation on the data I was receiving to access it. I asked several people to figure out what was going on and the third person I asked was finally able to help me. It was odd because in debugger the response was just CORS, which made no sense to anyone and I am still puzzled why calling &lt;code&gt;data.toys&lt;/code&gt; instead of &lt;code&gt;data&lt;/code&gt; would return CORS.  &lt;/p&gt;

&lt;p&gt;Another thing that I struggled with were the radio buttons. I had a hard time finding good documentation on vanilla JS handling radio buttons. Handling radio buttons with Rails was so easy and JS proved to be a lot more challenging. That is one aspect I one day want to revisit is fixing my radio buttons. I really wanted for when you edit a toy, the radio buttons are filled in with the information from the API. I couldn’t find an elegant solution that was DRY. &lt;/p&gt;

&lt;p&gt;I found it helpful to go through my code and console log every function as it was hit. I figured I would provide that breakdown as well. I broke down each action and stated the class that each method is from and the method name. The classes I have are toyBoxAdapter and toyAdapter which deal with the fetch requests for those objects, toy and toyBox, and toyForm and toyBoxForm for the forms associated with those classes. You can view all of my code &lt;a href="https://github.com/dotnotation/Furmiliar_Frontend"&gt;on my github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;upon initial load&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DOMContent Loaded&lt;/li&gt;
&lt;li&gt;toyBoxAdapter fetchToyBoxes&lt;/li&gt;
&lt;li&gt;toyBoxForm createToyBoxForm&lt;/li&gt;
&lt;li&gt;toyBoxForm listenEvents&lt;/li&gt;
&lt;li&gt;toyForm listenToys&lt;/li&gt;
&lt;li&gt;toyBox addToDom&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;creating a toyBox&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;toyBoxForm handleSubmit&lt;/li&gt;
&lt;li&gt;toyBoxAdapter createToyBox&lt;/li&gt;
&lt;li&gt;toyBox addtoDom&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;editing toyBox&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;toyBoxForm handleEvents&lt;/li&gt;
&lt;li&gt;toyBoxForm handleSubmit&lt;/li&gt;
&lt;li&gt;toyBoxAdapter editToyBoxes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;deleting toyBox&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;toyBoxForm handleEvents&lt;/li&gt;
&lt;li&gt;toyBoxAdapter deleteToyBox&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;open toyBox&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;toyBox openEvent&lt;/li&gt;
&lt;li&gt;toyBox getToys&lt;/li&gt;
&lt;li&gt;toy renderToys&lt;/li&gt;
&lt;li&gt;toyForm createToyForm&lt;/li&gt;
&lt;li&gt;toyBoxForm handleEvents&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;add toy&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;toyForm toySubmit&lt;/li&gt;
&lt;li&gt;toyAdapter createToy&lt;/li&gt;
&lt;li&gt;toy renderToys&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;edit toy&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;toyForm toyEvents&lt;/li&gt;
&lt;li&gt;toyForm toySubmit&lt;/li&gt;
&lt;li&gt;toyAdapter editToy&lt;/li&gt;
&lt;li&gt;toyForm toySubmit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;delete toy&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;toyForm toyEvents&lt;/li&gt;
&lt;li&gt;toyAdapter deleteToy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are interested in the &lt;a href="https://github.com/dotnotation/Furmiliar_Backend"&gt;backend&lt;/a&gt; of my app. I just used &lt;code&gt;rails new project_name --api&lt;/code&gt; to create the backend of my app and kept most things the same from the auto-generated code. &lt;/p&gt;

&lt;p&gt;Now with this project wrapped, I have to prepare for the assessment. I have been studying and practicing but still feel unprepared. I think I will just have to schedule the assessment and see how it goes. I have heard that this assessment is one of the most challenging. Wish me luck!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>rails</category>
    </item>
    <item>
      <title>Running Puppeteer under Docker</title>
      <author>Jason Sultana</author>
      <pubDate>Fri, 14 Jan 2022 23:54:00 +0000</pubDate>
      <link>https://dev.to/jasonsultana/running-puppeteer-under-docker-3367</link>
      <guid>https://dev.to/jasonsultana/running-puppeteer-under-docker-3367</guid>
      <description>&lt;p&gt;G’day guys!&lt;/p&gt;

&lt;p&gt;I recently tried to dockerise an old hobby project and unsurprisingly, a couple of things broke. Some of these were fairly simple fixes so I won’t go into their details - but I will go into a fairly obscure one, which was caused by puppeteer. Regarding the application itself, it does a few things, but for the purposes of this article, let’s just say that it renders some reports using Puppeteer and NodeJS (while running as a .NET app).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dance-monkey-dance-monkey-dancewait-what"&gt;
  &lt;/a&gt;
  Dance monkey, dance monkey, dance…wait, what?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9dth0Ant--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jason.sultana.net.au/static/img/dance-puppet.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9dth0Ant--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jason.sultana.net.au/static/img/dance-puppet.jpeg" alt="" width="275" height="183"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you haven’t heard of &lt;a href="https://github.com/puppeteer/puppeteer"&gt;Puppeteer&lt;/a&gt;, it’s basically a NodeJS library that allows you to run (and control) an instance of headless chrome. i.e - an instance of Google chrome without a UI. In this project, I was using it to render PDF exports of reports. Running natively, it worked like a charm. But under docker, well…I’m writing this article after all, aren’t I?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hold-up-lets-see-your-docker-setup-first"&gt;
  &lt;/a&gt;
  Hold up, let’s see your docker setup first.
&lt;/h3&gt;

&lt;p&gt;I thought you might say that! Well, first here’s the dockerfile.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS base
WORKDIR /app
EXPOSE 80

FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build
WORKDIR /src
COPY ["MyApplication.API/MyApplication.API.csproj", "MyApplication.API/"]
COPY ["MyApplication.Common/MyApplication.Common.csproj", "MyApplication.Common/"]
COPY ["MyApplication.Data/MyApplication.Data.csproj", "MyApplication.Data/"]
COPY ["MyApplication.Logic/MyApplication.Logic.csproj", "MyApplication.Logic/"]
RUN dotnet restore "MyApplication.API/MyApplication.API.csproj"
COPY . .
WORKDIR "/src/MyApplication.API"
RUN dotnet build "MyApplication.API.csproj" -c Release -o /app/build

FROM build AS publish
RUN dotnet publish "MyApplication.API.csproj" -c Release -o /app/publish

FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "MyApplication.API.dll", "--environment", "Docker"]

# Install node and npm
RUN apt-get update
RUN apt-get install nodejs=12.22.5~dfsg-2~11u1 -y
RUN apt-get install npm=7.5.2+ds-2 -y
ENV NODE_ENV=production

# Install node modules for reports
WORKDIR "/app/Reports/jsreport"
RUN npm install

# Set the directory back so dotnet is able to run the application
WORKDIR "/app"

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically I load the ASP.NET 6 base image, build the solution, publish it, install require node modules and set the &lt;code&gt;dotnet&lt;/code&gt; program as the entry point of the container.&lt;/p&gt;

&lt;p&gt;Then I build an image using &lt;code&gt;docker build -t myimage -f ./MyApplication.API/Dockerfile .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note that in order for the build step in the docker file to work, the image has to be created at the solution level and not the project level - since all of the projects need to be built. Hence why I’m using the solution directory when we build the image.&lt;/p&gt;

&lt;p&gt;Then I run a container using &lt;code&gt;docker run -p 127.0.0.1:80:80/tcp myimage&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So far so good! But after invoking one of the reports yields an internal server error.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#show-me-the-errors"&gt;
  &lt;/a&gt;
  Show me the errors!
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H_Mc7oyS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jason.sultana.net.au/static/img/show-me-the-money.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H_Mc7oyS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://jason.sultana.net.au/static/img/show-me-the-money.jpeg" alt="" width="600" height="338"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, since this is running under docker (and this is just a hobby app, so I’m using old-school rolling file logs), I actually need to &lt;code&gt;sh&lt;/code&gt; into the container first to see the logs. So first to get the id of the container: &lt;code&gt;docker ps&lt;/code&gt;, and once we have the id of the container: &lt;code&gt;docker exec -it CONTAINER_ID /bin/bash&lt;/code&gt;. Opening the error log reveals:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  Jering.Javascript.NodeJS.InvocationException: Failed to launch chrome!
/app/Reports/jsreport/node_modules/puppeteer/.local-chromium/linux-609904/chrome-linux/chrome: error while loading shared libraries: libnss3.so: cannot open shared object file: No such file or directory

TROUBLESHOOTING: https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md

Error: Failed to launch chrome!

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Interesting! Following the link provided and scrolling down to &lt;em&gt;Running Puppeteer under Docker&lt;/em&gt; tells you that we basically need to add a step in our dockerfile to install the necessary libraries (particularly &lt;code&gt;libnss3.so&lt;/code&gt;) in order for headless chrome to run. The dockerfile in their example is a bit verbose with some unnecessary steps, but the real magic is basically just:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Install latest chrome dev package and fonts to support major charsets (Chinese, Japanese, Arabic, Hebrew, Thai and a few others)
# Note: this installs the necessary libs to make the bundled version of Chromium that Puppeteer
# installs, work.
RUN apt-get update \
    &amp;amp;&amp;amp; apt-get install -y wget gnupg \
    &amp;amp;&amp;amp; wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - \
    &amp;amp;&amp;amp; sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" &amp;gt;&amp;gt; /etc/apt/sources.list.d/google.list' \
    &amp;amp;&amp;amp; apt-get update \
    &amp;amp;&amp;amp; apt-get install -y google-chrome-stable fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-kacst fonts-freefont-ttf libxss1 \
      --no-install-recommends \
    &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And voila! Puppeteer is now working under Docker. Hope this helped someone out, or was at least an interesting read :)&lt;/p&gt;

&lt;p&gt;Catch ya!&lt;/p&gt;

</description>
      <category>docker</category>
    </item>
    <item>
      <title>How to add blog posts to github readme?</title>
      <author>Chloe</author>
      <pubDate>Fri, 14 Jan 2022 23:16:12 +0000</pubDate>
      <link>https://dev.to/cguttweb/how-to-add-blog-posts-to-github-readme-k39</link>
      <guid>https://dev.to/cguttweb/how-to-add-blog-posts-to-github-readme-k39</guid>
      <description>&lt;p&gt;Hey so I have setup a Github Readme file however I would like to be able if possible to add my latest blog posts it seems asa though it is possibly could someone point me in the right directionm on how to do this?&lt;/p&gt;

&lt;p&gt;My site is built with Nuxt if that makes a difference but I do have feed setup I assume I need to reference that?&lt;/p&gt;

&lt;p&gt;Any help much appreciated. Thanks!&lt;/p&gt;

</description>
      <category>github</category>
      <category>nuxt</category>
      <category>vue</category>
      <category>markdown</category>
    </item>
  </channel>
</rss>
