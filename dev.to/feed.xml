<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>State of the Web: Serverless Functions</title>
      <author>AsyncBanana</author>
      <pubDate>Sun, 16 Jan 2022 15:55:20 +0000</pubDate>
      <link>https://dev.to/asyncbanana/state-of-the-web-serverless-functions-hhc</link>
      <guid>https://dev.to/asyncbanana/state-of-the-web-serverless-functions-hhc</guid>
      <description>&lt;p&gt;Serverless functions (also known as Function as a Service) execute code statelessly on the Cloud. This means that they can do things like scale infinitely and run anywhere. There are many different serverless function providers, like &lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambda&lt;/a&gt;, &lt;a href="https://workers.cloudflare.com/"&gt;Cloudflare Workers&lt;/a&gt;, and &lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background-of-serverless-functions"&gt;
  &lt;/a&gt;
  Background of Serverless Functions
&lt;/h2&gt;

&lt;p&gt;Google created the first serverless model in their &lt;a href="https://cloud.google.com/appengine/"&gt;Google App Engine&lt;/a&gt; product, which offered auto-scaling stateless code execution. App Engine was different from most more recent serverless function providers, but it was the first product to try this idea. However, while it was used by companies like Snapchat, it did not catch on with the overall developer community.&lt;/p&gt;

&lt;p&gt;The first Function as a Service (FaaS) provider to truly catch on was &lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambda&lt;/a&gt;. AWS Lambda was a serverless function service that Amazon released in November 2014. Lambda allows for functions written in many different languages to automatically scale in under a second while allowing users not to have to worry about the underlying hardware. Companies like Google, Microsoft, and Oracle also created their own service for serverless functions. Although to this day, Lambda is the most popular serverless function provider, and since its release, it has become faster, more flexible, and easier to use.&lt;/p&gt;

&lt;p&gt;However, that is not the end of the story. Since then, many services have improved on AWS Lambda's model in ways like ease of use and performance. The first notable FaaS provider was &lt;a href="https://vercel.com/"&gt;Vercel&lt;/a&gt; (ZEIT Now at the time), which was released in April of 2016 and was a lot simpler to use than Lambda. Another selling point was that it integrated well with &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt;, a React framework made by Vercel. Other, newer services also try to be a lot easier, like &lt;a href="https://begin.com/"&gt;Begin&lt;/a&gt;, although Vercel is still the most popular in that group.&lt;/p&gt;

&lt;p&gt;The second major innovation in serverless functions was edge computing with lightweight isolates. This was pioneered by &lt;a href="https://workers.cloudflare.com/"&gt;Cloudflare Workers&lt;/a&gt;, a serverless product released in September 2017. It promised to allow your code to run on any of the many Points of Presence Cloudflare has worldwide, and it used &lt;a href="https://developers.cloudflare.com/workers/learning/how-workers-works#isolates"&gt;V8 Isolates&lt;/a&gt; to reduce the startup time to a few milliseconds, and later, even zero.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-serverless-functions-are-significant"&gt;
  &lt;/a&gt;
  Why Serverless Functions are Significant
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#performance"&gt;
  &lt;/a&gt;
  Performance
&lt;/h3&gt;

&lt;p&gt;Many serverless function providers offer high-speed services. As talked about in the background, edge computing has revolutionized serverless functions. Because serverless functions are stateless, they do not need to always run in the same place. This means they can work like CDNs and automatically deliver content from data centers close to users (the "edge") rather than one centralized location. Serving from the edge can be a huge difference in latency for large networks like Cloudflare's. Not all serverless function providers support this, but a growing number do, like &lt;a href="https://www.netlify.com/products/edge/edge-handlers/"&gt;Netlify&lt;/a&gt;, &lt;a href="https://workers.cloudflare.com/"&gt;Cloudflare Workers&lt;/a&gt;, &lt;a href="https://vercel.com/features/edge-functions"&gt;Vercel&lt;/a&gt;, &lt;a href="https://aws.amazon.com/lambda/edge/"&gt;AWS Lambda@Edge&lt;/a&gt;, and more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scalability"&gt;
  &lt;/a&gt;
  Scalability
&lt;/h3&gt;

&lt;p&gt;Unlike virtual machines, serverless functions can usually scale from zero to infinity. This means that you never get overloaded by requests, and you don't have to waste money on computing power that you are not using. Whenever users request the HTTP endpoint, most serverless function providers automatically determine whether there are already running functions that can process the request. If there are not, a new function is created. Additionally, if function instances are not processing anything, they are automatically stopped. Some virtual machine and container services also offer autoscaling, but because it takes longer to start a virtual machine/container, it is much less granular.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ease-of-setup"&gt;
  &lt;/a&gt;
  Ease of Setup
&lt;/h3&gt;

&lt;p&gt;Serverless functions abstract over the hardware usually (hence the serverless). Instead of worrying about setting up servers and operating systems, the provider takes care of everything. This is not necessarily unique to serverless functions, as containers and virtual machines usually do this too, but with serverless functions, you don't even need to worry about the operating system or software running your code. The advantage of not managing your hardware and operating system is that you can get started a lot faster and not have to worry about as much.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-state-of-serverless-functions"&gt;
  &lt;/a&gt;
  The State of Serverless Functions
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#language-support"&gt;
  &lt;/a&gt;
  Language support
&lt;/h3&gt;

&lt;p&gt;You can use almost any language with serverless functions. Whether you are using JavaScript, Go, or C, most serverless function providers support them. However, if you use a V8-based serverless function setup (most edge serverless function setups do this), language support might be more limited. Since V8 is primarily a JavaScript engine, the best-supported language is JavaScript. However, sometimes you want to use languages that do not support compiling to JavaScript. The solution is often WebAssembly, a portable assembly-like language that most modern languages support as a compilation target. WebAssembly also has other advantages, like how it can often perform faster. For more information on WebAssembly, &lt;a href="https://dev.to/posts/webassembly/"&gt;you can look at our article on WebAssembly&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#production-readiness"&gt;
  &lt;/a&gt;
  Production readiness
&lt;/h3&gt;

&lt;p&gt;Serverless functions are used by many different companies and are supported by some of the biggest names in web hosting like AWS and Cloudflare. While serverless functions are somewhat new, they are still very production-ready.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#running-on-the-edge"&gt;
  &lt;/a&gt;
  Running on the Edge
&lt;/h3&gt;

&lt;p&gt;Edge serverless functions are still experimental for the most part. However, some services are battle-tested, namely &lt;a href="https://aws.amazon.com/lambda/edge/"&gt;AWS Lambda@Edge&lt;/a&gt; and &lt;a href="https://workers.cloudflare.com/"&gt;Cloudflare Workers&lt;/a&gt;. These services have existed for multiple years and are used by companies like NPM and Amazon. There are also other more recent services offered by companies like Vercel, Netlify, and Fastly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That is it! Hopefully, now you understand serverless functions, why they are helpful, and what state they are currently in. If you liked this article, be sure to sign up for the mailing &lt;a href="https://byteofdev.com/signup/"&gt;here&lt;/a&gt;. I hope you learned something, and thanks for reading.&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>programming</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Introduction to Git</title>
      <author>Sourab N</author>
      <pubDate>Sun, 16 Jan 2022 15:41:02 +0000</pubDate>
      <link>https://dev.to/ieeemace/introduction-to-git-1na5</link>
      <guid>https://dev.to/ieeemace/introduction-to-git-1na5</guid>
      <description>&lt;p&gt;Git is an open-source, version control tool created in 2005 by developers working on the Linux operating system; GitHub is a company founded in 2008 that makes tools which integrate with git. You do not need GitHub to use git, but you cannot use GitHub without using git. There are many other alternatives to GitHub, such as GitLab, BitBucket, and “host-your-own” solutions such as gogs and gittea. All of these are referred to in git-speak as “remotes”, and all are completely optional. You do&lt;/p&gt;

&lt;p&gt;not need to use a remote to use git, but it will make sharing your code with others easier.&lt;/p&gt;

&lt;p&gt;Step 1: Create a local git repository&lt;/p&gt;

&lt;p&gt;When creating a new project on your local machine using git, you'll first create a new repository (or often, 'repo', for short).&lt;/p&gt;

&lt;p&gt;To begin, open up a terminal and move to where you want to place the project on your local machine using the cd (change directory) command.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--15QlI2w_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0apwjhel04f7iujochk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--15QlI2w_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0apwjhel04f7iujochk.png" alt="Image1" width="643" height="77"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To initialize a git repository in the root of the folder, run the &lt;code&gt;git init&lt;/code&gt; command:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--valKn-xl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ze50jad1of7z8n7zor33.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--valKn-xl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ze50jad1of7z8n7zor33.png" alt="Image description" width="643" height="71"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 2: Add a new file to the repo&lt;/p&gt;

&lt;p&gt;Go ahead and add a new file to the project, using any text editor you like or running a &lt;code&gt;touch&lt;/code&gt; command. &lt;code&gt;touch newfile.txt&lt;/code&gt; just creates and saves a blank file named newfile.txt.&lt;/p&gt;

&lt;p&gt;Once you've added or modified files in a folder containing a git repo, git will notice that the file exists inside the repo. But, git won't track the file unless you explicitly tell it to. Git only saves/manages changes to files that it tracks, so we’ll need to send a command to confirm that yes, we want git to track our new file.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aXINJUwL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vthrtv37iiynhseyi4zq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aXINJUwL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vthrtv37iiynhseyi4zq.png" alt="Image description" width="643" height="93"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After creating the new file, you can use the &lt;code&gt;git status&lt;/code&gt; command to see which files git knows exist.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cgdZ9EWb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98l1wb8bakik6nynht7x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cgdZ9EWb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98l1wb8bakik6nynht7x.png" alt="Image description" width="643" height="191"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#an-interlude-the-staging-environment-the-commit-and-you"&gt;
  &lt;/a&gt;
  An interlude: The staging environment, the commit, and you
&lt;/h3&gt;

&lt;p&gt;One of the most confusing parts when you're first learning git is the concept of the staging&lt;br&gt;
environment and how it relates to a commit.&lt;/p&gt;

&lt;p&gt;A commit is a record of what changes you have made since the last time you made a commit. Essentially, you make changes to your repo (for example, adding a file or modifying one) and then tell git to put those changes into a commit.&lt;/p&gt;

&lt;p&gt;Commits make up the essence of your project and allow you to jump to the state of a project at any other commit.&lt;/p&gt;

&lt;p&gt;So, how do you tell git which files to put into a commit? This is where the staging environment or index come in. As seen in Step 2, when you make changes to your repo, git notices that a file has changed but won't do anything with it (like adding it in a commit).&lt;/p&gt;

&lt;p&gt;To add a file to a commit, you first need to add it to the staging environment. To do this, you can use the git add  command (see Step 3 below).&lt;/p&gt;

&lt;p&gt;Once you've used the git add command to add all the files you want to the staging environment, you can then tell git to package them into a commit using the git commit command.&lt;/p&gt;

&lt;p&gt;Step 3: Add a file to the staging environment&lt;/p&gt;

&lt;p&gt;Add a file to the staging environment using the git add command.&lt;/p&gt;

&lt;p&gt;If you rerun the git status command, you'll see that git has added the file to the staging environment&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eWeufJuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ihg6llkmk9mg3f10a3dp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eWeufJuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ihg6llkmk9mg3f10a3dp.png" alt="Image description" width="643" height="167"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 4: Create a commit&lt;br&gt;
It's time to create your first commit!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W3CmOmMc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyct2qsez8cdd64irtdv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W3CmOmMc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyct2qsez8cdd64irtdv.png" alt="Image description" width="643" height="94"&gt;&lt;/a&gt;&lt;br&gt;
Run the command git commit -m&lt;/p&gt;

&lt;p&gt;Step 5: Create a new branch&lt;/p&gt;

&lt;p&gt;Now that you've made a new commit, let's try something a little more advanced.&lt;/p&gt;

&lt;p&gt;Say you want to make a new feature but are worried about making changes to the main project while developing the feature. This is where git branches come in.&lt;/p&gt;

&lt;p&gt;Branches allow you to move back and forth between 'states' of a project. Official git docs describe branches this way: ‘A branch in Git is simply a lightweight movable pointer to one of these commits.’ For instance, if you want to add a new page to your website you can create a new branch just for that page without affecting the main part of the project. Once you're done with the page, you&lt;/p&gt;

&lt;p&gt;can mergeyour changes from your branch into the primary branch. When you create a new branch, Git keeps track of which commit your branch 'branched' off of, so it knows the history behind all the files. Let's say you are on the primary branch and want to create a new branch to develop your web page. Here's what you'll do: Run git checkout -b . This command will automatically create a new branch and then 'check you out' on it, meaning git will move you to that branch, off of the primary branch.&lt;/p&gt;

&lt;p&gt;After running the above command, you can use the git branch command to confirm that your branch was created&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lxNa0iXb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7bplzpiw4xfsk3ez4hg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lxNa0iXb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7bplzpiw4xfsk3ez4hg.png" alt="Image description" width="644" height="87"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 6: Create a new repository on GitHub&lt;/p&gt;

&lt;p&gt;If you only want to keep track of your code locally, you don't need to use GitHub. But if you want to work with a team, you can use GitHub to collaboratively modify the project's code.&lt;/p&gt;

&lt;p&gt;To create a new repo on GitHub, log in and go to the GitHub home page. You can find the “New repository” option under the “+” sign next to your profile picture, in the top right corner of the navbar&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0IP4ofz5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jhu880s8jmus87v5hoq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0IP4ofz5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jhu880s8jmus87v5hoq.png" alt="Image description" width="602" height="78"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After clicking the button, GitHub will ask you to name your repo and provide a brief description&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iCWSruB6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1mmf6i2t3i4q34y8t6wh.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iCWSruB6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1mmf6i2t3i4q34y8t6wh.jpeg" alt="Image description" width="496" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you're done filling out the information, press the 'Create repository' button to make your new repo.&lt;/p&gt;

&lt;p&gt;GitHub will ask if you want to create a new repo from scratch or if you want to add a repo you have created locally. In this case, since we've already created a new repo locally, we want to push that onto GitHub so follow the '....or push an existing repository from the command line' section&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CwlbhG7d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9iqszkp76r27zso39yh.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CwlbhG7d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9iqszkp76r27zso39yh.jpeg" alt="Image description" width="496" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 7: Push a branch to GitHub&lt;/p&gt;

&lt;p&gt;Now we'll push the commit in your branch to your new GitHub repo. This allows other people to see the changes you've made. If they're approved by the repository's owner, the changes can then be merged into the primary branch.&lt;/p&gt;

&lt;p&gt;To push changes onto a new branch on GitHub, you'll want to run git push origin yourbranchname. GitHub will automatically create the branch for you on the remote repository&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ewr0zZjA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/okn5v5iure2sxa3u54um.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ewr0zZjA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/okn5v5iure2sxa3u54um.png" alt="Image description" width="643" height="149"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 8: Create a pull request (PR)&lt;/p&gt;

&lt;p&gt;A pull request (or PR) is a way to alert a repo's owners that you want to make some changes to their code. It allows them to review the code and make sure it looks good before putting your changes on the primary branch.&lt;/p&gt;

&lt;p&gt;This is what the PR page looks like before you've submitted it&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DSCtMz98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u07vn7d0ryy0n3ij6bg1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DSCtMz98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u07vn7d0ryy0n3ij6bg1.png" alt="Image description" width="599" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XbO3KrDa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l6senncb522ap9d2hfel.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XbO3KrDa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l6senncb522ap9d2hfel.jpeg" alt="Image description" width="605" height="408"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You might see a big green button at the bottom that says 'Merge pull request'. Clicking this means you'll merge your changes into the primary branch..&lt;/p&gt;

&lt;p&gt;Sometimes you'll be a co-owner or the sole owner of a repo, in which case you may not need to create a PR to merge your changes. However, it's still a good idea to make one so you can keep a more complete history of your updates and to make sure you always create a new branch when making changes.&lt;/p&gt;

&lt;p&gt;Step 9: Merge a PR&lt;/p&gt;

&lt;p&gt;Go ahead and click the green 'Merge pull request' button. This will merge your changes into the primary branch.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tou46JrC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bq2d0jbl20qkofhvd3k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tou46JrC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bq2d0jbl20qkofhvd3k.png" alt="Image description" width="609" height="343"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you're done, we recommend deleting your branch (too many branches can become messy), so hit that grey 'Delete branch' button as well.&lt;/p&gt;

&lt;p&gt;You can double check that your commits were merged by clicking on the 'Commits' link on the first page of your new repo.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UQUywrDB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pw7dsa3rgim76hxp3u5y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UQUywrDB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pw7dsa3rgim76hxp3u5y.png" alt="Image description" width="587" height="144"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will show you a list of all the commits in that branch. You can see the one I just merged right up top (Merge pull request #1).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5mmDyHk4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w1o7kt9xpmeobh1hp6fb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5mmDyHk4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w1o7kt9xpmeobh1hp6fb.png" alt="Image description" width="588" height="161"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also see the hash code of the commit on the right hand side. A hash code is a unique identifier for that specific commit. It's useful for referring to specific commits and when undoing changes use the git revert  command to backtrack.&lt;br&gt;
Step 10: Get changes on GitHub back to your computer&lt;/p&gt;

&lt;p&gt;Right now, the repo on GitHub looks a little different than what you have on your local machine. For example, the commit you made in your branch and merged into the primary branch doesn't exist in the primary branch on your local machine.&lt;/p&gt;

&lt;p&gt;In order to get the most recent changes that you or others have merged on GitHub, use the git pull origin master command (when working on the primary branch). In most cases, this can be shortened to “git pull”.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gz_EtOYX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyh14wulzhn8wa8urksb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gz_EtOYX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyh14wulzhn8wa8urksb.png" alt="Image description" width="643" height="177"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This shows you all the files that have changed and how they've changed. Now we can use the git log command again to see all new commits.&lt;/p&gt;

&lt;p&gt;(You may need to switch branches back to the primary branch. You can do that using the git checkout master command.)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H8ccTtYn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mxlpyzuhkd642nrc37jv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H8ccTtYn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mxlpyzuhkd642nrc37jv.jpeg" alt="Image description" width="643" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;
    ❤️ &lt;a href="https:ieeemace.org"&gt;Website&lt;/a&gt;  |  📷&lt;a href="https://www.instagram.com/ieeemace"&gt;Instagram &lt;/a&gt;  |  💼&lt;a href="https://in.linkedin.com/company/ieeemace"&gt;LinkedIn&lt;/a&gt;   |  🐥&lt;a href="https://twitter.com/ieeemace"&gt;Twitter&lt;/a&gt;    
&lt;/pre&gt;

</description>
      <category>git</category>
      <category>github</category>
    </item>
    <item>
      <title>Turn a Shopify backend open-source and headless in less than 10 minutes</title>
      <author>Shahed Nasser</author>
      <pubDate>Sun, 16 Jan 2022 15:15:20 +0000</pubDate>
      <link>https://dev.to/medusajs/turn-a-shopify-backend-open-source-and-headless-in-less-than-10-minutes-2g8m</link>
      <guid>https://dev.to/medusajs/turn-a-shopify-backend-open-source-and-headless-in-less-than-10-minutes-2g8m</guid>
      <description>&lt;p&gt;In this article, I will show you how to migrate &lt;em&gt;all&lt;/em&gt; of your products and collections from a Shopify backend to an open-source headless commerce backend, &lt;a href="https://github.com/medusajs/medusa"&gt;Medusa&lt;/a&gt;, in less than 10 minutes.&lt;/p&gt;

&lt;p&gt;Medusa is an open-source Shopify alternative giving you all of the necessary primitives to build and operate a webshop. Below, I will first walk you through the features of Medusa. Then I’ll move on to a guide on how to use the plugin to quickly import your Shopify products and collections into Medusa. Finally, I’ll go into a bit more depth on some of the reasons why you should consider moving from Shopify to an open-source headless platform.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-medusa"&gt;
  &lt;/a&gt;
  Why Use Medusa
&lt;/h2&gt;

&lt;p&gt;As &lt;a href="https://www.medusajs.com/"&gt;Medusa&lt;/a&gt; is an open-source headless commerce platform, it allows you to completely customize and compose your stack to fit your needs. You’re not bound to a monolithic architecture where everything is tightly coupled. Some of the main benefits of this are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It gives you full flexibility to build any type of frontend(s) you may prefer - Medusa has starters in &lt;a href="https://github.com/medusajs/nextjs-starter-medusa"&gt;Next.js&lt;/a&gt; or &lt;a href="https://github.com/medusajs/gatsby-starter-medusa"&gt;Gatsby&lt;/a&gt; to set up a high-performing storefront out-of-the-box so you have a good starting point before starting to customize it to your needs. You can check out a demo of the starer &lt;a href="https://start.medusajs.com/"&gt;here&lt;/a&gt;. &lt;/li&gt;
&lt;li&gt;The open-source nature lets you customize the core engine to cater to more advanced business cases and requirements that are often outside the scope of monolithic platforms. The code-base is meant to be extendible and customizable which you can feel from the very first time you try to add own functionality to it.&lt;/li&gt;
&lt;li&gt;Medusa's plugin architecture makes it intuitive and easy to manage your integrations, switch providers and grow with ease. It even comes with a lot of pre-made integrations to CMSs, payments, shipping, analytics, marketing and more. You can check them all out &lt;a href="https://github.com/medusajs/medusa/tree/master/packages"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Also on features, Medusa provides a few different additions that makes it stand out such as the option to define regional currency, shipping and payment options which is one of the more known issues for business owners running on Shopify and wants to sell across markets. Another example is return, exchange and claim handling which are all fully-automated processes in Medusa that makes it easy to use for customer service personnel.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are therefore many reasons to migrate from a monolithic solution like Shopify to a headless open source solution. In the next session, we will walk through how easy this type of migration process can be.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-migrate-data-from-shopify-to-medusa"&gt;
  &lt;/a&gt;
  How to Migrate Data from Shopify to Medusa
&lt;/h2&gt;

&lt;p&gt;In this section of the article, you’ll learn how to use Medusa’s plugin to import your products and collections from Shopify into Medusa.&lt;/p&gt;

&lt;p&gt;This section assumes you already have a Shopify store up and running with products to import. It also assumes you already have Medusa set up and ready to use. If you don’t, then you should check out &lt;a href="https://dev.to/medusajs/get-started-with-medusa-the-open-source-alternative-to-shopify-305j"&gt;this tutorial on how you can set up and run Medusa&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In my case, I have 30 products in my Shopify store, each having many variants and attributes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kE5_98pe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/300bdvqcbijncqiey56z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kE5_98pe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/300bdvqcbijncqiey56z.png" alt="Shopify Products" width="880" height="493"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lc83QBQq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqbkrpjqik5jzbz9shi3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lc83QBQq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqbkrpjqik5jzbz9shi3.png" alt="Shopify Product" width="880" height="599"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-private-shopify-app"&gt;
  &lt;/a&gt;
  Create a Private Shopify App
&lt;/h3&gt;

&lt;p&gt;To be able to import the data from Shopify into Medusa, you need to create an App in your store with limited permissions. This will give you different types of keys to access the App and the data in the store.&lt;/p&gt;

&lt;p&gt;Open your store’s dashboard. Then, choose &lt;em&gt;Apps&lt;/em&gt; from the sidebar. Then, scroll down and click on &lt;em&gt;Manage private apps&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G8qpQc6F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0jlrvewzvqalgmizuio0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G8qpQc6F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0jlrvewzvqalgmizuio0.png" alt="Manage Private Apps Link" width="880" height="117"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you haven’t enabled private apps previously, you’ll be asked to enable them first. click on &lt;em&gt;Enable private app development&lt;/em&gt; to enable it.&lt;/p&gt;

&lt;p&gt;After you have enable private app development, you’ll be able to create a private app. Click on &lt;em&gt;Create private app&lt;/em&gt; to get started.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qUiLsIci--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dcvh7ttgilvxnhadhzoh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qUiLsIci--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dcvh7ttgilvxnhadhzoh.png" alt="Create Private App" width="880" height="505"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You’ll then need to enter your app’s name and your email. Then, scroll down to the Admin API section and click on &lt;em&gt;Show inactive Admin API permissions&lt;/em&gt;. Scroll down to Products and choose Read Access from the dropdown. Medusa only needs to read products and collections.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--86Pt8xBN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4hcjlolm3xwrj1ghkfn3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--86Pt8xBN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4hcjlolm3xwrj1ghkfn3.png" alt="Products Permissions" width="880" height="138"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Scroll down to the end of the page and click the &lt;em&gt;Save&lt;/em&gt; button. Then, click &lt;em&gt;Create App&lt;/em&gt; in the pop-up that shows up.&lt;/p&gt;

&lt;p&gt;After you create the app, you’ll be able to see a set of keys such as API Key and Password. What you’ll need for the plugin is the password, so keep it available for the next step.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-medusasourceshopify-to-your-medusa-store"&gt;
  &lt;/a&gt;
  Add medusa-source-shopify to your Medusa store
&lt;/h3&gt;

&lt;p&gt;You’ll now integrate the &lt;a href="https://github.com/medusajs/medusa/tree/ec0f2df2854d497f49ce94f74636723f0c0e2e26/packages/medusa-source-shopify"&gt;Shopify plugin&lt;/a&gt; into your Medusa server. To integrate the plugin, you need the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The Shopify domain name and the password of the Shopify app you want to link to.&lt;/li&gt;
&lt;li&gt;PostgreSQL database used with your Medusa server.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point of the article, it’s assumed you have all of these requirements ready.&lt;/p&gt;

&lt;p&gt;Open your terminal in your Medusa server installation and run the following command to install the plugin:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npm i medusa-source-shopify
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, in &lt;code&gt;.env&lt;/code&gt; add the following new variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    SHOPIFY_DOMAIN=
    SHOPIFY_PASSWORD=
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where &lt;code&gt;SHOPIFY_DOMAIN&lt;/code&gt; is the subdomain name of your Shopify store (for example, my store is shahednasser.myshopify.com, so the value would be shahednasser), and &lt;code&gt;SHOPIFY_PASSWORD&lt;/code&gt; is the password generated when you created the app earlier.&lt;/p&gt;

&lt;p&gt;Then, open &lt;code&gt;medusa-config.js&lt;/code&gt; and add a new entry into the &lt;code&gt;plugins&lt;/code&gt; array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;...,&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;medusa-source-shopify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SHOPIFY_DOMAIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SHOPIFY_PASSWORD&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will add the Shopify plugin into your Medusa server and will pass the options for the domain and password from the environment variables you just added.&lt;/p&gt;

&lt;p&gt;And that’s all you need to integrate Medusa with Shopify to import your data. All you need to do now is run your server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the server will import all the products and collections from Shopify into your Medusa store. Your server will do that everytime you start it, so your products and collections will be automatically synced on server restart.&lt;/p&gt;

&lt;p&gt;Your products and collections will be imported with pricing, variants, and all the attributes and details you had in your Shopify store.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G5bOpc_w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e5m1t857zaur5t8s389d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G5bOpc_w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e5m1t857zaur5t8s389d.png" alt="Products in Medusa" width="880" height="635"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-migrate-from-shopify-to-an-open-source-backend"&gt;
  &lt;/a&gt;
  Why Migrate From Shopify to an Open Source backend
&lt;/h2&gt;

&lt;p&gt;According to &lt;a href="https://trends.builtwith.com/shop/Shopify"&gt;BuiltWith&lt;/a&gt;, there are over 3.7M live websites that use Shopify at the time of writing this. This makes Shopify one of the most used ecommerce platforms. Shopify is known to provide an easy experience for brands and businesses of any size to launch and operate their online business.&lt;/p&gt;

&lt;p&gt;Although Shopify has a lot of advantages that make businesses and developers gravitate towards it, it all comes at the expense of &lt;em&gt;less ownership of the tech stack&lt;/em&gt;. At first glance, especially for smaller businesses that are just looking to start a store as soon as possible, it may seem like an irrelevant detail.&lt;/p&gt;

&lt;p&gt;However, any business that have expanded from a few sales a week to becoming a serious ecommerce business can tell how important it is to be able to fully own the tech stack behind your webshop. Owning your website’s codebase, and having the flexibility to change and reform it based on your growing business needs is an important detail that will come up as time passes by. Shifting integrations, opening up new markets, customizing the UX are just some of the areas in which developers encounter problems when scaling with a monolithic platforms.&lt;/p&gt;

&lt;p&gt;In addition to the issues related to scaling, using an open-source solution means that the platform you’re using is free forever. Using Shopify comes at a high price that grows as you scale as it is  often directly linked to your webshop revenue and transaction volume. This will add to the additional costs of creating and operating your system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Shopify is a powerful ecommerce platform that is used by millions of websites across the globe. Although it has a ton of great features, it has some disadvantages as well, most notably your tech stack ownership.&lt;/p&gt;

&lt;p&gt;With ecommerce platforms like Medusa you can completely own your tech stack and have many of the features you like about Shopify into your own open-source store. Medusa even makes it easier by allowing you to import your data from Shopify into Medusa using this easy-to-use plugin.&lt;/p&gt;

&lt;p&gt;Should you have any issues or questions related to Medusa, then feel free to reach out to the Medusa team via &lt;a href="https://discord.gg/F87eGuwkTp"&gt;Discord&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>node</category>
      <category>opensource</category>
    </item>
    <item>
      <title>My first 100 followers on Dev</title>
      <author>Anshuman Bhardwaj</author>
      <pubDate>Sun, 16 Jan 2022 14:54:52 +0000</pubDate>
      <link>https://dev.to/anshuman_bhardwaj/my-first-100-followers-on-dev-193p</link>
      <guid>https://dev.to/anshuman_bhardwaj/my-first-100-followers-on-dev-193p</guid>
      <description>&lt;p&gt;First of all, thanks to the Dev community for giving feedback on my posts and appreciating my content.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-started"&gt;
  &lt;/a&gt;
  How it started
&lt;/h2&gt;

&lt;p&gt;I always had a thing for writing. I had been writing &lt;a href="https://medium.com/@anshuman-bhardwaj"&gt;Medium blogs&lt;/a&gt; about my travel for some time now. It brings me joy to share and express myself through words.&lt;/p&gt;

&lt;p&gt;During my college, I made a &lt;a href="https://www.youtube.com/channel/UC9-rIQbbBVxJyTIWPdhK4YA"&gt;YouTube channel&lt;/a&gt; and posted tutorials about CPU simulators &amp;amp; assembly programming. It made me realize that I love to teach. Last December, when I checked, my channel reached 300 subscribers, and I thought, let's continue doing what I like. &lt;/p&gt;

&lt;p&gt;I thought this year let me start contributing to the Dev Community and resume making YouTube videos. So during this New Year's long weekend, I re-branded my YouTube channel and created a Dev account.&lt;/p&gt;

&lt;p&gt;I've posted two articles on Dev and received more than 2k views with 150+ reactions and gained 100+ followers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-its-headed"&gt;
  &lt;/a&gt;
  Where it's headed
&lt;/h2&gt;

&lt;p&gt;I've been a developer for four years now. Although I have a CS degree, I consider myself a self-taught engineer. I've grown so much in my career that at the age of 22, I'm an Eng. manager with five direct reports. I feel my experience will be a lot helpful for the community.&lt;/p&gt;

&lt;p&gt;I plan to continue writing and making videos at least once per week. It would be an achievement to keep this going for a year.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#goals"&gt;
  &lt;/a&gt;
  Goals
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Improve my writing and speaking skills.&lt;/li&gt;
&lt;li&gt;Create content that I can be proud of&lt;/li&gt;
&lt;li&gt;Deliver one Dev post and a YouTube video per week. &lt;/li&gt;
&lt;li&gt;Earn the 4/8/16 week streak badges from Dev. &lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;I hope this post was helpful to you. Should you have any feedback or questions, please feel free to put them in the comments below. I would love to hear and work on them.&lt;/p&gt;

&lt;p&gt;For more such content, please follow me &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/sun_anshuman"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UC9-rIQbbBVxJyTIWPdhK4YA"&gt;YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://anshuman-bhardwaj.medium.com"&gt;Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Until next time&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/kRkJXYahXjSE0/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/kRkJXYahXjSE0/giphy.gif" width="245" height="150"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>writing</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How not to let social media and your phone destroy your life</title>
      <author>Burhanuddin Udaipurwala</author>
      <pubDate>Sun, 16 Jan 2022 14:20:45 +0000</pubDate>
      <link>https://dev.to/burhanuday/how-not-to-let-social-media-and-your-phone-destroy-your-life-3hb6</link>
      <guid>https://dev.to/burhanuday/how-not-to-let-social-media-and-your-phone-destroy-your-life-3hb6</guid>
      <description>&lt;p&gt;Phone addiction is a serious problem across all age ranges. Recently, a friend told me that they went to bed at midnight but were up till 3 AM scrolling Instagram. They said they lost track of time.&lt;/p&gt;

&lt;p&gt;I suffered from the same syndrome and would constantly have the urge to check my phone every few minutes. Even in the middle of work. To the point that my phone and social media apps were distracting me from working&lt;/p&gt;

&lt;p&gt;My average phone usage time would be close to 6 hours a day. I was in a bad mental state and my phone (read social media) addiction was making it worse. I wanted to reduce my usage of Instagram, Twitter, Linkedin, Discord, and Reddit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-your-phone-without-being-miserable"&gt;
  &lt;/a&gt;
  How to use your phone without being miserable
&lt;/h2&gt;

&lt;p&gt;There are two ways to cure your phone addiction. The first is to take the band-aid-like approach and pull it off in one go. Most people are likely to give up on this. I still recommend that you start with the "Quick and painful" approach and only use the milder method when it doesn't work for you. Regardless of the approach you take, I still think that these techniques are likely to help you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-and-painful"&gt;
  &lt;/a&gt;
  Quick and painful
&lt;/h2&gt;

&lt;p&gt;The quick and painful method is to uninstall all social media apps from your phone and only open them from the browser&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-social-media-only-from-the-browser"&gt;
  &lt;/a&gt;
  Use social media only from the browser
&lt;/h3&gt;

&lt;p&gt;Social media apps like Twitter and Instagram have never-ending feeds and timelines. We get addicted to them because they give us a small dopamine rush every time we scroll the feed.&lt;/p&gt;

&lt;p&gt;I uninstalled social media apps from my phone. I logged into all these apps from my desktop computer. It helped because firstly, it took more effort to go to the browser and type in the URL. And secondly, I could use &lt;a href="https://chrome.google.com/webstore/detail/leechblock-ng/blaaajhemilngeeffpbfkdjjoefldkok"&gt;LeechBlock&lt;/a&gt; to restrict myself from opening social media sites during my work hours&lt;/p&gt;

&lt;p&gt;You can also experiment by logging into these apps from your phone's browser. Since those web apps are not optimised for mobile devices they give you an inferior experience. If you hate the scrolling experience, you wouldn't want to scroll&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c8DvrmZ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/la89mg4ls1ov7u12drun.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c8DvrmZ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/la89mg4ls1ov7u12drun.jpg" alt="taps head meme" width="700" height="700"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;
    If you hate the scrolling experience, you wouldn't want to scroll&lt;br&gt;
 
 &lt;/p&gt;

&lt;p&gt;This is how I got rid of using Instagram because the web version sucks. Try watching a story or two on Instagram web, you don't want to. It is slightly more difficult to uninstall system apps. The method demonstrated by XDA &lt;a href="https://www.xda-developers.com/uninstall-carrier-oem-bloatware-without-root-access/"&gt;here&lt;/a&gt; requires caution. As long as you don't uninstall random things, your phone should be fine. This is how I got rid of YouTube and I still don't have it installed on my phone.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#put-your-phone-on-silent-mode-permanently"&gt;
  &lt;/a&gt;
  Put your phone on silent mode permanently
&lt;/h3&gt;

&lt;p&gt;Sometimes I would get the feeling that my phone was vibrating even when it wasn't. I kid you not, this is a real illness that has been extensively documented and is a sign of mobile phone addiction.&lt;/p&gt;

&lt;p&gt;The easy way out is to put your phone on silent mode and forget. Then when feeling like it is vibrating, you tell yourself that it isn't because it can't be.&lt;/p&gt;

&lt;p&gt;Another way is to put your phone in silent mode and to leave it in a different room. Putting the phone out of your sight will reduce the urge to pick it up again and again because you don't see it that often&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mild-and-slower"&gt;
  &lt;/a&gt;
  Mild and slower
&lt;/h2&gt;

&lt;p&gt;A lot of these solutions revolve around using the app &lt;a href="https://play.google.com/store/apps/details?id=com.google.android.apps.wellbeing&amp;amp;hl=en_US&amp;amp;gl=US"&gt;Digital Wellbeing (Play Store)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If it's not available for you on the Play Store, you can side-load the APK from &lt;a href="https://apkpure.com/digital-wellbeing/com.google.android.apps.wellbeing"&gt;APK Pure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I recommend also using &lt;a href="https://play.google.com/store/apps/details?id=com.teslacoilsw.launcher"&gt;Nova Launcher&lt;/a&gt;. I like it because it is functional, customisable and doesn't do too much. You can also use &lt;a href="https://play.google.com/store/apps/details?id=ch.deletescape.lawnchair.plah"&gt;Lawnchair Launcher&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keep-an-empty-home-screen-out-of-sight-out-of-mind"&gt;
  &lt;/a&gt;
  Keep an empty home screen - out of sight, out of mind
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CjX9_x9F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fz1idayh6srt153w1qly.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CjX9_x9F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fz1idayh6srt153w1qly.jpeg" alt="homescreen" width="738" height="1600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The problem was that whenever I turned the screen on, I saw shortcuts to those social media apps on my home screen. I would open them out of muscle memory. I would then forget why I picked my phone up and started scrolling whatever feed I had in front of me. The easy solution was to remove all home screen shortcuts. The only way to open those apps was through the app drawer. That would require extra effort which increased my resistance to opening the app again and again.&lt;/p&gt;

&lt;p&gt;When I started, I built a special launcher for myself that would be boring yet functional. &lt;a href="https://play.google.com/store/apps/details?id=com.appallure.miny"&gt;miny&lt;/a&gt; is still available on the Play Store but I don't use it anymore. You might want to give it a try. I haven't worked on it in a while so expect plenty of bugs&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#turn-off-all-unnecessary-notifications"&gt;
  &lt;/a&gt;
  Turn off all unnecessary notifications
&lt;/h3&gt;

&lt;p&gt;If you don't want to give up on the installed apps that quickly, another way is to disable notifications. You can go to Instagram's and Twitter's settings to disable alerts. Disable as many as you'd like. If you get fewer notifications, you are less likely to open those apps. I have notifications enabled only for Direct Messages. I have disabled all other notifications&lt;/p&gt;

&lt;p&gt;You can also go to Digital Wellbeing and see which apps send you the most amount of notifications every day. There are also apps available that aggregate notifications for a few hours and send them all at once at times you specify.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QkRjMjz---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0mm12o9p4x65jctb2sn.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QkRjMjz---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i0mm12o9p4x65jctb2sn.jpeg" alt="notifications counter according to apps" width="738" height="1600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Digital Wellbeing also has a focus mode that blocks notifications for specific apps. It gives you the choice to allow important apps to still send you important alerts. I like this feature a lot and use it while I am working. It prevents me from getting distracted&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TFEnMUmZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2t8fkc97cn9bysjxby0j.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TFEnMUmZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2t8fkc97cn9bysjxby0j.jpeg" alt="digital wellbeing focus mode" width="738" height="1600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also use Android's DND mode and switch off all notifications. You can keep notifications for calls on so if there's anything urgent, someone is likely to call you&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-direct-shortcuts-to-features-instead-of-navigating"&gt;
  &lt;/a&gt;
  Use direct shortcuts to features instead of navigating
&lt;/h3&gt;

&lt;p&gt;This is again if you haven't uninstalled social media apps from your phone. The launcher I use, Nova Launcher, has this cool feature that allows me to go to different parts of the app directly. This saves me the effort of navigating through unnecessary parts of the apps and going to where I want directly. For instance, if I want to message someone on Instagram, I can directly go to the chats screen rather than opening the app and getting distracted by the feed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Go8-m1zv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4pbt6rbl96lkdqr5tp2s.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Go8-m1zv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4pbt6rbl96lkdqr5tp2s.jpeg" alt="direct shortcuts from homescreen" width="738" height="1600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also use a Nova launcher extension called &lt;a href="https://play.google.com/store/apps/details?id=ninja.sesame.app.edge&amp;amp;hl=en_IN&amp;amp;gl=US"&gt;Sesame Shortcuts&lt;/a&gt; (it's a paid app with a free trial) that takes this idea to the extreme and provides a ton of other features. You probably don't need it but it's pretty cool nonetheless&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#limit-usage-with-digital-wellbeing"&gt;
  &lt;/a&gt;
  Limit usage with digital wellbeing
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BY_spUId--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9fb7pduvjskjfcb4e8r0.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BY_spUId--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9fb7pduvjskjfcb4e8r0.jpeg" alt="an empty phone homescreen" width="738" height="1600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I used Digital Wellbeing to set timers for social media apps. Once the assigned time gets depleted, Digital Wellbeing will restrict your access to those apps. They will appear greyed out and you won't be able to open them. It will also hide the notifications from those apps to prevent any further distraction.&lt;/p&gt;

&lt;p&gt;You can start by allocating larger amounts of time for each app and then reducing the time at the start of the week until you have reached your desired usage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-has-helped-me"&gt;
  &lt;/a&gt;
  How it has helped me
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--14Y5iiyF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/47115mfkkx6vi5yr9ay0.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--14Y5iiyF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/47115mfkkx6vi5yr9ay0.jpeg" alt="direct shortcuts from homescreen" width="738" height="1600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I used to be glued to my phone for about 5-6 hours a day. I have now brought it to somewhere close to 1.5 hours. That is if you ignore the time spent calling. It's erroneously reported since that's the amount of time I spent talking to people outside of social media.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I don't believe that you should completely go off of social media. I do believe that you should restrict the time you allocate to it.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-with-me"&gt;
  &lt;/a&gt;
  Connect with me
&lt;/h2&gt;

&lt;p&gt;If you'd like to discuss, DM me on &lt;a href="https://twitter.com/burhanuday"&gt;Twitter&lt;/a&gt;. For updates, subscribe to my newsletter at &lt;a href="https://burhanuday.com"&gt;burhanuday.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>mentalhealth</category>
    </item>
    <item>
      <title>How does asynchronous JavaScript work behind the scenes? </title>
      <author>Vinay Kishore</author>
      <pubDate>Sun, 16 Jan 2022 13:49:52 +0000</pubDate>
      <link>https://dev.to/vinaykishore/how-does-asynchronous-javascript-work-behind-the-scenes-4bjl</link>
      <guid>https://dev.to/vinaykishore/how-does-asynchronous-javascript-work-behind-the-scenes-4bjl</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction:
&lt;/h2&gt;

&lt;p&gt;Before going deep into the &lt;strong&gt;core of the JavaScript&lt;/strong&gt; runtime and how async code tasks are run behind the scenes, let’s get the basics clear. JavaScript is a &lt;strong&gt;single-threaded&lt;/strong&gt; language. This means it has only one call stack and one memory heap. Hence, it can only execute &lt;strong&gt;one code at a time&lt;/strong&gt;. In other words, the code is executed in an orderly fashion. It must execute one code in the call stack before moving to the next code to be executed. There are two types of code tasks in JavaScript, asynchronous code which runs and gets executed after certain loading, synchronous, which gets executed instantaneously. Let us understand the difference between the synchronous and asynchronous code before moving further.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cqmCItKJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8si4bfon2781j1crrwi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cqmCItKJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8si4bfon2781j1crrwi.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#synchronous-code"&gt;
  &lt;/a&gt;
  Synchronous code:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Most of the code is &lt;strong&gt;synchronous&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is executed in a line-by-line fashion, i.e., each line of code waits before the previous line to finish its execution.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Long-running code operations &lt;strong&gt;block&lt;/strong&gt; the code execution for further stacked code executions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#asynchronous-code"&gt;
  &lt;/a&gt;
  Asynchronous code:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Asynchronous code isn’t synchronous. I.e., the code is executed after a task that runs in the background finishes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is &lt;strong&gt;non-blocking&lt;/strong&gt; in nature. Execution doesn’t wait for an asynchronous task to finish its work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Callback functions alone don’t make the code asynchronous. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#runtime"&gt;
  &lt;/a&gt;
  Runtime:
&lt;/h2&gt;

&lt;p&gt;Runtime is the environment in which a programming language executes. JavaScript’s runtime majorly constitutes three things namely &lt;strong&gt;JavaScript Engine, Web API, Call stack&lt;/strong&gt;. JavaScript can work with asynchronous code as well as synchronous code. &lt;/p&gt;

&lt;p&gt;The unique feature of JavaScript’s runtime is that even though JavaScript’s interpreter is single-threaded, it can execute multiple codes at a time using &lt;strong&gt;concurrent fashion in a non-blocking way&lt;/strong&gt;. This enables asynchronous behavior.  As the interpreter is not multithreaded, it rules out parallelism. Let’s understand what is the difference between concurrency and parallelisms. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J0FY8cQw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3p1a44ugpqe4zuphmev5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J0FY8cQw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3p1a44ugpqe4zuphmev5.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#concurrency"&gt;
  &lt;/a&gt;
  Concurrency:
&lt;/h3&gt;

&lt;p&gt;Under this approach, the tasks run and complete in an &lt;strong&gt;interleaved fashion&lt;/strong&gt;. I.e., the tasks run concurrently but at a given point of time, only one task is being executed. This happens when the tasks are braked into small parts and are managed pretty well. This is also shown in the figure below.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parallelism"&gt;
  &lt;/a&gt;
  Parallelism:
&lt;/h3&gt;

&lt;p&gt;In contrast, under the approach of parallelism, we can the tasks run &lt;strong&gt;simultaneously&lt;/strong&gt;, i.e., at a particular point of time many tasks can run regardless of other tasks running. This happens when we multithread the tasks into different threads available for the interpreter. &lt;/p&gt;

&lt;p&gt;Having understood that JavaScript runtime follows a concurrent fashion of execution, let us understand how different code is executed behind the scenes smartly. To understand the process of execution, we need to understand the structure of JavaScript runtime in detail.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-engine"&gt;
  &lt;/a&gt;
  JavaScript Engine:
&lt;/h2&gt;

&lt;p&gt;JavaScript engine can be considered as the &lt;strong&gt;heart&lt;/strong&gt; of the runtime. It is the place where each code is executed. JavaScript engine constitutes of Heap storage and call stack. Let’s understand each of those. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#heap-"&gt;
  &lt;/a&gt;
  Heap :
&lt;/h3&gt;

&lt;p&gt;It is the place where all the objects and data are stored. This is similar to the heap storage we see on various other languages like C++, Java, etc. It contains the store of the data related to all the objects, arrays, etc. that we create in the code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#call-stack"&gt;
  &lt;/a&gt;
  Call Stack:
&lt;/h3&gt;

&lt;p&gt;It is the place where the code is stacked before the execution. It has the properties of a basic stack( first in last out ). Once a coding task is stacked into the call stack, it will be executed. There is an event loop that takes place and this is the one that makes the JavaScript interpreter smart. It is responsible for concurrent behavior.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-api"&gt;
  &lt;/a&gt;
  Web API:
&lt;/h2&gt;

&lt;p&gt;JavaScript has the access to different web API’s and it adds a lot of functionality. For example, JavaScript has the access to the &lt;strong&gt;DOM API&lt;/strong&gt;, which gives access to the DOM tree to JavaScript. Using this, we can make changes to the HTML elements present on the browser. Also, you can think of the timer, which gives it access to the time-related functions, etc. Also, the geolocation API which gives it access to the location of the browser. Like this, &lt;strong&gt;JavaScript has the access to various other APIs&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#callback-queue"&gt;
  &lt;/a&gt;
  Callback Queue:
&lt;/h2&gt;

&lt;p&gt;This is the place where asynchronous code is queued before passing to the call stack. The passing of the code task from the callback queue to the call stack is taken care of by the event loop. In addition to this, there is also a micro tasks queue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#micro-tasks-queue"&gt;
  &lt;/a&gt;
  Micro tasks Queue:
&lt;/h2&gt;

&lt;p&gt;The microtasks queue is similar to the callback queue but has a higher priority of execution than it. In other words, if there is a situation where the call stack is empty (except the global execution context ) and there are two tasks to be executed, one from the micro-tasks queue and the other from the normal task queue or callback queue, then the code task present in the microtask queue has the higher priority than the latter.&lt;/p&gt;

&lt;p&gt;Having understood the basic terminologies involved, let’s quickly understand how the asynchronous code work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-asynchronous-javascript-work-behind-the-scenes"&gt;
  &lt;/a&gt;
  How does asynchronous JavaScript work behind the scenes?
&lt;/h2&gt;

&lt;p&gt;Here, we get introduced to the concept of the event loop. In simple words, an event loop can be defined as a &lt;strong&gt;smart technique&lt;/strong&gt; of execution of executing the code from the callback queue by passing into the call stack, once it is found to be empty ( Except the global execution context ).&lt;/p&gt;

&lt;p&gt;The event loop decides when to execute each code task present in the callback queue and the micro-tasks queue. Let us understand the execution process of all the code in an imaginary situation. Let us try to generalize the process into different steps : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;All the code tasks present in the call stack are executed in an orderly fashion. It is synchronous and waits for the previous code task to be executed. In this step, all the code tasks in the call stack are executed. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once the asynchronous task finishes getting loaded in the background, it is sent to the callback queue. The callback function attached to this asynchronous task is waiting to be executed right here. This asynchronous is then queued up to be executed in the callback queue.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now, the part of event loops comes into play. The event loop continuously checks if the call stack is empty and once it finds it to be empty, it takes the first task in the callback queue and stacks it into the call stack which is then executed. This process continues until the event loop finds the call stack and callback queue to be empty. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#do-promises-also-go-to-the-callback-queue"&gt;
  &lt;/a&gt;
  Do promises also go to the callback queue?
&lt;/h2&gt;

&lt;p&gt;No, let us understand how they work behind the scenes. Promises are also a special type of asynchronous tasks which once after loading get queued up in a special place called micro tasks queue. This microtasks queue has higher priority as compared to the callback queue when execution. The event loop also checks for the tasks in the micro-tasks queue when checking for tasks to be executed in the callback queue. If it finds any task to be executed, then it gives the micro-tasks higher priority and they are executed first. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example:
&lt;/h3&gt;

&lt;p&gt;YouTube: &lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ayjiyzwmh0w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let us consider the following example. In this case, there are two synchronous and two asynchronous tasks ( Read comments ). In this example, first, synchronous task 1 is sent to the callback and is executed. Then, the asynchronous task 1 is loaded in the background which is a built promise. Then, asynchronous task 2 is loaded in the background. The last synchronous task is executed asap. Then the promise is sent to the micro tasks queue, at the same time setTimeout which is an asynchronous task is loaded behind. Now, we come across a clash between asynchronous task 1 and asynchronous task 2. As the promise is sent to the micro tasks queue,  it has higher priority and is sent to the call stack and is executed. Then the setTimeout is executed. Here we can see that due to the already queued up tasks, the setTimeout is delayed and the callback is executed after more than 0 seconds(the timer set).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Synchronous task no 1&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This is executed first&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//Asynchronous task no 1&lt;/span&gt;
&lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This is executed third&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;//Asynchronous task no 1&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This is executed fourth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//Synchronous task no 2&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This is executed second&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;This is all about How async JavaScript is run behind the scenes. This may be too heavy to grasp and that’s okay. It is just that in JavaScript different types of functions have different priorities of execution and behavior. The video that I’ve attached with this nicely explains the concept. You can even try your examples and see the outputs you may get. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9VNY3031--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nw1zuoj000hrznkqljhj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9VNY3031--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nw1zuoj000hrznkqljhj.gif" alt="Image description" width="498" height="278"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;That’s all to this post. If you've come to this section, I appreciate it. Most developers skip this in their learning and Who knows if this is your interview question for one of your JavaScript interviews. You can always connect with me on my social handles. I’m always open to discussions on Twitter. Also, you can have my LinkedIn and mail. If you have time, please visit my portfolio and let me know your suggestions on where I can improve. &lt;/p&gt;

&lt;p&gt;Thank you for reading my article. Meet you in the next article friends. This article would be continued further. So please follow me and stay connected. If you found this article useful, please let me know your feedback in the comments below. Also A reaction would always be appreciated.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Du6iqyfo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1476963001781526533/Ud7j61oN_normal.jpg" alt="Vinay Kishore profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Vinay Kishore
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @_vinaykishore
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      If you do code in JavaScript, you know how important strings are. We use strings here there and everywhere. &lt;br&gt;&lt;br&gt;Having a cheat sheet for strings is so helpful for you, so please check out this wonderful thread ⬇️&lt;br&gt;&lt;br&gt;Cheat sheet for JavaScript strings. 🧵&lt;br&gt;&lt;a href="https://twitter.com/hashtag/DEVCommunity"&gt;#DEVCommunity&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/webdev"&gt;#webdev&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/Web3"&gt;#Web3&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      07:12 AM - 15 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1471015267601772545" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1471015267601772545" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1471015267601772545" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Apart from this you can also connect with me on &lt;a href="https://twitter.com/_vinaykishore"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/vinaykishore"&gt;LinkedIn&lt;/a&gt;, also &lt;a href="https://github.com/geekvinay"&gt;GitHub&lt;/a&gt;. Thanks for reading this article. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>react</category>
    </item>
    <item>
      <title>How to implement Socket.io using Typescript</title>
      <author>Nicolas Felix</author>
      <pubDate>Sun, 16 Jan 2022 13:49:02 +0000</pubDate>
      <link>https://dev.to/nickfelix/how-to-implement-socketio-using-typescript-3ne2</link>
      <guid>https://dev.to/nickfelix/how-to-implement-socketio-using-typescript-3ne2</guid>
      <description>&lt;p&gt;Typescript, according to its own website, is a “strongly typed programming language that builds on Javascript”. It can be seen as a superset of solutions and resources that makes Javascript more reliable.&lt;/p&gt;

&lt;p&gt;Socket.IO is a “library that enables real-time, bidirectional and event-based communication between browser and the server”. It makes it easier to construct websocket-based solutions where the server can send updates to the browser in real-time.&lt;/p&gt;

&lt;p&gt;In this article we will create a simple application implementing Socket.io using Typescript where the browser is updated via a third party http request. In this case we will have an order listing which is updated every time a new order arrives.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-projects-structure"&gt;
  &lt;/a&gt;
  Setting up the project's structure
&lt;/h2&gt;

&lt;p&gt;Let’s start by creating our server folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;websocket-typescript &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;websocket-typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then initialize our project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;set &lt;code&gt;dist/app.js&lt;/code&gt; as entry point&lt;/p&gt;

&lt;p&gt;In order to keep this project working as the updates come by, we will install our dependencies with specific versions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# install typescript globally&lt;/span&gt;
npm &lt;span class="nb"&gt;install &lt;/span&gt;typescript &lt;span class="nt"&gt;-g&lt;/span&gt;

&lt;span class="c"&gt;# dev-dependencies&lt;/span&gt;
npm i &lt;span class="nt"&gt;--save-dev&lt;/span&gt; @types/express@4.17.13 @types/node@16.6.2 ts-node@10.2.1 tslint@5.12.1 typescript@4.2.4

npm i &lt;span class="nt"&gt;--save&lt;/span&gt; class-transformer@0.3.1 class-validator@0.12.2 dotenv@10.0.0 express@4.17.1 routing-controllers@0.9.0 socket.io@4.1.3

&lt;span class="c"&gt;# Initialize Typescript: &lt;/span&gt;
tsc &lt;span class="nt"&gt;--init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now open your favorite text-editor and go to the root of our project. You'll find a &lt;code&gt;tsconfig.json&lt;/code&gt; file there. This file indicates that it is a Typescript project.&lt;/p&gt;

&lt;p&gt;Copy and paste this content into the &lt;code&gt;tsconfig.json&lt;/code&gt; file replacing the initial one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"module"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"commonjs"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"esModuleInterop"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"target"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ES2015"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"moduleResolution"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"sourceMap"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"outDir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dist"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"emitDecoratorMetadata"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"experimentalDecorators"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"lib"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"es2015"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"module": "commonjs"&lt;/code&gt; Is the usually used for Node projects;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"esModuleInterop": true&lt;/code&gt; Will make sure that our imports behave normally;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"target": "ES2015"&lt;/code&gt; Helps to support ES2015 code;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"moduleResolution": "node"&lt;/code&gt; Specifically implies that this is a Node project;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"sourceMap": true&lt;/code&gt; Enables the generations of &lt;code&gt;.map&lt;/code&gt; files;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"outDir": "dist"&lt;/code&gt; This is where our output files will be generated;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"emitDecoratorMetadata": true&lt;/code&gt; Enables experimental support for emitting type metadata for decorators which works with the module;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"experimentalDecorators": true&lt;/code&gt; Enables experimental support for decorators;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"lib": ["es2015"]&lt;/code&gt; This includes a default set of type definitions;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now create a folder named &lt;strong&gt;src&lt;/strong&gt; and a &lt;code&gt;server.ts&lt;/code&gt; in it. Our folder structure will be divided in two: &lt;strong&gt;http&lt;/strong&gt; and &lt;strong&gt;websocket&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7ps1_qO4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9l5intv6e1xzwiubn3t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7ps1_qO4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9l5intv6e1xzwiubn3t.png" alt="Folder structure for websocket" width="470" height="343"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will be the initial content of our &lt;code&gt;server.ts&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dotenv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;reflect-metadata&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;createExpressServer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nx"&gt;RoutingControllersOptions&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;routing-controllers&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;APP_PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;routingControllerOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;RoutingControllersOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;routePrefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;v1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;controllers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/modules/http/*.controller.*`&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
   &lt;span class="na"&gt;validation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;classTransformer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;cors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;defaultErrorHandler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createExpressServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;routingControllerOptions&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`This is working in port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now in the console type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;tsc &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; node dist/server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see this: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c2_mzZGR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mwk578vpxtici0382ehz.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c2_mzZGR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mwk578vpxtici0382ehz.jpeg" alt="Application running on port" width="294" height="49"&gt;&lt;/a&gt;&lt;br&gt;
Note that we haven't configured &lt;code&gt;nodemoon&lt;/code&gt; in this project, so as we change the server, you'll need to rerun this command&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#socketio-in-node"&gt;
  &lt;/a&gt;
  Socket.io in Node
&lt;/h2&gt;

&lt;p&gt;So far nothing new. You've probably created lots of Node projects similar to this. Now here's where the fun begins. In order to have access to our &lt;code&gt;Socket Server Instance&lt;/code&gt; in different parts of our application we will implement the &lt;em&gt;Singleton Design Pattern&lt;/em&gt;. Within the &lt;strong&gt;websocket&lt;/strong&gt; folder create a file called &lt;code&gt;websocket.ts&lt;/code&gt;. This will be its initial content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Server&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;socket.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;WEBSOCKET_CORS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Websocket&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

   &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Websocket&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;httpServer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;httpServer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="na"&gt;cors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;WEBSOCKET_CORS&lt;/span&gt;
       &lt;span class="p"&gt;});&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;httpServer&lt;/span&gt;&lt;span class="p"&gt;?):&lt;/span&gt; &lt;span class="nx"&gt;Websocket&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

       &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;Websocket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="nx"&gt;Websocket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;io&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Websocket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;httpServer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;

       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Websocket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Websocket&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First we are importing the Server object from socket.io. Our class will inherit from it. Let’s take a look at the &lt;code&gt;getInstance&lt;/code&gt; Method. It receives an optional parameter called &lt;code&gt;httpServer&lt;/code&gt; and returns a &lt;code&gt;Websocket&lt;/code&gt; instance. It checks if the private static attribute &lt;code&gt;io&lt;/code&gt; is initialized. If not, it calls its own constructor and always returns a running instance of The &lt;code&gt;Websocket&lt;/code&gt; implementation. &lt;/p&gt;

&lt;p&gt;Let’s get back to our &lt;code&gt;server.ts&lt;/code&gt; file now. To use the socket implementation we need to import it first:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Websocket&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./modules/websocket/websocket&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now in order to correctly implement this we have to change the way that our http server is created. That is because the &lt;code&gt;Server&lt;/code&gt; object, which our &lt;code&gt;Websocket&lt;/code&gt; class inherits from, expects an instance of NodeJS’s default http. Therefore in the beginning of the server.ts file we must add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createServer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just after the creation of the constant &lt;code&gt;app&lt;/code&gt; we must add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;httpServer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createServer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;io&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Websocket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;httpServer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Last but not least, change the &lt;code&gt;app.listen&lt;/code&gt; part to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;httpServer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`This is working in port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to separate the responsibilities of Sockets and Server, we must create a default pattern that each Socket class must implement. So add a file called &lt;code&gt;mySocketInterface.ts&lt;/code&gt; to the &lt;strong&gt;websocket&lt;/strong&gt; folder and add this to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Socket&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;socket.io&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;MySocketInterface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

   &lt;span class="nx"&gt;handleConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Socket&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nx"&gt;middlewareImplementation&lt;/span&gt;&lt;span class="p"&gt;?(&lt;/span&gt;&lt;span class="nx"&gt;soccket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MySocketInterface&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is important because every socket-based class that we create from now on will implement this interface which will guarantee that we have exactly the methods that we need.&lt;/p&gt;

&lt;p&gt;Without further ado we can finally create our &lt;code&gt;orders.socket.ts&lt;/code&gt; file within the &lt;strong&gt;websocket&lt;/strong&gt; folder. This file will be responsible for handling every socket connection regarding Orders. You may create other files in the future for different parts of your application. This will be its initial content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Socket&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;socket.io&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;MySocketInterface&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./mySocketInterface&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;OrdersSocket&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;MySocketInterface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

   &lt;span class="nx"&gt;handleConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ping&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hi! I am a live socket connection&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="nx"&gt;middlewareImplementation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Socket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="c1"&gt;//Implement your middleware for orders here&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;OrdersSocket&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since the &lt;code&gt;OrdersSocket&lt;/code&gt; class implements &lt;code&gt;MySocketInterface&lt;/code&gt; interface it is obligated to contain the &lt;code&gt;handleConnection&lt;/code&gt; method. The &lt;code&gt;middlewareImplementation&lt;/code&gt; method is optional and you can leave it out if you want.&lt;/p&gt;

&lt;p&gt;Let’s get back to the &lt;code&gt;websocket.ts&lt;/code&gt; file. We’ll now create a new method to initialize and handle each socket implementation that we have. This is what it will look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;initializeHandlers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;socketHandlers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;socketHandlers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Websocket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Socket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="p"&gt;});&lt;/span&gt;

           &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;middlewareImplementation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="k"&gt;namespace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;middlewareImplementation&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="p"&gt;}&lt;/span&gt;
       &lt;span class="p"&gt;});&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;don't forget to change the import statement to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Socket&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;socket.io&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function is supposed to receive an array which will contain elements with information about each socket path and handler.&lt;/p&gt;

&lt;p&gt;Now let’s get back to our &lt;code&gt;server.ts&lt;/code&gt; file and enhance it. Import the &lt;code&gt;OrderSocket&lt;/code&gt; class and just after the creation of the constant &lt;code&gt;io&lt;/code&gt; add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initializeHandlers&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/orders&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;OrdersSocket&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great! To test all of this I've created a really simple html file which if you open in your browser you should see a message on screen if everything is right. You can download it &lt;a href="https://github.com/nickFelix/websocket-typescript/blob/main/resources/index.test.html"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#socketio-in-the-browser"&gt;
  &lt;/a&gt;
  Socket.io in the browser
&lt;/h2&gt;

&lt;p&gt;Let's get started on the table and Http part no. We'll create a simple page to display information about the orders. I'm using bootstrap to make it slightly easier in terms of style, but feel free to use any framework of your choice.&lt;/p&gt;

&lt;p&gt;You can download the index.html file &lt;a href="https://github.com/nickFelix/websocket-typescript/blob/main/resources/index.html"&gt;here&lt;/a&gt;. We will only focus on the javascript part. The first thing we have to do once our page is loaded is to check for socket connection and once it is established emit an event requesting the initial orders listing, so create a &lt;code&gt;index.js&lt;/code&gt; file and paste this as initial content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:3000/orders&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;connect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;request_orders&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;orders_updated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;populateTable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;orders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;disconnect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ops, something went wrong&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;populateTable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#orders-table tbody&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertAdjacentHTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;afterend&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createTableRow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createTableRow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;tRow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;tr&amp;gt;
            &amp;lt;th scope="row"&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/th&amp;gt;
            &amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;tRow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll now get back to Node to create the endpoint in which we'll receive new orders. It is a good practice to set your business rules in a service file. And that's what we'll do. Create a &lt;strong&gt;libs&lt;/strong&gt; folder and a &lt;code&gt;orders.service.ts&lt;/code&gt; file in it:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GzTmtFk---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/komwur3mwj6curp7al0s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GzTmtFk---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/komwur3mwj6curp7al0s.png" alt="lib folder" width="512" height="361"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will be the file content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Websocket&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../modules/websocket/websocket&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;OrdersService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;insertOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//save in your database&lt;/span&gt;

        &lt;span class="c1"&gt;//send the update to the browser&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateSockets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;updateSockets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;io&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Websocket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;orders&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;orders_updated&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;OrdersService&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is quite simple, but we're getting an instance of the Websocket class and emitting an event which our frontend file will listen and then update our table.&lt;/p&gt;

&lt;p&gt;Now create a file &lt;code&gt;orders.controller.ts&lt;/code&gt; within the &lt;strong&gt;http&lt;/strong&gt; folder. This will be its content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;JsonController&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Body&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;routing-controllers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;OrdersService&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../libs/orders.service&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;JsonController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/orders&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;transformResponse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;OrdersController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

   &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="nx"&gt;insertOrder&lt;/span&gt;&lt;span class="p"&gt;(@&lt;/span&gt;&lt;span class="nd"&gt;Body&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;orderService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;OrdersService&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
       &lt;span class="nx"&gt;orderService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insertOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="na"&gt;status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="na"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
       &lt;span class="p"&gt;};&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;OrdersController&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the &lt;code&gt;routing-controllers&lt;/code&gt; lib is helping us set a path to the order route for our web server and we're simpl calling the &lt;code&gt;orders.service&lt;/code&gt; file that we just created.&lt;/p&gt;

&lt;p&gt;Ok so go ahead to postman and send a POST request to &lt;code&gt;http://localhost:3000/v1/orders/&lt;/code&gt; with this content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2021-11-05"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"total"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"$13.00"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"status"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Pending"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget to rerun the command to compile typescript in Node and check the table. It should be updating as the requests are sent. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2_HiXsZi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwehge4tw9o74ql5u8vw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2_HiXsZi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwehge4tw9o74ql5u8vw.png" alt="orders table" width="512" height="119"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thats-all-folks"&gt;
  &lt;/a&gt;
  That's all folks
&lt;/h2&gt;

&lt;p&gt;This is just a sketch and one of the many ways to build a Socket.io based application. Feel free to leave a comment on possible better solutions =] &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.typescriptlang.org/"&gt;https://www.typescriptlang.org/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://socket.io/docs/v4/"&gt;https://socket.io/docs/v4/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://socket.io/docs/v4/namespaces/"&gt;https://socket.io/docs/v4/namespaces/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://socket.io/docs/v4/middlewares/"&gt;https://socket.io/docs/v4/middlewares/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.typescriptlang.org/tsconfig"&gt;https://www.typescriptlang.org/tsconfig&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/rajat19/create-a-new-node-js-project-in-typescript-nao"&gt;https://dev.to/rajat19/create-a-new-node-js-project-in-typescript-nao&lt;/a&gt;&lt;br&gt;
&lt;a href="https://developer.mozilla.org/pt-BR/docs/Web/API/Element/insertAdjacentHTML"&gt;https://developer.mozilla.org/pt-BR/docs/Web/API/Element/insertAdjacentHTML&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/typestack/routing-controllers"&gt;https://github.com/typestack/routing-controllers&lt;/a&gt;&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>node</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Component-First State Management for Angular Standalone Components</title>
      <author>Colum Ferry</author>
      <pubDate>Sun, 16 Jan 2022 13:42:57 +0000</pubDate>
      <link>https://dev.to/angular/component-first-state-management-for-angular-standalone-components-3l1a</link>
      <guid>https://dev.to/angular/component-first-state-management-for-angular-standalone-components-3l1a</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In 2021, &lt;a href="https://angular.io"&gt;Angular&lt;/a&gt; announced an RFC (Request For Comments) for &lt;a href="https://github.com/angular/angular/discussions/43784"&gt;Standalone Components&lt;/a&gt;. Optional &lt;code&gt;NgModules&lt;/code&gt; have been a frequent ask from the framework's community since their introduction in Angular 2-rc.5. Standalone Components (and Directives and Pipes) are Angular's answer to this request. It paves the way for our Angular apps to be built purely with Components.&lt;/p&gt;

&lt;p&gt;However, over the years we have built architectural patterns for Angular taking into account that &lt;code&gt;NgModules&lt;/code&gt; exist and are the driving force of current Angular apps. With &lt;code&gt;NgModules&lt;/code&gt; becoming optional, we need to think about new patterns that can help us to build the same resiliant and scalable apps, but using a simpler mental model of our apps.&lt;/p&gt;

&lt;p&gt;This is where Component-First comes in to play. It is a collection of patterns for designing Angular apps, once we have Standalone Components, that emphasises that Components, as the main source of user interaction, are the source of truth for our apps.&lt;/p&gt;

&lt;p&gt;We should be able to link all the components in our app together and know exactly how our app works.&lt;br&gt;
There’ll be no magic happening off in some obscure module somewhere.&lt;/p&gt;

&lt;p&gt;To achieve this, components need to manage their own routing and state.&lt;/p&gt;

&lt;p&gt;In this article, we'll explore an approach to State Management that allows components to control their state and be their own source of truth.&lt;/p&gt;



&lt;p&gt;If you're interested in seeing how Routing changes with Standalone Components, read the article I wrote on the matter below&lt;br&gt;&lt;br&gt;
&lt;a href="https://colum-ferry.medium.com/component-first-architecture-with-angular-and-standalone-components-f9fc6a6cbd11"&gt;Component-First Architecture with Angular and Standalone Components&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#why-do-we-need-a-different-approach"&gt;
  &lt;/a&gt;
  Why do we need a different approach?
&lt;/h2&gt;

&lt;p&gt;In the current state of Angular, the framework does not ship with a built-in solution to state management. It &lt;em&gt;does&lt;/em&gt; provide the building blocks, but it does not take an opinionated stance on how to manage the state in your app. The Angular community has stepped in to fill that gap in the ecosystem with the creation of packages such as&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ngrx.io"&gt;NgRx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ngxs.io/"&gt;NgXs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;... Others that I have not listed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, the ones I have listed, arguably the most popular in the ecosystem, rely on &lt;code&gt;NgModules&lt;/code&gt; to instantiate the State Management Solution.&lt;/p&gt;

&lt;p&gt;If we want to move to a truly &lt;code&gt;NgModule&lt;/code&gt;-less developer experience, we need to transition away from any solution that relies on &lt;code&gt;NgModule&lt;/code&gt;, otherwise we will always be coupling our components to &lt;code&gt;NgModules&lt;/code&gt;. This coupling will continue to be more and more difficult to remove them over time. It also complicates the modelling of our system. Our state will be created and handled in a separate location from our components. This increased obscurity in how our state gets managed makes it more difficult for us to evaluate our components and how they function.&lt;/p&gt;

&lt;p&gt;NgRx has already taken steps in the direction that I feel is perfect for a Standalone Components world. They created a package called &lt;a href="https://ngrx.io/guide/component-store"&gt;Component Store&lt;/a&gt; which allows Components to manage their own state. It works and it is a great solution! If you've used it before and you're comfortable with RxJS, use it!&lt;/p&gt;

&lt;p&gt;However, I have created a package, &lt;code&gt;@component-first/redux&lt;/code&gt;, that implements the Redux pattern in a local component store that does not use RxJS that we can also use to achieve the same effect.&lt;/p&gt;

&lt;p&gt;In the rest of this article, I'll illustrate how we can use this package to manage the state within our apps for Standalone Component.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-and-using-a-store-for-standalone-components"&gt;
  &lt;/a&gt;
  Creating and using a Store for Standalone Components
&lt;/h2&gt;

&lt;p&gt;Let's take the following component as an example. It will be a basic ToDo List component that manages its own list of todos and allow actions such as add and delete.&lt;/p&gt;

&lt;p&gt;Our barebones component, without a store, should look similar to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;standalone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;todo-list&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;input #newTodo type="text" /&amp;gt;&amp;lt;button
      (click)="addTodo(newTodo.value)"
    &amp;gt;
      Add
    &amp;lt;/button&amp;gt;
    &amp;lt;ul&amp;gt;
      &amp;lt;li *ngFor="let todo of todos"&amp;gt;
        {{ todo.name }} &amp;lt;button (click)="deleteTodo(todo.id)"&amp;gt;Delete&amp;lt;/button&amp;gt;
      &amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;CommonModule&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;changeDetection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ChangeDetectionStrategy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OnPush&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TodoListComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
  &lt;span class="nx"&gt;incrementId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Example Todo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;addTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;incrementId&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;deleteTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's a pretty straightforward component that is internally managing it's own state. Creating a Store for it may be overkill, but it'll be a good example to showcase the component store.&lt;/p&gt;

&lt;p&gt;First, we need to create the store. We create a file beside our component called &lt;code&gt;todo-list.component.store.ts&lt;/code&gt; and it should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@component-first/redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ChangeDetectorRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Injectable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// We need to define the shape of our state&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;TodoListState&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;incrementId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// We only want to inject our Store in our component, so do not provide in root&lt;/span&gt;
&lt;span class="c1"&gt;// We also need to extend the Store class from @component-first/redux&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TodoListComponentStore&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TodoListState&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// We define actions and store them on the class so that they can be reused&lt;/span&gt;
  &lt;span class="nx"&gt;actions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;addTodo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;addTodo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;deleteTodo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;deleteTodo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// We also define selectors that select slices of our state&lt;/span&gt;
  &lt;span class="c1"&gt;// That can be used by our components&lt;/span&gt;
  &lt;span class="nx"&gt;selectors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// We need a function that our Component can call on instantiation that&lt;/span&gt;
  &lt;span class="c1"&gt;// will create our store with our intiial state and the change detector ref&lt;/span&gt;
  &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ChangeDetectorRef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Example Todo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;incrementId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// We then define the reducers for our store&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;incrementId&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;incrementId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;incremenet&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}));&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's as simple as that, and now our state management is self contained in a class and file that lives right beside our component. Now, lets modify our component to use our new store:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SelectorResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;LatestPipe&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@component-first/redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;TodoListComponentStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./todo-list.component.store&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;standalone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;todo-list&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;input #newTodo type="text" /&amp;gt;&amp;lt;button
      (click)="addTodo(newTodo.value)"
    &amp;gt;
      Add
    &amp;lt;/button&amp;gt;
    &amp;lt;ul&amp;gt;
      &amp;lt;li *ngFor="let todo of todos | latest"&amp;gt;
        {{ todo.name }} &amp;lt;button (click)="deleteTodo(todo.id)"&amp;gt;Delete&amp;lt;/button&amp;gt;
      &amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;LatestPipe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;CommonModule&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;TodoListComponentStore&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;changeDetection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ChangeDetectionStrategy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OnPush&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TodoListComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SelectorResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ChangeDetectorRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TodoListComponentStore&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;addTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;deleteTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's pretty straightforward to use our new Store and it follows an API we are all somewhat familiar with providing you have used NgRx in the past. We did have to introduce a new pipe, &lt;code&gt;latest&lt;/code&gt;, that will always fetch the latest value from the store on a Change Detection Cycle.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advanced-techniques"&gt;
  &lt;/a&gt;
  Advanced Techniques
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#effects"&gt;
  &lt;/a&gt;
  Effects
&lt;/h3&gt;

&lt;p&gt;The Store also supports Effects. This can be useful in a wide variety of situations, however, lets modify our &lt;code&gt;TodoListComponentStore&lt;/code&gt; to have an effect that will fetch our Todo list from an API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@component-first/redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ChangeDetectorRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Injectable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;TodoListState&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;incrementId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TodoListComponentStore&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;TodoListState&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;actions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;addTodo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;addTodo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;deleteTodo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;deleteTodo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="c1"&gt;// We need a new action to load the todos from an API&lt;/span&gt;
    &lt;span class="na"&gt;loadTodos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;loadTodos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;selectors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ChangeDetectorRef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
      &lt;span class="na"&gt;incrementId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;incrementId&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;incrementId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;incremenet&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}));&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}));&lt;/span&gt;

    &lt;span class="c1"&gt;// We create an effect that will occur when the LoadTodos action is dispatched&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadTodos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// It will make an API call&lt;/span&gt;
      &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;api/todos&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="c1"&gt;// Then it will dispatch our existing AddTodo action to add the todos&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have added our effect, we can take advantage of it in our component by disptaching an action:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SelectorResult&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;LatestPipe&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@component-first/redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;TodoListComponentStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./todo-list.component.store&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;standalone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;todo-list&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&amp;lt;input #newTodo type="text" /&amp;gt;&amp;lt;button
      (click)="addTodo(newTodo.value)"
    &amp;gt;
      Add
    &amp;lt;/button&amp;gt;
    &amp;lt;ul&amp;gt;
      &amp;lt;li *ngFor="let todo of todos | latest"&amp;gt;
        {{ todo.name }} &amp;lt;button (click)="deleteTodo(todo.id)"&amp;gt;Delete&amp;lt;/button&amp;gt;
      &amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;LatestPipe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;CommonModule&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;TodoListComponentStore&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;changeDetection&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ChangeDetectionStrategy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OnPush&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TodoListComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SelectorResult&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ChangeDetectorRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TodoListComponentStore&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// OnInit, load the todos!&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loadTodos&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;addTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;deleteTodo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispatchAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteTodo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#global-shared-state"&gt;
  &lt;/a&gt;
  Global / Shared State
&lt;/h3&gt;

&lt;p&gt;Now that we don't have &lt;code&gt;NgModules&lt;/code&gt;, how can we share a store between components?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: I wouldn't recommend it, but it does have it's uses, such as a global notification system.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In Component-First, because all our components are children or siblings of each other, we can take advantage of Angular's Injection Tree and simply inject a parent's Store into our child component.&lt;/p&gt;

&lt;p&gt;Let's say we had a component, &lt;code&gt;TodoComponent&lt;/code&gt;, that was a child to &lt;code&gt;TodoListComponent&lt;/code&gt;, then we could do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TodoComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TodoListComponentStore&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'd advise caution with this approach as it forces a coupling between &lt;code&gt;TodoListComponent&lt;/code&gt; and &lt;code&gt;TodoComponent&lt;/code&gt; where &lt;code&gt;TodoComponent&lt;/code&gt; must &lt;em&gt;always&lt;/em&gt; be a child of &lt;code&gt;TodoListComponent&lt;/code&gt;. In some scenarios, this makes logical sense, but it's something to be aware of!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#play-with-the-package"&gt;
  &lt;/a&gt;
  Play with the package
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;@component-first/redux&lt;/code&gt; package is available on npm and you can use it to experiement with. Just note that the &lt;code&gt;LatestPipe&lt;/code&gt; is currently not Standalone in the package &lt;em&gt;(I do not want to ship the Standalone Shim provided by Angular)&lt;/em&gt;, so you will have to add the &lt;code&gt;LatestPipe&lt;/code&gt; to an &lt;code&gt;NgModule&lt;/code&gt;'s &lt;code&gt;declarations&lt;/code&gt;. When Standalone Components arrive, I will make the pipe Standalone!&lt;/p&gt;




&lt;p&gt;I hope this article helps to get you excited for Standalone Components and helps you start to think about some approaches we can take to architecture when they do arrive!&lt;/p&gt;

&lt;p&gt;If you have any questions, feel free to ask below or reach out to me on Twitter: &lt;a href="https://twitter.com/FerryColum"&gt;@FerryColum&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Light Out game | Day 12</title>
      <author>Web.Developer.io</author>
      <pubDate>Sun, 16 Jan 2022 13:20:04 +0000</pubDate>
      <link>https://dev.to/developerioweb/light-out-game-day-12-2m6h</link>
      <guid>https://dev.to/developerioweb/light-out-game-day-12-2m6h</guid>
      <description>&lt;p&gt;Today I have made a Light Out Game , Not From the Scratch 😅&lt;br&gt;
It was an Exercise of the React Course BY Colt Steele.&lt;br&gt;
The Game Look Like This 👇&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4m_gOw3c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cuol3xonjzytximpn5k6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4m_gOw3c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cuol3xonjzytximpn5k6.png" alt="Light out Game" width="823" height="710"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#working"&gt;
  &lt;/a&gt;
  Working
&lt;/h3&gt;

&lt;p&gt;When you clicks on any cell it will toggles his neighbouring cells. When all the Cells are off you won the Game.&lt;/p&gt;

&lt;p&gt;Your Task is to First Make a Board which have cells in it and you can use the Table to show the Cells in the Board(as a table Data.)&lt;/p&gt;

&lt;p&gt;Once you are done with that You have to do that every time You Refreshes the site the cell will randomly be on/off.&lt;/p&gt;

&lt;p&gt;After that you have to apply that whenever u click on a particular cell it will also toggles it's neighbouring cells.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#component-design"&gt;
  &lt;/a&gt;
  Component Design
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;App&lt;/strong&gt;&lt;br&gt;
As often, this is a very simple component. It just renders the Board component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Board&lt;/strong&gt;&lt;br&gt;
The most sophisticated component. It will hold the state that represents the in-memory grid of true/false for lights-on/off. Since the state for the board lives here, this is also were the setState() calls will need to go — and therefore, all the functions that call setState().&lt;br&gt;
&lt;strong&gt;Cell&lt;/strong&gt;&lt;br&gt;
A simpler component. This will simply render a &lt;code&gt;div&lt;/code&gt;, where the CSS classes will indicate whether this cell is lit or unlit. This is what the user clicks on — but it will need to call a function it receives from the Board, since that will need to update the state.&lt;/p&gt;

&lt;p&gt;When the game is won, the board should not be shown, but a simple “You Won” message should show in its place.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Happy Coding ☺️&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Difference between bootstrap and twitter bootstrap</title>
      <author>Kodelogs</author>
      <pubDate>Sun, 16 Jan 2022 13:11:56 +0000</pubDate>
      <link>https://dev.to/kodelogs/difference-between-bootstrap-and-twitter-bootstrap-2mj2</link>
      <guid>https://dev.to/kodelogs/difference-between-bootstrap-and-twitter-bootstrap-2mj2</guid>
      <description>&lt;p&gt;Bootstrap is a CSS framework used in front-end applications - that is, in the user interface screen - to develop applications that adapt to any device.&lt;/p&gt;

&lt;p&gt;In WordPress, for example, it can be installed as a theme or used to develop plugins or even within them to stylize their functions. The framework's purpose is to offer users a more pleasant experience when browsing a site.&lt;/p&gt;

&lt;p&gt;For this reason, it has several resources to configure the styles of the page elements and efficiently and facilitate the construction of pages that, at the same time, are adapted for the web and mobile devices.&lt;/p&gt;

&lt;p&gt;The above shows why it is essential to know about a potential structure of this type&lt;/p&gt;

&lt;p&gt;What is Bootstrap?&lt;br&gt;
Bootstrap is a CSS framework developed by Twitter in 2010 to standardize business tools.&lt;/p&gt;

&lt;p&gt;It was initially called Twitter Blueprint, and soon after, in 2011, it went open source, and its name changed to Bootstrap. It is now updated several times and is already in version 4.4.&lt;/p&gt;

&lt;p&gt;The framework combines CSS and JavaScript to style the elements of an HTML page. This does more than change the colour of buttons and links.&lt;/p&gt;

&lt;p&gt;It is a tool that offers interactivity on the page. It, therefore, provides several components that facilitate communication with the user, such as navigation menus, page controls, progress bars, etc.&lt;br&gt;
In addition to all the functionalities offered by the framework, its main objective is to create responsive websites for mobile devices.&lt;/p&gt;

&lt;p&gt;This means that the pages are designed to work on desktops, tablets and smartphones, in a simple and organized way.&lt;/p&gt;

&lt;p&gt;Is There Any Difference Between Bootstrap and Twitter Bootstrap?&lt;br&gt;
No, there is no difference between them. They are the same thing. Twitter Bootstrap is called Bootstrap in short form.&lt;/p&gt;

&lt;p&gt;Hope you liked the post, kindly share it with your programmer friends.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Defensive &amp; offensive programming</title>
      <author>Spyros Argalias</author>
      <pubDate>Sun, 16 Jan 2022 13:09:42 +0000</pubDate>
      <link>https://dev.to/sargalias/defensive-offensive-programming-38gh</link>
      <guid>https://dev.to/sargalias/defensive-offensive-programming-38gh</guid>
      <description>&lt;p&gt;Defensive programming is a term that many programmers have heard of. It's related to &lt;a href="https://programmingduck.com/articles/errors"&gt;error handling&lt;/a&gt; and having correct programs. For some programs, defensive programming is essential. For others, it may be useful to use here and there. Along with that, there's also offensive programming.&lt;/p&gt;

&lt;p&gt;In this article, we'll start by examining "normal programming". We'll examine it first because some people mistake it for defensive programming. However, this is something that you should do regardless of whether you do defensive programming or not.&lt;/p&gt;

&lt;p&gt;Then, we'll examine defensive programming, followed by offensive programming.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/klY408xWUTw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#normal-programming"&gt;
  &lt;/a&gt;
  Normal programming
&lt;/h2&gt;

&lt;p&gt;Normal programming means to have all the checks that are necessary in your code. It also means to always handle certain types of errors.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#necessary-checks-in-code"&gt;
  &lt;/a&gt;
  Necessary checks in code
&lt;/h3&gt;

&lt;p&gt;Some code needs a lot of conditionals. It can feel like you're being "overly defensive" with the number of conditionals you have.&lt;/p&gt;

&lt;p&gt;One example of this is checking for &lt;code&gt;null&lt;/code&gt; (the billion-dollar mistake). &lt;a href="https://programmingduck.com/articles/nulls"&gt;Nulls and null checks&lt;/a&gt; are very tricky. Many codebases need &lt;code&gt;if&lt;/code&gt; statements for them all over the place.&lt;/p&gt;

&lt;p&gt;Another example is validating user input. You need to have many checks to ensure that user input is valid. Your program needs to handle it very harshly. Otherwise, you'll have security vulnerabilities.&lt;/p&gt;

&lt;p&gt;But that's not defensive programming.&lt;/p&gt;

&lt;p&gt;Rather, something like forgetting a single null check is a bug. They're not unnecessary checks that you do "just in case". They're necessary checks. The value will be &lt;code&gt;null&lt;/code&gt; sometimes and that's normal. If you forget a single one, you have a bug. No questions asked.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#necessary-error-handling"&gt;
  &lt;/a&gt;
  Necessary error handling
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://programmingduck.com/articles/errors"&gt;Error handling&lt;/a&gt; is very important in programs. You always need to consider &lt;a href="https://programmingduck.com/articles/error-responses"&gt;how your program should respond to errors&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This also depends on the kind of error.&lt;/p&gt;

&lt;p&gt;Generally, most programs handle "expected errors" which are out of their control. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;failing to send a network request because the network connection dropped.&lt;/li&gt;
&lt;li&gt;failing to find a file because a user deleted it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It would be very bad for the user experience for a program to crash on these errors. Also, it's relatively easy to handle them.&lt;/p&gt;

&lt;p&gt;As a result, most programs handle these, even if they're not doing defensive programming. So, again, this is considered "normal programming", not defensive programming.&lt;/p&gt;

&lt;p&gt;A different kind of error is a bug. In most programs, these errors are considered "unrecoverable". The rule-of-thumb for most programs is to crash on these errors and to not handle them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rEvXbHW6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uq2i20uhxcf0oto3sgnz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rEvXbHW6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uq2i20uhxcf0oto3sgnz.jpg" alt="" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defensive-programming"&gt;
  &lt;/a&gt;
  Defensive programming
&lt;/h2&gt;

&lt;p&gt;In my interpretation, defensive programming is about fault tolerance. It means going above and beyond to ensure that your program continues working. It's used for certain programs where you need maximum:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;availability&lt;/li&gt;
&lt;li&gt;safety&lt;/li&gt;
&lt;li&gt;security&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example-use-case-of-defensive-programming"&gt;
  &lt;/a&gt;
  Example use case of defensive programming
&lt;/h3&gt;

&lt;p&gt;One example of defensive programming, as &lt;a href="https://coder.today/tech/2017-11-09_nasa-coding-standards-defensive-programming-and-reliability-a-postmortem-static-analysis./"&gt;Adrian Georgescu writes on his post on NASA coding standards&lt;/a&gt;, is for code used in space exploration missions.&lt;/p&gt;

&lt;p&gt;That code is developed once and sent to space. If it goes wrong, that's billions of dollars worth of work lost.&lt;/p&gt;

&lt;p&gt;For that kind of code, you need to take extreme measures. The code must work correctly, without crashing, no matter what.&lt;/p&gt;

&lt;p&gt;This is very different to your average program. With your average program, bugs aren't generally a big problem. Your program may still be usable even if it's buggy. In the worst case, a problem can be fixed manually by calling customer service. If the program becomes unusable, you can crash it and restart it. If it's a back end program, there are probably multiple servers running it. If it's a client, the user can restart the program themselves. In a really bad case, you can update the server code. You can even go to a physical server manually and restart it.&lt;/p&gt;

&lt;p&gt;But, with certain critical software, you can't do that. The software has to always work properly.&lt;/p&gt;

&lt;p&gt;The problem is that people aren't perfect. We create bugs. Not to mention that other errors may occur that are outside of the program's control (such as operating system errors). This means that the program may fail.&lt;/p&gt;

&lt;p&gt;But, that's not an option with some software.&lt;/p&gt;

&lt;p&gt;As a result, you need to do everything in your power to prevent failure.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-do-defensive-programming"&gt;
  &lt;/a&gt;
  How to do defensive programming
&lt;/h3&gt;

&lt;p&gt;Defensive programming primarily means doing everything possible to ensure your program is working correctly and will continue to work correctly. This can include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;having very good software development practices.&lt;/li&gt;
&lt;li&gt;having many checks in code to double and triple check that everything is working at all times.&lt;/li&gt;
&lt;li&gt;optionally, having error recovery mechanisms. That way, if something goes wrong, maybe the program can recover.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#good-software-development-practices"&gt;
  &lt;/a&gt;
  Good software development practices
&lt;/h4&gt;

&lt;p&gt;The first step is to make the code as bug-free and as easy to work with as possible.&lt;/p&gt;

&lt;p&gt;That means that you need things such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;very strict QA&lt;/li&gt;
&lt;li&gt;very thorough tests&lt;/li&gt;
&lt;li&gt;very thorough runtime monitoring&lt;/li&gt;
&lt;li&gt;very strict coding and development standards. In fact, you may ban certain patterns or language features altogether, such as recursion.&lt;/li&gt;
&lt;li&gt;good general software quality&lt;/li&gt;
&lt;li&gt;source code that's easy to understand&lt;/li&gt;
&lt;li&gt;software that behaves in a predictable manner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those points are important for all software. However, they're critical for defensive programming. After all, if your source code isn't well tested or easy to understand, it could have bugs. This defeats the point of defensive programming.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#extra-checks"&gt;
  &lt;/a&gt;
  Extra checks
&lt;/h4&gt;

&lt;p&gt;Code with defensive programming tends to have many extra checks. The checks are there to catch bugs. They wouldn't be needed if the code was completely bug-free. Checks that aren't intended to catch bugs fall under "normal programming", not "defensive programming".&lt;/p&gt;

&lt;p&gt;You have conditionals in the code that check whether something, such as some state in the program, is valid. If a check fails, it shows a bug.&lt;/p&gt;

&lt;p&gt;At that point:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if the program is in development, you can crash it and fix the bug. This is the same principle as using assertions, during development, in offensive programming.&lt;/li&gt;
&lt;li&gt;if the program is in production, you can run error recovery (if you've implemented it) so the program can continue working.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The common case is to crash the program and fix the bug. During development, you hope that the combination of tests and extra checks will catch all of the bugs. Then, when the program is in production, it should work as intended.&lt;/p&gt;

&lt;p&gt;Another benefit for these checks is that they catch errors early. The more checks you have that the intermediate state is correct, the sooner you'll catch bugs. That makes debugging easier. It also means that you can start error recovery earlier.&lt;/p&gt;

&lt;p&gt;Finally, you may be able to implement some error recovery. Then, if a check fails, you can run your error recovery code.&lt;/p&gt;

&lt;p&gt;You can have as many or as few checks as you need. You'll have to decide what to check based on risk analysis. Some important checks are probably results involving important calculations and data. Some less important checks are things like checking function arguments or constantly checking state after simple operations.&lt;/p&gt;

&lt;p&gt;Here are some examples of checks you might have:&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#example-with-checking-function-arguments"&gt;
  &lt;/a&gt;
  Example with checking function arguments
&lt;/h5&gt;

&lt;p&gt;You can check whether a function is called with valid arguments. The arguments should have the correct type and range.&lt;/p&gt;

&lt;p&gt;Here's a code example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nonEmptyString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;naturalInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;nonEmptyString&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="c1"&gt;// if it's not a string&lt;/span&gt;
    &lt;span class="nx"&gt;nonEmptyString&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="c1"&gt;// if it's the empty string&lt;/span&gt;
    &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;naturalInteger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="c1"&gt;// if it's not an integer&lt;/span&gt;
    &lt;span class="nx"&gt;naturalInteger&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;// if it's not a natural integer (1 or more)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// crash the program&lt;/span&gt;
    &lt;span class="c1"&gt;// or handle the error here&lt;/span&gt;
    &lt;span class="c1"&gt;// or throw an exception so some code higher up handles the error&lt;/span&gt;
    &lt;span class="c1"&gt;// or do anything else your error recovery implementation requires&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// code for normal function execution&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#example-with-checking-the-results-of-data-calculations"&gt;
  &lt;/a&gt;
  Example with checking the results of data calculations
&lt;/h5&gt;

&lt;p&gt;Another example is checking results involving data.&lt;/p&gt;

&lt;p&gt;Normally, you would only check some data when you first receive it. For example, if a user submits some data, you would check it to make sure it's valid.&lt;/p&gt;

&lt;p&gt;Then, you would work with that data. You might format it or transform it in some way. You would have tests to make sure that these processes work correctly.&lt;/p&gt;

&lt;p&gt;In theory, you shouldn't need to also check the final result. The initial data is valid. The code you process it with works correctly. Therefore, the end result should be correct.&lt;/p&gt;

&lt;p&gt;But, if you're doing defensive programming, you might have checks on the final result too.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#recovering-from-unexpected-errors"&gt;
  &lt;/a&gt;
  Recovering from unexpected errors
&lt;/h4&gt;

&lt;p&gt;The steps mentioned so far try to reduce the number of bugs in your program. However, there might still be bugs. For that reason, you might want to implement error recovery.&lt;/p&gt;

&lt;p&gt;This might require a lot of thinking. It might even need to be part of your feature planning. This would be the case if the program needs to respond to a user while it's in the process of recovery. The user-facing behaviour will probably be determined in collaboration with a product manager, not just by the programmers.&lt;/p&gt;

&lt;p&gt;Also, error recovery might be a large part of the code. As a made-up example, consider a back end that accepts network requests for product orders. A server might error while processing the order. To handle that scenario, you might do things like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;have an initial server record the order information so it's not lost.&lt;/li&gt;
&lt;li&gt;have some recovery mechanism for the faulty server. E.g. some other process may restart it. Or, maybe the server can try to fix its own state internally.&lt;/li&gt;
&lt;li&gt;the order can be given to a different server, or maybe the erroring server can try to process it again after it's fixed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are some more examples of possible recovery mechanisms. If something in the code fails:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;maybe you can try to manually fix or reset the state in the program.&lt;/li&gt;
&lt;li&gt;maybe you can try running the operation again. If the problem is a race condition, it may work next time.&lt;/li&gt;
&lt;li&gt;if it's a subprogram that's erroring, maybe you can restart it. If the problem is invalid state in the subprogram, then restarting it may work.&lt;/li&gt;
&lt;li&gt;maybe you can have a backup program hosted on a server. If the client is producing incorrect results, then maybe it can call on the server to do the calculation instead.&lt;/li&gt;
&lt;li&gt;maybe you can have a backup program with less features than the main program. If the main program is erroring, maybe run the backup program instead which only provides barebones operation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, if a critical part of the program is buggy then maybe you can't do anything about it in runtime. The only solution may be to fix the code.&lt;/p&gt;

&lt;p&gt;You'll also need to have risk analysis. That's where you consider things like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what code could have errors?&lt;/li&gt;
&lt;li&gt;how likely it is that it will have errors?&lt;/li&gt;
&lt;li&gt;what impact would the error have?&lt;/li&gt;
&lt;li&gt;what would it cost to prevent the error from ever happening or to implement recovery mechanisms for that error?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The idea is that recovery will need to be considered as a first class citizen and a requirement during the project.&lt;/p&gt;

&lt;p&gt;Note that these kinds of recovery measures are probably reserved for programs that really need defensive programming. For most normal programs, it's probably enough to simply restart a server or notify the user that something went wrong.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#downsides-of-defensive-programming"&gt;
  &lt;/a&gt;
  Downsides of defensive programming
&lt;/h3&gt;

&lt;p&gt;Defensive programming has significant downsides. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it requires a lot more code. At the very least, you'll have many more conditions and checks than a similar program without defensive programming.&lt;/li&gt;
&lt;li&gt;performance can be worse. That's because the extra checks take time to execute.&lt;/li&gt;
&lt;li&gt;it makes the code harder to work with because there is a lot more code.&lt;/li&gt;
&lt;li&gt;error recovery can take a long time to plan for and implement.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use-defensive-programming"&gt;
  &lt;/a&gt;
  When to use defensive programming
&lt;/h3&gt;

&lt;p&gt;Whether or not you use defensive programming depends on your program.&lt;/p&gt;

&lt;p&gt;As mentioned earlier, some programs need maximum availability, reliability and security. Those types of programs may require a lot of defensive programming.&lt;/p&gt;

&lt;p&gt;For most other programs, you shouldn't need defensive programming. "Normal programming" should be enough. Nonetheless, you're free to use some defensive programming techniques around some key areas of the code. It's up to you to make the decision.&lt;/p&gt;

&lt;p&gt;Regardless of what you do, remember to be pragmatic. Use risk analysis. Consider:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what could go wrong?&lt;/li&gt;
&lt;li&gt;how much chance is there of it going wrong?&lt;/li&gt;
&lt;li&gt;what would the impact be?&lt;/li&gt;
&lt;li&gt;how could you prevent it from going wrong?&lt;/li&gt;
&lt;li&gt;what would it cost to implement prevention or recovery?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then, use the right amount of defensive programming where necessary. Try to avoid overusing defensive programming if it's not necessary.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KnRwNwqj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wk4zyshwxvf2o6kr43sf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KnRwNwqj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wk4zyshwxvf2o6kr43sf.jpg" alt="" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#offensive-programming"&gt;
  &lt;/a&gt;
  Offensive programming
&lt;/h2&gt;

&lt;p&gt;The goal of offensive programming is to catch bugs and crash early. As explained in &lt;a href="https://programmingduck.com/articles/error-responses"&gt;how to respond to errors&lt;/a&gt;, crashing early is helpful.&lt;/p&gt;

&lt;p&gt;It means that you are notified of bugs immediately. Also, the stack trace from the crash is closer to the source of the problem. This helps with debugging.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-do-offensive-programming"&gt;
  &lt;/a&gt;
  How to do offensive programming
&lt;/h3&gt;

&lt;p&gt;To do offensive programming, you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;do normal programming&lt;/li&gt;
&lt;li&gt;don't recover from bugs (avoid defensive programming)&lt;/li&gt;
&lt;li&gt;write code in a way where bugs are obvious and easy to find&lt;/li&gt;
&lt;li&gt;immediately crash the program on bugs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Just like with normal programming, you still need conditionals for things that aren't bugs. For example, you need conditionals for &lt;code&gt;null&lt;/code&gt; checks.&lt;/p&gt;

&lt;p&gt;Similarly, you should probably handle errors which aren't bugs. For example when users provide invalid data, or when you're not able to find a file in the file system. Most of the time, it would be unreasonable to crash on them. In other words, you should probably follow the "normal programming" way of dealing with these.&lt;/p&gt;

&lt;p&gt;Also, you should write code in a way where bugs are easy to find. Here are some techniques for that.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#avoid-fallback-code-and-default-values"&gt;
  &lt;/a&gt;
  Avoid fallback code and default values
&lt;/h4&gt;

&lt;p&gt;Things like default state, default arguments and fallback code can hide bugs.&lt;/p&gt;

&lt;p&gt;For example, you might call a function with incorrect arguments. You might have accidentally used &lt;code&gt;null&lt;/code&gt; instead of a string for an argument. That's a bug. However, due to default arguments, the argument will be a string anyway. The bug won't be caught and the program may do the wrong thing as a result.&lt;/p&gt;

&lt;p&gt;A similar thing applies to fallback code. One example is inheritance and subclassing. You may have forgotten to implement a method in a subclass. Then, you call the method and it executes the parent's method. That's unintended behaviour, which is a bug.&lt;/p&gt;

&lt;p&gt;To prevent this, avoid using things like default state, default values and fallback implementations.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#avoid-checks-on-code-that-will-crash-on-errors"&gt;
  &lt;/a&gt;
  Avoid checks on code that will crash on errors
&lt;/h4&gt;

&lt;p&gt;Sometimes, buggy code will crash on its own. You don't have to do anything extra. Leave the code as it is and let it crash.&lt;/p&gt;

&lt;p&gt;For example, consider the code below. &lt;code&gt;array&lt;/code&gt; should never be &lt;code&gt;null&lt;/code&gt;. If it's &lt;code&gt;null&lt;/code&gt;, that's a bug.&lt;/p&gt;

&lt;p&gt;If you have a defensive check around it, the code won't crash:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// code doesn't crash if array is null&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But if you don't have a defensive check, the code will crash.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// code crashes if array is null&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You want the code to crash as early as possible. So, in this case, just leave it as it is without a defensive check.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#have-conditionals-or-assertions-to-check-for-errors"&gt;
  &lt;/a&gt;
  Have conditionals or assertions to check for errors
&lt;/h4&gt;

&lt;p&gt;Contrary to the point above, some bugs won't cause the program to crash.&lt;/p&gt;

&lt;p&gt;For example, you might have some incorrect state in your program. Your program may not crash from that.&lt;/p&gt;

&lt;p&gt;As another example, some code may execute that shouldn't execute under normal circumstances.&lt;/p&gt;

&lt;p&gt;In these cases, you can use manual checks. Then, if you find something wrong, you can manually crash the program.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;// do something&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;// do something&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;// this code should never execute, so crash the program if it does&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Default case should never execute.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's another example with checking state:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getCurrentPlayerHealth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;health&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;health&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;health&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;health&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// this condition should never evaluate to true, so crash the program if it does&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Player health should be between 0 and 100.`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// continue normal function execution&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More traditionally, these kinds of "bug checks" use assertions instead of conditionals.&lt;/p&gt;

&lt;p&gt;Assertions are bug-finding tools. If they fail, they signify a bug. Conditionals are control-flow tools. If a conditional "fails", it doesn't signify a bug. It means that a different block of code should execute instead.&lt;/p&gt;

&lt;p&gt;So, instead of using conditionals, you can use assertions. For details on how to do that, please see the documentation for your programming language.&lt;/p&gt;

&lt;p&gt;Here's a code example in JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;health&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;health&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// logs a stack trace if condition is false, along with the player object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In some programming languages, assertions crash the program. However, in others, they don't crash it. They may only print an error message to the console or something. Both are usable. However, offensive programming recommends hard crashing when possible.&lt;/p&gt;

&lt;p&gt;Also, some programming languages allow you to turn off assertions in production for better performance.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#downsides-of-offensive-programming"&gt;
  &lt;/a&gt;
  Downsides of offensive programming
&lt;/h3&gt;

&lt;p&gt;Similar to defensive programming, offensive programming has downsides.&lt;/p&gt;

&lt;p&gt;One downside is having to avoid certain kinds of code like default arguments. Default arguments have valid use cases. They provide "reasonable defaults". They can make some code much easier to work with.&lt;/p&gt;

&lt;p&gt;Another downside is having to crash the program. As explained in &lt;a href="https://programmingduck.com/articles/error-responses"&gt;how to respond to errors&lt;/a&gt;, crashing on bugs is usually good. However, it might be something that you're not prepared to do in your application.&lt;/p&gt;

&lt;p&gt;Another downside is performance. Having assert statements throughout your code can significantly reduce performance.&lt;/p&gt;

&lt;p&gt;As a result, many programming languages don't crash when assertions fail. Also, they have the option of removing assertions from production code. With this option, you lose the benefits of offensive programming in production. You only gain the benefits during development. However, that alone can be very useful.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use-offensive-programming"&gt;
  &lt;/a&gt;
  When to use offensive programming
&lt;/h3&gt;

&lt;p&gt;Offensive programming helps you catch bugs. That's a significant win.&lt;/p&gt;

&lt;p&gt;For this reason, it's good to use it during development. Generally, you'll put assert statements here and there to ensure that certain things are correct.&lt;/p&gt;

&lt;p&gt;As for production, it depends. Consider the pros and cons of offensive programming and make your decision.&lt;/p&gt;

&lt;p&gt;It's alright to only use offensive programming in development. After all, catching more bugs during development is better than nothing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rhOO9MCm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rs3nn0vrdlty13qy3l4t.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rhOO9MCm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rs3nn0vrdlty13qy3l4t.jpg" alt="" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#be-pragmatic"&gt;
  &lt;/a&gt;
  Be pragmatic
&lt;/h2&gt;

&lt;p&gt;When choosing your approach to handling errors, you need to be pragmatic.&lt;/p&gt;

&lt;p&gt;"Normal programming" is the minimum that you need to do for most programs.&lt;/p&gt;

&lt;p&gt;For some programs, you might use defensive programming. In particular, for programs that need high:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;availability&lt;/li&gt;
&lt;li&gt;security&lt;/li&gt;
&lt;li&gt;reliability&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But also understand the downsides. Primarily, the downsides are worse performance and longer development time.&lt;/p&gt;

&lt;p&gt;Offensive programming helps you catch bugs. This is useful during development (and even production).&lt;/p&gt;

&lt;p&gt;You can mix and match the approaches based on what you need. You can even use different methodologies in different areas of the code. It's up to you to decide.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-notes"&gt;
  &lt;/a&gt;
  Final notes
&lt;/h2&gt;

&lt;p&gt;So that's it for this article. I hope that you found it useful.&lt;/p&gt;

&lt;p&gt;As always, if any points were missed, or if you disagree with anything, or have any comments or feedback then please leave a comment below.&lt;/p&gt;

&lt;p&gt;For the next steps, I recommend looking at the other articles in the &lt;a href="https://programmingduck.com/articles/errors"&gt;error handling series&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Alright, thanks and see you next time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;Image credits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Turtle in sea - Photo by Tanguy Sauvin from Pexels&lt;/li&gt;
&lt;li&gt;Turtle in shell - Photo by Hogr Othman on Unsplash&lt;/li&gt;
&lt;li&gt;Tiger - Photo by Samuele Giglio on Unsplash&lt;/li&gt;
&lt;li&gt;Squirrel - Photo by Pixabay from Pexels&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>coding</category>
    </item>
    <item>
      <title>Image Animation Using HTML CSS &amp; GSAP</title>
      <author>Nikhil Bobade </author>
      <pubDate>Sun, 16 Jan 2022 13:04:53 +0000</pubDate>
      <link>https://dev.to/nikhil27b/image-animation-using-html-css-gsap-1659</link>
      <guid>https://dev.to/nikhil27b/image-animation-using-html-css-gsap-1659</guid>
      <description>&lt;p&gt;Hello Guys,&lt;/p&gt;

&lt;p&gt;Today I Created an Amazing Image Animation using HTML CSS &amp;amp; GSAP Animation. To animate the image I use the &lt;code&gt;GSAP.timeline()&lt;/code&gt; and &lt;code&gt;gsap.from()&lt;/code&gt; method to achieve this effect. If you had multiple images on your website then use for each method like me else use a direct timeline method.&lt;/p&gt;

&lt;p&gt;I hope you like this also comments about your thoughts. also For more content &lt;strong&gt;follow me on Instagram&lt;/strong&gt;  &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you 🙂!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/jOGdgPM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
