<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>5 HTML Tags That Almost Nobody Knows</title>
      <author>Aya Bouchiha</author>
      <pubDate>Wed, 14 Jul 2021 23:21:33 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/5-html-tags-that-almost-nobody-knows-5p5</link>
      <guid>https://dev.to/ayabouchiha/5-html-tags-that-almost-nobody-knows-5p5</guid>
      <description>&lt;p&gt;hello everyone, I'm &lt;a href="https://t.me/AyaBouchyiha"&gt;Aya Bouchiha&lt;/a&gt;, today, I will talk about &lt;strong&gt;5 HTML tags that almost nobody knows&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ltmarkgt"&gt;
  &lt;/a&gt;
  &amp;lt;mark&amp;gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;mark&amp;gt;&lt;/strong&gt; is a tag used to highlight or mark a part of a text. This tag supports all HTML global attributes, the default color is &lt;strong&gt;black&lt;/strong&gt; with a &lt;strong&gt;yellow&lt;/strong&gt; background color.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
            in this paragraph, there is a text
            &lt;span class="c"&gt;&amp;lt;!-- 
                by default =&amp;gt; (
                    color: black;                
                    background-color: yellow;
                )
             --&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;mark&amp;gt;&lt;/span&gt;highlighted&lt;span class="nt"&gt;&amp;lt;/mark&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nNAMpK00--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kt0yrfd60vvx4f3lam6m.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nNAMpK00--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kt0yrfd60vvx4f3lam6m.PNG" alt="mark HTML tag Aya Bouchiha"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can change the yellow color like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;mark&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"background-color:green"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;highlighted&lt;span class="nt"&gt;&amp;lt;/mark&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qmeq22-S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9tn68y1eypeqmigb8v5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qmeq22-S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9tn68y1eypeqmigb8v5.PNG" alt="mark HTML tag Aya Bouchiha"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ltaddressgt"&gt;
  &lt;/a&gt;
  &amp;lt;address&amp;gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;address&amp;gt;&lt;/strong&gt; is a tag that displays the contact information like &lt;em&gt;email&lt;/em&gt; and &lt;em&gt;phone number&lt;/em&gt; of the author of a document or an article, additionally, it supports all Html global attributes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;address&amp;gt;&lt;/span&gt;
            Posted by
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://t.me/AyaBouchiha"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; Aya Bouchiha &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            Email Address:
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"mailto:developer.aya.b@gmail.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                developer.aya.b@gmail.com
            &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            Phone Number:
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"tel:+212632772265"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;+212632772265 &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            Morocco, Azemmour
        &lt;span class="nt"&gt;&amp;lt;/address&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--761Drjmg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ca6meew5k5fc9wl44cso.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--761Drjmg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ca6meew5k5fc9wl44cso.PNG" alt="Address tag Aya Bouchiha"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#ltnoscriptgt"&gt;
  &lt;/a&gt;
  &amp;lt;noscript&amp;gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;noscript&amp;gt;&lt;/strong&gt;: this tag can be inside a head or body tag, it displays alternate HTML content if the script type is not supported or if the browser has scripting disabled. if not the tag will not display the alternate HTML. But you have to be careful, &amp;lt;noscript&amp;gt; tag sometimes impacts the SEO due to writing the same sentence on every page of your website... &lt;a href="https://northcutt.com/seo/how-the-noscript-tag-impacts-seo-hint-be-very-careful/"&gt;solutions &amp;amp; more details&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;javascript is supported in your browser :)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;noscript&amp;gt;&lt;/span&gt; Javascript is not supported in your browser :( &lt;span class="nt"&gt;&amp;lt;/noscript&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BSZ4f0L3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nv2zn1u6drmbhs1oo074.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BSZ4f0L3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nv2zn1u6drmbhs1oo074.PNG" alt="noscript HTML tag Aya Bouchiha"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lttimegt"&gt;
  &lt;/a&gt;
  &amp;lt;time&amp;gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;time&amp;gt;&lt;/strong&gt;: represents a specific period in time. It may include the datetime attribute to translate dates into a machine-readable format, allowing for better search engine results or custom features such as reminders. (&lt;em&gt;supports all global HTML attributes&lt;/em&gt;) &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time"&gt;more details...&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
            The next meeting will be held on 
            &lt;span class="nt"&gt;&amp;lt;time&lt;/span&gt; &lt;span class="na"&gt;datetime=&lt;/span&gt;&lt;span class="s"&gt;"2021-11-25"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                Nov 25
            &lt;span class="nt"&gt;&amp;lt;/time&amp;gt;&lt;/span&gt;
            in Rabat
        &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3gjzaI4z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdc7vn3dw4z2fx66pzv5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3gjzaI4z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdc7vn3dw4z2fx66pzv5.PNG" alt="time HTML tag Aya Bouchiha"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ltvargt"&gt;
  &lt;/a&gt;
  &amp;lt;var&amp;gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;var&amp;gt;&lt;/strong&gt;: supports all HTML global attributes and indicates the name of mathematical variables such as &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt;, by default its text content is italic.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
            &lt;span class="c"&gt;&amp;lt;!--
                by default (
                    var {
                        font-style: italic;
                    }
                )
            --&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Ex:1 solve this equation:&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;var&amp;gt;&lt;/span&gt;4x&lt;span class="nt"&gt;&amp;lt;/var&amp;gt;&lt;/span&gt; + &lt;span class="nt"&gt;&amp;lt;var&amp;gt;&lt;/span&gt;2y&lt;span class="nt"&gt;&amp;lt;/var&amp;gt;&lt;/span&gt; = 12
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ume-5k1Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2uzo8o22jm95ykrnld94.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ume-5k1Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2uzo8o22jm95ykrnld94.PNG" alt="var HTML tag Aya Bouchiha"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;mark&amp;gt;&lt;/strong&gt;: for highlighting text.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;address&amp;gt;&lt;/strong&gt;: for showing contact informtation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;noscript&amp;gt;&lt;/strong&gt;: for displaying alternate HTML content if the browser does not support scripting.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;time&amp;gt;&lt;/strong&gt;: representing a specific period in time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;lt;var&amp;gt;&lt;/strong&gt;: for indicating  mathematical variables like x &amp;amp; y.&lt;/p&gt;

&lt;p&gt;Happy coding!&lt;br&gt;
#day_32&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>100daysofcode</category>
      <category>javascript</category>
    </item>
    <item>
      <title>BLOCKCHAIN ON AWS</title>
      <author>Shivani Aggarwal</author>
      <pubDate>Wed, 14 Jul 2021 23:18:44 +0000</pubDate>
      <link>https://dev.to/aws-builders/blockchain-on-aws-i6o</link>
      <guid>https://dev.to/aws-builders/blockchain-on-aws-i6o</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Do you know about Blockchain? How to build solutions using Blockchain ? Anything about AWS Blockchain ?&lt;/em&gt;&lt;/strong&gt; - Well no worries , the following discussion would dive into the basic details of Blockchain ,Blockchain benefits, the way Blockchain works, and finally the Blockchain services on AWS.&lt;/p&gt;

&lt;p&gt;The intersection between cloud computing and blockchain is leading to various changes in the approaches for conducting business. &lt;/p&gt;

&lt;p&gt;Hence, the introduction of blockchain on AWS is extremely promising.  Indeed , it is inevitable to notice a growing interest in an AWS Blockchain in recent times.&lt;/p&gt;

&lt;p&gt;But first, back to basics!! Before going deep dive in Blockchain on AWS let’s do a run through on Blockchain technology.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-blockchain"&gt;
  &lt;/a&gt;
  What is Blockchain?
&lt;/h2&gt;

&lt;p&gt;If you are thinking of cryptocurrency when you hear the term ‘Blockchain’ , then you are yet to discover the breadth of Blockchain Technology. It is a computer file for storing data. Or, to put it in more technical terms, it’s an open, distributed database. Instead of having a central database/entity verify the data, a network of individual computers verify and sync the stored data .&lt;/p&gt;

&lt;p&gt;It is a new technology which governs that no one person or entity (say, a government or corporation) has control over the blockchain; this is a radical departure from the centralized databases that are controlled and administered by businesses and other entities. &lt;/p&gt;

&lt;p&gt;If this sounds familiar, it’s because Bitcoin operates in the same way. &lt;/p&gt;

&lt;p&gt;In fact, &lt;a href="https://bitcoin.org/en/"&gt;Bitcoin&lt;/a&gt; is the first example of blockchain in action.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#oh-wait-but-what-is-so-great-about-blockchain"&gt;
  &lt;/a&gt;
  Oh wait , but what is so great about Blockchain?
&lt;/h2&gt;

&lt;p&gt;Let’s look at some of the biggest advantages of using blockchain technology:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It’s decentralized&lt;/strong&gt;, Because it doesn’t rely on a central computer, it’s resistant to a lot of damage. If one computer fails, the system stays up. More importantly, the data is very hard to corrupt. To compromise data in a centralized system, someone just needs to change what’s in the central database. However, because there’s no central database on a blockchain network, a single computer would have to override the entire network, which is much harder to do.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You get a history of activity&lt;/strong&gt;, not just a snapshot in time. When you look at a regular database, you’re getting a snapshot of data that’s up to date in that moment in time. Blockchains do this too, but they also maintain a record of all the information that existed before. It’s a database with history, if you like.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;There’s no one, central point of attack&lt;/strong&gt;, The fact that blockchain is a decentralized way of storing and accessing data makes the whole system incredibly secure – because, unlike a centralized database, there’s no one single point of entry for hackers. This makes it particularly useful for recording transactions in a secure manner.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And no centralized control&lt;/strong&gt;, Because the system of record is decentralized and replicated in its entirety in multiple places, there’s no need for a central administrator and all the costs and infrastructure that comes with it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-blockchain-work"&gt;
  &lt;/a&gt;
  How does Blockchain work?
&lt;/h2&gt;

&lt;p&gt;In very simple terms, the file is comprised of blocks of data, with each block being connected to the previous block, forming a chain. Each block also contains a record of when that block was created or edited, which makes it very useful for maintaining a detailed system of record that cannot be corrupted or lost. Because the whole blockchain is duplicated across many computers, any user can view the entire blockchain. Transactions or records are processed not by one central administrator, but by a network of users who work to verify the data and achieve a consensus. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B6Jo01R8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1vitod219oxd3cdswh0c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B6Jo01R8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1vitod219oxd3cdswh0c.png" alt="How does Blockchain work"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For building a blockchain based solution businesses need to deploy their choice of blockchain frameworks on servers, create networks and manage them all the way to scale the solution. Managing networks and multiple entities can soon become a huge task and  a cumbersome process, that is where the blockchain on cloud based solutions from AWS fits in.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Wooo.. Its time to go on CLOUD..&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-blockchain-on-aws-include"&gt;
  &lt;/a&gt;
  What does Blockchain on AWS include?
&lt;/h2&gt;

&lt;p&gt;Blockchain on AWS refers to a small yet powerful assortment of offerings that support the enterprise blockchain initiatives of organizations. The Amazon Quantum Ledger Database, Amazon Managed Blockchain, AWS Blockchain Partners, and AWS Blockchain Templates are the prominent entries when it comes to discussions about blockchain on AWS. So, let us take a review of how enterprise blockchain on AWS looks like!&lt;/p&gt;

&lt;p&gt;The AWS Blockchain ecosystem is tailored for addressing diverse business issues in the deployment of blockchain projects through cloud platforms. Let us take a closer reflection on each individual service in Blockchain on AWS to have further understanding regarding the applications of &lt;a href="https://aws.amazon.com/blockchain/"&gt;AWS Blockchain&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#aws-blockchain-templates"&gt;
  &lt;/a&gt;
  AWS Blockchain Templates
&lt;/h4&gt;

&lt;p&gt;AWS offers &lt;a href="https://aws.amazon.com/blockchain/templates/"&gt;open-source&lt;/a&gt; templates for apps built on blockchain. They deploy the network on an ECS cluster or an EC2 instance running Dockers. In other words, the template links the app and the network.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_R4TIuVm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0t1jq90lrxggxbmlw1n3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_R4TIuVm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0t1jq90lrxggxbmlw1n3.png" alt="Blockchain Templates"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, developers can create their own blockchain network in their personalized Amazon VPC. Developers could configure the network Access Control Lists and VPC subnets easily for defining the characteristics and functionalities of their decentralized network. Furthermore, developers can also assign granular permissions for their blockchain network in AWS Blockchain Template through AWS IAM. The granular permissions will help in establishing restrictions on the resources that are accessible by Amazon EC2 instance or an Amazon ECS cluster. &lt;/p&gt;

&lt;p&gt;Finally, developers could deploy decentralized applications by writing smart contracts and running them on their newly created blockchain network. &lt;/p&gt;

&lt;p&gt;AWS offers two different templates:  &lt;strong&gt;Blockchain for Ethereum&lt;/strong&gt; and &lt;strong&gt;Blockchain for Hyperledger Fabric&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Blockchain for Ethereum&lt;/strong&gt; uses the incredibly popular and powerful Ethereum Network to power public blockchain applications. This template is by far the most popular method for building blockchain apps on AWS&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Blockchain for Hyperledger Fabric&lt;/strong&gt; lets you add permissions and access controls to the network. Use it for private blockchain networks.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For most blockchain applications, Ethereum is perfect. However, there are a couple more options that may be useful in certain settings. You lose some decentralization but gain other capabilities.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#quantum-ledger-database"&gt;
  &lt;/a&gt;
  Quantum Ledger Database
&lt;/h4&gt;

&lt;p&gt;Amazon’s &lt;a href="https://aws.amazon.com/qldb/"&gt;Quantum Ledger Database (QLDB)&lt;/a&gt; is a managed ledger database that chains together changes in an append-only journal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FGctofzK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8vy7uwbchzjlx0ul3zl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FGctofzK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8vy7uwbchzjlx0ul3zl.png" alt="Quantum Ledger Database"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is a fully managed ledger database that provides a transparent, immutable, and cryptographically verifiable transaction log owned by a central trusted authority. Amazon QLDB tracks each and every application data change and maintains a complete and verifiable history of changes over time.&lt;/p&gt;

&lt;p&gt;In comparison to ethereum,  it’s managed by AWS, meaning it isn’t fully decentralized. This doesn’t mean all the benefits are lost. Data in the ledger remains unchangeable and secure, and the database is completely managed to save time and money. For ledger applications, it’s a great fit.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#amazon-managed-blockchain"&gt;
  &lt;/a&gt;
  Amazon Managed Blockchain
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/managed-blockchain/"&gt;Amazon Managed Blockchain&lt;/a&gt; is a fully-managed tool for maintaining a public or private blockchain network on Hyperledger Fabric or Ethereum. Developers can manage networks with single API calls.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ofEtxBY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6dhhpuhbn5curw3d0x1n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ofEtxBY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6dhhpuhbn5curw3d0x1n.png" alt="Amazon Managed Blockchain"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Again, it is managed by AWS, so some level of decentralization is lost in the process. However, architectural decentralization remains: data is still verified across many different devices in a non-changeable way. Thus, many of the security and reliability benefits remain completely intact.&lt;br&gt;
Because of these security benefits and more, blockchain is an amazing technology with lots of potential in app development.&lt;br&gt;
But no matter the method, blockchain on AWS has many uses.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;On a concluding note, you can clearly note that the combination of the cloud and blockchain can induce positive outcomes. The best things about both technologies come together to offer the most feasible business solutions with assurance of productivity. The flexibility, security, and scalability benefits of blockchain on AWS are the foremost reasons to consider its potential. In the long run, the development and deployment of blockchain solutions through cloud platforms would gain mainstream recognition.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>blockchain</category>
    </item>
    <item>
      <title>HTML-first, JavaScript last: the secret to web speed!</title>
      <author>Miško Hevery</author>
      <pubDate>Wed, 14 Jul 2021 22:17:40 +0000</pubDate>
      <link>https://dev.to/mhevery/html-first-javascript-last-the-secret-to-web-speed-4ic9</link>
      <guid>https://dev.to/mhevery/html-first-javascript-last-the-secret-to-web-speed-4ic9</guid>
      <description>&lt;p&gt;All frameworks need to keep state. Frameworks build up the state by executing the templates. Most frameworks keep this state in the JavaScript heap in the form of references and closures. What is unique about &lt;a href="https://github.com/builderio/qwik"&gt;Qwik&lt;/a&gt; is that the state is kept in the DOM in the form of attributes. (Note that neither references nor closures are wire serializable, but DOM attributes, which are strings, are. This is key for resumability!)&lt;/p&gt;

&lt;p&gt;The consequences of keeping state in the DOM have many unique benefits, including:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;DOM has HTML as its serialization format. By keeping state in the DOM in the form of string attributes, the application can be serialized into HTML at any point. The HTML can be sent over the wire and deserialized to DOM on a different client. The deserialized DOM can then be resumed.&lt;/li&gt;
&lt;li&gt;Each component can be resumed independently from any other component. This out-of-order rehydration allows only a subset of the whole application to be rehydrated and limits the amount of code that needs to be downloaded as a response to user action. This is quite different from traditional frameworks.&lt;/li&gt;
&lt;li&gt;Qwik is a stateless framework (all application states are in DOM in the form of strings). Stateless code is easy to serialize, ship over the wire, and resume. It is also what allows components to be rehydrated independently from each other. &lt;/li&gt;
&lt;li&gt;The application can be serialized at any point in time (not just on initial render), and many times over.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's look at a simple &lt;code&gt;Counter&lt;/code&gt; component example, and how state serialization works. (Note that this is the output of the server-side rendered HTML, not necessarily specific code developers would be hand-coding.)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;::app-state=&lt;/span&gt;&lt;span class="s"&gt;"./AppState"&lt;/span&gt; 
     &lt;span class="na"&gt;app-state:1234=&lt;/span&gt;&lt;span class="s"&gt;"{count: 321}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;decl:template=&lt;/span&gt;&lt;span class="s"&gt;"./Counter_template"&lt;/span&gt;
       &lt;span class="na"&gt;on:q-render=&lt;/span&gt;&lt;span class="s"&gt;"./Counter_template"&lt;/span&gt;
       &lt;span class="na"&gt;::.=&lt;/span&gt;&lt;span class="s"&gt;"{countStep: 5}"&lt;/span&gt;
       &lt;span class="na"&gt;bind:app-state=&lt;/span&gt;&lt;span class="s"&gt;"state:1234"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;on:click=&lt;/span&gt;&lt;span class="s"&gt;"./MyComponent_increment"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;+5&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    321.
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;on:click=&lt;/span&gt;&lt;span class="s"&gt;"./MyComponent_decrrement"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;-5&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;::app-state&lt;/code&gt; (application state code): Points to a URL where the application state mutation code can be downloaded. The state update code is only downloaded if a state needs to be mutated.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app-state:1234&lt;/code&gt; (application state instance): A pointer to a specific application instance. By serializing the state, the application can resume where it left off, rather than replaying the rebuilding of the state.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;decl:template&lt;/code&gt; (declare template): Points to a URL where the component template can be downloaded. The component template is not downloaded until Qwik determines that the component's state has changed, and needs to be rerendered. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;on:q-render&lt;/code&gt; (component is scheduled for rendering): Frameworks need to keep track of which components need to be rerendered. This is usually done by storing an internal list of invalidated components. With Qwik, the list of invalidated components is stored in the DOM in the form of attributes. The components are then waiting for the &lt;code&gt;q-render&lt;/code&gt; event to broadcast. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;::.="{countStep: 5}"&lt;/code&gt; (Internal state of component instance): A component may need to keep its internal state after rehydration. It can keep the state in the DOM. When the component is rehydrated it has all of the state it needs to continue. It does not need to rebuild its state.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;bind:app-state="state:1234"&lt;/code&gt; (a reference to shared application state): This allows multiple components to refer to the same shared application state. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#-raw-queryselectorall-endraw-is-our-friend"&gt;
  &lt;/a&gt;
  &lt;code&gt;querySelectorAll&lt;/code&gt; is our friend
&lt;/h2&gt;

&lt;p&gt;A common thing that a framework needs to do is to identify which components need to be rerendered when the state of the application changes. This can happen as a result of several reasons, such as a component has been invalidated explicitly (&lt;code&gt;markDirty()&lt;/code&gt;), or because a component is invalidated implicitly because the application shared state has changed. &lt;/p&gt;

&lt;p&gt;In the example above, the &lt;code&gt;count&lt;/code&gt; is kept in the application state under the key &lt;code&gt;app-state:1234&lt;/code&gt;. If the state is updated it is necessary to invalidate (queue for rerender) the components that depend on that application state. How should the framework know which components to update?&lt;/p&gt;

&lt;p&gt;In most frameworks the answer is to just rerender the whole application, starting from the root component. This strategy has the unfortunate consequence that all the component templates need to be downloaded, which negatively affects latency on user interaction.&lt;/p&gt;

&lt;p&gt;Some frameworks are reactive and keep track of the component that should be rerendered when a given state changes. However, this book-keeping is in the form of closures (see &lt;a href="https://dev.to/mhevery/death-by-closure-and-how-qwik-solves-it-44jj"&gt;Death By Closure&lt;/a&gt;) which close over the templates. The consequence is that all the templates need to be downloaded at the application bootstrap when the reactive connections are initialized.  &lt;/p&gt;

&lt;p&gt;Qwik is component-level reactive. Because it is reactive, it does not need to render starting at the root. However, instead of keeping the reactive listeners in the form of closures, it keeps them in the DOM in the form of attributes, which allows Qwik to be resumable. &lt;/p&gt;

&lt;p&gt;If &lt;code&gt;count&lt;/code&gt; gets updated, Qwik can internally determine which components need to be invalidated by executing this &lt;code&gt;querySelectorAll&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bind&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;:app-state&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;:1234&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;markDirty&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above query allows Qwik to determine which components depend on the state, and for each component it invokes &lt;code&gt;markDirty()&lt;/code&gt; on it. &lt;code&gt;markDirty()&lt;/code&gt; invalidates the component and adds it to a queue of components which need to be rerendered. This is done to coalesce multiple &lt;code&gt;markDirity&lt;/code&gt; invocations into a single rendering pass. The rendering pass is scheduled using &lt;code&gt;requestAnimationFrame&lt;/code&gt;. But, unlike most frameworks, Qwik keeps this queue in the DOM in the form of the attribute as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;on:q-render=&lt;/span&gt;&lt;span class="s"&gt;"./Counter_template"&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;requestAnimationFrame&lt;/code&gt; is used to schedule rendering. Logically, this means that &lt;code&gt;requestAnimationFrame&lt;/code&gt; broadcasts the &lt;code&gt;q-render&lt;/code&gt; event which the component is waiting on. Again &lt;code&gt;querySelectorAll&lt;/code&gt; comes to the rescue.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;on&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;:q-render&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;jsxRender&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Browsers do not have broadcast events (reverse of event bubbling), but &lt;code&gt;querySelectorAll&lt;/code&gt; can be used to identify all the components which should receive the event broadcast. &lt;code&gt;jsxRender&lt;/code&gt; function is then used to rerender the UI. &lt;/p&gt;

&lt;p&gt;Notice that at no point does Qwik need to keep state outside of what is in the DOM. Any state is stored in the DOM in the form of attributes, which are automatically serialized into HTML. In other words, at any time the application can be snapshot into HTML, sent over the wire, and deserialized. The application will automatically resume where it left off. &lt;/p&gt;

&lt;p&gt;Qwik is stateless, and it is this that makes Qwik applications resumable. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits"&gt;
  &lt;/a&gt;
  Benefits
&lt;/h2&gt;

&lt;p&gt;Resumability of applications is the obvious benefit of storing all framework state in DOM elements. However, there are other benefits which may not be obvious at first glance.&lt;/p&gt;

&lt;p&gt;Skipping rendering for components which are outside of the visible viewport. When a &lt;code&gt;q-render&lt;/code&gt; event is broadcast to determine if the component needs to be rendered, it is easy to determine if the component is visible and simply skip the rendering for that component. Skipping the rendering also means that no template, or any other code, is required to be downloaded.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0C5MyDdy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7y32eh60iarvc277zl9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0C5MyDdy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7y32eh60iarvc277zl9.png" alt="Qwik Performance"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another benefit of statelessness is that HTML can be lazy loaded as the application is already running. For example, the server can send the HTML for rendering the initial view, but skip the HTML for the view which is not visible. The user can start interacting with the initial view and use the application. As soon as the user starts scrolling the application can fetch more HTML and &lt;code&gt;innerHTML&lt;/code&gt; it at the end of the DOM. Because Qwik is stateless, the additional HTML can be just inserted without causing any issues to the already running application. Qwik does not know about the new HTML until someone interacts with it, and only then it gets lazy hydrated. The use case described above is very difficult to do with the current generation of frameworks.&lt;/p&gt;

&lt;p&gt;We are very excited about the future of Qwik, and the kind of use cases that it opens up.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Try it on &lt;a href="https://stackblitz.com/edit/qwik-todo-demo"&gt;StackBlitz&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Star us on &lt;a href="https://github.com/builderio/qwik"&gt;github.com/builderio/qwik&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Follow us on &lt;a href="https://twitter.com/QwikDev"&gt;@QwikDev&lt;/a&gt; and &lt;a href="https://twitter.com/builderio"&gt;@builderio&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Chat us on &lt;a href="https://discord.gg/JHVpZmqSs4"&gt;Discord&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Join &lt;a href="https://builder-io.rippling-ats.com/"&gt;builder.io&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s it for now, but stay tuned as we continue to write about Qwik and the future of frontend frameworks in the coming weeks!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>frameworks</category>
      <category>performance</category>
    </item>
    <item>
      <title>Creating a Sticky Table Column</title>
      <author>Jamie Mc Manus</author>
      <pubDate>Wed, 14 Jul 2021 22:16:58 +0000</pubDate>
      <link>https://dev.to/jamiemcmanus/creating-a-sticky-table-column-2e8m</link>
      <guid>https://dev.to/jamiemcmanus/creating-a-sticky-table-column-2e8m</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;In this article I will show you how to create a sticky column on table scroll. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AVdJXNRl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gowgz9odbi61h8qc1w0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AVdJXNRl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gowgz9odbi61h8qc1w0.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Image credit &lt;a href="https://commons.wikimedia.org/wiki/File:%CE%A3%CF%89%CE%BA%CF%81%CE%AC%CF%84%CE%B7%CF%82,_%CE%91%CE%BA%CE%B1%CE%B4%CE%B7%CE%BC%CE%AF%CE%B1_%CE%91%CE%B8%CE%B7%CE%BD%CF%8E%CE%BD_6616.jpg"&gt;C messier&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-why-"&gt;
  &lt;/a&gt;
  But Why ? 🤔🏛️
&lt;/h2&gt;

&lt;p&gt;This is a question that led the Ancient Greek Philosopher Socrates to his eventual death , some say when he questioned why you would use a non responsive html table in our mobile centric world and then complain that it was not user friendly. &lt;br&gt;
But seriously - sometimes using tables just makes sense, or is unavoidable. On mobile or just smaller screens in general a lot of the information in a table can end up being cut off because of our limited screen width  , and scrolling horizontally could make other usefully identifying columns disappear from view leaving us in a bind. One solution is to make the identifying column stick in place on scroll.   &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-well-build"&gt;
  &lt;/a&gt;
  What we'll build 👷
&lt;/h3&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/9qzyb2wj/104//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#postitionsticky"&gt;
  &lt;/a&gt;
  Postition:sticky
&lt;/h3&gt;

&lt;p&gt;The key to this solution is using the CSS &lt;code&gt;position:sticky&lt;/code&gt;. Applying this to say a &lt;code&gt;div&lt;/code&gt; element will make it stick to its parent element. The good news is that this will also work for Table Cells ! &lt;br&gt;
( Word to the wise though ,  &lt;a href="https://bugs.chromium.org/p/chromium/issues/detail?id=702927#c1"&gt;position sticky cannot be used on &lt;code&gt;tr&lt;/code&gt; &amp;amp; &lt;code&gt;thead&lt;/code&gt; elements&lt;/a&gt; ) &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#starting-out"&gt;
  &lt;/a&gt;
  Starting Out
&lt;/h3&gt;

&lt;p&gt;Create a container &lt;code&gt;div&lt;/code&gt; element , and within this you can create a good ol' fashioned HTML table with enough columns so that we'll be required to scroll horizontally.&lt;br&gt;
Next we need to limit the width of the table parent to ensure scrolling. We can do this by adding a width and setting the overflow like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.films-container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This a table that has most of the information cut off.. which is perfect !&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-meat"&gt;
  &lt;/a&gt;
  The Meat 🍖
&lt;/h3&gt;

&lt;p&gt;We need to create a CSS class with the &lt;code&gt;postion:sticky&lt;/code&gt; and the location it is going to stick when scrolling starts and the element gets to. We'll also set the z-index and background-color to ensure that it appears over any of the other elements and remains visible.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.stick-column&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;-webkit-sticky&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sticky&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffff&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now all we need to do is add this class to every td in the column want to stay in view.&lt;/p&gt;

&lt;p&gt;Now that is all well and good but we can go one step further ( or not ) and apply this class when the user clicks on the column header so that column will stay visible. This gives the user the choice , which they always love.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-javascript"&gt;
  &lt;/a&gt;
  Adding JavaScript
&lt;/h3&gt;

&lt;p&gt;What we need to do is add an on click event to the headers which will let us add ( or remove ) the stick-column css class to all the &lt;code&gt;td&lt;/code&gt; in the column. &lt;br&gt;
The easiest way to achieve this is to use a combination of the html &lt;a href="https://www.w3schools.com/jsref/prop_tabledata_cellindex.asp"&gt;cellIndex&lt;/a&gt; property of our clicked header and the CSS &lt;code&gt;nth-child&lt;/code&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-child"&gt;selector&lt;/a&gt;. &lt;br&gt;
Note that &lt;em&gt;cellIndex&lt;/em&gt; starts at 0 , while  &lt;em&gt;nth-child&lt;/em&gt; starts at 1 , so we'll need to simply + 1 to match these. &lt;br&gt;
We can then get all the &lt;code&gt;td&lt;/code&gt; using the above and &lt;code&gt;querySelectorAll&lt;/code&gt;. When we have these we can add our class , but first we need to remove the class from any other column that may have it as well because it will interfere with the current one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ClickColumn&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cellIndex&lt;/span&gt;

  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;selector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;td:nth-child(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cells&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Check if trying to unclick the same column&lt;/span&gt;
  &lt;span class="c1"&gt;// If not then proceed , as we want to be able to unclick the functionality &lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stick-column&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
    &lt;span class="c1"&gt;// Get the Previous Clicked Element and remove Class &lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;previous&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByClassName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stick-column&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;previous&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;previous&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stick-column&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stick-column&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
          &lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stick-column&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stick-column&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now all thats left is to add this event to the table headers - you can do this inline individually if you wish , or all at once via JavaScript like below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#film-tbl thead td&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ClickColumn&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-finished-product"&gt;
  &lt;/a&gt;
  The Finished Product 🏁
&lt;/h3&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/9qzyb2wj/104//embedded//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And there we have it - click one of the headers and scroll away ! Of course there's plenty of room for improvement - we could allow multiple columns to stick or add some more CSS to highlight the sticky column .. but I'll leave that to you ! &lt;/p&gt;

&lt;p&gt;So until next time -  Arrivederci ! 🎉&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>🎬Vertical Slider | JavaScript✨</title>
      <author>Robson Muniz</author>
      <pubDate>Wed, 14 Jul 2021 21:22:03 +0000</pubDate>
      <link>https://dev.to/robsonmuniz16/vertical-slider-javascript-kjl</link>
      <guid>https://dev.to/robsonmuniz16/vertical-slider-javascript-kjl</guid>
      <description>&lt;p&gt;Hey DEVs, in today’s episode we are going to build a Vertical Slider using JavaScript; basically, we have content on both sides and 2 buttons in the middle, once you click it one side goes up and another one goes down, but it brings into place the correct text and correct image; its a really cool look slide you can use any type of content.&lt;/p&gt;




&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/laNpbZISwjY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Live Version | Source Code&lt;/strong&gt; 👀:&lt;br&gt;
&lt;a href="https://bit.ly/3raRQqD"&gt;https://bit.ly/3raRQqD&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;📚&lt;strong&gt;Resources:&lt;/strong&gt;&lt;br&gt;
Pictures used in the project: &lt;a href="https://www.pexels.com"&gt;https://www.pexels.com&lt;/a&gt; &lt;br&gt;
Font-Awesome: &lt;a href="https://cdnjs.com/libraries/font-awesome"&gt;https://cdnjs.com/libraries/font-awesome&lt;/a&gt; &lt;/p&gt;




</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Error 404 : Page not Found</title>
      <author>Rahul Kumar</author>
      <pubDate>Wed, 14 Jul 2021 21:16:57 +0000</pubDate>
      <link>https://dev.to/iamrahul/error-404-page-not-found-5033</link>
      <guid>https://dev.to/iamrahul/error-404-page-not-found-5033</guid>
      <description>&lt;p&gt;&lt;strong&gt;W&lt;/strong&gt;hen you click on a link, but instead of arriving to the site you want, an error message appears, stating that the page you requested is unavailable. It should be something along the lines of '404 Not Found.'&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#a-404-error-is-an-http-status-code-that-indicates-that-the-websites-server-does-not-have-the-page-you-were-searching-for"&gt;
  &lt;/a&gt;
  A 404 error is an HTTP status code that indicates that the website's server does not have the page you were searching for.
&lt;/h5&gt;

&lt;p&gt;When website content is deleted or relocated to another URL, an error 404 message is commonly shown.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The 404 status code is the most common HTTP status code.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-are-http-status-codes"&gt;
  &lt;/a&gt;
  What are HTTP status codes?
&lt;/h2&gt;

&lt;p&gt;A server answer to a browser's request is an HTTP status code. When you visit a website, your browser makes a request to the server, which the server responds to with a three-digit code called the HTTP status code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;These status codes represent a communication between your browser and the server over the Internet. They convey if things are fine😊, touch-and-go👍, or if something is wrong😕 between them.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#common-http-status-code-classes"&gt;
  &lt;/a&gt;
  Common HTTP status code classes:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mHTl_E9Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5a2m8wds7fp58k6j0zfx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mHTl_E9Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5a2m8wds7fp58k6j0zfx.png" alt="http status codes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each three-digit status code starts with one of five integers, ranging from 1 to 5, and is written as 1xx or 5xx to signify status codes in that range. For example, 200, 301, 404, 500, and so on...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;100–199 - Informational responses: The server is thinking through the request.
200–299  - Successful responses: The request was successfully completed and the server gave the browser the expected response.
300–399  - Redirection: You got redirected somewhere else.
400–499  - Client errors: Page not found. The site or page couldn’t be reached. 
500–599  - Server errors:  A valid request was made by the client but the server failed to complete the request.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;HTTP Status Code 200 - OK&lt;/code&gt;&lt;br&gt;
The 200 (OK) status code indicates that the request has succeeded. This is your ideal status code for your normal, everyday, properly functioning page.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HTTP Status Code 301 - Permanent Redirect&lt;/code&gt;&lt;br&gt;
A 301 redirect should be utilized any time one URL needs to be redirected to another permanently.&lt;br&gt;
Visitors and bots who come on that page will be sent to the new URL through a 301 redirect.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HTTP Status Code 500 - Internal Server Error&lt;/code&gt;&lt;br&gt;
This status code indicates a server fault rather than a problem with pages missing or not found. A 500 error is a common server issue that will prevent visitors from accessing your website.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;HTTP 404 errors can decreases a website’s ranking and reputation.&lt;/strong&gt;&lt;br&gt;
Once the crawlers have determined that 404 codes are being returned for a large number of queries, they will proceed to the next step. This might result in a significant drop in the number of visitors to the website.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;👉&lt;a href="https://datatracker.ietf.org/doc/html/rfc7231#section-6.2.1"&gt;Read more here (RFC 7231)&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Getting bored😑&lt;br&gt;
Try this once :&lt;code&gt;https://http.cat/[status_code]&lt;/code&gt;&lt;br&gt;
For example : &lt;br&gt;
&lt;a href="https://http.cat/404"&gt;https://http.cat/404&lt;/a&gt;&lt;br&gt;
&lt;a href="https://http.cat/450"&gt;https://http.cat/450&lt;/a&gt;&lt;br&gt;
&lt;a href="https://http.cat/500"&gt;https://http.cat/500&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




</description>
      <category>webdev</category>
      <category>programming</category>
      <category>devjournal</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Incident Retro: Failing Comment Creation + Erroneous Push Notifications </title>
      <author>Molly Struve (she/her)</author>
      <pubDate>Wed, 14 Jul 2021 20:53:41 +0000</pubDate>
      <link>https://dev.to/devteam/incident-retro-failing-comment-creation-erroneous-push-notifications-55dj</link>
      <guid>https://dev.to/devteam/incident-retro-failing-comment-creation-erroneous-push-notifications-55dj</guid>
      <description>&lt;p&gt;&lt;em&gt;This incident retro was tougher than most to share because, despite the seriousness of the issue, it affected only a very small percentage of our user base. However, we learned some incredibly valuable lessons and I think it's only right that I give others the chance to learn from our mistake as well.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#context"&gt;
  &lt;/a&gt;
  Context
&lt;/h2&gt;

&lt;p&gt;On Thursday July 8th, we merged a &lt;a href="https://github.com/forem/forem/pull/14121"&gt;very large PR&lt;/a&gt; that updated our code to start using our new User Settings instead of the deprecated fields on users. The goal of moving these fields to user settings is to lighten up the user model and make these types of settings more configurable on a per-Forem basis.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem
&lt;/h2&gt;

&lt;p&gt;On July 9th around midday, it was brought to our attention &lt;a href="https://github.com/forem/forem/issues/14183"&gt;through a bug report&lt;/a&gt; that the comment creation experience on the frontend seemed to be broken. At this point folks on the team started looking into the problem. Using &lt;a href="https://www.honeycomb.io/"&gt;Honeycomb&lt;/a&gt;, we were able to confirm that the problem started when the User Settings PR was deployed which made it the prime suspect. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tOQncc1j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://forem.team/remoteimages/uploads/articles/acuvsc0l8y4135nois0f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tOQncc1j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://forem.team/remoteimages/uploads/articles/acuvsc0l8y4135nois0f.png" alt="Picture of a graph where the line is steady under 100ms and jumps to thousands"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I immediately dove into the PR and quickly found &lt;a href="https://github.com/forem/forem/pull/14121/files#diff-56d67da7087534bc7d4cffd953e00dc2e3eb41047f1e82f3124cd6d69c509873R38"&gt;the line of code that had been broken&lt;/a&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jgjfqocd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://forem.team/remoteimages/uploads/articles/jh78q3nsi71vrdyekkk0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jgjfqocd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://forem.team/remoteimages/uploads/articles/jh78q3nsi71vrdyekkk0.png" alt="Github PR dif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We had incorrectly removed the &lt;code&gt;user_ids&lt;/code&gt; scope from the filtering used to collect user IDs for sending mobile push notifications. This was causing us to attempt to grab notification settings and IDs for all users with mobile notifications turned on which was often timing out. These timeouts would occur after a comment was created so the comment in most cases still existed but we never returned a success response to the frontend. This caused the frontend to freeze creating a bad experience for the user. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#fix"&gt;
  &lt;/a&gt;
  Fix
&lt;/h2&gt;

&lt;p&gt;In order to remedy this situation, we quickly added back the scope and deployed. Immediately the errors and timeouts went away and things returned to normal for comment creation. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZBKKartg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://forem.team/remoteimages/uploads/articles/vpicn144aagfpsrbnnhs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZBKKartg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://forem.team/remoteimages/uploads/articles/vpicn144aagfpsrbnnhs.png" alt="Graph of increased duration returning to normal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point, we concluded that possibly some extra notifications had been sent but that the majority of these requests had timed out so we assumed we were in a good state now. I looked for some sort of push notification model in our app where we might have stored unsent notifications but upon not finding one figured we were clear. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#more-problems"&gt;
  &lt;/a&gt;
  More Problems
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;July 9th ~12pm EDT&lt;/strong&gt;: Unfortunately, the above assumption was incorrect. Just before midnight eastern, a team member reported she was getting random notifications on her phone. At this point, our mobile engineer jumped in to investigate and found that we had a ton of push notifications enqueued in Redis.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;July 9th ~2am EDT&lt;/strong&gt;: Mobile engineer posts about the issue in our #emergency Slack channel.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;July 9th ~7am EDT&lt;/strong&gt;: On-call engineer wakes up and sees the #emergency Slack message and jumps in to help investigate and try to resolve the issue. Shortly after, I also jumped in. It was at this point that I learned all about how our push notification system worked. We use &lt;a href="https://github.com/rpush/rpush"&gt;RPush&lt;/a&gt; for communicating with various push-notification services. RPush stores the data about the push notifications in Redis for quick insertion and removal times. We quickly assessed that we had a large number of push notifications enqueued in Redis waiting to be sent, despite the solution deployed the day before. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#fix-2"&gt;
  &lt;/a&gt;
  Fix 2
&lt;/h2&gt;

&lt;p&gt;Upon realizing we had all of these records in Redis, we took the following steps to resolve the issue:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Removal of the iOS cert from Heroku to prevent sending any notifications. Without this cert we could ensure we would not send anymore bad notifications and that would give us time to fix the data in Redis.&lt;/li&gt;
&lt;li&gt;To be safe, we removed all of the &lt;code&gt;PushNotifications::DeliveryWorker&lt;/code&gt; jobs from Sidekiq so as not to be pinging Redis for the keys causing our key collection to slow down. 

&lt;ul&gt;
&lt;li&gt;At the same time, we looped through all of the keys in Redis and collected all of the rpush ones. These included all delivered and undelivered keys. There were 1.2 million rpush keys so this process took about 30 mins. We used the below script:
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;redis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;redis&lt;/span&gt;
&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;key_collection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;"0"&lt;/span&gt;
  &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;
  &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt;
  &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;key_collection&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'rpush:notifications'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;scan&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Once we had the keys collected we double checked that they were the keys we wanted and then we deleted them ALL in batches of 10 using this code:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;key_collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each_slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;del&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Once the keys were gone, we double checked the count and then added back the iOS cert to Heroku. &lt;/li&gt;
&lt;li&gt;After Heroku restarted, we ran a test to confirm that the notifications were back to sending and that we were recording delivered notifications correctly again in Redis. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#impact"&gt;
  &lt;/a&gt;
  Impact
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#comment-creation"&gt;
  &lt;/a&gt;
  Comment Creation
&lt;/h3&gt;

&lt;p&gt;The comment creation flow on the frontend was broken for 30 hours after the UserSettings PR was deployed on July 8th. However, comment creation levels remained steady.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;irb(main):001:0&amp;gt; Comment.where(created_at: 36.hours.ago..Time.now).count
=&amp;gt; 762
irb(main):002:0&amp;gt; Comment.where(created_at: 72.hours.ago..36.hours.ago).count
=&amp;gt; 857
irb(main):003:0&amp;gt; Comment.where(created_at: 108.hours.ago..72.hours.ago).count
=&amp;gt; 852
irb(main):004:0&amp;gt; Comment.where(created_at: 144.hours.ago..108.hours.ago).count
=&amp;gt; 756
irb(main):005:0&amp;gt; Comment.where(created_at: 180.hours.ago..144.hours.ago).count
=&amp;gt; 587
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In total, there were 934 comments that were affected by the broken frontend interface. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jjPZCF_T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3csl8linhu5fzipww4gq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jjPZCF_T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3csl8linhu5fzipww4gq.png" alt="Honeycomb.io graph showing a total count of 934 comments over a 30 hour period"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#push-notifications"&gt;
  &lt;/a&gt;
  Push Notifications
&lt;/h3&gt;

&lt;p&gt;Given DEV is early on in its mobile journey, only 0.2% of our users have registered devices that are able to receive push notifications. This means that only 0.2% of our users were affected by this incident. We consider ourselves lucky that we were able to expose some of these issues and have this incident remain very contained. &lt;/p&gt;

&lt;p&gt;Since the numbers of users affected was small, we decide to proactively reach out to all of those folks via email to apologize and explain why they &lt;em&gt;might&lt;/em&gt; have received erroneous notifications. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learnings"&gt;
  &lt;/a&gt;
  Learnings
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#large-prs"&gt;
  &lt;/a&gt;
  Large PRs
&lt;/h3&gt;

&lt;p&gt;Large PRs naturally come with more risk. The bug that kicked off this stream of events was a small change in a very large PR that got missed by multiple folks. For starters, the diff for the line was not particularly helpful in recognizing the change that caused the issue. In addition, there were so many lines that it was easy to overlook. Breaking down PRs is one way to prevent this. &lt;/p&gt;

&lt;p&gt;However, there are times when large, wide spread changes need to be made and in those cases you have to rely on your test suite. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#missing-tests"&gt;
  &lt;/a&gt;
  Missing tests
&lt;/h3&gt;

&lt;p&gt;The feature that broke was completely untested. Had we been testing that feature properly I think there is a good chance the bug could have been caught. Immediately after pushing the hotfix &lt;a href="https://github.com/forem/forem/pull/14187"&gt;I added a test&lt;/a&gt; to ensure this never happens again. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#technical-feature-education"&gt;
  &lt;/a&gt;
  Technical feature education
&lt;/h3&gt;

&lt;p&gt;After fixing the bug, none of us working on the problem were well educated about how our Push Notification systems worked. Being late on a Friday, we skimmed the code and concluded we would be good to go. This ended up being the wrong assumption as we later learned Saturday that push notifications, unlike app ones, are stored and enqueued via Redis. I think it's more important than ever that we are somehow sharing and educating each other about some of these larger features as we roll them out. &lt;/p&gt;

&lt;p&gt;Thankfully, we do &lt;a href="https://docs.forem.com/backend/push-notifications/"&gt;have some great Push Notification documentation&lt;/a&gt; but it was never sought out during the incident. Is there a way we can make docs like this more visible? During the incident we were all heads down in the code, should we maybe have some sort of URL link in the code to the docs?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#being-more-intentional"&gt;
  &lt;/a&gt;
  Being more intentional
&lt;/h3&gt;

&lt;p&gt;I could have very easily reached out to our mobile team on Friday evening to double check that we were in a good state for Push Notifications. Once again, the whole Friday evening and wanting to be done caused me to accept my assumptions rather than challenge and check them. &lt;/p&gt;

&lt;p&gt;One easy way to prevent something like this is to use a checklist. A checklist (heavily used in aviation because it has been shown to be key in preventing incidents,) is an easy way to make sure you never miss something and are deliberate and intentional with your decisions. We have great checklists for handling Heroku incidents in our internal Gitbook. However, we don't have a general incident on-call checklist which we plan to add.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#incident-response"&gt;
  &lt;/a&gt;
  Incident Response
&lt;/h2&gt;

&lt;p&gt;Before I dive into specifics, I want to point out that this is the first larger incident we have had in a while. Incidents being rare is GREAT! But, it also means that our incident response was a bit rusty and our documented incident processes were a bit out of date to handle this situation. Going forward we will be taking a closer look at all of these things to ensure we are keeping them relevant and useful based on the current state of our application and team. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#broken-comment-creation-reporting-flow"&gt;
  &lt;/a&gt;
  Broken Comment Creation Reporting Flow
&lt;/h3&gt;

&lt;p&gt;The initial comment creation problem was reported by a DEV user via a GitHub issue and seen about 11 hours later by our internal engineering team. GitHub Issues are naturally not a very urgent form of reporting for us since they are handled during working hours. One way we could improve this flow would be to further communicate that urgent support issues need to be emailed to &lt;code&gt;yo@forem.com&lt;/code&gt;. Our customer success team is always monitoring these channels diligently and could more quickly triage and escalate an issue to the team. &lt;/p&gt;

&lt;p&gt;Manual reporting aside, ideally, we should have caught this programmatically with our monitoring by alerting on the increased HTTP request errors that were detected.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wLS6JCOl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://forem.team/remoteimages/uploads/articles/ianj96377wcnqd10q0l7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wLS6JCOl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://forem.team/remoteimages/uploads/articles/ianj96377wcnqd10q0l7.png" alt="Datadog graphs showing elevated error rates"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Going forward, we plan to set up a monitor to alert us for these changes so that we are the first to find out, rather than relying on users reporting the issue to us. With the proper monitor in place, we could have caught this within a couple of hours instead of over a day. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#broken-push-notifications-reporting-flow"&gt;
  &lt;/a&gt;
  Broken Push Notifications Reporting Flow
&lt;/h3&gt;

&lt;p&gt;We responded to the broken comment creation issue immediately when it was surfaced, however, the followup push notification issues were not. Our engineer correctly pinged the #emergency channel when he realized that we were having problems with notifications but did not escalate the issue and wake up the on-call dev via PagerDuty. &lt;/p&gt;

&lt;p&gt;One way we could streamline this process would be to see if we could set up our #emergency Slack channel to automatically ping PageDuty when a message is posted. Another option is address some of our incident response rustiness by better educating the team on our desired incident response flows. This probably needs to be a reoccurring training that happens periodically so as to prevent processes and knowledge from getting stale as our systems evolve. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#technical-remediation"&gt;
  &lt;/a&gt;
  Technical Remediation
&lt;/h3&gt;

&lt;p&gt;One delay we encountered when trying to fix this issue was that the Rpush keys were stored in the same Redis instance as our Rails cache. Given our Rails cache is massive and contains 4+ million keys, looping through all of them to find only the Rpush keys was tedious and took a while. That cache is also very active which caused us to hit some timeouts when we were trying to perform heavier operations on it. &lt;/p&gt;

&lt;p&gt;We could have mitigated this friction by having either a separate Redis instance for Rpush OR by having those keys in a separate database away from our Rails cache keys. Going forward, as we grow our mobile platforms, I think we should make one of the above changes to ensure that we have easy access to these keys and records. It will also ensure that as we grow and scale push notifications we don't have to worry about impacting other systems like our core Rails app. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thanks-everyone"&gt;
  &lt;/a&gt;
  Thanks Everyone 🤗
&lt;/h2&gt;

&lt;p&gt;A lot of people gave up their personal time to come together on Friday and Saturday to mitigate and fix these issues. I truly appreciate the amazing team we have at Forem and their dedication to this software. We learned a lot about our systems in the process which ensures that this incident will not go to waste. I hope others can learn from this as well.&lt;/p&gt;

</description>
      <category>incident</category>
      <category>retro</category>
      <category>postmortem</category>
    </item>
    <item>
      <title>Why Coding Is Crucial To The Future Of Business</title>
      <author>CodeCast</author>
      <pubDate>Wed, 14 Jul 2021 20:24:23 +0000</pubDate>
      <link>https://dev.to/codecast/why-coding-is-crucial-to-the-future-of-business-59gn</link>
      <guid>https://dev.to/codecast/why-coding-is-crucial-to-the-future-of-business-59gn</guid>
      <description>&lt;p&gt;Knowing how to understand even basic code can seem foreign and confusing to someone who has never approached it before. Programming as a whole can be intimidating to approach because it’s vast and varies greatly from industry to industry. As we move forward, the need for people who can code continues to increase in demand. But what makes it such a critical part of business?&lt;/p&gt;

&lt;p&gt;Gone are the days of paper and pen. Even if you’re a small business and you prefer more traditional approaches to some aspects, it’s impossible to avoid doing something online. But for the most part, almost every technical aspect of business is now done online or via technology, and more specifically, through different kinds of software.&lt;/p&gt;

&lt;p&gt;Of course, this means that most businesses need to have a developer at some point. But how does coding fit into this picture outside of requiring developers?&lt;/p&gt;

&lt;p&gt;Knowing The What’s and The Why’s&lt;br&gt;
Even if your business doesn’t have any developers permanently employed, knowing how to communicate what you need from developers is incredibly important. While you don’t need to know how to code, knowing how the moving parts of development works will greatly impact your ability to ask for what you want. Additionally, being able to have a solid understanding of what is going on on the development side of your business will make the communication between yourself and your team's way more fluid.&lt;/p&gt;

&lt;p&gt;In the current climate, it’s nearly impossible to have an effective business without an online presence, and the demand for a solid online presence is only likely to increase. Understanding the behind-the-scenes will not only aid in communication within large companies but allow smaller businesses to be able to take advantage of the online market effectively. Even basic coding courses can allow you to work effectively with low-code platforms to be able to create the necessary pieces for your business.&lt;/p&gt;

&lt;p&gt;Small things like being able to update your own website as needed without having to outsource or rely on external help will impact the efficiency of your business, as well as frankly make you appear way more professional. &lt;/p&gt;

&lt;p&gt;Realistic Timelines and Goals&lt;br&gt;
Coming up with ideas for your business and goals for your company's growth is an essential part of running a good business. However, often there can be a strong disconnect between what someone wants done and how to get it done. This issue is usually seen by looking at projected timelines. Perhaps you have a new idea for your business that you want to be able to get out by the end of summer, and you approach the developers with that information. The developers then respond telling you that with the current workload, that deadline is unrealistic.&lt;/p&gt;

&lt;p&gt;Being able to have a sense of what goes into developing something will allow you to create more realistic timelines, and allow you to better communicate with your developers to create a timeline that works for both them and the business. There are a lot of industries that are known for putting a lot of pressure on their developers to meet set deadlines that sometimes are just not possible. &lt;/p&gt;

&lt;p&gt;If you’re familiar with the launch of Cyberpunk 2077, you are aware of the type of issues that development timelines can create. Cyberpunk was delayed a total of three times with the launch initially anticipated in April of 2020 and was eventually released on December 10th, 2020. While developmental delays are nothing new in the gaming industry, the reason this specific game caught so much attention for its delays was that the game was being advertised and hyped way before it was ready to do so. Some developers even came forward to explain what they believed went wrong. The greater the people in charge’s ability to understand what goes into developing something, the greater the chance of your timelines being more accurate for the company as a whole.&lt;/p&gt;

&lt;p&gt;Cyberpunk was unfortunately released with a lot of issues that they are still fixing today. In addition, they were forced to drop features that had previously been heavily advertised, upsetting a lot of people who had pre-ordered the game. While this is a debated topic in the gaming industry and there is a lot of speculation around what went wrong, I chose to use this example because it showcases the importance of good communication and understanding of the moving parts of the business in all aspects. &lt;/p&gt;

&lt;p&gt;Problem Solving Skills&lt;br&gt;
Knowing how to solve problems effectively is an important skill and one that isn’t as common as people might think. While we have an entire blog coming up about how to think like a programmer, for now, know that coding teaches you how to problem-solve effectively. Once you get past learning the language, an incredibly large volume of writing code is just solving the how and the why. You need to figure out how to make something work despite not having any pieces, or perhaps only broken pieces. &lt;/p&gt;

&lt;p&gt;Taking some basic coding courses can help sharpen your brain into learning to think in different ways when looking at a problem. It’ll train you to break things down and view things from different perspectives. Considering a lot of businesses exist to help people overcome a problem or fill in a need, it’s easy to understand why business and problem solving go hand in hand.&lt;/p&gt;

&lt;p&gt;Coding is also a much more creative field than people think. Often you’re presented with an idea, but how you get from point a to point b is entirely up to you. You can give a large group of developers the exact same problem, and most of them would solve it differently from one another. Learning to approach things in a creative way to come up with solutions is what developers succeed at.&lt;/p&gt;

&lt;p&gt;Patience and Resilience&lt;br&gt;
If you’re going to code, you’re going to need patience, and to be very comfortable with being stuck. Even the most senior developers get stuck on problems for days on end, completely unsure of how to proceed. This was personally one of the most difficult things I had to learn to adjust to when I began to code. Learning how to separate being stuck and being “bad at something”, is a difficult skill to master. Coding can have a way of making you feel incredibly dumb.&lt;/p&gt;

&lt;p&gt;But the more you do it, the more you realise that you learn a lot in those moments you feel like you know nothing. And beyond the actual code, you learn how to be patient and push through those moments. This is a skill that will help anyone in any aspect of their life, but in the ever-changing world of business, it can be invaluable.&lt;/p&gt;

&lt;p&gt;Regardless of what business or industry you belong to, knowing even basic coding skills can make you that much more valuable. The online world is only growing as time goes on and with it the need for developers.&lt;/p&gt;

</description>
    </item>
    <item>
      <title># Making Your Website More Accessible. What does it mean? </title>
      <author>Pamela Torres-Rocca</author>
      <pubDate>Wed, 14 Jul 2021 20:23:36 +0000</pubDate>
      <link>https://dev.to/pamela454/making-your-website-more-accessible-what-does-it-mean-1hjk</link>
      <guid>https://dev.to/pamela454/making-your-website-more-accessible-what-does-it-mean-1hjk</guid>
      <description>&lt;p&gt;There are modifications that you can make to your website that makes it easier for users with a handicap to access. This is called accessibility. Some of these modifications include using appropriate HTML elements such as Title and Header. These changes often align with better Search Engine Optimization results which enables your page to be found in searches and helps to drive more traffic to the page. &lt;br&gt;
   You can test how accessible your website is in order to make the changes that will have the greatest impact on accessibility. One way to do this is using the WebDeveloper extension tool for Chrome, can be downloaded at &lt;a href="https://chrome.google.com/webstore/detail/web-developer/bfbameneiokkgbdmiekhjnmfkcnldhhm?hl=en-US"&gt;https://chrome.google.com/webstore/detail/web-developer/bfbameneiokkgbdmiekhjnmfkcnldhhm?hl=en-US&lt;/a&gt;. Another way to do this specifically for visually impaired users is try out your application using a screen reader. Screen readers read the web content to the user. On a Mac computer this is done using VoiceOver &lt;a href="https://support.apple.com/guide/voiceover/browse-webpages-vo27974/10/mac/11.0"&gt;https://support.apple.com/guide/voiceover/browse-webpages-vo27974/10/mac/11.0&lt;/a&gt;. On a Windows computer this is done using Narrator &lt;a href="https://www.pcmag.com/how-to/how-to-use-windows-10s-narrator-to-read-your-screen-aloud"&gt;https://www.pcmag.com/how-to/how-to-use-windows-10s-narrator-to-read-your-screen-aloud&lt;/a&gt;. &lt;br&gt;
    Accessibility is particularly important for applications in the healthcare space as everyone needs to access healthcare services. Such an essential service must allow users to locate healthcare services in order to receive the care that they need. One application that I wrote allowed patients to ask a question regarding their healthcare and receive a specialty specific response. I made a few changes to the landing page to make it easier for a screen reader to read the content. The following is what the landing page initially looked like: &lt;/p&gt;

&lt;p&gt;Welcome Page Prior to Accessibility Changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;style&amp;gt;
      body {
      background-image: url('&amp;lt;%= asset_path 'camilo-jimenez-vGu08RYjO-s-unsplash.jpg' %&amp;gt;');
      background-size: cover;
      }
      .center {
        justify-content: center;
      }
      .navbar-custom {
        background-color: #D8DEEE;
      }
      .sign-in {
        border: 0;
        border-radius: 1rem;
        box-shadow: 0 0.5rem 1rem 0 rgba(0, 0, 0, 0.1);
        background-color: #D8DEEE;
      }
      .card-signin .card-title {
        margin-bottom: 2rem;
        font-weight: 300;
        font-size: 1.5rem;
      }
      .card-signin .card-body {
        padding: 2rem;
      }

&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;div class="text-center center font-weight-bold"&amp;gt;
  &amp;lt;nav class="navbar navbar-custom sticky-top center"&amp;gt;&amp;lt;h1&amp;gt;Welcome to Ask Your Health Question&amp;lt;/h1&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;% if flash[:notice] %&amp;gt;
&amp;lt;div class="notice"&amp;gt;&amp;lt;h2&amp;gt;&amp;lt;%= flash[:notice] %&amp;gt;&amp;lt;/h2&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;% end %&amp;gt;
 &amp;lt;/div&amp;gt;
&amp;lt;/nav&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div class="container-fluid mx-auto text-nowrap text-dark" style="width: 500px;"&amp;gt;
  &amp;lt;table class="table table-striped"&amp;gt;
    &amp;lt;thead&amp;gt;
      &amp;lt;tr&amp;gt;

&amp;lt;%= form_for(:session, url: "sessions/create", html: { autocomplete: "new-password" })   do |f| %&amp;gt;
&amp;lt;br&amp;gt;
&amp;lt;div class="col sign-in card-title card-body"&amp;gt;
&amp;lt;h3&amp;gt;Sign in if you are a Member&amp;lt;/h3&amp;gt;
&amp;lt;div class="field"&amp;gt;&amp;lt;%= label :name, "Enter your email"%&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
  &amp;lt;%= f.text_field :email, :class =&amp;gt; "span5"  %&amp;gt;
&amp;lt;/div&amp;gt;&amp;lt;br&amp;gt;

&amp;lt;div class="field"&amp;gt;&amp;lt;%= label :password, "Enter your password" %&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
  &amp;lt;%= f.password_field :password, :class =&amp;gt; "span5"  %&amp;gt;
&amp;lt;/div&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;

&amp;lt;div class="actions"&amp;gt;
  &amp;lt;%= f.submit "Sign In"  %&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;

&amp;lt;h3&amp;gt;Create a New Account&amp;lt;/h3&amp;gt;

&amp;lt;%= link_to('Login with Facebook!', '/auth/facebook') %&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
&amp;lt;%= link_to('Create a New Account as a Patient', 'users/new_patient') %&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
&amp;lt;%= link_to('Create a New Account as a Physician', 'users/new_physician') %&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;

  &amp;lt;/table&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With a quick change to include a descriptive title element without an additional header .&lt;/p&gt;

&lt;p&gt;Welcome Page After Accessibility Changes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;style&amp;gt;
      body {                     
      background-image: url('&amp;lt;%= asset_path 'camilo-jimenez-vGu08RYjO-s-unsplash.jpg' %&amp;gt;');
      background-size: cover;
      }
      .center {
        justify-content: center;
      }
      .navbar-custom {
        background-color: #D8DEEE;
      }
      .sign-in {
        border: 0;
        border-radius: 1rem;
        box-shadow: 0 0.5rem 1rem 0 rgba(0, 0, 0, 0.1);
        background-color: #D8DEEE;
      }
      .card-signin .card-title {
        margin-bottom: 2rem;
        font-weight: 300;
        font-size: 1.5rem;
      }
      .card-signin .card-body {
        padding: 2rem;
      }

&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;div class="text-center center font-weight-bold"&amp;gt;
    &amp;lt;nav class="navbar navbar-custom sticky-top center"&amp;gt;&amp;lt;/nav&amp;gt;
    &amp;lt;title&amp;gt;Company Name: Welcome to Ask Your Health Question &amp;lt;%= content_for(:title) %&amp;gt;&amp;lt;/title&amp;gt; &amp;lt;%#changed to a title tag%&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;% if flash[:notice] %&amp;gt;
&amp;lt;div class="notice"&amp;gt;&amp;lt;h2&amp;gt;&amp;lt;%= flash[:notice] %&amp;gt;&amp;lt;/h2&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;% end %&amp;gt;
 &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div class="container-fluid mx-auto text-nowrap text-dark" style="width: 500px;"&amp;gt;
  &amp;lt;table class="table table-striped"&amp;gt;
    &amp;lt;thead&amp;gt;
      &amp;lt;tr&amp;gt;

&amp;lt;%= form_for(:session, url: "sessions/create", html: { autocomplete: "new-password" })   do |f| %&amp;gt;
&amp;lt;div class="col sign-in card-title card-body"&amp;gt;
&amp;lt;h3&amp;gt;Sign in if you are a Member&amp;lt;/h3&amp;gt;
&amp;lt;br&amp;gt;
&amp;lt;div class="field"&amp;gt;&amp;lt;%= label :name, "Enter your email"%&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
  &amp;lt;%= f.text_field :email, :class =&amp;gt; "span5"  %&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;div class="field"&amp;gt;&amp;lt;%= label :password, "Enter your password" %&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
  &amp;lt;%= f.password_field :password, :class =&amp;gt; "span5"  %&amp;gt;
&amp;lt;/div&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;

&amp;lt;div class="actions"&amp;gt;
  &amp;lt;%= f.submit "Sign In"  %&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;% end %&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;

&amp;lt;h3&amp;gt;Create a New Account&amp;lt;/h3&amp;gt;

&amp;lt;%= link_to('Login with Facebook!', '/auth/facebook') %&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
&amp;lt;%= link_to('Create a New Account as a Patient', 'users/new_patient') %&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
&amp;lt;%= link_to('Create a New Account as a Physician', 'users/new_physician') %&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;

  &amp;lt;/table&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Make an Open Source Github Contribution</title>
      <author>Maxine Meurer</author>
      <pubDate>Wed, 14 Jul 2021 20:04:41 +0000</pubDate>
      <link>https://dev.to/mmeurer00/how-to-make-your-first-github-contribution-2fm4</link>
      <guid>https://dev.to/mmeurer00/how-to-make-your-first-github-contribution-2fm4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#1"&gt;Introduction&lt;/a&gt;&lt;br&gt;
  &lt;a href="#2"&gt;How To&lt;/a&gt;&lt;br&gt;
  &lt;a href="#3"&gt;Conclusion&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;In this post, we'll go over the basics of how to make your first Github contribution. If you would like to test out your skills, and make a test contribution, head over to &lt;a href="https://github.com/mmeurer00/mergeMe"&gt;Merge Me&lt;/a&gt;, an open source repository that allows you to practice making your first pull/merge requests. &lt;em&gt;You'll find these same directions once you open up the index.html file.&lt;/em&gt; Let's get started!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-to"&gt;
  &lt;/a&gt;
  How To &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Fork and clone the repository to your local environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start by making a pull request. This will keep all the files locally up-to-date with the remote repository, in the circumstance other developers you may be working with have made any new changes. To do this, start off by confirming you are in the main branch, and then in your command line type:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;user@Users-MacBook_Air: git pull origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Running this command will pull all the files from the remote branch, updating your local branch to match any changes made. It's always a good idea to do this, especially when working with others as you don't know what changes could have been made since you last accessed the branch.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;After you've confirmed everything is up-to-date, you're going to check out a new branch, this will be your staging area. If you're adding a new feature to any application, you want to preserve its original state, this avoids big bugs and annoyed developers down the line. To do this, in the command line type:
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;user@Users-MacBook_Air: git checkout -b (YOUR BRANCH NAME)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;When naming your branch, it's good practice to name it after what you're doing/in relation to the changes being made. So, if you were to make a pull request to add a README.md file into a repo, you might name that branch 'readme-md'.&lt;br&gt;
If you've done it correctly, you should have received the following message in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;switched to new branch '(YOUR BRANCH NAME)'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Once you are inside your newly created branch, you can finally add in your own code! So, contribute! Go! Be Free!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After you've made the most meaningful contributions of your life, you're going to want to save all those beautiful changes. Now we're going to do something that should hopefully feel a little familiar. In your terminal type:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;user@Users-MacBook_Air: git add .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Followed by, you guessed it, 'git commit'. While you may not always make the most meaningful commit messages for your own code/repositories, (even though you should), you ALWAYS have to make meaningful commit messages when contributing to another developer's code or in your work place. Not only is it professional and coder common courtesy, it also gives an idea as to what was done with the code at that staging period. This helps decrease debugging time and everyone else will understand what the heck is going on inside the application.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;user@Users-MacBook_Air: git commit -m "A MEANINGFUL COMMIT MESSAGE EXPLANING WHAT YOU ADDED"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;WAIT! DON'T PUSH IT YET! (I had to add this in here for those of us who like to jump ahead sometimes) Now that I hopefully have everyone's attention, you never want to just push your contribution up to the main branch. This goes back the coder common courtesy and professionalism explained before. Not to mention, you may have some unhappy developers if you overwrote/added code that wasn't approved of first.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To avoid this, you'll instead push your changes to your newly created branch. This can be done by adjusting the good ol' 'git push' command to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;user@Users-MacBook_Air: git push origin (YOUR BRANCH NAME)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should receive a message back in your terminal confirming that your code was pushed up to your newly created branch.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If you head on back over to the repository you're working on, you should see new notification that the repository was recently updated, along with your branch name. There should also be a button that says 'Compare &amp;amp; pull request'. Go ahead and click it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You should be lead to a page that displays your commit message! You'll see an option to leave a message underneath your commit. If you are working with others, it is great coder common courtesy to leave a nice little message further detailing your commit and why you added it in the first place. Again, this avoids bugs and confusion later.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;After you've left a message, you're going to create a pull request. You should see a 'Create pull request' button underneath the message box, give that a click. By doing this, you're putting a request to the repository owner that you would like to push your changes to the main branch of the repository. Doing so will also notify all the other developers working on this repository that a new push request has been made. You can even assign reviewers to be notified of your push request, which can be done under the 'reviewers' tab.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If everything went smoothly and you contributed something (somewhat) meaningful, your code will get pushed, merging with the main branch.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Congratulations, you just made your first contribution. Do a dance to celebrate.🎉&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It doesn't seem so bad after all, does it? If you followed along with this post while making your first contribution, awesome job! If you haven't made yours yet, get on out there and do it! Try it out on the &lt;a href="https://github.com/mmeurer00/mergeMe"&gt;Merge Me&lt;/a&gt;, where you can collaborate with other developers like you! &lt;/p&gt;

&lt;p&gt;I hope this blog post has helped you in your contribution journey, as much as I hope to see your contributions in Merge Me, happy coding! :) &lt;/p&gt;

</description>
      <category>github</category>
      <category>beginners</category>
      <category>contributorswanted</category>
      <category>html</category>
    </item>
    <item>
      <title>React Preview - Instant, live preview of components in VS Code</title>
      <author>François Wouts</author>
      <pubDate>Wed, 14 Jul 2021 19:53:56 +0000</pubDate>
      <link>https://dev.to/fwouts/react-preview-instant-live-preview-of-components-in-vs-code-of</link>
      <guid>https://dev.to/fwouts/react-preview-instant-live-preview-of-components-in-vs-code-of</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/S9IEC9GcoAg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Hi everyone!&lt;/p&gt;

&lt;p&gt;I've been working on React Preview for a few months. It's currently only available for Visual Studio Code, but an IntelliJ/WebStorm and CLI versions are also in the works and coming soon (you can subscribe to be notified &lt;a href="https://signup.reactpreview.com"&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The plan is for React Preview to be a freemium product. The current features are all free, with more advanced paid features coming soon (e.g. integration with Storybook, mosaic of all your components, preview in multiple viewports, etc).&lt;/p&gt;

&lt;p&gt;Install it here ➡️➡️➡️ &lt;a href="https://marketplace.visualstudio.com/items?itemName=zenclabs.reactpreview"&gt;https://marketplace.visualstudio.com/items?itemName=zenclabs.reactpreview&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please don't hesitate to send through bug reports &lt;a href="https://github.com/zenclabs/reactpreview/issues"&gt;on GitHub&lt;/a&gt; and let me know what you think in the comments!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Free hosting using Heroku
</title>
      <author>Shreyas Pahune</author>
      <pubDate>Wed, 14 Jul 2021 19:21:00 +0000</pubDate>
      <link>https://dev.to/shreyazz/free-hosting-using-heroku-1g39</link>
      <guid>https://dev.to/shreyazz/free-hosting-using-heroku-1g39</guid>
      <description>&lt;p&gt;Hey readers 👋🏻,&lt;br&gt;
I hope you all are doing fine, in this blog we are going to discuss about hosting and how to host our own discord bot, which we made in my &lt;a href="https://dev.to/shreyazz/make-a-discord-bot-in-just-30-lines-of-code-44el"&gt;previous blog&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;We are going to use &lt;strong&gt;Heroku&lt;/strong&gt; to host our bot. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-do-i-mean-when-i-say-host-a-discord-bot"&gt;
  &lt;/a&gt;
  What do I mean when I say 'HOST' a discord bot?
&lt;/h3&gt;

&lt;p&gt;So basically you cant run the program which you made for 24x7 and 365 days, so we need a server to do that.&lt;/p&gt;

&lt;p&gt;The hosting platform has a lot of servers which will serve our discord bot for 24x7 and 365 days, so you and your friends can anytime use it anytime!!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lets-host-it-now-"&gt;
  &lt;/a&gt;
  Let's host it now 🤖 :
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Sign-up or Log-in to Heroku :&lt;/strong&gt;

&lt;ol&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HXfuWXUq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uyql0ssmkmuo0210ii1u.PNG" alt="login"&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Create a new app :&lt;/strong&gt;

&lt;ol&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7iDJ1w7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrt9su6x0viar8zlndnh.PNG" alt="second"&gt;&lt;/li&gt;
&lt;li&gt;Click on the new button on the &lt;code&gt;top-right corner&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Click on Create New App&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Name your project and select a region:&lt;/strong&gt;

&lt;ol&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mZh12Egh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efxt00tk9z7rqr2dsstt.PNG" alt="third"&gt;&lt;/li&gt;
&lt;li&gt;Click on Create App&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Now you have to push the source code on GitHub repo.

&lt;ol&gt;
&lt;li&gt;Make sure source code does not contain your discord bot TOKEN or any other API key.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Now you will have this screen:

&lt;ol&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--unWWjREM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/teajlym42ngt3g66uv01.PNG" alt="connect"&gt;&lt;/li&gt;
&lt;li&gt;Click on the &lt;code&gt;Connect to GitHub&lt;/code&gt; button.&lt;/li&gt;
&lt;li&gt;Then select the repository which you created.&lt;/li&gt;
&lt;li&gt;Once the repo is connected, just press on &lt;code&gt;Enable Automatic Deploys&lt;/code&gt;, which will help us to deploy the new version of our bot automatically whenever the repo is updated.&lt;/li&gt;
&lt;li&gt; Refer to this image 👇🏻&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FDqvxVPr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bo686ov9x1m7a56fe1gd.PNG" alt="six"&gt;
&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Then go the settings tab:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click on &lt;code&gt;Reveal Config Vars&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;👇🏻 &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wVZOLagJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vzmhw8inm98fo6v56o1o.PNG" alt="seven"&gt;
&lt;/li&gt;
&lt;li&gt;Inside the config vars enter your key and value pair of your API KEY and Discord Bot's Token. 👇🏻 &lt;/li&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rlEoEFv2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czzp1vx5rznfizn5x80g.PNG" alt="eight"&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Add a BuildPack:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;BuildPack are scripts that are run when your bot will be deployed. They are used to install dependencies for your bot and configure your environment.&lt;/li&gt;
&lt;li&gt;Click on  add BuildPack 👇🏻 &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FVpmkpJH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dnwltj1yy5h4wfiaiblb.PNG" alt="buildpack"&gt;
&lt;/li&gt;
&lt;li&gt;Then click on Node.JS 👇🏻 as our bot is made using JS and Node Modules. &lt;/li&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RBJgcccx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qwn3j784kudilbrwvo8e.PNG" alt="add"&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;After these steps, go to the home directory of your project and make a new File with the name of &lt;code&gt;Procfile&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;Procfile&lt;/code&gt; should contain &lt;code&gt;worker node &amp;lt;Source-folder-Name&amp;gt;/&amp;lt;file-which-has-bot's-code&amp;gt;&lt;/code&gt; in this case, it will be &lt;code&gt;worker node src/bot.js&lt;/code&gt;  .&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Procfile&lt;/code&gt; will help the Heroku's server to run our bot.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Now push the new change to the repository.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Go to the deploy tab:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Now click on the &lt;code&gt;Deploy Branch&lt;/code&gt; button.&lt;/li&gt;
&lt;li&gt;You will see a green check mark which will ensure you that there are no errors while deploying 👇🏻.&lt;/li&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yYYLUyZz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5i73dwjv7fe8ac8f809.PNG" alt="check"&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Go to the resource tab:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Refresh the page once.&lt;/li&gt;
&lt;li&gt;You can see 2 Dynos 👇🏻&lt;/li&gt;
&lt;li&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kOzvOm7P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/03ld4n7s45gnk8w8m26l.PNG" alt="dyno"&gt;
Click on the pen icon and switch off the &lt;code&gt;Web&lt;/code&gt; and Switch on the &lt;code&gt;Worker&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Click on more and then click on view logs.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;That's it you have successfully hosted your discord bot, and now you and your friends can use the bot anytime you want 🎉!!&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Thank you so much for reading the whole blog and if you liked it, do share it with your developer friends 💻!!&lt;/p&gt;




&lt;p&gt;In case you want to learn how to make a discord bot(my previous bog's topic)and how to host it on Heroku, do check out my talk 🎉!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=FAbGyOPxw-U"&gt;Make a Discord Bot using Discord.js and host it online on Heroku&lt;/a&gt;&lt;/p&gt;

</description>
      <category>heroku</category>
      <category>watercooler</category>
      <category>javascript</category>
      <category>node</category>
    </item>
  </channel>
</rss>
