<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Upload/Download/Delete files on AWS S3 bucket using node.js</title>
      <author>yashvant vala</author>
      <pubDate>Tue, 14 Dec 2021 04:44:31 +0000</pubDate>
      <link>https://dev.to/yashvant/uploaddownloaddelete-files-on-aws-s3-bucket-using-nodejs-50ln</link>
      <guid>https://dev.to/yashvant/uploaddownloaddelete-files-on-aws-s3-bucket-using-nodejs-50ln</guid>
      <description>&lt;p&gt;What is aws s3?&lt;/p&gt;

&lt;p&gt;Aws s3 stands for simple storage service provided by amazon web service.&lt;/p&gt;

&lt;p&gt;Here are some of the use cases of aws s3&lt;/p&gt;

&lt;p&gt;Static Website Hosting&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;you can host any static web site which is built in (react,nextjs,angular, vue, gatsby,remix).&lt;br&gt;
Archive Data&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;you can archive much of the data with low cost.&lt;br&gt;
Backups (most used)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;you can store your backups like db backup every day using cron job.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Also there are some additional advantage of it which you can explore in &lt;a href="https://s3.console.aws.amazon.com/s3/home"&gt;aws console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's understand how s3 works.&lt;/p&gt;

&lt;p&gt;In order to use s3, you need to create a bucket where you want to store anything. you can compare it to folder where all files are stored.&lt;/p&gt;

&lt;p&gt;Each bucket has unique name and you can create folder/files in the bucket. It stores data as key value pair. We will see in further that how it stores data in key value pair. S3 provides storage limit 0 to 5 TB.&lt;/p&gt;

&lt;p&gt;Generally Root user of aws creates Identity and Access Management (IAM) user to provide access of aws with some rules.&lt;/p&gt;

&lt;p&gt;IAM user can create bucket, and also can perform some operations on it.&lt;/p&gt;

&lt;p&gt;In order to create IAM user, you need to create account on &lt;a href="https://aws.amazon.com/"&gt;aws&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have created account, you can find IAM user creation option. After creating IAM user, create the s3 bucket using s3 option. See the below image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oI1Yaa18--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10qv4ynu6z9q2jvqs4od.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oI1Yaa18--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10qv4ynu6z9q2jvqs4od.jpg" alt="S3 Scereen" width="880" height="489"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you click on s3 you will find following screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--74sJWRmb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8qqbirvq2i359qrz6ub.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--74sJWRmb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8qqbirvq2i359qrz6ub.jpg" alt="Image description" width="880" height="173"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the create bucket and fill all the data, You will also need to select rules like permissions and all.&lt;/p&gt;

&lt;p&gt;After creating a bucket aws will provide you Access key id and Secret access key.&lt;/p&gt;

&lt;p&gt;Save those key in your machine because we will need those keys in order to perform any actions on it.&lt;/p&gt;

&lt;p&gt;Now create a new nodejs project using following command. (I assume that you have downloaded node in your machine).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;-y is a flag which is used when you want to give yes to all questions which is asked when you create node project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Install few dependencies to create an app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i express dotenv express-fileupload
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above dependecies are used to create express server and upload files. dotenv file is for storing the private keys provided by aws.&lt;/p&gt;

&lt;p&gt;Now create index.js file with following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require("express");
const app = express();
const fileUpload = require("express-fileupload");

//express middlewares
app.use(fileUpload({
    useTempFiles:true,
    tempFileDir:"/tmp"
}));



const PORT = process.env.PORT || 4000;
app.listen(PORT,()=&amp;gt;console.log(`server is running on port ${PORT}`));

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will need express file upload middleware to upload files, we also can create own functionality to create temporary folder and store file in folder, once it is uploaded we can delete that folder.&lt;/p&gt;

&lt;p&gt;Let's create two folder, Rotues and utils.&lt;/p&gt;

&lt;p&gt;In routes folder we will create routes of api and we will send response based on actions, We surely can create controller folder but as of our job can be done using route.&lt;/p&gt;

&lt;p&gt;In utils (utility) folder we will create one file which is called s3.js to perform some actions based on s3.&lt;/p&gt;

&lt;p&gt;GO to routes folder and create file with .js extension, Here I have created uploadFile.js&lt;/p&gt;

&lt;p&gt;Write following thing in that file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
const router = require('express').Router();
const s3 = require("../utils/s3");

router.post("/upload",(req,res)=&amp;gt;{
    const file = req.files.file;
    s3.uploadToS3(file,(error,data)=&amp;gt;{
        if(error){
            return res.send({error:"Something went wrong."});
        }
        return res.send({message:"File uploaded successfully"});
    });
});

module.exports = router;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are having post method, We will get one file from front-end or you can use post man here.&lt;/p&gt;

&lt;p&gt;s3.uploadToS3 is the function which we will create in s3.js file to upload file, we will also return call back with data and error.&lt;/p&gt;

&lt;p&gt;Important&lt;/p&gt;

&lt;p&gt;We will need to install aws sdk dependency to perform action in aws s3&lt;/p&gt;

&lt;p&gt;So write following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i aws-sdk

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After Installing it , go to s3.js file and import following things.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const path = require('path');
const fs = require('fs');
const fileUpload = require('express-fileupload');
const aws = require('aws-sdk');

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will need to configure the aws to create connection between our app and aws.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//configure the aws environment
aws.config.update({
    accessKeyId:process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey:process.env.AWS_SECRET_ACCESS_KEY,
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above code is just used to create environment of s3.&lt;/p&gt;

&lt;p&gt;now create instance of s3 so we can use all methods of s3.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//initialize s3
const s3 = new aws.S3();

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can create our function to upload files which we are calling in our uploadFiles.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exports.uploadToS3 = (file,next) =&amp;gt;{
    const fileStream = fs.createReadStream(file.tempFilePath);
    console.log(file.tempFilePath)
    const params = {
        Bucket:process.env.AWS_BUCKET_NAME,
        Body:fileStream,
        Key:file.name
    };
    s3.upload(params,(error,data)=&amp;gt;{
        console.log(error,data);
        next(error,data);
    });
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we will need some parameters to send to s3, so s3 can know that where to upload file and in which bucket to.&lt;/p&gt;

&lt;p&gt;We will send bucket name, Body means the data which we want to upload and key which you can give any name. I will just give the file name as key name.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;s3.upload method accept parameters and based on it it return call back function of data and error.&lt;/p&gt;

&lt;p&gt;We will send data and error in our callback function, which we are getting in uploadFiles.js&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now you can go to index.js and import following things.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const uploadFiles = require("./routes/uploadFiles");

//you use this as a moddleware of routes

//our base api route will be /api/v1/*
app.use("/api/v1",uploadFiles);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So final index.js will be look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require("express");
const app = express();
const fileUpload = require("express-fileupload");

//express middlewares
app.use(express.json());
app.use(express.urlencoded({extended:true}));
app.use(fileUpload({
    useTempFiles:true,
    tempFileDir:"/tmp"
}));

//all routes
const uploadFiles = require("./routes/uploadFiles");

//route middlewares
app.use("/api/v1",uploadFiles);

//config http server
const PORT = process.env.PORT || 4000;
app.listen(PORT,()=&amp;gt;console.log(`server is running on port ${PORT}`));

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can use our api in postman. &lt;em&gt;localhost:4000/api/v1/upload&lt;/em&gt; is the url to can api.&lt;/p&gt;

&lt;p&gt;See the image below to select configuration to send file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mfRvNn3T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ju6qcc9eah6iz38340ih.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mfRvNn3T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ju6qcc9eah6iz38340ih.jpg" alt="Postman Screen" width="880" height="547"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have selected image file so it will be uploaded on s3. You Also can verify on s3 whether it is uploaded or not.&lt;/p&gt;

&lt;p&gt;Once it is uploaded we will get following metadata by s3.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ETag: 'some random string',
  Location: your url of file,
  key: 'horizontal_tagline_on_white_by_logaster.jpeg',
  Key: 'horizontal_tagline_on_white_by_logaster.jpeg',
  Bucket: your bucket name

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can store key and location in our db so in future we can select or delete anything based on key.&lt;/p&gt;

&lt;p&gt;Now we can create download and delete file functionality which is much easier.&lt;/p&gt;

&lt;p&gt;Since we need bucket name in all the parameter which we will pass in all methods, I will make and object so we don't need to write it again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const constantParams = {
    Bucket:process.env.AWS_BUCKET_NAME
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So now Our s3.js file will look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const path = require('path');
const fs = require('fs');
const fileUpload = require('express-fileupload');
const aws = require('aws-sdk');

//configure the aws environment
aws.config.update({
    accessKeyId:process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey:process.env.AWS_SECRET_ACCESS_KEY,
});

//initialize s3
const s3 = new aws.S3();

//constant params
const constantParams = {
    Bucket:process.env.AWS_BUCKET_NAME
}

//upload file to s3 bucker
exports.uploadToS3 = (file,next) =&amp;gt;{
    const fileStream = fs.createReadStream(file.tempFilePath);

    const params = {
        ...constantParams,
        Body:fileStream,
        Key:file.name
    };
    s3.upload(params,(error,data)=&amp;gt;{
        console.log(error,data);
        next(error,data);
    });
};

//download file from s3 bucket
exports.getFileFromS3 = key =&amp;gt;{
    const downloadParams = {
        Key:key,
       ...constantParams
    };
    return s3.getObject(downloadParams).createReadStream();
};

//delete file from s3 bucker
exports.deleteFileFromS3 = (key,next) =&amp;gt;{
    const deleteParams = {
        Key:key,
        ...constantParams
    };
    s3.deleteObject(deleteParams,(error,data)=&amp;gt;{

        next(error,data);
    });
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;s3.getObject method used when we want to get any file from s3&lt;/p&gt;

&lt;p&gt;s3.deleteObject method will delete the file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you can see in above code our function for download and delete is expecting the key, which we get by s3 so we can pass that key&lt;/p&gt;

&lt;p&gt;Now our uploadFiles.js file will look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const router = require('express').Router();
const s3 = require("../utils/s3");

router.post("/upload",(req,res)=&amp;gt;{
    const file = req.files.file;
    s3.uploadToS3(file,(error,data)=&amp;gt;{
        console.log("commit")
        if(error){
            return res.send({error:"Something went wrong."});
        }
        return res.send({message:"File uploaded successfully"});
    });
});

router.get("/getFile",async (req,res)=&amp;gt;{
    try {
        let fileToSend = await s3.getFileFromS3('horizontal_tagline_on_white_by_logaster.jpeg');
        fileToSend.pipe(res);
    } catch (error) {
        res.send({error:"Server Error"});
    }
});

router.delete("/deleteFile",(req,res)=&amp;gt;{
    s3.deleteFileFromS3('horizontal_tagline_on_white_by_logaster.jpeg',(error,data)=&amp;gt;{
        if(error){
            return res.send({error:"Can not delete file, Please try again later"});
        }
        return res.send({message:"File has been deleted successfully"});
    });
});

module.exports = router;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can call both download and delete api, the end point of both api will be,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;download file : localhost:4000/api/v1/getFile/:key&lt;/p&gt;

&lt;p&gt;delete file : localhost:4000/api/v1/getFile/:key&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I am passing the key directly because we didn't saved it in our db. but in real scenario we will be saving key in db and fetching keys to perform actions.&lt;/p&gt;

&lt;p&gt;So this is how you can perform some actions on s3. Trust me it is very easy than it seems and also depends how you want to craft you app.&lt;/p&gt;

&lt;p&gt;Hope you get something from this article, If you still confused at any point then please comment below.&lt;/p&gt;

&lt;p&gt;Thanks :)&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Top 10 Gifts For the Developer in Your Life
</title>
      <author>Rizèl Scarlett</author>
      <pubDate>Tue, 14 Dec 2021 04:41:06 +0000</pubDate>
      <link>https://dev.to/github/top-11-gifts-for-the-developer-in-your-life-893</link>
      <guid>https://dev.to/github/top-11-gifts-for-the-developer-in-your-life-893</guid>
      <description>&lt;p&gt;It's gift buying season, and I don't know about you, but I enjoy giving great gifts. Not to sound mushy, but making my friends and family members feel loved and appreciated is what makes the holiday season so special. I will admit that sometimes I feel stressed searching for that perfect gift. If you're feeling the pressure to show your software engineering friend or family member that you care, this blog post should ease your worries.&lt;/p&gt;

&lt;p&gt;Of course, preferences vary from person to person, but you can't go wrong by giving a software developer swag, hardware, or educational resources. &lt;/p&gt;

&lt;p&gt;The DevRel team at GitHub curated a list of specific items that the software developers in your life are sure to love!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-octoplush"&gt;
  &lt;/a&gt;
  The Octoplush
&lt;/h2&gt;

&lt;p&gt;Costing only $30, this collectible plush represents the Octocat, the mascot of the source-code hosting service GitHub. This Octoplush is made of new polyester material, made by Squishables, and is fun for everyone ages three years and up. Purchase it &lt;a href="https://thegithubshop.com/products/octoplush?_pos=1&amp;amp;_sid=0b2c65e2b&amp;amp;_ss=r"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/6VTYwbnZdQM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dREpGEoz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qluepg4ed41u5b9l9v8v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dREpGEoz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qluepg4ed41u5b9l9v8v.png" alt="Image of Octoplush" width="880" height="585"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mechanical-keyboard"&gt;
  &lt;/a&gt;
  Mechanical Keyboard
&lt;/h2&gt;

&lt;p&gt;For employees in the tech industry, mechanical keyboards are all the rage. Now that many of us are working from home, designing and decorating your home office for ultimate productivity is fun and therapeutic. Adding a mechanical keyboard with an LED backlight can brighten your loved one's environment. Check out &lt;a href="https://drop.com/mechanical-keyboards/drops/?sc=keyboards"&gt;Drop&lt;/a&gt; to purchase the mechanical keyboard of your developer friend's dreams. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mGrMeJcz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vatgq8ey94hp3cxbpyo.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mGrMeJcz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vatgq8ey94hp3cxbpyo.jpeg" alt="Image of Mechanical Keyboard" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-keycap"&gt;
  &lt;/a&gt;
  GitHub Keycap
&lt;/h2&gt;

&lt;p&gt;While we are on the subject of keyboards, why not give a GitHub Keycap? Software engineers can use it as a boss key, a panic button, or a reminder of how to exit vim. Help them exhibit passion for collaborative coding for only $4.95. Buy it &lt;a href="https://www.adafruit.com/product/5192"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cBfYKJ60--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzzadpwsws1y1mwn830o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cBfYKJ60--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzzadpwsws1y1mwn830o.png" alt="Image of GitHub Keycap" width="880" height="668"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#udemy-course"&gt;
  &lt;/a&gt;
  Udemy Course
&lt;/h2&gt;

&lt;p&gt;Some people collect shoes or Pokemon cards; software engineers collect Udemy courses. On udemy.com, click "gift this course" on the chosen course sales page to help the software developer in your life upskill. Here are the &lt;a href="https://support.udemy.com/hc/en-us/articles/229231187-How-to-Send-a-Udemy-Gift-"&gt;directions&lt;/a&gt; on gifting a udemy course. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3duqovYg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ei91o12n5xr90n70w70i.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3duqovYg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ei91o12n5xr90n70w70i.jpeg" alt="Image of Udemy landing page" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-yubikey"&gt;
  &lt;/a&gt;
  GitHub YubiKey
&lt;/h2&gt;

&lt;p&gt;This GitHub branded YubiKey serves as a hardware-based authentication solution that provides superior defense against phishing, eliminates account takeovers, and enables compliance requirements for strong authentication. This holiday, you can protect the identity of a friend or family member for only $55 through the &lt;a href="https://thegithubshop.com/products/github-branded-yubikey"&gt;GitHub store&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SBexu7pg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eje5bf9uxk1h8i040tuw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SBexu7pg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eje5bf9uxk1h8i040tuw.png" alt="Image of GitHub Yubikey" width="720" height="720"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#oreilly-membership"&gt;
  &lt;/a&gt;
  O'Reilly Membership
&lt;/h2&gt;

&lt;p&gt;O'Reilly offers an online library of over 45,000 titles, including ebooks, interactive videos, live courses, and case studies. Users can access their offering via laptop or mobile device. Make learning on the go easier for a software developer by purchasing an &lt;a href="https://www.oreilly.com/online-learning/individuals.html"&gt;O'Reilly membership&lt;/a&gt;.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UbzkMh9D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6w21x1tafcudynkm32a.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UbzkMh9D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6w21x1tafcudynkm32a.jpeg" alt="Image of O'Reilly landing page" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#desktop-cable-organizer"&gt;
  &lt;/a&gt;
  Desktop Cable Organizer
&lt;/h2&gt;

&lt;p&gt;Technologists have to manage a lot of wires– ranging from monitor power cables to headphone adapters. Help them organize their cables with this &lt;a href="https://www.amazon.com/dp/B0833ZTPWN/ref=cm_sw_r_cp_apip_quWqjxdTgDeKV?th=1"&gt;Cable Management Sleeve&lt;/a&gt; from Amazon priced at $11.99.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hW9nnRtp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/epf3pb8351l0xr8yc3xs.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hW9nnRtp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/epf3pb8351l0xr8yc3xs.jpeg" alt="Image of Desktop Cable Organizer" width="880" height="478"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#raspberry-pi"&gt;
  &lt;/a&gt;
  Raspberry Pi
&lt;/h2&gt;

&lt;p&gt;This relatively small device has many use cases such as a game console, a desktop computer, a home theater, and much more. Engineers can tinker with a &lt;a href="https://www.raspberrypi.com/products/raspberry-pi-4-model-b/"&gt;Raspberry Pi 4&lt;/a&gt; for only $35 &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sOYkwW6t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5szbvva5gunlickef74i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sOYkwW6t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5szbvva5gunlickef74i.png" alt="Image of Raspberry Pi" width="880" height="513"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#macropad-rp2040"&gt;
  &lt;/a&gt;
  Macropad RP2040
&lt;/h2&gt;

&lt;p&gt;This Macro keypad works as a second keyboard! Plug the MacroPad RP2040 into any computer to send a function key message. Coders can program the device to do much more, including playing music, designing games, and generating passwords for two-factor authentication. Buy it on &lt;a href="https://www.adafruit.com/product/5128"&gt;Adafruit&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jD0d0TaZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0lwd1q44ay48zncpfj7x.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jD0d0TaZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0lwd1q44ay48zncpfj7x.jpeg" alt="Image of Macropad RP2040" width="880" height="661"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#your-year-in-code-remembered"&gt;
  &lt;/a&gt;
  Your year in code, remembered
&lt;/h2&gt;

&lt;p&gt;Who doesn't like to go down memory lane? Affirm a software engineer of their technical and career growth with a &lt;a href="https://gitmerch.com/"&gt;shirt&lt;/a&gt;, &lt;a href="https://commitprint.com/"&gt;poster&lt;/a&gt;, or &lt;a href="https://skyline.github.com/"&gt;3D model of their GitHub contribution graph&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vhNwqf1R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/67d1j6ma2hulmxoga3dn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vhNwqf1R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/67d1j6ma2hulmxoga3dn.png" alt="Images of GitHub Contribution Graph on shirts, posters, and 3D Models" width="880" height="411"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Let us know if you own any of these items or if this list was helpful for you.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Enjoy the holidays!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>github</category>
    </item>
    <item>
      <title>Github Pro and Repit Hacker for FREE </title>
      <author>CodeWhiteWeb</author>
      <pubDate>Tue, 14 Dec 2021 03:53:28 +0000</pubDate>
      <link>https://dev.to/codewhiteweb/github-pro-and-repit-hacker-for-free-1hij</link>
      <guid>https://dev.to/codewhiteweb/github-pro-and-repit-hacker-for-free-1hij</guid>
      <description>&lt;h2&gt;
  &lt;a href="#yes-you-heard-right-github-pro-and-repit-hacker-for-free"&gt;
  &lt;/a&gt;
  Yes You Heard right "Github Pro and Repit Hacker for FREE"
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#before-reading-the-post-read-this-this-offer-is-only-for-students-if-you-are-not-student-now-you-can-stop-reading-this-post-now"&gt;
  &lt;/a&gt;
  Before reading the POST read this :- This Offer is Only for students, If you are not student now , you can stop reading this post now.
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;GITHUB PRO BENEFITS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In addition to the features available with GitHub Free for user accounts, GitHub Pro includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GitHub Support via email&lt;/li&gt;
&lt;li&gt;3,000 GitHub Actions minutes&lt;/li&gt;
&lt;li&gt;2GB GitHub Packages storage&lt;/li&gt;
&lt;li&gt;Advanced tools and insights in private repositories:&lt;/li&gt;
&lt;li&gt;- Required pull request reviewers&lt;/li&gt;
&lt;li&gt;- Multiple pull request reviewers&lt;/li&gt;
&lt;li&gt;- Auto-linked references&lt;/li&gt;
&lt;li&gt;- GitHub Pages&lt;/li&gt;
&lt;li&gt;- Wikis&lt;/li&gt;
&lt;li&gt;- Protected branches&lt;/li&gt;
&lt;li&gt;- Code owners&lt;/li&gt;
&lt;li&gt;- Repository insights graphs: Pulse, contributors, traffic, commits, code frequency, network, and forks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;GITHUB STUDENT DEVELOPER PACK&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.github.com/en/github/getting-started-with-github/githubs-products#github-pro"&gt;GitHub Pro&lt;/a&gt; while you are a student&lt;/li&gt;
&lt;li&gt;Valuable &lt;a href="https://education.github.com/pack"&gt;GitHub Student Developer Pack&lt;/a&gt; partner offers (this is what we need for REPLIT HACKER )&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://education.github.com/students/experts"&gt;GitHub Campus Expert training&lt;/a&gt; for qualified applicants&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go To Github EDU site :- &lt;a href="https://education.github.com/benefits"&gt;here&lt;/a&gt;&lt;br&gt;
and follow steps:- &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b-WFxXRM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mcqbmy9zzpea1zhzk64a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b-WFxXRM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mcqbmy9zzpea1zhzk64a.png" alt="Image description" width="880" height="413"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DovZo5BP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0j5kj96d0a91k44gyzp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DovZo5BP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b0j5kj96d0a91k44gyzp.png" alt="Image description" width="636" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2qQo5RdA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bzabxbrsbfm1b8kbxduz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2qQo5RdA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bzabxbrsbfm1b8kbxduz.png" alt="Image description" width="471" height="285"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fill all the Required fields and Wait for sometime, you will get a Email from Github about Approval or Decline&lt;br&gt;
If it was Rejected, you can try to fill it again as many times as you want.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DThSG2aR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/24knmuj6n2a20ds1x1qu.png" alt="Image description" width="227" height="101"&gt; 
&lt;/h2&gt;

&lt;p&gt;To Get &lt;strong&gt;REPLIT HACKER RANK FOR FREE&lt;/strong&gt; Just Login it with your github account&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7ULSMN1R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nlioxzpj8u0m149m7873.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7ULSMN1R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nlioxzpj8u0m149m7873.png" alt="Image description" width="880" height="182"&gt;&lt;/a&gt;&lt;br&gt;
and that's it&lt;br&gt;
Thanks For reading ...&lt;/p&gt;

</description>
      <category>github</category>
      <category>replit</category>
      <category>git</category>
      <category>student</category>
    </item>
    <item>
      <title>Neovim ultimate Web Dev Setup with vim plug on windows</title>
      <author>Praveen Kumar</author>
      <pubDate>Tue, 14 Dec 2021 03:49:59 +0000</pubDate>
      <link>https://dev.to/abipravi/neovim-ultimate-web-dev-setup-with-vim-plug-on-windows-ef6</link>
      <guid>https://dev.to/abipravi/neovim-ultimate-web-dev-setup-with-vim-plug-on-windows-ef6</guid>
      <description>&lt;p&gt;How to make an ultimate setup in &lt;strong&gt;&lt;em&gt;neovim&lt;/em&gt;&lt;/strong&gt; with &lt;strong&gt;&lt;em&gt;dir tree&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;code autocomplete&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7fwp-iQf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/498/1%2Ald_hQKE7lHjMpf21gyKPKw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7fwp-iQf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/498/1%2Ald_hQKE7lHjMpf21gyKPKw.gif" alt="" width="498" height="280"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;first install &lt;code&gt;nvim&lt;/code&gt; and go the &lt;code&gt;nvim&lt;/code&gt; folder&lt;/p&gt;

&lt;p&gt;for windows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;c:\users\appdata\local\nvim
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If there is no &lt;strong&gt;nvim&lt;/strong&gt; folder then create one with name &lt;strong&gt;nvim&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now let us code the plugin and setup the environment&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H0U8CZHE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/geww24rlh0h2hf8buy92.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H0U8CZHE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/geww24rlh0h2hf8buy92.png" alt="Image description" width="498" height="373"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now create an file name &lt;strong&gt;init.vim&lt;/strong&gt; inside the &lt;strong&gt;nvim&lt;/strong&gt; folder&lt;/p&gt;

&lt;p&gt;and also create a folder named autoload and create an new file named &lt;strong&gt;plug.vim&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;and add the following code into the &lt;strong&gt;plug.vim&lt;/strong&gt; file&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/pravee42/f12d4425d781eb61d7713f66da2bb6b0"&gt;https://gist.github.com/pravee42/f12d4425d781eb61d7713f66da2bb6b0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;after added the code into the &lt;strong&gt;plug.vim&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;move out of the directory and go back to the nvim folder&lt;/p&gt;

&lt;p&gt;inside the nvim folder open the file named &lt;strong&gt;init.vim&lt;/strong&gt; and paste the following code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="k"&gt;number&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;relativenumber&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;clipboard&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;unnamed
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;autoindent&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;tabstop&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;shiftwidth&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;smarttab&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;softtabstop&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;mouse&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="k"&gt;a&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;filetype&lt;/span&gt; &lt;span class="nb"&gt;indent&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;filetype&lt;/span&gt; plugin &lt;span class="k"&gt;on&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nb"&gt;ruler&lt;/span&gt;

&lt;span class="k"&gt;call&lt;/span&gt; plug#begin&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'C:/Users/ABIPRAVI/AppData/Local/nvim/plugged'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;" below are some vim plugins for demonstration purpose.&lt;/span&gt;
&lt;span class="c"&gt;" add the plugin you want to use here.&lt;/span&gt;
Plug &lt;span class="s1"&gt;'Chiel92/vim-autoformat'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'davidhalter/jedi-vim'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'raimon49/requirements.txt.vim'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'for'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'requirements'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
Plug &lt;span class="s1"&gt;'hail2u/vim-css3-syntax'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'gko/vim-coloresque'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'vim-scripts/pylint.vim'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'tpope/vim-haml'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'mattn/emmet-vim'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'dracula/vim'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;'as'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'dracula'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
Plug &lt;span class="s1"&gt;'joshdick/onedark.vim'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'iCyMind/NeoSolarized'&lt;/span&gt;
&lt;span class="c"&gt;" Use release branch (recommend)&lt;/span&gt;
Plug &lt;span class="s1"&gt;'neoclide/coc.nvim'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'branch'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'release'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
Plug &lt;span class="s1"&gt;'neoclide/coc.nvim'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'junegunn/vim-easy-align'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'https://github.com/junegunn/vim-github-dashboard.git'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'scrooloose/nerdtree'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;'on'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="s1"&gt;'NERDTreeToggle'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
Plug &lt;span class="s1"&gt;'tpope/vim-fireplace'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;'for'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'clojure'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
Plug &lt;span class="s1"&gt;'rdnetto/YCM-Generator'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;'branch'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'stable'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
Plug &lt;span class="s1"&gt;'fatih/vim-go'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;'tag'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'*'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
Plug &lt;span class="s1"&gt;'nsf/gocode'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;'tag'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'v.20150303'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'rtp'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'vim'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
Plug &lt;span class="s1"&gt;'junegunn/fzf'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;'dir'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'~/.fzf'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'do'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'./install --all'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
Plug &lt;span class="s1"&gt;'vim-airline/vim-airline'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'vim-airline/vim-airline-themes'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'github/copilot.vim'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'https://github.com/rafi/awesome-vim-colorschemes'&lt;/span&gt; 
Plug &lt;span class="s1"&gt;'https://github.com/ap/vim-css-color'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'https://github.com/ryanoasis/vim-devicons'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'pangloss/vim-javascript'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'sbdchd/neoformat'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'leafgarland/typescript-vim'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'peitalin/vim-jsx-typescript'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'styled-components/vim-styled-components'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;'branch'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'main'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
Plug &lt;span class="s1"&gt;'tpope/vim-commentary'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'jparise/vim-graphql'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'kien/ctrlp.vim'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'jiangmiao/auto-pairs'&lt;/span&gt;
Plug &lt;span class="s1"&gt;'ryanoasis/vim-devicons'&lt;/span&gt;
&lt;span class="k"&gt;call&lt;/span&gt; plug#end&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="c"&gt;" Use &amp;lt;C-l&amp;gt; for trigger snippet expand.&lt;/span&gt;
imap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;l&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;coc&lt;span class="p"&gt;-&lt;/span&gt;snippets&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;"&lt;/span&gt;
&lt;span class="c"&gt;" " Use &amp;lt;C-j&amp;gt; for select text for visual placeholder of snippet.&lt;/span&gt;
vmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;j&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;coc&lt;span class="p"&gt;-&lt;/span&gt;snippets&lt;span class="p"&gt;-&lt;/span&gt;select&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;"&lt;/span&gt;
&lt;span class="c"&gt;" " Use &amp;lt;C-j&amp;gt; for jump to next placeholder, it's default of coc.nvim&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:coc_snippet_next&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;c-j&amp;gt;'&lt;/span&gt;
&lt;span class="c"&gt;"&lt;/span&gt;
&lt;span class="c"&gt;" " Use &amp;lt;C-k&amp;gt; for jump to previous placeholder, it's default of coc.nvim&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:coc_snippet_prev&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;c-k&amp;gt;'&lt;/span&gt;
&lt;span class="c"&gt;"&lt;/span&gt;
&lt;span class="c"&gt;" " Use &amp;lt;C-j&amp;gt; for both expand and jump (make expand higher priority.)&lt;/span&gt;
imap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;j&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;coc&lt;span class="p"&gt;-&lt;/span&gt;snippets&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;jump&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;"&lt;/span&gt;
&lt;span class="c"&gt;" " Use &amp;lt;leader&amp;gt;x for convert visual selected code to snippet&lt;/span&gt;
xmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;x&lt;/span&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;coc&lt;span class="p"&gt;-&lt;/span&gt;convert&lt;span class="p"&gt;-&lt;/span&gt;snippet&lt;span class="p"&gt;)&lt;/span&gt;
vmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;f&lt;/span&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;coc&lt;span class="p"&gt;-&lt;/span&gt;format&lt;span class="p"&gt;-&lt;/span&gt;selected&lt;span class="p"&gt;)&lt;/span&gt;
nmap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;f&lt;/span&gt;  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;Plug&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;coc&lt;span class="p"&gt;-&lt;/span&gt;format&lt;span class="p"&gt;-&lt;/span&gt;selected&lt;span class="p"&gt;)&lt;/span&gt;


command&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;nargs&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; Prettier &lt;span class="p"&gt;:&lt;/span&gt;CocCommand prettier&lt;span class="p"&gt;.&lt;/span&gt;formatFile

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:airline&lt;/span&gt;#extensions#&lt;span class="nb"&gt;tabline&lt;/span&gt;#enabled &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:airline&lt;/span&gt;#extensions#&lt;span class="nb"&gt;tabline&lt;/span&gt;#left_sep &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;g:airline&lt;/span&gt;#extensions#&lt;span class="nb"&gt;tabline&lt;/span&gt;#left_alt_sep &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'|'&lt;/span&gt;

nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;f&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;NERDTreeFocus&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;k&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;Prettier&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;I&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;PlugInstall&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;n&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;NERDTree&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;t&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;NERDTreeToggle&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;C&lt;span class="p"&gt;-&lt;/span&gt;s&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;w&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;colorscheme&lt;/span&gt; dracula
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes we have completed the 90 percentage of the code and there is only few thing to do with the &lt;strong&gt;init.vim&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sw2haoKs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mo634oacoaj515rsdmmx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sw2haoKs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mo634oacoaj515rsdmmx.png" alt="Image description" width="498" height="498"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;after that go to the init.vim&lt;/p&gt;

&lt;p&gt;go the command mode and type &lt;strong&gt;:PlugInstall&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;now you can see the plugins are installing&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oFTx6N49--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8oezupdd4zquwjzlkesu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oFTx6N49--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8oezupdd4zquwjzlkesu.png" alt="Image description" width="498" height="498"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yes we have installed &lt;strong&gt;close&lt;/strong&gt; and &lt;strong&gt;open vim&lt;/strong&gt; again now you see the some of the power have been updated to &lt;strong&gt;neovim&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m0gYve55--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/av1c9k2jffkppse0j6cb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m0gYve55--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/av1c9k2jffkppse0j6cb.png" alt="Image description" width="498" height="298"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ok but we havent still completed&lt;/p&gt;

&lt;p&gt;now to the &lt;strong&gt;plugged folder&lt;/strong&gt; inside the &lt;strong&gt;nvim&lt;/strong&gt; folder there you can see that there is an &lt;strong&gt;coc.nim&lt;/strong&gt; folder&lt;/p&gt;

&lt;p&gt;there you can just type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn install  
npm i  
npm run build  
yarn build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;(NOTE: before this setup make sure that node js is installed on your system then only it will work)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;after installing again close the &lt;strong&gt;nvim&lt;/strong&gt; and open it now you can see that the auto completion is working fine&lt;/p&gt;

&lt;p&gt;and also we have added some of the shortcuts&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ctrl + s -&amp;gt;&lt;/strong&gt; save the file&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ctrl + k -&amp;gt;&lt;/strong&gt; Prettier auto code formatter&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ctrl + t -&amp;gt;&lt;/strong&gt; directory tree on the left side&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ctrl + f -&amp;gt;&lt;/strong&gt; To focus on the &lt;strong&gt;nred&lt;/strong&gt; &lt;strong&gt;tree&lt;/strong&gt; while working in the file&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8KkgvJ2O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/freeze/max/30/1%2AyesaIUcWPg-UDnm4wmM52g.gif%3Fq%3D20" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8KkgvJ2O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/freeze/max/30/1%2AyesaIUcWPg-UDnm4wmM52g.gif%3Fq%3D20" alt="" width="30" height="16"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally we have completed the neovim setup&lt;/p&gt;

&lt;p&gt;We have made it&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MnIcJJ7s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75saenyzoy6bh39ohuxz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MnIcJJ7s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/75saenyzoy6bh39ohuxz.png" alt="Image description" width="498" height="280"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;

&lt;p&gt;If You like this post make sure you follow us on&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.instagram.com/praveenkumar_abipravi/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/ABIPRAVI1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/praveen-kumar-9b09441b7/"&gt;Linked In&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://abipraviii.blogspot.com/"&gt;BlogPost&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vim</category>
      <category>webdev</category>
      <category>python</category>
      <category>windows</category>
    </item>
    <item>
      <title>Youtube to Google Sheets: How to import Youtube public data</title>
      <author>Kartik Grewal</author>
      <pubDate>Tue, 14 Dec 2021 03:38:03 +0000</pubDate>
      <link>https://dev.to/canonic/youtube-to-google-sheets-how-to-import-youtube-public-data-1b5h</link>
      <guid>https://dev.to/canonic/youtube-to-google-sheets-how-to-import-youtube-public-data-1b5h</guid>
      <description>&lt;p&gt;We use a variety of services today to support multiple use cases and so, it becomes increasingly important to be able to connect to different integrations.&lt;/p&gt;

&lt;p&gt;Here is a step-by-step guide to &lt;strong&gt;fetch YouTube metrics and add it to google sheets every day or every month&lt;/strong&gt;. Also get a notification while we're at it :P &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started! 🚀
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Creating necessary sheets to hold our statistics&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So the first step is to create two different empty set of google sheets to hold our every day and every month statistics. We're looking to create two sets of sheets like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--psQ-sMRG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kk32a5pztkshzugxtzsl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--psQ-sMRG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kk32a5pztkshzugxtzsl.png" alt="Step 1" width="880" height="92"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NdfhcCuv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0sx55tgspb2n0bx8yjy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NdfhcCuv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0sx55tgspb2n0bx8yjy.png" alt="Step 1" width="640" height="200"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Let's start working on those integrations!!&lt;/strong&gt;&lt;br&gt;
Go to this &lt;a href="https://app.canonic.dev/projects/61b78fc80b0203002d823376?utm_source=dev.to&amp;amp;utm_medium=organic_article&amp;amp;utm_campaign=30daysofcanonic_uc_3&amp;amp;utm_term=step2_sample_project&amp;amp;utm_content=day_15"&gt;sample project&lt;/a&gt; and click on the top right corner to clone it. This project already has youtube integration for metrics set up. So we can simply clone it and get started.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hhJCHFI9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z22jdg8hvoub2hjmirvh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hhJCHFI9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z22jdg8hvoub2hjmirvh.png" alt="Step 2" width="880" height="502"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Explore API tab&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;From left hand navigation bar, move to the API tab. In the left hand panel, you'll find different divisions like - Endpoints, Scheduled triggers, DB triggers, Integration triggers, etc. In the scheduled triggers, you should find two triggers already set up.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;dailyReporting -&lt;/strong&gt; Gets executed daily.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;monthlyReporting -&lt;/strong&gt; Get executed monthly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Step 4: The dailyReporting flow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Click on the dailyReporting trigger and it'll open up the graph for it. Our flow looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zB5D8KyI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0n9jwqd6l7658m5npxfj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zB5D8KyI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0n9jwqd6l7658m5npxfj.png" alt="Step 4" width="880" height="170"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clicking on these individual pills will reveal its settings and configurations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE: You may need to re-authenticate yourself on each plugin as you've cloned the project.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5: Updating configuration of integrations&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's start inspecting and correcting any integration settings should we have to. Click on the left most trigger will reveal its settings.&lt;/p&gt;

&lt;p&gt;As you can check we've set it up to execute every day around 12:17AM. You can change this schedule should you want to by clicking on the trigger.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7WfkQCwY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0iah9di0ujnapislgm4m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7WfkQCwY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0iah9di0ujnapislgm4m.png" alt="Step 5 Trigger settings" width="834" height="636"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Similarly, &lt;strong&gt;Youtube integration&lt;/strong&gt; also has different settings that you can configure. Please move to the &lt;strong&gt;auth&lt;/strong&gt; tab to re-authenticate in case it's required. In the optional parameters, you can define the different variables through which you want to query youtube. In this instance we're using these query parameters:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;dimentions: day&lt;/li&gt;
&lt;li&gt;endDate: 2021-12-30&lt;/li&gt;
&lt;li&gt;ids: channel==INSERT_CHANNEL_ID or MINE&lt;/li&gt;
&lt;li&gt;metrics: estimatedMinutesWatched&lt;/li&gt;
&lt;li&gt;startDate:2021-12-12&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DJHARWcQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aiwym2d7lfflchibf1kp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJHARWcQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aiwym2d7lfflchibf1kp.png" alt="Step 5 Youtube Settings" width="880" height="772"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Very similarly to how above settings were configured, we can similarly &lt;strong&gt;click on the google sheets to configure it's settings&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Authenticate yourself with the account that owns the recently created Google Sheet&lt;/li&gt;
&lt;li&gt;Put in the sheet ID (You can get that in your sheet’s url) and put in range e.g &lt;code&gt;A1:B30&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Go to option fields there set &lt;code&gt;valueInputOption&lt;/code&gt; to &lt;code&gt;RAW&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;In values, check static, then click on add item, in there type &lt;code&gt;{{1.rows.[0].[0]}&lt;/code&gt; - here 1 refers to 1st webhook in the chain that is Youtube, and the array [0][0] represents the first value returned by youtube webhook.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Ujt6_Rn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1cchgdwg6b8gv6wge1at.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Ujt6_Rn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1cchgdwg6b8gv6wge1at.png" alt="Google sheet settings" width="880" height="678"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally we move to slack, and update its minimal configuration to trigger a message whenever this workflow is executed. It'll look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b-FtgVyO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfc9arza1ot92cvox6fx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b-FtgVyO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfc9arza1ot92cvox6fx.png" alt="Slack settings" width="880" height="666"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;and Voila! We have our entire chain set up where&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We trigger a workflow every day at X time&lt;/li&gt;
&lt;li&gt;Where it fetches metrics from youtube&lt;/li&gt;
&lt;li&gt;Adds them to google sheet&lt;/li&gt;
&lt;li&gt;Sends a message on slack when done!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Step 6: Creating the flow for monthly Reporting&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Similar to how we've created the flow for daily reporting, we'll create on for monthly reporting, where most of the queries will be similar.&lt;/p&gt;

&lt;p&gt;We just have to change youtube query parameters, like this&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;dimentions: day&lt;/li&gt;
&lt;li&gt;endDate: 2021-12-30&lt;/li&gt;
&lt;li&gt;ids: channel==INSERT_CHANNEL_ID or MINE&lt;/li&gt;
&lt;li&gt;metrics: likes,comments,views,estimatedMinutesWatched,averageViewDuration&lt;/li&gt;
&lt;li&gt;startDate: 2021-12-12&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and change google sheet values like this 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WJQqvfyJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ufc8h0aagacuwyniked.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WJQqvfyJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ufc8h0aagacuwyniked.png" alt="Step 6" width="880" height="348"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With these minor changes, we can modify our trigger to post youtube metrics to google sheet monthly. All of the above mentioned query parameters can be found in the documentation for google sheets and youtube.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Hope this guide turns out to be a good help for you guys. You can clone the sample project directly from &lt;a href="https://app.canonic.dev/projects/61b78fc80b0203002d823376?utm_source=dev.to&amp;amp;utm_medium=organic_article&amp;amp;utm_campaign=30daysofcanonic_uc_3&amp;amp;utm_term=conclusion_here&amp;amp;utm_content=day_15"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can also check out our other guides &lt;a href="https://dev.to/canonic/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Join us on &lt;a href="https://discord.gg/9dyytsM"&gt;discord&lt;/a&gt; to discuss or share with our community. Write to us for any support requests at &lt;a href="https://support@canonic.dev/"&gt;support@canonic.dev&lt;/a&gt;. Check out our &lt;a href="https://www.canonic.dev/30-days-of-canonic/?utm_source=dev.to&amp;amp;utm_medium=organic_article&amp;amp;utm_campaign=30daysofcanonic_uc_3&amp;amp;utm_term=conclusion_website&amp;amp;utm_content=day_15"&gt;website&lt;/a&gt; to know more about Canonic.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>productivity</category>
    </item>
    <item>
      <title>ParseJS now has a ReadMe with helpful info about the library.</title>
      <author>Calin Baenen</author>
      <pubDate>Tue, 14 Dec 2021 03:24:31 +0000</pubDate>
      <link>https://dev.to/baenencalin/parsejs-now-has-a-readme-with-helpful-info-about-the-library-2fbo</link>
      <guid>https://dev.to/baenencalin/parsejs-now-has-a-readme-with-helpful-info-about-the-library-2fbo</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/CalinZBaenen/ParseJS/tree/main"&gt;ParseJS&lt;/a&gt; now has a ReadMe in the branch &lt;a href="https://github.com/CalinZBaenen/ParseJS/commit/8c840dd57c7fd846622dacd64a9cb3175885e393"&gt;in the latest commit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;NOTE: This does &lt;strong&gt;NOT&lt;/strong&gt; apply to ParseTS (the TypeScript counterpart to ParseJS, the JavaScript library for tokenization), as there isn't much difference to note between the two versions of the library.&lt;/p&gt;

</description>
      <category>github</category>
      <category>readme</category>
      <category>javascript</category>
    </item>
    <item>
      <title>TLDR; My Long Introduction to Coding</title>
      <author>Byron Pantoja</author>
      <pubDate>Tue, 14 Dec 2021 03:22:13 +0000</pubDate>
      <link>https://dev.to/developer833/tldr-my-long-introduction-to-coding-5199</link>
      <guid>https://dev.to/developer833/tldr-my-long-introduction-to-coding-5199</guid>
      <description>&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h2&gt;

&lt;p&gt;I have no computer science background, coding wasn't “cool” growing up, and I never liked math. If that sounds like you and you're here because you're trying to learn to &lt;code&gt;code&lt;/code&gt;, then my failures might help you!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-first-website-was-brilliant"&gt;
  &lt;/a&gt;
  My First Website was Brilliant
&lt;/h2&gt;

&lt;p&gt;The first time I was introduced to coding was in Vancouver in the early 2000s, I was about 20 years old. My friend, Pastor Jeff, showed me a website he was building for a local high school basketball team. I wasn't studying at the time and he pitched it as a great career path for me. He told me they paid him 5K for this site and then offered to teach me. I said yes! Then he showed me the &lt;code&gt;code&lt;/code&gt;. It looked too much like math and I immediately said no. I hate math.&lt;/p&gt;

&lt;p&gt;In 2006, while living and studying in the Philippines, my aunt needed a website for her flower shop and I asked for the opportunity to do it. I said I'd learn how to do it in exchange for a laptop upfront, she agreed and I hacked together a website using a “How To Use Dreamweaver for Dummies” book and a lot of &lt;a href="https://www.coffeeforpeace.com"&gt;Coffee for Peace&lt;/a&gt;(still &lt;em&gt;Peace Cafe&lt;/em&gt; at the time). I chose a template that would work for what the flower shop required. Then I proceeded to delete things in the source code to see if it affected the area I wanted to edit. This method eventually produced a website. My sister helped me purchase a domain and my father taught me to how to deploy my local files to the server using an FTP. It was brilliant. The site had 50+ products, 5 pages, and all the info needed for clients to order flowers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-did-it-i-became-a-web-developer"&gt;
  &lt;/a&gt;
  I Did It. I Became a Web Developer!
&lt;/h2&gt;

&lt;p&gt;It took over 6 months before I learned that I wasn't a web developer. I was living in Shanghai in 2007. My cousin's friend Scott owned a &lt;a href="http://limelightstudio.cn/"&gt;commercial photography studio&lt;/a&gt; in Shanghai, and he agreed to take me on as an assistant. A few weeks on — after he affirmed my ability to handle cleaning toilets, making coffee, and assisting him on shoots — he decided to offer me the job of updating their website. If I could make the changes he wanted, he'd give me a bonus instead of paying their developer. Confident in my skills I agreed to do the job before he agreed to let me. He invited me over to his iMac and asked to see the website I built for my aunt — &lt;em&gt;brilliant&lt;/em&gt; I thought — I pulled it up in the browser without hesitation.&lt;/p&gt;

&lt;p&gt;It begins loading. . .after a few seconds he says,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Yeaaaah it's shit mate. I'm sorry. Oh there, it loaded. Yep. It's not good. It's Impressive that you were able to put this all together — and maybe this is okay for your aunt's flower shop, but it doesn't cut it here in Shanghai.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the next 30 minutes, he rips into everything wrong with the design — the colors, typography, spacing, branding — everything. It hurt — but he was right. He then showed me an example of what he wanted in terms of design and functionality — he wanted a site that looked clean, modern, and fast.&lt;/p&gt;

&lt;p&gt;I reflected on his criticism and looked at my website through the lens he gave me. I couldn't un-see it. But I had no idea why it was slow or how to fix the design elements. Because I didn't know what HTML or CSS was.&lt;/p&gt;

&lt;p&gt;A few months later, my cousin introduces me to another friend, a serial entrepreneur from Vancouver who owned a digital agency. A few sentences into our introductions I mention web development and Dreamweaver and then he makes a comment about HTML and CSS and I pause, he recognizes the look on my face and says,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Got it, got it. Hey, let me help you out. Learn HTML and CSS. No more Dreamweaver, go on w3schools.com, pass the certification exams there, then send me an email. Starting salary is 50 to 60k a year and you don't even need to know JavaScript.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;He hands me his card, RainCity Studios, but I never follow up. I do however go to w3schools.com to and learn HTML and CSS. Once I passed all the practice exams I started to wonder how I built a website at all. I pulled up my aunt's site and I take a look at the source code. My &lt;strong&gt;&lt;em&gt;workaround&lt;/em&gt;&lt;/strong&gt; was elegantly stupid, I used Jpegs. I used images to compensate for not knowing how to create layouts. The entire contact page was made up of images. And that wasn't all, images of text were used as headers because I didn't know how to add a new font. The website I built was brilliantly slow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-did-it-i-became-a-web-developer"&gt;
  &lt;/a&gt;
  &lt;del&gt;I Did It. I Became a Web Developer!&lt;/del&gt;
&lt;/h2&gt;

&lt;p&gt;This failure caused me to doubt myself and I stopped coding anything for four years. But then I found myself with a lot of free time when I first started working at &lt;a href="https://coffeeforpeace"&gt;Coffee for Peace&lt;/a&gt;. I used that time to study coding at Team Tree House — a coding tutorial platform. I chose the Web Developer Learning Path because the final project was a blog. The technologies I used while following along with the tutorial were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML5&lt;/li&gt;
&lt;li&gt;CSS3&lt;/li&gt;
&lt;li&gt;JS&lt;/li&gt;
&lt;li&gt;Bootstrap&lt;/li&gt;
&lt;li&gt;Heroku&lt;/li&gt;
&lt;li&gt;Drupal&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After completing the project as instructed, I felt like a web developer again. I showed it to my parents and pitched the idea to update their WordPress site to a modern, clean, and fast web application! They loved it, especially the custom icons I mocked up in Photoshop. When I was done, I looked at the site I designed and built — and I thought this is &lt;em&gt;it&lt;/em&gt;, I did it. I pushed it to production without even asking.&lt;/p&gt;

&lt;p&gt;The next day my Ama (My Dad) — our main content creator and the person who built the WordPress site I replaced without asking — called me to a meeting and asked me about his blog posts. I showed him how to create a new blog post in Drupal all nonchalant-like, thinking I was teaching him something. Then he says,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Yes, I know we have the ability to create &lt;em&gt;new&lt;/em&gt; posts. But we need all of our past blog posts as well. It's the lifeline of our small social enterprise.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I'm embarrassed to say it even now, but I didn't understand how blogs or websites worked back then. I didn't know what WordPress was or how it was different from HTML, CSS, or JavaScript. I'm sure the instructors explained it, but I was clueless. I was building these websites and using these technologies, but I couldn't define what they were. For example, I wouldn't be able to tell you why we needed Bootstrap or Heroku, but I could show you how I set it up. I let my dad understand that I didn't know how to move their WordPress blogs over to the Drupal site, so he said he'd take of it.&lt;/p&gt;

&lt;p&gt;That night my dad updates the WordPress site with a fast and responsive theme. Taking inspiration from the design choices I made, he deploys it and replaces mine, then calls me for a meeting the next day and says,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I like what you designed. I added your ideas to our site. But I had to replace what you made with WordPress. This works for us. If your technical solution can't do better or preserve the content, then please don't change the framework. Instead, learn to use it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This hurt. But he was right. Technical solutions ought to solve business challenges with little or no friction to the current workflow. If I couldn't build something 10X better than what was there, then why change it?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#giving-up"&gt;
  &lt;/a&gt;
  Giving Up
&lt;/h2&gt;

&lt;p&gt;My past failures made me stop coding for four years. Believing I wasn't smart enough to learn how to code professionally, I gave up. Then something happened — an event in my life — that pushed me away from my comfort zone and into a place where I felt I &lt;em&gt;had&lt;/em&gt; to do this. &lt;strong&gt;I had to learn to code and be hired as a developer&lt;/strong&gt;. I began looking for a position I could qualify for in tech and soon found work with a Y Combinator-backed education platform called Jumpcut. I was hired as a Customer Service Champion, but they gave me the opportunity I wanted by allowing me to do tasks for the engineering department. It was an eye-opening experience, my first task was to read the requirements of the engineering positions we had open and to source candidates that qualified. It was a surreal experience to be able to work with our COO and CTO directly during the hiring process. Being able to engage with the candidates as I guided them through each stage of the hiring process was a great introduction to engineering. It didn't help my confidence — but it was awesome. I was allowed to sit in and listen to how an engineering team communicates with each other and the rest of the departments. I was overwhelmed. This was a huge step up from following instructions and building a blog. I didn't understand anything.&lt;/p&gt;

&lt;p&gt;I began to panic. My wife and I were in our first year of marriage, we were expecting a baby, and here I was overreaching. I should have just stayed in my lane and kept the fact that I was interested in coding to myself. My anxiety started affecting my work, so I called the only friend I had in tech, Kim. She was a Development Practices Coach at Tableau at the time (now she's with a &lt;strong&gt;cool gaming company&lt;/strong&gt; as a Delivery Lead). I asked her what she thought about my decision to switch careers. After listening and hearing me call myself dumb a few times, she gave me a lecture on &lt;strong&gt;imposter syndrome&lt;/strong&gt;, then addressed all my concerns one by one. She helped me build a framework of self-confidence and then reminded me why we were friends. She finished our talk by saying,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Seeking Education in skills you can apply professionally is always a good idea. But timing is equally important.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#wise-words"&gt;
  &lt;/a&gt;
  Wise Words
&lt;/h2&gt;

&lt;p&gt;After my time with Jumpcut, I spent a lot of time preparing myself to be &lt;em&gt;ready&lt;/em&gt;. But I never let myself get there. That's part of the reason for this blog.&lt;/p&gt;

&lt;p&gt;I need a place to write about what I'm learning to see if I'm understanding it. And I need a space to start sharing my thought process when I begin a project. This way I can have a blog series attached to projects I want to get done. If I don't finish the project, I'll have a bunch of unfinished stories lying around. And finally, I need a place to list the skills and technologies I have experience with.&lt;/p&gt;

&lt;p&gt;This post is my first post, an intro of sorts — but it's the third version of it. And locally it's like the 50th version. I forgot how therapeutic writing could be — I've been at this every day for a week now — shutting the world out in the process. In the first two iterations, I wasn't sure what my goals were — I was on the fence between looking for work or starting a business. But the more I wrote the more honest it became, and then a conversation with my mentor began to surface. The last time we chatted she asked me when I'd start working on my portfolio projects — probably because she wanted to review it to see how I code — but I told her I'd get to it only after &lt;strong&gt;&lt;em&gt;I set up my freelance digital agency&lt;/em&gt;&lt;/strong&gt;. Puzzled, she began asking me about &lt;em&gt;that&lt;/em&gt;. I told her it was something to help me earn income as I continued to learn new skills and build my portfolio. She listened supportively as I explained my plan, then said,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I think you're doing much, that is if your goal is to become a Full Stack Developer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then she offered to help me with my projects, but I declined. She then began sharing what she was learning. And this is why I think she's an awesome mentor — even if this wasn't calculated — she intuitively helped me gain clarity and discernment by asking me questions about my plan, then sharing her experiences with me. She never told me what to do or not to do, but her actions (listening, offering to help, sharing experiences) allowed me to come to my conclusions.&lt;/p&gt;

&lt;p&gt;I recognize now that I have legitimate experiences that have contributed to my self-doubt and that I've been trying to &lt;em&gt;get prepared&lt;/em&gt; for every possible outcome to avoid feeling like a failed developer again. I've banished myself to tutorial hell because if I fail here — I can always get a fresh start by moving onto another tutorial or learning a new tech stack (Python, Django, JS, React, Vue, React Native, Flutter, Dart, Angular — to name a few). But to trick me into feeling competent I would anchor my feelings to the growth of my freelance digital agency.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But this was a cop-out.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It gave me an illusion of working towards a goal but in reality, I was avoiding one. The goal was &lt;strong&gt;to learn to code and get hired as a developer.&lt;/strong&gt; Starting a freelance digital agency is a copout to never having to put me out there as a Full Stack Developer. Because if I fail as a freelance digital agency it's not me, but the business that fails. All that does to me is tell me that I'm not prepared. Then I'll spend more time &lt;em&gt;getting prepared&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I've been stuck in a loop.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I've trapped myself in this in-between world where I'm going in circles studying, working, and freelancing. I'm constantly context-switching between professions and industries that no tasks ever gets the attention it needs. Sometimes I'm studying to code, sometimes I'm learning something for a client (WordPress, Webflow, Shopify, WooCommerce, Mindbody, Squareup, Weebly, Ad Accounts — to name a few), and sometimes I'm working on graphic designs. I was failing fast and often but for what? The end goal was unclear.&lt;/p&gt;

&lt;p&gt;The only time I've stopped this loop is now. And I had to ghost everyone to it. It was important for me to process what my goals were, and how I ended up in this loop. And now that I know, it's obvious that &lt;strong&gt;I'm doing too much.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-less-but-more-of-it"&gt;
  &lt;/a&gt;
  Do less But More of It
&lt;/h2&gt;

&lt;p&gt;Imposter Syndrome isn't something we can just shut off. But recognizing it and talking about it helps you plan to push past it. I've been talking to my wife a lot while writing this, and together we've made decisions that will help us both grow in 2022. We've made goals that center around what we value:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spending time with our kids and family&lt;/li&gt;
&lt;li&gt;Visiting the beach or mountains&lt;/li&gt;
&lt;li&gt;Finding new things to eat&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By starting there it was easy for us to give up the projects that took too much away from what we value and focus on the things we wanted. Now that the destination was clear, I wanted to define my &lt;em&gt;why&lt;/em&gt; for clarity and affirmation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why a Full Stack Developer?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Obviously, it's &lt;strong&gt;&lt;em&gt;to build something to make the world a better place&lt;/em&gt;&lt;/strong&gt;, but after that, why?&lt;/p&gt;

&lt;p&gt;I want to pursue coding because it's fun. I love learning how the internet and technology work. Technology fascinates me and learning to code as a Full Stack Developer gives me the tools and framework I need to start understanding how the internet of things works under the hood. Knowing that makes me feel like I know more about how the world works, and that's priceless.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-2021"&gt;
  &lt;/a&gt;
  Closing 2021
&lt;/h2&gt;

&lt;p&gt;I'm looking forward to 2022, I don't expect it to be easy. I expect it to be hard. I expect to feel uncertainty. And I expect to feel a lot of vulnerability. &lt;em&gt;And yes, it's terrifying&lt;/em&gt; — but I'm building courage by sharing what I write here — on my little corner of the internet — with the rest of the world. I'm excited and grateful that because I took the first step and reached out to others for help, I now have a clear destination and guide to help get me there. I know it's not the New Year yet, but here's to 2022.&lt;/p&gt;

&lt;p&gt;Happy Holidays!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>impostersyndrome</category>
      <category>learning</category>
      <category>failures</category>
    </item>
    <item>
      <title>How to solve captcha with selenium webdriver using python</title>
      <author>New Linux Helper</author>
      <pubDate>Tue, 14 Dec 2021 03:19:03 +0000</pubDate>
      <link>https://dev.to/developerbishwas/how-to-solve-captcha-with-selenium-webdriver-using-python-8f7</link>
      <guid>https://dev.to/developerbishwas/how-to-solve-captcha-with-selenium-webdriver-using-python-8f7</guid>
      <description>&lt;p&gt;Well that quite easy, let's learn to solve captcha with selenium webdriver using python.&lt;/p&gt;

&lt;p&gt;here's how you can automate captcha with selenium python:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-to-solve-captcha-with-selenium-python"&gt;
  &lt;/a&gt;
  How to solve captcha with selenium python
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Create your bot,&lt;/li&gt;
&lt;li&gt;Come into the captcha solving section&lt;/li&gt;
&lt;li&gt;Register or sign in at &lt;a href="http://2captcha.com/?from=12058574"&gt;2captcha.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Get some credits&lt;/li&gt;
&lt;li&gt;Install TwoCpatcha: &lt;strong&gt;&lt;code&gt;pip install TwoCaptcha&lt;/code&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Try below codes&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Try this code in your web document:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;textarea = driver.find_element_by_id('g-recaptcha-response')
solution = solve()
code = solution['code']
driver.execute_script(f"var ele=arguments[0]; ele.innerHTML = '{code}';", textarea)
time.sleep(1) # waiting is mandatory
textarea = driver.find_element_by_xpath('//*[@id="login-btn"]/button').click()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the &lt;code&gt;solve()&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def solve():
    import sys
    from twocaptcha import TwoCaptcha
    result = None

    sitekey = '&amp;lt;your_site_key_from_two_captcha&amp;gt;'
    api_key = '&amp;lt;your_api_key_from_two_captcha&amp;gt;'
    solver = TwoCaptcha(api_key)
    try:
        result = solver.recaptcha(
            sitekey=sitekey,
            url='https://www.deezer.com/en/login'
        )

    except Exception as e:
        sys.exit(e)

    return result
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And for the site key, here's how you can &lt;a href="https://webmatrices.com/d/513-how-to-handle-captcha-in-selenium-webdriver-using-python/9"&gt;get the sitekey to solve the captcha&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>python</category>
      <category>automation</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Setup Perl environment on Github Action</title>
      <author>Yuki Kimoto</author>
      <pubDate>Tue, 14 Dec 2021 03:15:59 +0000</pubDate>
      <link>https://dev.to/yukikimoto/setup-perl-environment-on-github-action-4065</link>
      <guid>https://dev.to/yukikimoto/setup-perl-environment-on-github-action-4065</guid>
      <description>&lt;p&gt;Do you find Github Actions to setup all versions of Perl.&lt;/p&gt;

&lt;p&gt;"Setup Perl environment" is useful.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://siliconvalley.perlzemi.com/blog/20211214114342.html"&gt;Setup Perl environment on Github Action&lt;/a&gt;&lt;/p&gt;

</description>
      <category>perl</category>
      <category>git</category>
      <category>github</category>
    </item>
    <item>
      <title>Building a waitlist for your product with Next.js</title>
      <author>propelauthblog</author>
      <pubDate>Tue, 14 Dec 2021 02:29:31 +0000</pubDate>
      <link>https://dev.to/propelauth/building-a-waitlist-for-your-product-with-nextjs-29a5</link>
      <guid>https://dev.to/propelauth/building-a-waitlist-for-your-product-with-nextjs-29a5</guid>
      <description>&lt;p&gt;Building a waitlist allows your future users to express interest in you, before you've even started your MVP. You can see if your messaging resonates with potential customers, and when you are ready to launch, the users from your waitlist will make excellent early product testers.&lt;/p&gt;

&lt;p&gt;In this post, we'll build the following Next.js application:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Eg49RwX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v33g7lhgz5altakkouon.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Eg49RwX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v33g7lhgz5altakkouon.png" alt="Final product" width="880" height="382"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will use Next.js for both the frontend and backend thanks to Next.js API routes. API routes are great for this because they are serverless. If we get a sudden burst of users, it will scale up to handle the additional load. We also don't have to pay for any servers when no one is signing up.&lt;/p&gt;

&lt;p&gt;Since there's not that much code, we'll walk through and explain all of it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-our-nextjs-application"&gt;
  &lt;/a&gt;
  Creating our Next.js Application
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-blank-project"&gt;
  &lt;/a&gt;
  Creating a blank project
&lt;/h3&gt;

&lt;p&gt;Use &lt;code&gt;create-next-app&lt;/code&gt; to set up a new project, and then &lt;code&gt;yarn dev&lt;/code&gt; to run it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npx create-next-app@latest waitlist
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;waitlist
&lt;span class="nv"&gt;$ &lt;/span&gt;yarn dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I like to start with a blank project, so let's replace the existing code in &lt;code&gt;pages/index.js&lt;/code&gt; with this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/head&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/Home.module.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Waitlist&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"A quick, scalable waitlist"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/favicon.ico"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also delete everything in &lt;code&gt;styles/Home.module.css&lt;/code&gt;, we'll replace it shortly. If you go to &lt;code&gt;http://localhost:3000&lt;/code&gt;, you'll see a blank page with &lt;strong&gt;Waitlist&lt;/strong&gt; as the title.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-two-column-layout"&gt;
  &lt;/a&gt;
  Creating a two column layout
&lt;/h3&gt;

&lt;p&gt;As you saw before, we want a classic two column layout with an image on the right and some marketing text on the left. We'll use a flexbox layout. Add the following to your &lt;code&gt;styles/Home.module.css&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#293747&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* background color */&lt;/span&gt;
    &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;         &lt;span class="c"&gt;/* cover at least the whole screen */&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;              
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;             &lt;span class="c"&gt;/* our flex layout */&lt;/span&gt;
    &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.column&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                 &lt;span class="c"&gt;/* each column takes up half the screen */&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;              &lt;span class="c"&gt;/* vertically align each column */&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/* On small screens, we no longer want to have two columns since they
 * would be too small. Increasing it to 100% will make the two columns
 * stack on top of each other */&lt;/span&gt;
&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;.column&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Back in &lt;code&gt;pages/index.js&lt;/code&gt;, we will add two components for the left and right columns. On the right side, we'll put an image of some code. You can put an image of the product, a mockup, something fun from unsplash, or anything really. For now, the left side will have some placeholder text.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Waitlist&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;meta&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt; &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"A quick, scalable waitlist"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/favicon.ico"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

            &lt;span class="c1"&gt;// New components&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;LeftSide&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;RightSide&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    )
}

// These functions can be moved into their own files
function LeftSide() &lt;span class="si"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Hello from the left side
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="si"&gt;}&lt;/span&gt;

function RightSide() &lt;span class="si"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"100%"&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"100%"&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/code.svg"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qFamJWFT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxyn9pd9ly1uvkxnzet2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qFamJWFT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxyn9pd9ly1uvkxnzet2.png" alt="Two column layout" width="880" height="386"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The right side looks great! It covers the right half of the screen like we expected. The left side, however, is pretty ugly and unreadable. Let's address that now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#formatting-our-marketing-text"&gt;
  &lt;/a&gt;
  Formatting our marketing text
&lt;/h3&gt;

&lt;p&gt;We know what we want our &lt;code&gt;LeftSide&lt;/code&gt; to say, let's start by updating it so the text matches our image above. For now, we'll also put in placeholder styles which we will add afterwards.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;LeftSide&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"154"&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"27"&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/logo.svg"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            Quick Scalable&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;titleKeyword&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Waitlist&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subtitle&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore
            et dolore magna aliqua.
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--78QpPZHF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ra6aonxtncpyssh1rwko.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--78QpPZHF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ra6aonxtncpyssh1rwko.png" alt="No css formatting yet" width="880" height="344"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If it wasn't for the bad contrast between the black text and the background, this wouldn't look too bad. Now we can add the &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;titleKeyword&lt;/code&gt;, and &lt;code&gt;subtitle&lt;/code&gt; classes (in &lt;code&gt;styles/Home.module.css&lt;/code&gt;) to clean it up.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.titleKeyword&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#909aeb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.subtitle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;250&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T0JBfvx4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mkretx5mwb7aqydxw2ts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T0JBfvx4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mkretx5mwb7aqydxw2ts.png" alt="Formatted, but no form yet" width="880" height="331"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-the-waitlist-form"&gt;
  &lt;/a&gt;
  Adding the waitlist form
&lt;/h3&gt;

&lt;p&gt;Our frontend is really coming together. The only remaining part is the form where the user can submit their email address. We'll place this in a separate component called &lt;code&gt;Form&lt;/code&gt; and add it to the bottom of our &lt;code&gt;LeftSide&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;LeftSide&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;column&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* same as before */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Form&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;hasSubmitted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setHasSubmitted&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;submit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// We will submit the form ourselves&lt;/span&gt;
        &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;// TODO: make a POST request to our backend&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// If the user successfully submitted their email,&lt;/span&gt;
    &lt;span class="c1"&gt;//   display a thank you message&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hasSubmitted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;formWrapper&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subtitle&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
                Thanks for signing up! We will be in touch soon.
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// Otherwise, display the form&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;formWrapper&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onSubmit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;submit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt; &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Email"&lt;/span&gt;
               &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;formInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;formTextInput&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
               &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;formInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;formSubmitButton&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            Join Waitlist
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A few things to note about the &lt;code&gt;Form&lt;/code&gt; component:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We use a &lt;a href="https://reactjs.org/docs/forms.html#controlled-components"&gt;controlled component&lt;/a&gt; for the email input.&lt;/li&gt;
&lt;li&gt;We set up an error at the bottom that is conditionally displayed &lt;/li&gt;
&lt;li&gt;Once &lt;code&gt;hasSubmitted&lt;/code&gt; is true, we stop displaying the form and instead display a thank you message.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's clean it up with css before we finish the &lt;code&gt;submit&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.formWrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;              &lt;span class="c"&gt;/* two column display for input + button */&lt;/span&gt;
    &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;/* Shared by the input and button so they are the same size and style */&lt;/span&gt;
&lt;span class="nc"&gt;.formInput&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;         
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.formTextInput&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                  &lt;span class="c"&gt;/* take up most of the available space */&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#232323&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.formSubmitButton&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                  &lt;span class="c"&gt;/* take up the rest of the space */&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#7476ED&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.error&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Eg49RwX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v33g7lhgz5altakkouon.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Eg49RwX9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v33g7lhgz5altakkouon.png" alt="Final product" width="880" height="382"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-a-request-to-a-nextjs-api-route"&gt;
  &lt;/a&gt;
  Making a request to a Next.js API route
&lt;/h3&gt;

&lt;p&gt;Our design is finished! Now all we have to do is make sure when you click submit that two things happen:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The frontend makes a request to our backend with the email address&lt;/li&gt;
&lt;li&gt;The backend saves the email address somewhere&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first one is actually pretty simple. Here's our finished &lt;code&gt;submit&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;submit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/api/waitlist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setHasSubmitted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use the fetch method to send a post request to &lt;code&gt;/api/waitlist&lt;/code&gt; with a JSON body that includes our user's email. If the request succeeds, we flip &lt;code&gt;hasSubmitted&lt;/code&gt; and the user gets a nice message. Otherwise, the user sees an error returned from our backend.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/api/waitlist&lt;/code&gt; refers to an API route that we have not yet created, which is our only remaining step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-nextjs-api-route"&gt;
  &lt;/a&gt;
  Creating a Next.js API route
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#creating-an-empty-route"&gt;
  &lt;/a&gt;
  Creating an empty route
&lt;/h3&gt;

&lt;p&gt;Our blank application actually started with an API route in &lt;code&gt;/pages/api/hello.js&lt;/code&gt; which looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John Doe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since this route is in &lt;code&gt;/pages/api/hello.js&lt;/code&gt;, it will be hosted under &lt;code&gt;/api/hello&lt;/code&gt;. We can test this with curl:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl localhost:3000/api/hello
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;:&lt;span class="s2"&gt;"John Doe"&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our frontend is making a request to &lt;code&gt;/api/waitlist&lt;/code&gt;, however, so let's delete &lt;code&gt;hello.js&lt;/code&gt; and make a new file &lt;code&gt;/pages/api/waitlist.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// To make sure only valid emails are sent to us, install email validator:&lt;/span&gt;
&lt;span class="c1"&gt;//  $ yarn add email-validator &lt;/span&gt;
&lt;span class="c1"&gt;//  $ # or&lt;/span&gt;
&lt;span class="c1"&gt;//  $ npm i --save email-validator&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;validator&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email-validator&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// We only want to handle POST requests, everything else gets a 404&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;postHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;postHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parseAndValidateEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;saveEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;saveEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// TODO: what to do here?&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Got email: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Make sure we receive a valid email&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;parseAndValidateEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Malformed request&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Missing email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Email is too long&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;validator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Invalid email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Most of the work there is just boilerplate for validating the JSON body and email that we get. But, this is actually all you need to handle the request that the frontend makes.&lt;/p&gt;

&lt;p&gt;Go back to your frontend, type in an email, and click &lt;strong&gt;Join Waitlist&lt;/strong&gt;. You should see your success message, and in the logs you should see &lt;code&gt;Got email: {YOUR EMAIL}&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-persist-waitlist-emails"&gt;
  &lt;/a&gt;
  How to persist waitlist emails
&lt;/h3&gt;

&lt;p&gt;While logging the email is fine, you are probably going to want something more durable. This part is really dependent on your stack. &lt;/p&gt;

&lt;p&gt;As an example, if you don't expect a lot of users and are already using Slack, you can use a &lt;a href="https://api.slack.com/messaging/webhooks"&gt;Webhook integration&lt;/a&gt; to send a message to slack every time a user signs up. Here's how to do that using the &lt;a href="https://www.npmjs.com/package/@slack/webhook"&gt;@slack/webhook&lt;/a&gt; library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;IncomingWebhook&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@slack/webhook&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SLACK_WEBHOOK_URL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;saveEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;webhook&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;IncomingWebhook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;webhook&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;New waitlist request: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You could also save it to a database. &lt;a href="https://www.cockroachlabs.com/lp/serverless/"&gt;CockroachDB&lt;/a&gt; recently announced support for a highly available serverless DB that you can write to with any Postgres library, like &lt;code&gt;pg&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Pool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;connectionString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DB_CONNECTION_STRING&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;saveEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;connectionString&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;INSERT INTO waitlist(email) VALUES($1)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;503&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;An unexpected error has occurred, please try again&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or you could use services like &lt;a href="https://www.airtable.com/"&gt;Airtable&lt;/a&gt; which has its own API for saving to a sheet. If you have a CRM, you might want to save entries directly to that instead. There are a lot of options to choose from.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#extra-features"&gt;
  &lt;/a&gt;
  Extra features
&lt;/h2&gt;

&lt;p&gt;This waitlist is pretty easy to extend. You may, for example, want to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Collect more information&lt;/strong&gt; - Just add more fields to the frontend and parse/save them on the backend.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Persist whether the user has ever signed up&lt;/strong&gt; - Right now if the user refreshes, they are always set back to the "has not submitted" state. You can address this by saving/reading &lt;code&gt;hasSubmitted&lt;/code&gt; from &lt;code&gt;localStorage&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ultimately, the important thing is you are getting the information you need from your future users, and you are saving it durably.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-stepsplug"&gt;
  &lt;/a&gt;
  Next steps/Plug
&lt;/h2&gt;

&lt;p&gt;After building out your waitlist, you will probably begin to build out an MVP of your product. You can dramatically speed up that process by using &lt;a href="https://www.propelauth.com"&gt;PropelAuth&lt;/a&gt; - a hosted authentication service which provides a complete login and account management experience for both B2C and B2B businesses.&lt;/p&gt;

&lt;p&gt;All UIs that your users will need are already built (from login to profile pages to organization management) and configurable via a simple UI. Your users get powerful features like 2FA and it only takes minutes to set up. We hope you'll check it out!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#attributions"&gt;
  &lt;/a&gt;
  Attributions
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The image of code was generated from &lt;a href="https://carbon.now.sh"&gt;Carbon&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;The placeholder logo is from &lt;a href="https://logoipsum.com/"&gt;Logoipsum&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>nextjs</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Functional programming Baby Steps: Options and Eithers</title>
      <author>Mepuka Kessy</author>
      <pubDate>Tue, 14 Dec 2021 02:01:19 +0000</pubDate>
      <link>https://dev.to/mkessy/functional-programming-baby-steps-options-and-eithers-1mjf</link>
      <guid>https://dev.to/mkessy/functional-programming-baby-steps-options-and-eithers-1mjf</guid>
      <description>&lt;p&gt;One of the first issues I ran into as I began my journey into the world of TypeScript was the annoying issue of &lt;a href="https://dev.to/jamesmh/unhealthy-code-null-checks-everywhere-2720"&gt;null checks&lt;/a&gt;. On one hand the TypeScript compiler is reminding you of something important: "You might encounter a runtime error if you try and do something with this possibly null value." On the other hand it can lead to some really ugly code where we need nested conditionals to ensure that the data we want to operate on actually exists as we expect it to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nl"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// this is allowed in TypeScript&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;bio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userBio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newUser&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bio&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;userBio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bio&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;userBio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;N/A&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;useBio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;N/A&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;userBio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;N/A&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is ugly, hard to read, and unsafe (eventually we'll make a mistake or forget a conditional and something will blow up.) Now consider that this problem becomes even worse when performing routine operations such as fetching data from a remote API. What if we needed to fetch a list of users and process them in some way? Fetching remote data is an asynchronous task that is not guaranteed succeed. So now in addition to all the null checking we'll need to check whether our fetch operation was even successful or if it returned an error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// this code may blow up since not only may the fetch operation&lt;/span&gt;
&lt;span class="c1"&gt;// fail but it could succeed and return a null newUsers array &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newUsers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchUsersFromAPI&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newUser&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;newUsers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bio&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;uploadUserBio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bio&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#functional-programming-to-the-rescue"&gt;
  &lt;/a&gt;
  Functional Programming to the Rescue
&lt;/h2&gt;

&lt;p&gt;Functional programming is useful here because it offers us a number of abstractions that force us to write code that accounts for cases where an operation fails or returns a value that may be null or undefined. (For all the following examples I'm going to be using the excellent functional programming library.) &lt;a href="https://github.com/gcanti/fp-ts"&gt;fp-ts&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-option-endraw-type"&gt;
  &lt;/a&gt;
  The &lt;code&gt;Option&lt;/code&gt; type
&lt;/h3&gt;

&lt;p&gt;The option types helps us abstract the common case in which a computation may fail (or return null) &lt;em&gt;or&lt;/em&gt; return a value of type A. In fp-ts it is represented by the sum type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;None&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// our operation failed&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Some&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// our operation succeeded and we have a value of type A&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fp-ts provides us with a number of built-in methods for operating with this new type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// construct for a null or none type&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;none&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;never&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;None&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//constructor for a value that actually exists&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;some&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Some&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;//an operation to 'match' an expression &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fold&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fa&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onNone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;R&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onSome&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;R&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;R&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;fa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;None&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;onNone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;onSome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wrapping a value in an &lt;code&gt;Option&lt;/code&gt; forces us to deal with the case in which the value doesn't exist or is not what we want.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// if our API had the following signature &lt;/span&gt;
&lt;span class="c1"&gt;// (we'll learn later about how to implement this)&lt;/span&gt;
&lt;span class="nx"&gt;declare&lt;/span&gt; &lt;span class="nx"&gt;fetchUsersFromAPI&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// then we're forced to 'unwrap' the Option and deal with the&lt;/span&gt;
&lt;span class="c1"&gt;// case in which in may be null or an error&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newUsers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchUsersFromAPI&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;fold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;newUsers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;There are no users!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newUser&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bio&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;uploadUserBio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bio&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So now the type system and anyone who wants to operate on the &lt;code&gt;newUsers&lt;/code&gt; array will be forced to deal with the fact that &lt;code&gt;newUsers&lt;/code&gt; may not exist.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-raw-either-endraw-type"&gt;
  &lt;/a&gt;
  The &lt;code&gt;Either&lt;/code&gt; type
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Either&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Left&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;L&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// holding a failure&lt;/span&gt;
  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Right&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// holding a success&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fold&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;R&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;fa&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Either&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;onLeft&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;R&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;onRight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;R&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;R&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Left&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;onLeft&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;onRight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;right&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Either&lt;/code&gt; type is similar to the &lt;code&gt;Option&lt;/code&gt; type but it can hold more information about &lt;em&gt;why&lt;/em&gt; our operation failed if it indeed does. Usually the &lt;code&gt;Left&lt;/code&gt; value holds an error while the &lt;code&gt;Right&lt;/code&gt; value holds a successfully retrieved value.&lt;/p&gt;

&lt;p&gt;Let's again consider the fetch operation from the previous example now refactored (again we'll defer implementation of the fetch function to another post) to return an &lt;code&gt;Either&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// the new function signiture returning an Either &lt;/span&gt;
&lt;span class="nx"&gt;declare&lt;/span&gt; &lt;span class="nx"&gt;fetchUsersFromAPI&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Either&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newUsers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Either&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchUsersFromAPI&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;fold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;newUsers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`Something went wrong &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newUser&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bio&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;uploadUserBio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bio&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example we have a &lt;code&gt;string&lt;/code&gt; containing a message as our &lt;code&gt;Left&lt;/code&gt; value in the event of an error. We could choose to implement this in anyway we want however. We could return an &lt;code&gt;Error&lt;/code&gt; instance containing more detailed information about what went wrong. Regardless, as with the &lt;code&gt;Option&lt;/code&gt; anyone who wants to use the newUsers object will need to account for the possibility that the fetch operation failed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-any-of-this-worth-the-hassle"&gt;
  &lt;/a&gt;
  Is any of this worth the hassle?
&lt;/h3&gt;

&lt;p&gt;These are simple examples so far. It may not seem worth it to implement &lt;code&gt;Options&lt;/code&gt; and &lt;code&gt;Eithers&lt;/code&gt; when a simple &lt;code&gt;if&lt;/code&gt; check could suffice. The point so far however is to understand that we have much to gain by treating certain classes of data as existing in a dual state (like a &lt;a href="https://en.wikipedia.org/wiki/Quantum_superposition"&gt;superposition&lt;/a&gt; in physics). Instead of pretending that a piece of data fetched from a remote API will always represent the data we want (oh it were so) we can use abstractions like &lt;code&gt;Option&lt;/code&gt; and &lt;code&gt;Either&lt;/code&gt; such that the possibility that they don't is considered as a matter of course. This will make our code not only more robust, but also easier to read and more fun to write.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further reading
&lt;/h3&gt;

&lt;p&gt;In future posts I'll explore more complex examples and how we can start implementing say API fetching functions that use &lt;code&gt;Options&lt;/code&gt;, &lt;code&gt;Eithers&lt;/code&gt; and other FP abstractions we haven't explored yet.&lt;/p&gt;

&lt;p&gt;This is a complex topic. Here are some resources I've found useful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/gcanti/series/680"&gt;Getting started with fp-ts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mostly-adequate.gitbook.io/mostly-adequate-guide/"&gt;Mostly Adequate Guide to Functional Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/enricopolanski/functional-programming"&gt;Functional Programming in TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rlee.dev/practical-guide-to-fp-ts-part-1"&gt;Practical Guide to Fp-ts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>typescript</category>
      <category>functional</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Frontend Challenge #8, NFT Preview Component</title>
      <author>JC Smiley</author>
      <pubDate>Tue, 14 Dec 2021 01:57:16 +0000</pubDate>
      <link>https://dev.to/jcsmileyjr/frontend-challenge-8-nft-preview-component-1eg9</link>
      <guid>https://dev.to/jcsmileyjr/frontend-challenge-8-nft-preview-component-1eg9</guid>
      <description>&lt;p&gt;Follow me as I briefly describe my coding journey to build the NFT Preview component from &lt;a href="https://www.notion.so/NFT-Preview-716b3aef822b4182a46b6c2d73003264#d6fa19405d714072b30041611bbb6dcd"&gt;Frontend Mentors&lt;/a&gt;. I’m a firm believer in learning in public, sacrificing perfection while learning, and each day improving by 1%. I welcome feedback from anyone and will update the final project as time allow. Frontend Mentors is a online platform that provide front-end challenges that include professional web designs.&lt;/p&gt;

&lt;p&gt;The goal is to build this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HGAbUiGs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6mvwf4ug6f5016qse01v.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HGAbUiGs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6mvwf4ug6f5016qse01v.jpg" alt="original given design of project" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-build-an-empty-layout-that-focus-on-a-mobile-first-design"&gt;
  &lt;/a&gt;
  Step 1: Build an empty layout that focus on a mobile first design
&lt;/h2&gt;

&lt;p&gt;Started with a simple layout that focused on a mobile layout first, then a desktop layout. I’m loving the CSS variables to use colors with a descriptive name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DOu0-w2A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2nfrmod3vtnm57robv0.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DOu0-w2A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2nfrmod3vtnm57robv0.PNG" alt="simple design that shows sections of a mobile layout" width="313" height="605"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-focused-on-one-section-at-a-time"&gt;
  &lt;/a&gt;
  Step 2: Focused on one section at a time
&lt;/h2&gt;

&lt;p&gt;Focused on the top section's styling and structure of the primary image. I still haven't worked on the desktop version.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h-jlzlkZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6hfu9n2hgfcvaltyeky4.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h-jlzlkZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6hfu9n2hgfcvaltyeky4.PNG" alt="Design progress with just the top image" width="311" height="607"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-focus-on-styling-the-final-section-and-adding-content"&gt;
  &lt;/a&gt;
  Step 3: Focus on styling the final section and adding content
&lt;/h2&gt;

&lt;p&gt;Next step was to update content in the lower section with styling and adding the images based on the design given. Now I worked on the desktop version with a few simple media queries.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rQ5agvHl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l5itp31zemp4131jd829.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rQ5agvHl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l5itp31zemp4131jd829.PNG" alt="Updated style for the content" width="314" height="605"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-biggest-problem-was-the-active-state-in-the-project-for-me"&gt;
  &lt;/a&gt;
  Step 4: Biggest problem was the active state in the project for me
&lt;/h2&gt;

&lt;p&gt;A final step is to add the active state to the project. This included cursor pointers and color changes, but the big one was an image over the primary image. The trick was to have one image with position absolute, while the other was position’s relative, and to have a system of hiding one or the other. &lt;/p&gt;

&lt;p&gt;Here is code that I am proud of. It works with the hover CSS styling to display the eye image when you hover. I’m pretty sure there is a better way to do this but I didn’t want to use a background image. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6jajzeDc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofd4ewcr0jxybkkf9tow.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6jajzeDc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ofd4ewcr0jxybkkf9tow.PNG" alt="Display show and hide code for the top image" width="841" height="215"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aB27Bti2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hx3scz2ojhg5htj8prl4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aB27Bti2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hx3scz2ojhg5htj8prl4.gif" alt="Short GIF of the active state" width="561" height="684"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can play with the final product &lt;a href="https://jcsmileyjr.github.io/NFT-Preview/"&gt;here&lt;/a&gt; and read the code &lt;a href="https://github.com/jcsmileyjr/NFT-Preview"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-learned"&gt;
  &lt;/a&gt;
  What I learned
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;The hardest part of this project was doing multiple actions at once to the image section. I needed the active state to change when hovering, the images to be visible stacked on top of each other, and a light blue background color that allows all images to show. A super fun challenge.&lt;/li&gt;
&lt;li&gt;There is this resource I saw but haven't appreciated til now and it's Google fonts at &lt;a href="https://fonts.google.com/"&gt;https://fonts.google.com/&lt;/a&gt;. One of my goals in doing these frontend projects is to get better at design and styling. This was a valuable gem to find. &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  Thank you for reading
&lt;/h2&gt;

&lt;p&gt;Thank you for reading my learning journey and if you have tips, please DM me on &lt;a href="https://twitter.com/JCSmiley4"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/jcsmileyjr/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>challenge</category>
    </item>
  </channel>
</rss>
