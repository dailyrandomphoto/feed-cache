<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Ten things you should learn before learning about performance testing</title>
      <author>NaveenKumar Namachivayam ⚡</author>
      <pubDate>Tue, 21 Sep 2021 15:53:05 +0000</pubDate>
      <link>https://dev.to/qainsights/ten-things-you-should-learn-before-learning-about-performance-testing-48mk</link>
      <guid>https://dev.to/qainsights/ten-things-you-should-learn-before-learning-about-performance-testing-48mk</guid>
      <description>&lt;p&gt;So you want to learn about performance testing and progress towards performance engineering or DevOps or Site Reliability Engineering. I get it. Jumping directly into performance testing might be overwhelming. I directed to learn the tool, then the performance concepts. It is like, learning to swim by directly jumping into the pool. Either someone needs to save you from drowning if things go south, or if you are smart enough, you can manage. I was able to manage myself to learn the performance concepts parallel while learning the performance testing tool around a decade ago. &lt;/p&gt;

&lt;p&gt;I do not want you to go down that route. In this blog post I am going to list out ten things you should learn before learning about performance testing and its tools. There is no end to learning stuffs. But I have highlighted the essential and fundamental concepts you may need to go through for your performance testing trip.&lt;/p&gt;

&lt;p&gt;It is not required to be an expert in the below-mentioned topics by learning everything. I would expect you to know at least what it is, how it is and why it is. There are many online courses available for free on YouTube, Free Code Camp, Edx, Coursera, or in your local library. &lt;/p&gt;

&lt;h2&gt;Networking&lt;/h2&gt;

&lt;p&gt;One of the famous quotes from the management expert Peter Drucker is "If you can't measure it, you can't improve it".  As a performance tester, you help to improve the performance of software. &lt;/p&gt;

&lt;p&gt;Predominantly, you will be working on web or mobile applications, web services, client-side performance, operating systems, database performance etc. One common entity among these things is &lt;em&gt;network&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Explore and learn about the history of networking, ARPANET, internet, intranet, network layer, IP v4, IP v6, networking services such as DNS, DHCP, NAT etc., wired, wireless, cellular, and basic network troubleshooting.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtube.com/playlist?list=PLJ9A48W0kpRJeDShJotYMQy-TM_T2DJRO"&gt;https://youtube.com/playlist?list=PLJ9A48W0kpRJeDShJotYMQy-TM_T2DJRO&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Protocols&lt;/h2&gt;

&lt;p&gt;Protocols are the backbone of any communication. It defines a set of rules that determine how data is transmitted between the devices in a network. Commonly known protocols are HTTP, HTTPS, DNS, TCP, UDP, ICMP, DHCP, FTP, SSH, RDP, SMTP etc.&lt;/p&gt;

&lt;p&gt;Do a quick research into the protocols and their evolution. Deep-dive into the Open System Interconnection (OSI) model and TCP/IP model. &lt;/p&gt;

&lt;p&gt;Learn about modern protocols such as gRPC, IPFS etc. Knowledge of protocol is critical to understanding of your application and its architecture. In some instances, you may need to read the data packets to troubleshoot the issues.&lt;/p&gt;

&lt;h2&gt;Statistics&lt;/h2&gt;

&lt;p&gt;Love it or hate it, you need to refresh the statistics which you studied in school or college. Learn about mean, median, average, percentile, interquartile, standard deviation etc. Formulas such as Little's Law, capacity planning concepts, arrival rate will be very useful once you progress.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtube.com/playlist?list=PLJ9A48W0kpRJl6I8ijICDNQD5NFQeHN4X"&gt;https://youtube.com/playlist?list=PLJ9A48W0kpRJl6I8ijICDNQD5NFQeHN4X&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn about how to correlate data, plot charts/graphs, create a trend report, benchmarking etc.&lt;/p&gt;

&lt;h2&gt;Browsers&lt;/h2&gt;

&lt;p&gt;Everyone uses a browser to interact with the applications. Browsers play a critical role in user experience and performance. If the application renders slowly due to network, front-end libraries, backend, or latency on the browser, it will have a negative impact on the brand and revenue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtube.com/playlist?list=PLJ9A48W0kpRJk0YNqzyofhPQS1pt_5bUF"&gt;https://youtube.com/playlist?list=PLJ9A48W0kpRJk0YNqzyofhPQS1pt_5bUF&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a performance tester/engineer, you need to understand how a browser works and how you can leverage the browser developer tools and extensions to debug the performance. &lt;/p&gt;

&lt;p&gt;Client-side performance is a hot trend due to the evolution of Single Page Applications built using JavaScript libraries such as Angular, React, Vue etc. &lt;/p&gt;

&lt;h2&gt;Utilities&lt;/h2&gt;

&lt;p&gt;You do not need a sophisticated performance testing tool to measure the performance. Just by sending a ping command, you can measure the latency or by leveraging the browser developer tools, you  can debug the HTTP requests or DOM elements.&lt;/p&gt;

&lt;p&gt;In your leisure time, you can learn various utilities such as cURL, HTTP Pie, MITM Proxy, Fiddler, Wireshark and more. Also, explore Linux commands such as top, htop, netstat, dig, ip, tcpdump etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtube.com/playlist?list=PLJ9A48W0kpRJ6Za-PG87scNCJp7kFgW2g"&gt;https://youtube.com/playlist?list=PLJ9A48W0kpRJ6Za-PG87scNCJp7kFgW2g&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Servers&lt;/h2&gt;

&lt;p&gt;Servers are powerful workstations that share resources such as disk, network, computations and more on a network. Servers could be a part of a very simple two-tier or multi-tier architecture, or part of a distributed microservice architecture which scales deep based on the usage. &lt;/p&gt;

&lt;p&gt;As a performance tester/engineer, you need to understand how the HTTP request traverses among the hops and returns the response to the client. &lt;/p&gt;

&lt;p&gt;There are multiple types of servers which define its functionality. The most commonly known types of servers are: application servers, web servers, database servers, mail servers, FTP servers, proxy servers, virtual servers, telnet servers etc. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://qainsights.com/wp-content/uploads/2021/09/Ten-things-you-should-learn-before-learning-about-performance-testing.jpeg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5LD7DiyT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qainsights.com/wp-content/uploads/2021/09/Ten-things-you-should-learn-before-learning-about-performance-testing.jpeg" alt="Ten things you should learn before learning about performance testing"&gt;&lt;/a&gt;Ten things you should learn before learning about performance testing&lt;/p&gt;

&lt;p&gt;Understand the various aspects and functions of the server and its configuration, such as operating system type, architecture type, CPU and its cores, memory, disk, network etc. You need to be well aware of the production configuration and stage configuration. &lt;/p&gt;

&lt;h2&gt;Database&lt;/h2&gt;

&lt;p&gt;Data is ubiquitous. Everything is data. After learning about database server configuration, it is important to know about database software. i.e. backend database applications. &lt;/p&gt;

&lt;p&gt;Commonly known database software are Oracle RDBMS, Microsoft SQL, CouchDB, Neo4j, MariaDB, Amazon RDS, MongoDB, CockroachDB etc.&lt;/p&gt;

&lt;p&gt;Learn about database query language, IDE, how to navigate around schema and tables, configuration, statements etc. This will help you to prepare the test data and help us in troubleshoot the issues.&lt;/p&gt;

&lt;p&gt;Most of the performance issues you face might be around database layer.&lt;/p&gt;

&lt;h2&gt;Load Balancers&lt;/h2&gt;

&lt;p&gt;Load balancers help to distribute the tasks among different entities in the network. It can optimize the performance by distributing the load and avoid overloading the servers. It could be either via hardware or software.&lt;/p&gt;

&lt;p&gt;Widely used software based load balancers are Nginx, HAProxy, Amazon ELB, Azure Load Balancer, Varnish Software, Traefik etc.&lt;/p&gt;

&lt;p&gt;Try to understand the load balancers algorithm, configuration, and how it works. &lt;/p&gt;

&lt;h2&gt;Cache&lt;/h2&gt;

&lt;p&gt;The frequently used objects are stored in the cache layer instead of reading them from the disk. This improves the performance drastically, reduces the load, increases the throughput and has many advantages.&lt;/p&gt;

&lt;p&gt;Learn about Content Delivery Network, Cache software and its configuration, Session Management, NoSQL database, &lt;/p&gt;

&lt;h2&gt;Linux&lt;/h2&gt;

&lt;p&gt;Learn Linux right now. If you are not working on a distributed microservice architecture, you will soon. Learn frequently used Linux commands, how to ssh, how to use grep/awk/sed, how to spin up a Linux box and run the test, how to create a user, how to install docker or Kubernetes, bash scripting, regular expressions, file operations, text editors, shell etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtube.com/playlist?list=PLJ9A48W0kpRLorIGHOM7g2OUsO2de3ERm"&gt;https://youtube.com/playlist?list=PLJ9A48W0kpRLorIGHOM7g2OUsO2de3ERm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Apart from the above ten things, you need to learn about Git, Python scripting, container technologies such as docker, podmad, LXD etc., container orchestration such as Kubernetes, Docker Swarm etc., Grafana, Prometheus, InfluxDB, Observability solutions like Jaeger, Dynatrace, New Relic, HoneyComb, Elastic and more. The list is infinite.&lt;/p&gt;

&lt;p&gt;A performance tester/engineer should be like a "Jack of all trades, master of none", but you should be a master of performance testing and engineering at the core. Please &lt;a href="https://qainsights.com" rel="noreferrer noopener"&gt;add&lt;/a&gt; if I missed anything. &lt;/p&gt;

</description>
      <category>testing</category>
      <category>webperf</category>
      <category>performance</category>
      <category>tools</category>
    </item>
    <item>
      <title>Job Burnout: How to Fix at Your Workplace</title>
      <author>b.j.</author>
      <pubDate>Tue, 21 Sep 2021 15:22:34 +0000</pubDate>
      <link>https://dev.to/bettyyjean/job-burnout-how-to-fix-at-your-workplace-5foh</link>
      <guid>https://dev.to/bettyyjean/job-burnout-how-to-fix-at-your-workplace-5foh</guid>
      <description>&lt;p&gt;Have you noticed a shift in the workplace? Are employees starting to look physically and emotionally drained? Should you have capped that meeting last Thursday at 5:30pm instead of letting it run until 6:45pm? Your team might be experiencing job burnout, and it's not stemming from any one incident: burnout is a reaction to prolonged job stress. A Gallup study found that &lt;a href="https://www.gallup.com/workplace/237059/employee-burnout-part-main-causes.aspx"&gt;23% of people&lt;/a&gt; in the workforce experience burnout very often or always, and an additional 44% feel burnt out sometimes. This means that two thirds of employees have felt job burnout somewhat recently, which is a dangerous balance for the health of any team.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://reclaim.ai/blog/workplace-burnout?utm_source=devto&amp;amp;utm_medium=blog-published&amp;amp;utm_campaign=workplace-burnout&amp;amp;utm_term="&gt;With burnout so prevalent in the workplace&lt;/a&gt;, it is essential that management is able to spot and help correct burnout at its very early signs. If you have overlooked or are simply unsure of the symptoms of workplace burnout, we have crafted a guide for managers and leadership to detect burnout, understand the causes, and learn how to prevent it in your employees.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#burnout-signs-amp-symptoms"&gt;
  &lt;/a&gt;
  Burnout signs &amp;amp; symptoms
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://legaljobs.io/blog/employee-retention-statistics/"&gt;HR experts report&lt;/a&gt; that burnout is responsible for over 50% of annual employee turnover, and it can cost more than 200% of a trained employee's salary to replace them. With the high impact of burnout on the workplace, it is important to take notice of the signs and symptoms before they impact your employees' future at the organization.&lt;/p&gt;

&lt;p&gt;Here are some key symptoms to look out for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Workplace detachment: Has a team member seemed distant during meetings, and not as willing to participate in discussions?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Exhaustion: While everyone has an occasional week lacking in sleep, is someone consistently showing up to work visibly tired?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Angry outburst: Is someone on the team starting to display anger and short patience with other members of the team?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unexpected absences: Is a team member starting to have more frequent absences unexpectedly?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Losing passion for their work: Is a team member performing their job duties without a lot of care, or appear to be losing enthusiasm around their work?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Work-life balance: Have you noticed or heard that work is starting to negatively impact a team member's personal life?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While the expression of workplace burnout signs vary for each employee, it is important to be on the lookout for any resemblance to these key symptoms. By being more observant and developing a professional relationship with your team, you'll be more familiar with your team's patterns and mannerisms in the workplace which will allow you to catch any red flags before a team member decides to make a career change.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-causes-workplace-burnout"&gt;
  &lt;/a&gt;
  What causes workplace burnout?
&lt;/h2&gt;

&lt;p&gt;A lot of the time, people think of burnout as a state where you're just working long hours. Certainly, long hours can be a sign of burnout, but here's a different perspective you probably haven't heard before: burnout doesn't just come from long hours. It comes from long hours working on stuff that just isn't going anywhere fast. If employees are spending 7 hours a day in meetings and catching up on email, that's not particularly exciting or invigorating. It's just busy work, and it's the equivalent of banging your head against the wall. Similarly, if the company imposes way too much bureaucracy and process around getting stuff done (e.g., shipping a new feature takes several dozen approvals and hours upon hours of meetings) that can also be the kind of work that burns people out. &lt;/p&gt;

&lt;p&gt;Working long hours, or even just your standard 40, in service of something that is truly exciting can actually have the opposite effect of burnout: it can be a huge motivator to stay at the company you're at. Seeing progress on something that you love working on is really why we get up in the morning, after all. &lt;/p&gt;

&lt;p&gt;Here are the main causes of workplace burnout:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Lack of connection with mission: Every company starts with a mission, but if it is not properly communicated and upheld internally, employees can become disconnected. Your team will be more passionate, engaged, and work harder when aligned with your mission.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Too much time in meetings: Employees spend too much time in long, redundant, and unnecessary meetings, leaving them exhausted from non-stop discussions with insufficient time to complete their work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Uninspired work: Employees are losing motivation because their work is monotonous and does not feel meaningful, so they're uninspired and leave most days without a great sense of accomplishment. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Blocked by bureaucracy: Employees may also be losing motivation because they are trying to make real progress, but are continuously blocked, redirected, and sent backwards by internal bureaucracy, which leaves them feeling defeated and inadequate in their role.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unrealistic goals: Employees are simply burdened with a workload that is far beyond their capacity due to poor time planning internally, which makes them feel like they're stretched too thin and a failure for continuously falling short of the unrealistic goals.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lack of direction or engagement: If employees are working towards unclear goals, have insufficient direction, feedback or training from above, or are just plain unsure of what you expect from them, it can cause great frustration at work and stress around their own job performance.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To be clear, if your team is not getting sufficient time for a personal life and aren't getting downtime to reset their brains, that can absolutely be a cause of burnout. But burnout is a much more complex issue than giving everyone a day off. It's also imperative that you can answer the question of "Are you giving employees an exciting reason to get out of bed every morning and come to work?" If not, you'll find people burning out very quickly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-companies-prevent-employee-burnout"&gt;
  &lt;/a&gt;
  How can companies prevent employee burnout?
&lt;/h2&gt;

&lt;p&gt;The biggest challenge companies have in addressing burnout is misunderstanding its root cause. With only &lt;a href="https://www.stress.org/42-worrying-workplace-stress-statistics"&gt;43% of US employees&lt;/a&gt; thinking that employers care about their work-life balance, your company may do things like "&lt;a href="https://reclaim.ai/blog/no-meeting-day"&gt;no meeting Wednesdays&lt;/a&gt;" or "take Friday off for the next month", which are absolutely helpful in terms of giving people the space they need to focus on their lives, but often don't address the core issue: that people simply aren't motivated by what they're doing and are finding it too hard to just get the simple things done.&lt;/p&gt;

&lt;p&gt;If an employee is given a day off, that's a great thing for their mental and emotional health. But if the moment they return to the office, they're met with the same old problems and lack of excitement, they'll soon return to a state of burnout. In other words, it's like plugging a gushing leak with a flimsy bandaid. It might deter it for a moment, but not much longer than that.&lt;/p&gt;

&lt;p&gt;If you're looking to make a real change preventing burnout at your company, start at the top, with leadership. Ask questions like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Are we focused on stuff that is truly moving the business forward, and do employees share the belief that we are?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Are we spending too much time doing busy work instead of the work that moves our strategy forward?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Are people getting distracted by meetings, emails, and other kinds of shallow work -- and is that preventing them from working on our key priorities?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Are people excited by the work they do here?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These questions will lead to very different solutions around burnout, many of which have nothing whatsoever to do with the hours people work or their work-life balance. It's about addressing company culture and direction. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-the-cost-of-burnout"&gt;
  &lt;/a&gt;
  What's the cost of burnout?
&lt;/h2&gt;

&lt;p&gt;The effect may actually be more topline than bottom! A lot of the workplace burnout that employees may be facing is causing companies to lose money as opposed to retaining money. Not only is burnout costing in actual funds, burnout is also coming at the cost of top tier talent. If you can't attract and retain employees who are excited by your vision and your strategy, you'll end up burning out a lot of folks, and over time, you won't be able to attract great talent. 65% of employees feel they could find a better position somewhere else according to &lt;a href="https://legaljobs.io/blog/employee-retention-statistics/"&gt;Legal Jobs&lt;/a&gt;, but highly engaged employees are 75% less likely to look for a new job. Yes, people need to be compensated well. Yes, they need balance between their work and life. Yes, they need to not be online 60+ hours a week.&lt;/p&gt;

&lt;p&gt;But ultimately, working a full-time job, even with the occasional long hours, on something you find exciting -- because you want to work those hours, because you're motivated to do so -- can be rewarding. It's not a habit that your company should force or embed in your culture, and you certainly don't want employees to feel they have to work long hours to get ahead, but it's also imperative to understand that many people want to wake up every day feeling excited about what they do. And fixing that will often fix your burnout problem faster than you think.&lt;/p&gt;

</description>
      <category>career</category>
      <category>burnout</category>
      <category>productivity</category>
      <category>management</category>
    </item>
    <item>
      <title>Object Oriented Programming in Java</title>
      <author>vindhya Hegde </author>
      <pubDate>Tue, 21 Sep 2021 14:55:25 +0000</pubDate>
      <link>https://dev.to/vindhyasadanand/object-oriented-programming-in-java-50ko</link>
      <guid>https://dev.to/vindhyasadanand/object-oriented-programming-in-java-50ko</guid>
      <description>&lt;p&gt;Object-oriented programming helps us with data security, code reusability, and also helps us to improve code readability.&lt;br&gt;
Let us see and Understand different Object-oriented concepts with code examples.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#1abstraction"&gt;
  &lt;/a&gt;
  1.Abstraction
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WtxvtX82--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/736x/ca/ac/56/caac56b1013ed6b47bf4fa4ef72f34c8--real-life-things-to.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WtxvtX82--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.pinimg.com/736x/ca/ac/56/caac56b1013ed6b47bf4fa4ef72f34c8--real-life-things-to.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
-&amp;gt;Means showing only essential parts and hiding the implementation details.&lt;br&gt;
-&amp;gt;Only the functionality will be provided to the user,&lt;br&gt;
 in other words user will have the information on what the object &lt;br&gt;
 does instead how it does.&lt;br&gt;
-&amp;gt;Here we will be hiding the details of our class from the outside world.What happens within the class will not be known to the outside users.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;abstract class Car
{
    abstract void run();
}
class Baleno extends Car
{
    void run()
    {
        System.out.println("drive car safely");
    }
}
public class Main
{

    public static void main(String args[])
    {
       Car c = new Baleno();
       c.run();

    }

}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#2encapsulation"&gt;
  &lt;/a&gt;
  2.Encapsulation
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tWQXT7a3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.expertphp.in/images/articles/ArtImgKPTPrr_OOP4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tWQXT7a3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://www.expertphp.in/images/articles/ArtImgKPTPrr_OOP4.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
-&amp;gt;Binding variables and methods under a single entity. &lt;br&gt;
-&amp;gt;Or It is a mechanism of wrapping the data(variables) and code acting on the data(methods) together in a single unit. Data (variables) present inside class can be accessed only through methods of the current class.Therefore it is also known as data hiding,&lt;br&gt;
 To achieve encapsulation in java&lt;br&gt;
 -&amp;gt;Declare the variables as private : if we declare variables as private then it will not be visible to the outside world. &lt;br&gt;
 -&amp;gt; If we want to access these private variables then,&lt;br&gt;
 Provide public setter and getter methods to modify and view the variables values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Student
{

    private String sname;

    public String getName()
    {
        return sname;
    }

    public void setName(String name)
    {
        sname = name;
    }

}

public class Main
{

    public static void main(String args[])
    {
        Student f1 = new Student();
        f1.setName("Vindhya");
        System.out.println(f1.getName());

    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#3inheritence"&gt;
  &lt;/a&gt;
  3.Inheritence
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ej3ryGYd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codestall.files.wordpress.com/2017/09/inheritance.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ej3ryGYd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codestall.files.wordpress.com/2017/09/inheritance.png" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
-&amp;gt;Acquiring properties of one class to another class.&lt;br&gt;
-&amp;gt;If we consider parent class and child class ,then child class &lt;br&gt;
  will acquire the Properties of Parent class.&lt;br&gt;
-&amp;gt;Parent class is also known as Base class and Super class.&lt;br&gt;
  Child class is also known as derived class and subclass.&lt;br&gt;
-&amp;gt;In general  children will acquire the properties of their parent &lt;br&gt;
  that is example for inheritance&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Base
{
   void method1()
   {
       System.out.println("Parent class");
   }   

}
class Derived extends Base
{
    void method2()
    {
        System.out.println("Child class");
    }
}
public class Main{
    public static void main(String args[])
    {
         Derived d = new Derived();
         d.method1();
         d.method2();
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#4polymorphism"&gt;
  &lt;/a&gt;
  4.Polymorphism
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6K-n5wXd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/780/1%2AOPkH3mxC97uaMCldI6OGZg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6K-n5wXd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/780/1%2AOPkH3mxC97uaMCldI6OGZg.jpeg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
-&amp;gt;The ability of an Object to take many forms&lt;br&gt;
-&amp;gt;Performing the same task in different ways.&lt;br&gt;
-&amp;gt;here task means method.Polymorphism is a combination of two &lt;br&gt;
  different words poly means many and morphs means forms. &lt;br&gt;
-&amp;gt;Finally polymorphism gives the meaning of many forms&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Multiply{
    static int multiply(int a,int b)
    {
        return a*b;
    }
    static double multiply(double a, double b)
    {
        return a*b;
    }
}

public class Main{

    public static void main(String args[])
    {
        System.out.println(Multiply.multiply(2,3));
        System.out.println(Multiply.multiply(1.1,2.1));

    }

}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thank You&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Supabase/Postgres SQL Cheatsheet - Curated List of SQL</title>
      <author>Zernonia</author>
      <pubDate>Tue, 21 Sep 2021 14:48:36 +0000</pubDate>
      <link>https://dev.to/zernonia/supabase-postgres-sql-cheatsheet-curated-list-of-sql-62f</link>
      <guid>https://dev.to/zernonia/supabase-postgres-sql-cheatsheet-curated-list-of-sql-62f</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hey"&gt;
  &lt;/a&gt;
  Hey!
&lt;/h2&gt;

&lt;p&gt;If you are  a &lt;strong&gt;PostgreSQL&lt;/strong&gt; user, you are missing out on Big Thing!!! You could spin up a Backend Server, with PostgreSQL as Database in just 2 minutes! How? That is using &lt;a href="https://supabase.io/"&gt;Supabase&lt;/a&gt;. Supabase has raised &lt;a href="https://techcrunch.com/2021/09/09/supabase-raises-30m-for-its-open-source-insta-backend/"&gt;30 million&lt;/a&gt; as an Open Source Backend-as-a-Service (BaaS) startup. Mind blown!!!! 🤯&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GwE2t0p---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://supabase.io/new/images/blog/2021-august/supabase-series-a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GwE2t0p---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://supabase.io/new/images/blog/2021-august/supabase-series-a.png" alt="Supabase raised 30 million"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#built-on-top-problem"&gt;
  &lt;/a&gt;
  Built on Top, problem?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2qRU9r2x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://supabase.io/new/images/blog/pg13/postgres-13-og.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2qRU9r2x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://supabase.io/new/images/blog/pg13/postgres-13-og.jpg" alt="Postgres 13 with Supabase"&gt;&lt;/a&gt;&lt;br&gt;
Supabase is indeed build on top of Postgres, and thus enabled developers to utilize all the awesome and stable &lt;a href="https://supabase.io/docs/guides/database/extensions"&gt;extension&lt;/a&gt;/scripts that has been around the industry for years! You agree with me... right? 😂&lt;/p&gt;

&lt;p&gt;Because of the continuous updates by Postgres (and I heard &lt;a href="https://www.postgresql.org/about/news/postgresql-14-beta-1-released-2213/"&gt;v14&lt;/a&gt; is drawing near!), many of the scripts on &lt;strong&gt;Stackoverflow&lt;/strong&gt; has outdated, and causes Supabase users, including &lt;em&gt;myself&lt;/em&gt; (which switch from Firebase - NoSQL) to encounter some problem when running SQL query. Thus, we need Postgres expert like &lt;strong&gt;you&lt;/strong&gt; to give Supabase a try, and join the Supabase community, &lt;a href="https://discord.com/invite/AYybku5cUz"&gt;Discord&lt;/a&gt; and most importantly make Open Source better! &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#solution-cheatsheets"&gt;
  &lt;/a&gt;
  Solution - Cheatsheets
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://supabase-sql.vercel.app"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x6qul7fG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://supabase-sql.vercel.app/og.png" alt="Supabase SQL"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Due to the reason mentioned previously, I've curated some of the SQL scripts, to aid Supabase users, or Postgres users in finding the relevant, up-to-date, and tested SQL scripts. &lt;/p&gt;

&lt;p&gt;Where's the list, here it is!!!! -&amp;gt; &lt;a href="https://supabase-sql.vercel.app/"&gt;Supabase SQL&lt;/a&gt; 🎉🙌&lt;/p&gt;

&lt;p&gt;If you - find it useful, please spare a 🌟 at the &lt;a href="https://github.com/zernonia/supabase-sql"&gt;Github Repo&lt;/a&gt;&lt;br&gt;
If you - found any issue/bug, create &lt;code&gt;issues&lt;/code&gt; is much appreciated.&lt;br&gt;
If you - wanted to contribute the SQL scripts, PR is even more welcomed!&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it
&lt;/h2&gt;

&lt;p&gt;That's all the good news I wanna share with you today. If you are a Supabase user, hope you'll like it. If you are a Postgres user, I hope you'll give &lt;a href="https://supabase.io"&gt;Supabase&lt;/a&gt; a try. If you are none of the above, then you are really missing out on &lt;strong&gt;GREAT&lt;/strong&gt; things! &lt;/p&gt;

&lt;p&gt;Until next time, bye! 👋&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#follow-me"&gt;
  &lt;/a&gt;
  Follow me
&lt;/h2&gt;

&lt;p&gt;🐤 Bird app - &lt;a href="https://twitter.com/zernonia"&gt;@zernonia&lt;/a&gt;&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--JqI6wApG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1419846185519513601/aIz1i1Oh_normal.jpg" alt="Zernonia profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Zernonia
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/zernonia"&gt;@zernonia&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Ask and you shall receive!&lt;br&gt;&lt;br&gt;Here comes the open-source &lt;a href="https://twitter.com/supabase"&gt;@supabase&lt;/a&gt; SQL! Welcome your PR and feedback!&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/wk1Bsp6fM1"&gt;supabase-sql.vercel.app&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a href="https://twitter.com/hashtag/supabase"&gt;#supabase&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/sql"&gt;#sql&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/postgresql"&gt;#postgresql&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/opensource"&gt;#opensource&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/nuxt"&gt;#nuxt&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      07:30 AM - 17 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1438767175515271176" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1438767175515271176" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1438767175515271176" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


</description>
      <category>supabase</category>
      <category>postgres</category>
      <category>showdev</category>
      <category>vue</category>
    </item>
    <item>
      <title>Git Hotfix Branches : The Final Guide</title>
      <author>ZigRazor</author>
      <pubDate>Tue, 21 Sep 2021 14:19:27 +0000</pubDate>
      <link>https://dev.to/zigrazor/git-hotfix-branches-the-final-guide-1mll</link>
      <guid>https://dev.to/zigrazor/git-hotfix-branches-the-final-guide-1mll</guid>
      <description>&lt;p&gt;Hotfix branches are very much like release branches in that they are also meant to prepare for a new production release, albeit unplanned. They arise from the necessity to act immediately upon an undesired state of a live production version. When a critical bug in a production version must be resolved immediately, a hotfix branch may be branched off from the corresponding tag on the master branch that marks the production version.&lt;/p&gt;

&lt;p&gt;The essence is that work of team members (on the develop branch) can continue, while another person is preparing a quick production fix.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cGikoQYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g5q79ahvk2fntry4w42t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cGikoQYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g5q79ahvk2fntry4w42t.png" alt="hotfix branches"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-hotfix-branch"&gt;
  &lt;/a&gt;
  Creating the hotfix branch
&lt;/h2&gt;

&lt;p&gt;Hotfix branches are created from the master branch. For example, say version 1.2.1 is the current production release running live and causing troubles due to a severe bug. But changes on develop are yet unstable. We may then branch off a hotfix branch and start fixing the problem:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git checkout -b hotfix-1.2.1 master
Switched to a new branch "hotfix-1.2.1"
$ ./bump-version.sh
Files modified successfully, version bumped to 1.2.1.
$ git commit -s -a -m "Bumped version number to 1.2.1"
[hotfix-1.2.1 41e61bb] Bumped version number to 1.2.1
1 files changed, 1 insertions(+), 1 deletions(-)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget to bump the version number after branching off! Again, the bumpversion. sh script will automatically determine the new version number starting from the branch name.&lt;br&gt;
Then, fix the bug and commit the fix in one or more separate commits.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git commit
[hotfix-1.2.1-2 abbe5d6] Fixed severe production problem
5 files changed, 32 insertions(+), 17 deletions(-)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#finishing-a-hotfix-branch"&gt;
  &lt;/a&gt;
  Finishing a hotfix branch
&lt;/h2&gt;

&lt;p&gt;When finished, the bugfix needs to be merged back into master , but also needs to be merged back into develop , in order to safeguard that the bugfix is included in the next release as well. This is completely similar to how release branches are finished.&lt;br&gt;
The one exception to the rule here is that, when a release branch currently exists, the hotfix changes need to be merged into that release branch, instead of develop .&lt;br&gt;
Back-merging the bugfix into the release branch will eventually result in the bugfix being merged into develop too, when the release branch is finished.(If work in develop immediately requires this bugfix and cannot wait for the release branch to be finished, you may safely merge the bugfix into develop now already as well.)&lt;/p&gt;

&lt;p&gt;Finally, remove the temporary branch:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git branch -d hotfix-1.2.1
Deleted branch hotfix-1.2.1 (was abbe5d6).
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;em&gt;For More "The Final Guide" see the &lt;a href="https://dev.to/zigrazor/the-final-guide-index-4954"&gt;Index Page&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>codenewbie</category>
      <category>tutorial</category>
      <category>git</category>
    </item>
    <item>
      <title>How to check if the mouse right button has been clicked?</title>
      <author>101samovar</author>
      <pubDate>Tue, 21 Sep 2021 14:12:09 +0000</pubDate>
      <link>https://dev.to/101samovar/how-to-check-if-the-mouse-right-button-has-been-clicked-ho9</link>
      <guid>https://dev.to/101samovar/how-to-check-if-the-mouse-right-button-has-been-clicked-ho9</guid>
      <description>&lt;p&gt;We have some site.&lt;br&gt;
Let’s click with the mouse right button.&lt;br&gt;
The default context menu pops up.&lt;br&gt;
We need to add an event listener to the “contextmenu” event.&lt;br&gt;
And we need to prevent the default behaviour of the context menu event.&lt;br&gt;
That’s all.&lt;br&gt;
Let’s click with the mouse right button.&lt;br&gt;
There’s no default context menu.&lt;br&gt;
Only our right button message.&lt;/p&gt;




&lt;p&gt;I hope you found this article useful, if you need any help please let me know in the comment section.&lt;/p&gt;

&lt;p&gt;👋 See you next time. Have a nice day!&lt;/p&gt;

&lt;p&gt;Subscribe to our channel:&lt;br&gt;
&lt;a href="https://www.youtube.com/c/Samovar101"&gt;https://www.youtube.com/c/Samovar101&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Everyone’s a (Perl) critic, and you can be too!</title>
      <author>Mark Gardner</author>
      <pubDate>Tue, 21 Sep 2021 14:00:00 +0000</pubDate>
      <link>https://dev.to/mjgardner/everyone-s-a-perl-critic-and-you-can-be-too-11f4</link>
      <guid>https://dev.to/mjgardner/everyone-s-a-perl-critic-and-you-can-be-too-11f4</guid>
      <description>&lt;p&gt;The &lt;a href="http://perlcritic.com/"&gt;&lt;code&gt;perlcritic&lt;/code&gt;&lt;/a&gt; tool is often your first defense against “awkward, hard to read, error-prone, or unconventional constructs in your code,” per its &lt;a href="https://metacpan.org/dist/Perl-Critic/view/bin/perlcritic#DESCRIPTION"&gt;description&lt;/a&gt;. It’s part of a class of programs historically known as &lt;a href="https://en.wikipedia.org/wiki/Lint_(software)"&gt;linters&lt;/a&gt;, so-called because like a clothes dryer machine’s lint trap, they “detect small errors with big effects.” (Another such linter is &lt;a href="http://perltidy.sourceforge.net/"&gt;&lt;code&gt;perltidy&lt;/code&gt;&lt;/a&gt;, which I’ve &lt;a href="https://phoenixtrap.com/tag/perltidy/"&gt;referenced&lt;/a&gt; in the past.)&lt;/p&gt;

&lt;p&gt;You can use &lt;code&gt;perlcritic&lt;/code&gt; &lt;a href="https://metacpan.org/dist/Perl-Critic/view/bin/perlcritic"&gt;at the command line&lt;/a&gt;, &lt;a href="https://metacpan.org/dist/Perl-Critic/view/bin/perlcritic#EDITOR-INTEGRATION"&gt;integrated with your editor&lt;/a&gt;, as a &lt;a href="https://git-scm.com/docs/githooks#_pre_commit"&gt;&lt;code&gt;git&lt;/code&gt; pre-commit hook&lt;/a&gt;, or (my preference) as &lt;a href="https://metacpan.org/pod/Test::Perl::Critic"&gt;part of your author tests&lt;/a&gt;. It’s driven by &lt;a href="https://metacpan.org/dist/Perl-Critic/view/bin/perlcritic#THE-POLICIES"&gt;policies&lt;/a&gt;, individual modules that check your code against a particular recommendation, many of them from &lt;a href="https://www.oreilly.com/library/view/perl-best-practices/0596001738/"&gt;Damian Conway’s &lt;em&gt;Perl Best Practices&lt;/em&gt;&lt;/a&gt; (2005). Those policies, in turn, are enabled by &lt;a href="https://metacpan.org/pod/PPI"&gt;PPI&lt;/a&gt;, a library that transforms Perl code into documents that can be programmatically examined and manipulated much like the &lt;a href="https://en.wikipedia.org/wiki/Document_Object_Model"&gt;Document Object Model (DOM)&lt;/a&gt; is used to programmatically access web pages.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;perlcritic&lt;/code&gt; enables the following policies by default unless you &lt;a href="https://metacpan.org/dist/Perl-Critic/view/bin/perlcritic#CONFIGURATION"&gt;customize its configuration&lt;/a&gt; or install more. These are just the “gentle” (&lt;a href="https://metacpan.org/dist/Perl-Critic/view/bin/perlcritic#-severity-N"&gt;severity&lt;/a&gt; level 5) policies, so consider them the bare minimum in detecting bad practices. The &lt;a href="https://metacpan.org/dist/Perl-Critic/view/lib/Perl/Critic/PolicySummary.pod"&gt;full set of included policies&lt;/a&gt; goes much deeper, ratcheting up the severity to “stern,” “harsh,” “cruel,” and “brutal.” They’re further organized according to &lt;a href="https://metacpan.org/pod/Perl::Critic#POLICY-THEMES"&gt;themes&lt;/a&gt; so that you might selectively review your code against issues like security, maintenance, complexity, and bug prevention.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::BuiltinFunctions::ProhibitSleepViaSelect"&gt;BuiltinFunctions::ProhibitSleepViaSelect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::BuiltinFunctions::ProhibitStringyEval"&gt;BuiltinFunctions::ProhibitStringyEval&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::BuiltinFunctions::RequireGlobFunction"&gt;BuiltinFunctions::RequireGlobFunction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::ClassHierarchies::ProhibitOneArgBless"&gt;ClassHierarchies::ProhibitOneArgBless&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::ControlStructures::ProhibitMutatingListFunctions"&gt;ControlStructures::ProhibitMutatingListFunctions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::InputOutput::ProhibitBarewordFileHandles"&gt;InputOutput::ProhibitBarewordFileHandles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::InputOutput::ProhibitInteractiveTest"&gt;InputOutput::ProhibitInteractiveTest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::InputOutput::ProhibitTwoArgOpen"&gt;InputOutput::ProhibitTwoArgOpen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::InputOutput::RequireEncodingWithUTF8Layer"&gt;InputOutput::RequireEncodingWithUTF8Layer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::Modules::ProhibitEvilModules"&gt;Modules::ProhibitEvilModules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::Modules::RequireBarewordIncludes"&gt;Modules::RequireBarewordIncludes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::Modules::RequireFilenameMatchesPackage"&gt;Modules::RequireFilenameMatchesPackage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::Subroutines::ProhibitExplicitReturnUndef"&gt;Subroutines::ProhibitExplicitReturnUndef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::Subroutines::ProhibitNestedSubs"&gt;Subroutines::ProhibitNestedSubs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::Subroutines::ProhibitReturnSort"&gt;Subroutines::ProhibitReturnSort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::Subroutines::ProhibitSubroutinePrototypes"&gt;Subroutines::ProhibitSubroutinePrototypes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::TestingAndDebugging::ProhibitNoStrict"&gt;TestingAndDebugging::ProhibitNoStrict&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::TestingAndDebugging::RequireUseStrict"&gt;TestingAndDebugging::RequireUseStrict&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::ProhibitLeadingZeros"&gt;ValuesAndExpressions::ProhibitLeadingZeros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::Variables::ProhibitConditionalDeclarations"&gt;Variables::ProhibitConditionalDeclarations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::Variables::RequireLexicalLoopIterators"&gt;Variables::RequireLexicalLoopIterators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My favorite above is probably &lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::Modules::ProhibitEvilModules"&gt;ProhibitEvilModules&lt;/a&gt;. Aside from the colorful name, a development team can use it to steer people towards an organization’s favored solutions rather than “deprecated, buggy, unsupported, or insecure” ones. By default, it prohibits &lt;a href="https://metacpan.org/pod/Class::ISA"&gt;Class::ISA&lt;/a&gt;, &lt;a href="https://metacpan.org/pod/Pod::Plainer"&gt;Pod::Plainer&lt;/a&gt;, &lt;a href="https://metacpan.org/pod/Shell"&gt;Shell&lt;/a&gt;, and &lt;a href="https://metacpan.org/pod/Switch"&gt;Switch&lt;/a&gt;, but you should curate and configure a list within your team.&lt;/p&gt;

&lt;p&gt;Speaking of working within a team, although &lt;code&gt;perlcritic&lt;/code&gt; is meant to be a vital tool to ensure good practices, it’s no substitute for manual &lt;a href="https://en.wikipedia.org/wiki/Code_review"&gt;peer code review&lt;/a&gt;. Those reviews can lead to the creation or adoption of new automated policies to save time and settle arguments, but such work should be done collaboratively after achieving some kind of consensus. This is true whether you’re a team of employees working on proprietary software or a group of volunteers developing open source.&lt;/p&gt;

&lt;p&gt;Of course, reasonable people can and do disagree over any of the included policies, but as a reasonable person, you should have &lt;em&gt;good&lt;/em&gt; reasons to disagree before you either configure &lt;code&gt;perlcritic&lt;/code&gt; appropriately or selectively and knowingly &lt;a href="https://metacpan.org/dist/Perl-Critic/view/bin/perlcritic#BENDING-THE-RULES"&gt;bend the rules&lt;/a&gt; where required. Other CPAN authors have even provided their own additions to &lt;code&gt;perlcritic&lt;/code&gt;, so it’s worth &lt;a href="https://metacpan.org/search?q=Perl%3A%3ACritic%3A%3APolicy%3A%3A"&gt;searching CPAN under “Perl::Critic::Policy::”&lt;/a&gt; for more examples. In particular, &lt;a href="https://metacpan.org/pod/Perl::Critic::Community"&gt;these community-inspired policies&lt;/a&gt; group a number of recommendations from &lt;a href="https://perldoc.perl.org/perlcommunity#IRC"&gt;Perl developers on Internet Relay Chat (IRC)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Personally, although I adhere to my employer’s standardized configuration when testing and reviewing code, I like to run &lt;code&gt;perlcritic&lt;/code&gt; on the “brutal” setting before committing my own. What do you prefer? Let me know in the comments below.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Cover image: &lt;a href="https://www.flickr.com/photos/56278705@N05/7859287174"&gt;“Everyone’s a critic — graifitti under Mancunian Way in Manchester”&lt;/a&gt; by &lt;a href="https://www.flickr.com/photos/56278705@N05"&gt;Alex Pepperhill&lt;/a&gt; is licensed under &lt;a href="https://creativecommons.org/licenses/by-nd/2.0/?ref=ccsearch&amp;amp;atype=rich"&gt;CC BY-ND 2.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>perl</category>
      <category>perlcritic</category>
      <category>cpan</category>
      <category>lint</category>
    </item>
    <item>
      <title>Wikis don't work for software documentation</title>
      <author>Nik Begley</author>
      <pubDate>Tue, 21 Sep 2021 13:57:03 +0000</pubDate>
      <link>https://dev.to/doctave/wikis-don-t-work-for-software-documentation-1ejk</link>
      <guid>https://dev.to/doctave/wikis-don-t-work-for-software-documentation-1ejk</guid>
      <description>&lt;p&gt;If your software documentation lives in a Wiki, it's very likely out of date and possibly actively harming your engineering team's productivity. This is a story that repeats in almost every organization - a tool like Confluence or Notion is selected as the "corporate knowledge base" of choice and  developers start documenting code in them. But time and again that documentation goes stale and eventually serves no other purpose than to &lt;a href="http://geek-and-poke.com/geekandpoke/2012/4/25/the-new-developer.html"&gt;confuse eager new hires&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-wikis-good-for"&gt;
  &lt;/a&gt;
  What are wikis good for?
&lt;/h2&gt;

&lt;p&gt;First, let's take a look at what wikis &lt;em&gt;do&lt;/em&gt; work for. They are used actively by millions of people every day and absolutely have good use cases.&lt;/p&gt;

&lt;p&gt;We'd list the following reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Trivially easy to add new content&lt;/li&gt;
&lt;li&gt;WYSIWYG editing allows non-technical users to collaborate&lt;/li&gt;
&lt;li&gt;Searchability and linking across pages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wikis are an accessible and easy to use way to write down information. At a click of a button you can create a new page and the powerful in-built editors make it easy to add graphs and style to your thoughts. Finally, once it's all written down, you can reference other pages and search across the whole knowledge base. Wikis are the lowest common denominator that can work in &lt;em&gt;most&lt;/em&gt; cases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-cant-you-do-with-wikis"&gt;
  &lt;/a&gt;
  What can't you do with wikis?
&lt;/h2&gt;

&lt;p&gt;But let's look at what you &lt;em&gt;cannot&lt;/em&gt; do with wikis:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Integrate documentation changes into code review&lt;/li&gt;
&lt;li&gt;Atomic changes to your docs and code&lt;/li&gt;
&lt;li&gt;Programmatically generate docs at build time&lt;/li&gt;
&lt;li&gt;Edit the documentation using your IDE/editor of choice&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wouldn't you want to be able to see during code review that the relevant documentation has been updated along with the code? Maybe the committer included a link to the updated wiki page, but are the docs changes already live before the PR is merged? Or will they remember to go submit the changes in the wiki once the code goes live? What if your update only applies to v2.5 of your product but not the newest v3.1 release and the documentation needs an important update?&lt;/p&gt;

&lt;p&gt;None of these questions have clear answers when using a wiki and most likely will lead to the documentation simply never being written or maintained.&lt;/p&gt;

&lt;p&gt;As &lt;a href="https://twitter.com/rionam"&gt;Riona MacNamara&lt;/a&gt;, who worked on Google's internal documentation tooling, put it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Documentation will never be part of engineering culture until it is integrated into the codebase&lt;br&gt;
and workflow.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#a-better-tool-for-the-job"&gt;
  &lt;/a&gt;
  A better tool for the job
&lt;/h2&gt;

&lt;p&gt;We previously wrote about how &lt;a href="https://blog.doctave.com/2021/09/07/how-google-twitter-and-spotify-build-culture-of-documentation.html"&gt;Google, Twitter, and Spotify all built their own docs-as-code systems&lt;/a&gt; for managing internal technical documentation. They did not build wikis.&lt;/p&gt;

&lt;p&gt;Instead, they built systems that allowed documentation to live next to source code and get rendered into searchable pages in CI/CD. This practice is generally called "docs-as-code" and is not a new invention.&lt;/p&gt;

&lt;p&gt;What they all found was that allowing developers to update documentation as part of their regular workflow lowered the barrier to update docs and ultimately lead to better documented projects. Instead of having to step into a different system to make changes to the project docs, all they had to do was open a Markdown file and start writing. There was one way to document and it was optimized for developers.&lt;/p&gt;

&lt;p&gt;Removing friction leads to better documentation. We should be using better tools to remove all the friction we can.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tradeoffs"&gt;
  &lt;/a&gt;
  Trade-offs
&lt;/h2&gt;

&lt;p&gt;No solution is perfect, so let's take a moment to talk about the trade-offs of taking a docs-as-code approach.&lt;/p&gt;

&lt;p&gt;Firstly, using docs-as-code will make it more difficult for non-technical collaborators to edit documentation. That being said, for internal technical documentation the maintainers should be the engineers and technical writers. Also, GitHub allows editing directly in the browser, so everyone does not need to learn the correct &lt;code&gt;git&lt;/code&gt; incantations to contribute.&lt;/p&gt;

&lt;p&gt;Secondly, you have to think about search. If you use a documentation site generator to turn your Markdown docs into HTML sites, even if the toolchain builds a search index for the site, you will end up with N disconnected sites for N projects. &lt;a href="https://www.doctave.com"&gt;Doctave.com&lt;/a&gt; can help with this if you are using our open source &lt;a href="https://github.com/Doctave/doctave"&gt;documentation site generator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, your documentation will have to be limited to Markdown (or an equivalent format). Many would argue that this is a feature, not a limitation - forcing documentation to be in a simple format can make it easier to write and consume. Some tools will support useful "extensions" to Markdown. Our generator for example supports &lt;a href="https://mermaid-js.github.io/mermaid/#/"&gt;Mermaid JS&lt;/a&gt; diagrams, so that you can embed graphs and charts into your docs easily.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technology-options"&gt;
  &lt;/a&gt;
  Technology options
&lt;/h2&gt;

&lt;p&gt;Here's a quick list of some technology options if you want to look into docs-as-code.&lt;/p&gt;

&lt;p&gt;We are building &lt;a href="https://www.doctave.com"&gt;Doctave.com&lt;/a&gt; to be the best home for your technical documentation. If you want to do docs-as-code with a light-weight &lt;a href="https://https://github.com/Doctave/doctave"&gt;open source docs site generator&lt;/a&gt;, but host the docs in a centralized place that allows searching across all your projects, &lt;a href="https://www.doctave.com"&gt;check us out&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are also many open source generators out there that are worth mentioning: &lt;a href="https://www.mkdocs.org/"&gt;MkDocs&lt;/a&gt; and &lt;a href="https://docusaurus.io/"&gt;Docusaurus&lt;/a&gt; to name a couple popular ones. If you need something more customizable, &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; and &lt;a href="https://gohugo.io/"&gt;Hugo&lt;/a&gt; are good options. Generic static site generators however tend to add a lot of complexity so we'd recommend going for something more light-weight.&lt;/p&gt;

&lt;p&gt;In the end, the exact technology choice is less important. As long as it's not a wiki.&lt;/p&gt;

</description>
      <category>writing</category>
      <category>documentation</category>
      <category>agile</category>
    </item>
    <item>
      <title>React: Creating an HTML Class in JSX</title>
      <author>Randy Rivera</author>
      <pubDate>Tue, 21 Sep 2021 13:47:07 +0000</pubDate>
      <link>https://dev.to/rthefounding/react-creating-an-html-class-in-jsx-52ik</link>
      <guid>https://dev.to/rthefounding/react-creating-an-html-class-in-jsx-52ik</guid>
      <description>&lt;ul&gt;
&lt;li&gt;One difference in JSX is that you don't use the word class to define HTML classes. This is because class is a reserved word in JavaScript. Instead, JSX uses className. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;Also note that HTML attributes and event references in JSX become camelCase.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let's Apply a class of &lt;code&gt;myDiv&lt;/code&gt; to the &lt;code&gt;div&lt;/code&gt; provided in the JSX code.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;JSX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'myDiv'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* &amp;lt;--- added a class of myDiv */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Add a class to this div&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#selfclosing"&gt;
  &lt;/a&gt;
  Self-closing
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;In JSX, it's little different, Any JSX element can be written with a self-closing tag, and every element must be closed. The line-break tag, for example, must always be written as  in order to be valid JSX that can be transpiled. A , on the other hand, can be written as  or . The difference is that in the first version there is no way to include anything in the . You will see in my later posts why that this syntax is useful when rendering React components.

&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>devops</category>
      <category>react</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to Remove Underlines From Links with CSS</title>
      <author>Coderslang: Become a Software Engineer</author>
      <pubDate>Tue, 21 Sep 2021 13:39:37 +0000</pubDate>
      <link>https://dev.to/coderslang/how-to-remove-underlines-from-links-with-css-42kk</link>
      <guid>https://dev.to/coderslang/how-to-remove-underlines-from-links-with-css-42kk</guid>
      <description>&lt;p&gt;You know how hyperlinks always come with an underline, right? And you want to get rid of it so you can add your style. Well, you can do it by using the &lt;code&gt;text-decoration&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;text-decoration&lt;/code&gt; is a CSS property that will specify how to decorate the text. Since the hyperlink by default has a decoration, all you have to do is remove the text-decoration from the link.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-example-code"&gt;
  &lt;/a&gt;
  An example code
&lt;/h2&gt;

&lt;p&gt;Let us take an example of how to remove underline with the &lt;code&gt;text-decoration&lt;/code&gt; property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Example&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Definitely not a clickbait&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As shown from the example code above, the &lt;code&gt;text-decoration: none;&lt;/code&gt; basically tells the CSS not to have any decoration on the hyperlink. That means the hyperlink no longer has an underline.&lt;/p&gt;

&lt;p&gt;And that is pretty much it. Quite simple, right?&lt;/p&gt;

&lt;p&gt;Get my &lt;a href="https://learn.coderslang.com/free-ebooks/"&gt;free e-book&lt;/a&gt; to prepare for the technical interview or start to &lt;a href="https://js.coderslang.com/"&gt;Learn Full-Stack JavaScript&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>css</category>
      <category>html</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>7 popular extensions from Microsoft Edge Addons</title>
      <author>nagachaitanyalokam</author>
      <pubDate>Tue, 21 Sep 2021 13:38:19 +0000</pubDate>
      <link>https://dev.to/naga_chaitanya_lokam/7-popular-extensions-from-microsoft-edge-addons-n0o</link>
      <guid>https://dev.to/naga_chaitanya_lokam/7-popular-extensions-from-microsoft-edge-addons-n0o</guid>
      <description>&lt;p&gt;Hello,&lt;/p&gt;

&lt;p&gt;Microsoft Edge is rapidly growing as a preferred browser, thanks to its &lt;a href="https://aka.ms/EdgePerformsbetter"&gt;low resource consumption&lt;/a&gt;,&lt;a href="http://aka.ms/EdgeMoreSecure"&gt;strong security&lt;/a&gt; and &lt;a href="https://aka.ms/EdgeFeatures"&gt;innovative features&lt;/a&gt;. With Microsoft Edge Add-ons, users can personalize and do more with their browser.&lt;/p&gt;

&lt;p&gt;In addition to organizing your research with collections, working efficiently with vertical tabs, and taking back control with tracking prevention, you can also personalize your Microsoft Edge browser by downloading add-ons or extensions. Add-ons can enhance your browser experience and boost your productivity. For example, you can personalize your browser with themes, organize your work with performance tools and much more.&lt;/p&gt;

&lt;p&gt;To help you get started, here is a list of 7 highly user rated extensions* on Microsoft Edge Add-ons website that can enhance your browsing experience:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-grammar-and-spell-checkerlanguagetool"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://aka.ms/GrammarandSpellChecker"&gt;Grammar and Spell Checker-LanguageTool&lt;/a&gt;:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8cDMqFv_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnd0bqpk6a4vpbqqculg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8cDMqFv_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnd0bqpk6a4vpbqqculg.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
This add-on will check your texts for spelling and grammar problems by sending it to &lt;a href="https://aka.ms/LanguageTool"&gt;LanguageTool.org&lt;/a&gt; over an encrypted connection.&lt;/p&gt;

&lt;p&gt;LanguageTool is compatible with almost all text, regardless of source, including social networks such as Twitter or LinkedIn and online e-mail services, such as Gmail. This grammar and spelling correction works across all variations of common language.&lt;/p&gt;

&lt;p&gt;LanguageTool also features a personal dictionary for exceptions or words that you might commonly use but that are not found in a conventional dictionary. LanguageTool will recognize these words in future grammar checking and proofreading. Furthermore, it supports more than 25 languages, including English, Spanish, French, German, Polish, and Russian. No account is needed to use this add-on.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2-qr-code-generator"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://aka.ms/QRCodeGenerator"&gt;QR Code Generator&lt;/a&gt;:
&lt;/h4&gt;

&lt;p&gt;This simple add-on by &lt;a href="https://aka.ms/AwesomeExtensions"&gt;Awesome Extensions&lt;/a&gt; is a super handy QR Code Generator that converts your current page into QR Code with one click and generates QR Codes from free text, URLs. Features include scan, analyze, decode, and read QR codes.&lt;/p&gt;

&lt;p&gt;It also offers the option to download the QR code as an image and you can use this add-on offline too.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#3-tampermonkey"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://aka.ms/Tampermonkey"&gt;Tampermonkey&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KKaZJJ8b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c8y3itk5yep4h44y0low.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KKaZJJ8b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c8y3itk5yep4h44y0low.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aka.ms/Tampermonkey.net"&gt;Tampermonkey&lt;/a&gt; is the most popular Free User Script manager, with over 10 million weekly users.&lt;/p&gt;

&lt;p&gt;This add-on manages User Script, which can change the appearance and function of the website completely and make sure they’re operating on the right site.&lt;/p&gt;

&lt;p&gt;It also provides features like a clear overview over the running scripts, a built-in editor, ZIP-based import and export, automatic update checks, and cloud storage-based synchronization.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4-enhancer-for-youtube"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://aka.ms/EnhancerforYouTube"&gt;Enhancer for YouTube&lt;/a&gt;:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FT-aPQgn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zunwiynhun9l15w7nkfm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FT-aPQgn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zunwiynhun9l15w7nkfm.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This add-on by &lt;a href="https://aka.ms/mrfdev"&gt;Maxime RF&lt;/a&gt; allows you to manage ads, control the playback speed and the volume level with the mouse wheel, automate repetitive tasks such as selecting the appropriate playback quality, and configure dozens of keyboard shortcuts to control on YouTube.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5-infinity-new-tab-pro"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://aka.ms/InfinityNewTabPro"&gt;Infinity New Tab (Pro)&lt;/a&gt;:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mFPUJGzy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bocba5kjlcjjfobvbodv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mFPUJGzy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bocba5kjlcjjfobvbodv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Infinity New Tab Pro by &lt;a href="https://aka.ms/StarlabTechnology"&gt;Starlab Technology&lt;/a&gt; allows you to customize your New Tab page. This add-on changes your new tab experiences by offering options to add all your favorite sites. Additionally, you could add and check your To-Do list, notes and bookmarks.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#6-microsoft-editor-spelling-amp-grammar-checker"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://aka.ms/MicrosoftSpellingandGrammarChecker"&gt;Microsoft Editor: Spelling &amp;amp; Grammar Checker&lt;/a&gt;:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--houRWeSh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1reafmw84eh40snlds8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--houRWeSh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1reafmw84eh40snlds8.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Microsoft Editor: Spelling &amp;amp; Grammar Checker proofreads the content written by the user, for correct grammar, spelling, and punctuation.&lt;/p&gt;

&lt;p&gt;This add-on provides grammar, spelling, and style suggestions across multiple websites. The editor checks spellings in more than 80 languages and provides grammar checking and writing improvements in 20+ languages. It also provides Editor’s assistance in the Office apps. Just open Word or Outlook on the web and get suggestions to improve one’s documents and e-mail.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#7-dark-reader"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://aka.ms/DarkReader"&gt;Dark Reader&lt;/a&gt;:
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qWngISmG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d92eqbxxkudrhdhzkbvt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qWngISmG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d92eqbxxkudrhdhzkbvt.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dark Reader Add-on by &lt;a href="https://aka.ms/darkreader.org"&gt;alexanderby&lt;/a&gt;, &lt;a href="https://aka.ms/Darkreader2.org"&gt;William Zijl&lt;/a&gt; enables night mode and creates dark themes for websites. &lt;/p&gt;

&lt;p&gt;It automatically inverts bright colors, making them high in contrast and removing the white light brightness. You can easily adjust brightness, contrast, sepia filter, dark mode, font settings and ignore-list. Dark Reader neither shows ads nor sends user data anywhere. &lt;/p&gt;

&lt;p&gt;I'd love to hear your experience and feedback using the above extensions. Please comment and let us know what other extensions would you like us to feature.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Automated Accessibility Testing</title>
      <author>Oliwia Połeć</author>
      <pubDate>Tue, 21 Sep 2021 13:24:48 +0000</pubDate>
      <link>https://dev.to/livechat/automated-accessibility-testing-2j8f</link>
      <guid>https://dev.to/livechat/automated-accessibility-testing-2j8f</guid>
      <description>&lt;p&gt;As described in our &lt;a href="https://developers.livechat.com/updates/all?category=accessibility"&gt;recent series of blog posts&lt;/a&gt;, our team has been working on improving the accessibility of the Chat Widget. While making the improvements, we wanted to maintain top-notch quality and ensure that while introducing new changes, there was no drop in standards. We use &lt;a href="https://www.cypress.io/"&gt;Cypress&lt;/a&gt; for all our automated testing, and so we decided to extend the existing testing suite by adding automated accessibility tests. In this article, I’d like to share with you what we’ve learned and how you can do this yourself!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SsFki3zd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u97qkhdsi091ux501l1z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SsFki3zd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u97qkhdsi091ux501l1z.png" alt="LiveChat Automated Accessibility Testing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-app-overview"&gt;
  &lt;/a&gt;
  Example app overview
&lt;/h2&gt;

&lt;p&gt;In order to make it easier for you to follow, I’ve created a simple app that allows the user to submit a dummy form. You can find the repository &lt;a href="https://github.com/klarzynskik/cypress-a11y-testing"&gt;here&lt;/a&gt;. Don’t worry, the data you submit in the app is not sent anywhere, so you can play around with it as much as you want.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_zNg5AgG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h3om04alhld7x1kze0rn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_zNg5AgG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h3om04alhld7x1kze0rn.png" alt="Simple form with two three inputs and two buttons"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s created using the &lt;a href="https://reactjs.org/docs/create-a-new-react-app.html#create-react-app"&gt;Create React App&lt;/a&gt; scripts and using &lt;code&gt;yarn&lt;/code&gt; as a dependency manager (&lt;a href="https://classic.yarnpkg.com/en/docs/install/"&gt;installation instructions&lt;/a&gt;). After cloning the repository, all you need to do is install the dependencies by simply typing &lt;code&gt;yarn&lt;/code&gt; (or &lt;code&gt;npm install&lt;/code&gt; if you'll choose to do it without &lt;code&gt;yarn&lt;/code&gt;) in the console. Then, with &lt;code&gt;yarn start&lt;/code&gt; (or &lt;code&gt;npm start&lt;/code&gt;), you can run the app, and it will be available at &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;. Each step described in the article is reflected on the corresponding git branch.&lt;/p&gt;

&lt;p&gt;The repository also contains a simple integration test created with Cypress, located in the &lt;code&gt;functional.spec.js&lt;/code&gt; file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-cypressaxe-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;cypress-axe&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;In the previous article describing our &lt;a href="https://developers.livechat.com/updates/livechat-testing-chat-widget-accessibility"&gt;journey with accessibility testing&lt;/a&gt;, I mentioned the &lt;a href="https://www.deque.com/axe/browser-extensions/"&gt;axe DevTools&lt;/a&gt; browser extension. It allows the user to perform audits on the website, so that any accessibility issues can be discovered. This extension is based on the &lt;a href="https://github.com/dequelabs/axe-core"&gt;axe-core&lt;/a&gt; engine — a testing tool, validating against different types of rules and best practices.&lt;/p&gt;

&lt;p&gt;The same engine can be used with Cypress, thanks to the &lt;a href="https://github.com/component-driven/cypress-axe"&gt;cypress-axe&lt;/a&gt; package. It adds several custom commands to the Cypress API, which utilizes “axe-core” under the hood. It makes it possible to perform a11y audits directly while testing.&lt;/p&gt;

&lt;p&gt;Let’s, then, add the required dependencies to the project — we need the &lt;code&gt;cypress-axe&lt;/code&gt; and &lt;code&gt;axe-core&lt;/code&gt; (with the &lt;code&gt;--dev&lt;/code&gt; flag, so that these are added as developer dependencies):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add cypress-axe axe-core &lt;span class="nt"&gt;--dev&lt;/span&gt;
&lt;span class="c"&gt;# or&lt;/span&gt;
npm &lt;span class="nb"&gt;install &lt;/span&gt;cypress-axe axe-core &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we need to let Cypress know that we have extended the list of commands. Therefore, we should add the following import statement in &lt;code&gt;cypress/support/index.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;​​&lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cypress-axe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great, with that in place, we can start using the library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-audits"&gt;
  &lt;/a&gt;
  Running audits
&lt;/h2&gt;

&lt;p&gt;The first command we’re going to use is &lt;code&gt;injectAxe&lt;/code&gt;. Basically, it inserts the &lt;code&gt;axe-core&lt;/code&gt; code into the application under test. Therefore, it needs to be run after the &lt;code&gt;visit&lt;/code&gt; call (and after each reload) to make sure the runtime is available on the website.&lt;/p&gt;

&lt;p&gt;Let’s create a separate &lt;code&gt;accessibility.spec.js&lt;/code&gt; test suite and utilize it in there:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should not report any errors during the accessibility audit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;injectAxe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can run the tests now. To get more feedback while developing, we’ll run it in Cypress Test Runner with a full GUI. This can be done via the &lt;code&gt;open&lt;/code&gt; command (keep in mind to start the app earlier with &lt;code&gt;yarn start&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn run cypress open
&lt;span class="c"&gt;# or&lt;/span&gt;
npx cypress open
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in the runner, we select &lt;code&gt;accessibility.spec.js&lt;/code&gt; to run it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ppohk52Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uiq7g6wbvv0ujglfkr4c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ppohk52Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uiq7g6wbvv0ujglfkr4c.png" alt="Cypress GUI with two specs: accessibility and functional"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So far, so good — the test runs without any errors. After opening the developer tools and switching the console context to our app, we should have access to the &lt;code&gt;axe&lt;/code&gt; object, which indicates that it was indeed correctly injected:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BGqVb2rG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wc78l9ya1bv2t78uvqt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BGqVb2rG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wc78l9ya1bv2t78uvqt.png" alt="Cypress Test Runner with developers console opened and AXE object logged there"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s worth noting that the library also adds a &lt;code&gt;configureAxe&lt;/code&gt; command. This corresponds to &lt;code&gt;axe.configure&lt;/code&gt; from &lt;code&gt;axe-core&lt;/code&gt;, described &lt;a href="https://www.deque.com/axe/core-documentation/api-documentation/#api-name-axeconfigure"&gt;here&lt;/a&gt;. Using it is not needed in most cases but might be useful.&lt;/p&gt;

&lt;p&gt;We can now run the audit. This is done with the &lt;code&gt;checkA11y&lt;/code&gt; command. It can be run with the following parameters, all optional:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;context&lt;/code&gt; — a selector to a DOM element that should be analyzed.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;options&lt;/code&gt; — overrides for the global axe configuration whenever you want to set custom rules or checks for just that particular audit.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;violationCallback&lt;/code&gt; — custom handler for reported errors.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;skipFailures&lt;/code&gt; — allows you to prevent the test from failing on error and instead only log the error to the console.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s add it to the test and run it (on branch: &lt;code&gt;step-1&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should not report any errors during the accessibility audit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;injectAxe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checkA11y&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The app fails a test, informing the user about the violations. Upon clicking on each of the violations, the console logs more details, and the element causing the violation in each case is highlighted:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JTLp0HJJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hs3pq78ph1du2i25tbgv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JTLp0HJJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hs3pq78ph1du2i25tbgv.png" alt="Cypress Test Runner with failing accessibility audit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The log for each violation contains the following set of information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;command&lt;/code&gt; — informing us whether a violation is an error, warning, etc.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;id&lt;/code&gt; — identifier of the violated rule, for example, &lt;code&gt;button-name&lt;/code&gt; or &lt;code&gt;color-contrast.&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;impact&lt;/code&gt; — defining the severity of the violation.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;tags&lt;/code&gt; — making it easier to identify which rulesets were violated (e.g., &lt;code&gt;wcag2a&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;description&lt;/code&gt; — brief details about the rule.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;help&lt;/code&gt; — information on how to fix the issue.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;helpurl&lt;/code&gt; — link to more details about the issue.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;nodes&lt;/code&gt; — affected elements.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#fixing-the-bugs"&gt;
  &lt;/a&gt;
  Fixing the bugs
&lt;/h2&gt;

&lt;p&gt;In the example, we had three bugs reported. The first one was about the “clear the form” button missing “&lt;a href="https://dequeuniversity.com/rules/axe/4.3/button-name?application=axeAPI"&gt;discernible text&lt;/a&gt;.” As you can see, it’s an “icon button.” This means that screen reader users won’t be able to identify what it does! One way of fixing that is by adding an &lt;code&gt;aria-label&lt;/code&gt; attribute to the button.&lt;/p&gt;

&lt;p&gt;The second issue reported is informing us that the color contrast on the submit button is incorrect. Using “inspect” from the browser’s dev tools, indeed we can see that the contrast is 1.41, while &lt;a href="https://dequeuniversity.com/rules/axe/4.3/color-contrast"&gt;the rule&lt;/a&gt; requires at least 4.5 for smaller texts:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p5omWdvX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/27p4562f5fpco7u7my0i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p5omWdvX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/27p4562f5fpco7u7my0i.png" alt='Browser inspect on "Submit" button from the example app, showing the contrast being 1.41'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It can be easily fixed, for example by changing the text colors on the buttons to “black” instead of “white”:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---DlYK58_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w1uvpi3a4nm9ag08yo6a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---DlYK58_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w1uvpi3a4nm9ag08yo6a.png" alt='Browser inspect on "Submit" button from the example app, showing the contrast being 14.81'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The last error is caused by the form input missing a label, and &lt;a href="https://dequeuniversity.com/rules/axe/4.3/label"&gt;each one of them should have it&lt;/a&gt; so that screen reader users can easily navigate around. This can be fixed by either setting a &lt;code&gt;for&lt;/code&gt; attribute to the &lt;code&gt;id&lt;/code&gt; of the given &lt;code&gt;input&lt;/code&gt; for the &lt;code&gt;label&lt;/code&gt;, or if a &lt;code&gt;label&lt;/code&gt; is not present, by adding a corresponding &lt;code&gt;aria-&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;Let’s apply all of the fixes (branch: &lt;code&gt;step-2&lt;/code&gt;) and re-run the tests:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sE-3yJaV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nu89cy935l2ywar07l40.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sE-3yJaV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nu89cy935l2ywar07l40.png" alt="Cypress Test Runner with passing accessibility audit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nice! The app has passed the test, meaning that there were no accessibility violations found during the audit. With that test included in the pipeline, we can make sure we have not introduced any regressions in that area.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#audits-are-not-all-there-is"&gt;
  &lt;/a&gt;
  Audits are not all there is
&lt;/h2&gt;

&lt;p&gt;Audits are a powerful way of verifying accessibility violations; however, these are not always enough. The application might pass all of the automated audits, yet still not be accessible.&lt;/p&gt;

&lt;p&gt;One of the additional layers you can add to make sure you are building a good, accessible app, is to use  “accessible queries” for elements you interact with in the tests. In other words, you find elements by text, labels, roles, aria-attributes, etc., rather than using the IDs or data-test attributes. This applies to all layers of testing. There is a very useful project called &lt;a href="https://testing-library.com/"&gt;Testing Library&lt;/a&gt;, which provides you with UI-centric queries out of the box. It has a separate package for many different testing methods and libraries, including the Cypress one: &lt;a href="https://github.com/testing-library/cypress-testing-library"&gt;Cypress Testing Library&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s take a look at the test we initially had in the repository (file: &lt;code&gt;functional.spec.js&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should allow submitting data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[id=name]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dummy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[id=last-name]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tester&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[id=books]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[type=submit]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Thanks for submitting the form!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;be.visible&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It heavily relies on the IDs — these don’t matter much for the end-user since they rarely browse the web with the developer tools opened. They care much more about the labels we mentioned before, so let’s try to rewrite that test with that in mind.&lt;/p&gt;

&lt;p&gt;First, we need to install the dependency:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add @testing-library/cypress &lt;span class="nt"&gt;--dev&lt;/span&gt;
&lt;span class="c"&gt;# or&lt;/span&gt;
npm &lt;span class="nb"&gt;install&lt;/span&gt; @testing-library/cypress &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we add an appropriate import statement in &lt;code&gt;cypress/support/index.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;library&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;cypress&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;commands&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s it — we can make use of all the &lt;a href="https://testing-library.com/docs/queries/about/"&gt;queries&lt;/a&gt;! Let’s apply that to the test (branch: &lt;code&gt;step-3&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should allow submitting data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Name:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dummy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Last Name:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tester&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Books&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Submit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Thanks for submitting the form!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;be.visible&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running the test, it still passes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v04yg1Hi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vu0w1k74hu3ozpes0wjd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v04yg1Hi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vu0w1k74hu3ozpes0wjd.png" alt="Cypress Test Runner with passing test after introducing queries from Testing Library"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;findByLabelText&lt;/code&gt; command, we would have found the bug reported by the audit much sooner. Even if you were to decide not to use that package, referring to the &lt;a href="https://testing-library.com/docs/queries/about/#priority"&gt;priority&lt;/a&gt; of the queries description in the Testing Library docs would be beneficial for your users, and the quality of your tests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keyboard-navigation"&gt;
  &lt;/a&gt;
  Keyboard navigation
&lt;/h2&gt;

&lt;p&gt;Additionally, you can test the flow of your app for just keyboard navigation. A lot of users use just the keyboard to browse the web, and it’s important that the whole application flow can be completed without using the mouse. You can read more about its importance in the &lt;a href="https://developers.livechat.com/updates/livechat-accessibility-keyboard-navigation"&gt;“Keyboard navigation”&lt;/a&gt; article.&lt;/p&gt;

&lt;p&gt;The way Cypress is built does not allow simulating “real” user actions out of the box. All of the actions there are triggered via JavaScript. Usually, this is not a problem; however, in terms of keyboard navigation, it is — &lt;a href="https://docs.cypress.io/api/commands/type#Tabbing"&gt;we won’t be able to use a “Tab” key&lt;/a&gt;, which is necessary to simulate how the user would navigate around. Luckily, the &lt;a href="https://github.com/dmtrKovalenko/cypress-real-events"&gt;Cypress Real Events&lt;/a&gt; package comes in handy (or its alternatives, e.g. &lt;a href="https://github.com/Bkucera/cypress-plugin-tab"&gt;Cypress Plugin Tab&lt;/a&gt;). It uses the &lt;a href="https://chromedevtools.github.io/devtools-protocol/"&gt;Chrome DevTools Protocol&lt;/a&gt; (so it only works in Chrome) in order to fire actual system events. Still, it has its downsides, though — you won’t be able to interact with certain system elements like default selects. If you were to determine that this is an important part of your app, other testing frameworks might be necessary.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-simple-test-for-keyboard-navigation"&gt;
  &lt;/a&gt;
  Creating a simple test for keyboard navigation
&lt;/h2&gt;

&lt;p&gt;Let’s create a simple test for the keyboard flow. Let’s add the package to our project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add cypress-real-events &lt;span class="nt"&gt;--dev&lt;/span&gt;
&lt;span class="c"&gt;# or&lt;/span&gt;
npm &lt;span class="nb"&gt;install &lt;/span&gt;cypress-real-events &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And, as previously, import it in the &lt;code&gt;cypress/support/index.js&lt;/code&gt; to let Cypress know about the new goodies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cypress-real-events/support&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we should have access to all of the additional &lt;a href="https://github.com/dmtrKovalenko/cypress-real-events#api"&gt;API commands&lt;/a&gt;. What interests us most are &lt;code&gt;realPress&lt;/code&gt; (for single key presses) and &lt;code&gt;realType&lt;/code&gt; (for typing).&lt;/p&gt;

&lt;p&gt;Let’s add another simple test case, then, in the &lt;code&gt;accesibility.spec.js&lt;/code&gt; suite. We must use only the keyboard to navigate around and fill in all of the inputs in the form.&lt;/p&gt;

&lt;p&gt;Based on the application overview, after visiting the page, the first &lt;code&gt;Tab&lt;/code&gt; stroke should focus us on the "Name" field within the form. Let’s check that, then, using both the &lt;code&gt;realPress&lt;/code&gt; command from &lt;code&gt;cypress-real-events&lt;/code&gt; and the &lt;code&gt;focused&lt;/code&gt; one (&lt;a href="https://docs.cypress.io/api/commands/focused"&gt;from Cypress&lt;/a&gt;). The latter is from the Cypress API and gets the currently focused DOM element. However, since Cypress wraps the Application Under Test (AUT) in its own, separate iframe, and the events are fired using the CDP, we would need an extra click somewhere in the AUT. This would make sure the events are correctly fired for the AUT and not the Cypress runner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should allow submitting with just keyboard&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dummy form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;be.visible&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;realClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;realPress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tab&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So far so good. We would need an assertion to make sure that the focused element indeed has the “Name:” label. Let’s add a custom assertion for that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;assertFocusedInputLabel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;expectedLabel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;focused&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`label[for="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;"]`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;have.text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;expectedLabel&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let’s add that to the test, along with the typing action:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should allow submitting with just keyboard&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dummy form&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;be.visible&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;realClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;realPress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tab&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;assertFocusedInputLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Name:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;realType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dummy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now, let’s run it!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X7BYdr6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvmey3uvxjsjzwmdeg5s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X7BYdr6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gvmey3uvxjsjzwmdeg5s.png" alt="Cypress Test Runner with passing test after introducing simple keyboard navigation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The test passes, hooray! We can now do the same for other form elements, and finally, submit a form using the &lt;code&gt;Enter&lt;/code&gt; key (branch: &lt;code&gt;step-4&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should allow submitting with just keyboard&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dummy form&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;be.visible&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;realClick&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;realPress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tab&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;assertFocusedInputLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Name:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;realType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dummy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;realPress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tab&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;assertFocusedInputLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Last Name:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;realType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;User&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;realPress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tab&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;assertFocusedInputLabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Books&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;realPress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Space&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;realPress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;cy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Thanks for submitting the form!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;should&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;be.visible&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s run the test and see how it does:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dUjKKyc3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wc3u2vnjigwcharbrjdh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dUjKKyc3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wc3u2vnjigwcharbrjdh.png" alt="Cypress Test Runner with failing test after introducing keyboard navigation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oh no, a failure! Upon investigation, it seems that someone has added a &lt;code&gt;tabindex=-1&lt;/code&gt; attribute to the “Last name” field. That attribute will make the element “not tabbable” and as a result hide it from keyboard users. Let’s remove it (branch: &lt;code&gt;step-5&lt;/code&gt;) and re-run the tests:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xm5jtz4---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qpg92yao3its4fn34uvp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xm5jtz4---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qpg92yao3its4fn34uvp.png" alt="Cypress Test Runner with passing test after introducing keyboard navigation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perfect, we can see that it would find a bug in such a case. As you can see, the audit has passed, as this attribute is not disallowed. This is why having an additional layer for that would be highly beneficial in the long run.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#static-analysis"&gt;
  &lt;/a&gt;
  Static analysis
&lt;/h2&gt;

&lt;p&gt;The other things — apart from automated tests — you can add to prevent accessibility mistakes, are accessible plugins for the linters. In the same way they let you know about missing semicolons, they can warn you whenever necessary attributes are missing, or any other violations are made.&lt;/p&gt;

&lt;p&gt;A good example of such a tool is the &lt;a href="https://marketplace.visualstudio.com/items?itemName=deque-systems.vscode-axe-linter"&gt;axe Accessibility Linter&lt;/a&gt; VS code plugin. With the same &lt;code&gt;axe-core&lt;/code&gt; rules engine, the plugin will inform you whenever an accessibility bug appears.&lt;/p&gt;

&lt;p&gt;The other example is an accessibility eslint plugin for JSX elements: &lt;a href="https://www.npmjs.com/package/eslint-plugin-jsx-a11y"&gt;eslint-plugin-jsx-a11y&lt;/a&gt;. Although it would not inform you about all of the errors, it would for sure prevent you from making the most basic mistakes. The eslint plugin has a big advantage over any editor plugins — it can be run as a &lt;a href="https://gist.github.com/estorgio/e8bcaa8e87d0fcdcf85fdf598956e34c"&gt;pre-commit hook&lt;/a&gt; or on the CI before the build process. Thanks to that, the verification can be forced within the project configuration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapup"&gt;
  &lt;/a&gt;
  Wrap-up
&lt;/h2&gt;

&lt;p&gt;Making our Chat Widget accessible has been really enlightening for us, in many areas. It was also hard work, requiring a lot of learning. We believe in the value automated tests bring, and since accessibility is one of our biggest priorities, we want to make sure that it’s being thoroughly tested. We hope that with this description of our test setup, you’ll try it yourself.&lt;/p&gt;

&lt;p&gt;Be sure to let us know if you have any questions!&lt;/p&gt;

</description>
      <category>testing</category>
      <category>showdev</category>
      <category>a11y</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
