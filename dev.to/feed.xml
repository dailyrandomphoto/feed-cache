<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Welcome Thread - v148</title>
      <author>dev.to staff</author>
      <pubDate>Thu, 28 Oct 2021 03:55:58 +0000</pubDate>
      <link>https://dev.to/thepracticaldev/welcome-thread-v148-3n80</link>
      <guid>https://dev.to/thepracticaldev/welcome-thread-v148-3n80</guid>
      <description>&lt;p&gt;&lt;a href="https://i.giphy.com/media/ypqHf6pQ5kQEg/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/ypqHf6pQ5kQEg/giphy.gif" alt='Baby polar bear saying "sup"' width="245" height="268"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-to-dev"&gt;
  &lt;/a&gt;
  Welcome to DEV!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Leave a comment below to introduce yourself! You can talk about what brought you here, what you're learning, or just a fun fact about yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reply to someone's comment, either with a question or just a hello. 👋 &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great to have you in the community!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>welcome</category>
    </item>
    <item>
      <title>Introduction to Git</title>
      <author>Pandz18</author>
      <pubDate>Thu, 28 Oct 2021 03:48:53 +0000</pubDate>
      <link>https://dev.to/pandz18/introduction-to-git-4129</link>
      <guid>https://dev.to/pandz18/introduction-to-git-4129</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-git"&gt;
  &lt;/a&gt;
  What is Git?
&lt;/h3&gt;

&lt;p&gt;Git is a free and Open Sourced &lt;a href="https://www.geeksforgeeks.org/version-control-systems/"&gt;Version Control System&lt;/a&gt;, ie, allows programmers to keep track of any changes with files involving collaborative software development. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-basic-git-commands"&gt;
  &lt;/a&gt;
  Some Basic Git Commands
&lt;/h3&gt;

&lt;p&gt;1) &lt;code&gt;git status&lt;/code&gt;&lt;br&gt;
2) &lt;code&gt;git add&lt;/code&gt;&lt;br&gt;
3) &lt;code&gt;git checkout&lt;/code&gt;&lt;br&gt;
4) &lt;code&gt;git commit&lt;/code&gt;&lt;br&gt;
5) &lt;code&gt;git push&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;// I will be using VS Code for these examples.//&lt;/p&gt;

&lt;p&gt;Before you can use Git in VS Code, you first need to clone a repository. Open Github and the repository that you want to clone, fork the repository. Once the forked Repository opens, copy the URL. Open VS Code and in the "Get Started" tab, under "Start" Click on "Clone Git Repository" and paste the URL of your forked Repository. After creating files for the repository click on View -&amp;gt; Terminal or shortcut: ^` for Mac.&lt;/p&gt;

&lt;p&gt;1)"&lt;code&gt;git status&lt;/code&gt;" -  The command is used to display the state of the working directory and the staging area, it also shows which files have been tracked (Added to staging area) and untracked (Not Added to staging area).&lt;/p&gt;

&lt;p&gt;2) "&lt;code&gt;git add&lt;/code&gt;" - The command is used to add files to the &lt;a href="https://stackoverflow.com/questions/49228209/whats-the-use-of-the-staging-area-in-git"&gt;staging area&lt;/a&gt; and it's syntax is "git add filename.extention". &lt;/p&gt;

&lt;p&gt;Let us take an example, where we have created a file called "text.txt". When you open the terminal in VS code type in "git add text.txt". To check if the file has been staged, use the "git status" command and the following should appear.&lt;/p&gt;




&lt;p&gt;On branch main&lt;br&gt;
Your branch is up to date with 'origin/main'.&lt;/p&gt;

&lt;p&gt;Changes to be committed:&lt;br&gt;
  (use "git restore --staged ..." to unstage)&lt;br&gt;
        new file:   text.txt&lt;/p&gt;




&lt;p&gt;In the terminal untracked files will appear in red and tracked as green.&lt;/p&gt;

&lt;p&gt;3) "&lt;code&gt;git checkout&lt;/code&gt;" - The command is used to change between branches in the repository. In this example, I have created a new branch called "demo" using the "git branch branchname" command. So to change the branch, the syntax would be "git checkout branchname", in this case, it would be "git checkout demo" and the following should appear.&lt;/p&gt;




&lt;p&gt;git checkout demo&lt;br&gt;
A       text.txt&lt;br&gt;
Switched to branch 'demo'&lt;/p&gt;




&lt;p&gt;4) "&lt;code&gt;git commit&lt;/code&gt;" - The command is used to create a snapshot of all the changes made to the repository and will not be changed unless asked to and this will be "pushed" to the main repository. The syntax of the command is "git commit", if you would like to add a message to the commit, type the command as &lt;code&gt; git commit -m "Enter message here" &lt;/code&gt;, and if you use the command as is, it will open a message editor where you enter the message for the commit and exit that screen type ":wq".&lt;br&gt;&lt;br&gt;
So this is how it should appear after using the command.&lt;/p&gt;




&lt;p&gt;example text&lt;br&gt;
 1 file changed, 1 insertion(+)&lt;br&gt;
 create mode 100644 text.txt&lt;/p&gt;




&lt;p&gt;5) "&lt;code&gt;git push&lt;/code&gt;" - The command is used to push all the changes in your repository to the main repository. When you use the command the following should appear.&lt;/p&gt;




&lt;p&gt;Enumerating objects: 5, done.&lt;br&gt;
Counting objects: 100% (5/5), done.&lt;br&gt;
Delta compression using up to 8 threads&lt;br&gt;
Compressing objects: 100% (2/2), done.&lt;br&gt;
Writing objects: 100% (3/3), 254 bytes | 254.00 KiB/s, done.&lt;br&gt;
Total 3 (delta 1), reused 0 (delta 0), pack-reused 0&lt;br&gt;
remote: Resolving deltas: 100% (1/1), completed with 1 local object.&lt;br&gt;
To [The URL of your repository]&lt;/p&gt;




&lt;p&gt;Here are a few sources for those who are interested in learning Git. &lt;/p&gt;

&lt;p&gt;1) &lt;a href="https://www.coursera.org/learn/version-control-with-git"&gt;Atlassian - Version Control with Git (Paid)&lt;/a&gt;&lt;br&gt;
2) &lt;a href="https://www.coursera.org/learn/introduction-git-github"&gt;Google - Introduction to Git and GitHub (Paid)&lt;/a&gt;&lt;br&gt;
3) &lt;a href="https://www.atlassian.com/git"&gt;Atlassian (Website)&lt;/a&gt;&lt;br&gt;
4) &lt;a href="https://www.freecodecamp.org/news/learn-the-basics-of-git-in-under-10-minutes-da548267cc91/"&gt;freecodecamp (Website)&lt;/a&gt;&lt;br&gt;
5) &lt;a href="https://www.geeksforgeeks.org/ultimate-guide-git-github/"&gt;geeksforgeeks (Website)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope this helps, I am too learning git and if you have any feedback on how I can improve or any changes to make, please feel free to reach out!&lt;/p&gt;

</description>
      <category>git</category>
      <category>opensource</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Beginners Guide to CRUD using JavaScript</title>
      <author>Max Anselmo</author>
      <pubDate>Thu, 28 Oct 2021 02:30:32 +0000</pubDate>
      <link>https://dev.to/themanselmo/beginners-guide-to-crud-using-javascript-2d03</link>
      <guid>https://dev.to/themanselmo/beginners-guide-to-crud-using-javascript-2d03</guid>
      <description>&lt;p&gt;So you want to write your own CRUD functionality in JavaScript? Well this is the right place to be!&lt;br&gt;
But first off, what the heck is CRUD?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CRUD&lt;/strong&gt; stands for:&lt;br&gt;
&lt;strong&gt;C&lt;/strong&gt;reate - &lt;strong&gt;R&lt;/strong&gt;ead - &lt;strong&gt;U&lt;/strong&gt;pdate - &lt;strong&gt;D&lt;/strong&gt;elete&lt;/p&gt;

&lt;p&gt;These are the four cardinal functions used when interacting with a database or dealing with data in general, and to use that functionality in JavaScript, we're going to use something called &lt;code&gt;fetch&lt;/code&gt; to make a http request.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fetch&lt;/code&gt; is a built in JavaScript function that is not compatible with older browsers, but works very well with the modern browsers that do support it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fetch&lt;/code&gt; takes in an &lt;em&gt;address&lt;/em&gt; where the http request should be sent to, and optionally takes in &lt;em&gt;options&lt;/em&gt; (method, headers, body, etc) and returns a promise (the container that our fetch response is in).&lt;/p&gt;

&lt;p&gt;The most basic fetch request is a &lt;strong&gt;Get&lt;/strong&gt; request. This is an example of our &lt;strong&gt;Read&lt;/strong&gt; crud functionality.&lt;/p&gt;

&lt;p&gt;Here is how we will set up our get request using fetch:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const whereWeWantToFetch = "url"
fetch(whereWeWantToFetch)
.then(res =&amp;gt; res.json())
.then(data =&amp;gt; console.log(data)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;em&gt;url&lt;/em&gt; is going to be where we are fetching to, where our database is.&lt;br&gt;
We &lt;em&gt;then&lt;/em&gt; convert our promise returned from our fetch to usable json, and finally &lt;em&gt;then&lt;/em&gt; take our &lt;strong&gt;data&lt;/strong&gt; and do whatever we want with it! (Although here we simply console.log it)&lt;/p&gt;

&lt;p&gt;The next example request is a &lt;strong&gt;Post&lt;/strong&gt; request. This is an example of our &lt;strong&gt;Create&lt;/strong&gt; crud functionality.&lt;br&gt;
Here is how we will set up our post request:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const whatIWantToPost = "Post me!"
const whereWeWantToFetch = "url"
fetch(whereWeWantToFetch, {
    method: "POST",
    headers: {
        "Content-Type": "application/json"
    },
    body: JSON.stringify(whatIWantToPost)
})
.then(res =&amp;gt; res.json())
.then(data =&amp;gt; console.log(data)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the post requires a few extra bits compared to our get request. Here we need to include a &lt;em&gt;method&lt;/em&gt; (what we are doing, here we are POSTing), &lt;em&gt;headers&lt;/em&gt; (letting the server know what type of data to expect from the post request), and a &lt;em&gt;body&lt;/em&gt; (what we are sending in the post request)&lt;/p&gt;

&lt;p&gt;The third example request is a &lt;strong&gt;Patch&lt;/strong&gt; request. This is an example of our &lt;strong&gt;Update&lt;/strong&gt; crud functionality.&lt;br&gt;
Here is how we will set up our Patch request:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const whereWeWantToFetch = "url/${id}"
fetch(whereWeWantToFetch, {
    method: "PATCH",
    headers: {
        "Content-Type": "application/json"
    },
    body: JSON.stringify({
        key: "updatedValue"
    })
})
.then(res =&amp;gt; res.json())
.then(data =&amp;gt; console.log(data)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The patch request is similar to post, however here we are updating an existing item in our database.&lt;br&gt;
Notice here we have to include an &lt;strong&gt;id&lt;/strong&gt; at the end of our url to specify which item in our database we would like to update.&lt;/p&gt;

&lt;p&gt;The final and relatively simple request is our &lt;strong&gt;Delete&lt;/strong&gt; request, completing our CRUD acronym.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const whereWeWantToFetch = "url/${id}"
fetch(whereWeWantToFetch, {
    method: "DELETE",
})
.then(res =&amp;gt; res.json())
.then(data =&amp;gt; console.log(data)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Delete requires no headers or body, only a method, as it is just removing something from our database.&lt;/p&gt;

&lt;p&gt;... and with that, you now have all the basics to implement CRUD functions into your JavaScript application!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>database</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>An NFT based game</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Thu, 28 Oct 2021 02:29:29 +0000</pubDate>
      <link>https://dev.to/nickytonline/an-nft-based-game-1jfk</link>
      <guid>https://dev.to/nickytonline/an-nft-based-game-1jfk</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-project"&gt;
  &lt;/a&gt;
  The project
&lt;/h2&gt;

&lt;p&gt;So this past week I built out my second dApp with the current cohort in the &lt;a href="https://buildspace.so"&gt;Buildspace&lt;/a&gt; community. This time round, the project was to create an NFT based game. The goal was to make a game where you could attack a big boss via a transaction on the blockchain that would use a game smart contract.&lt;/p&gt;

&lt;p&gt;So like the previous dApp, this required some knowledge of Solidity to build out our smart contact, &lt;a href="https://hardhat.org/"&gt;Hardhat&lt;/a&gt; to help us develop our dApp with ETH, and some frontend skills (React and JavaScript).&lt;/p&gt;

&lt;p&gt;The project provides a template for the frontend part, but once again I used my &lt;a href="https://github.com/nickytonline/web3-starter"&gt;web3 starter project&lt;/a&gt;. The benefit of building out with the web3 starter is I'm improving the starter project. 😎&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#going-off-script"&gt;
  &lt;/a&gt;
  Going off script
&lt;/h2&gt;

&lt;p&gt;Like the first dApp I built, I made it my own. Here's some fun screenshots from the README.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#select-your-player"&gt;
  &lt;/a&gt;
  Select your player
&lt;/h3&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oqpojCSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5apna2gthcp2uzp67vd.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oqpojCSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5apna2gthcp2uzp67vd.gif" alt="Mint your player in Terrible Characters" width="880" height="581"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;/center&gt;
&lt;h3&gt;
  &lt;a href="#mint-your-player"&gt;
  &lt;/a&gt;
  Mint your player
&lt;/h3&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ff1KJiIC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uh00c3pltuxe2gexjzk3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ff1KJiIC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uh00c3pltuxe2gexjzk3.gif" alt="Player being minted" width="880" height="581"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;/center&gt;
&lt;h3&gt;
  &lt;a href="#attack-the-big-boss"&gt;
  &lt;/a&gt;
  Attack the big boss
&lt;/h3&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M0LjRu64--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1w4w5ypmaa2bazttn66.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M0LjRu64--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n1w4w5ypmaa2bazttn66.gif" alt="A player with a minted NFT attacking a big boss in Terrible Characters" width="860" height="658"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;/center&gt;
&lt;h3&gt;
  &lt;a href="#when-your-player-is-dead"&gt;
  &lt;/a&gt;
  When your player is dead
&lt;/h3&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LbwPk-Vi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5ask849iqilo3r53uw0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LbwPk-Vi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5ask849iqilo3r53uw0.png" alt="When your player is dead" width="520" height="541"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;/center&gt;

&lt;p&gt;If you're interested in how it's all built, I've open sourced it.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/nickytonline"&gt;
        nickytonline
      &lt;/a&gt; / &lt;a href="https://github.com/nickytonline/terrible-characters"&gt;
        terrible-characters
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Terrible Characters&lt;/h1&gt;
&lt;p&gt;Terrible Characters is a fun NFT based game that I built as part of a
&lt;a href="https://buildspace.so" rel="nofollow"&gt;Buildspace&lt;/a&gt; cohort. Try it out and have some fun!&lt;/p&gt;
&lt;h3&gt;
Select your player&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/nickytonline/terrible-charactersmint-your-player.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BRM9sWHA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/nickytonline/terrible-charactersmint-your-player.gif" alt="Mint your player in Terrible Characters"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Mint your player&lt;/h3&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/nickytonline/terrible-charactersminting.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BcDEe41t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/nickytonline/terrible-charactersminting.gif" alt="Player being minted"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
Attack the big boss&lt;/h3&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/nickytonline/terrible-charactersterrible-characters-screenshot.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5jIWN2n---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/nickytonline/terrible-charactersterrible-characters-screenshot.gif" alt="A player with a minted NFT attacking a big boss in Terrible Characters"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
When your player is dead&lt;/h3&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/nickytonline/terrible-charactersdead-player.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xHg3JsYk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/nickytonline/terrible-charactersdead-player.png" alt="When your player is dead"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
Contributing&lt;/h2&gt;
&lt;p&gt;If you are interested in contributing to the project, first read our
&lt;a href="https://github.com/nickytonline/terrible-characters./CONTRIBUTING.md"&gt;contributing guidelines&lt;/a&gt;. Take a look at our
&lt;a href="https://github.com/nickytonline/unofficial-edge-and-node-starter/issues"&gt;existing issues&lt;/a&gt;,
or if you come across an issue,
&lt;a href="https://github.com/nickytonline/unofficial-edge-and-node-starter/issues/new/choose"&gt;create an issue&lt;/a&gt;.
For feature requests,
&lt;a href="https://github.com/nickytonline/unofficial-edge-and-node-starter/discussions"&gt;start a discussion&lt;/a&gt;
first.&lt;/p&gt;
&lt;h2&gt;
Getting Started (Local Development)&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install the dependencies&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm install
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or&lt;/span&gt;
yarn&lt;/pre&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start the project&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm run dev
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; or&lt;/span&gt;
yarn dev&lt;/pre&gt;

&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Open &lt;a href="http://localhost:3000" rel="nofollow"&gt;http://localhost:3000&lt;/a&gt; with your browser to see the
result.&lt;/p&gt;
&lt;h2&gt;
Getting Started (Gitpod)&lt;/h2&gt;
&lt;p&gt;The project can be run in Gitpod. Navigate to
&lt;a href="https://gitpod.io/#https://github.com/nickytonline/hello-edge-and-node" rel="nofollow"&gt;https://gitpod.io/#https://github.com/nickytonline/hello-edge-and-node&lt;/a&gt;. If you
wish to load it in Gitpod as an external contributor, you will need to fork the
project first, then open…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/nickytonline/terrible-characters"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;If you want to just check out the game, head on over to &lt;a href="https://nftgame.iamdeveloper.com"&gt;nftgame.iamdeveloper.com&lt;/a&gt;. Note that it's only on the Rinkeby test network so no real coin will be used.&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;

</description>
      <category>web3</category>
      <category>dapp</category>
      <category>nextjs</category>
      <category>react</category>
    </item>
    <item>
      <title>Hacktoberfest 2021! My second contribution</title>
      <author>MizuhoOkimoto</author>
      <pubDate>Thu, 28 Oct 2021 00:34:15 +0000</pubDate>
      <link>https://dev.to/okimotomizuho/hacktoberfest-2021-my-second-contribution-50nl</link>
      <guid>https://dev.to/okimotomizuho/hacktoberfest-2021-my-second-contribution-50nl</guid>
      <description>&lt;p&gt;On the second week of October, I made another Pull Request(PR). I will introduce the project and also my big mistake😂 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project"&gt;
  &lt;/a&gt;
  Project
&lt;/h2&gt;

&lt;p&gt;This project was a meditation app created on React.JS and bootstrapped with Create React App.&lt;br&gt;
Project Repo: &lt;a href="https://github.com/akshat157/meditate-app"&gt;https://github.com/akshat157/meditate-app&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#issue"&gt;
  &lt;/a&gt;
  Issue
&lt;/h2&gt;

&lt;p&gt;The issue was changing the fonts, one of the owners of the repository said that the current font looks outdated.&lt;br&gt;
Issue: &lt;a href="https://github.com/akshat157/meditate-app/issues/32"&gt;https://github.com/akshat157/meditate-app/issues/32&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-i-did"&gt;
  &lt;/a&gt;
  What I did
&lt;/h2&gt;

&lt;p&gt;I opened the Google Fonts and looked at the many fonts. I wasn't very confident because I hadn't studied the design side, but I chose Barlow and Maven Pro fonts because they are easy to read and they don't look like the default fonts. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rg99vZrC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jsgn6he7yahs3u8a79ej.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rg99vZrC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jsgn6he7yahs3u8a79ej.jpg" alt="App interface" width="880" height="446"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#pull-request"&gt;
  &lt;/a&gt;
  Pull Request
&lt;/h2&gt;

&lt;p&gt;I was going to make a PR... BUT...!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#i-had-a-problem-fearfulfearfulfearful"&gt;
  &lt;/a&gt;
  I had a problem 😨😨😨
&lt;/h3&gt;

&lt;p&gt;The CONTRIBUTE.md says not to push to main branch but I did it...&lt;br&gt;
I was going to delete my forked repo and the branch and make everything restart. However, I chose to contact to &lt;br&gt;
Professorrrrrrrr😭 for a better understanding. He helped me right away and told me how to do it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-did-i-solve-it"&gt;
  &lt;/a&gt;
  How did I solve it?
&lt;/h2&gt;

&lt;p&gt;First of all, he suggested I do the below commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$git checkout -B issue-32 c9dbd88
$git checkout main
$git pull upstream main
$git checkout issue-32
$git rebase main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, my push and merge was still there like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PS C:\Users\Mizuho\meditate-app&amp;gt; git checkout -B issue-32 c9dbd88
Switched to and reset branch 'issue-32'
PS C:\Users\Mizuho\meditate-app&amp;gt; git checkout main
Switched to branch 'main'
Your branch is up to date with 'origin/main'.
PS C:\Users\Mizuho\meditate-app&amp;gt; git pull upstream main
From https://github.com/akshat157/meditate-app
 * branch            main       -&amp;gt; FETCH_HEAD
 * [new branch]      main       -&amp;gt; upstream/main
warning: refname 'd327d53e852a17353ecb297da2f819ac7bceee0f' is ambiguous.
Git normally never creates a ref that ends with 40 hex characters
because it will be ignored when you just specify 40-hex. These refs
may be created by mistake. For example,
  git switch -c $br $(git rev-parse ...)
 where "$br" is somehow empty and a 40-hex ref is created. Please
 examine these refs and maybe delete them. Turn this message off by
 running "git config advice.objectNameWarning false"
Already up to date.
PS C:\Users\Mizuho\meditate-app&amp;gt; git checkout issue-32
Switched to branch 'issue-32'
PS C:\Users\Mizuho\meditate-app&amp;gt; git rebase main
First, rewinding head to replay your work on top of it...
Fast-forwarded issue-32 to main.
PS C:\Users\Mizuho\meditate-app&amp;gt; git status
On branch issue-32
nothing to commit, working tree clean
PS C:\Users\Mizuho\meditate-app&amp;gt; git log
Merge: d327d53 c9dbd88
Author: MizuhoOkimoto &amp;lt;54873998+MizuhoOkimoto@users.noreply.github.com&amp;gt;
    Merge branch 'issue-32' into main
commit c9dbd884650c1a1abb324822d8d08e1fd7521eae
Author: MizuhoOkimoto &amp;lt;54873998+MizuhoOkimoto@users.noreply.github.com&amp;gt;
Date:   Fri Oct 15 18:14:45 2021 -0400
    Add font family Barlow and Maven Pro
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;He pointed out that I didn't make a remote(!). I just created a branch. I made a new branch and used pull command to fetch and merge to the 'dev' branch, and rebased it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PS C:\Users\Mizuho\meditate-app&amp;gt; git checkout dev
Switched to branch 'dev'
Your branch is up to date with 'origin/dev'.
PS C:\Users\Mizuho\meditate-app&amp;gt; git pull upstream dev
From https://github.com/akshat157/meditate-app
 * branch            dev        -&amp;gt; FETCH_HEAD
 * [new branch]      dev        -&amp;gt; upstream/dev
Already up to date.
PS C:\Users\Mizuho\meditate-app&amp;gt; git checkout issue-32
Switched to branch 'issue-32'
PS C:\Users\Mizuho\meditate-app&amp;gt; git rebase dev
Current branch issue-32 is up to date.
PS C:\Users\Mizuho\meditate-app&amp;gt; git push origin issue-32
Total 0 (delta 0), reused 0 (delta 0)
remote:
remote: Create a pull request for 'issue-32' on GitHub by visiting:
remote:      https://github.com/MizuhoOkimoto/meditate-app/pull/new/issue-32
remote:
To https://github.com/MizuhoOkimoto/meditate-app.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I switched to main(&lt;code&gt;$git checkout main&lt;/code&gt;) and did &lt;code&gt;$git log&lt;/code&gt;, but main was still head to my push. He told me to do that with the capital -B command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PS C:\Users\Mizuho\meditate-app&amp;gt; git checkout -B main upstream/main
Reset branch 'main'
warning: refname 'd327d53e852a17353ecb297da2f819ac7bceee0f' is ambiguous.
Git normally never creates a ref that ends with 40 hex characters
because it will be ignored when you just specify 40-hex. These refs
may be created by mistake. For example,
  git switch -c $br $(git rev-parse ...)
where "$br" is somehow empty and a 40-hex ref is created. Please
examine these refs and maybe delete them. Turn this message off by
running "git config advice.objectNameWarning false"
Branch 'main' set up to track remote branch 'main' from 'upstream'.
Your branch is behind 'origin/main' by 3 commits, and can be fast-forwarded.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#git-log-on-main-branch"&gt;
  &lt;/a&gt;
  $git log on main branch...
&lt;/h3&gt;

&lt;p&gt;My push and merge on the main branch was gone!😇&lt;br&gt;
I could finally made a PR.&lt;br&gt;
PR: &lt;a href="https://github.com/akshat157/meditate-app/pull/35"&gt;https://github.com/akshat157/meditate-app/pull/35&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I wasn't careful with this PR and I made a mistake. Even though I learned about amend and rebase that week when it happened. However, I panicked and couldn't solve it by myself. Next time, I definitely will read the contribution section more carefully!&lt;/p&gt;

&lt;p&gt;Happy Hacktoberfest!🎃&lt;/p&gt;

&lt;p&gt;(Photo by David Libeert on Unsplash)&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>programming</category>
      <category>github</category>
      <category>git</category>
    </item>
    <item>
      <title>Component Lifecycle In React Functional Components</title>
      <author>mohamed farid</author>
      <pubDate>Thu, 28 Oct 2021 00:10:44 +0000</pubDate>
      <link>https://dev.to/mohamedfarids/component-lifecycle-in-react-functional-components-4p5h</link>
      <guid>https://dev.to/mohamedfarids/component-lifecycle-in-react-functional-components-4p5h</guid>
      <description>&lt;p&gt;Using Functional Components in react become the most popular way to create react Components, sometimes I feel like I want to use a &lt;br&gt;
class component lifecycle functions but still want to get benefits from react hooks&lt;/p&gt;

&lt;p&gt;it is simple tutorial about how to use useEffect hook as lifecycle functions in react.&lt;/p&gt;

&lt;p&gt;lets start with the most simple one &lt;code&gt;componentDidMount()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;you can create it easily&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%c componetDidMount&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color:green;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to add &lt;code&gt;componentWillMount()&lt;/code&gt; just add it as returned function for &lt;code&gt;componentDidMount()&lt;/code&gt; Like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%c componetDidMount&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color:green;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;componentWillUnmount&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%c componetWillUnmount&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color:red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the next one will be a compine between &lt;code&gt;componentDidMount()&lt;/code&gt; and &lt;code&gt;componentWillMount()&lt;/code&gt;&lt;br&gt;
it will be &lt;code&gt;componentDidMountAndCompontDidUpdate()&lt;/code&gt; yeah it is not from react lifecycle component but will help to understand &lt;code&gt;useEffect&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;componentDidMountAndCompontDidUpdate&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%c componentDidMountAndCompontDidUpdate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color:teal;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this function with no deps array will run twice in the rendering of the component. it will run at mount and after this it will run at update, This component will run every time after any state change.&lt;/p&gt;

&lt;p&gt;The remaining Function is &lt;code&gt;componetDidUpdate()&lt;/code&gt; to build a componentDidUpdate you need to create mounted flag.&lt;br&gt;
run function only in componet update and ignore run in componet mount&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;runComponentDidUpdate&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isComponetMounted&lt;/span&gt;&lt;span class="p"&gt;()){&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; 
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;componentDidUpdate&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%c CompontDidUpdateForAnyVariable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color:orange;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})()&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;lastUseEffect&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;signComponetAsMounted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;signComponetAsMounted&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isComponetMounted&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The whole code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;FuctionComponentLifeCycle&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mounted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%c componetDidMount&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color:green;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;componentWillUnmount&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%c componetWillUnmount&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color:red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;componentDidMountAndCompontDidUpdate&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%c componentDidMountAndCompontDidUpdate&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color:teal;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;


    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ComponentDidUpdateForCount&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%c CompontDidUpdateForCount&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color:blue;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;



    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;runComponentDidUpdate&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isComponetMounted&lt;/span&gt;&lt;span class="p"&gt;()){&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; 
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;componentDidUpdate&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;%c CompontDidUpdateForAnyVariable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color:orange;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})()&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;lastUseEffect&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;signComponetAsMounted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;signComponetAsMounted&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isComponetMounted&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="nx"&gt;Rendered&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Add&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;FuctionComponentLifeCycle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks for reading.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Product developers’ guide to customize data for AI - Part 3: Merge multiple dataframes</title>
      <author>Mage</author>
      <pubDate>Wed, 27 Oct 2021 23:55:42 +0000</pubDate>
      <link>https://dev.to/mage_ai/product-developers-guide-to-customize-data-for-ai-part-3-merge-multiple-dataframes-344f</link>
      <guid>https://dev.to/mage_ai/product-developers-guide-to-customize-data-for-ai-part-3-merge-multiple-dataframes-344f</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;As a step towards data processing, learn how to merge multiple datasets together and analyze the story behind the data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Before we begin&lt;/li&gt;
&lt;li&gt;Merging all data&lt;/li&gt;
&lt;li&gt;Email subscriptions&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Nowadays, it’s common for products to integrate AI into many applications or features. In this guide, we’ll be looking at how AI is used in email marketing campaigns and get started with combining all our datasets together. Finally, we’ll wrap up this series with a look into data preparation so we’re ready to do machine learning model training with our dataset.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zWb_0tUm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ffcekywmf0t1qs0ezwry.png" alt="Image description" width="600" height="600"&gt;&lt;em&gt;Collecting data on the latest campaign (Source: &lt;a href="https://www.business2community.com/email-marketing/the-most-important-types-of-emails-you-need-for-email-marketing-success-02219324"&gt;B2C&lt;/a&gt;)&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#before-we-begin"&gt;
  &lt;/a&gt;
  Before we begin
&lt;/h2&gt;

&lt;p&gt;By now, you should already be familiar with combining dataframes together, filtering and sorting. If not, read the 2nd part of our introduction series and data preparation series. We’ll start by introducing these 3 datasets, email_content, user_emails, and user_profiles.&lt;/p&gt;


&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y6KYlNlG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgz95vdxht6ld7pc69b0.png" alt="Image description" width="880" height="282"&gt;&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#merging-all-data"&gt;
  &lt;/a&gt;
  Merging all data
&lt;/h2&gt;

&lt;p&gt;After taking a look at these dataset, we’ll be looking for similarities that can be used to merge the datasets together. We’ll take the dataset with the most matching ids, user_emails and connect it with both the email_content and user profiles.&lt;/p&gt;

&lt;p&gt;Glancing at the dataframe, we see that in user_emails there are 2 ids, a user_id, and the email_id. These correspond to the id in user_profile and email_content respectively.&lt;/p&gt;


&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3IDnFXne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6xzrxff08r4gz1p5egwq.png" alt="Image description" width="880" height="343"&gt;&lt;/center&gt;

&lt;p&gt;I’ll start by renaming the columns from id to their matching column name.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8AG0mYU6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvyelni9hyev8feobve5.png" alt="Image description" width="880" height="101"&gt;&lt;em&gt;user_id and email_id&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Then we can call merge. I chose the left join here because our main dataset is on the left.&lt;/p&gt;


&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JofUVCxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m4t2z83idvwwxdclinft.png" alt="Image description" width="880" height="50"&gt;&lt;/center&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N-JtMw0y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2k0on36u2l9md0h7clw.png" alt="Image description" width="880" height="314"&gt;&lt;em&gt;All the columns from all 3 datasets merged into 1&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;And that’s it. We’ve completed preparing our data for training a machine learning model.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#email-subscriptions"&gt;
  &lt;/a&gt;
  Email subscriptions
&lt;/h2&gt;

&lt;p&gt;Next, we’re going to make scrappy inferences based on the data. First, let’s get the raw data by answering questions about our email campaign user subscriptions. Then, we’ll move to creating a model to determine the likelihood of churn.&lt;/p&gt;

&lt;p&gt;You’ve got to submit your next marketing report on your leads, the boss wants to know how well you’ve done and how the company has grown, if at all, since its inception.&lt;/p&gt;

&lt;p&gt;To do this, you’ll need to grab the data on 3 customer metrics.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How many customers have unsubscribed at least once?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We start off by picking out the data that matters, the user_id and the unsubscribed status. Note, we filter out the remaining columns because we care about just the users and not the number of emails.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KY_9Rc1c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pavmvvag88ojl39cfwva.png" alt="Image description" width="880" height="670"&gt;&lt;em&gt;Filter where the user_id is unique and unsubscribed value is yes.&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;&lt;strong&gt;Which type of subscription service was the least popular?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once again, we only want the user_id, sub status, and category.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L47okhf_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/msfrwz940phi108bxw8e.png" alt="Image description" width="880" height="525"&gt;&lt;em&gt;Filter for the user_id, unsubscribed, and category.&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Then we group these by each type of subscription, or “category”, and count.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MVCz0nn0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nts5pzdu7wxjgzmn2rv0.png" alt="Image description" width="700" height="392"&gt;&lt;em&gt;A lot of people don’t like promotional emails!&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;&lt;strong&gt;Which topics are our customers not as interested in?&lt;/strong&gt;&lt;br&gt;
Once again, we only want the user_id, unsubscribed and theme.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CWX9XAXz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/52uapz2gdez8kplvaojx.png" alt="Image description" width="880" height="595"&gt;&lt;em&gt;Filter for the user_id, unsubscribed, and theme.&lt;/em&gt;
&lt;/center&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B1VyVvLS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2skdqmqbwg7t94q4svpp.png" alt="Image description" width="584" height="398"&gt;&lt;em&gt;Customers tend to unsubscribe to lifestyle related emails.&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Based on the metrics, we infer from the data that we’ll want to avoid promotional emails, as well as those about improving lifestyle. Users of the platform seem to be interested in emails about food and those which are purely transactional. In a future series, we’ll revisit this data to create a model that’s better than simply making inferences from picking the best of each category and theme.&lt;/p&gt;



&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--16m8G_tN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ey0qzq5250gq0beh68ry.png" alt="Image description" width="880" height="587"&gt;&lt;/center&gt;
&lt;em&gt;Our customers love to spend money on food and always check the receipts. (Source: &lt;a href="https://www.cmu.edu/dietrich/news/news-stories/2016/july/images/online-ordering_900x600.jpg"&gt;CMU&lt;/a&gt;)&lt;/em&gt;

</description>
      <category>pandas</category>
      <category>deved</category>
      <category>dataframes</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>What are PWAs?</title>
      <author>Erik Cunha</author>
      <pubDate>Wed, 27 Oct 2021 23:54:03 +0000</pubDate>
      <link>https://dev.to/deverikh/what-are-pwas-17k5</link>
      <guid>https://dev.to/deverikh/what-are-pwas-17k5</guid>
      <description>&lt;p&gt;The concept of PWAs (Progressive Web Apps) is not new. It has been around since 2015, when Google introduced this new form of web experience on mobile devices. In the past few years, PWAs have gained strength and more people are betting on this idea. But, what are PWAs exactly? A Progressive Web App is a web app that uses modern browser features to provide users with an experience similar to a native application. These apps are hosted on servers, accessible by URLs and indexed by search engines. According to Google, PWAs should be:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reliable"&gt;
  &lt;/a&gt;
  Reliable
&lt;/h3&gt;

&lt;p&gt;When it is opened in a user’s home screen, a Progressive Web App loads instantly, regardless of the state of the network, and never shows the downasaur, even under uncertain network conditions. As the main features of the PWA are pre-stored in cache, it is able to eliminate dependency on the network, ensuring an instant and reliable experience for its users.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fast"&gt;
  &lt;/a&gt;
  Fast
&lt;/h3&gt;

&lt;p&gt;About 53% of users leave a website if it takes more than 3 seconds to load. Once they have loaded, users expect websites to be fast, without irregular scrolling or slow response in their interfaces. Most websites load all files and images (which are usually the heaviest) when accessed for the first time and this ends up impacting users’ experience, since they have to wait for the end of this process to start interacting with the website.&lt;br&gt;
For this reason, a PWA should not only open quickly when accessed, but should also have a short response time on its interfaces, to reduce what is called Time to Interactive (TTI), loading files and making calls to other resources and sources only when really necessary.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#engaging"&gt;
  &lt;/a&gt;
  Engaging
&lt;/h3&gt;

&lt;p&gt;PWAs should make users feel like they are in a native app. Progressive Web Apps can be installed and stay on the user’s home screen, without the need for an app store. They offer an immersive, full-screen experience and can even re-engage users with Push Notifications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-the-mobile-app-era-ending"&gt;
  &lt;/a&gt;
  Is the “Mobile App Era” ending?
&lt;/h3&gt;

&lt;p&gt;The mobile app boom that began in July 2008, when Apple launched the App Store, is no longer the same. Many companies know how difficult and costly it is to get people to download their apps. Have you ever stopped to think about how many apps from the App Store or Play Store you download each month?&lt;br&gt;
According to &lt;a href="https://s3.amazonaws.com/files.appannie.com/reports/1901_State_of_Mobile_Main_EN.pdf"&gt;The State of Mobile 2019&lt;/a&gt;, from App Annie, in terms of time of use, the most used apps in 2018 were communication and social networking apps, responsible for 50% of the time spent on apps globally. They were followed by video players and editors (15%) and games (10%). According to &lt;a href="https://www.statista.com/chart/3835/top-10-app-usage/"&gt;Statista&lt;/a&gt;, 96% of users’ time is spent on 10 applications. Of that 96%, most of the time is used in up to 3 apps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DvF4VUWp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4nbnvdg64f4aj85dc6gm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DvF4VUWp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4nbnvdg64f4aj85dc6gm.png" alt="statista-top-10-app-usage" width="752" height="467"&gt;&lt;/a&gt;&lt;br&gt;
Source: &lt;a href="https://www.statista.com/chart/3835/top-10-app-usage/"&gt;https://www.statista.com/chart/3835/top-10-app-usage/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Given this scenario, it becomes increasingly important to understand how users relate to apps, to identify aspects of user experience that can be improved, not only in the original apps themselves, but to make suggestions and to use in other options.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#user-retention"&gt;
  &lt;/a&gt;
  User retention
&lt;/h3&gt;

&lt;p&gt;Retention is a measure of the percentage of users who return to an app sometime after its purchase. For apps, retention is assessed by the number of users who continue to use an application, for example, one, two or three months after its download. Turnover is the opposite, measuring the percentage of people who do not return to a product or service after a certain period of time, migrating to other options in the market.&lt;br&gt;
According to data from &lt;a href="https://www.localytics.com/lp/cheat-sheet-overall-app-benchmarks-h2-2018/"&gt;Localytics&lt;/a&gt;, 43% of users continue using apps a month after downloading them, which means that 29% of users generate turnover and are no longer using those apps after a month. Things get worse as time goes by, reaching an average of 71% churning rate in the 3rd month.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CSqtXckq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/usyhc4t3saks81tvsep4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CSqtXckq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/usyhc4t3saks81tvsep4.png" alt="cheat-sheet-overall-app-benchmarks-h2-2018" width="704" height="430"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.localytics.com/lp/cheat-sheet-overall-app-benchmarks-h2-2018/"&gt;https://www.localytics.com/lp/cheat-sheet-overall-app-benchmarks-h2-2018/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Retention can also be more thorough, being measured by how many users return to an app in a specific number of days after its download. About 24.9% of users revisit apps one day after downloading them, while only 9.4% of users revisit apps two weeks after their download.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w5rmrLM9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v7izjdkj7oogpvoqnt8w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w5rmrLM9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v7izjdkj7oogpvoqnt8w.png" alt="User leaving app graph" width="800" height="451"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.localytics.com/lp/cheat-sheet-overall-app-benchmarks-h2-2018/"&gt;https://www.localytics.com/lp/cheat-sheet-overall-app-benchmarks-h2-2018/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Therefore, just having an app in stores does not mean that people will use it or even download it. In the world of native apps — in which large user bases, traffic, among other points, are necessary for monetization — however wonderful a new application idea may be, it costs more and more advertising and promotion to reach a critical mass and generate revenue efficiently.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-difference-between-developing-a-native-app-and-a-pwa"&gt;
  &lt;/a&gt;
  What is the difference between developing a native app and a PWA?
&lt;/h3&gt;

&lt;p&gt;Building native apps can be a very expensive solution for some companies, as it requires the maintenance of two software development teams, one for Android and the other for iOS. As it is necessary to ensure that both versions of the app are up to date, developing new features can greatly impact the productivity of a team or a company.&lt;/p&gt;

&lt;p&gt;Since all that is needed in order to develop a PWA are web technologies, there is no need for multiple teams with expertise in different operating systems. For iOS apps, it is still necessary to go through Apple’s review with each new version. On the other hand, a PWA is hosted on a server and accessed through an address in the browsers bar. Therefore, it doesn’t need Apple’s approval and doesn’t have to have its new versions sent to app stores.&lt;/p&gt;

&lt;p&gt;On Android, Google’s Play Store already supports the publication of PWAs, which brings many benefits and makes users’ experience better, as if they were using a real installed app.&lt;/p&gt;

&lt;p&gt;Thus, for the development of PWAs, it is only necessary to have knowledge in web technologies (there are several options between frameworks and libraries) to serve users of practically all platforms, without having to be an expert in each user’s preferred operating system.&lt;/p&gt;

&lt;p&gt;Another important aspect to be considered when developing apps and PWAs is the space needed to install them on a hard drive. A growing trend are cloud-based services and Software as a Service (SaaS) models delivered by browsers instead of installed software. Today, we already have many well-established SaaS, such as Netflix and Spotify, which also serve app users. However, the idea of a SaaS is that all that is needed for the experience is an Internet connection.&lt;/p&gt;

&lt;p&gt;The aim of a SaaS is to be able to be accessed from any device, anywhere. This concept is very similar to the principles and characteristics of PWAs. As PWAs are an option that considers both the reduction of space on the hard disk needed for an app, the reduction of data needed for it to work, and also have offline versions that make them less dependent on an internet network, they can be a means to achieve a SaaS that is even more accessible and independent.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#checklist"&gt;
  &lt;/a&gt;
  Checklist
&lt;/h4&gt;

&lt;p&gt;There is a list of items and features created by Google that define what is expected of a PWA:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Progressive&lt;/strong&gt;: made for any user, regardless of their preferred browser;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Responsive&lt;/strong&gt;: made for any device (desktop, tablet or mobile);&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Connectivity-independent&lt;/strong&gt;: works even if the user is offline;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;App-like&lt;/strong&gt;: the user should feel as if they are in a native app;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fresh&lt;/strong&gt;: no need to download updates from the application, the browser will simply detect a new version and update it automatically if necessary;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Safe&lt;/strong&gt;: done only with HTTPS (Hyper Text Transfer Protocol Secure), seeking to ensure that the domain or address is verified;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Re-engeable&lt;/strong&gt;: through Push Notifications, the user can be constantly engaged;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Installable&lt;/strong&gt;: an icon can be added to the main work area of a smartphone and desktop with just one click;
Thus, while there are many things that can lead a baseline PWA to a good experience, the &lt;a href="https://web.dev/pwa-checklist/#baseline"&gt;checklist&lt;/a&gt; provided by Google can help teams to create the best possible experiences for users. The list includes, according to them, all the things that are needed for a baseline PWA and how to take it a step further and provide fantastic usability by thinking about users, the (often limited) conditions they may have and not the platform itself.
One tool that can help a lot during the development of PWAs is &lt;a href="https://developers.google.com/web/tools/lighthouse?hl=pt-br"&gt;Lighthouse&lt;/a&gt;, also created by Google. Initially, the tool was designed to audit PWAs, but its main goal is to assist in improving all aspects of a Web App. It can be run via terminal or installed in Chrome as an extension. The tool applies tests to a website, offering tips, suggestions and possible solutions in 5 different aspcts: Performance, Accessibility, Best Practices, SEO (Search Engine Optimization) and PWA.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ybNRBuNN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7l801a0401k6e9oa3tl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ybNRBuNN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7l801a0401k6e9oa3tl.png" alt="Lighthouse example" width="800" height="536"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These 5 different categories in Lighthouse seek to identify, according to metrics studied by Google, what are the scores of a website or PWA according to these studies. This directly impacts the ranking or position of the site when a user searches on Google, because the search algorithm also takes this ranking into account.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#limitations-with-respect-to-native-applications"&gt;
  &lt;/a&gt;
  Limitations with respect to native applications
&lt;/h4&gt;

&lt;p&gt;A downside to PWAs is that they do not yet have full control over the hardware of the device on which they are installed. Bluetooth, contact list and Near Field Communication (NFC) are some examples of features that can’t be accessed by PWAs yet.&lt;br&gt;
Another point is that while Google, Microsoft and Mozilla are betting high on this new approach, Apple is not focused on it yet. In iOS 11.3, a recent version of Apple’s mobile operating system, support has been added to the basic set of new technologies behind the idea of Progressive Web Apps. However, there is still a lot to be implemented and corrected to provide the user experience that is expected from a real PWA.&lt;br&gt;
Apple doesn’t seem to be in a hurry to implement full support for these apps — for example, one of the basic points that isn’t yet supported on iOS, but not mandatory in the PWAs, is the option of sending Push Notifications. Still, even if Apple doesn’t fully adopt PWAs, they’re already a reality and are all around us with remarkable results, some examples of which we’ll explore next.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#case-studies"&gt;
  &lt;/a&gt;
  Case Studies
&lt;/h3&gt;

&lt;p&gt;Below, we can see some of the big companies in the world that have already adopted PWAs and the results they have brought to these companies:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tinder"&gt;
  &lt;/a&gt;
  Tinder
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lf4jrAUz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8s1vvqjgizt8orjs2pn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lf4jrAUz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8s1vvqjgizt8orjs2pn.png" alt="Tinder" width="371" height="628"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL:&lt;a href="https://tinder.com/?lang=pt-BR"&gt;https://tinder.com/?lang=pt-BR&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tinder.com/?lang=pt-BR"&gt;Tinder PWA&lt;/a&gt;, the relationship app, developed its own PWA in about 3 months. While the Tinder Android app requires 30 MB of space, its PWA version offers the main Tinder experience at a data cost of 2.8 MB. The PWA also appears to encourage more activity from users. Compared to users of the native app, PWA users swipe more, send more messages and use the app for longer periods of time.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#uber"&gt;
  &lt;/a&gt;
  Uber
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eQUyTDIs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0r0l33sdd0t4xa9sdsqh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eQUyTDIs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0r0l33sdd0t4xa9sdsqh.png" alt="Uber PWA" width="358" height="647"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: &lt;a href="https://m.uber.com"&gt;https://m.uber.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://m.uber.com"&gt;Uber&lt;/a&gt; needed an app that could be used by anyone, regardless of the speed of their network or device. Its solution was to develop a PWA that mimics its native features in functionality, but that had a significantly smaller MB size of stored data. Using small libraries and SVGs (Scalable Vector Graphics) instead of images where possible, Uber‘s Progressive Web App is just 50 KB and loads in less than three seconds even on 2G networks!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#twitter"&gt;
  &lt;/a&gt;
  Twitter
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8I9L1W2K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6x03ts7gi0ysvf9iz2gn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8I9L1W2K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6x03ts7gi0ysvf9iz2gn.png" alt="Twitter PWA" width="358" height="647"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: &lt;a href="https://mobile.twitter.com/"&gt;https://mobile.twitter.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although smartphone adoption had grown to 3.8 billion connections by the end of 2016, 45% of mobile connections are still on slower 2G networks, according to the GSMA (Global System for Mobile Communications Association), a trade body that represents the interests of mobile network operators worldwide. With Twitter Lite — the PWA version of Twitter, a social networking app — it is possible to preview images and videos before choosing which ones to upload fully. This reduces data usage by up to 70%, turning Twitter more accessible in areas where mobile data is expensive.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ifood"&gt;
  &lt;/a&gt;
  iFood
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--saamqewr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txa6k9khbassgua7n07z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--saamqewr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txa6k9khbassgua7n07z.png" alt="Ifood PWA" width="800" height="451"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;URL: &lt;a href="https://www.ifood.com.br/pwa"&gt;https://www.ifood.com.br/pwa&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.ifood.com.br/pwa"&gt;iFood&lt;/a&gt;, a Brazilian food delivery app, also recently launched its PWA. This version occupies only 280 KB on Android, but does not include notifications about the status of orders and coupons — although the iFood team is already working on it, according to the app.&lt;/p&gt;

</description>
      <category>pwa</category>
      <category>mobile</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Performance Design &amp; Marketing w/ Richie Lokay</title>
      <author>Mikhail Karan</author>
      <pubDate>Wed, 27 Oct 2021 23:42:50 +0000</pubDate>
      <link>https://dev.to/mikhailkaran/performance-design-marketing-w-richie-lokay-l0</link>
      <guid>https://dev.to/mikhailkaran/performance-design-marketing-w-richie-lokay-l0</guid>
      <description>&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/6Wc9kq6X3wK6LjVWpN77rW"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-html-all-the-things"&gt;
  &lt;/a&gt;
  What is HTML All The Things
&lt;/h2&gt;

&lt;p&gt;HTML All The Things is a &lt;a href="https://podcast.htmlallthethings.com/"&gt;web development podcast&lt;/a&gt; and &lt;a href="https://discord.com/invite/jweMCx9"&gt;discord community&lt;/a&gt; which was started by Matt and Mike, developers based in Ontario, Canada. &lt;/p&gt;

&lt;p&gt;The podcast speaks to web development topics as well as running a small business, self-employment and time management. You can join them for both their successes and their struggles as they try to manage expanding their Web Development business without stretching themselves too thin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#announcements"&gt;
  &lt;/a&gt;
  Announcements
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;Svelte for Beginners&lt;/strong&gt; Udemy course is now live! Mike took his experience in teaching and learning Svelte and created a course. &lt;/p&gt;

&lt;p&gt;This course will teach you the fundamentals of JavaScript frameworks. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Get it now on Udemy!&lt;/strong&gt; 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/svelte-for-beginners/?referralCode=FE50790D54BC212C0C35"&gt;Svelte For Beginners&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-this-one-about"&gt;
  &lt;/a&gt;
  What's This One About?
&lt;/h2&gt;

&lt;p&gt;In this episode Matt and Mike sit down with Richie Lokay to discuss marketing, design, and more. Richie is currently the VP of Product Design and Services at Wunderkind a Marketing Cloud that works in the new field of Performance Design. The guys try and simplify many aspects of marketing, decoding the word soup that can confuse non-marketers and then discuss a little bit about 3D printing and how Richie got into the printing game.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#guest-introduction"&gt;
  &lt;/a&gt;
  Guest Introduction
&lt;/h2&gt;

&lt;p&gt;Richie has a combined background in web development, design, and communication. He’s currently the VP of Product Design and Services at Wunderkind, a Marketing Cloud that works in the new field of Performance Design. Richie and his team employ design to the n-th degree to provide 1-to-1 personalized marketing at a huge scale. On the more personal side, Richie is a New York history buff and board game collector. He built his own home and even baby-proofed it via a 3D printer when COVID shut down the local stores.&lt;/p&gt;

&lt;p&gt;[&lt;a href="https://www.wunderkind.co/%5D(https://www.wunderkind.co/"&gt;https://www.wunderkind.co/](https://www.wunderkind.co/&lt;/a&gt;]&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#show-notes"&gt;
  &lt;/a&gt;
  Show Notes
&lt;/h2&gt;

&lt;p&gt;3:45 - Can you explain what performance design is and how it differs from “normal online advertising” like Google Ads and so on? Are they even related?&lt;/p&gt;

&lt;p&gt;7:00 - How do you help customers develop their brand?&lt;/p&gt;

&lt;p&gt;11:48 - What does Wunderkind do and who should be interested in the services?&lt;/p&gt;

&lt;p&gt;20:00 - How do you have a mix between a more personal vs automated customer outreach?&lt;/p&gt;

&lt;p&gt;27:00 - From your one-sheet the phrase “Design as a visual problem-solving medium” stood out to me, what exactly does this mean? &lt;/p&gt;

&lt;p&gt;39:35 - What’s a day in the life at Wunderkind for you and your team? Are you more technical than marketing? Mix of both?&lt;/p&gt;

&lt;p&gt;51:15 - On a more personal note, what is your take on 3D printers? I saw them become useful for larger businesses and then they became financially accessible to almost anyone for a little while, but haven’t heard much since. Are they a fad? What’s next for them? Are they the future of manufacturing as they were once thought?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-takeaways"&gt;
  &lt;/a&gt;
  Key Takeaways
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;To be a good engineer you have to understand some core concepts of a design&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank you!
&lt;/h2&gt;

&lt;p&gt;If you're enjoying the podcast consider giving us a review on &lt;a href="https://podcasts.apple.com/us/podcast/html-all-things-web-development-web-design-small-business/id1412209136"&gt;Apple Podcasts&lt;/a&gt; or checking out our Patreon to get a shoutout on the podcast. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.patreon.com/htmlallthethings"&gt;Support us on Patreon&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can find us on all the podcast platforms out there as well as&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.instagram.com/htmlallthethings/"&gt;Instagram (@htmlallthethings)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/htmleverything"&gt;Twitter (@htmleverything)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.tiktok.com/@htmlallthethings"&gt;TikTok (Html All The Things)&lt;/a&gt;&lt;/p&gt;

</description>
      <category>podcast</category>
      <category>marketing</category>
      <category>design</category>
    </item>
    <item>
      <title>I can't believe you're not adding observability</title>
      <author>Nočnica Fee</author>
      <pubDate>Wed, 27 Oct 2021 23:29:08 +0000</pubDate>
      <link>https://dev.to/newrelic/i-cant-believe-youre-not-adding-observability-1fah</link>
      <guid>https://dev.to/newrelic/i-cant-believe-youre-not-adding-observability-1fah</guid>
      <description>&lt;p&gt;&lt;em&gt;cover image by &lt;a href="https://www.flickr.com/photos/141665267@N08/27491358331/"&gt;uppsa uppsa&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I want to talk to you about observability, the art of understanding errors and performance of your technology stack by implementing monitoring and some kind of tool to view that monitoring.&lt;/p&gt;

&lt;p&gt;Listen, if you're making money as an engineer in the tech industry, you're doing a good job. Functional? Object-oriented? Microservices? One big scary monolith? &lt;/p&gt;

&lt;p&gt;If what you do is paying for groceries and keeping a roof over your head then it's good code, good architecture, and you have nothing to apologize for.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rc5W04pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phl5ezf20jt1drgmdrp5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rc5W04pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phl5ezf20jt1drgmdrp5.jpg" alt="a monolith" width="880" height="494"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;if this thing pays the bills it's good technology&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So when I say 'I can't believe you're not doing observability' it's not about whether your technology is good in any absolute, Manichean sense. I completely understand how observability can seem like a reach goal, a nice-to-have, something that might be useful in other shops but not here, always moved to the next sprint.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-i-dont-know-how-youre-not-stressed-out-all-the-time-without-observability"&gt;
  &lt;/a&gt;
  But I don't know how you're not &lt;em&gt;stressed out all the time&lt;/em&gt; without observability.
&lt;/h3&gt;

&lt;p&gt;Like, what happens when the site goes down late at night? I've been on teams without any kind of standardized monitoring so I know what happens: the best operations person you have gets woken up. If she's unavailable or can't figure it out then &lt;em&gt;everybody&lt;/em&gt; gets woken up until someone finds the problem from scouring logs, reverting changes, or testing the system by brute force.&lt;/p&gt;

&lt;p&gt;And I've also been in teams where performance trends were invisible, so it was impossible to explain to our PM's why we needed 2 weeks to handle tech debt.&lt;/p&gt;

&lt;p&gt;So I think observability is something everyone should be doing. DevOps in its purest form. A concern shared across all technical roles and appreciated by management.&lt;/p&gt;

&lt;p&gt;I cannot bring you to this promised land of restful nights and pretty charts, but I can show you how to get there. New Relic can monitor dozens of services using a free tier account, and our free conference next week can show you how to monitor everything from front-end React to Kubernetes clusters.&lt;/p&gt;

&lt;p&gt;Register for &lt;a href="https://hopin.com/events/data-nerd-days-2-0?utm_source=Dev.to&amp;amp;utm_campaign=Community"&gt;Data Nerd Days November 3rd&lt;/a&gt;, I'll be talking about monitoring serverless. As of the time of writing this article, the next few hundred registrants will get sweatshirts.&lt;/p&gt;

&lt;p&gt;If you don't use New Relic use another tool, but for all love do add some observability to your stack soon.&lt;/p&gt;

</description>
      <category>observability</category>
      <category>kubernetes</category>
      <category>newrelic</category>
      <category>devops</category>
    </item>
    <item>
      <title>Why you should be continually interviewing</title>
      <author>Antonio Villagra De La Cruz</author>
      <pubDate>Wed, 27 Oct 2021 22:23:39 +0000</pubDate>
      <link>https://dev.to/antoniovdlc/why-you-should-be-continually-interviewing-1l83</link>
      <guid>https://dev.to/antoniovdlc/why-you-should-be-continually-interviewing-1l83</guid>
      <description>&lt;p&gt;I usually don't share pieces of advice I haven't applied myself, but in this case, the epiphany came before the practice: you should be always interviewing!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#interviewing-is-a-skill"&gt;
  &lt;/a&gt;
  Interviewing is a skill
&lt;/h2&gt;

&lt;p&gt;This is particularly true in software engineering, but might be very relevant regardless of your position: interviewing is a skill. Nothing in your day-to-day occupancy, nor in your studies really prepares you for interviewing. And as with every other skill, it needs practice to improve over time. Similarly to how you might play 2 hours of chess every week to improve your game, you should be having the same outlook about interviewing.&lt;/p&gt;

&lt;p&gt;By continually interviewing, not only will you improve your interviewing skills over time, but you will also gain confidence in your pitch and your answers. Instead of waiting to need a new job, you can always be interviewing and try different approaches on how you write your CV, how you present yourself, how you answer common interview questions and how those resonate with your interviewers.&lt;/p&gt;

&lt;p&gt;A/B testing different approaches in low-stress situations will help you hone your discourse, and you will be a lot more prepared when you indeed need to find a new job. Compared to someone who might only interview every 2-3 years, your continuous practice puts you at a clear unfair advantage!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#interviewing-allows-you-to-better-understand-the-market-and-know-your-worth"&gt;
  &lt;/a&gt;
  Interviewing allows you to better understand the market and know your worth
&lt;/h2&gt;

&lt;p&gt;This is again particularly true in software engineering, but the job market is constantly evolving (and happens to be pretty hot right now!). Putting yourself out there, even if you are satisfied with your current position, will help you keep up to date with the market. What new technologies are coming up? How are salaries and compensation packages evolving in the market? Which cool new companies are hiring right now? Information is power, and having an up-to-date notion of the market and of your worth is priceless. And the easiest way to achieve that is by continually interviewing.&lt;/p&gt;

&lt;p&gt;Interviewing sometimes feels like being mainly luck. If you only interview when changing jobs (which might be on average every 2-3 years), you are limiting your range of options to the companies currently hiring when you are scooting for opportunities. Instead, if you are continually interviewing, you are always on top of any opportunity. And who knows, maybe you will find a unique opportunity that you might have missed have you not being interviewing in that precise moment!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#interviewing-is-an-easy-way-to-build-connections"&gt;
  &lt;/a&gt;
  Interviewing is an easy way to build connections
&lt;/h2&gt;

&lt;p&gt;In an environment that is probably going to be a lot more remote than it used to be, building connections might become more complicated. Something I particularly enjoy about interviews (both giving and taking them), is that you have a chance to create a connection with fellow engineers. You get to see what other people are working on, and how they are thinking about solving some common challenges.&lt;/p&gt;

&lt;p&gt;You basically get to network for free when interviewing. And if eventually you might not be ready to jump ships, the connections you've made throughout the process might prove valuable down the line. Similarly, if you don't go all the way through an interview process, you might still learn from the experience and come out with a few new connections!&lt;/p&gt;




&lt;p&gt;Finally, I wanted to quickly touch on a topic that does come up with such advice: aren't you just wasting other people's time by interviewing "for practice"? My main counter-argument here is that it is the company's job to ensure they are spending their time wisely with regards to hiring. For all you know, you might end up changing jobs if the final offer is attractive enough.&lt;/p&gt;

&lt;p&gt;And with that, let me dust off my resume and start applying!&lt;/p&gt;

</description>
      <category>career</category>
    </item>
    <item>
      <title>Micro-Frontends FAQs</title>
      <author>Ruben Casas</author>
      <pubDate>Wed, 27 Oct 2021 22:13:17 +0000</pubDate>
      <link>https://dev.to/infoxicator/micro-frontends-faqs-3pij</link>
      <guid>https://dev.to/infoxicator/micro-frontends-faqs-3pij</guid>
      <description>&lt;p&gt;These are some of the questions I received after my presentation "Micro-Frontends Performance and Centralised Data Caching" at React Advanced London 2021.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#are-microfrontends-mainly-used-for-large-organisations-and-when-you-have-multiple-teams-working-on-the-same-pagesite-or-are-there-any-benefits-for-small-teams-and-solo-devs"&gt;
  &lt;/a&gt;
  Are Micro-Frontends mainly used for large organisations and when you have multiple teams working on the same page/site or are there any benefits for small teams and solo devs?
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's correct, &lt;strong&gt;Micro-Frontends are the answer to an organisational problem&lt;/strong&gt;, if you don't have that problem then you probably don't need Micro-Frontends. They are useful when you encounter scaling issues and your teams have grown to the point where you start getting friction and your deployments to production have become painful and slow.&lt;/p&gt;

&lt;p&gt;There could be some benefits for small teams, for example, if you arrange your application so each developer owns a certain part of the UI and they deploy that independently. I don't think there are any benefits for Solo Devs because &lt;strong&gt;it will add unnecessary complexity&lt;/strong&gt; to a small project.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#how-do-you-share-global-state"&gt;
  &lt;/a&gt;
  How do you share global state?
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;The answer is you don't&lt;/strong&gt;. Global state could cause coupling between Micro-Frontends and add a central dependency that could block or stop independent deployments. The best recommendation when working Micro-Frontends is to avoid coupling at all costs because if you don't you might end up with a distributed monolith and none of the benefits of Micro-Frontends.&lt;/p&gt;

&lt;p&gt;Now, how do you communicate between them? &lt;strong&gt;The key is to keep the messages small and to a minimum&lt;/strong&gt;, respect the system boundaries and have strong contracts that guarantee the encapsulation of your Micro-Frontends. A good example of this is using the Pub/Sub model and the &lt;code&gt;postMessage()&lt;/code&gt; API.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#how-do-you-maintain-coding-style-and-conventions-over-multiple-microfrontends-and-teams-working-on-them"&gt;
  &lt;/a&gt;
  How do you maintain coding style and conventions over multiple Micro-Frontends and teams working on them?
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;People think Micro-Frontends are bad for consistency, however, this is not an issue related to this architectural pattern; &lt;strong&gt;this is an organisational issue&lt;/strong&gt; and as such, your company and teams are responsible for keeping coding standards and maintaining style consistency by implementing something like a Design System. &lt;strong&gt;Micro-Frontends could be good for consistency by allowing you to reuse certain parts of the application&lt;/strong&gt; like the header and the footer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#how-do-you-share-common-components-do-you-create-them-as-microfrontends-or-do-you-create-a-component-libary-and-consume-it-as-a-normal-npm-dependency"&gt;
  &lt;/a&gt;
  How do you share common components? Do you create them as Micro-Frontends or do you create a component libary and consume it as a normal npm dependency?
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;I would recommend a component library, however, the key to making it work well with Micro-Frontends is to have &lt;strong&gt;well defined atomic components&lt;/strong&gt; instead of large pieces of UI. Also, it is important that the library is stable (not in active development) to avoid coupling. If you are constantly making changes to the base components, all your Micro-Frontends will need consume those updates which can create a bottleneck and slows down independent deployments.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#how-do-you-ensure-all-teams-update-to-the-latest-version-of-a-shared-dependency-at-the-same-time"&gt;
  &lt;/a&gt;
  How do you ensure all teams update to the latest version of a shared dependency at the same time?
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;If this is a dependency, then you just follow the normal process of communicating the update to your consumers and they will have to install and deploy their codebases to reflect the latest changes. &lt;/p&gt;

&lt;p&gt;If you want to update a Micro-Frontend and you want all your users to consume the same version, for example, if you want them to consume the same version of the header or footer then you can use two different approaches.&lt;/p&gt;

&lt;p&gt;The first one is the &lt;strong&gt;"evergreen"&lt;/strong&gt; approach, where all your consumers always point to the latest version as soon as it is published. &lt;/p&gt;

&lt;p&gt;The second approach is the &lt;strong&gt;"managed"&lt;/strong&gt; approach, where you publish your Micro-Frontend and follow the rules of Semantic Versioning so consumers can choose what version to use; the difference of this approach from a standard npm dependency is that you can start consuming the new version at runtime without the need to install and deploy a new version of the application that is consuming it.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>architecture</category>
    </item>
  </channel>
</rss>
