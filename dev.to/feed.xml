<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>A server-less CI/CD approach for mono-repo micro-frontends</title>
      <author>Antonio Lagrotteria</author>
      <pubDate>Sat, 06 Nov 2021 13:39:33 +0000</pubDate>
      <link>https://dev.to/aws-builders/a-server-less-cicd-approach-for-mono-repo-micro-frontends-32m6</link>
      <guid>https://dev.to/aws-builders/a-server-less-cicd-approach-for-mono-repo-micro-frontends-32m6</guid>
      <description>&lt;p&gt;This article provides a CI/CD pipeline approach for a GitHub mono-repo-based micro-frontend architecture in AWS, leveraging a series of AWS server-less services such as AWS &lt;a href="https://aws.amazon.com/codepipeline"&gt;CodePipeline&lt;/a&gt;, &lt;a href="https://aws.amazon.com/codebuild"&gt;CodeBuild &lt;/a&gt;and &lt;a href="https://aws.amazon.com/codedeploy/"&gt;CodeDeploy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Micro-frontends come with an increase of the complexity of managing the infrastructure, which makes it crucial for organizations to carefully invest their time in supporting continuous integration (CI), continuous deployment (CD) pipelines and automatic tools that scale along with the organization.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zcBblgRo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2400/1%2AIHjJA1RJpWif1UtWcjiD1g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zcBblgRo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2400/1%2AIHjJA1RJpWif1UtWcjiD1g.png" alt="A CI/CD for building mono repo micro-frontends" width="880" height="460"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The proposed approach provides a scalable option for organizations to scale their tech micro-frontend ecosystem, keep teams autonomous and let them focus on business and early feedback with a fast release cycle.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-context-mono-and-poly-repos"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Some context: Mono and Poly repos&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Before diving in the architecture, let’s mention the main approaches for structuring a micro-frontend module.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Mono repos:&lt;/strong&gt; all the teams work on a single repository&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Poly (multi)-repos:&lt;/strong&gt; each domain specific micro-frontend is located in its own repository and owned by a single team.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This PoC will focus on a hands-on, detailed and pragmatic CI/CD setup based on a mono-repo with main branch as source of the pipelines changes. For a great overview and detailed comparison I recommend an upcoming &lt;a href="https://www.buildingmicrofrontends.com/"&gt;book &lt;/a&gt;from Luca Mezzalira.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#architecture"&gt;
  &lt;/a&gt;
  Architecture
&lt;/h2&gt;

&lt;p&gt;The architecture is based on a scenario where a company is implementing micro-frontends on a mono GitHub repository and wishes to implement a server-less CI/CD pipeline in AWS.&lt;/p&gt;

&lt;p&gt;For this PoC, the mono-repo contains two trivial Angular micro-frontends, &lt;em&gt;mfe-accounts&lt;/em&gt; and &lt;em&gt;mfe-payments&lt;/em&gt;, though this model allows you to write each module independently with any framework of choice:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H5gPbNMA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AbxYzUMH6TnjmGRwkXgC6GQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H5gPbNMA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AbxYzUMH6TnjmGRwkXgC6GQ.png" alt="Mono-repo structure" width="330" height="251"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The scenario involves some steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Developers push their code to the main branch in GitHub, which will trigger a push event via &lt;a href="https://docs.github.com/en/developers/webhooks-and-events/webhooks/about-webhooks"&gt;GitHub webhooks&lt;/a&gt; to an &lt;a href="https://aws.amazon.com/api-gateway/"&gt;AWS API Gateway&lt;/a&gt; responsible to handle the event.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The API Gateway triggers an &lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambda&lt;/a&gt; function which authenticates the request, analyses the event and, based on affected files, triggers a pipeline for the micro-frontend where the files belong to.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One or more pipelines start building, testing and deployment actions via &lt;a href="https://aws.amazon.com/codepipeline/"&gt;AWS CodePipeline&lt;/a&gt;, &lt;a href="https://aws.amazon.com/codebuild/"&gt;CodeBuild &lt;/a&gt;and &lt;a href="https://aws.amazon.com/codedeploy/"&gt;CodeDeploy&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Changes are available in S3 bucket and exposed on a &lt;a href="https://aws.amazon.com/cloudfront/"&gt;Cloudfront&lt;/a&gt; distribution.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lets deep dive in the setup.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#api-gateway-setup"&gt;
  &lt;/a&gt;
  API gateway setup
&lt;/h2&gt;

&lt;p&gt;GitHub allows to setup integrations towards its events, such as repository pushes, via &lt;a href="https://docs.github.com/en/developers/webhooks-and-events/webhooks/about-webhooks"&gt;webhooks&lt;/a&gt;, which POST a GitHub event data payload towards an endpoint. Let’s expose a RESTful API in AWS via API Gateway containing a single POST endpoints as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WLkxdsLy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ANqZHmyRKTLt-7k8nCyIcZg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WLkxdsLy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ANqZHmyRKTLt-7k8nCyIcZg.gif" alt="Create API Gateway" width="600" height="303"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In above screen, we use a &lt;a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html"&gt;Lambda integration proxy&lt;/a&gt; because our associated “Hello World” Lambda will need to access the API Gateway request headers in order to authenticate GitHub upcoming requests. With the API in place, let’s create the webhook.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-webhook-setup"&gt;
  &lt;/a&gt;
  GitHub Webhook setup
&lt;/h2&gt;

&lt;p&gt;Once the API Gateway has been deployed in a stage, it is time to create a GitHub webhook, (refer to this &lt;a href="https://docs.github.com/en/github/setting-up-and-managing-your-enterprise/managing-organizations-in-your-enterprise-account/configuring-webhooks-for-organization-events-in-your-enterprise-account"&gt;intuitive guide&lt;/a&gt;). &lt;strong&gt;&lt;em&gt;Important&lt;/em&gt;&lt;/strong&gt;: provide a secret to make sure that our Lambda can accept requests only coming from the webhook (more on this later).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o6dOIMRu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AJQxroMYLlDxW0Rq6rORHuA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o6dOIMRu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AJQxroMYLlDxW0Rq6rORHuA.gif" alt="Create a GitHub webhook" width="600" height="285"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The integration is ready! Pushing a file to the repository will result in a “Hello world” message triggered by the Lambda, which can be seen under its stream logs in &lt;a href="https://aws.amazon.com/cloudwatch/"&gt;Cloudwatch&lt;/a&gt;. Let’s now update Lambda code to make sure that we support CI/CD for any micro-frontends in your repo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#microfrontend-strategy-on-lambda-setup"&gt;
  &lt;/a&gt;
  Micro-frontend strategy on Lambda setup
&lt;/h2&gt;

&lt;p&gt;The ultimate goal of the Lambda function is that given a GitHub push event containing repo commits, then it triggers one or more pipelines for any affected micro-frontend. Let’s look in details at below gist:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First, Lambda authenticates requests only coming from the GitHub webhook by validating the SHA256 request header via a HMAC256 security check, using the crypto module. This check is based on the secret defined in the GitHub webhook earlier and also stored in AWS Secret Manager (follow &lt;a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/tutorials_basic.html"&gt;this tutorial&lt;/a&gt;). Lambda will access the secret in a secure way via the IAM action &lt;em&gt;secretsmanager:GetSecretValue&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once validated, the payload is used to infer which micro-frontends have been affected, by extracting its name from the added/modified and removed files from the commits list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If any micro-frontend has changed, we trigger a new build in &lt;a href="https://aws.amazon.com/codepipeline/"&gt;AWS CodePipeline&lt;/a&gt; which will build and deploy the micro-frontend. For simplicity the pipeline is called the same as the micro-frontend which is going to build. The AWS SDK client library requires an IAM role allowing &lt;em&gt;codepipeline:StartPipelineExecution&lt;/em&gt; action to access the resource&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overall Lambda code can be seen &lt;a href="https://github.com/aladevlearning/microfrontends-pipeline/blob/main/aws/lambdas/pipeline-ci/index.js"&gt;here&lt;/a&gt;. Now it is time to create the pipeline itself, which is part of the next section.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-pipeline-setup"&gt;
  &lt;/a&gt;
  Code Pipeline setup
&lt;/h2&gt;

&lt;p&gt;The creation of a Code Pipeline in AWS involves many steps and concepts, so I will try to keep it simple. Code Pipeline helps to automate release pipelines for fast and reliable application and infrastructure updates. Each steps, here called &lt;em&gt;stages&lt;/em&gt;, perform actions on the involved build artifacts. I will look into how:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create the pipeline by choosing some settings&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add a Source stage, answering the question “from where does the code to build come from?”&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add a Build stage: “how do I build the source code you just provided?”&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add a Deploy stage: “how and where do I deploy the build artifact you just provided?”&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main idea will be to isolate each CodePipeline and CodeBuild project to give flexibility and ownership to each team to manage that process within the team. Optimizations such as reuse of pipelines for similar projects and CloudFormation template are out of scope.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-pipeline-by-choosing-settings"&gt;
  &lt;/a&gt;
  Create pipeline by choosing settings
&lt;/h3&gt;

&lt;p&gt;First, create a pipeline by providing a name matching the building micro-frontend and default settings, as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zbMi19Nk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AS1ImESpU2mpnRv-LVsdoMA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zbMi19Nk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AS1ImESpU2mpnRv-LVsdoMA.gif" alt="First step of creating a pipeline." width="600" height="303"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#source-stage"&gt;
  &lt;/a&gt;
  Source Stage
&lt;/h3&gt;

&lt;p&gt;This stage links the source code to be processed with Code Pipeline. We will connect CodePipeline with our GitHub repo by clicking the Connect button and initiating a wizard.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lrkkkQXj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ANpEkKgDO3-eb-VLZ3_RCZQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lrkkkQXj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ANpEkKgDO3-eb-VLZ3_RCZQ.png" alt="Connect Pipeline with GitHub" width="606" height="663"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the end of the wizard, as shown below, you will be able:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;to access your GitHub repo (&lt;em&gt;aladevlearning/microfrontends-pipeline&lt;/em&gt; in my case)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to select the *main *branch&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to unselect the &lt;em&gt;Start pipeline on source code changes&lt;/em&gt;, as we want to have it handled by the Lambda function&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;and click Next to proceed to the next stage.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Above steps can be seen in below gif.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a81f5YpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A2qMyfsPlTH1g3183CwJXxw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a81f5YpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A2qMyfsPlTH1g3183CwJXxw.gif" alt="Add source stage in CodePipeline" width="600" height="291"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-stage"&gt;
  &lt;/a&gt;
  Build Stage
&lt;/h3&gt;

&lt;p&gt;This stage is responsible to build the source received in previous stage. It will create or reuse an existing *CodeBuild *project, which instructs the pipeline on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;how to run the build, via a &lt;em&gt;builspec.yml&lt;/em&gt; file.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;where CodeBuild will practically make the build&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In regards to &lt;em&gt;buildspec.yml *we can decide whether having a common file for all micro-frontends or having one for each of them. This highly depends on whether all micro-frontends adhere to same framework of choice and same build / test steps. By keeping them separate you give each team independence on how to build it, at the cost of slightly more complex overview on build process and governance. For our micro-frontend, the file looks like below:&lt;br&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
A *buildspec.yaml&lt;/em&gt; consists of intuitive phases for installing/prepping the environment, building the code and instructing how to structure the artifacts. After getting the micro-frontend name from the pipeline initiator, the file installs dependencies and zips the final artifact, which will be deployed to S3 bucket specified in the Deploy section. See &lt;a href="https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html"&gt;this guide for more details&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, the building process requires an environment (aka: machine) where to run.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G769tdDb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ArmXTOdRcT99YFm78HdnDsw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G769tdDb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ArmXTOdRcT99YFm78HdnDsw.gif" alt="Create a Code Build project" width="600" height="668"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Above gif shows how CodeBuild configuration is based on a &lt;em&gt;build environment, *which represents a combination of operating system, programming language runtime, and tools that are used to run a build. We also selected a specific *buildspec.yml&lt;/em&gt; file location as each micro-frontend could differ in terms of build process and pipeline (e.g. one could be an Angular project and another be a React one, or both still using same framework but being built with different steps).&lt;/p&gt;

&lt;p&gt;Once the Code build project is setup, we set the build provider to be Code Build, we select the newly created Code Build project (&lt;em&gt;mfe-accounts-build&lt;/em&gt;) and continue to the final stage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DvtrsA1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AYlPorAgo2sNf5lfw-We5nQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DvtrsA1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AYlPorAgo2sNf5lfw-We5nQ.gif" alt="Create Build stage" width="600" height="284"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Build project created, let’s move to the final stage of CodePipeline.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deploy-stage"&gt;
  &lt;/a&gt;
  Deploy Stage
&lt;/h3&gt;

&lt;p&gt;Finally, we want to deploy our artifact on S3. In order to do that, we need to &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/create-bucket-overview.html"&gt;create S3 buckets&lt;/a&gt; where the artifact will be independently deployed. As CodeBuild will zip the built artifact, we check the &lt;em&gt;Extract file before deploy *settings and set the *Canned ACL&lt;/em&gt; to public-read, given we want to be able to see the deployed artifacts in S3.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z3fKSK-c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AscmER-OcW5nDxIUHzEMPJA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z3fKSK-c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AscmER-OcW5nDxIUHzEMPJA.gif" alt="Create Deploy stage" width="600" height="285"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s great! Your code is now deployed in S3 which allows to associate it with &lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/cloudfront-serve-static-website/"&gt;a CloudFront distribution&lt;/a&gt; for better deployment. Above steps for the CodePipeline should be repeated for any micro-frontend. This level of redundancy will allow each team to be independent and autonomous, tweak their CI/CD to&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result
&lt;/h2&gt;

&lt;p&gt;Upon push to repository affecting the micro-frontend containing the change, one or more code pipelines will start.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vk_kAgp3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ATxua6bFrunxGlwrBttboIA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vk_kAgp3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ATxua6bFrunxGlwrBttboIA.gif" alt="Pipelines coming alive" width="600" height="303"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Successful pipelines will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m8Nx8fDt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AGrH0Um70FpOdan4SIkFVmw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m8Nx8fDt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AGrH0Um70FpOdan4SIkFVmw.png" alt="Successful pipeline" width="484" height="857"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The deployed artifact is located under the specified S3 bucket:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RZNcqjCh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3120/1%2AIsniGXK_oAwKXdtXUp6bhA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RZNcqjCh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3120/1%2AIsniGXK_oAwKXdtXUp6bhA.png" alt="S3 bucket for deployed micro-frontend" width="880" height="416"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Associated with a Cloudfront distribution, our deployed micro-frontend will look as this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kOYn8JvC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/1%2ADuW0-nm785bugWCnNMPXPA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kOYn8JvC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/1%2ADuW0-nm785bugWCnNMPXPA.png" alt="" width="880" height="310"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Full code can be found &lt;a href="https://github.com/aladevlearning/microfrontends-pipeline"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary-and-ideas"&gt;
  &lt;/a&gt;
  Summary and ideas
&lt;/h2&gt;

&lt;p&gt;This article went in depth to provide a 10 minutes setup to make a seamless CI/CD pipeline for a mono-repo based frontend architecture. This should be seen as a workable, though initial approach which can be explored in so many ways, proving yet again how great and creative is to build things in AWS. Some ideas could be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Have different pipelines to cover different needs, such as different framework, test suite, integration and functional testing, multi stage environment, etc…&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;publish artifacts in different AWS Accounts, one for test and one for production, to keep isolation and security in place.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Extend approach for feature branch CI/CD, where you could created branch deployments for early prototyping and feedback, without blocking the main branch.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make the above as a CloudFormation template. This is a must to elevate this approach and consistently repeat it for any micro-frontend.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CloudFront invalidation step. If interested in adding CloudFront in the pipeline, a cache invalidation step via a Lambda function may be necessary to make sure all latest changes are correctly propagated to the consumers (or maybe AWS will take it as feedback and expose it as this seems a pretty used pattern).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/blogs/devops/complete-ci-cd-with-aws-codecommit-aws-codebuild-aws-codedeploy-and-aws-codepipeline/"&gt;&lt;strong&gt;Complete CI/CD with AWS CodeCommit, AWS CodeBuild, AWS CodeDeploy, and AWS CodePipeline | Amazon Web…&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.buildingmicrofrontends.com"&gt;&lt;strong&gt;Building Micro-Frontends: the book&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Rapid Microservices Development in .NET. An introduction.</title>
      <author>Oleksii Nikiforov</author>
      <pubDate>Sat, 06 Nov 2021 13:17:10 +0000</pubDate>
      <link>https://dev.to/nikiforovall/rapid-microservices-development-in-net-an-introduction-jl2</link>
      <guid>https://dev.to/nikiforovall/rapid-microservices-development-in-net-an-introduction-jl2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;Learn how to speed up microservices development process by using set of predefined templates and practices. See &lt;a href="https://www.nuget.org/packages/NikiforovAll.CleanArchitecture.Templates/"&gt;https://www.nuget.org/packages/NikiforovAll.CleanArchitecture.Templates/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#problem-statement"&gt;
  &lt;/a&gt;
  Problem Statement
&lt;/h2&gt;

&lt;p&gt;The way we develop software is built around the idea of high velocity and readiness to change and adapt to the market's requirements. This approach brings up the next questions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How to successfully contribute to the existing code base?&lt;/li&gt;
&lt;li&gt;How to not break something in meantime?&lt;/li&gt;
&lt;li&gt;How do we reduce the learning curve of an existing solution?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;(1)&lt;/strong&gt; Actually, all you need to do is to write clean, understandable, and open for modification code. The actual craft of writing code is honed through years of learning and making mistakes. Component-level design is important and you can benefit from good predefined solution templates, something like Clean Architecture gives you a good starting point. Also, if you feel like your project has some complex domain you might want to incorporate DDD in the mix. Personally, I find it really useful because it facilitates communication between developers and domain experts. It is easier to map code snippets to domain and project requirements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(2)&lt;/strong&gt; Frequent changes increase the possibility of bugs, as software engineers, we deal with it by extensively testing a codebase. At first glance, you might think writing tests is an additional effort that prevents you from shipping some valuable and urgent features. But, in practice, it is actually another way around, you want to invest in a testing toolkit to save future self from some nasty bugs. Also, tests serve as live documentation and enable refactoring. My suggestion is to be practical about it, don't try to get 100% coverage by writing tons of useless unit tests, determine what is the best in a given context. Simply, write tests, my dude.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(3)&lt;/strong&gt; Clean code reduces the cognitive load and overall complexity of a codebase. In my opinion, for rapid development, you need somewhat consistency for technical decisions. It is a good idea to use common frameworks, libraries, tools, and even cross-cutting concerns code, just make sure it doesn't introduce additional coupling and unnecessary complexity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#proposal"&gt;
  &lt;/a&gt;
  Proposal
&lt;/h3&gt;

&lt;p&gt;Luckily, there is the remedy! Rapid Microservices Development &lt;code&gt;RMD === "remedy"&lt;/code&gt;, got it? 😏&lt;/p&gt;

&lt;p&gt;As an organization responsible for developing microservices solutions you want to build reusable components so it will be easy to create a new microservice from the scratch. Creating project templates is a well-known approach and it is quite simple. Rapid microservice development is a goal and templates might be a viable solution, just be mindful about the goal.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#templates-family"&gt;
  &lt;/a&gt;
  Templates Family
&lt;/h3&gt;

&lt;p&gt;I've created a set of project templates that provides you information of how you might organize microservices solutions yourself. &lt;strong&gt;Note&lt;/strong&gt;, each template might be used individually outside of microservices development context.&lt;/p&gt;

&lt;p&gt;Feedback is highly appreciated. 🙏&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.nuget.org/packages/NikiforovAll.CleanArchitecture.Templates/"&gt;https://www.nuget.org/packages/NikiforovAll.CleanArchitecture.Templates/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;All you need to do is to install it via running the command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;dotnet new --install NikiforovAll.CleanArchitecture.Templates::1.1.1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once installed, you can see a list of templates by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;dotnet new &lt;span class="nt"&gt;-l&lt;/span&gt; na-
&lt;span class="c"&gt;# These templates matched your input: 'na-'&lt;/span&gt;

&lt;span class="c"&gt;# Template Name                Short Name  Language  Tags&lt;/span&gt;
&lt;span class="c"&gt;# ---------------------------  ----------  --------  --------------------------------------------&lt;/span&gt;
&lt;span class="c"&gt;# Build Project Template       na-bu       bash      build-project/Template&lt;/span&gt;
&lt;span class="c"&gt;# Clean Architecture Template  na-ca       [C#]      CleanArchitecture/DDD/Template&lt;/span&gt;
&lt;span class="c"&gt;# Event Sourcing Template      na-es       [C#]      EventSourcing/CleanArchitecture/DDD/Template&lt;/span&gt;
&lt;span class="c"&gt;# Gateway Template             na-ga       [C#]      gateway/Template&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Alias&lt;/th&gt;
      &lt;th&gt;Repository&lt;/th&gt;
      &lt;th&gt;Status&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Build Project&lt;/td&gt;
      &lt;td&gt;na-bu&lt;/td&gt;
      &lt;td&gt;&lt;a href="https://github.com/NikiforovAll/na-bu" rel="noopener"&gt;https://github.com/NikiforovAll/na-bu&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;N/A&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Clean Architecture Template&lt;/td&gt;
      &lt;td&gt;na-ca&lt;/td&gt;
      &lt;td&gt;&lt;a href="https://github.com/NikiforovAll/na-ca" rel="noopener"&gt;https://github.com/NikiforovAll/na-ca&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;
        &lt;a href="https://github.com/NikiforovAll/na-ca/actions/workflows/dotnet.yml" rel="noopener"&gt;
            &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---BJ8r3ob--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/NikiforovAll/na-ca/actions/workflows/dotnet.yml/badge.svg" width="103" height="20"&gt;
        &lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Event Sourcing Template&lt;/td&gt;
      &lt;td&gt;na-bu&lt;/td&gt;
      &lt;td&gt;&lt;a href="https://github.com/NikiforovAll/na-es" rel="noopener"&gt;https://github.com/NikiforovAll/na-es&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;
        &lt;a href="https://github.com/NikiforovAll/na-es/actions/workflows/dotnet.yml" rel="noopener"&gt;
            &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nKNmvvZv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/NikiforovAll/na-es/actions/workflows/dotnet.yml/badge.svg" width="103" height="20"&gt;
        &lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Gateway&lt;/td&gt;
      &lt;td&gt;na-ga&lt;/td&gt;
      &lt;td&gt;&lt;a href="https://github.com/NikiforovAll/na-ga" rel="noopener"&gt;https://github.com/NikiforovAll/na-ga&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;
        &lt;a href="https://github.com/NikiforovAll/na-ga/actions/workflows/dotnet.yml" rel="noopener"&gt;
            &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kXlze_S0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/NikiforovAll/na-ga/actions/workflows/dotnet.yml/badge.svg" width="103" height="20"&gt;
        &lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#build-project"&gt;
  &lt;/a&gt;
  Build project
&lt;/h3&gt;

&lt;p&gt;In this blog post I will show you how to create a one of the components yourself.&lt;/p&gt;

&lt;p&gt;The responsibility of build project is a starting project of any developer. The main goal is to have &lt;strong&gt;zero-configuration&lt;/strong&gt; required to get the project up and running, this is really important and people will say thank you for that.&lt;/p&gt;

&lt;p&gt;Build project consists of something like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Scripts to pull code base and latest changes from the remotes.&lt;/li&gt;
&lt;li&gt;Scripts to manage infrastructure used during development. All you need to do is to run &lt;code&gt;docker compose service1, service2, ...&lt;/code&gt; to run the system locally. This is really useful.&lt;/li&gt;
&lt;li&gt;Projects assets, something like architecture documentation, postman collection to speed up manual developer testing, guidelines, etc.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I will explain the anatomy of the build project from the template in a moment. But first, we need to generate one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;dotnet new na-bu &lt;span class="nt"&gt;-n&lt;/span&gt; MyFirstBuildProject &lt;span class="nt"&gt;--dry-run&lt;/span&gt;
File actions would have been taken:
  Create: ./.env
  Create: ./.gitignore
  Create: ./.vscode/settings.json
  Create: ./assets/http/gateway/projects.http
  Create: ./assets/http/naca/projects.http
  Create: ./assets/http/naes/projects.http
  Create: ./build/docker_postgres_init.sql
  Create: ./build/execute-tests.sh
  Create: ./build/generate-report.sh
  Create: ./build/run-services.sh
  Create: ./build/setup-infrastructure.sh
  Create: ./docker-compose-local-infrastructure.yml
  Create: ./docker-compose-tests.override.yml
  Create: ./docker-compose-tests.yml
  Create: ./docker-compose.override.yml
  Create: ./docker-compose.yml
  Create: ./docker-images.txt
  Create: ./README.md
  Create: ./routes.conf.json
  Create: ./scripts/generate-report.sh
  Create: ./scripts/git-clone-all.sh
  Create: ./scripts/git-pull-all.sh
  Create: ./scripts/git-summary/.gitignore
  Create: ./scripts/git-summary/git-summary.sh
  Create: ./scripts/git-summary/README.md
  Create: ./scripts/git-summary/screenshot.png
  Create: ./scripts/open-in-browser.sh

&lt;span class="nv"&gt;$ &lt;/span&gt;dotnet new na-bu &lt;span class="nt"&gt;-n&lt;/span&gt; MyFirstBuildProject
The template &lt;span class="s2"&gt;"Build Project Template"&lt;/span&gt; was created successfully.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see we have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;📂 &lt;em&gt;./scripts&lt;/em&gt; - some tools and scripts to manage build project.&lt;/li&gt;
&lt;li&gt;📂 &lt;em&gt;./build&lt;/em&gt; - commands to build, start and test the solution.&lt;/li&gt;
&lt;li&gt;📂 &lt;em&gt;./assets&lt;/em&gt; - project artifacts&lt;/li&gt;
&lt;li&gt;📂 docker-compose.yml, docker-compose-local-infrastructure.yml, docker-compose.override.yml - run system locally&lt;/li&gt;
&lt;li&gt;📂 docker-compose-tests.yml, docker-compose-tests.override.yml - run tests locally&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The template pulls three other predefined templates &lt;code&gt;na-ca&lt;/code&gt;, &lt;code&gt;na-es&lt;/code&gt;, &lt;code&gt;na-ga&lt;/code&gt;. You can change that.&lt;/p&gt;

&lt;p&gt;Let's clone microservices from the &lt;code&gt;na-bu&lt;/code&gt; template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./scripts/git-clone-all.sh
&lt;span class="o"&gt;========================================================&lt;/span&gt;
Cloning repository: na-ca
&lt;span class="o"&gt;========================================================&lt;/span&gt;
Cloning into &lt;span class="s1"&gt;'na-ca'&lt;/span&gt;...
remote: Enumerating objects: 1146, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
remote: Counting objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;1146/1146&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
remote: Compressing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;568/568&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
remote: Total 1146 &lt;span class="o"&gt;(&lt;/span&gt;delta 673&lt;span class="o"&gt;)&lt;/span&gt;, reused 968 &lt;span class="o"&gt;(&lt;/span&gt;delta 506&lt;span class="o"&gt;)&lt;/span&gt;, pack-reused 0Receiving objects:  96% &lt;span class="o"&gt;(&lt;/span&gt;1101/1146&lt;span class="o"&gt;)&lt;/span&gt;
Receiving objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;1146/1146&lt;span class="o"&gt;)&lt;/span&gt;, 172.02 KiB | 978.00 KiB/s, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
Resolving deltas: 100% &lt;span class="o"&gt;(&lt;/span&gt;673/673&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;========================================================&lt;/span&gt;
Cloning repository: na-es
&lt;span class="o"&gt;========================================================&lt;/span&gt;
Cloning into &lt;span class="s1"&gt;'na-es'&lt;/span&gt;...
remote: Enumerating objects: 1019, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
remote: Counting objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;1019/1019&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
remote: Compressing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;523/523&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
remote: Total 1019 &lt;span class="o"&gt;(&lt;/span&gt;delta 571&lt;span class="o"&gt;)&lt;/span&gt;, reused 870 &lt;span class="o"&gt;(&lt;/span&gt;delta 430&lt;span class="o"&gt;)&lt;/span&gt;, pack-reused 0R
Receiving objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;1019/1019&lt;span class="o"&gt;)&lt;/span&gt;, 173.87 KiB | 1.26 MiB/s, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
Resolving deltas: 100% &lt;span class="o"&gt;(&lt;/span&gt;571/571&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
Updating files: 100% &lt;span class="o"&gt;(&lt;/span&gt;183/183&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;========================================================&lt;/span&gt;
Cloning repository: na-ga
&lt;span class="o"&gt;========================================================&lt;/span&gt;
Cloning into &lt;span class="s1"&gt;'na-ga'&lt;/span&gt;...
remote: Enumerating objects: 53, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
remote: Counting objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;53/53&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
remote: Compressing objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;35/35&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
remote: Total 53 &lt;span class="o"&gt;(&lt;/span&gt;delta 15&lt;span class="o"&gt;)&lt;/span&gt;, reused 46 &lt;span class="o"&gt;(&lt;/span&gt;delta 8&lt;span class="o"&gt;)&lt;/span&gt;, pack-reused 0
Receiving objects: 100% &lt;span class="o"&gt;(&lt;/span&gt;53/53&lt;span class="o"&gt;)&lt;/span&gt;, 18.59 KiB | 2.66 MiB/s, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
Resolving deltas: 100% &lt;span class="o"&gt;(&lt;/span&gt;15/15&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="k"&gt;done&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check the current state of the solution:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./scripts/git-summary/git-summary.sh
Repository                       Branch Remote State
&lt;span class="o"&gt;================================&lt;/span&gt; &lt;span class="o"&gt;====&lt;/span&gt; &lt;span class="o"&gt;======&lt;/span&gt; &lt;span class="o"&gt;=====&lt;/span&gt;
/d/dev/MyFirstBuildProject       main ?  &lt;span class="nt"&gt;--&lt;/span&gt;
/d/dev/MyFirstBuildProject/na-ca main origin
/d/dev/MyFirstBuildProject/na-es main origin
/d/dev/MyFirstBuildProject/na-ga main origin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can build and run the solution:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./build/run-services.sh start
Creating network &lt;span class="s2"&gt;"myfirstbuildproject_default"&lt;/span&gt; with the default driver
Creating volume &lt;span class="s2"&gt;"myfirstbuildproject_rabbitmqdata-nikiforovall"&lt;/span&gt; with &lt;span class="nb"&gt;local &lt;/span&gt;driver
Creating volume &lt;span class="s2"&gt;"myfirstbuildproject_postgresdata-nikiforovall"&lt;/span&gt; with &lt;span class="nb"&gt;local &lt;/span&gt;driver
Creating volume &lt;span class="s2"&gt;"myfirstbuildproject_seq-nikiforovall"&lt;/span&gt; with &lt;span class="nb"&gt;local &lt;/span&gt;driver
&lt;span class="c"&gt;# ...&lt;/span&gt;
Use &lt;span class="s1"&gt;'docker scan'&lt;/span&gt; to run Snyk tests against images to find vulnerabilities and learn how to fix them
Creating &lt;span class="nb"&gt;seq&lt;/span&gt;                                ... &lt;span class="k"&gt;done
&lt;/span&gt;Creating myfirstbuildproject_postgres_1     ... &lt;span class="k"&gt;done
&lt;/span&gt;Creating myfirstbuildproject_rabbitmq_1     ... &lt;span class="k"&gt;done
&lt;/span&gt;Creating myfirstbuildproject_naga.gateway_1 ... &lt;span class="k"&gt;done
&lt;/span&gt;Creating myfirstbuildproject_naes.api_1     ... &lt;span class="k"&gt;done
&lt;/span&gt;Creating myfirstbuildproject_naes.worker_1  ... &lt;span class="k"&gt;done
&lt;/span&gt;Creating myfirstbuildproject_naca.worker_1  ... &lt;span class="k"&gt;done
&lt;/span&gt;Creating myfirstbuildproject_naca.api_1     ... &lt;span class="k"&gt;done

&lt;/span&gt;Containers starting &lt;span class="k"&gt;in &lt;/span&gt;background
For log info: run-services.sh info
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The system is up and running (screenshot from awesome &lt;a href="https://github.com/jesseduffield/lazydocker"&gt;https://github.com/jesseduffield/lazydocker&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cYI-pTuY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymdvq68j8t5dzqk1ymhc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cYI-pTuY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymdvq68j8t5dzqk1ymhc.png" alt="Image description" width="880" height="519"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can use code from &lt;em&gt;assets&lt;/em&gt; folder to test things out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Create a project in "Clean Architecture" service created from na-ca template

POST http://localhost:3000/ca/projects
Content-Type: application/json

{
    "name": "Clean Architecture Tasks",
    "colourCode": "#FFFFFF"
}

# Get projects

GET http://localhost:3000/ca/projects/

# Create a project in "Event Sourcing" service created from na-es template

POST http://localhost:3000/es/projects
Content-Type: application/json

{
    "name": "Event Sourcing Tasks",
    "colourCode": "#FF5733"
}

# Get projects

GET http://localhost:3000/es/projects/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SHwhTJVD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bxun7ckvzyt64jhn5wo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SHwhTJVD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bxun7ckvzyt64jhn5wo.png" alt="Image description" width="880" height="490"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;I encourage you to continue the investigation of the codebase on your own. You may find some inspiration or good practices, there are hidden gems 🙂. Let me know if you want to see a review of one of the components in the comments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.nuget.org/packages/NikiforovAll.CleanArchitecture.Templates/"&gt;https://www.nuget.org/packages/NikiforovAll.CleanArchitecture.Templates/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://martinfowler.com/articles/practical-test-pyramid.html"&gt;https://martinfowler.com/articles/practical-test-pyramid.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>dotnet</category>
      <category>architecture</category>
      <category>microservices</category>
      <category>docker</category>
    </item>
    <item>
      <title>Create a modal with React!</title>
      <author>Ustariz Enzo</author>
      <pubDate>Sat, 06 Nov 2021 13:11:42 +0000</pubDate>
      <link>https://dev.to/ziratsu/create-a-modal-with-react-176e</link>
      <guid>https://dev.to/ziratsu/create-a-modal-with-react-176e</guid>
      <description>&lt;p&gt;Hey &lt;strong&gt;fellow creators&lt;/strong&gt;,&lt;/p&gt;

&lt;p&gt;Let's create an awesome &lt;em&gt;modal&lt;/em&gt; with React! &lt;/p&gt;

&lt;p&gt;If you prefer to watch the video &lt;strong&gt;version&lt;/strong&gt;, it's right here :&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/9DwGahSqcEc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Ziratsu/React-modal-yt"&gt;Here's the source code for you&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's start building!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-create-your-component"&gt;
  &lt;/a&gt;
  1. Create your component.
&lt;/h2&gt;

&lt;p&gt;In the Modal.js file, create a component that'll use &lt;em&gt;useState.&lt;/em&gt;&lt;br&gt;
Add a const with modal and setModal, making sure the state is false to begin with, so that the modal doesn't show upon opening the website.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Modal.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Modal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setModal&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-create-a-button-thatll-trigger-the-popup"&gt;
  &lt;/a&gt;
  2. Create a button that'll trigger the pop-up.
&lt;/h2&gt;

&lt;p&gt;Add a button inside of the return, with an onClick parameter that'll trigger the function we'll create in a second.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleModal&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"btn-modal"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Open
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the function: when you click on the button, it'll change the state from false to true or the other way around.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggleModal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setModal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-create-the-modal"&gt;
  &lt;/a&gt;
  3. Create the modal.
&lt;/h2&gt;

&lt;p&gt;Create the content of your modal with the appropriate classnames for your css and make sure not to forget to add the onClick functions that'll trigger the opening or closing of your modal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"modal"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleModal&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"overlay"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"modal-content"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello Modal&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              Lorem ipsum dolor sit amet consectetur adipisicing elit. Provident
              perferendis suscipit officia recusandae, eveniet quaerat assumenda
              id fugit, dignissimos maxime non natus placeat illo iusto!
              Sapiente dolorum id maiores dolores? Illum pariatur possimus
              quaerat ipsum quos molestiae rem aspernatur dicta tenetur. Sunt
              placeat tempora vitae enim incidunt porro fuga ea.
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"close-modal"&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleModal&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     CLOSE
       &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-render-the-modal-conditionally"&gt;
  &lt;/a&gt;
  4. Render the modal conditionally.
&lt;/h2&gt;

&lt;p&gt;Add the curly brackets and your condition so that the modal only shows if the state is true (that is, if you've clicked on the "open" button).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;modal&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"modal"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleModal&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"overlay"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"modal-content"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello Modal&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              Lorem ipsum dolor sit amet consectetur adipisicing elit. Provident
              perferendis suscipit officia recusandae, eveniet quaerat assumenda
              id fugit, dignissimos maxime non natus placeat illo iusto!
              Sapiente dolorum id maiores dolores? Illum pariatur possimus
              quaerat ipsum quos molestiae rem aspernatur dicta tenetur. Sunt
              placeat tempora vitae enim incidunt porro fuga ea.
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"close-modal"&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleModal&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
              CLOSE
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now as you can see, there are two ways for you to close the modal:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;either by clicking on the close button of course.&lt;/li&gt;
&lt;li&gt;or by clicking on the overlay.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One last thing! Imagine there's a text below your "open" button. For a better user experience, you don't want this long paragraph to scroll down when the modal is open. To prevent that, you need to add a condition so that if the modal is opened, then the scrolling will not be possible:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="nc"&gt;.active-modal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;overflow-y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;active-modal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;active-modal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try with &lt;a href="https://github.com/Ziratsu/React-modal-yt"&gt;the full code&lt;/a&gt; and you'll see by yourself that it's now fixed! Make sure to check out the CSS file as well. &lt;/p&gt;

&lt;p&gt;Have fun experimenting and make sure to check out &lt;em&gt;my other tutorials&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;Come and take a look at my &lt;strong&gt;Youtube channel&lt;/strong&gt;: &lt;a href="https://www.youtube.com/c/Learntocreate/videos"&gt;https://www.youtube.com/c/Learntocreate/videos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;See you soon!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Enzo. &lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>10 awesome CSS Hamburger Menus</title>
      <author>webdeasy.de</author>
      <pubDate>Sat, 06 Nov 2021 12:50:04 +0000</pubDate>
      <link>https://dev.to/webdeasy/10-awesome-css-hamburger-menus-1iho</link>
      <guid>https://dev.to/webdeasy/10-awesome-css-hamburger-menus-1iho</guid>
      <description>&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://webdeasy.de/?referer=dev-1iho"&gt;webdeasy.de&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Responsive web design has long been standard on the web. Almost every website has a navigation menu, which is often realized by a hamburger menu. A collection of the best CSS hamburger menus (+ icons &amp;amp; animations) can be found here!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In mobile navigation, i.e. on the tablet or smartphone, the &lt;a href="https://webdeasy.de/en/top-css-navigation-menus-en/"&gt;navigation menu&lt;/a&gt; is very often hidden for space reasons and only visible by clicking on the hamburger menu. There is endless scope for design possibilities here. Some are programmed with pure CSS without JavaScript and some with CSS and JavaScript - there is something for everyone.&lt;/p&gt;

&lt;p&gt;A menu of mostly 2-3 layers has established itself - just like a hamburger (bun, patty, bun), which reveals all menu items in an overlay by a click. Individual strokes can be rotated to an X, disappear or whiz around wildly. Endless possibilities! I have compiled the best ones for you here - let yourself be inspired.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The pens shown are licensed with MIT. You can find more info about your own use on the &lt;a href="https://blog.codepen.io/documentation/licensing/"&gt;Codepen Blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-gooey-menu"&gt;
  &lt;/a&gt;
  #1 Gooey Menu
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/lbebber/embed/LELBEo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Author: &lt;a href="https://codepen.io/lbebber"&gt;Luca Bebber&lt;/a&gt;;&lt;br&gt;
Coded in: HTML, CSS (SCSS);&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-svg-css3-menuburger-button"&gt;
  &lt;/a&gt;
  #2 SVG CSS3 Menu/Burger Button
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kylehenwood/embed/Alayb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Author: &lt;a href="https://codepen.io/kylehenwood/"&gt;Kyle Henwood&lt;/a&gt;;&lt;br&gt;
Coded in: HTML, CSS (SCSS), JS;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-mobile-menu-animation"&gt;
  &lt;/a&gt;
  #3 Mobile Menu Animation
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/melnik909/embed/JpJPYp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Author: &lt;a href="https://codepen.io/melnik909/"&gt;Stas Melnikov&lt;/a&gt;;&lt;br&gt;
Coded in: HTML, CSS, JS;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-page-tilt-effect"&gt;
  &lt;/a&gt;
  #4 Page Tilt Effect
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/marco_fugaro/embed/yNGJXE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Author: &lt;a href="https://codepen.io/marco_fugaro/"&gt;Marco Fugaro&lt;/a&gt;;&lt;br&gt;
Coded in: HTML, CSS (SCSS), JS (jQuery);&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-elastic-menu"&gt;
  &lt;/a&gt;
  #5 Elastic menu
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/nguyenlong/embed/yJNjrN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Author: &lt;a href="https://codepen.io/nguyenlong/"&gt;Long&lt;/a&gt;;&lt;br&gt;
Coded in: HTML, CSS (SCSS), JS;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-hamburger-icons-animations"&gt;
  &lt;/a&gt;
  #6 Hamburger Icons Animations
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ahmadbassamemran/embed/VQwPGr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Author: &lt;a href="https://codepen.io/ahmadbassamemran/"&gt;Ahmad Emran&lt;/a&gt;;&lt;br&gt;
Coded in: HTML, CSS, JS;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-svg-gooey-hover-menu-concept"&gt;
  &lt;/a&gt;
  #7 SVG Gooey Hover Menu Concept
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/mikel301292/embed/dMYRYZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Author: &lt;a href="https://codepen.io/mikel301292/"&gt;Michael Leonard&lt;/a&gt;;&lt;br&gt;
Coded in: HTML, CSS, JS (jQuery);&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#8-hamburger-icon-animations"&gt;
  &lt;/a&gt;
  #8 Hamburger Icon Animations
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/RRoberts/embed/ZBYaJr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Author: &lt;a href="https://codepen.io/RRoberts/"&gt;Rosa&lt;/a&gt;;&lt;br&gt;
Coded in: HTML, CSS, JS (jQuery);&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#9-hamburger-menu-animation-with-velocityjs"&gt;
  &lt;/a&gt;
  #9 Hamburger menu animation with velocity.js
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/filippo/embed/WvGbJB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Author: &lt;a href="https://codepen.io/filippo/"&gt;Filippo&lt;/a&gt;;&lt;br&gt;
Coded in: HTML, CSS (Less), JS (jQuery + velocity.js);&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#10-atomic-hamburger-menu-css"&gt;
  &lt;/a&gt;
  #10 Atomic Hamburger Menu CSS
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alcoven/embed/JdoWdx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;
Author: &lt;a href="https://codepen.io/alcoven/"&gt;Alex Coven&lt;/a&gt;;&lt;br&gt;
Coded in: HTML, CSS;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conslusion"&gt;
  &lt;/a&gt;
  Conslusion
&lt;/h1&gt;

&lt;p&gt;Which menu would you choose for your website? Feel free to write it in the comments. And if you also have a fancy hamburger menu (icon), I can expand the collection.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: All buttons are all published on &lt;a href="https://codepen.io/"&gt;codepen.io&lt;/a&gt; and not by me.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Not enough yet? Then this could be something for you!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;😎 &lt;a href="https://webdeasy.de/en/loading-animations/"&gt;Cool CSS Buttons&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;4️⃣0️⃣4️⃣ &lt;a href="https://webdeasy.de/en/top-404-pages/"&gt;Creative 404-Error Pages&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🏆 &lt;a href="https://webdeasy.de/en/top-css-navigation-menus-en/"&gt;Top CSS Navigation Menus&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🤯 &lt;a href="https://webdeasy.de/en/satisfying-css-animations/"&gt;Satisfying CSS Animations&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🥵 &lt;a href="https://webdeasy.de/en/loading-animations/"&gt;Inspiring loading animations&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>html</category>
      <category>javascript</category>
    </item>
    <item>
      <title>ELI5 JavaScript: Nullish Coalescing (??) &amp; Logical Nullish Assignment (??=)</title>
      <author>Nisarg Kapkar</author>
      <pubDate>Sat, 06 Nov 2021 12:45:34 +0000</pubDate>
      <link>https://dev.to/nkap/eli5-javascript-nullish-coalescing-logical-nullish-assignment--510g</link>
      <guid>https://dev.to/nkap/eli5-javascript-nullish-coalescing-logical-nullish-assignment--510g</guid>
      <description>&lt;p&gt;Nullish Coalescing and Logical Nullish Assignment... they sure do sound scary!&lt;/p&gt;


&lt;center&gt;
&lt;br&gt;
&lt;img src="https://i.giphy.com/media/3o6wrfTsqfAepbiHZe/giphy.gif" alt="Scared gif" width="480" height="260"&gt;&lt;br&gt;
&lt;/center&gt;

&lt;p&gt;This was my reaction when I first heard the words 'Nullish Coalescing' and 'Logical Nullish Assignment' 😂&lt;/p&gt;

&lt;p&gt;But don't worry! Both of these are some of the simplest yet powerful concepts introduced in modern JavaScript!&lt;br&gt;
Read the article till the end to learn more about those :)&lt;/p&gt;

&lt;p&gt;Without further ado...&lt;/p&gt;


&lt;center&gt;
&lt;br&gt;
&lt;img src="https://i.giphy.com/media/64aBXTVfd90zyUH2da/giphy.gif" alt="Let's start gif" width="480" height="270"&gt;&lt;br&gt;
&lt;/center&gt;

&lt;h2&gt; Table of Contents: &lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#nullish-coalescing"&gt;Nullish Coalescing&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;    1.1     &lt;a href="#difference-between"&gt;Difference between OR (||) &amp;amp; Nullish Coalescing (??)&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;    1.2    &lt;a href="#short-circuiting"&gt;Short-circuiting&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;    1.3    &lt;a href="#assign-default-values"&gt;Assign default values&lt;/a&gt; &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#logical-nullish-assignment"&gt;Logical Nullish Assignment&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h3 id="nullish-coalescing"&gt;1. Nullish Coalescing&lt;/h3&gt; 

&lt;p&gt;It is a logical operator that&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;returns the first argument if it is 'defined' (not null/undefined)&lt;/li&gt;
&lt;li&gt;returns the second argument if the first argument isn't defined
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;person1&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;person1&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nisarg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//output = Nisarg&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;person2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;person2&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nisarg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//output = Nisarg&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;person3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Kapkar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;person3&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nisarg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//output = Kapkar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;The output of the first two console.log statements would be the second argument ("Nisarg") as the first arguments are either undefined (person1) or null (person2).&lt;/li&gt;
&lt;li&gt;The output of the third console.log will be person3 ("Kapkar") as the first argument is not null or undefined.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="difference-between"&gt; 1.1 Difference between OR (||) and Nullish Coalescing (??) &lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;OR operator does not distinguish between a null/undefined, false, empty string, and 0. All of these are treated as falsy values.&lt;/li&gt;
&lt;li&gt;If the first argument of OR is one of the above values, the second argument is returned as the output.&lt;/li&gt;
&lt;li&gt;Whereas Nullish Coalescing will only return the second argument if the first argument is either null or undefined.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;n1&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;//output = 10&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;n1&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;//output = 0&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n2&lt;/span&gt; 
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;n2&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;//output = 10&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n2&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;//output = 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;For n1: 0 is a falsy value. So OR returns 10. Since n1 is not null or undefined, Nullish Coalescing returns the first argument. &lt;/li&gt;
&lt;li&gt;For n2: undefined is a falsy value. So OR returns 10. Since n2 is undefined, Nullish Coalescing returns the second argument. &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="short-circuiting"&gt; 1.2 Short-circuiting &lt;/h4&gt;

&lt;p&gt;Nullish Coalescing can also be used for 'Short-circuit' evaluation.&lt;br&gt;
The second argument is only evaluated if the first argument is null or undefined!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;c called&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//Output: c called 1&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//Output: 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;For the first expression (a ?? c()), since a is undefined, the right-hand side of the expression is also evaluated (function c). Function c logs "c called" and returns 1, which is then logged by the console.&lt;/li&gt;
&lt;li&gt;For the second expression (b ?? c()), since b is neither undefined nor null, the right-hand side of the expression is not evaluated. So the console logs the value of b (10)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="assign-default-values"&gt; 1.3 Assign default values &lt;/h4&gt; 

&lt;p&gt;Use Nullish Coalescing to assign default values to a variable. Suppose we want to assign a variable to 10 if the number is null or undefined.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; 
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; 
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;//Output: 10&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;//Output: 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using OR to assign default values can have unexpected outcomes! &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OR assigns variable a to 10 even though the number is not null or undefined (as stated in section 1.1, OR considers 0 as a falsy value)&lt;/li&gt;
&lt;li&gt;Nullish Coalescing will assign 10 if and only if the number is null or undefined. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="logical-nullish-assignment"&gt; 2. Logical Nullish Assignment &lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; 
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;//Ouput = 100&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;//Ouput = 10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Logical Nullish is an assignment operator which assigns value if the variable is null or undefined.&lt;/p&gt;

&lt;p&gt;In the above example, since a is undefined, it is assigned 100. b is already defined (10), so the value is not assigned to b!&lt;/p&gt;




&lt;p&gt;Woooo! Thank you for reading 😄&lt;/p&gt;


&lt;center&gt;
&lt;br&gt;
&lt;img src="https://i.giphy.com/media/2E6OYt2yphlWTGZeYK/giphy.gif" alt="wooo Gif" width="480" height="480"&gt;&lt;br&gt;
&lt;/center&gt;

&lt;p&gt;If you have any questions about Nullish Coalescing or Logical Nullish Assignment (or about JavaScript in general), feel free to ask them in the comments 👇&lt;/p&gt;




&lt;p&gt;This article is part of my ELI5 JavaScript series.&lt;br&gt;
If you want to read &amp;amp; learn more about JavaScript, don't forget to subscribe (more articles coming soon!)&lt;/p&gt;

&lt;p&gt;Follow me 👇 for more content on full-stack development, software engineering &amp;amp; data structures/algorithms.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/nnkkaapp"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/nisarg-kapkar/"&gt;Linkedin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Nkap23"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you again :)&lt;/p&gt;

&lt;p&gt;Have an awesome day and happy coding 😄&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Showcase your project at Git Commit Show</title>
      <author>Saurabh Rai</author>
      <pubDate>Sat, 06 Nov 2021 12:41:27 +0000</pubDate>
      <link>https://dev.to/srbhr/showcase-your-project-at-git-commit-show-279l</link>
      <guid>https://dev.to/srbhr/showcase-your-project-at-git-commit-show-279l</guid>
      <description>&lt;p&gt;&lt;strong&gt;Git Commit Show #season03 on 27th &amp;amp; 28th November, 2021.&lt;/strong&gt; &lt;br&gt;
&lt;a href="https://gitcommit.show/"&gt;Git Commit Show&lt;/a&gt; is inviting you guys to showcase your breakthrough project ideas on web, robotics, automation, ml, etc. &lt;br&gt;
Giving a platform for those crazy ideas, that can impact a wider audience. Last two seasons we had some amazing projects home cleaner robot, 3D mouse etc.&lt;br&gt;
So this is the &lt;a href="http://push.gitcommit.show/"&gt;link to fill the form&lt;/a&gt;, the whole team at Git Commit Show would like to help you with your idea! Let's have you there! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://discord.gg/JFWP8c2gPG"&gt;Join our Discord&lt;/a&gt; to know more and participate in Giveaways! &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>opensource</category>
      <category>github</category>
    </item>
    <item>
      <title>How cookies track you around the Internet
</title>
      <author>Prajwol Shrestha</author>
      <pubDate>Sat, 06 Nov 2021 12:31:34 +0000</pubDate>
      <link>https://dev.to/prajwolshrestha/how-cookies-track-you-around-the-internet-11nj</link>
      <guid>https://dev.to/prajwolshrestha/how-cookies-track-you-around-the-internet-11nj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-are-cookies"&gt;
  &lt;/a&gt;
  What are cookies?
&lt;/h2&gt;

&lt;p&gt;Cookies are small text files that a website stores in your browser. Cookies are utilized to recall things about sites: your login data, what you have in your shopping basket, what language you prefer. They are generated by websites and remain in your browser until they expire.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#different-types-of-cookies"&gt;
  &lt;/a&gt;
  Different Types of Cookies
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#cookies-are-classified-based-on-their-different-characteristics"&gt;
  &lt;/a&gt;
  Cookies are classified based on their different characteristics:
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Based on their function,&lt;/strong&gt; cookies are divided as necessary and unnecessary. The necessary cookies are crucial for the functioning of a website, and the unnecessary cookies are the ones that are added additionally by the website and are not so crucial for the functioning of the website.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Based on their source,&lt;/strong&gt; cookies are divided into first-party and third-party cookies. First-party cookies are set by the site that the user is visiting presently, say, to check whether or not the user is logged in. Whereas third-party cookies are set by other websites that track the user for showing related advertisements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Based on their span,&lt;/strong&gt; cookies are classified as persistent and session cookies. Session cookies are set when the user begins a session and are temporary cookies. They terminate once the browser is closed and the session ends. Whereas Persistent cookies stay on the user’s browser for a long period and expire when they reach their expiration period.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#can-cookies-track-you-around-the-internet"&gt;
  &lt;/a&gt;
  Can cookies track you around the internet?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Yes, cookies can be used to invade your privacy and track you around the internet.&lt;/strong&gt; Most browsers only allow websites to store a maximum of 300 cookies and they cannot store a lot of data. Cookies set by one website cannot be accessed by that other site. And that raises a question, How can cookies be used to track us around the internet, especially if cookies from one website cannot be accessed by another? For instance, How can Facebook track what website we visit?&lt;/p&gt;

&lt;p&gt;The whole process starts when you log into Facebook, to remember that you are logged in Facebook, it stores a cookie on your browser, many other websites do the same thing. This cookie is bound to the Facebook domain name, meaning that nobody else besides facebook.com can read what’s inside the cookie. Let’s now assume, you are visiting another website, this website cannot access Facebook cookies and vice versa. But let’s assume that the owner of another website places a Facebook like button on his website, to show this like button your browser has to download some content from the Facebook servers. And when it’s talking to Facebook.com, it sends along with the cookie that Facebook had stored in your browser. Facebook now knows who you are and that you visited this site.&lt;/p&gt;

&lt;p&gt;Many other companies also use this technique to track you around the internet. The trick is easy, convince as many as websites to place some of your code in their websites.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-can-you-do-to-prevent-cookies-from-tracking-you"&gt;
  &lt;/a&gt;
  What can you do to prevent cookies from tracking you?
&lt;/h2&gt;

&lt;p&gt;You can prevent cookies from tracking you by:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using browser extensions like Privacy Badger, Ghostery, etc.&lt;/li&gt;
&lt;li&gt;Switching to a browser that has built-in privacy protection tools like Brave or safari.&lt;/li&gt;
&lt;li&gt;Enable Do Not Track (DNT) on browsers. Even though not all websites respect the DNT setting, it is one feature that users can use.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>todayilearned</category>
      <category>beginners</category>
      <category>information</category>
    </item>
    <item>
      <title>How to write a song lyrics in simple steps</title>
      <author>QzLyrics</author>
      <pubDate>Sat, 06 Nov 2021 12:20:48 +0000</pubDate>
      <link>https://dev.to/songlyrics/how-to-write-a-song-lyrics-in-simple-steps-eah</link>
      <guid>https://dev.to/songlyrics/how-to-write-a-song-lyrics-in-simple-steps-eah</guid>
      <description>&lt;p&gt;You can use this method to write songs to pitch to music publishers, TV shows, and commercials, or you can use it to record songs yourself as an artist. It will help you get your message across and ensure that your listeners are engaged from beginning to end, no matter what you're writing. Of course, this is only one approach to songwriting, but it is one that is used by many songwriting professionals and has been proven to be effective.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Begin with a catchy title. Starting with a title will assist you in maintaining focus on a single idea throughout your song. Create a one- to-six-word phrase that captures the essence of what you want to communicate. Alternatively, look for a catchy phrase that conjures up a situation or emotion in your mind. To make your title more appealing, try including an image or an action word to elicit more interest or energy.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make a list of the questions that are raised by the title of the article. Begin by considering what you want to say about your title and what you believe your listeners might be interested in hearing about it.&lt;br&gt;
Make a list of the questions you want to ask. The following questions might be on your list: What does the title mean? What are your thoughts on it? What exactly transpired to bring about this situation? What do you expect or hope will happen next, in your opinion?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a song structure that you like. Several of today's biggest hits have a structure that goes something like this: Verse / Chorus, then Verse / Chorus, then Bridge / Chorus. Some people include a brief section known as a "pre-chorus" or "lift" between the verse and the chorus in order to create anticipation.&lt;br&gt;
In each verse, pre-chorus, and chorus, there is an easily distinguishable melody that the listener can recognise when it is played.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select one question to be answered in the chorus and one question to be answered in each verse. Due to the fact that it is the most important part of your song, we will begin with the chorus. Choose the question you'd like to respond to in your chorus and click on it. Make a short phrase that expresses your response on a piece of paper.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To bring your answers to life, look for visuals and action words to inspire you. So, what is the singer's current state of mind, feeling, or saying? What kind of emotion do you think the singer is experiencing, and how would you describe it? Is it hot or cold outside? Is it better to be dark or light?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Locate the melody in your lyric and use it. Make a selection from one or two of the phrases that you came up with in Step 4. Pronounce them aloud. Say them again, this time with a lot of emotion. Exaggerate the feelings expressed in the lines. When you say the lines with a lot of feeling, pay attention to the natural rhythm and melody of your speech. This is the beginning of the melody for your chorus. Experiment with it until you find a comfortable position.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Begin to add chords to the melody of your chorus. Try a simple, repeated chord pattern to get your creative juices flowing. You'll find a number of chord progressions that you can use in this section. The section on Chord Progressions can be found by scrolling down.) Play around with the melody and chords until you come up with something you enjoy. Record yourself singing and playing (or just singing) – even if it's just on your smartphone – and upload it to YouTube. Make a note of it so you don't forget what you've learned.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Revise the lyric in your first verse to make it better. Concentrate on the question you selected in Step 4. Incorporate something intriguing into the first sentence, such as a question or a description of the situation to draw the audience's attention and keep them engaged. Consider rephrasing the first line in a different way or including additional information in your second line to make it more interesting. Maintain a steady pace; your listeners require time to comprehend what is happening in the song. Make sure to provide enough information in the first verse so that the listeners can follow along with the chorus when you get to it. Steps 5 and 6 should be completed with your verse melody and chords.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Also Read: &lt;a href="https://qzlyrics.com/hindi-numbers-counting/"&gt;Hindi Number Counting&lt;/a&gt;  &amp;amp; &lt;a href="https://qzlyrics.com/romantic-song-lyrics/"&gt;Hindi Romantic Lyrics&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make a connection between your verse and chorus. After you've written your verses and choruses, you should create a transition between them so that the song flows naturally between them. It may be necessary to adjust the pitch of your verse melody or change the last line in order to transition smoothly into your chorus.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;TIP: Chorus melodies are usually in a higher note range than verse melodies because they are more emotional than verse melodies, and when we are emotional, our voices naturally rise in pitch.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Write your second verse as well as your bridge. Make a second choice from among your questions to address in your second verse. Work your way through the lyric using Step 7. The melody and lyric for your second chorus will be the same as those for your first chorus, which means you are almost finished with your song. All that is required is the addition of a bridge.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The bridge section of your song adds a high-emotional point, a realisation, or a "aha!" moment to the composition. If you can, choose two or three lyric lines that will provide the listener with as much insight as possible into the situation or emotion that the singer is going through. The melody for each verse and chorus should be distinct from one another.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Make a recording of your song. It is often the case that a simple piano/vocal or guitar/vocal arrangement will be the most effective emotional statement for your song. If you've written a rock song, try recording a "unplugged" version of it. There is no need for a large number of strings or drums – in fact, these can be distracting.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Make sure you are comfortable with both the instrumental and vocal parts by practising them together. The fewer things you have to concentrate on while playing or singing, the more you can let go and feel the emotion of the song.... Try singing it as if you were speaking to someone in the audience. Record for brief periods of time and then take a break. Maintain the vibrancy of the song and the intensity of the emotion!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Go Variables</title>
      <author>Samuel K.M</author>
      <pubDate>Sat, 06 Nov 2021 11:59:04 +0000</pubDate>
      <link>https://dev.to/bazeng/go-variables-360i</link>
      <guid>https://dev.to/bazeng/go-variables-360i</guid>
      <description>&lt;h5&gt;
  &lt;a href="#how-to-declare-variables"&gt;
  &lt;/a&gt;
  How to declare variables?
&lt;/h5&gt;

&lt;p&gt;There are 3 ways to declare variables:&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#1-declare-using-raw-var-endraw-keyword-variable-name-amp-type"&gt;
  &lt;/a&gt;
  1. Declare using &lt;code&gt;var&lt;/code&gt; keyword, variable name &amp;amp; type
&lt;/h6&gt;

&lt;p&gt;To declare a variable you will use the &lt;code&gt;var&lt;/code&gt; keyword, followed by the &lt;code&gt;the variable name&lt;/code&gt; and then &lt;code&gt;the variable type&lt;/code&gt;.See the example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var i int
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you can then assign the variable using an equal sign&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;i = 20
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Type this in your &lt;a href="https://play.golang.org/"&gt;Playground&lt;/a&gt; and run it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import (
    "fmt"
)

func main() {
        var i int 
        i = 30
    fmt.Println(i)
}
//prints 30
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#2-declare-using-raw-var-endraw-keyword-variable-name-and-assign"&gt;
  &lt;/a&gt;
  2. Declare using &lt;code&gt;var&lt;/code&gt; keyword, variable name , and assign.
&lt;/h6&gt;

&lt;p&gt;To declare a variable you will use the &lt;code&gt;var&lt;/code&gt; keyword, followed by the &lt;code&gt;the variable name&lt;/code&gt; and then &lt;code&gt;the variable type&lt;/code&gt; and then assign the variable using an equal sign .See the example below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var i int = 20
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Type this in your &lt;a href="https://play.golang.org/"&gt;Playground&lt;/a&gt; and run it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import (
    "fmt"
)

func main() {
        var i int = 30
    fmt.Println(i)
}
//prints 30
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#3-declare-without-using-raw-var-endraw-keyword-and-variable-type"&gt;
  &lt;/a&gt;
  3 Declare without using &lt;code&gt;var&lt;/code&gt; keyword and variable type
&lt;/h6&gt;

&lt;p&gt;The go compiler provides for automatic type detection. To declare such, do as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;i:=42
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now run this in your playground:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import (
    "fmt"
)

func main() {
        i := 42
    fmt.Println(i)
}
//prints 42
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The compiler automatically figures the type.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#when-you-should-you-use-the-different-variable-declaration"&gt;
  &lt;/a&gt;
  When you should you use the different variable declaration?
&lt;/h5&gt;

&lt;p&gt;U can use :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var i int
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;when you want to use a variable without initializing it. For example where you want to assign the value in a for loop.&lt;br&gt;
U can use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var i int
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;when you want to have more control of your variable.&lt;br&gt;
U can use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;i := 20
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;when you are comfortable with automatic type detection. As you work with go, u will note that the format &lt;code&gt;:=&lt;/code&gt; doesnt detect &lt;code&gt;float 32&lt;/code&gt; types and instead detects them as integers. Case in example, run this in your playground:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import (
    "fmt"
)

func main() {
        i := 32
    fmt.Printf("%v %T",i,i)
}
//prints 32 int
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import (
    "fmt"
)

func main() {
        var i float32 = 32
    fmt.Printf("%v %T",i,i)
}
//prints 32 float32
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note: You can also declare a variable at the package level.However in such cases you cant use &lt;code&gt;:=&lt;/code&gt; automatic type detection.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import (
    "fmt"
)
var i float32 = 32
func main() {

    fmt.Printf("%v %T",i,i)
}
//prints 32 float32
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#declaring-variable-as-a-block"&gt;
  &lt;/a&gt;
  Declaring variable as a block
&lt;/h5&gt;

&lt;p&gt;Let say for example you have want to describe a  person, you would have to declare the following variables: Full names , gender , age ,Location as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import (
    "fmt"
)
var name string = "Samuel Bazeng"
var gender string = "Male"
var age int = 24
var location string = "Nairobi"

func main() {

    fmt.Println(name)
        fmt.Println(gender)
        fmt.Println(age)
        fmt.Println(location)

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But as Go is designed to be clear and concise, we dont need to keep writing var on each variable we can simply wrap all variables in a block:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var(
name string = "Samuel Bazeng"
gender string = "Male"
age int = 24
location string = "Nairobi"
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you run the code below it still works:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import (
    "fmt"
)
var(
name string = "Samuel Bazeng"
gender string = "Male"
age int = 24
location string = "Nairobi"
)

func main() {

    fmt.Println(name)
        fmt.Println(gender)
        fmt.Println(age)
        fmt.Println(location)

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way of declaring variable can also help in grouping variables by function.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#reassigning-variable"&gt;
  &lt;/a&gt;
  Reassigning Variable
&lt;/h5&gt;

&lt;p&gt;In case of reassignment, Go considers the variable within the innermost scope. This is called &lt;code&gt;shadowing&lt;/code&gt;. Case in example , the code below will print 10 instead of 20.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import (
    "fmt"
)
var i int =20;
func main() {
    var i int =10
    fmt.Println(i)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You cant use  &lt;code&gt;:=&lt;/code&gt; to redeclare a variable, it will result to an error.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#important-points-to-note-while-working-with-variables"&gt;
  &lt;/a&gt;
  Important Points To Note While Working With Variables:
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Every variable declared must be used. Failure to do so results into an error. Try this on your playground.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import (
    "fmt"
)
var i int =20;
func main() {
    var i int =10
    k := 11
    fmt.Println(i)

}

// ./prog.go:9:2: k declared but not used
//Go buid failed
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#naming-variable"&gt;
  &lt;/a&gt;
  Naming Variable
&lt;/h5&gt;

&lt;p&gt;There are two sets of rules you need to keep track of:&lt;br&gt;
1 .How naming controls the visibility of variables.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Lower case&lt;/strong&gt; variables are scoped to the package. Any file in the same package can access the variable. For example the variable &lt;code&gt;var i int =20&lt;/code&gt; in the example below:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import (
    "fmt"
)
var i int =20
func main() {
    var i int =10
    k := 11
    fmt.Println(i)

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Upper case&lt;/strong&gt; variables are exported and are available globally.For example the variable &lt;code&gt;var I int =20&lt;/code&gt; in the example below:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;package main

import (
    "fmt"
)
var I int =20
func main() {
    var i int =10
    k := 11
    fmt.Println(i)

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Variable defined in a block are scoped to the block and aren't visible outside the block.For example
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;func main() {
    var i int =10
    k := 11
    fmt.Println(i)

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Naming Conventions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are a few rules we should follow:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The length of a variable name should reflect its  lifeline.
&lt;code&gt;var i int&lt;/code&gt; is perfect for a for loop and other places where you don't have to keep it in your head for a long time. In a case where you will use a variable quite often its better to have a longer name example &lt;code&gt;var firstName string&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;For a package level variable its good to use a verbose name and clear enough for someone who is outside the source life to understand.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>go</category>
    </item>
    <item>
      <title>Top 4 Blockchain Projects for African Infrastructure Investors</title>
      <author>Team 3air</author>
      <pubDate>Sat, 06 Nov 2021 11:38:26 +0000</pubDate>
      <link>https://dev.to/team3air/top-4-blockchain-projects-for-african-infrastructure-investors-1c7a</link>
      <guid>https://dev.to/team3air/top-4-blockchain-projects-for-african-infrastructure-investors-1c7a</guid>
      <description>&lt;p&gt;Our post-COVID world has witnessed a massive adoption of cryptocurrencies and blockchain-based solutions worldwide, with many countries in Africa being the quickest to follow suit.&lt;/p&gt;

&lt;p&gt;In fact, recent studies show that &lt;a href="https://www.statista.com/statistics/1202468/global-cryptocurrency-ownership/"&gt;Nigeria has the highest crypto adoption rate&lt;/a&gt; in the world while other countries in the continent, like South Africa, show higher adoption rates than most countries in Europe, for instance.&lt;/p&gt;

&lt;p&gt;The trend has led to the rise of African tech startups that are leveraging the crypto-friendly nature of the continent. Most notable are the blockchain companies offering economic-transforming solutions to the African market.&lt;/p&gt;

&lt;p&gt;That said, let us look into some of the blockchain projects that could facelift the economic infrastructure of the continent and offer investors a higher return on investment (ROI).&lt;/p&gt;


&lt;h1&gt;&lt;b&gt;1. Akon City&lt;/b&gt;&lt;/h1&gt;

&lt;p&gt;You’ve probably heard of &lt;a href="https://marvelcinematicuniverse.fandom.com/wiki/Wakanda/"&gt;Wakanda&lt;/a&gt; from movies or books—a fictional city with futuristic buildings and advanced technologies. Well, &lt;a href="https://akoncity.com/"&gt;Akon City&lt;/a&gt; turns that fantasy into reality by making blockchain technology investments in the real estate industry, taking &lt;a href="https://www.foxnews.com/entertainment/akon-6-billion-senegalese-city-inspired-wakanda-black-panther"&gt;inspiration from the movie “Black Panther.”&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The legendary RnB singer, Akon, &lt;a href="https://www.thehindu.com/news/international/rapper-akon-plans-6-billion-akon-city-in-senegal-homeland/article32501283.ece"&gt;first announced the project in 2018&lt;/a&gt;, and it got approval from the Senegalese government in 2021. His plan is to build a world-class city that would use cryptocurrencies as its official money. The city is intended to cover about 2,000-acres of land and contain futuristic buildings enhanced by the latest technology available, especially blockchain.&lt;/p&gt;

&lt;p&gt;Although the project is planned to be completed by 2029, Akon City’s official token, Akoin, is already in circulation. After the token public sale in 2019, Akoin’s adoption grew, with its market cap peaking at $70 million in February 2021.&lt;/p&gt;

&lt;p&gt;Since its announcement, Akon City has drawn tremendous interest and support from the government and investors with a budget estimated at $6 billion.&lt;/p&gt;

&lt;p&gt;Backed with Akon’s reputation, the city sets out to become a force to bring the African blockchain ecosystem to greater heights, providing a wide range of blockchain investment options.&lt;/p&gt;

&lt;p&gt;While the Senegalese government remains the largest stakeholder in the project, more investors can hop onto the wagon and earn good ROI in the long run.&lt;/p&gt;


&lt;h1&gt;&lt;b&gt;2. 3air&lt;/b&gt;&lt;/h1&gt;

&lt;p&gt;3air is an innovative blockchain telecom company that is bridging the digital divide in Africa. It uses proprietary broadband infrastructure to offer internet access in many countries in Africa.&lt;/p&gt;

&lt;p&gt;3air’s goal is to provide the most scalable and cheapest &lt;a href="https://3air.io/"&gt;broadband internet in Africa&lt;/a&gt; as it aims to connect Africa to the rest of the world, bank the unbanked, and develop the continent’s industries through digital transformation.&lt;/p&gt;

&lt;p&gt;To achieve this, the blockchain startup is working in partnership with remarkable leaders in the broadband industry and blockchain technology. With the K3 Lastmile broadband infrastructure patented by the Swiss-based telecom giant, &lt;a href="https://www.k3tele.com/"&gt;K3 Telecom AG&lt;/a&gt;, 3air will make widespread internet access not only possible but affordable to anyone living in countries like Nigeria and the Democratic Republic of the Congo (DRC), among other countries.&lt;/p&gt;

&lt;p&gt;The K3 technology was first deployed in &lt;a href="https://www.telecompaper.com/news/k3-telecom-launches-wireless-services-in-sierra-leone--1278064"&gt;Sierra Leone in 2019&lt;/a&gt;, where it continues to be in use as it has turned successful. While K3 builds the broadband infrastructure, the Cardano blockchain will host the 3air’s telecom management system.&lt;/p&gt;

&lt;p&gt;3air users can pay for the broadband services and carry out other transactions using the 3air’s utility token. 3air’s &lt;a href="https://3air.io/token-presale"&gt;token public sale&lt;/a&gt; is planned to take place in November 2021 and its services to launch in 2022.&lt;/p&gt;

&lt;p&gt;3air already holds operational licenses to kick off operations in Nigeria and DRC, which will soon enjoy the benefits of broadband services. The project is set to become a game-changer, bringing unmeasurable benefits to both economies and societies in Africa.&lt;/p&gt;

&lt;p&gt;Investors who understand 3air’s economic and cultural significance are attracted to the project, assuming that its success would bring hefty blockchain investment opportunities to the continent.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkpicture.com/view.php?img=LPic6180d37fc7ca31679986059"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FsWXHZe8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.linkpicture.com/q/img2_1.jpg" width="612" height="382"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h1&gt;&lt;b&gt;3. The Sun Exchange&lt;/b&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://thesunexchange.com/"&gt;The Sun Exchange&lt;/a&gt; is a South African-based crowdfunded tech startup that provides solar energy services. The company has been active since 2015 and it has distributed over 1.5 million solar cells across more than 100 countries worldwide, generating over 7 million kWh worth of sustainable energy since its inception.&lt;/p&gt;

&lt;p&gt;In 2019, the startup launched its proprietary token sale and it &lt;a href="https://ventureburn.com/2019/01/sun-exchange-ico-closes-misses-target/"&gt;raised $1 million in the initial coin offering (ICO)&lt;/a&gt;. Being one of the earliest blockchain startup companies in Africa, the Sun Exchange has hit major milestones that have gained the project international recognition.&lt;/p&gt;

&lt;p&gt;The Sun Exchange won the award for the &lt;a href="https://techcabal.com/2016/10/21/meet-the-winners-of-the-2016-african-fintech-awards/"&gt;Best Blockchain in Africa in 2016&lt;/a&gt; during the African Fintech Awards in South Africa. In 2017, it won the &lt;a href="https://disrupt-africa.com/2017/06/06/sas-the-sun-exchange-wins-global-blockchain-challenge/"&gt;Smart Dubai Office Global Blockchain Challenge in Dubai&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Sun Exchange’s reputation and giant strides make it one of the best blockchain firms for African infrastructure investment. The blockchain startup still has a lot going on in its pipeline as it harnesses the weather conditions of the continent to provide sustainable energy.&lt;/p&gt;

&lt;p&gt;The Sun Exchange aims to incorporate more blockchain-oriented systems to ease the distribution and adoption of its services worldwide.&lt;/p&gt;


&lt;h1&gt;&lt;b&gt;4. Circulor&lt;/b&gt;&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.circulor.com/"&gt;Circulor&lt;/a&gt; is a UK-based blockchain company intending to reduce child labor in Africa’s mining industries by introducing foolproof traceability systems. The blockchain startup’s solution is a direct response to the increasing global calls against the use of mineralsーin manufacturing companiesーmined using child labor.&lt;/p&gt;

&lt;p&gt;For instance, Rwanda holds the world’s largest reserve of Tantalum一a &lt;a href="https://www.rembar.com/global-tantalum-production-the-u-s-dodd-frank-act-and-conflict-minerals-what-you-should-know/"&gt;conflict mineral&lt;/a&gt; used to manufacture capacitors for smartphones and laptops. The unethical methods companies employ to mine Tantalum in Rwanda have led the &lt;a href="https://www.globalwitness.org/en/campaigns/conflict-minerals/dodd-frank-act-section-1502/"&gt;US and other bodies to pass regulations&lt;/a&gt; for manufacturing companies to prove the origin of the minerals before they can be used to make any product.&lt;/p&gt;

&lt;p&gt;The goal is to show tangible evidence that no child was involved neither in the mining, bagging, shipping, or refining of the minerals nor in the assembly of the final product.&lt;/p&gt;

&lt;p&gt;In 2018, the blockchain startup &lt;a href="https://passive-components.eu/circulor-achieves-first-ever-mine-to-manufacturer-traceability-on-tantalum-from-rwanda/"&gt;developed a blockchain-based system&lt;/a&gt; that involved facial recognition, GPS tracking, QR codes, and weight checkers able to trace the Tantalum supply chain in Rwanda.&lt;/p&gt;

&lt;p&gt;The result saved mines and companies using the mineral money and efforts that would have been spent on compliance and regulations. Since then, Circulor has modified the system to trace cobalt, nickel, mica, plastic, lithium, and other commodities sourced around the world.&lt;/p&gt;

&lt;p&gt;Circulor is notable for offering real-case blockchain-based solutions to everyday regulatory and compliance problems.&lt;/p&gt;

&lt;p&gt;African tech startups are putting a lot of effort to bridge the economic divide between Africa and the rest of the world. So far, their use of blockchain technology has proven to be pivotal towards infrastructure and economic developments in the continent.&lt;/p&gt;

&lt;p&gt;More so, the continent’s blockchain revolution is at its preliminary stage, which makes this moment the best time for investors to dive in for maximum ROI.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to build a product with just HTML and CSS</title>
      <author>Lucian Tartea</author>
      <pubDate>Sat, 06 Nov 2021 11:35:12 +0000</pubDate>
      <link>https://dev.to/luciantartea/how-to-build-a-product-with-just-html-and-css-101l</link>
      <guid>https://dev.to/luciantartea/how-to-build-a-product-with-just-html-and-css-101l</guid>
      <description>&lt;p&gt;Couple of weeks ago I embarked on a challenge to prove you can build a product with just HTML and CSS that people would love and even pay for. I've set a 30 days deadline and promised to present results transparently.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results
&lt;/h3&gt;

&lt;p&gt;So 10 days after placing the project online it achieved &lt;strong&gt;4.3K visitors, 31 sales and $465&lt;/strong&gt; as passive income. This means the sales were made while I was relaxing and thinking about my next challenges.&lt;/p&gt;

&lt;p&gt;Of course being a product it also means that sales will continue to happen in the future but at a lower rate compared to the 10 days from launch. It's up to me to increase the frequency.&lt;/p&gt;

&lt;p&gt;Here are some stats from the 5th day from placing it online: close to 3000 visitors, 19 sales and $285.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x4my3QXi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32b454oalilqwjlmz53k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x4my3QXi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32b454oalilqwjlmz53k.png" alt="Chart with 5th day results from launch" width="880" height="496"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#product"&gt;
  &lt;/a&gt;
  Product
&lt;/h3&gt;

&lt;p&gt;The product itself is a HTML website consisting of 3 pages which present 10 HTML templates for websites and landing pages. The templates are the bulk of the product and took the best part of 30 days to create.&lt;/p&gt;

&lt;p&gt;As tech stack I used HTML, CSS, very little Bootstrap and few JS plugins for advanced features. To design the templates I relied on my previous experience with this and used Adobe Photoshop and Illustrator.&lt;/p&gt;

&lt;p&gt;To power up sales and item delivery I've used Gumroad which probably is the best nocode tool for digital creators. For marketing I used mostly Twitter and had good results with Reddit and Product Hunt.&lt;/p&gt;

&lt;p&gt;Spent $0 on this project besides the domain name cost and super basic hosting. Didn't buy any adds or other marketing help. Not because I didn't want to, just because I didn't have the money :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-of"&gt;
  &lt;/a&gt;
  Making of
&lt;/h3&gt;

&lt;p&gt;I created a tweet journal for the 30 days challenge where I posted all my actions and reasoning behind them. It's filled with tips, ideas and even an HTML template roadmap for devs. Available here &lt;a href="https://launchin30html.carrd.co/"&gt;launchin30html.carrd.co&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope this will provide inspiration and motivation for web developers to master HTML and CSS well. Would love to have your feedback and answer your questions in the comments section.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>⚠️ Don't try this at home: CSS-only image detail zoom 🖼️🔍</title>
      <author>Pascal Thormeier</author>
      <pubDate>Sat, 06 Nov 2021 11:16:01 +0000</pubDate>
      <link>https://dev.to/thormeier/dont-try-this-at-home-css-only-image-detail-zoom-3alg</link>
      <guid>https://dev.to/thormeier/dont-try-this-at-home-css-only-image-detail-zoom-3alg</guid>
      <description>&lt;p&gt;No, seriously, don't. We'll be hacking our way through. This will involve a lot of dirty hacks and bad practices that will make most screen readers and older browsers go bonkers and/or cry bitter tears of sorrow and despair. The... thing we're about to create is meant to serve as a bad example on what &lt;em&gt;not&lt;/em&gt; to do. There. You've been warned. I will however include a few boxes where I'm hacking my way in and explain why you shouldn't be doing this.&lt;/p&gt;

&lt;p&gt;I want to give a shout out to &lt;a class="mentioned-user" href="https://dev.to/nuritnt"&gt;@nuritnt&lt;/a&gt;
! While we were coaching a group of web dev students, she originally asked the question "Can you do an image detail zoom modal with CSS only? You could probably write a post about that?", so, yeah, here we are!&lt;/p&gt;

&lt;p&gt;Now, let's get our hands dirty, shall we?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-thing-were-trying-to-build"&gt;
  &lt;/a&gt;
  The thing we're trying to build
&lt;/h2&gt;

&lt;p&gt;So, on some webshops, when clicking on a small product image, the image opens up in a zoomed version. This is especially useful when the product images are, say, sets of different parts and you want to have a look at the individual parts. Or read a small sentence on the packaging.&lt;/p&gt;

&lt;p&gt;To make things a little more convenient, I also want to add the possibility to close the modal with the ESC key. Don't worry, we'll be able to hack that without JS.&lt;/p&gt;

&lt;p&gt;So, click on small image opens large image in modal. ESC key and close button close it again. Sounds good.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-the-image"&gt;
  &lt;/a&gt;
  Step 1: The image
&lt;/h2&gt;

&lt;p&gt;First, we need an image. I'm going to use &lt;a href="https://placeholder.com"&gt;placeholder.com&lt;/a&gt; for that:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CtympTRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://via.placeholder.com/640x480.png%3Ftext%3DImage%25201" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CtympTRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://via.placeholder.com/640x480.png%3Ftext%3DImage%25201" alt='A grey placeholder image saying "Image 1"' width="640" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In case you don't know placeholder.com, it's an amazing website to create placeholder images with. You can determine its size via URL (for example, &lt;a href="http://via.placeholder.com/640x480.png"&gt;http://via.placeholder.com/640x480.png&lt;/a&gt;) and add stuff like text via GET parameters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wait-aha-youre-going-to-use-the-trusty-ol-checkbox-trick-right"&gt;
  &lt;/a&gt;
  Wait, aha, you're going to use the trusty ol' checkbox trick, right?
&lt;/h2&gt;

&lt;p&gt;Almost! Today, we're going to get even worse than that.&lt;/p&gt;

&lt;p&gt;For those of you that don't know it, the checkbox trick was used back in the days to circumvent using JavaScript for simple style toggles. By using the sibling selector (&lt;code&gt;.a ~ .b&lt;/code&gt;, so any &lt;code&gt;.b&lt;/code&gt; that is a sibling of &lt;code&gt;.a&lt;/code&gt;) and the &lt;code&gt;:checked&lt;/code&gt; pseudo-class, we were able to toggle stuff. A really simple example could've been &lt;code&gt;.some-toggle:checked ~ .menu { display: block; }&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I'm going to use the good ol' &lt;code&gt;&amp;lt;input type="text"&amp;gt;&lt;/code&gt; and its focus state for that instead.&lt;/p&gt;

&lt;p&gt;I'll actually go beyond that and will use the text input &lt;em&gt;as the image&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"imagezoom-container"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"width: 100px; height: 100px;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"imagezoom"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"
    background-image: url(http://via.placeholder.com/640x480.png?text=Image%201);
  "&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.imagezoom-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.imagezoom&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/* Get rid of any text */&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Get rid of any text selection */&lt;/span&gt;
&lt;span class="nc"&gt;.imagezoom&lt;/span&gt;&lt;span class="nd"&gt;::selection&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wow. &lt;/p&gt;

&lt;p&gt;Please don't add images to your page like this! Screen readers will only see an input without a label, there's no possibility to add an &lt;code&gt;alt&lt;/code&gt; text and the image might be skewed/cropped.&lt;/p&gt;

&lt;p&gt;I'm using the input field here to minimize DOM. Also, since we're using the focus state, we can guarantee that any click on the image (even when enlarged) will trigger a focus on the input and thus keep the modal open. Yuck!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-elements-focus-state"&gt;
  &lt;/a&gt;
  Using the elements focus state
&lt;/h2&gt;

&lt;p&gt;Now we'll style the &lt;del&gt;input field&lt;/del&gt; image/modal for its zoomed state:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.imagezoom&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Make the "image" fill the entire screen */&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100vw&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100vh&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;/* Style the background-image */&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;contain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;no-repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;/* Remove the background-color by making it fully transparent */&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c"&gt;/* Get rid of default focus styling */&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* The dark background */&lt;/span&gt;
&lt;span class="nc"&gt;.imagezoom-background&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.imagezoom&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="nc"&gt;.imagezoom-background&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"imagezoom-container"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"width: 100px; height: 100px;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"imagezoom"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"
    background-image: url(http://via.placeholder.com/640x480.png?text=Image%201);
  "&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"imagezoom-background"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please don't use input fields for this! Screen readers will not know that you're trying to build an image zoom. They will think they're inside a huge form with dozens of inputs instead of an image gallery. They also probably won't know that you're using it as a toggle switch of some sort.&lt;/p&gt;

&lt;p&gt;To round things up, we'll add a close button (conveniently enough, &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; takes focus, therefore closing the modal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-result"&gt;
  &lt;/a&gt;
  The result
&lt;/h2&gt;

&lt;p&gt;The result is average at best:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/thormeier/embed/YzxaNdN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;You probably need to open the pen in a separate window, especially on a mobile device. I also added a min-width to the image in order to make it at least show up on mobile.&lt;/p&gt;

&lt;p&gt;While technically functional on mobile devices, it opens the keyboard, input fields tend to do that. A radio or checkbox instead of an input field might fix that, though. Also, the other image jumps around weirdly, when one is opened.&lt;/p&gt;

&lt;p&gt;I repeat again: please, &lt;em&gt;please&lt;/em&gt; don't do this in production. Use JavaScript instead. I need to go wash my hands...&lt;/p&gt;




&lt;p&gt;&lt;em&gt;I hope you enjoyed reading this article as much as I enjoyed writing it! If so, leave a&lt;/em&gt; ❤️ &lt;em&gt;or a&lt;/em&gt; 🦄&lt;em&gt;! I write tech articles in my free time and like to drink coffee every once in a while.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you want to support my efforts,&lt;/em&gt; &lt;a href="http://buymeacoffee.com/pthormeier"&gt;&lt;em&gt;you can offer me a coffee&lt;/em&gt; ☕&lt;/a&gt; &lt;em&gt;or&lt;/em&gt; &lt;a href="https://twitter.com/pthormeier"&gt;&lt;em&gt;follow me on Twitter&lt;/em&gt; 🐦&lt;/a&gt;&lt;em&gt;!&lt;/em&gt; &lt;em&gt;You can also support me directly via &lt;a href="https://www.paypal.me/pthormeier"&gt;Paypal&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://buymeacoffee.com/pthormeier"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc4mYYLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/x55hp6jopwyy161d8e2u.png" alt="Buy me a coffee button" width="262" height="60"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>donttrythisathome</category>
    </item>
  </channel>
</rss>
