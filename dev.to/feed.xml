<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Heap sort algorithm</title>
      <author>Aya Bouchiha</author>
      <pubDate>Mon, 05 Jul 2021 23:16:54 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/heap-sort-algorithm-247h</link>
      <guid>https://dev.to/ayabouchiha/heap-sort-algorithm-247h</guid>
      <description>&lt;p&gt;Hi, today we'll discuss the Heapsort algorithm, for better understanding this algorithm, you need to be familiar with Heap data structure if you're not, check this &lt;a href="https://dev.to/ayabouchiha/your-complete-guide-to-heap-data-structure-20nl"&gt;the complete guide to heap data structure&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#definition-of-heapsort"&gt;
  &lt;/a&gt;
  Definition of Heapsort
&lt;/h2&gt;

&lt;p&gt;Heapsort: is one of the most efficient sorting algorithms which is based on &lt;a href="https://dev.to/ayabouchiha/your-complete-guide-to-heap-data-structure-20nl"&gt;&lt;strong&gt;heap&lt;/strong&gt;&lt;/a&gt; data structure&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#space-and-time-complexity-of-heapsort"&gt;
  &lt;/a&gt;
  Space and Time complexity of Heapsort
&lt;/h2&gt;

&lt;p&gt;The space complexity of the heap sort algorithm is &lt;strong&gt;O(1)&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Best case&lt;/th&gt;
&lt;th&gt;Average case&lt;/th&gt;
&lt;th&gt;Worst case&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;O(n log n)&lt;/td&gt;
&lt;td&gt;O(n log n)&lt;/td&gt;
&lt;td&gt;O(n log n)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#heap-sort-approach"&gt;
  &lt;/a&gt;
  Heap sort approach
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Covert the giving array to a max-heap&lt;/li&gt;
&lt;li&gt;While the size of the heap is greater than 1: 

&lt;ol&gt;
&lt;li&gt;After converting it, The root is the maximum value of the max-heap. &lt;/li&gt;
&lt;li&gt;Replace the root with the last item of the max-heap.&lt;/li&gt;
&lt;li&gt;Decrease the size of the heap.&lt;/li&gt;
&lt;li&gt;Bubble down (heapify) the root.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#implementation-of-heap-sort-algorithm-in-python"&gt;
  &lt;/a&gt;
  Implementation of Heap sort algorithm in python
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;This code is contributed by &lt;a href="https://www.geeksforgeeks.org/heap-sort/"&gt;Mohit Kumra&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#heapify-function"&gt;
  &lt;/a&gt;
  heapify function
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;heapify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;largest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="c1"&gt;# Initialize largest as root
&lt;/span&gt;    &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="c1"&gt;# left = 2*i + 1
&lt;/span&gt;    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="c1"&gt;# right = 2*i + 2
&lt;/span&gt;
    &lt;span class="c1"&gt;# See if left child of root exists and is
&lt;/span&gt;    &lt;span class="c1"&gt;# greater than root
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;largest&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;largest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;

    &lt;span class="c1"&gt;# See if right child of root exists and is
&lt;/span&gt;    &lt;span class="c1"&gt;# greater than root
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;largest&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;largest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;

    &lt;span class="c1"&gt;# Change root, if needed
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;largest&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;largest&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;largest&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# swap
&lt;/span&gt;
        &lt;span class="c1"&gt;# Heapify the root.
&lt;/span&gt;        &lt;span class="n"&gt;heapify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;largest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#heap-sort-function"&gt;
  &lt;/a&gt;
  Heap sort function
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;heapSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Build a maxheap.
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;heapify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# One by one extract elements
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# swap
&lt;/span&gt;        &lt;span class="n"&gt;heapify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#references-and-useful-resources"&gt;
  &lt;/a&gt;
  References and useful resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.geeksforgeeks.org/heap-sort/"&gt;https://www.geeksforgeeks.org/heap-sort/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Q_eia3jC9Ts"&gt;https://www.youtube.com/watch?v=Q_eia3jC9Ts&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=2DmK_H7IdTo"&gt;https://www.youtube.com/watch?v=2DmK_H7IdTo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>algorithms</category>
      <category>python</category>
      <category>codenewbie</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>The Dev Academy for Developers🎉🔥🔥</title>
      <author>Fortune the Dev 🚀❤️</author>
      <pubDate>Mon, 05 Jul 2021 22:15:02 +0000</pubDate>
      <link>https://dev.to/codewithfortune/the-dev-academy-for-developers-175j</link>
      <guid>https://dev.to/codewithfortune/the-dev-academy-for-developers-175j</guid>
      <description>&lt;p&gt;My YouTube channel achieved 7,500 views on July 05, 2021! Track and celebrate your own success today for free with @vidIQ &lt;a href="https://t.co/NIhWu2xQ53"&gt;https://t.co/NIhWu2xQ53&lt;/a&gt; &lt;br&gt;
This isnt an achievement for other devs with successful channels and 7 figure salaries but it is for me🎉&lt;br&gt;
The channel is still small but there's definitely something for every type of developer no matter the level of experience or type of developer.&lt;br&gt;
Anyway if you would like to check out the channel, here's the link, kindly Subscribe ❤️❤️ and comment on things I can improve on💪💪&lt;br&gt;
The link👇👇&lt;br&gt;
&lt;a href="https://youtube.com/c/FortuneDevAcademy"&gt;https://youtube.com/c/FortuneDevAcademy&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>java</category>
      <category>react</category>
      <category>php</category>
    </item>
    <item>
      <title>MongoDB shell commands (running on Docker) 101</title>
      <author>Pedro Arantes</author>
      <pubDate>Mon, 05 Jul 2021 21:29:20 +0000</pubDate>
      <link>https://dev.to/arantespp/mongodb-shell-commands-running-on-docker-101-1l73</link>
      <guid>https://dev.to/arantespp/mongodb-shell-commands-running-on-docker-101-1l73</guid>
      <description>&lt;p&gt;&lt;em&gt;Photo by &lt;a href="https://unsplash.com/@xps?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;XPS&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/database?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This tutorial shows how you can start and understand a bit more about MongoDB. I create this cheat sheet because I need to work on a project that uses MongoDB, and doing the steps below gave me an overview of how MongoDB works. Of course, there are many more functionalities, but here I just focused on creating a Docker container, databases, collections, documents, adding users, performing some queries, dumping, and restoring databases.&lt;/p&gt;

&lt;p&gt;I've decided to use Docker because it's easier to start and clean up the system after doing some tests. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-and-accessing-container"&gt;
  &lt;/a&gt;
  Creating and Accessing Container
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ docker run -d -p 27017:27017 --name MONGO_CONTAINER mongo:latest&lt;/code&gt;: run MongoDB container in detached mode (running in background).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ docker ps&lt;/code&gt;: list all running instances. &lt;strong&gt;MONGO_CONTAINER&lt;/strong&gt; container should be running.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ docker exec -it MONGO_CONTAINER mongo&lt;/code&gt;: execute &lt;code&gt;mongo&lt;/code&gt; command in the &lt;strong&gt;MONGO_CONTAINER&lt;/strong&gt; directly in your shell. You could also run &lt;code&gt;$ docker exec -it MONGO_CONTAINER bash&lt;/code&gt; and after, &lt;code&gt;$ mongo&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#creating-database-collection-and-items"&gt;
  &lt;/a&gt;
  Creating Database, Collection, and Items
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ use dbTest&lt;/code&gt;: create a &lt;a href="https://docs.mongodb.com/manual/core/databases-and-collections/#databases"&gt;database&lt;/a&gt; named &lt;strong&gt;dbTest&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ db.createCollection('myFirstCollection')&lt;/code&gt;: create a &lt;a href="https://docs.mongodb.com/manual/core/databases-and-collections/#collections"&gt;collection&lt;/a&gt; named &lt;strong&gt;myFirstCollection&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ db.myFirstCollection.insert({item: "card1", qty: 10})&lt;/code&gt;: add a document in the &lt;strong&gt;myFirstCollection&lt;/strong&gt; colection.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ db.myFirstCollection.insert({item: "card2", qty: 20})&lt;/code&gt;: add a second document in the &lt;strong&gt;myFirstCollection&lt;/strong&gt; colection.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ db.myFirstCollection.find()&lt;/code&gt;: select documents in the &lt;strong&gt;myFirstCollection&lt;/strong&gt; colection. It should display the two created documents with the &lt;code&gt;_id&lt;/code&gt; property. &lt;a href="https://docs.mongodb.com/manual/reference/method/db.collection.find/"&gt;db.collection.find() reference&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ db.myFirstCollection.find({ item: "card1" })&lt;/code&gt;: it returns only the document whose &lt;code&gt;item&lt;/code&gt; property is &lt;code&gt;card1&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ db.myFirstCollection.find({ qty: { $gt: 4 } })&lt;/code&gt;: it returns all documents whose &lt;code&gt;qty&lt;/code&gt; property is greater than &lt;code&gt;4&lt;/code&gt;, in our case, all documents.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ db.myFirstCollection.find({ qty: { $gt: 14 } })&lt;/code&gt;: it returns all documents whose &lt;code&gt;qty&lt;/code&gt; property is greater than &lt;code&gt;14&lt;/code&gt;, in our case, only &lt;code&gt;card2&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#exiting-mongodb-shell-and-accessing-again"&gt;
  &lt;/a&gt;
  Exiting MongoDB Shell and Accessing Again
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ exit&lt;/code&gt;: exit Docker MongoDB shell.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ docker stop MONGO_CONTAINER&lt;/code&gt;: stop &lt;strong&gt;MONGO_CONTAINER&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ docker ps&lt;/code&gt;: check if &lt;strong&gt;MONGO_CONTAINER&lt;/strong&gt; isn't running.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ docker start MONGO_CONTAINER&lt;/code&gt;: start &lt;strong&gt;MONGO_CONTAINER&lt;/strong&gt; again.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ docker exec -it MONGO_CONTAINER mongo&lt;/code&gt;: access again.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ show dbs&lt;/code&gt;: list all databases.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ use dbTest&lt;/code&gt;: use &lt;strong&gt;dbTest&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ db.myFirstCollection.find()&lt;/code&gt;: check if the created documents is still there.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#creating-users"&gt;
  &lt;/a&gt;
  Creating Users
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ show roles&lt;/code&gt;: list all &lt;a href="https://docs.mongodb.com/v5.0/reference/built-in-roles/"&gt;roles&lt;/a&gt; that you can give to new users.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ db.createUser({ user: "newUser", pwd: "123123123", roles: [{ role: "readWrite", db: "dbTest" }] })&lt;/code&gt;: create new user named &lt;strong&gt;newUser&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ show users&lt;/code&gt;: list all users.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ exit&lt;/code&gt;: exit.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#access-using-specific-user"&gt;
  &lt;/a&gt;
  Access Using Specific User
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ docker exec -it MONGO_CONTAINER  mongo --username newUser --password 123123123 --authenticationDatabase dbTest&lt;/code&gt;: access with the &lt;strong&gt;newUser&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$  db.runCommand({connectionStatus : 1})&lt;/code&gt;: &lt;a href="https://stackoverflow.com/questions/21414608/mongodb-show-current-user"&gt;check the current user&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ db.myFirstCollection.find()&lt;/code&gt;: check if &lt;strong&gt;newUser&lt;/strong&gt; can query documents.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ exit&lt;/code&gt;: exit.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#dump-and-restore"&gt;
  &lt;/a&gt;
  Dump and Restore
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://dev.to/mkubdev/mongodump-and-mongorestore-with-docker-39m7"&gt;Full reference here.&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ docker exec MONGO_CONTAINER sh -c "mongodump --db dbTest --archive" &amp;gt; db.dump&lt;/code&gt;: dump &lt;strong&gt;dbTest&lt;/strong&gt;. If you omit &lt;code&gt;--db dbTest&lt;/code&gt;, then you'll dump all databases.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ docker run -d -p 27018:27017 --name MONGO_CONTAINER_2 mongo:latest&lt;/code&gt;: create new MongoDB container.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ docker exec -i MONGO_CONTAINER_2 sh -c "mongorestore --db dbTest --archive" &amp;lt; db.dump&lt;/code&gt;: restore &lt;strong&gt;dbTest&lt;/strong&gt;  in &lt;strong&gt;MONGO_CONTAINER_2&lt;/strong&gt; container.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ use dbTest&lt;/code&gt;: use &lt;strong&gt;dbTest&lt;/strong&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ db.myFirstCollection.find()&lt;/code&gt;: check if the documents are in the new MongoDB instance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ exit&lt;/code&gt;: exit.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#clear"&gt;
  &lt;/a&gt;
  Clear
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ docker stop MONGO_CONTAINER MONGO_CONTAINER_2&lt;/code&gt;: stop both containers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ docker ps -a&lt;/code&gt;: check all instances, even the stopped ones.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ docker rm MONGO_CONTAINER MONGO_CONTAINER_2&lt;/code&gt;: remove both containers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;$ docker ps -a&lt;/code&gt;: check if the MongoDB instances were deleted.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Probably you won't use MongoDB this way in your production projects, but it's an illustrative step-by-step to understand the basics of the MongoDB engine. I hope you like it :)&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>docker</category>
      <category>database</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Animating Next.js page transitions with Framer Motion</title>
      <author>James Wallis</author>
      <pubDate>Mon, 05 Jul 2021 21:18:44 +0000</pubDate>
      <link>https://dev.to/jameswallis/animating-next-js-page-transitions-with-framer-motion-1g9j</link>
      <guid>https://dev.to/jameswallis/animating-next-js-page-transitions-with-framer-motion-1g9j</guid>
      <description>&lt;p&gt;A few months ago &lt;a href="https://dev.to/jameswallis/i-completely-rewrote-my-personal-website-using-dev-to-as-a-cms-2pje"&gt;I rebuilt my Dev.to powered Next.js website&lt;/a&gt; from scratch. While building it, I decided adding animations would bring its simple design to life. Previously, I'd used CSS transitions and JavaScript to achieve animations on a webpage. This time I wanted to use an animation library built for React.js that I could use in future projects. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Enter Framer Motion.&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#framer-motion"&gt;
  &lt;/a&gt;
  Framer Motion
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A production-ready motion library for React.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;- &lt;a href="https://www.framer.com/motion"&gt;https://www.framer.com/motion&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It's a library that enables the animations of React components on a page and while the component is entering and also leaving.&lt;/p&gt;

&lt;p&gt;Framer Motion can do all of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spring animations&lt;/li&gt;
&lt;li&gt;Simple keyframes syntax&lt;/li&gt;
&lt;li&gt;Gestures (drag/tap/hover)&lt;/li&gt;
&lt;li&gt;Layout and shared layout animations&lt;/li&gt;
&lt;li&gt;SVG paths&lt;/li&gt;
&lt;li&gt;Exit animations&lt;/li&gt;
&lt;li&gt;Server-side rendering&lt;/li&gt;
&lt;li&gt;Variants for orchestrating animations across components&lt;/li&gt;
&lt;li&gt;CSS variables&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And can bring a static page to life:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YLBrssKR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uy6922sbnmec4lsg0qvq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YLBrssKR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uy6922sbnmec4lsg0qvq.gif"&gt;&lt;/a&gt;&lt;br&gt;Various animations powered by Framer Motion
  &lt;/p&gt;

&lt;p&gt;Read more about Framer Motion and view examples on &lt;a href="https://www.framer.com/motion/"&gt;their website&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#animating-nextjs-page-transitions"&gt;
  &lt;/a&gt;
  Animating Next.js page transitions
&lt;/h2&gt;

&lt;p&gt;As well as making user triggered animations, Framer Motion can animate a component when it is mounting (entering) and unmounting (leaving). I use this capability to animate the components that come and go when the page changes. In Next.js terms, this is everything apart from &lt;a href="https://nextjs.org/docs/advanced-features/custom-app"&gt;&lt;code&gt;_app.js&lt;/code&gt;&lt;/a&gt; - so all pages and other components. Where possible, using &lt;code&gt;_app.js&lt;/code&gt; to persist layouts between page changes will reduce the amount of rendering that React has to do each time the page changes - potentially improving your app performance.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preparing-the-codebase"&gt;
  &lt;/a&gt;
  Preparing the codebase
&lt;/h3&gt;

&lt;p&gt;Before I added any animations to my website I did two pieces of refactoring:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Moved common components that shouldn't animate on every page change into &lt;code&gt;_app.js&lt;/code&gt;&lt;/strong&gt;. In my case this meant moving the &lt;code&gt;Header&lt;/code&gt; and &lt;code&gt;Footer&lt;/code&gt; which you can &lt;a href="https://github.com/james-wallis/wallis.dev/blob/master/pages/_app.tsx#L57-L65"&gt;see on GitHub&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Added a wrapper component to control the animation states within pages&lt;/strong&gt;. On my website it is the &lt;a href="https://github.com/james-wallis/wallis.dev/blob/master/components/Layout.tsx#L20"&gt;&lt;code&gt;Layout&lt;/code&gt;&lt;/a&gt; component. Note the &lt;code&gt;&amp;lt;motion.main&amp;gt;&lt;/code&gt; component which is specific to Framer Motion. In the rendered HTML output this will be a HTML &lt;code&gt;main&lt;/code&gt; element, however, adding the &lt;code&gt;motion.&lt;/code&gt; supplied by Framer Motion provides the ability to pass certain animation props such as &lt;code&gt;transition&lt;/code&gt;, &lt;code&gt;initial&lt;/code&gt; and &lt;code&gt;animate&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#%C2%A0entry-animations"&gt;
  &lt;/a&gt;
   Entry animations
&lt;/h3&gt;

&lt;p&gt;Looking at the &lt;a href="https://github.com/james-wallis/wallis.dev/blob/master/components/Layout.tsx"&gt;&lt;code&gt;Layout&lt;/code&gt;&lt;/a&gt; component you will see an object named &lt;code&gt;variants&lt;/code&gt; (see below). Variants promote cleaner code by removing the requirement to add the animation object to the &lt;code&gt;motion.main&lt;/code&gt; component. You can read more about them on &lt;a href="https://www.framer.com/api/motion/animation/#variants"&gt;the Framer Motion website&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;variants&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;enter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now focussing on the &lt;code&gt;motion.main&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;motion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;
    &lt;span class="na"&gt;variants&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;variants&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// Pass the variant object into Framer Motion &lt;/span&gt;
    &lt;span class="na"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="c1"&gt;// Set the initial state to variants.hidden&lt;/span&gt;
    &lt;span class="na"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"enter"&lt;/span&gt; &lt;span class="c1"&gt;// Animated state to variants.enter&lt;/span&gt;
    &lt;span class="na"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"exit"&lt;/span&gt; &lt;span class="c1"&gt;// Exit state (used later) to variants.exit&lt;/span&gt;
    &lt;span class="na"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;linear&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// Set the transition to linear&lt;/span&gt;
    &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;motion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;initial&lt;/code&gt; and &lt;code&gt;animate&lt;/code&gt; states will control the entry animation for this component. When you change the page on my website, you should see the content change from having an opacity of &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt; position of &lt;code&gt;-200px&lt;/code&gt; to having an opacity of &lt;code&gt;1&lt;/code&gt; and being in the center of the screen. This gives the effect of the content fading in from the left. By the way, "A Transition is an object that defines how values animate from one state to another" - &lt;a href="https://www.framer.com/api/motion/types/#transition"&gt;from the Framer Motion website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;An entry animation is great but let's go a little further and animate components when they leave the page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-raw-animatepresence-endraw-and-exit-animations"&gt;
  &lt;/a&gt;
  Adding &lt;a href="https://www.framer.com/api/motion/animate-presence/"&gt;&lt;code&gt;AnimatePresence&lt;/code&gt;&lt;/a&gt; and exit animations
&lt;/h3&gt;

&lt;p&gt;One feature of Framer Motion is that it can animate components after they've left the React DOM. To activate this feature you can use the &lt;a href="https://www.framer.com/api/motion/animate-presence/"&gt;&lt;code&gt;AnimatePresence&lt;/code&gt;&lt;/a&gt; component. For my website, I use the optional &lt;code&gt;exitBeforeEnter&lt;/code&gt; prop which tells the entrance animation to wait until the exit animation has ended before starting - without this the content would mount on top of the unmounting content, looking messy.&lt;/p&gt;

&lt;p&gt;You'll need to add the &lt;code&gt;AnimatePresence&lt;/code&gt; component to the &lt;a href="https://github.com/james-wallis/wallis.dev/blob/master/pages/_app.tsx#L58"&gt;&lt;code&gt;_app.js&lt;/code&gt; file&lt;/a&gt; so that it never unmounts (unmounting would disable the exit animations). Note also the &lt;code&gt;initial={false}&lt;/code&gt; prop which disables the entry animation when you first visit the website. Disabling it is just a personal preference, remove that line if you want to enable it.&lt;/p&gt;

&lt;p&gt;Once &lt;code&gt;AnimatePresence&lt;/code&gt; is added to &lt;code&gt;_app.js&lt;/code&gt;, you can add an &lt;code&gt;exit&lt;/code&gt; animation to your &lt;code&gt;motion.main&lt;/code&gt; component. See this in the two code blocks above.&lt;/p&gt;

&lt;p&gt;We're almost finished but we just need to fix an issue with Next.js scrolling to the top of the page when the route changes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solving-the-scroll-on-link-change-issue"&gt;
  &lt;/a&gt;
  Solving the scroll on link change issue
&lt;/h3&gt;

&lt;p&gt;When adding page navigation to a Next.js application you should be using the &lt;a href="https://nextjs.org/docs/api-reference/next/link"&gt;&lt;code&gt;Link&lt;/code&gt;&lt;/a&gt; component. By default, when the &lt;code&gt;Link&lt;/code&gt; component is clicked it scrolls to the top of the page before animating, making the page transitions look a bit clunky. See below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L74oboS5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xxv0ezfw8k6xxqq3k4a.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L74oboS5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1xxv0ezfw8k6xxqq3k4a.gif"&gt;&lt;/a&gt;&lt;br&gt;Scrolling to the top before animating
  &lt;/p&gt;

&lt;p&gt;Fortunately the fix for this is pretty easy. For each &lt;code&gt;Link&lt;/code&gt; component that is used around your codebase, add the &lt;a href="https://nextjs.org/docs/api-reference/next/link#disable-scrolling-to-the-top-of-the-page"&gt;&lt;code&gt;scroll={false}&lt;/code&gt;&lt;/a&gt; prop. This will disable the scrolling when its clicked. To make this easier and maintain clean code, I created a component that wraps &lt;code&gt;Link&lt;/code&gt; but disables the scroll. I called it &lt;code&gt;NoScrollLink&lt;/code&gt; and you can &lt;a href="https://github.com/james-wallis/wallis.dev/blob/master/components/NoScrollLink.tsx"&gt;view it on GitHub&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;After disabling the &lt;code&gt;Link&lt;/code&gt; component's scroll, it's a good idea to scroll to the top of the page after the Framer Motion exit animation has completed. This gives the effect of content leaving at the current scroll height but the new content entering at the top of the page. Again this is easy, you can use the &lt;code&gt;onExitComplete&lt;/code&gt; prop on the &lt;code&gt;AnimatePresence&lt;/code&gt; component in &lt;code&gt;_app.js&lt;/code&gt;. The following code snippet will scroll to the top once the exit animation has completed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;onExitComplete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://github.com/james-wallis/wallis.dev/blob/master/pages/_app.tsx#L61"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Having added that, when you change page Framer Motion should unmount the old content, scroll to the top and mount the new content.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#the-finished-product"&gt;
  &lt;/a&gt;
  The finished product
&lt;/h3&gt;

&lt;p&gt;If you've been following along or want to see it live &lt;a href="http://wallis.dev"&gt;on my website&lt;/a&gt; you'll see the following page transitions:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SvTYNUKh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gctmesek0r4ibpopdmeq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SvTYNUKh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gctmesek0r4ibpopdmeq.gif"&gt;&lt;/a&gt;&lt;br&gt;The finished page animation
  &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;In this article I wanted to help others add page transitions to their Next.js app with the help of Framer Motion. I overcame some obstacles when adding them to my website such as realising &lt;code&gt;AnimatePresence&lt;/code&gt; needed to be in &lt;code&gt;_app.js&lt;/code&gt; and how to stop the scroll to the top of the page after a &lt;code&gt;Link&lt;/code&gt; is clicked.&lt;/p&gt;

&lt;p&gt;If you've anything to add or just want to show some appreciation, leave a comment or react! &lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>What I Learned my First 2 Months as a Junior</title>
      <author>Ariel Ordonez</author>
      <pubDate>Mon, 05 Jul 2021 20:45:23 +0000</pubDate>
      <link>https://dev.to/arielord/what-i-learned-my-first-2-months-as-a-junior-2n3o</link>
      <guid>https://dev.to/arielord/what-i-learned-my-first-2-months-as-a-junior-2n3o</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;I have seen a lot of posts on how to get your first job, but very little blog posts on what happens after that. There is so much information to absorb when you’re just starting out, and admittedly I have learned a lot.&lt;/p&gt;

&lt;p&gt;Full disclosure, this is technically not my first role getting paid to write code, but it is my first non-contracting role where I actually get to work and build upon a product! I’m excited to share what I’ve learned and hope it’s useful to you! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#value-of-testing"&gt;
  &lt;/a&gt;
  Value of Testing
&lt;/h3&gt;

&lt;p&gt;The act of writing test is talked about so much I won’t even bother to go into it, but using the tests themselves is another story. The sheer amount of confidence I gained when I saw our tests suite is ASTRONOMICAL! The tests suite gave me the confidence to do whatever the fuck I wanted to the code without fear of breaking any already implemented functionality when I received my first ticket. I would run the tests after every commit, save, or for any changes at all. I mean why wouldn’t I? It’s basically free and takes nearly no time at all! It was pretty empowering, and has only encouraged me to write test for any future functionality that I add to our product.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-your-codebase-for-clues"&gt;
  &lt;/a&gt;
  Use Your Codebase for Clues
&lt;/h3&gt;

&lt;p&gt;Your fellow colleagues want you to succeed and will help you in any way they can, but they won’t be holding your hand every step of the way. The codebase is an extension of your colleagues and you can use their code as clues. Clues for formatting or conventions. You can do a full text scan on the codebase to search for examples of let’s say SQL queries or multi-threading. Look up specific files like controllers or components to make sure you follow certain patterns. If you’re unable to find something you could even ask a colleague to send you examples of let’s say pagination, so that you don’t have to take up more of their time than you have to. And, if you still need further clarification your colleagues will always be there (probably more willing to help now, knowing you’ve tried to figure things out on your own).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dont-trust-your-codebase-blindly"&gt;
  &lt;/a&gt;
  Don't Trust Your Codebase (blindly)
&lt;/h3&gt;

&lt;p&gt;This may seem counterintuitive to our previous point, but I promise it’s not (at least not entirely counterintuitive). I noticed my coding style changing in every class or file I was working on. I was subconsciously trying to keep things consistent with what was already there. This may possibly be a good thing such as file naming conventions, like naming all asynchronous tasks files by appending the word job. But, it may not be the best idea for core engineering practices like the use of global variables or undescriptive function names. Working on some legacy systems you are bound to find some shitty code. The new code was much easier to work in and followed best practices, but I just kept falling into bad habits when I was surrounded by the shitty code. So, no you don’t want to blindly trust your codebase; don’t follow bad practices just to be consistent and don’t be afraid to refactor if it’ll save you time and sanity in the long run.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#beyond-code"&gt;
  &lt;/a&gt;
  Beyond Code
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#communication"&gt;
  &lt;/a&gt;
  Communication
&lt;/h3&gt;

&lt;p&gt;Communication is a vital skill for any occupation, but it seems increasingly more important for software engineering. As software creeps into every industry, collaboration between engineers and other professionals seem to grow at a rapid pace. Truth is, it’s easy to get lost in our world of software engineering and loosely throw out sayings like API as if everyone outside of engineering knows what an API is. We engineers’ need to do better at explaining our own jobs. Make sure our customer support representatives know when or why our site was down for 30 minutes so that they could be do their jobs when they inevitably get flooded by support calls/emails.&lt;/p&gt;

&lt;p&gt;Second, as juniors we could probably do a better job at communicating our technical know-how to other engineers as well. Things like system diagrams, UML, technical documentation, and flow diagrams are things I have practically ignored during my job search and seems like something that’s very easy to gloss over.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#team-rapport-is-really-important"&gt;
  &lt;/a&gt;
  Team Rapport is REALLY Important
&lt;/h3&gt;

&lt;p&gt;I joined a really small company, so I feel like it’s really easy for me to say how important rapport is to the success of my team. But, this advice extends to larger companies and to the interview process as well. While you may be in a 10,000-person company, your team is likely not more than a dozen people. If you’re fortunate enough to actually meet your team during the interview process (not restricted to HR and hiring managers) this is the perfect time to sniff out how you actually fit with these group of people and potentially start building rapport.&lt;/p&gt;

&lt;p&gt;To keep this short and simple, when you have team rapport you actually start to give a shit, and when you give a shit you do some of your best work. Doing your best work, I hope has self-explanatory benefits (like being more likely to be promoted, more likely to improve, and more likely to actually enjoy what you’re doing).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#speak-up-be-candid"&gt;
  &lt;/a&gt;
  Speak Up! Be Candid
&lt;/h3&gt;

&lt;p&gt;I feel like junior engineers tend to believe that our lack of experience somehow makes our input less valuable. After two months of meetings, being probed, and giving input; I believe it’s the contrary. As juniors we might have less input, but it could be more valuable. Having fresh eyes is like a super power, you can give new insights by approaching problems in a different way or even being able to give unbiased opinions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When asked a question, answer it. If a person did not care for your opinion they would not have asked.&lt;/li&gt;
&lt;li&gt;Don’t be afraid to say ‘I don’t know’.&lt;/li&gt;
&lt;li&gt;If you don’t know something, ask. A lot of times companies/teams have their own jargon, and it’s probably a good idea to know what your team is talking about.&lt;/li&gt;
&lt;li&gt;Question everything. Why are certain things done? Do not accept, ‘because it’s always been done this way’.&lt;/li&gt;
&lt;li&gt;Don’t be afraid to ask for help.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ve been in a very fortunate position where my team is not only open to hearing me out, but is actively trying to get my input. It’s only been two months and I have already improved some of our processes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#low-expectations-for-juniors"&gt;
  &lt;/a&gt;
  Low Expectations for Juniors
&lt;/h3&gt;

&lt;p&gt;Expectations for junior software engineers is pretty damn low. This feels almost like a taboo topic to speak about, but I think we can use this to our advantage. Impostor syndrome runs amok in this field, and I am no exception. It felt almost unreal hearing some pretty glowing feedback after my first monthly check in. This led me to have a conversation with another engineer friend at a bigger company to ask about his experience. Funnily enough, he had a similar experience of getting a glowing review and really exceeding expectations. The difference for him was that he was not the only junior hire being at a bigger company and all. In his words, the low expectations are warranted from his observations.&lt;/p&gt;

&lt;p&gt;Being thrown into a large codebase at any level is difficult and generally comes with a significant ramp up time. We can use low expectations to our advantage. Juniors are not expected to immediately start contributing to the codebase, we should take our time to learn as much as we can so that we can get to a point where we can make meaningful contributions as fast as possible. As opposed to trying to jump straight into a codebase and breaking things in an attempt to impress.&lt;/p&gt;

&lt;p&gt;P.S. I am not trying to show off in any way. Impostor syndrome had me expect the worst during my first feedback session and I was just extremely grateful that I was getting consistent feedback at all. Additionally, it took me nearly two years after graduating college before I was even able to get paid to code full time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This post already feels too long so I'm gonna stop here. This is my first post I've ever made so I'm open to some feedback or even suggestions on what to write about next.&lt;/p&gt;

</description>
      <category>startup</category>
      <category>devjournal</category>
      <category>juniors</category>
      <category>career</category>
    </item>
    <item>
      <title>Github pages for your simple web projects</title>
      <author>Akash Kumar Sikarwar</author>
      <pubDate>Mon, 05 Jul 2021 20:35:48 +0000</pubDate>
      <link>https://dev.to/akashkumarsikarwar/github-pages-for-your-simple-web-projects-3m72</link>
      <guid>https://dev.to/akashkumarsikarwar/github-pages-for-your-simple-web-projects-3m72</guid>
      <description>&lt;p&gt;Before you buy a domain or subscribe to a hosting service, you should probably think about if you even need them. Why?, you ask. Then you should not skip this post.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Too many steps&lt;/strong&gt;&lt;br&gt;
What stops most of the people to start their first web project is the hesitation to go through all the steps starting from selecting a hosting service from various choices available, selecting the plan and then go through all the actual hosting steps, which generally never happens smoothly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Costly&lt;/strong&gt;&lt;br&gt;
Then comes the money part which is the second most popular hurdle to have your own website. Buying a domain name, could sometimes be expensive especially for students who need to save money more than anybody. Also, most of the hosting services charge some amount to customers to keep running their business.&lt;/p&gt;

&lt;p&gt;For all the above problems, there is one useful feature of Github yet unknown to many.&lt;/p&gt;

&lt;p&gt;Github Pages allows you to host your simple web project/website directly from your Github respository. It means you can make your website live for the world to see without bearing the hosting pain!&lt;/p&gt;

&lt;p&gt;Note: Github Pages works only for static websites. &lt;/p&gt;

&lt;p&gt;By definition: A static website contains Web pages with fixed content. Each page is coded in HTML and displays the same information to every visitor. These are the most basic type of website and are the easiest to create. Unlike dynamic websites, they do not require any Web programming or database design. A static site can be built by simply creating a few HTML pages and publishing them to a Web server.&lt;/p&gt;

&lt;p&gt;The major examples of static websites are as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;li&gt;Developing Cache&lt;/li&gt;
&lt;li&gt;Website presentation&lt;/li&gt;
&lt;li&gt;Communication cache-scrapping buffer&lt;/li&gt;
&lt;li&gt;Forms&lt;/li&gt;
&lt;li&gt;Newsletter Contents&lt;/li&gt;
&lt;li&gt;Disaster page&lt;/li&gt;
&lt;li&gt;Recovery from disaster status&lt;/li&gt;
&lt;li&gt;Landing page/scales&lt;/li&gt;
&lt;li&gt;Blogs&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more information: &lt;a href="https://pages.github.com/"&gt;https://pages.github.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>hosting</category>
    </item>
    <item>
      <title>'any' vs 'unknown' in TypeScript 👀</title>
      <author>Karishma</author>
      <pubDate>Mon, 05 Jul 2021 19:50:08 +0000</pubDate>
      <link>https://dev.to/karishmashukla/any-vs-unknown-in-typescript-4jo</link>
      <guid>https://dev.to/karishmashukla/any-vs-unknown-in-typescript-4jo</guid>
      <description>&lt;p&gt;When you start learning TypeScript, you will come across two types - &lt;strong&gt;any&lt;/strong&gt; and &lt;strong&gt;unknown.&lt;/strong&gt;&lt;br&gt;
Today, I will try to explain the difference between the two in the simplest way possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;any&lt;/strong&gt; - The any type allows us to assign literally “any” particular value to that variable, simulating what we know as plain JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;unknown&lt;/strong&gt; -  The unknown type is the type-safe counterpart of any. Anything is assignable to unknown, but unknown isn't assignable to anything but itself and any without a type assertion or a control flow based narrowing.&lt;/p&gt;

&lt;p&gt;Errghh... Let's understand with an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userAge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;userAge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is some age&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;userAge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userAge&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And yes, This code works! 🎉 Type of userAge is any so it can be assigned any value - string, number etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userAge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;userAge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is some age&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;userAge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userAge&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The statement age=userAge gives an error. I mean, the type is unknown so what is the problem here? &lt;strong&gt;To assign an unknown value to a value with a fixed type, we have to do some quick type check!&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userAge&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;userAge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This is some age&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;userAge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;userAge&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;userAge&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now this works too! 🎉&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When to use what?&lt;/strong&gt; 🤔&lt;br&gt;
Honestly speaking you shouldn't use either of them. But if you really really have to then &lt;strong&gt;unknown is a better choice&lt;/strong&gt; if you know what you want to do with that value eventually. &lt;br&gt;
I don't recommend using any - it takes away the actual essence of TypeScript!&lt;/p&gt;

&lt;p&gt;I hope you learnt at least something. Also, this was my first ever post on Dev! Thank you for reading :)&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>webdev</category>
      <category>frontend</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Package Flutter Linux App Into AppImage Part 2</title>
      <author>Hosam Hasan</author>
      <pubDate>Mon, 05 Jul 2021 19:30:14 +0000</pubDate>
      <link>https://dev.to/hosamhasan/package-flutter-linux-app-into-appimage-part-2-1c5o</link>
      <guid>https://dev.to/hosamhasan/package-flutter-linux-app-into-appimage-part-2-1c5o</guid>
      <description>&lt;h2&gt;
  &lt;a href="#now-we-are-ready-to-build-our-first-flutter-appimage-app"&gt;
  &lt;/a&gt;
  Now, We are ready to build our first Flutter AppImage app 🚀
&lt;/h2&gt;

&lt;p&gt;Firstly , we will change our working directory to the project directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;flutter_appimage
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#then-follow-these-steps"&gt;
  &lt;/a&gt;
  Then follow these steps:
&lt;/h4&gt;

&lt;p&gt;1- Create folder  &lt;em&gt;&lt;code&gt;AppDir&lt;/code&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;AppDir
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2- Generate the YAML recipe file required to build the AppImage&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;appimage-builder &lt;span class="nt"&gt;--generate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this command will prompt some questions. Here is the final output :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;INFO:Generator:Searching AppDir
? ID &lt;span class="o"&gt;[&lt;/span&gt;Eg: com.example.app]: com.example.flutter_appimage
? Application Name: Flutter AppImage
? Icon: flutter_appimage_icon
? Executable path relative to AppDir &lt;span class="o"&gt;[&lt;/span&gt;usr/bin/app]: flutter_appimage
? Arguments &lt;span class="o"&gt;[&lt;/span&gt;Default: &lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: &lt;span class="nv"&gt;$@&lt;/span&gt;
? Version &lt;span class="o"&gt;[&lt;/span&gt;Eg: 1.0.0]: latest
? Update Information &lt;span class="o"&gt;[&lt;/span&gt;Default: guess]: guess
? Architecture: x86_64
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, you will notice a new file &lt;code&gt;AppImageBuilder.yml&lt;/code&gt;  added to the root directory of our project.&lt;/p&gt;

&lt;p&gt;Wait a second, What the hack this &lt;code&gt;flutter_appimage_icon&lt;/code&gt; comes from 馃檮馃&lt;/p&gt;

&lt;p&gt;Stop rubbing your head. Here is why :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;copy your favorite icon to the root directory and make sure its extension is &lt;code&gt;SVG&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;rename you icon to &lt;code&gt;flutter_appimage_icon.svg&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#now-lets-open-raw-appimagebuilderyml-endraw-and-edit-some-stuff"&gt;
  &lt;/a&gt;
  Now, let's open &lt;code&gt;AppImageBuilder.yml&lt;/code&gt; and edit some stuff:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;add starting script that will delete old &lt;code&gt;AppDir&lt;/code&gt;:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
   &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;rm -rf AppDir | &lt;/span&gt;&lt;span class="no"&gt;true&lt;/span&gt;
   &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;mkdir AppDir&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;add after bundling scripts to add the Flutter App to the bandle
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;AppDir&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;after_bundle&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;cp build/linux/x64/release/bundle/flutter_appimage AppDir&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;cp -r build/linux/x64/release/bundle/lib/. AppDir/lib&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;cp -r build/linux/x64/release/bundle/data AppDir&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;cp flutter_appimage_icon.svg AppDir/usr/share/icons/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;gtk3&lt;/code&gt; required for flutter app also define the repositories  where dependencies  comes from
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="na"&gt;pacman&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;Architecture&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;x86_64&lt;/span&gt;
      &lt;span class="na"&gt;repositories&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;core&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;https://mirror.rackspace.com/archlinux/$repo/os/$arch&lt;/span&gt;
        &lt;span class="na"&gt;extra&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;https://mirror.rackspace.com/archlinux/$repo/os/$arch&lt;/span&gt;
      &lt;span class="na"&gt;include&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;gtk3&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;python&lt;/span&gt; &lt;span class="c1"&gt;# I don't know why we need but build fails without it  &lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;perl&lt;/span&gt; &lt;span class="c1"&gt;# I don't know why we need but build fails without it&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#alright-here-is-the-moment-we-have-been-waiting-for"&gt;
  &lt;/a&gt;
  Alright, Here is the moment we have been waiting for:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;appimage-builder &lt;span class="nt"&gt;--skip-test&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🥁🥁🥁🥁🥁🥁🥁🥁🥁🥁🥁🥁🥁🥁🥁🥁🥁🥁🥁.....................Voila 🥳🥳🥳🥳🥳&lt;/p&gt;

&lt;p&gt;New file added to the root directory &lt;code&gt;Flutter AppImage-latest-x86_64.AppImage&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Flutter Counter App packaged in AppImage.&lt;/p&gt;

&lt;p&gt;But wait a second ...... not again 😫.&lt;/p&gt;

&lt;p&gt;The bundled AppImage file is about 225 MB , your kidding me  😠.&lt;/p&gt;

&lt;p&gt;I know the bundle size needs some optmization , I wil pospone this to part 3. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#references-"&gt;
  &lt;/a&gt;
  References :
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://appimage-builder.readthedocs.io/en/latest/examples/flutter.html"&gt;Flutter Application — appimage-builder 0.8.8 documentation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://flutter.dev/docs/get-started/install/linux"&gt;Linux install - Flutter&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://flutter.dev/docs/deployment/linux"&gt;Build and release a Linux app to the Snap Store - Flutter&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#github-"&gt;
  &lt;/a&gt;
  GitHub :
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/hosamkora/Flutter_AppImage"&gt;GitHub - hosamkora/Flutter_AppImage: Sample app for packaging Flutter Linux app into AppImage using AppImage Builder&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>flutter</category>
      <category>appimage</category>
      <category>linux</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Package Flutter Linux App Into AppImage Part 1</title>
      <author>Hosam Hasan</author>
      <pubDate>Mon, 05 Jul 2021 19:27:13 +0000</pubDate>
      <link>https://dev.to/hosamhasan/package-flutter-linux-app-into-appimage-part-1-2agj</link>
      <guid>https://dev.to/hosamhasan/package-flutter-linux-app-into-appimage-part-1-2agj</guid>
      <description>&lt;p&gt;Flutter is one of the fastest-growing cross-platform UI frameworks with a great and powerful community which has a great part of Flutter success.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zmy6kxJP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.ubuntu.com/v1/29985a98-ubuntu-logo32.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zmy6kxJP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.ubuntu.com/v1/29985a98-ubuntu-logo32.png" title="" alt="assets.ubuntu.com/v1/29985a98-ubuntu-logo32.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lately, Flutter announced desktop support including Linux which got the attention of big corporates like Canonical (Publisher of Ubuntu), and lately announced that they are rebuilding Ubuntu Desktop Installer using Flutter.&lt;/p&gt;

&lt;p&gt;Flutter official docs also have a section on how to build and package Flutter Linux app in Snap (Linux Universal Package Manager) and ship it to Snap Store. &lt;a href="https://flutter.dev/docs/deployment/linux"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So it will be interesting if we tried to package Flutter Apps using another universal package manager which is AppImage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirments-"&gt;
  &lt;/a&gt;
  Requirments :
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Linux OS (I will use Manjaro)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Flutter with Linux config enabled ( assuming you have latest flutter stable version )&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AppImage Tool&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AppImage Builder&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#install-appimage-tool-and-appimage-builder"&gt;
  &lt;/a&gt;
  Install AppImage Tool and AppImage Builder
&lt;/h4&gt;

&lt;p&gt;1- Install required deps&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;pacman &lt;span class="nt"&gt;-Sy&lt;/span&gt; python-pip python-setuptools binutils patchelf desktop-file-utils gdk-pixbuf2 wget fakeroot strace
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2 - Install Apimage Tool&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage &lt;span class="nt"&gt;-O&lt;/span&gt; /usr/local/bin/appimagetool
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo chmod&lt;/span&gt; +x /usr/local/bin/appimagetool
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3 - Install AppImage Builder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;pip3 &lt;span class="nb"&gt;install &lt;/span&gt;appimage-builder
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#create-and-build-flutter-linux-app"&gt;
  &lt;/a&gt;
  Create and build Flutter Linux app
&lt;/h4&gt;

&lt;p&gt;1 - install required deps for building flutter linux app&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;pacman &lt;span class="nt"&gt;-Sy&lt;/span&gt; clang cmake ninja pkgconf gtk3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2 - Enable Flutter linux desktop configuration&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;flutter config &lt;span class="nt"&gt;--enable-linux-desktop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3 -  Create flutter project  &lt;code&gt;flutter_appimage&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;flutter create flutter_appimage
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3 - Build Linux App&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;flutter_appimage &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; flutter build linux&lt;span class="o"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#now-we-are-good-to-go-to-build-the-appimage"&gt;
  &lt;/a&gt;
  Now, We are good to go to build the AppImage 🥳
&lt;/h2&gt;

</description>
      <category>flutter</category>
      <category>appimage</category>
      <category>linux</category>
      <category>opensource</category>
    </item>
    <item>
      <title>7 Use Cases For Website Scraping</title>
      <author>Ander Rodriguez</author>
      <pubDate>Mon, 05 Jul 2021 19:19:40 +0000</pubDate>
      <link>https://dev.to/anderrv/7-use-cases-for-website-scraping-565b</link>
      <guid>https://dev.to/anderrv/7-use-cases-for-website-scraping-565b</guid>
      <description>&lt;p&gt;How can web scraping help your business grow? From market research to machine learning training, extracting knowledge can aid and guide any data-driven decision in any industry sector. You could easily demo this by taking one of these use cases and following it by hand, see that it works. After that, the remaining issue will be how to do that automatically.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-real-estate"&gt;
  &lt;/a&gt;
  1. Real estate
&lt;/h2&gt;

&lt;p&gt;Do you still check every day for newly published houses in your area? Or looking for that bargain?&lt;/p&gt;

&lt;p&gt;By tracking real estate websites, you could get all this curated information on time and without manual daily searches. What’s more, you could track price history per feature or neighborhood by storing this information, giving you invaluable insights.&lt;/p&gt;

&lt;p&gt;But no need to stop there either. Comparing that history to all new properties, you could detect the most cost-effective ones. Or check that some competitor is selling cheaper in a particular block.&lt;/p&gt;

&lt;p&gt;We created a &lt;a href="https://www.zenrows.com/datasets/us-real-estate?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=scraping_use_cases"&gt;Real Estate dataset with 10.000 records in the US&lt;/a&gt;, you can download it for free.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-train-machine-learning-models"&gt;
  &lt;/a&gt;
  2. Train machine learning models
&lt;/h2&gt;

&lt;p&gt;Collect massive amounts of data, either text or images, by scraping topic-related websites. That information might come from scientific papers, newspapers, or social media, whatever fills your needs.&lt;/p&gt;

&lt;p&gt;If your model consists of animal image recognition, you might be interested in getting tons of pictures. You could do that simply by searching on Google images, but you need a bigger scale, which you might get with website scraping. And what’s best: why not tag the pictures for supervised learning? Images usually have labels or captions with descriptive text mentioning the animal.&lt;/p&gt;

&lt;p&gt;You could scale these results to thousands of labeled images from many different sources. But advantages can go even further: a continuous stream of knowledge by recurrently doing this data extraction. Say, visit several nature magazines every week to extract all these pictures and add them to your collection.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-brand-reputation"&gt;
  &lt;/a&gt;
  3. Brand reputation
&lt;/h2&gt;

&lt;p&gt;Related to the previous point, you could monitor your brand or competitors and use sentiment analysis to get what the market is saying about you or them.&lt;/p&gt;

&lt;p&gt;Internally, this might get you complaints that are not reaching Customer Support. Many people complain on Twitter but don’t reach out to you, thus denying you the opportunity to solve their problem and prevent it from happening again.&lt;/p&gt;

&lt;p&gt;Externally, you can detect a problem in a competitor’s product earlier than they do, giving you a huge advantage. You can tackle that customer’s problem with your product or learn from their error before your’s gets affected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-track-and-rank-influencers"&gt;
  &lt;/a&gt;
  4. Track and rank influencers
&lt;/h2&gt;

&lt;p&gt;An important marketing and branding asset nowadays, influencers are getting more attention than ever. Whether you are a brand or an agency, knowing who to contact is crucial.&lt;/p&gt;

&lt;p&gt;Maybe you are targeting Instagram and have a reduced budget, so you cannot pay that notorious influencer who is so fashionable. You can probably use that budget more efficiently if you can segment your target audience and match it with several trendy influencers on that age range or topic.&lt;/p&gt;

&lt;p&gt;Of course, you cannot track thousands of them, and that’s where web scraping comes into play. Getting and storing all that information in an organized way is essential. Then take the best business decision based on the available evidence.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-product-and-price-tracking"&gt;
  &lt;/a&gt;
  5. Product and price tracking
&lt;/h2&gt;

&lt;p&gt;Pricing is always complicated. Even more when it is dynamic, and your competition is doing the same. Then add thousands of items to the mix. There is only one outcome: madness.&lt;/p&gt;

&lt;p&gt;But you can do better. And price monitoring via data automation will help you achieve it.&lt;/p&gt;

&lt;p&gt;Keep an eye on each of your products and its competitors, match them and get invaluable insights. Get notifications when prices change or when competitors add or remove items. Whatever you can do manually can be programmed.&lt;/p&gt;

&lt;p&gt;Discover trends or new product categories as soon as one of your opponents launches them. Get a head start on seasonalities by checking your competition’s history and be the first one to launch swimsuits this year.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-investing"&gt;
  &lt;/a&gt;
  6. Investing
&lt;/h2&gt;

&lt;p&gt;Trends and data are imperative for investors, and there is no easy way to keep track of the whole business from the outside. But gathering the maximum amount of information before a decision can turn the scale.&lt;/p&gt;

&lt;p&gt;If you were to invest in a new sneaker eCommerce, how would you compare the market? No one wants to invest blindly, and data is the proof you need. Collect stocks, mean prices per category, visitors, the average time on page, and many other metrics for your candidate and some established companies. Then match and compare, and only then make an informed decision.&lt;/p&gt;

&lt;p&gt;Are you prospecting and not looking at any company in particular? No problem, you can do the same for your area of expertise and detect the early outlier.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-seo-search-engine-optimization"&gt;
  &lt;/a&gt;
  7. SEO (Search Engine Optimization)
&lt;/h2&gt;

&lt;p&gt;Start a campaign by planning it right from the beginning. Get all the relevant keywords and search terms before paying anything so you can start optimizing beforehand.&lt;/p&gt;

&lt;p&gt;Avoid paying for overcrowded terms and look for less common ones. Maybe it pays off to invest in several less-used words than overpaying for the ones everyone is using. You can also get awareness by checking “Related searches” for the terms you plan to use. You can do this by hand for a few ones, but not when there are dozens or hundreds of items to check and rank. Here is where automation comes in handy. And then the same to analyze results, no way of doing it accurately by hand.&lt;/p&gt;

&lt;p&gt;Want to add competition or foresee new players? Automation is the only way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Every extra piece of data a business can get before the decision-making influences the outcome. Every company can explore data-driven little by little, no need to go all in. But to get there, you need to extract that information, and website scraping is a great way.&lt;/p&gt;

&lt;p&gt;Remember, you can do it manually the first time as a test. If it works and you think it is the way to go, join us for the next step: automation.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>Becoming a Junior++ Developer</title>
      <author>Simon Barker</author>
      <pubDate>Mon, 05 Jul 2021 19:01:52 +0000</pubDate>
      <link>https://dev.to/allthecode/becoming-a-junior-developer-2epa</link>
      <guid>https://dev.to/allthecode/becoming-a-junior-developer-2epa</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6MKgmY6k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rj4ilzp0q79eu2gj55w9.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6MKgmY6k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rj4ilzp0q79eu2gj55w9.jpeg" alt="Person sat on table cross legged with a laptop"&gt;&lt;/a&gt;&lt;br&gt;
When I started in my first dev job I hit on the idea of being a Junior++ developer. It was clear that the expectations on a junior developer were incredibly low and that there was plenty of time and room to explore and develop. I made sure to finish my tickets and get the work I needed to done, but I also did three things to set myself apart as more than a typical junior that I think anyone can do.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-i-made-time-to-work-with-other-juniors"&gt;
  &lt;/a&gt;
  1. I made time to work with other juniors.
&lt;/h3&gt;

&lt;p&gt;Working with senior developers is not uncommon, it's the best way to learn about the code base. But taking time to work with other juniors is a great way to mutually learn on something that you are likely equally lost on.&lt;/p&gt;

&lt;p&gt;Working with a senior can become a very passive experience as they are so far ahead of you that you just sit and learn and absorb. Juniors tend to be ahead in some areas and behind in others, so we would unblock each others thinking at different points but the gap in knowledge was small and so no one felt like they were left out.&lt;/p&gt;

&lt;p&gt;It was a very rewarding and engaging process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-fix-user-pains-that-are-too-small-to-make-it-on-to-the-backlog"&gt;
  &lt;/a&gt;
  2. Fix user pains that are too small to make it on to the backlog
&lt;/h3&gt;

&lt;p&gt;Making time to speak to users directly let me fix a few tiny bug bears for people in the wider business. Things like a list being ordered the wrong way or a form clearing on error are minor enough to never make it to the top of the backlog but can be fixed by pretty much anyone with a spare 15 minutes.&lt;/p&gt;

&lt;p&gt;Fixing these little annoyances shows initiative and also gains you fans in the wider business as you fixed their specific problem. It also gives you great experience working with users and owning a feature (no matter how small) from start to finish.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-do-something-to-save-your-team-or-department-time"&gt;
  &lt;/a&gt;
  3. Do something to save your team or department time
&lt;/h3&gt;

&lt;p&gt;We had an API that caused a number of support tickets per week. This was about 30 minutes of time for devs to fix. Not massive but annoying. The issue lay in the way the API fetched data from the database and an assumption made about the data in the request URL query params.&lt;/p&gt;

&lt;p&gt;I spent five days across two sprints rewriting the logic in that API to fix that assumption and remove those support tickets.&lt;/p&gt;

&lt;p&gt;Fixing this made me realise that the production logging wasn't good enough. So I proposed to my manager that I have a go at making a logging module that could be added to all out APIs and persist logs in one place. She gave me the ok and over 4 weeks, in between main ticket work, I created a Node logger that we could inject into all our APIs.&lt;/p&gt;

&lt;p&gt;I worked with a senior developer on the logger and got it into production within a few days of it being completed.&lt;/p&gt;

&lt;p&gt;Find a small pain point for you team and fix it, they will love you for it.&lt;/p&gt;

&lt;p&gt;These three things combined are a great way to build a good reputation in you team and the business. They also help break up your day a little a give some variety of work that can sometimes be lacking in development roles.&lt;/p&gt;

</description>
      <category>career</category>
      <category>codenewbie</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Towards the Personal Potential of Software</title>
      <author>Jeff Lindsay</author>
      <pubDate>Mon, 05 Jul 2021 18:34:18 +0000</pubDate>
      <link>https://dev.to/progrium/towards-the-personal-potential-of-software-5g5a</link>
      <guid>https://dev.to/progrium/towards-the-personal-potential-of-software-5g5a</guid>
      <description>&lt;p&gt;Hello everybody!&lt;/p&gt;

&lt;p&gt;Since starting work under &lt;a href="http://progrium.com"&gt;Progrium Technology Company&lt;/a&gt;, I've had a single objective: to build a system called Tractor. It's what I've been slowly approaching in my dense 22 year career as an independent programmer. The Tractor System is still hard for me to describe at this stage, but its goal is to make building production-grade personal software systems like building with Legos: fast and fun.&lt;/p&gt;

&lt;p&gt;After a difficult year heads-down in 2020, I started posting here in January with the intention of sharing and officially releasing components I've been working on that are building up to Tractor. Besides warming up for when I'd eventually talk about Tractor, I wanted people to see how I make independently useful building blocks towards an ideal. That's a core part of the Tractor philosophy.&lt;/p&gt;

&lt;p&gt;Let's review what I've shared so far, and then set up what's coming in the next 6 months.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U8r5grIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k38vrxqkzvmr9ek72l3i.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U8r5grIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k38vrxqkzvmr9ek72l3i.gif" alt="MacDriver"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first big release of the year was the &lt;a href="https://github.com/progrium/macdriver"&gt;macdriver&lt;/a&gt; project, which got a significant response on Hacker News. It gives us Objective-C and Apple framework bindings for Go, letting you build simple Apple apps entirely from Go. That wasn't possible before, so it was a little exciting, but it was early. The native Go APIs included for commonly used Foundation and Cocoa classes were far from complete. They could still be used if you knew what you were doing, but with an ideal of total coverage of Apple frameworks, that wouldn't be enough. There were also unresolved issues just deciding how to best manage memory and pointers, which I knew would fall on me to figure out and take some time.&lt;/p&gt;

&lt;p&gt;Luckily I've since gotten a colleague involved in the company, and he's been helping push &lt;a href="https://github.com/progrium/macdriver"&gt;macdriver&lt;/a&gt; towards a real beta. Part of this was made possible by a project I spun out of macdriver and &lt;a href="https://dev.to/progrium/apple-api-schemas-for-code-generation-and-more-1phj"&gt;posted about&lt;/a&gt;, though again in a very early state. That project was &lt;a href="https://github.com/progrium/macschema"&gt;macschema&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With the &lt;a href="https://github.com/progrium/macschema"&gt;macschema&lt;/a&gt; toolchain, you can generate API schemas about any Apple framework, class, function, etc based on their documentation and header declarations. This is useful for us in generating framework bindings in macdriver, but it would be useful for any project doing similar work, such as bindings for other languages. This sort of approach will play a big part in how Tractor will integrate with "whatever we want" down the line. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MUL03ZK6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/plpudhz4v7dponsucy91.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MUL03ZK6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/plpudhz4v7dponsucy91.gif" alt="topframe"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Along the way, I released a few demos for macdriver to make clear the possibilities and provide reference examples. One of them I spun off into a standalone project called &lt;a href="https://github.com/progrium/topframe"&gt;topframe&lt;/a&gt;, which is also serving as a test bed for how we are doing cross-platform support. More on that in a moment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i9aga02O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2xo2fuvpkt30kfsrprr.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i9aga02O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2xo2fuvpkt30kfsrprr.jpeg" alt="Multiplexing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unrelated to macdriver, I released a protocol called &lt;a href="https://github.com/progrium/qmux"&gt;qmux&lt;/a&gt; with &lt;a href="https://dev.to/progrium/the-history-and-future-of-socket-level-multiplexing-1d5n"&gt;a post&lt;/a&gt; explaining why this (but really any) muxing protocol, including and especially QUIC, is such a great primitive for network programming. The project came with two implementations, Go and TypeScript, with more on the way. The post about it was the first explainer article I'd done in a while and people liked it. This was important because the idea behind it was really more valuable than the protocol itself, but regardless we still need implementations of it to exist. To show the idea in action, I built a &lt;a href="https://github.com/progrium/qmux/tree/main/demos/groktunnel"&gt;130 line version of Ngrok&lt;/a&gt;, which turned into &lt;a href="https://dev.to/progrium/building-your-own-ngrok-in-130-lines-2lif"&gt;a great post&lt;/a&gt; walking through how it works. &lt;/p&gt;

&lt;p&gt;That brings us to today, half way through 2021. Let's talk about what's coming.&lt;/p&gt;

&lt;p&gt;More exciting than qmux is what we built on top of it, which is called &lt;em&gt;qtalk&lt;/em&gt;. This is my meticulously designed, re-written-several-times network/IPC programming stack. While not &lt;em&gt;that&lt;/em&gt; different from just JSON-RPC with pluggable codecs, its two unique features are callbacks and streams. Callbacks means its bi-directional, either side can expose or call methods. Just that alone is something rare in existing RPC stacks, but necessary for callbacks. And while streaming RPC is not new, our streams are full virtual connections, so you can stream more RPC results, arbitrary byte streams, or tunnel something else like a database connection. I'll share more about the possibilities when it's released.&lt;/p&gt;

&lt;p&gt;So in the second half of 2021, we'll see qtalk, we'll see a major update to macdriver, and then with those two parts we can release &lt;em&gt;shelldriver&lt;/em&gt;. This is a cross platform API to platform specific resources like windows, dialogs, menus, etc. It's about native GUI shell integration, it's not about having every native UI component. In fact, for app UI it really focuses on windows and webviews, a la Electron. Unlike Electron, it can be used from any language that has a qmux and qtalk implementation. The result should be a simple "Electron but as a library" that you can use from Go and other languages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oj38Q3kl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y7qq2kea7hvdk83ughuk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oj38Q3kl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y7qq2kea7hvdk83ughuk.png" alt="shelldriver"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once shelldriver is out I will be able to finally start talking about the first &lt;em&gt;real&lt;/em&gt; piece of the Tractor system: Tractor Toolkit. I hope to have at least a public demo by the end of the year. The Toolkit is already being shown to friends and sponsors. The work I've shared so far is just the tip of the iceberg.&lt;/p&gt;

&lt;p&gt;Which reminds me ...&lt;/p&gt;

&lt;p&gt;I really, really have to thank my &lt;a href="https://github.com/sponsors/progrium"&gt;sponsors&lt;/a&gt;. As things are ramping up, I'm starting to work with more people and this is all self funded. Not only does sponsorship support all this open source work, but sponsors get early access to Tractor Toolkit &lt;em&gt;and&lt;/em&gt; see more of what I'm up to.&lt;/p&gt;

&lt;p&gt;Also to you, thanks for reading and following along. I'll be back soon with more releases.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For more posts like this sent directly to your inbox and to stay on top of what I'm up to, get on the list at &lt;a href="http://progrium.com"&gt;progrium.com&lt;/a&gt; ✌️&lt;/em&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>devlog</category>
      <category>software</category>
    </item>
  </channel>
</rss>
