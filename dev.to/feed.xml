<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Introduction to AWS CloudFormation 📜</title>
      <author>Anuj Bansal</author>
      <pubDate>Mon, 30 Aug 2021 13:56:09 +0000</pubDate>
      <link>https://dev.to/aws-builders/introduction-to-aws-cloudformation-4po2</link>
      <guid>https://dev.to/aws-builders/introduction-to-aws-cloudformation-4po2</guid>
      <description>&lt;p&gt;Deploying more than just a handful of services on AWS and setting each one up manually can get quite tedious. Having to configure each AWS resource by hand also leaves you at a much higher risk of making errors or introducing inconsistencies.&lt;/p&gt;

&lt;p&gt;Enter AWS CloudFormation.&lt;/p&gt;

&lt;p&gt;CloudFormation is a service that provides an easy way to create and manage a collection of AWS resources in a controlled and predictable way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-aws-cloudformation-work"&gt;
  &lt;/a&gt;
  How does AWS CloudFormation work?
&lt;/h2&gt;

&lt;p&gt;The key concepts in CloudFormation are templates, stacks, and change sets.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Template:&lt;/strong&gt; A template is a description of your infrastructure, written in JSON or YAML, that can be interpreted by CloudFormation.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Stack:&lt;/strong&gt; Infrastructure created by CloudFormation using a template is known as a stack.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Change Set:&lt;/strong&gt; A summary of proposed changes to your stack that will allow you to see how those changes might impact your existing resources before implementing them&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first thing you do is to create a CloudFormation template in JSON or YAML format.&lt;/p&gt;

&lt;p&gt;You then deploy the template using the CloudFormation console, API, or AWS CLI. CloudFormation provisions and configures resources by making calls to the AWS services that are described in your template.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dZbHFsEa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630061730047/_VLhDFzO7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dZbHFsEa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630061730047/_VLhDFzO7.png" alt="Screenshot 2021-08-27 at 4.20.14 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After all the resources have been created, CloudFormation reports that your stack has been created. If stack creation fails, CloudFormation rolls back your changes by deleting the resources that it created.&lt;/p&gt;

&lt;p&gt;To update a stack, create a change set by submitting a modified version of the original stack template, different input parameter values, or both. CloudFormation compares the modified template with the original template and generates a change set. You can then view the changes that will be deployed before you decide to execute the change.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BD_nlTAC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630061748879/gtgSI8Cf8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BD_nlTAC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630061748879/gtgSI8Cf8.png" alt="Screenshot 2021-08-27 at 4.18.09 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#template-basics"&gt;
  &lt;/a&gt;
  Template Basics
&lt;/h2&gt;

&lt;p&gt;The template can consist of the following sections:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Format Version:&lt;/strong&gt; The AWS CloudFormation template version that the template conforms to.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Description:&lt;/strong&gt; A text string that describes the template.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Metadata:&lt;/strong&gt; Arbitrary JSON or YAML objects that provide additional information about the template.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Parameters:&lt;/strong&gt; Values to pass to your template at runtime.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Rules:&lt;/strong&gt; Validates a parameter or a combination of parameters passed to a template during stack creation or stack update.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Mappings:&lt;/strong&gt; A mapping of keys and associated values that you can use to specify conditional parameter values, similar to a lookup table.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Conditions:&lt;/strong&gt; Conditions that control whether certain resources are created or whether certain resource properties are assigned a value during stack creation or update.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Transform:&lt;/strong&gt; Set of macros to process your template. Basically creates a processed version of your template.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Resources:&lt;/strong&gt; AWS resources that you want to include in your stack.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Outputs:&lt;/strong&gt; Declares output values that you can import into other stacks, return in response (to describe stack calls), or view in the console.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is what a basic template looks like 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UPjIFacP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630061768889/EtshsE9jH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UPjIFacP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630061768889/EtshsE9jH.png" alt="Screenshot 2021-08-27 at 10.08.00 AM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's go a bit more in-depth on some of the sections.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;p&gt;Parameters are used to customize a template with values. They give us the flexibility to change settings without having to modify the template code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ku3RgA53--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630061782160/e6Cw6ltIGm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ku3RgA53--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630061782160/e6Cw6ltIGm.png" alt="Screenshot 2021-08-27 at 12.38.02 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;p&gt;This is the bulk of the template. Here is where we define and configure the resources that CloudFormation will manage for us. When defining resources, you need to know about the type and that type’s properties.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---FakJ0Xg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630061816994/T44l8NEDN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---FakJ0Xg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630061816994/T44l8NEDN.png" alt="Screenshot 2021-08-27 at 12.38.59 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#outputs"&gt;
  &lt;/a&gt;
  Outputs
&lt;/h3&gt;

&lt;p&gt;These are like return values for the template. We use them to make it easy to find some of the resources that CloudFormation will create for us.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vpR82UjA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630061829480/EpSSoaMHGp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vpR82UjA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630061829480/EpSSoaMHGp.png" alt="Screenshot 2021-08-27 at 12.39.16 PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intrinsic-functions"&gt;
  &lt;/a&gt;
  Intrinsic Functions
&lt;/h2&gt;

&lt;p&gt;CloudFormation has several intrinsic functions that you can use to refer to other resources and their properties. You can use them to assign values to properties that are not available until runtime.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Fn::Base64&lt;/strong&gt; - returns the Base64 representation of the input string&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fn::Cidr&lt;/strong&gt; - returns an array of CIDR address blocks&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Condition functions&lt;/strong&gt; - Used to conditionally create stack resources. These are Fn::And, Fn::Equals, Fn::If, Fn::Not and Fn::Or.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fn::FindInMap&lt;/strong&gt; - returns the value corresponding to keys in a two-level map that's declared in the Mappings section&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fn::GetAtt&lt;/strong&gt; - returns the value of an attribute from a resource in the template&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fn::GetAZs&lt;/strong&gt; - returns an array that lists Availability Zones for a specified region in alphabetical order&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fn::ImportValue&lt;/strong&gt; - returns the value of an output exported by another stack&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fn::Join&lt;/strong&gt; - appends a set of values into a single value, separated by the specified delimiter&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fn::Select&lt;/strong&gt; - returns a single object from a list of objects by index&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fn::Split&lt;/strong&gt; - split a string into a list of string values using a delimiter&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fn::Sub&lt;/strong&gt; - substitutes variables in an input string with values that you specify&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fn::Transform&lt;/strong&gt; - specifies a macro to perform custom processing on part of a stack template&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Ref&lt;/strong&gt; - returns the value of the specified parameter or resource&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CloudFormation allows you to either use the full function name (Fn::Sub) or the short form (!Sub).&lt;/p&gt;

&lt;p&gt;This is what a sample template would look like with intrinsic functions 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;AWSTemplateFormatVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;2010-09-09'&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Creating&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;an&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;EC2&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;instance&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;using&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;a&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;security&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;group&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;that&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;has&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;already&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;been&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;created&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;or&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;a&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;new&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;security&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;group'&lt;/span&gt;

&lt;span class="na"&gt;Parameters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;ExistingSecurityGroup&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;An existing security group ID (optional).&lt;/span&gt;
    &lt;span class="na"&gt;Default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;NONE&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;String&lt;/span&gt;

&lt;span class="na"&gt;Conditions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;CreateNewSecurityGroup&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Equals&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="nv"&gt;ExistingSecurityGroup&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;NONE&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;Resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;MyInstance&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;AWS::EC2::Instance"&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
      &lt;span class="na"&gt;ImageId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;ami-0ff8a91507f77f867"&lt;/span&gt;
      &lt;span class="na"&gt;SecurityGroups&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!If&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;CreateNewSecurityGroup&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="nv"&gt;NewSecurityGroup&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="nv"&gt;ExistingSecurityGroup&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
            &lt;span class="na"&gt;Tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
              &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Key&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Name&lt;/span&gt;
                &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;${AWS::StackName}-webserver'&lt;/span&gt;

  &lt;span class="na"&gt;NewSecurityGroup&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;AWS::EC2::SecurityGroup"&lt;/span&gt;
    &lt;span class="na"&gt;Condition&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;CreateNewSecurityGroup&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;GroupDescription&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Enable HTTP access via port &lt;/span&gt;&lt;span class="m"&gt;80&lt;/span&gt;
      &lt;span class="na"&gt;SecurityGroupIngress&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;IpProtocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;tcp&lt;/span&gt;
          &lt;span class="na"&gt;FromPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
          &lt;span class="na"&gt;ToPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80&lt;/span&gt;
          &lt;span class="na"&gt;CidrIp&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;0.0.0.0/0&lt;/span&gt;

&lt;span class="na"&gt;Outputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;SecurityGroupId&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;The group ID of the security group used.&lt;/span&gt;
    &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!If&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;CreateNewSecurityGroup&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="nv"&gt;NewSecurityGroup&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="nv"&gt;ExistingSecurityGroup&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;By leveraging an IaC tool such as CloudFormation, you can streamline the AWS deployment process. You can define your resource configurations once, then deploy them as many times as you need. You can manage anything from a single Amazon EC2 instance to a complex multi-tier multi-region application.&lt;/p&gt;

&lt;p&gt;Feel free to reach out to me on &lt;a href="https://twitter.com/anuj_bansal_"&gt;Twitter&lt;/a&gt;! 😊&lt;/p&gt;

</description>
      <category>aws</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Building Zero Trust with an API Gateway and Service Mesh</title>
      <author>Michael Bogan</author>
      <pubDate>Mon, 30 Aug 2021 13:38:04 +0000</pubDate>
      <link>https://dev.to/mbogan/building-zero-trust-with-an-api-gateway-and-service-mesh-35hg</link>
      <guid>https://dev.to/mbogan/building-zero-trust-with-an-api-gateway-and-service-mesh-35hg</guid>
      <description>&lt;p&gt;Building a stellar application that users will love consists of many different decisions, from UI design and color palettes to functionality and feature sets. Writing code that works is a creative process, but it’s only one part of the entire development process. Your app also needs to be secure—not just for the sake of your users, but also for the integrity of your business. Typical security measures when designing your software architecture include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Safe and well-tested authentication and authorization schemes&lt;/li&gt;
&lt;li&gt;The ability to control network traffic through firewalls and port monitoring&lt;/li&gt;
&lt;li&gt;Service and resource isolation, so that one server cannot access another&lt;/li&gt;
&lt;li&gt;Securing connections between services via SSL/HTTPS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Together, these practices form a philosophy known as &lt;a href="https://www.cloudflare.com/learning/security/glossary/what-is-zero-trust/"&gt;Zero Trust&lt;/a&gt;. A Zero Trust architecture is hyper-focused on locking down your application from any and all access. Services are inaccessible to one another by default. Then, over time, and based on need, services are granted access to communicate with one another. In short, services accept outside connections only when it’s necessary. Since the network of your application infrastructure is “closed” by default, this mitigates malicious access and unexpected events. &lt;/p&gt;

&lt;p&gt;In this post, we’ll take a close look at how &lt;a href="https://konghq.com/kong/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;Kong Gateway&lt;/a&gt; and the &lt;a href="https://kuma.io/"&gt;Kuma service mesh&lt;/a&gt; fit into this design.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-you-should-consider-a-zero-trust-design"&gt;
  &lt;/a&gt;
  Why You Should Consider a Zero Trust Design
&lt;/h2&gt;

&lt;p&gt;Zero Trust doesn’t make your infrastructure fool-proof from attack, but it does reduce the attack vectors for outsiders. Whether you’re a massive enterprise company or a small startup, the security considerations are the same. You want your user data to be safe and secure as soon as it goes online.&lt;/p&gt;

&lt;p&gt;Zero Trust architecture requires developers to consider how services interact. For example, let's say Service A handles fetching data and Service B handles requesting data. Service A would need to have a specific endpoint and port open and available for communication with Service B (and only Service B). Zero Trust planning can appear to hinder productivity, even more so if you’re adding a new service or are unfamiliar with the DevOps necessary to grant access.&lt;/p&gt;

&lt;p&gt;However, no matter the perceived hassle of adopting this approach, the advantages far, &lt;em&gt;far _outweigh the time spent planning. It is _impossible&lt;/em&gt; to undo a security incident, and an incident results in reduced user confidence and stress on your teams to address the issue. We often hear stories of hackers gaining access to an outdated and unmanaged service, reaching production systems, or &lt;a href="https://www.zdnet.com/article/financial-apps-leak-425gb-in-company-data-through-open-database/"&gt;misconfigured databases for public access&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-kong-and-kuma-for-a-zero-trust-architecture"&gt;
  &lt;/a&gt;
  Configuring Kong and Kuma for a Zero Trust architecture
&lt;/h2&gt;

&lt;p&gt;If you configured your application as a group of microservices, you might feel a little overwhelmed with adopting network and policy settings consistent with a Zero Trust philosophy. To develop a set of consistent policies, you’ll want to make use of a &lt;a href="https://konghq.com/learning-center/service-mesh/what-is-a-service-mesh/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;service mesh&lt;/a&gt; like Kuma. A service mesh is a system that controls how different services share data. It’s responsible for handling network traffic, network policies, and observability for your microservices.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YLPiZbth--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nb3oxi6dc50fwtjprcfl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YLPiZbth--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nb3oxi6dc50fwtjprcfl.png" alt="kong1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For communicating with the outside world (such as your users), you’ll want to set up an &lt;a href="https://konghq.com/learning-center/api-gateway/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;API gateway&lt;/a&gt; like Kong Gateway. Kong acts as a frontend service provider for access to all of your internal services. Kong routes HTTP requests made to an endpoint to a specific service.  &lt;/p&gt;

&lt;p&gt;Some of the policies and functionality Kong and Kuma support include the following:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#full-traffic-encryption"&gt;
  &lt;/a&gt;
  Full Traffic Encryption
&lt;/h3&gt;

&lt;p&gt;You may know how important &lt;a href="https://en.wikipedia.org/wiki/HTTPS"&gt;HTTPS&lt;/a&gt; is and how it’s an essential step to securing traffic from outside interference. Typically, you would set this up via an SSL certificate. That’s a great first step, but there are plenty of other configurations to bring more protection.&lt;/p&gt;

&lt;p&gt;For example, &lt;a href="https://docs.konghq.com/kubernetes-ingress-controller/1.3.x/guides/configuring-https-redirect/#documentation"&gt;with several lines of YAML&lt;/a&gt;, Kong can force all HTTP traffic to be encrypted as HTTPS. Doing so is important because it protects users from inadvertently making insecure requests. Furthermore, SSL certificates need to be renewed and kept up to date; the average certificate validity ranges from 90 days to a year. Kong also comes with a &lt;a href="https://docs.konghq.com/kubernetes-ingress-controller/1.3.x/guides/cert-manager/"&gt;certificate manager&lt;/a&gt;, which will automatically renew certificates so that they never expire. To go even further, Kong also supports &lt;a href="https://konghq.com/blog/tcp-stream-support-kong/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;encrypting outbound TLS/TCP traffic&lt;/a&gt;. These protocols exist outside the well-known HTTP/S system and are responsible for handling email, file transfers, SSH, and more.&lt;/p&gt;

&lt;p&gt;Kuma, for its part, supports &lt;a href="https://kuma.io/docs/1.2.2/policies/mutual-tls/"&gt;Mutual TLS&lt;/a&gt; (mTLS), a policy that verifies the validity of a service through sharing private keys. mTLS is used to ensure the legitimate identity of users, devices, and servers. Kuma’s documentation on &lt;a href="https://kuma.io/docs/1.2.2/security/certificates/"&gt;securing service communication with Kuma&lt;/a&gt; provides more details on mTLS and other security policies. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#observability-logging-monitoring-and-reporting-on-traffic"&gt;
  &lt;/a&gt;
  Observability: Logging, Monitoring, and Reporting on Traffic
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://konghq.com/blog/observability-kubernetes-kong/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;Observability&lt;/a&gt; is a critical practice. Tracking and visualizing the behaviors of your application can help you get a better understanding of how your application performs in production. In a Zero Trust context, observability is often considered the foundation of services and networks. At a minimum, you would need to make sure that you are collecting traffic logs to verify and test your assumptions about the security of your network. You also need to make sure that the data you collect is stored securely, like any other piece of critical information.&lt;/p&gt;

&lt;p&gt;To help with this, Kong has &lt;a href="https://docs.konghq.com/hub/"&gt;several plugins&lt;/a&gt; that support analytics and monitoring. Many of these come with their own API endpoints, so you can potentially automate their behaviors. &lt;/p&gt;

&lt;p&gt;More specifically, Kuma provides a &lt;a href="https://kuma.io/docs/1.2.3/policies/traffic-log/"&gt;Traffic Log&lt;/a&gt; policy. This policy allows you to define how logs are collected and allows for routing different sources of traffic data to different destinations. You can create a unified data capturing system that’s still flexible enough to accommodate any variances. For example, you might want your internal application logs to be aggregated in some long-term archive database while your external user-facing service logs are sent to somewhere more readily accessible. &lt;/p&gt;

&lt;p&gt;Zero Trust architecture isn’t about mandating a “one-size-fits-all” approach to security solutions. Rather, it starts with simple statements. For example, “All traffic should be captured, stored, and able to be queried.” It then implements solutions that meet those needs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#service-isolation"&gt;
  &lt;/a&gt;
  Service Isolation
&lt;/h3&gt;

&lt;p&gt;Isolating services from one another is critical for ensuring that security issues on one server do not affect another. You may have some degree of isolation in place, even if you call it redundancy. If a service fails and cannot handle requests, you should have a plan for either queuing work or load balancing to another healthy service. Service isolation in a Zero Trust architecture is not quite the same concept. Still, the important takeaway is that a security incident on one machine should not grant access to any other machine on your network. Think of it like the flu: You want to isolate the compromised service to mitigate the spread.&lt;/p&gt;

&lt;p&gt;Kong's &lt;a href="https://konghq.com/solutions/kubernetes-ingress/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;Ingress controller&lt;/a&gt; provides granular traffic management. It builds on top of Kubernetes’ own Ingress policies, with a lot of syntactic sugar and automation provided. It requires little to no extra configuration. Similarly, Kuma offers &lt;a href="https://kuma.io/docs/1.2.3/policies/traffic-permissions/"&gt;Traffic Permissions&lt;/a&gt; policies to define permissible traffic. You can think of this as a souped-up firewall: You can restrict traffic sources that come from a specific service (based on its name, not IP address or ports). You can also route requests to specific endpoint destinations. Any unknown source or destination is not allowed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-more-information"&gt;
  &lt;/a&gt;
  Getting more information
&lt;/h2&gt;

&lt;p&gt;Building a Zero Trust architecture is about more than just protecting yourself; it’s also a global issue. For example, in the United States, &lt;a href="https://konghq.com/blog/americas-cybersecurity-mandate-zero-trust-architecture/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;the Cybersecurity mandate&lt;/a&gt; is a recent executive order that advocates for increased infrastructure protection from hacking and other unauthorized access. It shows that the philosophies of a Zero Trust design extend far beyond tech and have broader concerns. &lt;/p&gt;

&lt;p&gt;If you’d like to try out Kong and Kuma, they have a &lt;a href="https://docs.konghq.com/getting-started-guide/2.4.x/overview/"&gt;quick start guide&lt;/a&gt;. For more on Zero Trust architecture, check out Kong's recent virtual event, &lt;a href="https://konghq.com/events/destination-zero-trust/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;Destination: Zero-Trust&lt;/a&gt;. The sessions are online for your convenient viewing.&lt;/p&gt;

&lt;p&gt;You may also be interested in learning how Kong and Kuma can help you remove complex and expensive load balancers with their new &lt;a href="https://thenewstack.io/zerolb-a-new-decentralized-pattern-for-load-balancing"&gt;ZeroLB architecture pattern&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>security</category>
      <category>webdev</category>
      <category>architecture</category>
    </item>
    <item>
      <title>See how Java frameworks like Spring work with your code</title>
      <author>Kevin Gilpin</author>
      <pubDate>Mon, 30 Aug 2021 13:01:29 +0000</pubDate>
      <link>https://dev.to/appland/see-how-java-frameworks-like-spring-work-with-your-code-1acl</link>
      <guid>https://dev.to/appland/see-how-java-frameworks-like-spring-work-with-your-code-1acl</guid>
      <description>&lt;p&gt;Spring + Your Code = ❤️ Most of the time!&lt;/p&gt;

&lt;p&gt;The one criticism that sticks to the Spring framework (and other big web frameworks, to be honest), is that Spring does so much for you it can be hard to understand what's really going on. Sometimes, we can just follow the doc and tutorials and watch the magic happen. But sometimes, we really need &lt;br&gt;
to understand how Spring, and related packages, actually work. And even more importantly, how they work with &lt;strong&gt;our code&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You're already familiar with using debuggers - and Java has an excellent debugger compared to some other languages. When you use a debugger, you take an "inside-out" approach to troubleshooting. You choose a point in your code where you want to start, and then you can explore outwards from&lt;br&gt;
there. But while you can get a lot of detailed information that way, it's hard to build an understanding of what's going on overall in the codebase.&lt;/p&gt;

&lt;p&gt;To build that kind of high-level understanding, you need more of an "outside-in" approach. Here's a cookbook you can follow to see how your code works with Spring and other Java libraries, starting from the widest scope and narrowing in on details. To do that, I will show you how to use an open&lt;br&gt;
source tool called &lt;a href="https://appland.com/products/appmap"&gt;AppMap&lt;/a&gt;. AppMap records the runtime behavior of your code and stores it as JSON files called AppMaps. Then you can open AppMaps files in your code editor (&lt;a href="https://marketplace.visualstudio.com/items?itemName=appland.appmap"&gt;VSCode&lt;/a&gt; or &lt;a href="https://plugins.jetbrains.com/plugin/16701-appmap"&gt;IntelliJ&lt;/a&gt;) and view and search dependency maps and execution trace diagrams. &lt;/p&gt;

&lt;p&gt;Here's how you use it:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-install-the-appmapjava-agent"&gt;
  &lt;/a&gt;
  1. Install the appmap-java agent
&lt;/h3&gt;

&lt;p&gt;Follow the &lt;a href="https://appland.com/docs/quickstart/"&gt;quick start guide for VSCode or IntelliJ&lt;/a&gt;. &lt;br&gt;
Here's a quick checklist:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add the appmap Java agent to your Maven or Gradle configuration - or just download the JAR file from &lt;a href="https://github.com/applandinc/appmap-java/releases"&gt;https://github.com/applandinc/appmap-java/releases&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Create &lt;code&gt;appmap.yml&lt;/code&gt; and configure your project name and primary package names.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#2-add-additional-package-names-such-as-raw-orgspringframeworkweb-endraw-to-raw-appmapyml-endraw-"&gt;
  &lt;/a&gt;
  2. Add additional package names, such as &lt;code&gt;org.springframework.web&lt;/code&gt;, to &lt;code&gt;appmap.yml&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Here's an example &lt;a href="https://github.com/land-of-apps/spring-petclinic/tree/appmap-e2e/appmap.yml"&gt;&lt;code&gt;appmap.yml&lt;/code&gt;&lt;/a&gt; that I use with my fork of the Spring Pet Clinic.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-record-the-appmap-of-code-execution"&gt;
  &lt;/a&gt;
  3. Record the AppMap of code execution
&lt;/h3&gt;

&lt;p&gt;You have several choices of how to record your code:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Option 1: Test case(s)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you have JUnit or TestNG tests that cover your app, run your tests with the AppMap Gradle or Maven integration enabled.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Option 2: Record user actions and API requests&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you don't have a test that does what you need, you can use your app and get an AppMap of all the actions you perform. This is called “remote recording,” and to use it, you run your web server with the flag &lt;code&gt;-javaagent:appmap.jar&lt;/code&gt;. If your app is an API server, run the server and send API requests. Either way, you'll get an &lt;code&gt;appmap.json&lt;/code&gt; file when the server exits.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Option 3: Record the entire server run, including startup and shutdown&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The AppMap Java agent supports a System property &lt;code&gt;appmap.recording.auto&lt;/code&gt;. If you set this property&lt;br&gt;
to true, the server process is recorded from start to finish, and the results are written to a timestamped &lt;code&gt;appmap.json&lt;/code&gt; file when the process exits.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#4-view-the-diagrams"&gt;
  &lt;/a&gt;
  4. View the diagrams
&lt;/h3&gt;

&lt;p&gt;The AppMap extension for VSCode and IntelliJ enables you to open any &lt;code&gt;*.appmap.json&lt;/code&gt; and explore it visually. To open AppMaps in the code editor, open the AppMaps “Tool Window” (IntelliJ) or AppMaps sidebar (VSCode). &lt;/p&gt;

&lt;p&gt;Click on an AppMap to view the Dependency map in your code editor window. From there, you can search,&lt;br&gt;
browse, and drill down into the Trace view.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#demo-pet-clinic-orgspringframeworkweb"&gt;
  &lt;/a&gt;
  Demo - Pet Clinic + org.springframework.web
&lt;/h2&gt;

&lt;p&gt;As I indicated above, AppMap is a flexible tool and there are several ways to use it. Let’s start with a fairly simple, but quite useful and illustrative example.&lt;/p&gt;

&lt;p&gt;A Spring Controller is a pretty complex mixture of methods and annotations - even the simple Pet Clinic “OwnerController” has at least 5 different annotations used in multiple different ways. Code like this is powerful, but unlike “normal” procedural or functional code, there’s no information in the code about how the functions are used, how they fit together, or which ones are used in a particular use case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nd"&gt;@Controller&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OwnerController&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="no"&gt;VIEWS_OWNER_CREATE_OR_UPDATE_FORM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"owners/createOrUpdateOwnerForm"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;OwnerRepository&lt;/span&gt; &lt;span class="n"&gt;owners&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;VisitRepository&lt;/span&gt; &lt;span class="n"&gt;visits&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;OwnerController&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;OwnerRepository&lt;/span&gt; &lt;span class="n"&gt;clinicService&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;VisitRepository&lt;/span&gt; &lt;span class="n"&gt;visits&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;owners&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clinicService&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;visits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;visits&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@InitBinder&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setAllowedFields&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;WebDataBinder&lt;/span&gt; &lt;span class="n"&gt;dataBinder&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;dataBinder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setDisallowedFields&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@GetMapping&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/owners/new"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;initCreationForm&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Owner&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Owner&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"owner"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;VIEWS_OWNER_CREATE_OR_UPDATE_FORM&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@PostMapping&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/owners/new"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;processCreationForm&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@Valid&lt;/span&gt; &lt;span class="nc"&gt;Owner&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;BindingResult&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasErrors&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;VIEWS_OWNER_CREATE_OR_UPDATE_FORM&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;owners&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;save&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"redirect:/owners/"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getId&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@GetMapping&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/owners/find"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;initFindForm&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"owner"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Owner&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"owners/findOwners"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;org.springframework.web&lt;/code&gt; is a package that orchestrates these snippets of Java code based on their annotations. &lt;/p&gt;

&lt;p&gt;To get a map of how an Owner request works, I’ll run the Pet Clinic with remote recording enabled, then use the AppMap extension for IntelliJ to create a recording of a web request. This is a bit easier to watch than to explain, so check out the video above for a walkthrough of all this.&lt;/p&gt;

&lt;p&gt;To recreate this yourself, check out the appmap-e2e branch of&lt;br&gt;
&lt;a href="https://github.com/land-of-apps/spring-petclinic"&gt;https://github.com/land-of-apps/spring-petclinic&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To record and review your own runtime code maps directly in your code editor, download the free AppMap plugin for JetBrains here: &lt;a href="https://plugins.jetbrains.com/plugin/16701-appmap"&gt;https://plugins.jetbrains.com/plugin/16701-appmap&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>debugging</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Everything you need to know about OpenTelemetry Java auto-instrumentation 👨🏽‍💻</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Mon, 30 Aug 2021 12:59:24 +0000</pubDate>
      <link>https://dev.to/signoz/everything-you-need-to-know-about-opentelemetry-java-auto-instrumentation-39d9</link>
      <guid>https://dev.to/signoz/everything-you-need-to-know-about-opentelemetry-java-auto-instrumentation-39d9</guid>
      <description>&lt;p&gt;OpenTelemetry auto instrumentation libraries are the best option for someone who doesn't want to modify their application code for generating telemetry data(logs, metrics, and traces). In this article, let's see what options does OpenTelemetry provides for auto-instrumenting your Java apps.&lt;/p&gt;

&lt;p&gt;OpenTelemetry is a set of tools, APIs, and SDKs which enables you to create and manage the telemetry data for your services and applications.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;What is instrumentation?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Instrumentation means the ability to measure the performance and to diagnose errors in your application code. Instrumenting a piece of software means generating relevant data like logs, metrics, and traces to gauge the software's performance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-is-opentelemetry-java-auto-instrumentation"&gt;
  &lt;/a&gt;
  What is OpenTelemetry Java auto instrumentation?
&lt;/h2&gt;

&lt;p&gt;OpenTelemetry provides three repositories to instrument applications. The &lt;a href="https://github.com/open-telemetry/opentelemetry-java-instrumentation" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;opentelemetry-java-instrumentation&lt;/b&gt;&lt;/a&gt; repo contains the code for auto-instrumentation of Java applications.&lt;/p&gt;

&lt;p&gt;The other two repos are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/open-telemetry/opentelemetry-java" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;opentelemetry-java&lt;/b&gt;&lt;/a&gt; - contains components for manual instrumentation as well as the API and SDK.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/open-telemetry/opentelemetry-java-contrib" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;opentelemetry-java-contrib&lt;/b&gt;&lt;/a&gt; - contains libraries for standalone utilities which don't fit the scope of the other two projects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The OpenTelemetry Java auto instrumentation repo provides a Java JAR agent that can be downloaded and attached to Java 8+ applications. The agent recognizes popular libraries and frameworks and injects bytecode dynamically to instrument the code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#steps-to-autoinstrument-your-java-application"&gt;
  &lt;/a&gt;
  Steps to auto-instrument your Java application
&lt;/h2&gt;

&lt;p&gt;The auto-instrumentation of Java applications by OpenTelemetry is achieved with the help of Java agents. The JVM provides a standard way for modifying code at runtime by using a java agent. Java agents come as part of the Java instrumentation API. It basically allows you to modify code at runtime without touching your code.&lt;/p&gt;

&lt;p&gt;You can attach the Java agent to your application through your terminal (-javaagent). Java agents are fundamentally java classes following certain conventions. When the agents are attached to the application at runtime, JVM makes sure to execute it to modify what it specifies.&lt;/p&gt;

&lt;p&gt;Now that you know how Java agent works, let's see how to use the Java agent provided by OpenTelemetry for auto-instrumentation.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download the &lt;a href="https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent-all.jar"&gt;latest Java Jar agent&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Prepare environment variables needed for the Java agent. The common ones include a service name for the service being monitored, traces and metrics exporter format specifier, and an endpoint for collecting the captured data.&lt;/li&gt;
&lt;li&gt;You need to export the captured data to an endpoint. You can use a full-stack open-source observability tool like &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt; as a backend to capture the data.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Examples of some of the environment variables to take care of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;OTEL_TRACES_EXPORTER=otlp
OTEL_METRICS_EXPORTER=none
OTEL_EXPORTER_OTLP_ENDPOINT=&amp;lt;IP of SigNoz Backend&amp;gt;:4317
OTEL_RESOURCE_ATTRIBUTES="service.name=SERVICE_NAME"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Along with these environment variables, you need to attached the Java JAR agent downloaded. If you're running the app from your terminal, you can use the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;java -javaagent:/path/to/opentelemetry-javaagent-all.jar -jar target/*.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The path needs to be replaced with the address of the location where you have downloaded the saved the Java agent file. So the final command from terminal will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;OTEL_METRICS_EXPORTER=none
OTEL_EXPORTER_OTLP_ENDPOINT="http://&amp;lt;IP of SigNoz&amp;gt;:4317"
OTEL_RESOURCE_ATTRIBUTES=service.name=javaApp
java -javaagent:/Users/Downloads/to/opentelemetry-javaagent-all.jar -jar target/*.jar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to read how to auto-instrument a sample Spring Boot application, and get the data reported with SigNoz, check out this article 👇 &lt;br&gt;&lt;br&gt;
&lt;a href="https://signoz.io/blog/opentelemetry-spring-boot/"&gt;Monitor your Spring Boot application with OpenTelemetry and SigNoz&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>monitoring</category>
      <category>java</category>
      <category>opentelemetry</category>
    </item>
    <item>
      <title>
What is Event loop in JavaScript?</title>
      <author>Shamanta Sristy</author>
      <pubDate>Mon, 30 Aug 2021 12:55:30 +0000</pubDate>
      <link>https://dev.to/shamantasristy/what-is-event-loop-in-javascript-34a5</link>
      <guid>https://dev.to/shamantasristy/what-is-event-loop-in-javascript-34a5</guid>
      <description>&lt;p&gt;Let's look into JavaScript Event loop from a different angle. Sounds interesting, right? It is! So, sit tight and let's dive into it!&lt;br&gt;
The concept of event loop is very simple. But in order to understand that,  first we need to be clear about some concepts related to event loop. &lt;/p&gt;

&lt;p&gt;Inside &lt;strong&gt;Browser&lt;/strong&gt;, there is a Javascript engine (we are considering &lt;strong&gt;V8&lt;/strong&gt; for chrome.) and an environment to run javascript properly. Javascript engine has two parts, &lt;strong&gt;Heap&lt;/strong&gt; and &lt;strong&gt;Call Stack&lt;/strong&gt;. And the engine has some assistant named &lt;strong&gt;Web APIs&lt;/strong&gt; and &lt;strong&gt;Callback Queue&lt;/strong&gt;. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#heaps"&gt;
  &lt;/a&gt;
  Heaps
&lt;/h2&gt;

&lt;p&gt;It's an unstructured memory block. Our code's memory allocation happens here. As a programmer we don't have to worry much about heaps.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#call-stack"&gt;
  &lt;/a&gt;
  Call Stack
&lt;/h2&gt;

&lt;p&gt;We can consider Call Stack as a kitchen where all our code executed or cooked. Whenever we  try to run a piece of code, it goes to call stack first and then executed. It works in &lt;strong&gt;LIFO&lt;/strong&gt; style. That is &lt;strong&gt;L&lt;/strong&gt;ast  &lt;strong&gt;I&lt;/strong&gt;n &lt;strong&gt;F&lt;/strong&gt;irst &lt;strong&gt;O&lt;/strong&gt;ut.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const lunch = () =&amp;gt; console.log("It's time for lunch!");

const dinner = () =&amp;gt; console.log("It's time for dinner!");

const breakfast = () =&amp;gt; {
  console.log("Time to breakfast!");
  setTimeout(lunch, 3000);
  dinner();
};

breakfast();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we run the code above, The global execution context &lt;em&gt;main()&lt;/em&gt; runs on the browser, and JS engine will start to read the code from the first line and will search for tasks. On the last line, one function is called. So, this function will go to the Call Stack and will execute the tasks. First it will print &lt;em&gt;Time to breakfast!&lt;/em&gt; , then goes to the next line, where we have an asynchronous block of code.&lt;br&gt;
 As we know, JavaScript is synchronous and single-threaded language, this asynchronous block of code goes to the call stack and suddenly pops out. Here JS engine takes help from it's assistant, &lt;strong&gt;Web API&lt;/strong&gt;. The setTimeout() waits on the Web API and after it's timer runs out (In this case,  3 seconds), After 3 seconds the callback function goes to the &lt;strong&gt;Callback Queue&lt;/strong&gt; and waits for Call stack to be free. By this time, Call stack runs the other piece of codes. Prints&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;It's time for dinner!&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#web-apis"&gt;
  &lt;/a&gt;
  Web APIs
&lt;/h2&gt;

&lt;p&gt;Web API works as JS engines assistant. When JS engine have to deal with asynchronous code, it takes the help of Web API. Web API handles the blocking behavior of JavaScript code. &lt;br&gt;
In this case, from our code above, we can say Web API will take the callback function&lt;br&gt;
&lt;br&gt;
  &lt;code&gt;setTimeout(lunch, 3000);&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
  , run it's timer,  and pass it to Callback Queue after 3 seconds.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#callback-queue"&gt;
  &lt;/a&gt;
  Callback Queue
&lt;/h2&gt;

&lt;p&gt;It's a guard who monitors the stack of asynchronous callback functions who just completed the task of waiting and passed the gate of Web API. Callback Queue works using &lt;strong&gt;FIFO&lt;/strong&gt; (&lt;strong&gt;F&lt;/strong&gt;irst  &lt;strong&gt;I&lt;/strong&gt;n &lt;strong&gt;F&lt;/strong&gt;irst &lt;strong&gt;O&lt;/strong&gt;ut ) method. And now, they waits here to go back to Call Stack. But how will Call Stack know that there's some callback functions waiting in Callback Queue? &lt;br&gt;
Here comes the star, &lt;strong&gt;Event Loop&lt;/strong&gt;!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#event-loop"&gt;
  &lt;/a&gt;
  Event Loop
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Event loop&lt;/em&gt; is just a guardian who keeps a good &lt;strong&gt;communication&lt;/strong&gt; with &lt;strong&gt;Call Stack&lt;/strong&gt; and &lt;strong&gt;Callback Queue&lt;/strong&gt;. It checks if the call stack is free, then lets know the callback queue. Then Callback queue passes the callback function to Call stack to be executed. When all the callback functions are executed, the call stack is out and global execution context is free. &lt;/p&gt;

&lt;p&gt;See! it was not complex at all! 😄&lt;br&gt;
Thanks for reading.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>eventloop</category>
    </item>
    <item>
      <title>MarkdownX Editor 🎉</title>
      <author>Bobby Iliev</author>
      <pubDate>Mon, 30 Aug 2021 12:41:35 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/markdownx-editor-27bg</link>
      <guid>https://dev.to/bobbyiliev/markdownx-editor-27bg</guid>
      <description>&lt;p&gt;Our MarkdownX editor is officially live and available on the DevDojo. It's also available for you to use in your &lt;a href="https://tallstack.dev"&gt;TallStack&lt;/a&gt; applications 🍻.&lt;/p&gt;

&lt;p&gt;If this is your first time hearing about the &lt;a href="https://devdojo.com/markdownx"&gt;MarkdownX Editor&lt;/a&gt;, continue reading to learn more about how it can make writing in Markdown easier and more fun than ever before.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;MarkdownX become top 4 product of the day on &lt;a href="https://www.producthunt.com/posts/markdownx"&gt;ProductHunt&lt;/a&gt; 😻&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-is-markdownx"&gt;
  &lt;/a&gt;
  What is MarkdownX
&lt;/h2&gt;

&lt;p&gt;MarkdownX is like a &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; element with super powers ✨. It is a text editor with a beautiful interface that makes it easy for users to write in Markdown. The component has a pretty sweet dropdown that allows you to easily upload images, add lists, embed videos, and so much more!&lt;/p&gt;

&lt;p&gt;A month ago we posted a tweet about a new editor we were building and it got a pretty huge response with nearly 500 likes and 50 retweets 🤯&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/tnylea/status/1419059051430825986"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hzj9Pr_5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/tweet-md.png" alt="tweet-md.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That set things in motion and we started working on a version that could be used with any &lt;a href="https://tallstack.dev"&gt;Tallstack&lt;/a&gt; application. 🙌.&lt;/p&gt;

&lt;p&gt;I'll show you the steps below 👇 on how to install this in a new Tallstack app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-create-a-new-laravel-app"&gt;
  &lt;/a&gt;
  1. 🔧 Create a new Laravel App
&lt;/h2&gt;

&lt;p&gt;The first step is creating a new Laravel application. If you already have an existing Tallstack application, you can skip ahead to step 3.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;laravel new mdx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, I'll install a new laravel app in a folder named &lt;code&gt;mdx&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, go into that directory &lt;code&gt;cd mdx&lt;/code&gt;, and we can move to the next step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-installing-the-tallstack-preset"&gt;
  &lt;/a&gt;
  2. 🔩 Installing the Tallstack Pre-set
&lt;/h2&gt;

&lt;p&gt;The Tallstack preset allows us to add &lt;a href="https://tailwindcss.com"&gt;TailwindCSS&lt;/a&gt;, &lt;a href="https://alpinejs.dev"&gt;Alpine&lt;/a&gt;, and &lt;a href="https://laravel-livewire.com"&gt;Livewire&lt;/a&gt; in our new application with a few simple commands. You can find that preset here: &lt;a href="https://github.com/laravel-frontend-presets/tall"&gt;https://github.com/laravel-frontend-presets/tall&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's run those commands in our new application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;composer require livewire/livewire laravel-frontend-presets/tall
php artisan ui tall
npm install
npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After we have run those commands, we should be able to visit our new site:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ewME1utI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/tallstack-preset.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ewME1utI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/tallstack-preset.png" alt="tallstack-preset.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And we should have a new &lt;a href="https://tallstack.dev"&gt;Tallstack&lt;/a&gt; application in front of us.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;note: if you get an application key error, you may also need to run &lt;code&gt;php artisan key:generate&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next up, we'll be moving the component files to our new application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-adding-the-markdownx-editor"&gt;
  &lt;/a&gt;
  3. 🧩 Adding the MarkdownX Editor
&lt;/h2&gt;

&lt;p&gt;Adding this component to your project is literally as easy as &lt;strong&gt;1&lt;/strong&gt;, &lt;strong&gt;2&lt;/strong&gt;, &lt;strong&gt;3&lt;/strong&gt;. Because that's how many files the MarkdownX editor includes. Here are those files:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Controller&lt;/strong&gt; - app/Http/Livewire/MarkdownX.php&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;View&lt;/strong&gt; - resources/views/livewire/markdown-x.blade.php&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Config&lt;/strong&gt; - config/markdownx.php&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After downloading a copy of the latest MarkdownX editor, you will need to move those files 👆 to their appropriate location in your Laravel application.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: make sure to run &lt;code&gt;php artisan storage:link&lt;/code&gt;, if you want to test out image uploading. The MarkdownX storage uses the local public disk by default, but you can change this in the config 😉.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After you have done this, we are now ready to test it out in our new application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-out-the-editor"&gt;
  &lt;/a&gt;
  🧪 Test out the Editor
&lt;/h2&gt;

&lt;p&gt;To test the editor in our new app we are going to modify the welcome page located at &lt;code&gt;resources/views/welcome.blade.php&lt;/code&gt;, to look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@extends('layouts.app')

@section('content')
    &amp;lt;livewire:markdown-x /&amp;gt;
@endsection
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we visit our application homepage we'll see the editor in front of us 🤘.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VIt-owNB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/markdown-x-editor.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VIt-owNB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.devdojo.com/images/august2021/markdown-x-editor.png" alt="markdown-x-editor.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can now drag-and-drop images, add videos, lists, and a bunch of other cool things that make writing more fun and easier than ever before.&lt;/p&gt;

&lt;p&gt;Be sure to check out the official new landing page for &lt;a href="https://devdojo.com/markdownx"&gt;MarkdownX here&lt;/a&gt; and the &lt;a href="https://devdojo.com/markdownx"&gt;documentation here&lt;/a&gt;. I hope you find this component useful in your next project, and I hope you continue to build awesome stuff 🤘. See you soon!&lt;/p&gt;

</description>
      <category>markdown</category>
      <category>laravel</category>
      <category>tailwindcss</category>
      <category>saas</category>
    </item>
    <item>
      <title>Upload files to the blockchain (Part 1)</title>
      <author>Allan Dorr</author>
      <pubDate>Mon, 30 Aug 2021 12:29:08 +0000</pubDate>
      <link>https://dev.to/aldorr/upload-files-to-the-blockchain-part-1-3m9h</link>
      <guid>https://dev.to/aldorr/upload-files-to-the-blockchain-part-1-3m9h</guid>
      <description>&lt;h2&gt;
  &lt;a href="#now-lets-get-our-hands-dirty"&gt;
  &lt;/a&gt;
  Now let's get our hands dirty
&lt;/h2&gt;

&lt;p&gt;So hopefully I've &lt;em&gt;piqued&lt;/em&gt; your curiosity and you want to jump in now and join in on the fun.&lt;br&gt;
If you want to read my wee rambling on the build-up, see previous post: &lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/aldorr" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2HIYzIAt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--K4FnXGTn--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/136227/423a8ef7-7e02-4d06-a6a5-52e546e7cbc7.jpeg" alt="aldorr"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aldorr/filesharing-with-web3-storage-and-vue-js-1m2c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Filesharing with web3.storage and Vue.js (Part 0)&lt;/h2&gt;
      &lt;h3&gt;Allan Dorr ・ Aug 25 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#vue&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#database&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#reconsidering"&gt;
  &lt;/a&gt;
  Reconsidering
&lt;/h3&gt;

&lt;p&gt;After fooling around and installing, then following some tutorials and attempting to build the first steps in the project, I figured I don't actually want to make a WeTransfer clone, but something any developer can take, add their own Token and fire up their own WT-Like-Thing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#identifying-more-issues"&gt;
  &lt;/a&gt;
  Identifying more issues
&lt;/h3&gt;

&lt;p&gt;I've followed the tutorials and have had to update few things to get it working with Vue 3. These, I will cover when I stumble across them again.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-installing"&gt;
  &lt;/a&gt;
  Step 1: Installing
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create a web3.storage &lt;a href="https://web3.storage/login"&gt;account&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Get an &lt;a href="https://web3.storage/account"&gt;API Token&lt;/a&gt; (Including 1TB of storage!)&lt;/li&gt;
&lt;li&gt;If you haven't done so already, install:
Node version 14 or higher and NPM version 7 just to be sure we're on the same page. I use nvm, so it's pretty easy to switch between versions.&lt;/li&gt;
&lt;li&gt;Create your Application (I used the vue-cli to generate one: i.e. &lt;code&gt;vue create web3-storage-tutorial&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Install web3storage &lt;code&gt;npm install web3.storage&lt;/code&gt; in the app's folder&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step-2-javascript"&gt;
  &lt;/a&gt;
  Step 2: Javascript
&lt;/h2&gt;

&lt;p&gt;Create &lt;code&gt;web3storage.js&lt;/code&gt;&lt;br&gt;
I put this in a &lt;code&gt;/src/utils&lt;/code&gt; folder. Maybe I'll have more utils and put them in there. I don't know. It seems like a good enough place for now.&lt;/p&gt;

&lt;p&gt;Add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// web3storage.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Web3Storage&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;web3.storage/dist/bundle.esm.min.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is to import web3storage for Vue 3. We have to use the pre-compiled bundle, otherwise Webpack will go all wonky and we'll get stupid errors. We don't want stupid errors. They lead us nowhere.&lt;/p&gt;

&lt;p&gt;Now we want to export our code for use in our Vue modules, so we add this under the import:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// web3storage.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Code for accessing and uploading files goes here.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now inside of this &lt;code&gt;export&lt;/code&gt; we're going to create a couple of functions that will make sense in a minute:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;getAccessToken&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VUE_APP_WEB3STORAGE_TOKEN&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="nx"&gt;makeStorageClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Web3Storage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAccessToken&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;getAccessToken&lt;/code&gt; will read our web3storage access token from the .env.local file. For Vue 3 we have to prepend it with &lt;code&gt;VUE_APP_&lt;/code&gt; in order for it to load. &lt;em&gt;We'll need this token in a minute.&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;makeStorageClient&lt;/code&gt; we will need whenever we want to upload something. Again, we'll be needing this soon.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#soon-is-now-so-we-need-these-functions"&gt;
  &lt;/a&gt;
  Soon is now, so we need these functions
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;I'm going to already let you know that I basically copied these functions from the web3.storage docs. I'm hoping we can use them as a basis, though, and make something great!&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;      &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;storeWithProgress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myFileList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;myFileList&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="c1"&gt;// show the root cid as soon as it's ready&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onRootCidReady&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cid&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;uploading files with cid:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// when each chunk is stored,&lt;/span&gt;
        &lt;span class="c1"&gt;//update the percentage complete and display&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;totalSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;uploaded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onStoredChunk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;uploaded&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;totalSize&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;uploaded&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Uploading... &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;pct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;% complete`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;// TODO: can we get this to show in browser &amp;amp; update?&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// makeStorageClient returns&lt;/span&gt;
        &lt;span class="c1"&gt;// an authorized Web3.Storage client instance&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeStorageClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;// client.put will invoke our callbacks during the upload&lt;/span&gt;
        &lt;span class="c1"&gt;// and return the root cid when the upload completes&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;onRootCidReady&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;onStoredChunk&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is the method that uploads our files and then responds to our app with the CID. we need this to display, and make a link. Right? Yes, we want to be able to send the link to cool people...&lt;/p&gt;

&lt;p&gt;And, here's our JavaScript so far:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-3-feed-it-something"&gt;
  &lt;/a&gt;
  Step 3: Feed it something
&lt;/h2&gt;

&lt;p&gt;Now this beast we are creating wants to be fed. It likes files, so we want to give it some files.&lt;br&gt;
And then finally we want to tell it what to do with said files (Upload them and make them available to the world… to the solar sisters, to the universal compadre-hood of file-sharing-ness. Hello aliens. See our files!)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--otbbhIHF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1543722530-d2c3201371e7%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D1200%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--otbbhIHF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1543722530-d2c3201371e7%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D1200%26q%3D80" alt="Andromeda Galaxy - Photo by Guillermo Ferla"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Right.&lt;/p&gt;

&lt;p&gt;We scaffolded out our project with vue-cli, so it has almost everything I need. Oh shoot. Except some CSS. I'm going to go ahead and some &lt;a href="https://duckduckgo.com/?t=ffab&amp;amp;q=css+reset"&gt;CSS reset&lt;/a&gt; and my CSS Framework I'm using.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#some-css-first"&gt;
  &lt;/a&gt;
  Some CSS first
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  npm &lt;span class="nb"&gt;install &lt;/span&gt;equal-vue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And we update our main.js file to look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Regular app stuff&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createApp&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// Equal stuff here&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Equal&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;equal-vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;equal-vue/dist/style.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Notice **.use(Equal)**&lt;/span&gt;
&lt;span class="nx"&gt;createApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#now-some-vue"&gt;
  &lt;/a&gt;
  Now some Vue
&lt;/h3&gt;

&lt;p&gt;We want to render a button that triggers a file input. Probably we should be able to select multiple files and upload them all to the same cab.&lt;/p&gt;

&lt;p&gt;In the pre-scaffolded Vue project there is the &lt;code&gt;App.vue&lt;/code&gt; which loads &lt;code&gt;HelloWorld.vue.&lt;/code&gt;&lt;br&gt;
Let's rename this to &lt;code&gt;UploadFiles.vue&lt;/code&gt;&lt;br&gt;
Remember: in App.vue we should change &lt;code&gt;HelloWorld&lt;/code&gt; to &lt;code&gt;UploadFiles&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In UploadFiles, we basically want a button that opens a file dialog when we click it, then we want to return the file and then upload it with another button.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#basic-html-structure"&gt;
  &lt;/a&gt;
  Basic html structure
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;preview&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"file_select"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&amp;lt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"upload"&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The button opens the file dialog. Then when we have some files selected, the upload button appears, and some image previews show up.&lt;/p&gt;

&lt;p&gt;Let's try to get it to look something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--znZEh62R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9epwvrum0jmmsc0hrloc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--znZEh62R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9epwvrum0jmmsc0hrloc.png" alt="Image of Today's Final Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The following is what I turned UploadFiles.vue into:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!--UploadFiles.vue--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hero"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;{{ title }}&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;it-divider&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;it-alert&lt;/span&gt;
      &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"my_thumbs!==null"&lt;/span&gt;
      &lt;span class="na"&gt;iconbox&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"primary"&lt;/span&gt;
      &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"Chosen Files"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;it-avatar-group&lt;/span&gt; &lt;span class="na"&gt;square&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;it-badge&lt;/span&gt; &lt;span class="na"&gt;position=&lt;/span&gt;&lt;span class="s"&gt;"top-left"&lt;/span&gt;
          &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"primary"&lt;/span&gt;
          &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"(thumb, i) in my_thumbs"&lt;/span&gt;
          &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"i"&lt;/span&gt;
          &lt;span class="na"&gt;:value=&lt;/span&gt;&lt;span class="s"&gt;"i+1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;it-avatar&lt;/span&gt;
            &lt;span class="na"&gt;square&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"upload_preview"&lt;/span&gt;
            &lt;span class="na"&gt;:src=&lt;/span&gt;&lt;span class="s"&gt;"thumb"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/it-badge&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/it-avatar-group&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/it-alert&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;it-divider&lt;/span&gt;  &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"my_thumbs!==null"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;it-button-group&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;it-button&lt;/span&gt;
        &lt;span class="na"&gt;:type=&lt;/span&gt;&lt;span class="s"&gt;"my_thumbs!==null?'warning':'black'"&lt;/span&gt;
        &lt;span class="na"&gt;icon=&lt;/span&gt;&lt;span class="s"&gt;"note_add"&lt;/span&gt;
        &lt;span class="na"&gt;outlined&lt;/span&gt;
        &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"onPickFile"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          Select {{my_thumbs!==null?'New ':''}}Files
      &lt;span class="nt"&gt;&amp;lt;/it-button&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;it-button&lt;/span&gt;
        &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"danger"&lt;/span&gt;
        &lt;span class="na"&gt;icon=&lt;/span&gt;&lt;span class="s"&gt;"upload"&lt;/span&gt;
        &lt;span class="na"&gt;outlined&lt;/span&gt;
        &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"onUploadFile"&lt;/span&gt;
        &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"my_thumbs!==null"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          Upload Files
      &lt;span class="nt"&gt;&amp;lt;/it-button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/it-button-group&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
      &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt;
      &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"display: none"&lt;/span&gt;
      &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;"fileInput"&lt;/span&gt;
      &lt;span class="na"&gt;accept=&lt;/span&gt;&lt;span class="s"&gt;"image/*"&lt;/span&gt;
      &lt;span class="na"&gt;multiple&lt;/span&gt;
      &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;change=&lt;/span&gt;&lt;span class="s"&gt;"onFilePicked"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;it-divider&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"cid!==null"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;it-badge&lt;/span&gt;
      &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Copy link"&lt;/span&gt;
      &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"success"&lt;/span&gt;
      &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"cid!==null"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;it-button&lt;/span&gt;
        &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"onCopyLink(cidLink(cid))"&lt;/span&gt;
        &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;"cid_link"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          {{cidLink(cid)}}
      &lt;span class="nt"&gt;&amp;lt;/it-button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/it-badge&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;web3storage&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../utils/web3storage&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;UploadFile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;RevealCID&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;filelist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;my_thumbs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
      &lt;span class="na"&gt;cid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;onPickFile&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$refs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fileInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;onFilePicked&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filelist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;File&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createObjectURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;my_thumbs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;onUploadFile&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;web3storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storeWithProgress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filelist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;my_thumbs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filelist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;cidLink&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;cid&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.ipfs.dweb.link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;onCopyLink&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;textToCopy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clipboard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;textToCopy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;textToCopy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;copied!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hpP-pm8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1593996705986-bf25089a82c5%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D240%26h%3D240%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hpP-pm8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1593996705986-bf25089a82c5%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D240%26h%3D240%26q%3D80" alt="Explosion - Photo by Kayla Farmer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A lot of code, but I think it's pretty straight forward, but I'll go through some of it, just for clarification.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#html-amp-equal-css"&gt;
  &lt;/a&gt;
  HTML &amp;amp; Equal CSS
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;it-&lt;/code&gt; tags are from the Equal CSS framework. We make an alert box with the images in it, which only shows up if we have images. The &lt;code&gt;v-if="my_thumbs!==null"&lt;/code&gt; ensures this.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;my_thumbs&lt;/code&gt; is set to &lt;code&gt;null&lt;/code&gt; at first, until you've triggered the &lt;code&gt;onFilePicked&lt;/code&gt; method.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We loop through the thumbnails with &lt;code&gt;v-for&lt;/code&gt;, and beneath that we have our &lt;em&gt;file select&lt;/em&gt; &lt;code&gt;button&lt;/code&gt;, and our &lt;em&gt;upload&lt;/em&gt; &lt;code&gt;button&lt;/code&gt;   (which also &lt;em&gt;only&lt;/em&gt; shows when &lt;code&gt;my_thumbs!==null&lt;/code&gt;).&lt;br&gt;
Then, our markup has an invisible input file selector, we need that to be able to display our system's file select dialog. (If there's another way to do this, I'd love to hear from you.)&lt;br&gt;
Finally, we have a place to display our &lt;em&gt;link&lt;/em&gt; to the files when we get the CID back. And it is &lt;em&gt;clickable&lt;/em&gt; to copy. Yay!&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#javascript-data-amp-methods"&gt;
  &lt;/a&gt;
  Javascript Data &amp;amp; Methods
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;data&lt;/code&gt; is pretty clear... &lt;code&gt;cid&lt;/code&gt; should hold a returned cid value once our files have been queued.&lt;/p&gt;

&lt;p&gt;Then, I will run through our methods:&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#onpickfile"&gt;
  &lt;/a&gt;
  onPickFile
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;onPickFile&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$refs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fileInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This just issues a click command on our file input, to trigger a file dialog.&lt;/p&gt;


&lt;h5&gt;
  &lt;a href="#onfilepicked"&gt;
  &lt;/a&gt;
  onFilePicked
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;onFilePicked&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filelist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;File&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createObjectURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;my_thumbs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This happens when the file input changes. This does two main things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Our &lt;code&gt;filelist&lt;/code&gt; is updated to contain the files we selected&lt;/li&gt;
&lt;li&gt;Our &lt;code&gt;my_thumbs&lt;/code&gt; contains a bunch of file blobs that we can then display in the upload preview.&lt;/li&gt;
&lt;/ol&gt;


&lt;h5&gt;
  &lt;a href="#onuploadfile"&gt;
  &lt;/a&gt;
  onUploadFile
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;onUploadFile&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;web3storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storeWithProgress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filelist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;my_thumbs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filelist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is our simple upload method. It sets the cid to what we get returned when we call our &lt;code&gt;storeWithProgress&lt;/code&gt; method from before. That method, we send our filelist.&lt;/p&gt;

&lt;p&gt;Finally we set our &lt;code&gt;my_thumbs&lt;/code&gt; and &lt;code&gt;filelist&lt;/code&gt; to null, so our state resets.&lt;/p&gt;


&lt;h5&gt;
  &lt;a href="#our-returned-data-and-copying-links"&gt;
  &lt;/a&gt;
  Our returned data and copying links
&lt;/h5&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="nx"&gt;cidLink&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;cid&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.ipfs.dweb.link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;onCopyLink&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;textToCopy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clipboard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;textToCopy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;textToCopy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;copied!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;cidLink&lt;/code&gt; just returns the URL that a specific CID would have.&lt;br&gt;
&lt;code&gt;onCopyLink&lt;/code&gt; takes a some text (we are sending it one of these &lt;code&gt;cidLink&lt;/code&gt;s), and copies it to the clipboard... &lt;em&gt;assuming our super-modern browser supports such shenanigans&lt;/em&gt;.&lt;/p&gt;



&lt;p&gt;I didn't do much css here today, besides the components I took from Equal. Of course, we'd want to do some more awesome stuff with that. For example, I added my own &lt;code&gt;main.css&lt;/code&gt; file to add custom styles to center and pretty things up a bit.&lt;/p&gt;

&lt;p&gt;If you'd like for me to cover more CSS, please comment.&lt;/p&gt;

&lt;p&gt;For now, though, (in case you were following along and want to know how I made it look like that) here's a gist of my &lt;code&gt;main.css&lt;/code&gt;:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h3&gt;

&lt;p&gt;Tune in next time for these exciting topics:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go back and return upload status and CID to interface.

&lt;ul&gt;
&lt;li&gt;Realized we didn't get this to work yet!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;List already uploaded files.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TpQ1wFHI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bbpcaxxvtqkxwg12h4ef.png" alt="File List Drawer"&gt;
&lt;/li&gt;
&lt;li&gt;Create/save/retrieve shortened links.
___&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;File uploaded with App to web3.storage:&lt;br&gt;
&lt;a href="https://bafybeida4yahentkyih6v6k5o2hwm2agxrhm25ysjslxrm5xoqwem4lfi4.ipfs.dweb.link/Sunset@Achterwasser.jpg"&gt;Sunset@Achterwasser - File uploaded with App&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TdTXkkm_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2e1zdgiu0tin4jkuv4j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TdTXkkm_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2e1zdgiu0tin4jkuv4j.jpg" alt="Sunset@Achterwasser - File uploaded with App"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;aldorr&lt;/p&gt;

</description>
      <category>vue</category>
      <category>database</category>
      <category>tutorial</category>
      <category>blockchain</category>
    </item>
    <item>
      <title>🍪Cookies and Cookie Tracking Explained</title>
      <author>Hargunbeer Singh</author>
      <pubDate>Mon, 30 Aug 2021 12:28:51 +0000</pubDate>
      <link>https://dev.to/hamiecod/cookies-and-cookie-tracking-explained-11co</link>
      <guid>https://dev.to/hamiecod/cookies-and-cookie-tracking-explained-11co</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;A cookie is a small piece of information stored in the client's computer by a particular website via a web browser. They are used to personalize a user's experience on the particular website. It usually contains the user's preferences and inputs. A user can customize their web browser to accept, reject or delete cookies. Cookies can be modified at the server level by using the &lt;code&gt;Set-Cookie&lt;/code&gt; HTTP header. It can be modified at the client level by using &lt;code&gt;document.cookie&lt;/code&gt; in JavaScript.&lt;br&gt;&lt;br&gt;&lt;br&gt;
Cookies are shared to the server on consequent HTTP request. When you perform a HTTP GET request, the server returns you the webpage(HTML, CSS and JavaScript) along with some cookies which would be populated with data as you surf the specific web page. When you form another HTTP request to the server, the cookies which were populated with your data(preferences) are sent to the server. Thats how cookies help in storing the user's preferences. Cookies transactions take place between the user and the server using the &lt;code&gt;Set-Cookie&lt;/code&gt; header.&lt;br&gt;&lt;br&gt;&lt;br&gt;
There are two types of cookies - First Party Cookies and Third Party Cookies. First Party cookies, as the name says, are the cookies used by the website you are surfing to improve user experience. Third Party cookies are the cookies which are used by third-party services to improve the user experience, these are mostly advert companies, which improve user experience, like Google Ads which suggests you proper websites in its search ranking.&lt;br&gt;&lt;br&gt;&lt;br&gt;
Cookies are not stored as code on the user's machine, it is rather stored as simple files, which cannot be executed. Stored cookies cannot even manipulate the elements of your screen, it can't even access your mic or webcam. The only worry about cookies is thier system of allowing data(preferences) to be sent to the server without anybody noticing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;When you turn on the dark mode on YouTube, it would be stored in the cookies and would be sent back via a POST request as soon as you change the color mode. After that when you perform a consequent GET request to the YouTube server, it would return you the YouTube web page and the cookies populated with your preferences, this improves user experience as the user does not need to change the color mode on consequent visits to the particular website.&lt;/li&gt;
&lt;li&gt;When you log into a website on a device, an encrypted unique token is stored in the cookie which keeps you logged in the website everytime you open the website.&lt;/li&gt;
&lt;li&gt;Cookies are used to store the items in the shopping cart in an ecommerce website, they improve user experience as when you visit the website consequent times, you would not need to re-fill your cart with the items you had selected in the last session.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#web-security"&gt;
  &lt;/a&gt;
  Web Security
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You(as a developer) should never store sensitive information, like login information, in cookies as a hacker can perform XSS attacks or Session hijacking at1tacks to retrieve the cookies, which would cause loss of privacy of the sensitive information.&lt;/li&gt;
&lt;li&gt;If a hacker steals your cookie on a specific website via some attack(like XSS), the attacked can use your cookie to pretend to be you on that specific website and he might do harm to your privacy.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cookie-tracking"&gt;
  &lt;/a&gt;
  Cookie Tracking
&lt;/h2&gt;

&lt;p&gt;Cookie tracking is performed by third-party cookies usually, tracking cookies are used by third-parties to monitor the user's Web surfing habits and use the data for marketing purposes, like Google and Facebook ads. These types of cookies are generally considered as an invasion of privacy. When third-party ads are placed on a website, the third-party ad providers are also storing the user's data in cookies and then using the data for marketing and advertising purposes. For example: Big Tech giants, like google and facebook, store your data via cookies through ads as you surf the internet and then use that data to show you related advertisments, thus increasing their profits. Because of t4e privacy invasion of the users due to cookies, the EU(European Union) introduced the cookie law. The cookie law states that the websites need to ask for the user's permission to use cookies and give them a chance to opt out, thats why most of the websites ask for the user's permission before storing cookies.&lt;br&gt;&lt;br&gt;&lt;br&gt;
In very rare cases, some ads might also access your camera if you allow to, or access it directly if you have allowed the main website to access your webcam. The advertising companies would then capture your facial expressions while watching a video add and determine whether you were happy or sad while watching it and then use the data for marketing. This can happen in very rare cases, research on this type of technology is being done at MIT Media Labs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#personal-opinion"&gt;
  &lt;/a&gt;
  Personal Opinion
&lt;/h2&gt;

&lt;p&gt;Users should be given the right to opt in for first-party cookies and just opt out for the third-party ones, but this gets very complex(from a developer perspective) and also it is very difficult to present to the user.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>devops</category>
      <category>security</category>
    </item>
    <item>
      <title>IAM Identities: Users, User Groups and IAM Roles</title>
      <author>Neha Soni</author>
      <pubDate>Mon, 30 Aug 2021 12:25:27 +0000</pubDate>
      <link>https://dev.to/nehasoni__/iam-identities-users-user-groups-and-iam-roles-2fpl</link>
      <guid>https://dev.to/nehasoni__/iam-identities-users-user-groups-and-iam-roles-2fpl</guid>
      <description>&lt;p&gt;Amazon Web Services(AWS) is a secure cloud services platform that offers a broad set of cloud-based products. It provides high-level security to data at a low cost to its users.  There are many types of security services in AWS but Identity and Access Management(IAM) is one of the most widely used. So in this blog post, we will learn about IAM and also learn how to create IAM users, groups, and roles.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-iam"&gt;
  &lt;/a&gt;
  🤔What is IAM?
&lt;/h1&gt;

&lt;p&gt;IAM stands for Identity and Access Management. It enables you to manage access to AWS services and resources in a very secure manner. It is used to set users, permissions, and roles. With the help of the IAM service, an organization can create multiple users, each with its own credentials and the user is only able to access the services that are assigned to him/her. IAM is a feature of your AWS account offered at no additional charge.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-do-we-need-iam"&gt;
  &lt;/a&gt;
  🤔Why do we need IAM?
&lt;/h1&gt;

&lt;p&gt;By default, the &lt;strong&gt;&lt;em&gt;root account&lt;/em&gt;&lt;/strong&gt; user has access to all resources for all AWS services. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;⏩ Now what is a root user or account, how it is different from IAM users?&lt;/em&gt;&lt;br&gt;
A root account is an account through which you have signed up providing your card and billing details. IAM user accounts are user accounts that you can create for individual services offered by AWS.&lt;/p&gt;

&lt;p&gt;Assume that you are the head of an organization and there is a team of 10 persons in your organization that work on some projects and deploying them in AWS.&lt;br&gt;
You obviously don't want to give your root account credentials to your developers or DevOps and ask them to deploy apps. So, the main purpose of IAM is to manage AWS user identities. IAM is used to control who is authentication(signed in) and authorized(has permission) to use resources and services.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#iam-identities"&gt;
  &lt;/a&gt;
  🤔 IAM Identities
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yW2dMFxZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630320031268/3ymow64Aq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yW2dMFxZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630320031268/3ymow64Aq.png" alt="iam.png"&gt;&lt;/a&gt;&lt;br&gt;
An IAM identity represents a user, user groups and roles, and can be authenticated and then authorized to perform actions in AWS. IAM identity can be associated with one or more policies. &lt;br&gt;
&lt;strong&gt;🧐Policies&lt;/strong&gt; is an object that, when associated with a user or user groups or roles, defines their permissions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#iam-users"&gt;
  &lt;/a&gt;
  🧐 IAM Users
&lt;/h3&gt;

&lt;p&gt;AWS &lt;strong&gt;IAM User&lt;/strong&gt; is an entity that you create in the AWS account to represent the person that uses it to interact with AWS. It allows the account holder (user) to execute certain tasks in AWS. A user is made up of a name, password for the AWS Management Console and access keys to use with the API or CLI.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OQOcaaXN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630318788849/SgjoETBOKr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OQOcaaXN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630318788849/SgjoETBOKr.png" alt="iam.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#iam-user-groups"&gt;
  &lt;/a&gt;
  🧐 IAM User groups
&lt;/h3&gt;

&lt;p&gt;The User group is a collection of IAM users. It let you to assign permissions for multiple users, which can make it easier to manage the permissions for those users. So, the users that require the same permissions can be grouped together. A user group can contain many users, and these users can also belong to multiple user groups. Changes made to a group are reflected to all users within that group.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CBPVVnJT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630318303567/dCnO3QmP5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CBPVVnJT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630318303567/dCnO3QmP5.png" alt="iam.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#iam-roles"&gt;
  &lt;/a&gt;
  🧐 IAM Roles
&lt;/h3&gt;

&lt;p&gt;"An IAM role is an IAM identity that you can create in your account that has specific permissions." It is not uniquely associated with a single person; it can be used by anyone who needs it. A role does not have any security credential l, i.e., username password or security key. It can be used to grant access to the AWS resources, services IAM users, third parties, federated Users etc. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-create-an-iam-user"&gt;
  &lt;/a&gt;
  🤔How to create an IAM user?
&lt;/h1&gt;

&lt;p&gt;You can create one or more IAM users in your AWS account. Follow these simple steps to create an IAM user:&lt;br&gt;
&lt;strong&gt;Step 1:-&lt;/strong&gt; Open your favorite browser and navigate to  &lt;a href="https://signin.aws.amazon.com/signin?redirect_uri=https%3A%2F%2Fconsole.aws.amazon.com%2Fconsole%2Fhome%3Ffromtb%3Dtrue%26hashArgs%3D%2523%26isauthcode%3Dtrue%26state%3DhashArgsFromTB_us-east-1_1b391b7f6d9cf9e6&amp;amp;client_id=arn%3Aaws%3Asignin%3A%3A%3Aconsole%2Fcanvas&amp;amp;forceMobileApp=0&amp;amp;code_challenge=4l699bA88crZPtDoeVzZoath4mZalJH56qsW_ijTYJM&amp;amp;code_challenge_method=SHA-256"&gt;AWS Login Page&lt;/a&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9mdx9Z0q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628857642583/FoH5PxkAN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9mdx9Z0q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628857642583/FoH5PxkAN.png" alt="Screenshot (416).png"&gt;&lt;/a&gt;&lt;br&gt;
Then enter in your password and click submit. You have now successfully signed in to the AWS Management Console.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:-&lt;/strong&gt; In the search bar type IAM and click on IAM(Manage access to AWS resources) to navigate to IAM Dashboard.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H7EEgJeT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628857590280/Bn5-o0945.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H7EEgJeT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628857590280/Bn5-o0945.png" alt="Screenshot (417).png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Step 3:-&lt;/strong&gt; On the left side of the page, you should see an option called &lt;strong&gt;Users&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ym5Ftnda--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628857432286/oPdCLB9pC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ym5Ftnda--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628857432286/oPdCLB9pC.png" alt="Screenshot (418).png"&gt;&lt;/a&gt;&lt;br&gt;
Click on that option, and you will be taken to the Users Page.&lt;br&gt;
&lt;strong&gt;Step 4:-&lt;/strong&gt; Click on Add user button to create a user.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q_RzDAKe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628857334053/14-8fU6J2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q_RzDAKe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628857334053/14-8fU6J2.png" alt="Screenshot (419).png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Step 5:-&lt;/strong&gt; Enter a username that can be used to log in later.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Access type&lt;/strong&gt;&lt;br&gt;
When creating a user, you must choose between the following access types:&lt;br&gt;
&lt;strong&gt;a.) Programmatic access:&lt;/strong&gt; If the IAM user needs to make API calls, use the AWS CLI or the Tools for Windows PowerShell then choose Programmatic access.&lt;br&gt;
&lt;strong&gt;b.) AWS Management Console access:&lt;/strong&gt;  If the user needs to access the AWS Management Console, create a password for the use.&lt;br&gt;
&lt;em&gt;For now I will go with the second option i.e., AWS Management Console access&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Console Password&lt;/strong&gt;&lt;br&gt;
For Console password, choose one of the following:&lt;br&gt;
&lt;strong&gt;Autogenerated password:-&lt;/strong&gt; Each user will get the autogenerated password that meets the account password policy.&lt;br&gt;
&lt;strong&gt;Custom password:-&lt;/strong&gt; Each user will get the password you type in the textbox. Make sure your password meets the password policy.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Require password reset:-&lt;/strong&gt; By using this option users are forced to change their password the first time they sign in. It is not mandatory to use this option but recommended one for best practices.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ooFLUuxQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628857220360/Bv_Job52L.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ooFLUuxQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628857220360/Bv_Job52L.png" alt="Screenshot (420).png"&gt;&lt;/a&gt;&lt;br&gt;
After completing all the required steps click on the &lt;strong&gt;Next: Permissions&lt;/strong&gt; button.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Step 6:-&lt;/strong&gt; Now you need to set permissions for your users. Choose one of the following three options:&lt;br&gt;
&lt;strong&gt;a.) Add user to the group:-&lt;/strong&gt; If you have created any group and you want to add your user to the specific group you can choose this option. You can select one or more existing groups.&lt;br&gt;
&lt;em&gt;If you don't know how to create the group don't worry I will discuss it later.&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;b.) Copy permissions from existing user:-&lt;/strong&gt; Choose this option to copy all the existing permissions boundaries and policies from an existing user to the new user.&lt;br&gt;
&lt;strong&gt;c.) Attach existing policies directly:-&lt;/strong&gt; AWS has a list of a large number of policies. Select the policies that you want to attach to the new users. You can also create your own custom policy.&lt;br&gt;
 &lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_create-console.html#access_policies_create-start"&gt;Click here to know how to create custom policies&lt;/a&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zo0SQkYT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628857039620/9uGkbkX2Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zo0SQkYT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628857039620/9uGkbkX2Q.png" alt="Screenshot (421).png"&gt;&lt;/a&gt;&lt;br&gt;
For now, I am going to use the third option i.e Attach existing policies directly.&lt;br&gt;
After setting the permissions click on the &lt;strong&gt;Next: Tags&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 7:-&lt;/strong&gt; Tags come in handy when we need to find a certain person in a huge group. This is a totally optional step you can skip it if you want.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KdeAWJRo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628856685659/2hSZ4-Z1J.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KdeAWJRo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628856685659/2hSZ4-Z1J.png" alt="Screenshot (422).png"&gt;&lt;/a&gt;&lt;br&gt;
Now, Click on the &lt;strong&gt;Next: Review&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 8:-&lt;/strong&gt; On this page you will see all of the choices you made up to this point. &lt;br&gt;
After reviewing all the options click on the &lt;strong&gt;Create User&lt;/strong&gt; button.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G6YllZBJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628856379202/Rlb2x-VLK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G6YllZBJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628856379202/Rlb2x-VLK.png" alt="Screenshot (423).png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Congratulations you have created an IAM user. To save the access keys, choose Download .csv and then save the file to a safe location.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wJaelNlk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628856197765/fpksutlkt.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wJaelNlk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628856197765/fpksutlkt.jpeg" alt="Screenshot (424)_LI.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-login-as-an-iam-user"&gt;
  &lt;/a&gt;
  How to Login as an IAM user?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Step 1:-&lt;/strong&gt; Copy the link and use it to login in an incognito mode as an IAM User.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jk3T-n1y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630224758755/YQ8p9F-fs.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jk3T-n1y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630224758755/YQ8p9F-fs.jpeg" alt="iam usr.jpeg"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Step 2:-&lt;/strong&gt; Enter the username and password and click sign in.&lt;br&gt;
And you can see that you can access EC2 as you've provided the permission while creating that user.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#iam-user-groups"&gt;
  &lt;/a&gt;
  🤔IAM User Groups
&lt;/h1&gt;

&lt;p&gt;We've discussed what is an IAM User and how to create an IAM User. Let's learn how to create IAM user groups and how to add users to groups.&lt;br&gt;
&lt;strong&gt;Step 1:-&lt;/strong&gt; Open your favorite browser and navigate to  &lt;a href="https://signin.aws.amazon.com/signin?redirect_uri=https%3A%2F%2Fconsole.aws.amazon.com%2Fconsole%2Fhome%3Ffromtb%3Dtrue%26hashArgs%3D%2523%26isauthcode%3Dtrue%26state%3DhashArgsFromTB_us-east-1_1b391b7f6d9cf9e6&amp;amp;client_id=arn%3Aaws%3Asignin%3A%3A%3Aconsole%2Fcanvas&amp;amp;forceMobileApp=0&amp;amp;code_challenge=4l699bA88crZPtDoeVzZoath4mZalJH56qsW_ijTYJM&amp;amp;code_challenge_method=SHA-256"&gt;AWS Login Page&lt;/a&gt; &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9mdx9Z0q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628857642583/FoH5PxkAN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9mdx9Z0q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628857642583/FoH5PxkAN.png" alt="Screenshot (416).png"&gt;&lt;/a&gt;&lt;br&gt;
Then enter in your password and click submit. You have now successfully signed in to the AWS Management Console.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:-&lt;/strong&gt; In the search bar type IAM and click on IAM(Manage access to AWS resources) to navigate to IAM Dashboard.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H7EEgJeT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628857590280/Bn5-o0945.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H7EEgJeT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628857590280/Bn5-o0945.png" alt="Screenshot (417).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:-&lt;/strong&gt; On the left side of the page, you should see an option called &lt;strong&gt;Users groups&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ex9drIXn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630221621587/LL8c63klW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ex9drIXn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630221621587/LL8c63klW.png" alt="Screenshot (450).png"&gt;&lt;/a&gt;&lt;br&gt;
Click on that option, and you will be taken to the Users groups Page&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4:-&lt;/strong&gt; Click on &lt;strong&gt;Create group&lt;/strong&gt; button to create a new group.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2MoyF__h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630222049773/BjG0-F7YI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2MoyF__h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630222049773/BjG0-F7YI.png" alt="Screenshot (451).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5:-&lt;/strong&gt;&lt;br&gt;
⚫ Provide a &lt;strong&gt;Group name&lt;/strong&gt;&lt;br&gt;
⚫ Select the &lt;strong&gt;Users&lt;/strong&gt; who needed to be a part of the group.&lt;br&gt;
⚫ Provide any permissions from existing policies&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7GP8NcXf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630246120089/CylmnAGmC.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7GP8NcXf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630246120089/CylmnAGmC.png" alt="Screenshot (452).png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VeIG9Zs9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630246225376/_r7rAbfs4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VeIG9Zs9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630246225376/_r7rAbfs4.png" alt="Screenshot (453).png"&gt;&lt;/a&gt;&lt;br&gt;
Scroll down and click on &lt;strong&gt;Create group&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Congratulations you have created an IAM User group🤩🤩&lt;/b&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0q8WKCN6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630246457149/Tv9EJNq0y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0q8WKCN6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630246457149/Tv9EJNq0y.png" alt="Screenshot (454).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-create-iam-roles-for-a-service"&gt;
  &lt;/a&gt;
  🤔How to create IAM roles for a service?
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Step 1:-&lt;/strong&gt; Sign in to  &lt;a href="https://signin.aws.amazon.com/signin?redirect_uri=https%3A%2F%2Fconsole.aws.amazon.com%2Fconsole%2Fhome%3Ffromtb%3Dtrue%26hashArgs%3D%2523%26isauthcode%3Dtrue%26state%3DhashArgsFromTB_us-east-1_1b391b7f6d9cf9e6&amp;amp;client_id=arn%3Aaws%3Asignin%3A%3A%3Aconsole%2Fcanvas&amp;amp;forceMobileApp=0&amp;amp;code_challenge=4l699bA88crZPtDoeVzZoath4mZalJH56qsW_ijTYJM&amp;amp;code_challenge_method=SHA-256"&gt;AWS Management Console&lt;/a&gt;. In the search bar type IAM and click on IAM(Manage access to AWS resources) to navigate to IAM Dashboard. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:-&lt;/strong&gt;  On the left side of the page, you should see an option called &lt;strong&gt;Users groups&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--saukVl4P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630301578903/xXaKOc977.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--saukVl4P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630301578903/xXaKOc977.png" alt="Screenshot (472).png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Step 3:-&lt;/strong&gt;Click on &lt;strong&gt;Create role&lt;/strong&gt; button to create a new role.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XoHN5883--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630301652456/WMFxpQHlc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XoHN5883--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630301652456/WMFxpQHlc.png" alt="Screenshot (473).png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Step 4:-&lt;/strong&gt; Choose the AWS service that you want to use with the role.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_d6RUCvg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630301755605/V_gwWz-ov.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_d6RUCvg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630301755605/V_gwWz-ov.png" alt="Screenshot (474).png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Step 5:-&lt;/strong&gt; Provide any permissions from existing policies or you can also attach custom policies.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EkcT4eUt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630302501586/wDq5AKogU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EkcT4eUt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630302501586/wDq5AKogU.png" alt="Screenshot (475).png"&gt;&lt;/a&gt;&lt;br&gt;
After attaching policies click on the &lt;strong&gt;Next: Tags&lt;/strong&gt; button.&lt;br&gt;
&lt;strong&gt;Step 6:-&lt;/strong&gt; Add tags if you want and click on &lt;strong&gt;Next:Review&lt;/strong&gt; button.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9MmC0hJB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630302711381/8UXXdWzJI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9MmC0hJB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630302711381/8UXXdWzJI.png" alt="Screenshot (477).png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Step 8:-&lt;/strong&gt; In a role name box, enter the role name. After completing all the required steps click on &lt;strong&gt;Create role&lt;/strong&gt; button.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X9E3dq8W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630302866074/VThgvCaoe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X9E3dq8W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630302866074/VThgvCaoe.png" alt="Screenshot (476).png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;b&gt;Congratulations you have created an IAM role🤩🤩.&lt;/b&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#now-how-to-attach-it-to-any-aws-service"&gt;
  &lt;/a&gt;
  Now how to attach it to any AWS service🤔😬
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#lets-attach-it-to-aws-ec2-instance"&gt;
  &lt;/a&gt;
  Let's attach it to AWS EC2 instance:-
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Step 1:-&lt;/strong&gt; First create an AWS EC2 instance.&lt;br&gt;
If you don't know how to create an EC2 instance, I recommend you to checkout this article once -&amp;gt;  &lt;a href="https://blogs.yasharyan.com/how-to-create-an-aws-ec2-instance"&gt;How to create an AWS EC2 instance?&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---dZXbiyj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630308066209/wG0mjMmLe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---dZXbiyj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630308066209/wG0mjMmLe.png" alt="Screenshot (484).png"&gt;&lt;/a&gt;&lt;br&gt;
Select the “EC2 Instance” as we did by selecting our “Testing Instance“, &lt;br&gt;
&lt;strong&gt;Step 2:-&lt;/strong&gt; Click on “Actions” button and from the “drop-down menu” go to the &lt;strong&gt;“Security”&lt;/strong&gt; again a new menu will be shown, from there look for “Modify IAM Role“, and select it.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--by-OgcO0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630308566330/IYYCAZMVh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--by-OgcO0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630308566330/IYYCAZMVh.png" alt="Screenshot (485).png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Step 3:-&lt;/strong&gt;  Select the &lt;strong&gt;IAM role&lt;/strong&gt; from the drop-down options and then hit &lt;strong&gt;Save&lt;/strong&gt; button.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pr2846CE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630308645757/ZTMWdsPiW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pr2846CE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630308645757/ZTMWdsPiW.png" alt="Screenshot (486).png"&gt;&lt;/a&gt;&lt;br&gt;
To confirm the IAM role attachment, select you EC2 instance and check the &lt;strong&gt;security&lt;/strong&gt; tab, you will see the &lt;strong&gt;IAM role&lt;/strong&gt; has been successfully attached.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JjTInSQQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630309518125/RRH_R2nHP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JjTInSQQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630309518125/RRH_R2nHP.png" alt="Screenshot (487).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#congrats"&gt;
  &lt;/a&gt;
  Congrats🥳🥳🥳
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--McUcoUxu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630320294365/W4uYReWau.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--McUcoUxu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630320294365/W4uYReWau.gif" alt="clap.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you learned a lot from it and if you love my work do one favor- &lt;strong&gt;Please do Like♥,share and comment🙈🙈&lt;/strong&gt; &lt;br&gt;
&lt;strong&gt;Let me know in the comment section if you have any doubts.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction.html"&gt;https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction.html&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users.html"&gt;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users.html&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups.html"&gt;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups.html&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html"&gt;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading 🥰
&lt;/h3&gt;

&lt;p&gt;I would ❤ to connect with you at  &lt;a href="https://twitter.com/nehasoni__"&gt;Twitter&lt;/a&gt;  |  &lt;a href="https://www.linkedin.com/in/neha-soni-70a6231b1/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/nehasoni05"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#support"&gt;
  &lt;/a&gt;
  🙌 Support
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/nehasoni"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See you in my next Blog article, Take care!!&lt;br&gt;
&lt;strong&gt;Happy Learning😃😃&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Clickhouse Server - Troubleshooting</title>
      <author>Vu Dao</author>
      <pubDate>Mon, 30 Aug 2021 12:19:02 +0000</pubDate>
      <link>https://dev.to/vumdao/clickhouse-server-troubleshooting-2gb7</link>
      <guid>https://dev.to/vumdao/clickhouse-server-troubleshooting-2gb7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#abstract"&gt;
  &lt;/a&gt;
  Abstract
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;When we get clickhouse performance issue like high CPU usage, in order to investigate what is the real problem and how to solve or provide workaround, we need to understand Clickhouse system/user config attributes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#max_part_loading_threads"&gt;max_part_loading_threads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#max_part_removal_threads"&gt;max_part_removal_threads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#number_of_free_entries_in_pool_to_execute_mutation"&gt;number_of_free_entries_in_pool_to_execute_mutation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#background_pool_size"&gt;background_pool_size&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#background_schedule_pool_size"&gt;background_schedule_pool_size&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#max_threads"&gt;max_threads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Get-tables-size"&gt;Get tables size&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Understand-clickhouse-Compression"&gt;Understand clickhouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Enable-allow_introspection_functions-for-query-profiling"&gt;Enable allow_introspection_functions for query profiling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#maxpartloadingthreads"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;max_part_loading_threads&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The maximum number of threads that read parts when ClickHouse starts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Possible values:&lt;br&gt;
Any positive integer.&lt;br&gt;
Default value: auto (number of CPU cores).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;During startup ClickHouse reads all parts of all tables (reads files with metadata of parts) to build a list of all parts in memory. In some systems with a large number of parts this process can take a long time, and this time might be shortened by increasing max_part_loading_threads (if this process is not CPU and disk I/O bound).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Query check&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT *
FROM system.merge_tree_settings
WHERE name = 'max_part_loading_threads'

Query id: 5f8c7c7a-5dec-4e89-88dc-71f06d800e04

┌─name─────────────────────┬─value─────┬─changed─┬─description──────────────────────────────────────────┬─type───────┐
│ max_part_loading_threads │ 'auto(4)' │       0 │ The number of threads to load data parts at startup. │ MaxThreads │
└──────────────────────────┴───────────┴─────────┴──────────────────────────────────────────────────────┴────────────┘

1 rows in set. Elapsed: 0.003 sec. 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#maxpartremovalthreads"&gt;
  &lt;/a&gt;
  🚀 max_part_removal_threads &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The number of threads for concurrent removal of inactive data parts. One is usually enough, but in ‘Google Compute Environment SSD Persistent Disks’ file removal (unlink) operation is extraordinarily slow and you probably have to increase this number (recommended is up to 16).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#numberoffreeentriesinpooltoexecutemutation"&gt;
  &lt;/a&gt;
  🚀 number_of_free_entries_in_pool_to_execute_mutation &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;This attribute must be align with &lt;code&gt;background_pool_size&lt;/code&gt;, its values must be &amp;lt;= value of &lt;code&gt;background_pool_size&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT *
FROM system.merge_tree_settings
WHERE name = 'number_of_free_entries_in_pool_to_execute_mutation'

┌─name───────────────────────────────────────────────┬─value─┬─changed─┬─description──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│ number_of_free_entries_in_pool_to_execute_mutation │ 10    │       0 │ When there is less than specified number of free entries in pool, do not execute part mutations. This is to leave free threads for regular merges and avoid "Too many parts" │
└────────────────────────────────────────────────────┴───────┴─────────┴──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#backgroundpoolsize"&gt;
  &lt;/a&gt;
  🚀 background_pool_size &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://clickhouse.tech/docs/en/operations/settings/settings/#background_pool_size"&gt;background_pool_size&lt;/a&gt;&lt;br&gt;
Sets the number of threads performing background operations in table engines (for example, merges in MergeTree engine tables). This setting is applied from thedefault profile at the ClickHouse server start and can’t be changed in a user session. By adjusting this setting, you manage CPU and disk load. Smaller pool sizeutilizes less CPU and disk resources, but background processes advance slower which might eventually impact query performance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Before changing it, please also take a look at related MergeTree settings, such as number_of_free_entries_in_pool_to_lower_max_size_of_merge andnumber_of_free_entries_in_pool_to_execute_mutation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Possible values:&lt;br&gt;
Any positive integer.&lt;br&gt;
Default value: 16.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start log&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2021.08.29 04:22:30.824446 [ 12372 ] {} &amp;lt;Information&amp;gt; BackgroundSchedulePool/BgSchPool: Create BackgroundSchedulePool with 16 threads
2021.08.29 04:22:47.891697 [ 12363 ] {} &amp;lt;Information&amp;gt; Application: Available RAM: 15.08 GiB; physical cores: 4; logical cores: 8.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;How to update this value eg. 5&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Update &lt;code&gt;config.xml&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      &amp;lt;merge_tree&amp;gt;
        &amp;lt;number_of_free_entries_in_pool_to_execute_mutation&amp;gt;5&amp;lt;/number_of_free_entries_in_pool_to_execute_mutation&amp;gt;
      &amp;lt;/merge_tree&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Update &lt;code&gt;users.xml&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;profiles&amp;gt;
        &amp;lt;default&amp;gt;
            &amp;lt;background_pool_size&amp;gt;5&amp;lt;/background_pool_size&amp;gt;
        &amp;lt;/default&amp;gt;
    &amp;lt;/profiles&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#backgroundschedulepoolsize"&gt;
  &lt;/a&gt;
  🚀 background_schedule_pool_size &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://clickhouse.tech/docs/en/operations/settings/settings/#background_schedule_pool_size"&gt;background_schedule_pool_size&lt;/a&gt;&lt;br&gt;
Sets the number of threads performing background tasks for replicated tables, Kafka streaming, DNS cache updates. This setting is applied at ClickHouse server start and can’t be changed in a user session.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Possible values:&lt;br&gt;
Any positive integer.&lt;br&gt;
Default value: 128.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to update this value? - At user profile -&amp;gt; update &lt;code&gt;users.xml&lt;/code&gt; (disable &lt;code&gt;background_schedule_pool_size&lt;/code&gt; if we don't use &lt;code&gt;ReplicatedMergeTree&lt;/code&gt; engine)&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;profiles&amp;gt;
      &amp;lt;default&amp;gt;
          &amp;lt;background_schedule_pool_size&amp;gt;0&amp;lt;/background_schedule_pool_size&amp;gt;
      &amp;lt;/default&amp;gt;
    &amp;lt;/profiles&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Get pool size
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT
    name,
    value
FROM system.settings
WHERE name LIKE '%pool%'

┌─name─────────────────────────────────────────┬─value─┐
│ connection_pool_max_wait_ms                  │ 0     │
│ distributed_connections_pool_size            │ 1024  │
│ background_buffer_flush_schedule_pool_size   │ 16    │
│ background_pool_size                         │ 100   │
│ background_move_pool_size                    │ 8     │
│ background_fetches_pool_size                 │ 8     │
│ background_schedule_pool_size                │ 0     │
│ background_message_broker_schedule_pool_size │ 16    │
│ background_distributed_schedule_pool_size    │ 16    │
└──────────────────────────────────────────────┴───────┘
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Get background pool task
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT
    metric,
    value
FROM system.metrics
WHERE metric LIKE 'Background%'

┌─metric──────────────────────────────────┬─value─┐
│ BackgroundPoolTask                      │     0 │
│ BackgroundFetchesPoolTask               │     0 │
│ BackgroundMovePoolTask                  │     0 │
│ BackgroundSchedulePoolTask              │     0 │
│ BackgroundBufferFlushSchedulePoolTask   │     0 │
│ BackgroundDistributedSchedulePoolTask   │     0 │
│ BackgroundMessageBrokerSchedulePoolTask │     0 │
└─────────────────────────────────────────┴───────┘
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Get BgSchPool
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ps H -o 'tid comm' $(pidof -s clickhouse-server) |  tail -n +2 | awk '{ printf("%s\t%s\n", $1, $2) }' | grep BgSchPool
7346    BgSchPool/D
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://support.huaweicloud.com/intl/en-us/cmpntguide-mrs/mrs_01_2398.html"&gt;Viewing cluster&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT 
    cluster, 
    shard_num, 
    replica_num, 
    host_name
FROM system.clusters

┌─cluster───────────────────────────┬─shard_num─┬─replica_num─┬─host_name─┐
│ test_cluster_two_shards           │         1 │           1 │ 127.0.0.1 │
│ test_cluster_two_shards           │         2 │           1 │ 127.0.0.2 │
│ test_cluster_two_shards_localhost │         1 │           1 │ localhost │
│ test_cluster_two_shards_localhost │         2 │           1 │ localhost │
│ test_shard_localhost              │         1 │           1 │ localhost │
│ test_shard_localhost_secure       │         1 │           1 │ localhost │
│ test_unavailable_shard            │         1 │           1 │ localhost │
│ test_unavailable_shard            │         2 │           1 │ localhost │
└───────────────────────────────────┴───────────┴─────────────┴───────────┘
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#maxthreads"&gt;
  &lt;/a&gt;
  🚀 max_threads &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://clickhouse.tech/docs/en/operations/settings/settings/#settings-max_threads"&gt;max_threads&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The maximum number of query processing threads, excluding threads for retrieving data from remote servers (see the ‘max_distributed_connections’ parameter).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This parameter applies to threads that perform the same stages of the query processing pipeline in parallel.&lt;br&gt;
For example, when reading from a table, if it is possible to evaluate expressions with functions, filter with WHERE and pre-aggregate for GROUP BY in parallel using at least ‘max_threads’ number of threads, then ‘max_threads’ are used.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Default value: the number of physical CPU cores.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For queries that are completed quickly because of a LIMIT, you can set a lower ‘max_threads’. For example, if the necessary number of entries are located in every block and max_threads = 8, then 8 blocks are retrieved, although it would have been enough to read just one.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The smaller the max_threads value, the less memory is consumed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Update this value at user profile&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#get-tables-size"&gt;
  &lt;/a&gt;
  🚀 Get tables size &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/sanchezzzhak/511fd140e8809857f8f1d84ddb937015"&gt;clickhouse-get-tables-size.sql&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;select concat(database, '.', table)                         as table,
       formatReadableSize(sum(bytes))                       as size,
       sum(rows)                                            as rows,
       max(modification_time)                               as latest_modification,
       sum(bytes)                                           as bytes_size,
       any(engine)                                          as engine,
       formatReadableSize(sum(primary_key_bytes_in_memory)) as primary_keys_size
from system.parts
where active
group by database, table
order by bytes_size desc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;For table detail of database
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;select parts.*,
       columns.compressed_size,
       columns.uncompressed_size,
       columns.ratio
from (
         select table,
                formatReadableSize(sum(data_uncompressed_bytes))          AS uncompressed_size,
                formatReadableSize(sum(data_compressed_bytes))            AS compressed_size,
                sum(data_compressed_bytes) / sum(data_uncompressed_bytes) AS ratio
         from system.columns
         where database = currentDatabase()
         group by table
         ) columns
         right join (
    select table,
           sum(rows)                                            as rows,
           max(modification_time)                               as latest_modification,
           formatReadableSize(sum(bytes))                       as disk_size,
           formatReadableSize(sum(primary_key_bytes_in_memory)) as primary_keys_size,
           any(engine)                                          as engine,
           sum(bytes)                                           as bytes_size
    from system.parts
    where active and database = currentDatabase()
    group by database, table
    ) parts on columns.table = parts.table
order by parts.bytes_size desc;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#understand-clickhouse-compression"&gt;
  &lt;/a&gt;
  🚀 Understand clickhouse Compression &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://altinity.com/blog/2017/11/21/compression-in-clickhouse"&gt;Compression in ClickHouse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#enable-allowintrospectionfunctions-for-query-profiling"&gt;
  &lt;/a&gt;
  🚀 Enable allow_introspection_functions for query profiling &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://clickhouse.tech/docs/en/sql-reference/functions/introspection/"&gt;Introspection Functions&lt;/a&gt;. Update at user profile
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        &amp;lt;default&amp;gt;
            &amp;lt;allow_introspection_functions&amp;gt;1&amp;lt;/allow_introspection_functions&amp;gt;
        &amp;lt;/default&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Get thread stack trace
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;WITH arrayMap(x -&amp;gt; demangle(addressToSymbol(x)), trace) AS all
SELECT
    thread_id,
    query_id,
    arrayStringConcat(all, '\n') AS res
FROM system.stack_trace
WHERE res LIKE '%SchedulePool%'

┌─thread_id─┬─query_id─┬─res──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│      7346 │          │ pthread_cond_wait
DB::BackgroundSchedulePool::delayExecutionThreadFunction()

ThreadPoolImpl&amp;lt;std::__1::thread&amp;gt;::worker(std::__1::__list_iterator&amp;lt;std::__1::thread, void*&amp;gt;)

start_thread
clone │
└───────────┴──────────┴──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#partstothrowinsert"&gt;
  &lt;/a&gt;
  🚀 parts_to_throw_insert
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://clickhouse.tech/docs/en/operations/settings/merge-tree-settings/#parts-to-throw-insert"&gt;parts_to_throw_insert&lt;/a&gt;
If the number of active parts in a single partition exceeds the parts_to_throw_insert value, INSERT is interrupted with the Too many parts (N). Merges are processing significantly slower than inserts exception.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Possible values:&lt;br&gt;
    Any positive integer.&lt;br&gt;
    Default value: 300.&lt;/p&gt;

&lt;p&gt;To achieve maximum performance of SELECT queries, it is necessary to minimize the number of parts processed, see Merge Tree.&lt;/p&gt;

&lt;p&gt;You can set a larger value to 600 (1200), this will reduce the probability of the Too many parts error, but at the same time SELECT performance might degrade. Also in case of a merge issue (for example, due to insufficient disk space) you will notice it later than it could be with the original 300.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a&gt;Facing issue?&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2021.08.30 11:30:44.526367 [ 7369 ] {} &amp;lt;Error&amp;gt; void DB::SystemLog&amp;lt;DB::MetricLogElement&amp;gt;::flushImpl(const std::vector&amp;lt;LogElement&amp;gt; &amp;amp;, uint64_t) [LogElement = DB::MetricLogElement]: Code: 252, e.displayText() = DB::Exception: Too many parts (300). Parts cleaning are processing significantly slower than inserts, Stack trace (when copying this message, always include the lines below):
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;And you decide to increase &lt;code&gt;parts_to_throw_insert&lt;/code&gt; -&amp;gt; Update &lt;code&gt;config.xml&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;merge_tree&amp;gt;
         &amp;lt;parts_to_throw_insert&amp;gt;600&amp;lt;/parts_to_throw_insert&amp;gt;
    &amp;lt;/merge_tree&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="ltag__user ltag__user__id__512906"&gt;
  
    .ltag__user__id__512906 .follow-action-button {
      background-color: #000000 !important;
      color: #62df88 !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/vumdao" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bGwkUMWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ugeYdWM---/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/512906/2472752c-cfd5-4e02-b3d8-55b790178884.png" alt="vumdao image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/vumdao"&gt;Vu Dao&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/vumdao"&gt;Awesome Devops || AWS SA || CloudOpz&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;




&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/vumdao"&gt;
        vumdao
      &lt;/a&gt; / &lt;a href="https://github.com/vumdao/vumdao"&gt;
        vumdao
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>clickhouse</category>
      <category>ec2</category>
      <category>cloudopz</category>
      <category>devops</category>
    </item>
    <item>
      <title>What is Two-factor Authentication | Verification ??</title>
      <author>Kshitij Bansod (Danny)</author>
      <pubDate>Mon, 30 Aug 2021 12:14:06 +0000</pubDate>
      <link>https://dev.to/kshitij9896/what-is-two-factor-authentication-verification-576h</link>
      <guid>https://dev.to/kshitij9896/what-is-two-factor-authentication-verification-576h</guid>
      <description>&lt;p&gt;✅ With 2-Step Verification (also known as two-factor authentication), you add an extra layer of security to your account in case your password is stolen. After you set up 2-Step Verification, you'll sign in to your account in two steps using: Something you know, like your password. Something you have, like your phone.&lt;/p&gt;

&lt;p&gt;✅ In Simple Terms =&amp;gt; #Adding Extra #Layer of #Security on your #data&lt;/p&gt;

&lt;p&gt;Some Examples of Two Step Verifications Provided By The following&lt;br&gt;
Organizations | Companies&lt;/p&gt;

&lt;p&gt;✅ Google's 2-Step Verification &lt;br&gt;
✅ Facebook's 2-Step Verification &lt;br&gt;
✅ Instagram's 2-Step Verification &lt;/p&gt;

&lt;p&gt;&amp;amp; Many more services &amp;amp; companies provide the two step verification for their users...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#image-credit-gtnaked-security-by-sophos"&gt;
  &lt;/a&gt;
  image credit =&amp;gt;naked security by SOPHOS
&lt;/h1&gt;

&lt;p&gt;For More Interesting Facts...&lt;br&gt;
✅ Follow &lt;a class="mentioned-user" href="https://dev.to/kshitij9896"&gt;@kshitij9896&lt;/a&gt;
 &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Automate boring files organizing using python (Python files organizer)</title>
      <author>Budy mnvenom</author>
      <pubDate>Mon, 30 Aug 2021 12:11:34 +0000</pubDate>
      <link>https://dev.to/xbudy/automate-boring-files-organizing-using-python-python-files-organizer-21f4</link>
      <guid>https://dev.to/xbudy/automate-boring-files-organizing-using-python-python-files-organizer-21f4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;Hello today we are going to code a files organizer using python script it will organize the files by their types for example it will put all files with extension (.png) in a folder called Pictures let's code ... (this post is published here &lt;a href="https://blog.icodes.tech/2021/06/12/python-files-organizer-automate-boring-files-organizing-using-python.html"&gt;Python files organizer, automate boring files organizing using python&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#coding"&gt;
  &lt;/a&gt;
  Coding
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#importing-needed-modules"&gt;
  &lt;/a&gt;
  Importing needed modules
&lt;/h3&gt;

&lt;p&gt;those are the modules we are going to use&lt;/p&gt;

&lt;p&gt;if you have any problem you can post it on comments&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import os
import pathlib
import shutil
import fnmatch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#preparing-the-default-folder-for-every-type-of-files"&gt;
  &lt;/a&gt;
  Preparing the default folder for every type of files
&lt;/h3&gt;

&lt;p&gt;So now we are going to set a folder for every type for example we want to move the pictures to the folder in path '/home/rin/Downloads/'&lt;/p&gt;

&lt;p&gt;in my case i am using linux on windows the paths will look like ' C:\rin\Brink\Pictures'&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;## define path for every category
file_folder={
    'Music':'/home/rin/Downloads/',
    'Pictures':'/home/rin/Pictures/',
    'Documents':'/home/rin/Documents/',
    'Archives':'/home/rin/Archives/',
    'Videos':'/home/rin/Videos/',
    'Codes':'/home/rin/Codes/'
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#defining-the-type-of-file-by-the-extension"&gt;
  &lt;/a&gt;
  Defining the type of file by the extension
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#whats-extension-"&gt;
  &lt;/a&gt;
  What's extension ?
&lt;/h4&gt;

&lt;p&gt;A &lt;strong&gt;file extension&lt;/strong&gt; or &lt;strong&gt;file name extension&lt;/strong&gt; is the ending of a file that helps identify the type of file in operating systems, such as Microsoft Windows. In Microsoft Windows, the file name extension is a period that is often followed by three characters but may also be one, two, or four characters long.&lt;/p&gt;

&lt;p&gt;As an example, the file name "myfile.txt" has a file extension of ".txt," which is a file name extension associated with text files.&lt;/p&gt;

&lt;p&gt;So code :&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;## define the type of every extension
file_type={'Pictures':['.jpg', '.jpeg', '.jpe','.png','.jp2','.ico', '.wbmp','.j2k', '.jpf', '.jpx', '.jpm', '.mj2','.svg', '.svgz','.webp','.gif']
,'Music':['mp3']
,'Videos':['.mp4','.srt','.mkv','.3gp','.m4a']
,'Documents':['.pdf','.docx','.doc','.csv','.txt','.xls','.xlsx','.log']
,'Archives':['.zip','.tar']
,'Codes':['.py']}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#main-code"&gt;
  &lt;/a&gt;
  Main code
&lt;/h3&gt;

&lt;p&gt;Now we take the path of the folder contains the files we want organize as example for me i want clean my download folder &lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;path='/home/rin/Downloads/'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;So now what we want to do is extracting all the files in the folder and check the type of every file then move it to the folder contains its type&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;files=os.listdir(path)# list of files in the folder
for file in files:#for for every file in the list
    extension=pathlib.Path(file).suffix #extension of file ex:(.txt)
    #Documents
    if extension in file_type['Documents']:#check if the file is a document
        move=pathlib.Path(path+file).rename(file_folder['Documents']+file)# move the file to the folder conatins documents
        #move=shutil.move(path+file,file_folder['Documents'])
        print('success #### {} to {}'.format(file,move))
    #Music    
    if extension in file_type['Music']:
        move=pathlib.Path(path+file).rename(file_folder['Music']+file)
        #move=shutil.move(path+file,file_folder['Music'])
        print('success #### {} to {}'.format(file,move))
    #Pictures
    if extension in file_type['Pictures']:
        move=pathlib.Path(path+file).rename(file_folder['Pictures']+file)
        #move=shutil.move(path+file,file_folder['Pictures'])
        print('success #### {} to {}'.format(file,move))
    #Videos
    if extension in file_type['Videos']:
        move=pathlib.Path(path+file).rename(file_folder['Videos']+file)
        #move=shutil.move(path+file,file_folder['Videos'])
        print('success #### {} to {}'.format(file,move))
    #Archives
    if extension in file_type['Archives']:
        move=pathlib.Path(path+file).rename(file_folder['Archives']+file)
        #move=shutil.move(path+file,file_folder['Archives'])
        print('success #### {} to {}'.format(file,move))
    #Codes
    if extension in file_type['Codes']:
        move=pathlib.Path(path+file).rename(file_folder['Codes']+file)
        #move=shutil.move(path+file,file_folder['Codes'])
        print('success #### {} to {}'.format(file,move))
    else:
        print('## '+file)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note : You can add more types&lt;/strong&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#full-source-code%C2%A0"&gt;
  &lt;/a&gt;
  Full source code 
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;DON'T FORGET TO CHANGE THE PATHS ALSO YOU CAN ADD MORE CATEGORY BE SMART ..&lt;/strong&gt;&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import os
import pathlib
import shutil
import fnmatch
## define path for every category
file_folder={
    'Music':'/home/rin/Downloads/',
    'Pictures':'/home/rin/Pictures/',
    'Documents':'/home/rin/Documents/',
    'Archives':'/home/rin/Archives/',
    'Videos':'/home/rin/Videos/',
    'Codes':'/home/rin/Codes/'
}
## define the type of every extension
file_type={'Pictures':['.jpg', '.jpeg', '.jpe','.png','.jp2','.ico', '.wbmp','.j2k', '.jpf', '.jpx', '.jpm', '.mj2','.svg', '.svgz','.webp','.gif']
,'Music':['mp3']
,'Videos':['.mp4','.srt','.mkv','.3gp','.m4a']
,'Documents':['.pdf','.docx','.doc','.csv','.txt','.xls','.xlsx','.log']
,'Archives':['.zip','.tar']
,'Codes':['.py']}

path='/home/rin/Downloads/'
files=os.listdir(path)# list of files in the folder
for file in files:#for for every file in the list
    extension=pathlib.Path(file).suffix #extension of file ex:(.txt)
    #Documents
    if extension in file_type['Documents']:#check if the file is a document
        move=pathlib.Path(path+file).rename(file_folder['Documents']+file)# move the file to the folder conatins documents
        #move=shutil.move(path+file,file_folder['Documents'])
        print('success #### {} to {}'.format(file,move))
    #Music    
    if extension in file_type['Music']:
        move=pathlib.Path(path+file).rename(file_folder['Music']+file)
        #move=shutil.move(path+file,file_folder['Music'])
        print('success #### {} to {}'.format(file,move))
    #Pictures
    if extension in file_type['Pictures']:
        move=pathlib.Path(path+file).rename(file_folder['Pictures']+file)
        #move=shutil.move(path+file,file_folder['Pictures'])
        print('success #### {} to {}'.format(file,move))
    #Videos
    if extension in file_type['Videos']:
        move=pathlib.Path(path+file).rename(file_folder['Videos']+file)
        #move=shutil.move(path+file,file_folder['Videos'])
        print('success #### {} to {}'.format(file,move))
    #Archives
    if extension in file_type['Archives']:
        move=pathlib.Path(path+file).rename(file_folder['Archives']+file)
        #move=shutil.move(path+file,file_folder['Archives'])
        print('success #### {} to {}'.format(file,move))
    #Codes
    if extension in file_type['Codes']:
        move=pathlib.Path(path+file).rename(file_folder['Codes']+file)
        #move=shutil.move(path+file,file_folder['Codes'])
        print('success #### {} to {}'.format(file,move))
    else:
        print('## '+file)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Feel free to develop the code and post any problem or request in the comments&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>files</category>
    </item>
  </channel>
</rss>
