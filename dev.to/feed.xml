<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>VS Code Commands Cheatsheet 🔥 - Increase Productivity 🚀</title>
      <author>Garvit Motwani</author>
      <pubDate>Mon, 12 Apr 2021 18:35:25 +0000</pubDate>
      <link>https://dev.to/worldindev/vs-code-commands-cheatsheet-increase-productivity-o6d</link>
      <guid>https://dev.to/worldindev/vs-code-commands-cheatsheet-increase-productivity-o6d</guid>
      <description>&lt;p&gt;Hey Devs, This is a cheat sheet for all the VSCode users out there, these shortcuts can increase your speed and productivity!!&lt;/p&gt;

&lt;p&gt;So let's start.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shortcuts"&gt;
  &lt;/a&gt;
  Shortcuts
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#command-palette"&gt;
  &lt;/a&gt;
  Command palette
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘P&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show all commands&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⌘P&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show files&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#sidebars"&gt;
  &lt;/a&gt;
  Sidebars
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⌘B&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Toggle sidebar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘E&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Explorer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘F&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Search&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘D&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Debug&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘X&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Extensions&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧^G&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Git (SCM)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#search"&gt;
  &lt;/a&gt;
  Search
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⌘F&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Find&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⌥⌘F&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Replace&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘F&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Find in files&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘H&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Replace in files&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#panel"&gt;
  &lt;/a&gt;
  Panel
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⌘J&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Toggle panel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘M&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Problems&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘U&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Output&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘Y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Debug console&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;^`&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Terminal&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;{: .-shortcuts}&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#view"&gt;
  &lt;/a&gt;
  View
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;⌘k&lt;/code&gt; &lt;code&gt;z&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Zen mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;⌘k&lt;/code&gt; &lt;code&gt;u&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Close unmodified&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;code&gt;⌘k&lt;/code&gt; &lt;code&gt;w&lt;/code&gt;
&lt;/td&gt;
&lt;td&gt;Close all&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#debug"&gt;
  &lt;/a&gt;
  Debug
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;F5&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Start&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧F5&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Stop&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘F5&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Restart&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;^F5&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Start without debugging&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;F9&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Toggle breakpoint&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;F10&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Step over&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;F11&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Step into&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧F11&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Step out&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;td&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘D&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Debug sidebar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;⇧⌘Y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Debug panel&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf"&gt;Keyboard shortcuts (MacOS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf"&gt;Keyboard shortcuts (Windows)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf"&gt;Keyboard shortcuts (Linux)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devhints.io/vscode"&gt;DevHints VSCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;PLEASE FOLLOW, LIKE, SHARE, AND COMMENT ANY COMMAND YOU THINK I MISSED OUT!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#giveaway"&gt;
  &lt;/a&gt;
  ⚡Giveaway ⚡
&lt;/h2&gt;

&lt;p&gt;We are giving away any course you need on Udemy. Any price any course.&lt;br&gt;
Steps to enter the giveaway&lt;br&gt;
--&amp;gt; React to this post&lt;br&gt;
--&amp;gt; &lt;a href="https://worldindev.ck.page/"&gt;Subscribe to our Newsletter&lt;/a&gt; &lt;strong&gt;&amp;lt;--&lt;/strong&gt; Very important&lt;/p&gt;




&lt;p&gt;Happy Coding.&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>productivity</category>
      <category>beginners</category>
      <category>cheatsheet</category>
    </item>
    <item>
      <title>Java vs Python</title>
      <author>Konchada Sai Ansul</author>
      <pubDate>Mon, 12 Apr 2021 18:30:24 +0000</pubDate>
      <link>https://dev.to/saiansulsblog/java-vs-python-5fla</link>
      <guid>https://dev.to/saiansulsblog/java-vs-python-5fla</guid>
      <description>&lt;p&gt;Hello Guys, Welcome back to another post of &lt;strong&gt;Sai Ansul's Blog&lt;/strong&gt;.&lt;br&gt;
In this blog we are gonna find which programming language is better.&lt;/p&gt;

&lt;p&gt;So let's start,&lt;/p&gt;

&lt;p&gt;Firstly let us know what is programming? &lt;br&gt;&lt;br&gt;
Programming is the way we can make the computer perform various tasks.&lt;/p&gt;

&lt;p&gt;What is programming language? &lt;br&gt;&lt;br&gt;
It is a formal language to perform various tasks, there are several protocols and algorithms to be followed.&lt;/p&gt;

&lt;p&gt;Let us know the types of programming languages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Procedural Programming Language. &lt;/li&gt;
&lt;li&gt;Functional Programming Language. &lt;/li&gt;
&lt;li&gt;Object-oriented Programming Language. &lt;/li&gt;
&lt;li&gt;Scripting Programming Language. &lt;/li&gt;
&lt;li&gt;Logic Programming Language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some names of programming language are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;C++ Language. &lt;/li&gt;
&lt;li&gt;C Language. &lt;/li&gt;
&lt;li&gt;Pascal Language.&lt;/li&gt;
&lt;li&gt;Python Language.&lt;/li&gt;
&lt;li&gt;Java Language.&lt;/li&gt;
&lt;li&gt;Perl Language&lt;/li&gt;
&lt;li&gt;Lisp Language&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-comparison-factors-are"&gt;
  &lt;/a&gt;
  The Comparison Factors are &lt;br&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Speed
&lt;/li&gt;
&lt;li&gt;Legacy
&lt;/li&gt;
&lt;li&gt;Code
&lt;/li&gt;
&lt;li&gt;Practical Agility
&lt;/li&gt;
&lt;li&gt;Trends
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#1-speed"&gt;
  &lt;/a&gt;
  1. Speed
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HJl57eej--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1614613345245/zTg0kFpcL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HJl57eej--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1614613345245/zTg0kFpcL.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
In the terms of speed Java is faster than Python as it is a compiled language, so it takes less time to carry out the program as compared Python is an interpreter language and it takes more time than Java language to carry out the program.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-legacy"&gt;
  &lt;/a&gt;
  2. Legacy
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q71TDESk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1614613782923/7cbAl7gJf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q71TDESk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1614613782923/7cbAl7gJf.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Java's legacy problems are typically larger and more numerous than python’s .&lt;br&gt;
Python has less legacy problem so world finds difficulty for the script to copy and paste codes and gives it a slight edge over the other languages.&lt;/p&gt;

&lt;p&gt;The other confusion that arises when we say that the two languages that is which one is easier between Java &amp;amp; python. So let’s have a look at the number of lines required while writing a code in both the languages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-code"&gt;
  &lt;/a&gt;
  3. Code
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e5LYPCPB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1614614056196/VedCUfUbD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e5LYPCPB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1614614056196/VedCUfUbD.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Java is very talkative as compared to Python. It takes 10 lines of code to read from a file in Java.&lt;br&gt;
Python only takes 2 lines of code in Python. This makes Python a more preferable language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-practical-agility"&gt;
  &lt;/a&gt;
  4. Practical Agility
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1YAvEi1F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1614616253879/zbH93Al2K.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1YAvEi1F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1614616253879/zbH93Al2K.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Java enjoys more support than python thanks to its static type system and universality of IDE’s in development. It is more popular for mobile and web apps.&lt;br&gt;
Python has an existence in the talent space and is considered to be the most favorable language for Machine Learning, Artificial Intelligence, Internet of Things and a lot more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-trends"&gt;
  &lt;/a&gt;
  5. Trends
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4QpfZz-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1614616478560/PkqM5SUSL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4QpfZz-8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1614616478560/PkqM5SUSL.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
While not as trendy as Java was, it is still the most popular programming language by virtually any measure. On the other hand, Python’s growth has been astronomical, especially in developed, high-income countries. The reasons for this amazing growth include developer productivity, language flexibility, library support, community support, and ease of learning.&lt;/p&gt;

&lt;p&gt;Now with this, we come to an end of this comparison on Java vs Python. Python has a slight edge over Java and wins the battle in most of the factors. So, if you have read this, you might have a clear idea about which programming language is better and which one you should use.&lt;/p&gt;

&lt;p&gt;If you liked this blog and want to support my efforts, do share it with as many friends as possible. And feel free to drop in suggestions for improvements.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>python</category>
      <category>computerscience</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Bump: GitHub Actions</title>
      <author>Doug Sillars</author>
      <pubDate>Mon, 12 Apr 2021 18:09:42 +0000</pubDate>
      <link>https://dev.to/bump/bump-github-actions-30f4</link>
      <guid>https://dev.to/bump/bump-github-actions-30f4</guid>
      <description>&lt;p&gt;Here at Bump, we want your documentation to look beautiful. That’s why we designed our layout to work with both OpenAPI and AsyncAPI specifications — just provide your API in these formats, and we’ll make it look amazing.&lt;/p&gt;

&lt;p&gt;But where we really simplify things is the ability to update your docs automatically, so you don’t even have to think about updating. Just push your code, and we’ll make sure your docs are updated.&lt;/p&gt;

&lt;p&gt;In this post, we’ll walk through the Bump GitHub Action. If you keep your code (with your API specification) on GitHub, this action will do the documentation updates for you. You’ll need a few things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;a href="https://bump.sh/users/sign_up"&gt;Bump.sh account&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Your api location at Bump. You don’t actually need to upload your docs, you just need to create the location where it will reside. Once created, you’ll need a

&lt;code&gt;Doc id&lt;/code&gt;

and an

&lt;code&gt;Access token&lt;/code&gt;

from your docs settings. (Settings &amp;gt; CI deployment).&lt;/li&gt;
&lt;li&gt;Your code (with your API document) hosted on Github.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#github-actions"&gt;
  &lt;/a&gt;
  GitHub Actions
&lt;/h2&gt;

&lt;p&gt;GitHub Actions are automated tasks that GitHub will run over your repository. In this case, when a commit is made, it will take the API specification file denoted in the action (a YAML or JSON), and use it to update your documentation on Bump.&lt;br&gt;
In this case, I will be updating my &lt;a href="https://github.com/dougsillars/jokeAPI"&gt;JokeAPI&lt;/a&gt; on Bump whenever new code is pushed.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-1-create-your-documentation-at-bump"&gt;
  &lt;/a&gt;
  Step 1: create your documentation at Bump.
&lt;/h2&gt;

&lt;p&gt;In this case, I want to update my Joke API, so I’ll create a version of my API called “JokeAPI — updating from GitHub Action” You can see this version on my &lt;a href="https://bump.sh/hub/MyApis/doc/jokeapi-updating-from-github-action"&gt;Bump account&lt;/a&gt;. I uploaded the current YAML file so that some content would be present on the site.&lt;/p&gt;

&lt;p&gt;Inside my new API’s settings, under the “CI deployment” settings, there is a Doc id and an Access token:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CkJocBC5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2Apk6kSzq4iFOgz-Qk-9QvLw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CkJocBC5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2Apk6kSzq4iFOgz-Qk-9QvLw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’ll need these to implement our GitHub Action. But your Access token needs to remain private, so keep it under wraps (or a salmon coloured rectangle).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-2-create-github-action"&gt;
  &lt;/a&gt;
  Step 2: Create GitHub Action
&lt;/h2&gt;

&lt;p&gt;In your GitHub repository, we’ll create our GitHub Action. Click “Actions” at the top of your repo, and then click “New Workflow”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oF2L1qb_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6n2b2aisb6ysqeh8n3qz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oF2L1qb_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6n2b2aisb6ysqeh8n3qz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You’re going to get a lot of options on workflows you can create, but we can ignore these. We’ll create our workflow from scratch, so click the “set up a workflow yourself” link. (Don’t worry, you’re not doing it yourself — we’ll do it together!)&lt;/p&gt;

&lt;p&gt;Paste in the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: Deploy documentation 
on:
  push:
    branches:
      - master
jobs:
  deploy-doc:
    name: Deploy API doc on Bump
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Deploy API documentation
        uses: bump-sh/github-action@0.2
        with:
          doc: &amp;lt;BUMP_DOC_ID&amp;gt;
          token: ${{secrets.BUMP_TOKEN}}
          file: doc/api-documentation.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are a few fields you’ll need to change:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Branch: If your main branch is master - you're set. If you have a newer repo, your main branch is probably called main. If your branch has a different name - enter the branch you'd like to update on.&lt;/li&gt;
&lt;li&gt;Doc: Enter the Doc id from your Bump CI deployment settings.&lt;/li&gt;
&lt;li&gt;Token: Leave in this state. This is referencing a GitHub Secret. So we can use this variable to keep your Access token private.&lt;/li&gt;
&lt;li&gt;File: The link to your yaml/json file. In my jokes api, this became: file: joke_api_0001.yaml as my yaml is in the root directory.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#github-secrets"&gt;
  &lt;/a&gt;
  GitHub Secrets
&lt;/h2&gt;

&lt;p&gt;To keep your API token private, we’ll use GitHub Secrets. In your repository, click Settings: Secrets&lt;br&gt;
There’s a button to create a new secret.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kfnSsuEr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AmZ5on7MSnoKOkjlI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kfnSsuEr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AmZ5on7MSnoKOkjlI.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see I have created a secret called BUMP_TOKEN that holds the API token for me repo. This is referenced in the workflow using $ { { secrets.BUMP_TOKEN } }.&lt;/p&gt;

&lt;p&gt;That’s it! Your workflow is now ready to go.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#testing-out-your-workflow"&gt;
  &lt;/a&gt;
  Testing out your workflow.
&lt;/h2&gt;

&lt;p&gt;To test my workflow, I’ll add a fake endpoint to my API:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/fake_entry:
  post:
    tags:
      - users
    summary: fakeentry
    operationId: fake
    description: fake
    parameters: 
      - in: header
        name: x-admin
        schema: 
          type: string 
        required: true

    requestBody:
      content:
        application/json: 
          schema: 
            type: object
            required:
              - fake
              - fake1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Saving this to my repo, I’ll push this code to GitHub with the commit message “adding fake params”. Immediately on the actions page, I see:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nU2EAeOO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2A8fR7pB5pFphNBGie.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nU2EAeOO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2A8fR7pB5pFphNBGie.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And after a few seconds: the yellow turns green, indicating that the push to Bump was successful!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#looking-at-the-docs"&gt;
  &lt;/a&gt;
  Looking at the Docs
&lt;/h2&gt;

&lt;p&gt;The new /fake_entry endpoint is visible under Users:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Sb24W72--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AJh7KbmvcimaHUjM8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Sb24W72--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AJh7KbmvcimaHUjM8.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#changelog"&gt;
  &lt;/a&gt;
  Changelog
&lt;/h2&gt;

&lt;p&gt;Bump reports every change made to the API, and we can see the GitHub action report:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aTGSEoNN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AZ0U5wj1E9DM542Px.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aTGSEoNN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2AZ0U5wj1E9DM542Px.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By clicking on the date of the item, we are directed to the diff:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mbuuvRWI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2APkdvwimOIOHA699a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mbuuvRWI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2APkdvwimOIOHA699a.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;My next edit was to remove this fake entry endpoint, so that I might continue building my Joke API:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TiHbswut--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2Ahs-fzJcAfErxdBwj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TiHbswut--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/0%2Ahs-fzJcAfErxdBwj.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using the fake entry, we were able to demonstrate the power of using GitHub actions — simply updating the code in my GitHub repository resulted in the new documentation being pushed live to users.&lt;/p&gt;

&lt;p&gt;Removing the manual step of uploading your documents ensures that whatever code is pushed to production — the docs are pushed at the same time, resulting in up-to-date documentation. Every time.&lt;/p&gt;

</description>
      <category>githubactions</category>
      <category>documentation</category>
    </item>
    <item>
      <title>Your Static Site to a PWA!</title>
      <author>Rishi Vishwakarma</author>
      <pubDate>Mon, 12 Apr 2021 17:54:49 +0000</pubDate>
      <link>https://dev.to/prorishi/your-static-site-to-a-pwa-24dl</link>
      <guid>https://dev.to/prorishi/your-static-site-to-a-pwa-24dl</guid>
      <description>&lt;p&gt;A &lt;strong&gt;&lt;em&gt;Progressive Web App&lt;/em&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;em&gt;PWA&lt;/em&gt;&lt;/strong&gt; for short, is a website with added native capabilities. They are installable just like normal apps and even work offline and run in a separate browser process. They also support features like push notifications etc. PWAs have recently rose in importance because of the features they offer. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Fun Fact:&lt;/em&gt;&lt;/strong&gt; DEV Community is also a PWA!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Building a basic PWA is not-so-difficult. Let's see how we can convert a static site into a PWA with a little changes.&lt;br&gt;
&lt;strong&gt;&lt;em&gt;But First things First, understand a little more&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Additional Components necessary for a PWA:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Manifest&lt;/li&gt;
&lt;li&gt;A Service Worker&lt;/li&gt;
&lt;li&gt;A HTTPS connection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us see their roles in building a PWA.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;&lt;em&gt;Manifest&lt;/em&gt;&lt;/strong&gt; is a JSON file that describes the properties of our PWA. It contains information like app name, theme-color, icons, app shortcuts etc.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;&lt;em&gt;Service Worker&lt;/em&gt;&lt;/strong&gt; is JS worker that runs in background process. It manages the state and cache of the app, handles notifications and syncs latest data with the offline one.&lt;/li&gt;
&lt;li&gt;HTTPS connection is needed for security purposes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here I am starting with a simple Clock made with the awesome trio (HTML, CSS, JS)&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#try-the-app-first"&gt;
  &lt;/a&gt;
  Try the app first!!
&lt;/h3&gt;


&lt;div class="glitch-embed-wrap"&gt;
  &lt;iframe src="https://glitch.com/embed/#!/embed/clockkk?previewSize=100&amp;amp;path=index.html" alt="clockkk on glitch"&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://clockkk.glitch.me"&gt;Click here&lt;/a&gt; to be able to install it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-note"&gt;
  &lt;/a&gt;
  !!! Note:
&lt;/h2&gt;

&lt;h5&gt;
  &lt;a href="#not-all-browsers-support-pwa-now-but-support-will-come-soon-latest-versions-of-chrome-firefox-edge-support-it-recently"&gt;
  &lt;/a&gt;
  Not all browsers support PWA now but support will come soon. Latest versions of Chrome, FireFox, Edge support it recently.
&lt;/h5&gt;

&lt;p&gt;Our project structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/Clock
    +-- /components
    |      +-- /images
    |      |      +-- favicon.png
    |      |      +-- clock-face.png
    |      +-- /scripts
    |      |      +-- main.js
    |      |      +-- redirect.js
    |      |      +-- pwa-handler.js
    |      +-- /styles
    |             +-- main.css
    +-- index.html
    +-- manifest.json
    +-- service-worker.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;A-not-so-Fun Fact&lt;/em&gt;&lt;/strong&gt;: Adobe has discontinued their PhoneGap Build; which is a cloud service for building apps because of the rise of PWA.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;
  &lt;a href="#indexhtml-gt-remember-to-link-the-manifest"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;index.html&lt;/em&gt;&lt;/strong&gt; -&amp;gt; Remember to link the manifest!
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;&amp;lt;!-- Some basic meta tags. --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"Content-Type"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"text/html;charset=UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, height=device-height,user-scalable=no, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="c"&gt;&amp;lt;!-- This one is important for the manifest. --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"theme-color"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"#0d085c"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Clock&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

        &lt;span class="c"&gt;&amp;lt;!-- Reference the StyleSheet. --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/components/main.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="c"&gt;&amp;lt;!-- Reference the manifest file; is must for PWA. --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"manifest"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/manifest.json"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="c"&gt;&amp;lt;!-- Reference the icons --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"shorcut icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/components/favicon.png"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/x-icon"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"apple-touch-icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/components/favicon.png"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Clock&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"install"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Install App&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"clocks"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"analog"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"second"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"minute"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"hour"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"digital"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

        &lt;span class="c"&gt;&amp;lt;!-- Reference the main and helper scripts. --&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/components/main.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/components/pwa-handler.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#i-have-not-shown-the-maincss-and-mainjs-files-as-they-dont-do-much-with-the-pwa-but-you-could-find-them-on-the-github-repo"&gt;
  &lt;/a&gt;
  I have not shown the main.css and main.js files as they don't do much with the PWA but you could find them on the GitHub repo.
&lt;/h4&gt;
&lt;h4&gt;
  &lt;a href="#componentsscriptspwahandlerjs"&gt;
  &lt;/a&gt;
  /components/scripts/&lt;strong&gt;&lt;em&gt;pwa-handler.js&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Reference the serviceWorker.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;serviceWorker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serviceWorker&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Register our ServiceWorker script, if serviceWorker is available.&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;serviceWorker&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;serviceWorker&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/service-worker.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ServiceWorker Registered to the Application!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Failed to Register the ServiceWorker.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create a variable to defer the beforeinstallprompt event.&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;beforeInstallEvent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Reference the install button from DOM.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;installButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;install&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Watch for the beforeinstallevent and defer it.&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;beforeinstallprompt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;beforeInstallEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;installButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Prompt for Installation when install button is clicked.&lt;/span&gt;
&lt;span class="nx"&gt;installButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;beforeInstallEvent&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prompt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Hide the install button as its purpose is over.&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;outcome&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;accepted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;installButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;I have provided a button for prompting for installation in the &lt;code&gt;index.html&lt;/code&gt; and it disappears as soon as the app is installed.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#componentsimagesfaviconpng"&gt;
  &lt;/a&gt;
  /components/images/&lt;strong&gt;&lt;em&gt;favicon.png&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l9gJDidl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://clockkk.glitch.me/components/images/favicon.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l9gJDidl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://clockkk.glitch.me/components/images/favicon.png" alt="favicon.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#componentsimagesclockfacepng"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;/components/images/clock-face.png&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CkudBlQc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://clockkk.glitch.me/components/images/clock-face.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CkudBlQc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://clockkk.glitch.me/components/images/clock-face.png" alt="favicon.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#manifestjson-gt-a-512x512-icon-is-a-must"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;manifest.json&lt;/em&gt;&lt;/strong&gt; -&amp;gt; A 512x512 icon is a must!
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Clock"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start_url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"display"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"standalone"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"theme_color"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#0d085c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"icons"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/components/images/favicon.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"image/png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"sizes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"512x512"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"purpose"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"any maskable"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is a bare-minimum manifest file; you will find a whole bunch of other properties that are available upon searching.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#serviceworkerjs"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;service-worker.js&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Name of the Cache.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CACHE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cacheV1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Select files for caching.&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;urlsToCache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/index.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/components/images&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/components/images/favicon.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/components/images/clock-face.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/components/scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/components/scripts/main.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/components/scripts/pwa-handler.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/components/styles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/components/styles/main.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Cache all the selected items once application is installed.&lt;/span&gt;
&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;install&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;waitUntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CACHE&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Caching started.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;urlsToCache&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Whenever a resource is requested, return if its cached else fetch the resourcefrom server.&lt;/span&gt;
&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fetch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;respondWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#with-this-much-knowledge-your-are-ready-to-dive-into-the-world-of-pwa"&gt;
  &lt;/a&gt;
  With this much knowledge your are ready to dive into the world of PWA.
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#here-is-the-github-repo"&gt;
  &lt;/a&gt;
  Here is the GitHub repo:
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/prorishi"&gt;
        prorishi
      &lt;/a&gt; / &lt;a href="https://github.com/prorishi/Clock"&gt;
        Clock
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Features an analog and digital clock with an installable PWA.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#thanks-for-your-time-and-do-reference-your-pwas-in-the-discussions-area"&gt;
  &lt;/a&gt;
  Thanks for your time and do Reference your PWAs in the discussions area.
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;btw this is my first post ever on Internet!&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>webdev</category>
      <category>pwa</category>
      <category>html</category>
    </item>
    <item>
      <title>I need some advice on Freelancing</title>
      <author>𝐋𝐄𝑽𝐈𝑨𝐓𝐇𝐀𝐍 Programming</author>
      <pubDate>Mon, 12 Apr 2021 17:38:43 +0000</pubDate>
      <link>https://dev.to/leviathanprogramming/i-need-some-advice-on-freelancing-c0m</link>
      <guid>https://dev.to/leviathanprogramming/i-need-some-advice-on-freelancing-c0m</guid>
      <description>&lt;p&gt;Hello everyone, I am going to start freelancing soon and would like some advice on it and an answer for my question below.&lt;/p&gt;

&lt;p&gt;I am a fifteen-year-old fullstack developer and I'm going to be starting to actually put my skills to use, starting with making free websites for people, and then charging little y little until I get much better.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#do-you-charge-your-customers-for-a-domain-name"&gt;
  &lt;/a&gt;
  Do you charge your customers for a domain name?
&lt;/h3&gt;

&lt;p&gt;My question is, Do you buy a domain name yourself and then charge your customer for it?&lt;br&gt;
If you buy the domain for them and link it to the website, you can get a higher control level over it and can manage it in case something goes wrong.&lt;br&gt;
If your customer buys it, they might not be able to link it properly and might not set it up properly.  Linking domains was a very difficult task for me at first.&lt;/p&gt;

&lt;p&gt;Also, I'd appreciate some advice on freelancing if you have any.  Thanks!&lt;/p&gt;

</description>
      <category>career</category>
      <category>webdev</category>
      <category>help</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Demystifying Time Complexity &amp; Big O Notation</title>
      <author>Sai Ashish</author>
      <pubDate>Mon, 12 Apr 2021 17:12:45 +0000</pubDate>
      <link>https://dev.to/theinsightfulcoder/demystifying-time-complexity-big-o-notation-2f20</link>
      <guid>https://dev.to/theinsightfulcoder/demystifying-time-complexity-big-o-notation-2f20</guid>
      <description>&lt;p&gt;One of the most important concepts in software development is analysing the time complexity of an algorithm. In technical interviews, you'd often find interviewers asking, "What's the time complexity of this algorithm?" or "Can you improve the time complexity?" If you've no idea what time complexity means or what the fuss about Big O is all about, stick till the end to find out!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-time-complexity"&gt;
  &lt;/a&gt;
  What is Time Complexity?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gmBpRLJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618086630981/i1Xrzpbef.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gmBpRLJW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618086630981/i1Xrzpbef.png" alt="Time Complexity"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Time complexity is the &lt;strong&gt;time taken&lt;/strong&gt; by an algorithm as a &lt;strong&gt;function of the length of the input&lt;/strong&gt;. In short, it tells the running time or &lt;strong&gt;performance&lt;/strong&gt; of a program as the size of the input is varied.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-need-to-understand-time-complexity"&gt;
  &lt;/a&gt;
  Why do we need to understand Time Complexity?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7PZFqt4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618085877205/GCNqIjS2y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7PZFqt4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618085877205/GCNqIjS2y.png" alt="Understanding Time Complexity"&gt;&lt;/a&gt;&lt;br&gt;
Time complexity helps us to determines the &lt;strong&gt;scalability&lt;/strong&gt; of an algorithm. Suppose, you're at a party and you want to use an Instagram filter to capture the joyous occasion. Alas, the filter takes years to load. Your smiles turn into a frown as your mood gets ruined. So much for a party, huh?&lt;/p&gt;

&lt;p&gt;As a developer, it is necessary to understand which is the most efficient and optimised method to use in an application. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-compare-the-time-complexity-of-an-algorithm"&gt;
  &lt;/a&gt;
  How to compare the time complexity of an algorithm?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C1T7Sm-w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618085987351/2UtWwoe7H.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C1T7Sm-w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618085987351/2UtWwoe7H.png" alt="Compare time complexity of algorithm"&gt;&lt;/a&gt;&lt;br&gt;
Let us take an example to understand this problem. Ali and Jack were given a task to write a program to find the sum of &lt;em&gt;n&lt;/em&gt; numbers. Jack is a very hardworking guy who has mastered the fundamentals of a programming language. He doesn't pay attention to anything except programming. Here's how he coded the program:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int n=10, sum = 0;
for(int i=1; i&amp;lt;=n; i++)
{
     sum = sum + i;
}
System.out.println(sum);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ali was smart. He focused on every subject in school and solved problems in a jiffy. When Ali was granted the same problem, he chuckled and used Mathematics to his aid. Here's  how Ali built his program:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int n=10;
System.out.println((n*(n+1))/2);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you see from the above scenario, Ali was much more efficient as he avoided the shackles of using a loop to calculate his answer. If the size of the input increases, Jack's program will start to freeze and eventually int will overflow to present the wrong answer. Ali's magical line saves time and gives the right answer even for larger numbers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-big-o"&gt;
  &lt;/a&gt;
  What is Big O?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZqO-JOx2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618084695849/cgaFO-C_x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZqO-JOx2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618084695849/cgaFO-C_x.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Image Source: &lt;a href="https://www.bigocheatsheet.com/"&gt;BigOCheatSheet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Based on logic, we have understood time complexity and its comparison but we need something very distinct to compare the performance of different algorithms. If we start comparing the different type of sorting techniques by logic, it would get real tedious for our brain to execute the complexity of our problem. To optimise this, there's a superhero called the Big O.&lt;/p&gt;

&lt;p&gt;As per  &lt;a href="https://en.wikipedia.org/wiki/Big_O_notation"&gt;Wikipedia&lt;/a&gt;, Big O or asymptotic notation is a &lt;strong&gt;mathematical function&lt;/strong&gt; that describes the &lt;strong&gt;limiting behaviour&lt;/strong&gt; of a function when the argument tends towards a particular value or infinity.&lt;/p&gt;

&lt;p&gt;Big O basically tells us the &lt;strong&gt;time complexity in mathematical terms&lt;/strong&gt; which can be easily compared. Our superhero Big O comes in different forms and sizes. I'll introduce you to them, right away!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-o1"&gt;
  &lt;/a&gt;
  Understanding O(1)
&lt;/h2&gt;

&lt;p&gt;O(n) stands for &lt;strong&gt;constant time complexity&lt;/strong&gt;. O(1) represents that no matter the size of the input, it takes the same amount of time to execute. For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int b = {1,2,3,4,5}
System.out.println(b[0]);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No matter the length of the array, the program will require one unit, constant time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-on"&gt;
  &lt;/a&gt;
  Understanding O(n)
&lt;/h2&gt;

&lt;p&gt;O(n) stands for &lt;strong&gt;linear time complexity&lt;/strong&gt;. Linear represents the time takes by the algorithm is directly proportional to the size of the input. One of the most famous examples is the Linear Search algorithm. In linear search, we iterate over each element of the loop until we find a match. In the best-case scenario, the element could be present in the first position itself, thus effectively reducing the time complexity to O(1) as seen above. On the other hand, if the element is present at the end of the array or not at all, the loop has to iterate over all the elements in the array. Hence, the time complexity increases to O(n).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int a = 0, n[] = {1,2,3,4,5};
for(int i = 0; i &amp;lt;n.length; i++)
{
     if(n[i]==a)
     {
          System.out.println("Found");
          break;
     }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If there are two for loops in a program, the effective time complexity is still considered as O(n) and not O(2n). We typically ignore the constants in front of the variables in such cases, because they both still represent a linear function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-ologn"&gt;
  &lt;/a&gt;
  Understanding O(logn)
&lt;/h2&gt;

&lt;p&gt;O(logn) also known as &lt;strong&gt;logarithmic time complexity&lt;/strong&gt; denotes the time taken by the program to execute is proportional to the logarithm of the size of the input. The most famous example of this is the Binary Search algorithm. Let's suppose the worst-case scenario in the Binary search algorithm. We keep on halving our search array until we find the element or realise it is not present. In an array of 8 elements it will take maximum of 3 iterations(log28) to execute. If there are 1 million elements, it'll take just 19 iterations. This makes Binary Search so much more powerful than Linear Search.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;int arr[] = {10,20,30,40,50}; 
int l = 0, r = arr.length - 1;
while (l &amp;lt;= r) {
      int m = l + (r - l) / 2;
      if (arr[m] == x)
          return m;
      if (arr[m] &amp;lt; x)
           l = m + 1;
      else
           r = m - 1;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#understanding-on2"&gt;
  &lt;/a&gt;
  Understanding O(n&lt;sup&gt;2&lt;/sup&gt;)
&lt;/h2&gt;

&lt;p&gt;O(n&lt;sup&gt;2&lt;/sup&gt;) is also known as &lt;strong&gt;Quadratic time complexity&lt;/strong&gt;. It represents that input is proportional to the square of the size of the input. It is most commonly seen in Bubble sort, Insertion sort and Patterns. Nested loops are an easy way to identify the O(n&lt;sup&gt;2&lt;/sup&gt;) complexity. &lt;/p&gt;

&lt;p&gt;As the number of nested loops increases so does the power.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for(int i = 1; i&amp;lt;=5; i++)
{
     for(int j = 1; j&amp;lt;=i; j++)
     {
         System.out.print(j);
     }
System.out.println();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If there are instances of multiple nested loops of different orders only the highest power will contribute to time complexity. For example, if T(n) = 3n&lt;sup&gt;3&lt;/sup&gt; + 2n&lt;sup&gt;2&lt;/sup&gt;+n. The time complexity will be Cubic, O(n&lt;sup&gt;3&lt;/sup&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-o2n"&gt;
  &lt;/a&gt;
  Understanding O(2&lt;sup&gt;n&lt;/sup&gt;)
&lt;/h2&gt;

&lt;p&gt;O(2&lt;sup&gt;n&lt;/sup&gt;) represents the &lt;strong&gt;exponential function&lt;/strong&gt;. It is opposite to the logarithmic function. This mostly occurs in the case of Recursive functions, like recursive calculation of Fibonacci numbers. Another famous example of this complexity is the Hanoi Tower Problem.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;void solve_hanoi(int N, string from_peg, string to_peg, string spare_peg)
{
    if (N&amp;lt;1) {
        return;
    }
    if (N&amp;gt;1) {
        solve_hanoi(N-1, from_peg, spare_peg, to_peg);
    }
    print "move from " + from_peg + " to " + to_peg;
    if (N&amp;gt;1) {
        solve_hanoi(N-1, spare_peg, to_peg, from_peg);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Program Source: &lt;a href="https://stackoverflow.com/questions/34915869/example-of-big-o-of-2n"&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understanding-on"&gt;
  &lt;/a&gt;
  Understanding O(n!)
&lt;/h2&gt;

&lt;p&gt;O(n!) represents that the time complexity is the function of n &lt;strong&gt;factorial.&lt;/strong&gt; This is the costliest it can get. One of the most classic examples is the Travelling Salesman Problem. Another example of O(n!) is given below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const nFacRuntimeFunc = (n) =&amp;gt; {
  for(let i=0; i&amp;lt;n; i++) {
    nFacRuntimeFunc(n-1);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should at all costs &lt;strong&gt;avoid&lt;/strong&gt; the O(n!) complexity. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-recap"&gt;
  &lt;/a&gt;
  Let's Recap:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;O(1)&lt;/strong&gt; - Constant time complexity (Best🎯)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;O(n)&lt;/strong&gt; - Linear time complexity&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;O(log n)&lt;/strong&gt; - Logarithmic time complexity&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;O(n&lt;sup&gt;2&lt;/sup&gt;)&lt;/strong&gt; - Quadratic time complexity&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;O(2&lt;sup&gt;n&lt;/sup&gt;)&lt;/strong&gt; - Exponential time complexity&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;O(n!)&lt;/strong&gt; - Factorial time complexity (Worst😭)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#valuable-resource-big-o-cheatsheet"&gt;
  &lt;/a&gt;
  Valuable Resource:  &lt;a href="https://www.bigocheatsheet.com/"&gt;Big O Cheatsheet&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Our superhero deserves a website of his own. I stumbled upon this website called the  &lt;a href="https://www.bigocheatsheet.com/"&gt;BigOCheatSheet.com&lt;/a&gt; made by &lt;a href="https://twitter.com/ericdrowell"&gt;Eric&lt;/a&gt;. It contains an amazing comparison of the time complexity for different data structures and array sorting elements.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3L0qsJym--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618084611822/5039Vbory.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3L0qsJym--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618084611822/5039Vbory.png" alt="Time Complexity of common data structures"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EbhkONez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618084629307/BR6c2vUa8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EbhkONez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618084629307/BR6c2vUa8.png" alt="Time Complexity of various sorting algorithms"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In today's world, people are learning various frameworks, libraries &amp;amp; technologies without learning time complexity or Data Structures &amp;amp; Algorithms(DSA). If you ask any developer working in the top MNC's, they'll advise you to master the fundamentals and learn DSA as it greatly helps in problem-solving and writing efficient code. With that said, I hope our superhero continues to be our guardian angel forever. Cheers🍻&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>beginners</category>
      <category>algorithms</category>
      <category>programming</category>
    </item>
    <item>
      <title>What is a Set() ?</title>
      <author>Alexa Gamil</author>
      <pubDate>Mon, 12 Apr 2021 17:12:41 +0000</pubDate>
      <link>https://dev.to/gamil91/what-is-a-set-1di0</link>
      <guid>https://dev.to/gamil91/what-is-a-set-1di0</guid>
      <description>&lt;p&gt;Set is a data structure that lets you store a collection of &lt;strong&gt;UNIQUE&lt;/strong&gt; values of any type. What I need to emphasize here is that it only allows you to store &lt;em&gt;&lt;strong&gt;UNIQUE&lt;/strong&gt;&lt;/em&gt; values. They are similar to Array in the sense that both are a data collection but there are major differences between them.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Set&lt;/th&gt;
&lt;th&gt;Array&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Collection of values of any data&lt;/td&gt;
&lt;td&gt;Collection of values of any data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Store unique values&lt;/td&gt;
&lt;td&gt;Values may occur more than once&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ordered by insertion&lt;/td&gt;
&lt;td&gt;Indexed order&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Does not allow random access&lt;/td&gt;
&lt;td&gt;Retrieve elements using index&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cannot be reordered&lt;/td&gt;
&lt;td&gt;Can be reordered&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Only has limited &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#"&gt;methods&lt;/a&gt;
&lt;/td&gt;
&lt;td&gt;Array has a LOT of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#"&gt;methods&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;You can only add values to the &lt;strong&gt;end&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;You can add elements &lt;strong&gt;anywhere&lt;/strong&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#how-to-create-a-new-set"&gt;
  &lt;/a&gt;
  How to create a new Set()
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// Set(0) {}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also pass in iterable objects when creating sets.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;harryPotter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Sorcerer&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;Stone&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Chamber&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;Secrets&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Prisoner&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;Azkaban&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="nx"&gt;harryPotter&lt;/span&gt;
&lt;span class="c1"&gt;// Set(3) {“Sorcerer’s Stone”, “Chamber of Secrets”, “Prisoner of Azkaban”}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;noDuplicates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;banana&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="nx"&gt;noDuplicates&lt;/span&gt;
&lt;span class="c1"&gt;// Set(3) {‘b’, ‘a’, ‘n’}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see from above, when we passed in a string of banana, it only stored the characters &lt;code&gt;b&lt;/code&gt; &lt;code&gt;a&lt;/code&gt; &lt;code&gt;n&lt;/code&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-to-find-the-size-of-a-set-use-the-raw-size-endraw-property"&gt;
  &lt;/a&gt;
  How to find the size of a Set, use the &lt;code&gt;size&lt;/code&gt; property
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;harryPotter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newSet&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Sorcerer&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;Stone&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Chamber&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;Secrets&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Prisoner&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;Azkaban&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nx"&gt;harryPotter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;
&lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#how-to-add-a-value-to-a-set-use-the-raw-add-endraw-method"&gt;
  &lt;/a&gt;
  How to add a value to a Set, use the &lt;code&gt;add&lt;/code&gt; method
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;harryPotter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Sorcerer&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;Stone&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Chamber&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;Secrets&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Prisoner&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;Azkaban&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;//undefined&lt;/span&gt;
&lt;span class="nx"&gt;harryPotter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Goblet&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;Fire&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//Set(4) {“Sorcerer’s Stone”, “Chamber of Secrets”, “Prisoner of Azkaban”, “Goblet of Fire”}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try adding the same title again, the set will not grow.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#hot-to-delete-a-value-from-a-set-use-the-raw-delete-endraw-method"&gt;
  &lt;/a&gt;
  Hot to delete a value from a Set, use the &lt;code&gt;delete&lt;/code&gt; method
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;harryPotter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Goblet&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;Fire&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;harryPotter&lt;/span&gt; 
&lt;span class="c1"&gt;// Set(3) {"Sorcerer's Stone", "Chamber of Secrets", "Prisoner of Azkaban"}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also clear the whole set with the &lt;code&gt;clear&lt;/code&gt; method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;harryPotter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="nx"&gt;harryPotter&lt;/span&gt;
&lt;span class="c1"&gt;// Set(0) {}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#how-to-find-out-if-a-value-exists-in-a-set-use-the-raw-has-endraw-method"&gt;
  &lt;/a&gt;
  How to find out if a value exists in a Set, use the &lt;code&gt;has&lt;/code&gt; method
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;harryPotter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;newSet&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Sorcerer&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;Stone&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Chamber&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;Secrets&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Prisoner&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;Azkaban&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="nx"&gt;harryPotter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Sorcerer&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;Stone&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;harryPotter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Order&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;Phoenix&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It’s also important to note that &lt;code&gt;has&lt;/code&gt; method only takes a single operation. Lookup time is constant time or O(1).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#sets-are-iterable"&gt;
  &lt;/a&gt;
  Sets are iterable
&lt;/h4&gt;

&lt;p&gt;We can use &lt;code&gt;for loops&lt;/code&gt;, &lt;code&gt;for...of&lt;/code&gt;, and &lt;code&gt;for..each&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;harryPotter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sorcerer's Stone&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Chamber of Secrets&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Prisoner of Azkaban&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;// undefined&lt;/span&gt;

&lt;span class="nx"&gt;harryPotter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Harry Potter and the &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// Harry Potter and the Sorcerer's Stone&lt;/span&gt;
&lt;span class="c1"&gt;// Harry Potter and the Chamber of Secrets&lt;/span&gt;
&lt;span class="c1"&gt;// Harry Potter and the Prisoner of Azkaban&lt;/span&gt;
&lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#how-to-convert-a-set-object-to-an-array-object"&gt;
  &lt;/a&gt;
  How to convert a Set object to an Array object
&lt;/h4&gt;

&lt;p&gt;Using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from"&gt;&lt;code&gt;Array.from()&lt;/code&gt;&lt;/a&gt; method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;harryPotter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sorcerer's Stone&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Chamber of Secrets&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Prisoner of Azkaban&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;// undefined&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;booksArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;harryPotter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;booksArr&lt;/span&gt;
&lt;span class="c1"&gt;// ["Sorcerer's Stone", "Chamber of Secrets", "Prisoner of Azkaban"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or using the spread operator &lt;code&gt;(...)&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;booksArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;harryPotter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="nx"&gt;booksArr&lt;/span&gt;
&lt;span class="c1"&gt;// ["Sorcerer's Stone", "Chamber of Secrets", "Prisoner of Azkaban"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#when-to-use-sets"&gt;
  &lt;/a&gt;
  When to use sets?
&lt;/h4&gt;

&lt;p&gt;Here’s a simple example. You asked your friends for vacation ideas.&lt;br&gt;
In an array, it could look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;locationsArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Hawaii&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Bali&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;New&lt;/span&gt; &lt;span class="nx"&gt;York&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Japan&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Hawaii&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Japan&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Bali&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;Thailand&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But what you really want is this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;locationsSet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;locationsArr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="nx"&gt;locationsSet&lt;/span&gt;
&lt;span class="c1"&gt;// Set(5) {"Hawaii", "Bali", "New York", "Japan", "Thailand"}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sets are not meant to replace Arrays. The purpose of Sets is to hold UNIQUE values. Take note that it is also case-sensitive.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Alexa&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Set(5) {"A", "l", "e", "x", "a"}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>3 ways ML is a Game Changer for your Incident Management Lifecycle</title>
      <author>gdcohen</author>
      <pubDate>Mon, 12 Apr 2021 16:55:26 +0000</pubDate>
      <link>https://dev.to/gdcohen/3-ways-ml-is-a-game-changer-for-your-incident-management-lifecycle-55md</link>
      <guid>https://dev.to/gdcohen/3-ways-ml-is-a-game-changer-for-your-incident-management-lifecycle-55md</guid>
      <description>&lt;p&gt;Any developer, SRE or DevOps engineer responsible for an application with users has felt the pain of responding to a high priority incident. There's the immediate stress of mitigating the issue as quickly as possible, often at odd hours and under severe time pressure. There's the bigger challenge of identifying root cause so a durable fix can be put in place. There's the aftermath of postmortems, reviews of your monitoring and observability solutions, and inevitable updates to alert rules. And there's the typical frustration of wondering what could have been done to avoid the problem in the first place.&lt;/p&gt;

&lt;p&gt;In a modern cloud native environment, the complexity of distributed applications and the pace of change make all of this ever harder. Fortunately, AI and ML technologies can help with these human-driven processes. Here are three specific ways:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-drastically-cut-incident-remediation-times"&gt;
  &lt;/a&gt;
  1. Drastically cut incident remediation times
&lt;/h2&gt;

&lt;p&gt;The toughest incidents are ones where the symptoms are obvious, but the root cause is not. In other words, they are easy to detect, but hard to root cause -- as seen in &lt;a href="https://www.zebrium.com/blog/lessons-from-slack-gcp-and-snowflake-outages-zebrium"&gt;recent outages at GCP, Slack and Snowflake&lt;/a&gt;. SREs and engineers can spend hours digging through dashboards, traces, and inevitably -- scan&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g2z5ZVCX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zebrium.com/hs-fs/hubfs/Blogs/manual%2520hunting%2520for%2520root%2520cause.png%3Fwidth%3D234%26name%3Dmanual%2520hunting%2520for%2520root%2520cause.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g2z5ZVCX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zebrium.com/hs-fs/hubfs/Blogs/manual%2520hunting%2520for%2520root%2520cause.png%3Fwidth%3D234%26name%3Dmanual%2520hunting%2520for%2520root%2520cause.png" alt="manual hunting for root cause"&gt;&lt;/a&gt; millions of log lines. There might be clues to narrow the scope of the problem -- perhaps a set of services, containers, or hosts -- but ultimately there is a search for the unknown. Is there a new type of error? Or any unusual events? Or a significant deviation from the normal in event patterns? And when there are many of the above -- how do they relate to each other?&lt;/p&gt;

&lt;p&gt;Really experienced engineers develop instincts to help with this hunt for the unknown. But machine learning is very well suited to this problem -- it can keep tracking the evolving (but healthy) event patterns and their correlations, &lt;a href="https://www.zebrium.com/blog/is-autonomous-monitoring-the-anomaly-detection-you-actually-wanted"&gt;quickly surface unusual ones that explain root cause&lt;/a&gt;, and even &lt;a href="https://www.zebrium.com/blog/real-world-examples-of-gpt-3-plain-language-root-cause-summaries-zebrium"&gt;summarize the problem in plain language&lt;/a&gt; by matching the events against known problems in the public domain.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-eliminate-the-alert-rule-hamster-wheel"&gt;
  &lt;/a&gt;
  2. Eliminate the Alert Rule hamster wheel
&lt;/h2&gt;

&lt;p&gt;The second pain point is the need to revise and continually evolve alert rules and settings that give you early warning. While a pure approach might only monitor a narrow set of user-impacting health metrics&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H_UD3AE9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zebrium.com/hs-fs/hubfs/Blogs/manual%2520alert%2520rules.png%3Fwidth%3D396%26name%3Dmanual%2520alert%2520rules.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H_UD3AE9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zebrium.com/hs-fs/hubfs/Blogs/manual%2520alert%2520rules.png%3Fwidth%3D396%26name%3Dmanual%2520alert%2520rules.png" alt="manual alert rules"&gt;&lt;/a&gt; and symptoms, that can make it harder to identify root cause. So in reality most organizations set alerts for a blend of user facing symptoms as well as underlying health indicators (errors, latencies, reconnects, resource exhaustion etc.) After a particularly painful incident, it is natural to review and modify alerts -- adding new ones or modifying thresholds each time a new type of issue is encountered. The challenge is that as long as new types of problems continue to occur, this is a never ending game of catch up.\&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B70022JZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zebrium.com/hs-fs/hubfs/Blogs/ML%2520driven%2520alert%2520rules.png%3Fwidth%3D262%26name%3DML%2520driven%2520alert%2520rules.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B70022JZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zebrium.com/hs-fs/hubfs/Blogs/ML%2520driven%2520alert%2520rules.png%3Fwidth%3D262%26name%3DML%2520driven%2520alert%2520rules.png" alt="ML driven alert rules"&gt;&lt;/a&gt;\&lt;br&gt;
Machine learning can reduce this burden considerably. The simplest approach is to configure a set of "signals" which will trigger ML driven reports. Signals could of course be real incidents, but they could also be symptom alerts. For example, many teams watch for the overall error frequency -- if it spikes relative to recent trends, you know something is wrong, but not necessarily what. Well, you can use the same simple alert as a trigger for machine learning to scan the logs and metrics for that deployment around the time of the alert -- identifying unusual events/sequences and anomalous metrics that could explain the spike in errors. Even better, machine learning can fingerprint these sequences -- so when a particularly noteworthy root cause is detected, you already have a pre-built alert rule you can simply connect to an alert channel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-proactively-catch-silent-bugs-and-inform-developers-early-in-the-cycle"&gt;
  &lt;/a&gt;
  3. Proactively catch silent bugs and inform developers early in the cycle
&lt;/h2&gt;

&lt;p&gt;In the not too distant past, new releases were tested extensively before deploying to production. This allowed for deliberately constructed test plans, stress tests and an opportunity to catch bugs that might&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VotKfmXF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zebrium.com/hs-fs/hubfs/Blogs/proactive%2520detection%2520of%2520incidents.png%3Fwidth%3D234%26name%3Dproactive%2520detection%2520of%2520incidents.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VotKfmXF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.zebrium.com/hs-fs/hubfs/Blogs/proactive%2520detection%2520of%2520incidents.png%3Fwidth%3D234%26name%3Dproactive%2520detection%2520of%2520incidents.png" alt="proactive detection of incidents"&gt;&lt;/a&gt; have potentially nasty downstream consequences. Today, deployment cycles are much faster, drastically shrinking the time to do any of the above. There is now a trend towards "test in production". Although many teams do use staging environments and approaches like chaos tools, it's more likely that subtle bugs will only surface in production when they result in user complaints or visible symptoms.&lt;/p&gt;

&lt;p&gt;By using ML to surface new or unusual errors, event patterns and patterns in the metrics, machine learning can quickly become a developer's best friend in proactively surfacing subtle bugs early, before they impact users. For instance, using our own ML technology, the Zebrium engineering team recently caught a bug related to a malformed middleware SQL query, that under certain conditions prevented users from completing their intended workflow. Another example involved an exception that was handled in a try/catch block which emitted an error log message but was otherwise silently breaking outbound webhook notifications. Our developers have come to appreciate the proactive detection from our internal Zebrium service to catch these kinds of bugs early, before they can do real damage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As more users rely on software applications, the pressure to shrink MTTR and the stress of troubleshooting incidents under pressure all grow proportionally. Over the last decade a rich set of observability tools have emerged to help detect problems easily, but troubleshooting has remained very manual, driven by the instincts and experience of the engineer on call. New approaches that apply machine learning to tackle this problem can help by &lt;a href="https://www.zebrium.com/blog/youve-nailed-incident-detection-what-about-incident-resolution"&gt;drastically reducing MTTR&lt;/a&gt;, catching new bugs early, and reducing the manual effort involved in tasks like creating RCA reports and maintaining alert rules.&lt;/p&gt;

&lt;p&gt;If you're interested in using ML as part of your incident management lifecycle, please &lt;a href="https://www.zebrium.com/"&gt;visit Zebrium&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Posted with permission of the Author &lt;a href="https://www.zebrium.com/blog/author/ajay-singh"&gt;Ajay Singh&lt;/a&gt; @ Zebrium&lt;/p&gt;

</description>
    </item>
    <item>
      <title>The TRUE difference between [] and {{}} bindings in Angular</title>
      <author>ng-conf</author>
      <pubDate>Mon, 12 Apr 2021 16:47:53 +0000</pubDate>
      <link>https://dev.to/ngconf/the-true-difference-between-and-bindings-in-angular-2h9i</link>
      <guid>https://dev.to/ngconf/the-true-difference-between-and-bindings-in-angular-2h9i</guid>
      <description>&lt;p&gt;Joe Eames | ng-conf | Sep 2020&lt;/p&gt;

&lt;p&gt;One of the parts of Angular that most developers think they understand, but many don’t, is the true nature of &lt;code&gt;[]&lt;/code&gt; and &lt;code&gt;{{}}&lt;/code&gt; bindings.&lt;/p&gt;

&lt;p&gt;A fundamental lack of understanding of these bindings can become a major issue when working with templates and trying to get them to do exactly what you want. It can also be the cause of spending an unnecessary amount of hours trying to figure out a bug.&lt;/p&gt;

&lt;p&gt;So I’m going to run down exactly what these two bindings do, and what it is that many developers misunderstand about them.&lt;/p&gt;

&lt;p&gt;You’re probably familiar with the typical usage of &lt;code&gt;{{}}&lt;/code&gt; bindings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h1&amp;gt;{{title}}&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you’re probably familiar with the typical usage of &lt;code&gt;[]&lt;/code&gt; or property bindings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img [src]="imgsrc"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But do you truly understand what each binding is doing? And why we use them in this situation? Many if not most developers simply know to use &lt;code&gt;{{}}&lt;/code&gt; when putting text in an element, and &lt;code&gt;[]&lt;/code&gt; for binding to properties.&lt;/p&gt;

&lt;p&gt;But have you ever wondered with reactive forms why the &lt;code&gt;formControlName&lt;/code&gt; property doesn’t use the &lt;code&gt;[]&lt;/code&gt; binding?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input formControlName="title" &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A foundational understanding of what is going on will help you understand when and why you need to use &lt;code&gt;[]&lt;/code&gt; or &lt;code&gt;{{}}&lt;/code&gt; or nothing (like with the formControlName property)&lt;/p&gt;

&lt;p&gt;So let’s start by discussing the difference between the following two lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img [src]="imgsrc"&amp;gt;
&amp;lt;img src="{{imgsrc}}"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both will accomplish the same thing. They both set the src attribute of the image tag.&lt;/p&gt;

&lt;p&gt;It’s also important to understand that both of them are running an evaluation on the imgsrc property which must be in your component. In both, they are using Angular’s expression syntax. So you can do things like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img [src]="'/images/' + name + '.png'"&amp;gt;
&amp;lt;img src="{{'/images/' + name + '.png'}}"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is an expression that does string appending to ultimately arrive at the URL for the image, appending together a root directory, a name, and an extension.&lt;/p&gt;

&lt;p&gt;Note that you can’t mix &lt;code&gt;[]&lt;/code&gt; and &lt;code&gt;{{}}&lt;/code&gt; together on the same attribute. Angular will complain.&lt;/p&gt;

&lt;p&gt;So what’s the ultimate difference between the two?&lt;/p&gt;

&lt;p&gt;It comes down to how they function. &lt;code&gt;{{}}&lt;/code&gt; is basically a form of string interpolation. You should think of it as simply replacing the HTML string with the results of the binding, and then the HTML gets evaluated.&lt;/p&gt;

&lt;p&gt;Property binding, &lt;code&gt;[]&lt;/code&gt;, on the other hand, works differently. You should think of this as manipulating the DOM &lt;strong&gt;after&lt;/strong&gt; the HTML has been processed by the browser.&lt;/p&gt;

&lt;p&gt;So the [src] binding actually manipulates the src property of the image object, and NOT the src attribute of the img tag.&lt;/p&gt;

&lt;p&gt;The reason this matters is that the property binding - since it’s not string interpolation - can preserve data types.&lt;/p&gt;

&lt;p&gt;Consider the following part of a form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input formControlName="isVisible" name="isVisible" type="radio" 
value="true"&amp;gt; True
&amp;lt;input formControlName="isVisible" name="isVisible" type="radio" 
value="false"&amp;gt; False
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This HTML doesn’t bind the isVisible part of the form to the boolean values true and false. If you thought it does you have fallen victim to the subtle issues with binding. This code binds the isVisible property to either the string “true” or the string “false”. And any non-empty string is truthy. So if you then used that in a ngIf expression&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h1 *ngIf="myForm.value.isVisible"&amp;gt;I'm only visible if the radio 
button is set to True&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This won’t work. The ngIf will always evaluate to true.&lt;/p&gt;

&lt;p&gt;BUT if you bind to the value PROPERTY&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input formControlName="isVisible" name="isVisible" type="radio" 
[value]="true"&amp;gt; True
&amp;lt;input formControlName="isVisible" name="isVisible" type="radio" 
[value]="false"&amp;gt; False
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you are now binding the isVisible property to a boolean true or false.&lt;/p&gt;

&lt;p&gt;But you can’t do this with the &lt;code&gt;{{}}&lt;/code&gt; binding&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input formControlName="isVisible" name="isVisible" type="radio" 
value="{{true}}"&amp;gt; True
&amp;lt;input formControlName="isVisible" name="isVisible" type="radio" 
value="{{false}}"&amp;gt; False
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This produces the same result as the first example. It’s ultimately just the string “true” and the string “false”.&lt;br&gt;
That is the fundamental thing that most Angular developers don’t understand. Property bindings are actually manipulating the DOM and they get to preserve data types. Curly brace binding is string interpolation of the HTML and always results in strings.&lt;/p&gt;

&lt;p&gt;Once you understand this, you can avoid a lot of potential bugs.&lt;/p&gt;

&lt;p&gt;Happy Coding.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ngconf-the-musical-is-coming"&gt;
  &lt;/a&gt;
  &lt;strong&gt;ng-conf: The Musical is coming&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;ng-conf: The Musical is a two-day conference from the ng-conf folks coming on April 22nd &amp;amp; 23rd, 2021. Check it out at &lt;a href="https://www.2021.ng-conf.org/"&gt;ng-conf.org&lt;/a&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Presenting TypeIt: A VSCode extension for content creators</title>
      <author>Mauro Garcia</author>
      <pubDate>Mon, 12 Apr 2021 16:43:41 +0000</pubDate>
      <link>https://dev.to/mauro_codes/presenting-typeit-a-vscode-extension-for-content-creators-60d</link>
      <guid>https://dev.to/mauro_codes/presenting-typeit-a-vscode-extension-for-content-creators-60d</guid>
      <description>&lt;p&gt;Today I wanted to share with you a side-project I've been working on with &lt;a class="comment-mentioned-user" href="https://dev.to/paulasantamaria"&gt;@paulasantamaria&lt;/a&gt;
. &lt;/p&gt;

&lt;p&gt;It's called &lt;strong&gt;TypeIt: Typing animations for content creators&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;TypeIt is a VSCode extension that retypes your code so you can record it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-typeit"&gt;
  &lt;/a&gt;
  Why TypeIt?
&lt;/h1&gt;

&lt;p&gt;Sometimes we just want to write code at our own pace, test it, and, once we are comfortable, share it online as code snippets or tutorials. We may not want to memorize and write the code all over again just to record it. That's when TypeIt comes in. Use it to automatically retype the code you want to share.&lt;/p&gt;

&lt;p&gt;Plus, you can choose different modes, adjust the typing speed and even retype multiple documents in parallel!&lt;/p&gt;

&lt;p&gt;This video demonstrates how TypeIt can be used to create and share content:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1_GBQnNuZ5Q"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#more-info"&gt;
  &lt;/a&gt;
  More info
&lt;/h1&gt;

&lt;p&gt;If you want to learn more about it, you can visit our &lt;a href="https://typeit.uppernauts.com/"&gt;website&lt;/a&gt;.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#we-would-love-to-hear-your-thoughts"&gt;
  &lt;/a&gt;
  We would love to hear your thoughts 💬
&lt;/h1&gt;

&lt;p&gt;What do you think about TypeIt?&lt;br&gt;
Would you try it?&lt;br&gt;
Let us know if you have any questions or feedback in the comments below👇&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>vscode</category>
      <category>plugins</category>
      <category>tools</category>
    </item>
    <item>
      <title>Questions to ask in Frontend Engineer interviews </title>
      <author>Jordi Enric</author>
      <pubDate>Mon, 12 Apr 2021 16:41:50 +0000</pubDate>
      <link>https://dev.to/jordienr/questions-to-ask-in-frontend-engineer-interviews-4b4j</link>
      <guid>https://dev.to/jordienr/questions-to-ask-in-frontend-engineer-interviews-4b4j</guid>
      <description>&lt;p&gt;Here are some of the questions I've asked in interviews.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What stack would I be working on?&lt;/li&gt;
&lt;li&gt;What stack is the backend written on?&lt;/li&gt;
&lt;li&gt;How is the relationship with the backend teams or design teams?&lt;/li&gt;
&lt;li&gt;Would I be able to participate in design decisions?&lt;/li&gt;
&lt;li&gt;What is the design / frontend development process like?&lt;/li&gt;
&lt;li&gt;How do you measure developers performance?&lt;/li&gt;
&lt;li&gt;What is the best and worst part of working there? (Ask to another developer)&lt;/li&gt;
&lt;li&gt;What are the biggest challenges of your project?&lt;/li&gt;
&lt;li&gt;What can you tell me about the project?&lt;/li&gt;
&lt;li&gt;What would you expect from me in X time to promote me to a senior role?&lt;/li&gt;
&lt;li&gt;Do you give access to education tools / platforms (Egghead, Pluralsight, Frontend Masters)?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And once the interviews are over I always ask for feedback no matter the outcome.&lt;/p&gt;

&lt;p&gt;Do you have any questions that are not on this list? Share them in the comments and I'll add them ✌&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/jordienr"&gt;twitter&lt;/a&gt; for more&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>career</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Comparing Flask and Django</title>
      <author>Sophia Iroegbu</author>
      <pubDate>Mon, 12 Apr 2021 16:27:36 +0000</pubDate>
      <link>https://dev.to/sophyia/comparing-flask-and-django-4lao</link>
      <guid>https://dev.to/sophyia/comparing-flask-and-django-4lao</guid>
      <description>&lt;p&gt;Python is one of the most widely used programming languages, thanks to its clean, readable code and adaptability. It is also in high demand due to its wide variety of web frameworks, which can quickly transform your project from a mere concept to an amazing reality. There are numerous frameworks, but only two stand out: &lt;strong&gt;Flask&lt;/strong&gt; and &lt;strong&gt;Django&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now let's compare Flask and Django based on some of the core framework's features:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-database"&gt;
  &lt;/a&gt;
  The Database:
&lt;/h1&gt;

&lt;p&gt;Django has a robust Object Relational Mapping (ORM) framework that supports a variety of relational databases such as SQLite, PostgreSQL, MySQL, and Oracle, as well as managing and generating database migrations.&lt;br&gt;
Flask makes no promises on how data is stored, but there are several libraries and extensions available to assist with this: Flask-SQLAlchemy, Flask-Alembic, Flask-Peewee, and so on.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#administrator"&gt;
  &lt;/a&gt;
  Administrator:
&lt;/h1&gt;

&lt;p&gt;Django has a powerful admin screen, which is a desktop application with a user interface for handling data based on the templates. Django excels in this field as well. It enables you to easily execute &lt;em&gt;CRUD operations&lt;/em&gt; on your templates when building out an application without writing any additional code. &lt;br&gt;
Again, Flask does not come with anything like this by itself, but the Flask-Admin extension has the same functionality.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#views-and-routing"&gt;
  &lt;/a&gt;
  Views and Routing:
&lt;/h1&gt;

&lt;p&gt;Both frameworks support mapping URLs to views and feature and class-based views, but Django fits a URL pattern, the request object, which contains the HTTP request content.&lt;br&gt;
Flask makes use of Werkzeug to provide URL routing and request/response handling. It requires that the item in Flask be global in order for it to have easy access to it (as long as you import it).&lt;br&gt;
URLs are typically specified alongside the view (via a decorator), but they can be broken out into a centralized position, similar to the Django pattern.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security:
&lt;/h1&gt;

&lt;p&gt;Django has built-in defense against a variety of standard attack vectors such as CSRF, XSS, and SQL injection. This security features help to protect the code from bugs. In addition, the Django development team proactively discloses and promptly patches identified security bugs. Flask, on the other hand, has a much narrower code base, which means there is less surface area to strike. However, when security flaws in your hand-crafted app code emerge, you will need to correct and patch them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;It isn't so much about the right structures as it is about personal preference. Simply enjoy yourself when coding.&lt;/p&gt;

</description>
      <category>python</category>
      <category>django</category>
      <category>flask</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
