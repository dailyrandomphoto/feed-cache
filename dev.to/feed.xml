<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How the Nullish Coalescing Operator Works in JavaScript</title>
      <author>Yogesh Chavan</author>
      <pubDate>Fri, 23 Apr 2021 05:45:49 +0000</pubDate>
      <link>https://dev.to/myogeshchavan97/how-the-nullish-coalescing-operator-works-in-javascript-146b</link>
      <guid>https://dev.to/myogeshchavan97/how-the-nullish-coalescing-operator-works-in-javascript-146b</guid>
      <description>&lt;p&gt;ES11 has added a nullish coalescing operator which is denoted by double question marks, like this: &lt;code&gt;??&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this article, we will explore why it's so useful and how to use it.&lt;/p&gt;

&lt;p&gt;Let's get started.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Want to learn Redux from the absolute beginning and build a food ordering app from scratch? Check out the &lt;a href="https://master-redux.yogeshchavan.dev/"&gt;Mastering Redux&lt;/a&gt; course.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#background-information"&gt;
  &lt;/a&gt;
  Background Information
&lt;/h2&gt;

&lt;p&gt;In JavaScript, there is a short-circuit logical OR operator &lt;code&gt;||&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;||&lt;/code&gt; operator returns the first &lt;code&gt;truthy&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;The following are the &lt;code&gt;only eight&lt;/code&gt; values that are considered to be &lt;code&gt;falsy&lt;/code&gt; values in JavaScript.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;false&lt;/li&gt;
&lt;li&gt;undefined&lt;/li&gt;
&lt;li&gt;null&lt;/li&gt;
&lt;li&gt;""(empty string)&lt;/li&gt;
&lt;li&gt;NaN&lt;/li&gt;
&lt;li&gt;0&lt;/li&gt;
&lt;li&gt;-0&lt;/li&gt;
&lt;li&gt;0n ( BigInt zero)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So if anything is not in the above list, then it will be considered a &lt;code&gt;truthy&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Truthy&lt;/code&gt; and &lt;code&gt;Falsy&lt;/code&gt; values are the non-boolean values that are coerced to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; when performing certain operations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value1&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As the &lt;code&gt;||&lt;/code&gt; operator returns the first &lt;code&gt;truthy&lt;/code&gt; value, in the above code, the &lt;code&gt;result&lt;/code&gt; will be the value stored in &lt;code&gt;value1&lt;/code&gt; which is &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;value1&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;empty&lt;/code&gt; or any other &lt;code&gt;falsy&lt;/code&gt; value, then the next operand after the&lt;code&gt;||&lt;/code&gt; operator will be evaluated and that will the result of the total expression.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value1&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;value2&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;value3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 23&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, because &lt;code&gt;value1&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;value2&lt;/code&gt; will be checked. As it's a &lt;code&gt;truthy&lt;/code&gt; value, the result of the entire expression will be the &lt;code&gt;value2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The issue with the &lt;code&gt;||&lt;/code&gt; operator is that it doesn’t distinguish between &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, an empty string &lt;code&gt;""&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;. They all are considered as &lt;code&gt;falsy&lt;/code&gt; values.&lt;/p&gt;

&lt;p&gt;If any of these is the first operand of &lt;code&gt;||&lt;/code&gt;, then we’ll get the second operand as the result.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-javascript-needed-the-nullish-coalescing-operator"&gt;
  &lt;/a&gt;
  Why JavaScript Needed the Nullish Coalescing Operator
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;||&lt;/code&gt; operator works great but sometimes we only want the next expression to be evaluated when the first operand is only either null or undefined.&lt;/p&gt;

&lt;p&gt;Therefore, ES11 has added the nullish coalescing operator.&lt;/p&gt;

&lt;p&gt;In the expression &lt;code&gt;x ?? y&lt;/code&gt;,&lt;/p&gt;

&lt;p&gt;If x is either &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; then only result will be &lt;code&gt;y&lt;/code&gt;.&lt;br&gt;
If x is &lt;strong&gt;not&lt;/strong&gt; &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; then the result will be &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This will make the conditional checks and debugging code an easy task.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#try-it-yourself"&gt;
  &lt;/a&gt;
  Try it yourself
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Hello&lt;/span&gt;

&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 45&lt;/span&gt;

&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// ""&lt;/span&gt;

&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;NaN&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// NaN&lt;/span&gt;

&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false because 4 &amp;gt; 5 evaluates to false&lt;/span&gt;

&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true because 4 &amp;lt; 5 evaluates to true&lt;/span&gt;

&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [1, 2, 3]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So from all of the above examples, it's clear that the result of the operation &lt;code&gt;x ?? y&lt;/code&gt; is &lt;code&gt;y&lt;/code&gt; only when &lt;code&gt;x&lt;/code&gt; is either &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In all the other cases, the result of the operation will always be x.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As you have seen, the nullish coalescing operator is really useful when you only care about the &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; value for any variable.&lt;/p&gt;

&lt;p&gt;Starting with ES6, there are many useful additions to JavaScript like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ES6 Destructuring&lt;/li&gt;
&lt;li&gt;Import and Export Syntax&lt;/li&gt;
&lt;li&gt;Arrow functions&lt;/li&gt;
&lt;li&gt;Promises&lt;/li&gt;
&lt;li&gt;Async/await&lt;/li&gt;
&lt;li&gt;Optional chaining operator
and a lot more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;You can learn everything about all the ES6+ features in detail in my &lt;a href="https://modernjavascript.yogeshchavan.dev/"&gt;Mastering Modern JavaScript&lt;/a&gt; book.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Check out free preview contents of the book &lt;a href="https://www.freecodecamp.org/news/learn-modern-javascript/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also, you can check out my &lt;strong&gt;free&lt;/strong&gt; &lt;a href="https://yogeshchavan1.podia.com/react-router-introduction"&gt;Introduction to React Router&lt;/a&gt; course to learn React Router from scratch.&lt;/p&gt;

&lt;p&gt;Want to stay up to date with regular content regarding JavaScript, React, Node.js? &lt;a href="https://www.linkedin.com/in/yogesh-chavan97/"&gt;Follow me on LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/3w0DGum"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Taa9-Eif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gist.github.com/myogeshchavan97/98ae4f4ead57fde8d47fcf7641220b72/raw/c3e4265df4396d639a7938a83bffd570130483b1/banner.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>The Future of Apps — JS vs Native?</title>
      <author>koshti Rahul</author>
      <pubDate>Fri, 23 Apr 2021 04:43:06 +0000</pubDate>
      <link>https://dev.to/gnral_opll/the-future-of-apps-js-vs-native-53d</link>
      <guid>https://dev.to/gnral_opll/the-future-of-apps-js-vs-native-53d</guid>
      <description>&lt;p&gt;Recently, I have seen a trend of compiling JavaScript into and using WebGL’s JavaScript interface to leverage native mobile apps. The question is if that will become mainstream.&lt;/p&gt;

&lt;p&gt;We all know that JavaScript—a language created in ten days as a “hobby script” of Java—has since become a lingua franca of the internet. Despite its many flaw and grotesque, it is very welcoming to new programmers and even those with little programming experience. It is the top language on Github, exists everywhere from the server to microcontroller, and has all kinds of data source and APIs on the web providing interfaces to it. You can certainly do almost everything using the language. To say that JavaScript is a universal language is not an overstatement.&lt;/p&gt;

&lt;p&gt;One interesting approach to the language is in mobile applications. The mobile devices can be compared to the brick-and-mortar window shops and the apps are products and services developers place on their marketplaces to sell to the world. A major nuisance is the war on standard. Each vendor of the tech world—Apple, Google, and Microsoft—for good reasons strive to develop its own standard of developing on its platform. Information is power, and the recipes and tools are as valuable a leverage to their trades as their main products themselves. However, this sure posts some inconvenience to the end developers who often want to develop their products for as many platforms and as fast as possible. To say the least, it is not common to find a developer who is very good in Objective-C for iOS as in Java for Android, .NET for Windows and HTML/JavaScript for the web. In fact, native app developers have a very different skillset than those developing the web apps.&lt;/p&gt;

&lt;p&gt;That’s why it is really interesting to see one language that’s leveraging all platforms. How appealing it is to write your code one time and run everywhere? There is a kind of democratic feel to it. And the good thing is that it isn’t from niceties that vendors like Apple and Google are allowing JavaScript-powered app to be run using technology like Cordova and launched on their marketplaces. It’s a necessity, and that’s the real power of capitalism and bargain.&lt;/p&gt;

&lt;p&gt;Read More :: &lt;a href="https://cmsinstallation.blogspot.com/2021/04/the-future-of-apps-js-vs-native.html"&gt;https://cmsinstallation.blogspot.com/2021/04/the-future-of-apps-js-vs-native.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>android</category>
      <category>ios</category>
      <category>programming</category>
      <category>design</category>
    </item>
    <item>
      <title>Top website tự học đồ họa tại nhà hoàn toàn miễn phí</title>
      <author>Joney</author>
      <pubDate>Fri, 23 Apr 2021 04:33:42 +0000</pubDate>
      <link>https://dev.to/jonynguyen/top-website-t-h-c-d-h-a-t-i-nha-hoan-toan-mi-n-phi-1if0</link>
      <guid>https://dev.to/jonynguyen/top-website-t-h-c-d-h-a-t-i-nha-hoan-toan-mi-n-phi-1if0</guid>
      <description>&lt;p&gt;Trong thế giới thị giác của chúng ta; thiết kế đồ họa là một kỹ năng ngày càng quan trọng đối với tất cả các loại sáng tạo cần có. Đối với các nhiếp ảnh gia và nhà sáng tạo trong thế giới thời trang; việc biết các kiến ​​thức cơ bản về Photoshop và các nguyên tắc thiết kế đồ họa là rất quan trọng để mang lại cho tác phẩm của bạn sự chuyên nghiệp. Đối với các họa sĩ minh họa và nghệ sĩ, thiết kế đồ họa là một phần cơ bản của công việc, tất cả lý do để tiếp tục mở rộng các kỹ năng và kiến ​​thức thiết kế của bạn và trong dev.to ngày hôm nay mình xin chia sẻ đến mọi người tổng hợp các website tự học đồ họa tại nhà hoàn toàn miễn phí bên dưới đây&lt;/p&gt;

&lt;h2&gt;Làm thế nào để tự học thiết kế đồ họa.&lt;/h2&gt;

&lt;p&gt;Trở thành một nhà thiết kế đồ họa không nhất thiết phải học ở trường; trên thực tế, nếu bạn làm theo các bước dưới đây, bạn sẽ vững bước trên con đường trở thành một nhà thiết kế chuyên nghiệp.&lt;/p&gt;

&lt;p&gt;Hiểu các nguyên tắc cốt lõi của thiết kế đồ họa.&lt;br&gt;
Bắt đầu với lịch sử thiết kế đồ họa the history of graphic design (cuốn sách này rất cần thiết)&lt;br&gt;
Làm quen với quy trình thiết kế đồ họa &amp;amp; giải quyết vấn đề một cách sáng tạo&lt;br&gt;
Xem xét việc học tập và phát triển các kỷ năng nâng cao (trực tuyến hoặc tại trường)&lt;br&gt;
Học hỏi từ các nhà thiết kế đồ họa chuyên nghiệp&lt;br&gt;
Phát triển trình độ, trực giác và phong cách của bạn&lt;br&gt;
Chuẩn bị một trang Port Folio hoặc Blog để thể hiện kinh  nghiệm của bản thân.&lt;br&gt;
Tham gia vào cộng đồng thiết kế đồ họa chuyên nghiệp&lt;br&gt;
Đa dạng hóa kỹ năng của bạn (đăng ký khóa học khác)&lt;br&gt;
Tìm việc làm như một nhà thiết kế đồ họa tự do&lt;/p&gt;

&lt;h2&gt;Khóa học Design từ Skillshare miễn phí.&lt;/h2&gt;

&lt;p&gt;Skillshare cung cấp rất nhiều khóa học ngắn &amp;amp; chuyên sâu xoay quanh thiết kế đồ họa. Nhiều trong số này có sẵn miễn phí hoặc với một thuê bao trả phí, bạn có thể truy cập tất cả. Để giúp những người mới bắt đầu,  ta cùng tham khảo một vài khóa học miễn phí tuyệt vời. (Tự học Design)&lt;/p&gt;

&lt;h3&gt;Blog hỗ trợ - Tự học photoshop tại nhà dành cho người Việt&lt;/h3&gt;

&lt;p&gt;Trên trang blog hỗ trợ có một chuyên mục &lt;a href="https://bloghotro.com/tu-hoc/"&gt;tự học&lt;/a&gt; dành cho người Việt Nam (ngôn ngữ tiếng Việt) sử dụng với những mẹo để thực hiện các phần mềm photoshop, các lỗi khi gặp phải cũng như các vấn đề liên quan đều nằm trong phần mục này. Mọi người có thể tham khảo thông qua đường link &lt;a href="https://bloghotro.com/tu-hoc-photoshop/"&gt;https://bloghotro.com/tu-hoc-photoshop/&lt;/a&gt; và theo dõi danh mục này mỗi ngày khoảng 1 đến 2 tiếng sẽ giúp ích rất nhiều cho việc thiết kế đồ họa.&lt;br&gt;
Ngoài ra, trên website còn mang đến cho người dùng nhiều thông tin giá trị khác giúp người xem hiểu hơn về công nghệ cũng như code nên dev.to mong muốn mọi người theo dõi trang &lt;a href="http://www.bloghotro.com"&gt;www.bloghotro.com&lt;/a&gt; mỗi ngày để hoàn thiện hơn nhé&lt;/p&gt;

&lt;h3&gt;Graphic Design Basics: Core Principles for Visual Design&lt;/h3&gt;

&lt;p&gt;Cho dù bạn là người mới đối với thiết kế đồ họa hay đã có bề dày kinh nghiệm, mọi người đều phải bắt đầu từ điều cơ bản nhất. Đó là trọng tâm của Khái niệm cơ bản về Thiết kế đồ họa: Nguyên tắc cốt lõi cho khóa học Thiết kế trực quan mà trong lớp học 35 phút của nó sẽ đưa bạn qua 5 nguyên tắc cơ bản của thiết kế đồ họa.&lt;/p&gt;

&lt;p&gt;Khóa học đồ họa online miễn phí này sẽ cho bạn thấy những nguyên tắc cơ bản để sử dụng trong tất cả các dự án từ thiết kế sáng tạo, tiếp thị, thậm chí là chụp ảnh. Qua khóa học, bạn học được:&lt;/p&gt;

&lt;p&gt;Cách xác định và xác định 5 nguyên tắc cơ bản của thiết kế&lt;br&gt;
Làm thế nào để kiểm soát công việc của chính mình để tìm kiếm sự cân bằng và hiệu quả&lt;br&gt;
Tìm hiểu cách bạn có thể áp dụng từng khái niệm cho các dự án tương lai của mình&lt;/p&gt;

&lt;h4&gt;Khóa học đồ họa online miễn phí từ U.d.e.m.y&lt;/h4&gt;

&lt;p&gt;Được thành lập vào năm 2009, Udemy là một nền tảng học tập trực tuyến được tạo ra để giúp mọi người học các kỹ năng mới. Nhiều khóa học trên Udemy có thể hoàn hảo cho ai đó muốn học thiết kế đồ họa.&lt;/p&gt;

&lt;h3&gt;Learn Adobe Photoshop từ số không.&lt;/h3&gt;

&lt;p&gt;Được tạo bởi Eduonix Learning Solutions; chương trình miễn phí này cung cấp cho sinh viên 8 giờ video; để tham gia lớp học bạn chỉ cần cài đặt Photoshop trên máy tính của mình. Một khóa học toàn diện giới thiệu người mới bắt đầu các nguyên tắc Photoshop chuyên nghiệp.&lt;/p&gt;

&lt;p&gt;Khóa học được cấu trúc để cung cấp cho bạn một khóa đào tạo thực hành về phần mềm; trong khi chia sẻ các mẹo và thủ thuật mà chuyên gia sử dụng.  Kỹ thuật và hiệu ứng được giảng dạy thông qua các bài giảng quy trình chi tiết. Học Adobe Photoshop từ số không là một lớp tuyệt vời cho bất cứ ai muốn tận dụng tối đa Adobe Photoshop.&lt;/p&gt;

&lt;h3&gt;Canva Design School&lt;/h3&gt;

&lt;p&gt;Canva đã phát triển trở thành một trường thiết kế để những người không có nhiều kinh nghiệm với thiết kế đồ họa tìm hiểu những điều cơ bản và một số gợi ý hữu ích.&lt;/p&gt;

&lt;p&gt;Nội dung các khóa học Thiết kế của trang web của họ cung cấp cho sinh viên một số tài nguyên rất có lợi cho người mới bắt đầu; và cả những người có một chút kinh nghiệm hoặc bất kỳ ai làm việc trong thiết kế đồ họa. Một khóa học khởi đầu tuyệt vời cho bất cứ ai muốn tìm hiểu những điều cơ bản của thiết kế.&lt;/p&gt;

&lt;h3&gt;Typography That Works: Typographic Composition and Fonts&lt;/h3&gt;

&lt;p&gt;Khi bạn bắt đầu làm một nhà thiết kế đồ họa, bạn có thể dành nhiều thời gian để hoàn thiện logo mô tả thương hiệu của bạn cho các khách hàng tiềm năng; nhưng còn kiểu chữ trên trang web hoặc danh thiếp của bạn thì sao? Điều đó nói gì với khách hàng của bạn về không chỉ doanh nghiệp của bạn mà còn về bạn nữa?&lt;/p&gt;

&lt;p&gt;Được giảng dạy bởi Ellen Lupton, người phụ trách thiết kế đương đại tại Bảo tàng Thiết kế Cooper Hewitt Smithsonian; sẽ giúp dạy cho bạn sự khác biệt giữa kiểu chữ tốt, có thể rất có lợi cho bạn hoặc khách hàng của bạn.&lt;/p&gt;

&lt;p&gt;Trong khóa học này, bạn sẽ học:&lt;/p&gt;

&lt;p&gt;Sans + Structure – Tìm hiểu những gì mang lại cho sans serif kiểu chữ đặc biệt của nó&lt;br&gt;
Serif + Details – Khai thác các chi tiết của gia đình kiểu serif toàn thân&lt;br&gt;
Slab + Customization – Tìm hiểu phải làm gì với mặt phiến, được mô tả là đồ nội thất nặng bởi giáo trình&lt;/p&gt;

</description>
      <category>bloghotro</category>
    </item>
    <item>
      <title>Why is the demand for full stack MERN developers constantly increasing for business Projects?
</title>
      <author>Alexis Gilbert</author>
      <pubDate>Fri, 23 Apr 2021 04:28:53 +0000</pubDate>
      <link>https://dev.to/alexisdevs/why-is-the-demand-for-full-stack-mern-developers-constantly-increasing-for-business-projects-459m</link>
      <guid>https://dev.to/alexisdevs/why-is-the-demand-for-full-stack-mern-developers-constantly-increasing-for-business-projects-459m</guid>
      <description>&lt;p&gt;MERN the word itself is made out of the combination of MongoDB, ExpressJS, ReactJS, NodeJS.&lt;/p&gt;

&lt;p&gt;In other words, it’s a fantastic combo of the technical stacks of Frontend, server, and Database together is called MERN. The Developer working with this fantastic combination is called &lt;strong&gt;Full stack MERN Developer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As I have observed in this Developing industry, the demand for MEAN and MERN Fullstack Developers is quite rising compared to other specialized Developers around the world.&lt;/p&gt;

&lt;p&gt;We are going to discover the reasons behind this rapidly booming demand for Full stack Mern Developers.&lt;/p&gt;

&lt;p&gt;Checkout its demand in last few years yourself it has increased and been increasing since then.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bR5n3pQO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EzoWMFJVEAMRCRi%3Fformat%3Djpg%26name%3Dlarge" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bR5n3pQO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/EzoWMFJVEAMRCRi%3Fformat%3Djpg%26name%3Dlarge" alt="MERN full stack developer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Smooth rendering and better documentation is MERN Developments one of the specialty; however, there are few others lets dig deeper into it further,&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#advantages-of-mern-full-stack-development-services"&gt;
  &lt;/a&gt;
  Advantages of MERN Full stack Development services:
&lt;/h1&gt;

&lt;p&gt;MERN is a widely preferred technical stack to take your business to the next level. This can become possible due to the Robust frontend technology ReactJS and Open source framework NodeJS, a powerful backup to build highly scalable and rapid server-side applications.&lt;/p&gt;

&lt;p&gt;On the other hand, The open-source NoSQL database Mongo DB allows the business to follow Agile culture more accurately. ExpressJS enables you to build feature-rich dynamic portal applications.&lt;/p&gt;

&lt;p&gt;The eye-catching benefits Full stack MERN Developers as below,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;For smooth development process, it supports MVC architecture&lt;/li&gt;
&lt;li&gt;Extensive open source community support&lt;/li&gt;
&lt;li&gt;To learn this, the knowledge of JS and JSON is quite enough for developers.&lt;/li&gt;
&lt;li&gt;The entire development cycle is covered from frontend to backend with the help of Javascript&lt;/li&gt;
&lt;li&gt;A substantial set of testing tools&lt;/li&gt;
&lt;li&gt;Can construct a web application from the ground to the top.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s go through other specific developing arenas in which Full stack MERN Developers more desirable.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enterprise App Development&lt;/li&gt;
&lt;li&gt;E-commerce Web app development&lt;/li&gt;
&lt;li&gt;Developing web apps in general&lt;/li&gt;
&lt;li&gt;Scalable CMS Development&lt;/li&gt;
&lt;li&gt;Porting and Migration&lt;/li&gt;
&lt;li&gt;Custom App Development&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, if we think about it, there is no silver bullet in the web development world. &lt;em&gt;MERN Full stack services&lt;/em&gt; are everything best comes in a one package deal.&lt;/p&gt;

&lt;p&gt;Once you opt for this technical stack, you are getting the best recipe to build a Highly scalable and extensive web application no matter what kind of requirement you have.&lt;/p&gt;

&lt;p&gt;Furthermore, suppose you get the assistance of a globally renowned MERN stack Development company. In that case, you are not getting access to the top 1% expert talent but also getting an assurance of building a robust web application when you hire the expert and experienced &lt;a href="https://www.bacancytechnology.com/mern-stack-development"&gt;&lt;strong&gt;Full stack MERN Developer&lt;/strong&gt;&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>javascript</category>
      <category>react</category>
      <category>devops</category>
    </item>
    <item>
      <title>Netflix-clone</title>
      <author>I am Nk</author>
      <pubDate>Fri, 23 Apr 2021 03:24:18 +0000</pubDate>
      <link>https://dev.to/workwithnk/netflix-clone-58m0</link>
      <guid>https://dev.to/workwithnk/netflix-clone-58m0</guid>
      <description>&lt;p&gt;It is a simple react and firebase project to understanding the fundamentals and how to combine react + firebase .&lt;br&gt;
visit : &lt;a href="https://netflix-clone-by-nk.web.app/"&gt;https://netflix-clone-by-nk.web.app/&lt;/a&gt; &lt;/p&gt;

</description>
      <category>react</category>
      <category>firebase</category>
      <category>tmdb</category>
    </item>
    <item>
      <title>LeetCode 64. Minimum Path Sum
(javascript solution)</title>
      <author>codingpineapple</author>
      <pubDate>Fri, 23 Apr 2021 03:19:03 +0000</pubDate>
      <link>https://dev.to/cod3pineapple/leetcode-64-minimum-path-sum-javascript-solution-5b4o</link>
      <guid>https://dev.to/cod3pineapple/leetcode-64-minimum-path-sum-javascript-solution-5b4o</guid>
      <description>&lt;h3&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  Description:
&lt;/h3&gt;

&lt;p&gt;Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.&lt;/p&gt;

&lt;p&gt;Note: You can only move either down or right at any point in time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution:
&lt;/h3&gt;

&lt;p&gt;Time Complexity : O(n^2)&lt;br&gt;
Space Complexity: O(n^2)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;minPathSum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Create table&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="c1"&gt;// Add starting value&lt;/span&gt;
    &lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="c1"&gt;// Populate table&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Add current cell total to cells to the right and below if the current cell + grid value of cell right/below is less than that cell's current total&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;dp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Console Application Input Library in Java.</title>
      <author>Kooin-Shin</author>
      <pubDate>Fri, 23 Apr 2021 02:51:31 +0000</pubDate>
      <link>https://dev.to/kooin/console-application-input-library-in-java-44jg</link>
      <guid>https://dev.to/kooin/console-application-input-library-in-java-44jg</guid>
      <description>&lt;p&gt;Hi all, &lt;br&gt;
I will introduce a library to build console application with more easier, and with this library, you can make fine interactive methodology on your console application.&lt;/p&gt;

&lt;p&gt;You can define queries for user input using this library on your application and later, you able to use the input data in your code.&lt;/p&gt;

&lt;p&gt;All queries are managed with YAML file and you can redefine message content of it. &lt;br&gt;
You can manage trigger process by implementing ConsoleTrigger interface and treat user input data on this object.&lt;/p&gt;

&lt;p&gt;More detail thing of this library to get, you can have it to visit below GitHub project.&lt;/p&gt;

&lt;p&gt;GitHub link: [console-input][&lt;a href="https://github.com/9ins/console-input-manager/tree/1.0.0"&gt;https://github.com/9ins/console-input-manager/tree/1.0.0&lt;/a&gt;]&lt;/p&gt;

</description>
      <category>java</category>
      <category>console</category>
      <category>input</category>
    </item>
    <item>
      <title>April 22nd, 2021: What did you learn this week?</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Fri, 23 Apr 2021 02:31:42 +0000</pubDate>
      <link>https://dev.to/nickytonline/april-22nd-2021-what-did-you-learn-this-week-41fk</link>
      <guid>https://dev.to/nickytonline/april-22nd-2021-what-did-you-learn-this-week-41fk</guid>
      <description>&lt;p&gt;It's that time of the week again. So wonderful devs, what did you learn this week? It could be programming tips, career advice etc.&lt;/p&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/ojmB7lOn3VUU8/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/ojmB7lOn3VUU8/giphy.gif" alt="Image of the brain"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;


&lt;/center&gt;

&lt;p&gt;Feel free to comment with what you learnt and/or reference your TIL post to give it some more exposure.&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__5305"&gt;
  
    .ltag__tag__id__5305 .follow-action-button{
      background-color: #ffedc9 !important;
      color: #820000 !important;
      border-color: #ffedc9 !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="/t/todayilearned" class="ltag__tag__link"&gt;todayilearned&lt;/a&gt; 
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        Summarize a concept that is new to you.
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>weeklylearn</category>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>Creating a CLI Gem for My Flatiron School Project  </title>
      <author>Carley Tripp</author>
      <pubDate>Fri, 23 Apr 2021 00:49:22 +0000</pubDate>
      <link>https://dev.to/carleytripp/creating-a-cli-gem-for-my-flatiron-school-project-d25</link>
      <guid>https://dev.to/carleytripp/creating-a-cli-gem-for-my-flatiron-school-project-d25</guid>
      <description>&lt;p&gt;For my first portfolio project, I was challenged to program a CLI application with good object oriented code. I had to scrape a website and write a program that would offer a list of available data and information about that data that went at least one level deep. Sounds easy, right? Wrong. The task was actually quite daunting for a beginner like me.&lt;/p&gt;

&lt;p&gt;All of our previous lessons and labs offered pretty direct instructions on what we were supposed to do. Now that I was on my own, I started to panic. Which website would I choose? What kind of methods should I write? Do I really even know how to code?? Fortunately, my senses came back to me after a few minutes (or hours) of freaking out.&lt;/p&gt;

&lt;p&gt;I remembered that I had spent weeks preparing for this very moment. All the information I had absorbed from the lessons, labs, and lectures before was still there in my brain. I just needed to fish it out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;p&gt;I was given a few requirements to meet:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Provide a CLI&lt;/li&gt;
&lt;li&gt;CLI must provide access to data from a web page.&lt;/li&gt;
&lt;li&gt;The data provided must go at least one level deep, generally by showing the user a list of available data and then being able to drill down into a specific item.&lt;/li&gt;
&lt;li&gt;The CLI application can not be a Music CLI application as that is too similiar to the other OO Ruby final project. Also please refrain from using Kickstarter as that was used for the scraping 'code along'.&lt;/li&gt;
&lt;li&gt;Use good OO design patterns. You should be creating a collection of objects - not hashes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There were also bonus points up for grab if I could create and publish a gem to &lt;a href="https://rubygems.org/"&gt;RubyGems&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preparation"&gt;
  &lt;/a&gt;
  Preparation
&lt;/h2&gt;

&lt;p&gt;After contemplating for some time, I decided on programming a science news reader. I quickly browsed my way over to the &lt;a href="http://www.sciencemag.org/"&gt;Science&lt;/a&gt; website in order to check it out. Bingo! It was perfect. The latest news was laid out in a nice order, and each story was contained within a list element that could easily be scraped. Now, I just had to figure out how to make a gem.&lt;/p&gt;

&lt;p&gt;There were a number of resources provided to help me get started. Among them was this &lt;a href="https://www.youtube.com/watch?v=_lDExWIhYKI"&gt;walkthrough video&lt;/a&gt; filmed by Avi. Admittedly, I had to start over a couple of times before getting everything in order, but I ended up successfully creating my first Ruby gem! Awesome.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-the-code"&gt;
  &lt;/a&gt;
  Writing the code
&lt;/h2&gt;

&lt;p&gt;I began by creating two classes called CLI and Story. The CLI class would be responsible for greeting the user, listing the stories available to read, and providing menu options. I decided to include the scraper methods in my Story class rather than creating a separate class for scraping. This was because my scraper methods were rather small, and the class itself didn't contain much else.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0QNWQXHw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/RaRZfDq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0QNWQXHw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/RaRZfDq.png" alt="Imgur"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code quickly came together thanks to my earlier method stubs. If you don't know what method stubs are, they're basically little pieces of code that act as a placeholder for later functionality. For example, instead of the functional code written in the list method pictured above, I originally had something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;puts "Bees!"
puts "Volcano Story"
puts "Why Science Rocks"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After writing all the necessary code, I was finally ready to publish my gem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#launch-tada"&gt;
  &lt;/a&gt;
  Launch 🎉
&lt;/h2&gt;

&lt;p&gt;Publishing my gem to RubyGems was super easy. Bundler created a rakefile when I made my gem so all I had to do was run 'rake install'. This allowed me to make sure everything was in working order before actually releasing my gem into the wild. When I was satisfied with the program, I used 'rake release' to publish.&lt;/p&gt;

&lt;p&gt;You can check the gem out &lt;a href="https://rubygems.org/gems/sciencemag_latest_news"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>cli</category>
      <category>gem</category>
      <category>ruby</category>
    </item>
    <item>
      <title>Azure SQL Revealed
A Guide to the Cloud for SQL Server Professionals</title>
      <author>Truong</author>
      <pubDate>Fri, 23 Apr 2021 00:48:56 +0000</pubDate>
      <link>https://dev.to/truong/azure-sql-revealed-a-guide-to-the-cloud-for-sql-server-professionals-2c2c</link>
      <guid>https://dev.to/truong/azure-sql-revealed-a-guide-to-the-cloud-for-sql-server-professionals-2c2c</guid>
      <description>&lt;p&gt;&lt;a href="https://reader.apressbooks.com/Microsoft/azure-sql-revealed/?ocid=eml_pg240146_gdc_comm_az&amp;amp;mkt_tok=MTU3LUdRRS0zODIAAAF8mbQv3PpmJIo-HIHrTgp08CgGEhbfmkrRsguNXYuDUgFvKIW74-CudPgxb5mopxnB17ak8XSQbSyHIc_-TdtmCJJvbDlwM5iznmd6GYBQ69tGJ2cLSyE"&gt;Download your free copy of Azure SQL Revealed&lt;/a&gt; to:&lt;br&gt;
Learn by doing as you work through examples and code downloads.&lt;/p&gt;

&lt;p&gt;Understand the different Azure SQL services: SQL Server on Azure Virtual Machines, Azure SQL Managed Instance, and Azure SQL Database.&lt;/p&gt;

&lt;p&gt;Determine which Azure SQL option best meets your needs.&lt;br&gt;
Master securing your data, boosting performance, and achieving high availability with Azure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://reader.apressbooks.com/Microsoft/azure-sql-revealed/?ocid=eml_pg240146_gdc_comm_az&amp;amp;mkt_tok=MTU3LUdRRS0zODIAAAF8mbQv3PpmJIo-HIHrTgp08CgGEhbfmkrRsguNXYuDUgFvKIW74-CudPgxb5mopxnB17ak8XSQbSyHIc_-TdtmCJJvbDlwM5iznmd6GYBQ69tGJ2cLSyE"&gt;DOWNLOAD NOW&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#azure-microsoft-sql-data-database-microsoftazure"&gt;
  &lt;/a&gt;
  azure #microsoft #sql #data #database #microsoftazure
&lt;/h1&gt;

</description>
      <category>azure</category>
      <category>microsoftazure</category>
      <category>sql</category>
      <category>database</category>
    </item>
    <item>
      <title>100 days of machine learning </title>
      <author>deepdama10</author>
      <pubDate>Fri, 23 Apr 2021 00:45:10 +0000</pubDate>
      <link>https://dev.to/deepdama10/100-days-of-machine-learning-4j1b</link>
      <guid>https://dev.to/deepdama10/100-days-of-machine-learning-4j1b</guid>
      <description>&lt;p&gt;Hello forks!&lt;br&gt;
I am an amateur developer and newbie at machine learning.&lt;br&gt;
As you know this year has been tough not just healthwise, but also productivity wise.&lt;br&gt;
So inorder to stat focused I am going start a blog post called 100 days of machine learning...&lt;br&gt;
In this first we will cover machine learning from 0th level and then make two projects using the same!&lt;br&gt;
Today marks as day 0.&lt;br&gt;
Stay tuned!&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>machinelearning</category>
      <category>python</category>
      <category>pproductivity</category>
    </item>
    <item>
      <title>Dependency Inversion Principle</title>
      <author>Josué Rodríguez</author>
      <pubDate>Fri, 23 Apr 2021 00:38:48 +0000</pubDate>
      <link>https://dev.to/josuerodriguez98/dependency-inversion-principle-35i</link>
      <guid>https://dev.to/josuerodriguez98/dependency-inversion-principle-35i</guid>
      <description>&lt;p&gt;The &lt;strong&gt;Dependency Inversion Principle&lt;/strong&gt; states that entities must depend on abstractions, not on concretions. High-level modules should not depend on low-level modules. Both should depend on abstraction.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;High-level modules should not depend on low-level modules. Both should depend on abstraction.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When we talk about &lt;strong&gt;high-level modules&lt;/strong&gt; we are referring to a class that executes an action implementing a tool or library, and when we talk about &lt;strong&gt;low-level modules&lt;/strong&gt; we are referring to the tools or libraries that are needed to execute an action.&lt;/p&gt;

&lt;p&gt;The principle allows for decoupling, which means to separate, disengage or dissociate something from something else. This helps us by reducing dependency and allowing for easier implementations of other tools in the future.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h1&gt;

&lt;p&gt;Let's imagine that we have a Candy Store and we are developing the checkout process. In the beginning, we only planned to implement &lt;a href="https://stripe.com/"&gt;Stripe&lt;/a&gt; as our payments processor. Stripe needs for the amount to be passed on as cents to make the transaction. Our classes will look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Checkout.js&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Checkout&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;paymentProcessor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Stripe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;USD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;makePayment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//Multiplying by 100 to get the cents&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;paymentProcessor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTransaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//Stripe.js&lt;/span&gt;
&lt;span class="c1"&gt;//Custom Stripe implementation that calls the Stripe API&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Stripe&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currency&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;createTransaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/*Call the Stripe API methods*/&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Payment made for $&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that we created a dependency between our &lt;code&gt;Checkout&lt;/code&gt; class (high-level module) and &lt;code&gt;Stripe&lt;/code&gt; (low-level module), violating the Dependency Inversion Principle. The dependency is especially noticeable when we convert the amount to cents. The &lt;code&gt;Checkout&lt;/code&gt; should not care about which payment processor is being used, it only cares about making a transaction.&lt;/p&gt;

&lt;p&gt;To decouple these two modules, we would have to implement an intermediary between the checkout and the payment processor, creating an abstraction so that no matter what payment processor we use, the &lt;code&gt;Checkout&lt;/code&gt; class will always work with the same method calls. The new &lt;code&gt;PaymentProcessor&lt;/code&gt; class will be in charge of adapting everything to payment processor to be used (in this case, Stripe). The intermediary class will have the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//PaymentProcessor.js&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PaymentProcessor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;processor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;processor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;processor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currency&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;createPaymentIntent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;amountInCents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;processor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTransaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amountInCents&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the &lt;code&gt;createPaymentIntent&lt;/code&gt; on the &lt;code&gt;PaymentProcessor&lt;/code&gt; class is converting the amount to cents. And now we refactor the Checkout class to implement the abstraction:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Checkout.js&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Checkout&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;paymentProcessor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PaymentProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Stripe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;USD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;USD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;makePayment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;paymentProcessor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createPaymentIntent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if we ever need to change our payment processor, we can do so by passing the new processor instead of Stripe on the &lt;code&gt;Checkout&lt;/code&gt; constructor.&lt;/p&gt;

&lt;p&gt;Imagine that now we are asked to replace Stripe with another payment processor that does not require for the amount to be converted to cents &lt;strong&gt;but&lt;/strong&gt; on every transaction asks for the currency that's going to be used. The resulting code will be the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Checkout.js&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Checkout&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;paymentProcessor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PaymentProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;BetterProcessor&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;USD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;makePayment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;paymentProcessor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createPaymentIntent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//PaymentProcessor.js&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PaymentProcessor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;processor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;processor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;processor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currency&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;createPaymentIntent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;processor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTransaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//BetterProcessor.js&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BetterProcessor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;createTransaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Payment made for &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;currency&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how on the &lt;code&gt;Checkout&lt;/code&gt; we only changed the payment processor to be used on the constructor and the &lt;code&gt;makePayment&lt;/code&gt; method remained untouched. We adapted the intermediary class &lt;code&gt;PaymentProcessor&lt;/code&gt; to the processor needs.&lt;/p&gt;

&lt;p&gt;We removed the dependency between &lt;code&gt;Checkout&lt;/code&gt; and the processor used by implementing the intermediary class &lt;code&gt;PaymentProcessor&lt;/code&gt;, following the Dependency Inversion Principle.&lt;/p&gt;

</description>
      <category>codequality</category>
      <category>agile</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
