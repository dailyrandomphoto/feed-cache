<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Free Dashboards - 5 Killer Templates for 2021</title>
      <author>Sm0ke</author>
      <pubDate>Sun, 05 Sep 2021 15:51:58 +0000</pubDate>
      <link>https://dev.to/sm0ke/free-dashboards-5-killer-templates-for-2021-4f3g</link>
      <guid>https://dev.to/sm0ke/free-dashboards-5-killer-templates-for-2021-4f3g</guid>
      <description>&lt;p&gt;Hello Coders!&lt;/p&gt;

&lt;p&gt;The article presents a short-list with &lt;strong&gt;&lt;a href="https://www.admin-dashboards.com/free-dashboard-templates-2021/"&gt;Free Dashboards&lt;/a&gt;&lt;/strong&gt; recently updated or released by their vendors under permissive licenses. I constantly scan the market for new &lt;strong&gt;open-source dashboards&lt;/strong&gt; and creative designs that developers might use to code hobby or commercial dashboards without an initial investment. The zero-cost aspect might be important especially for beginners that try to build a portfolio or get a first customer at the beginning of their carrier as programmers. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://www.admin-dashboards.com/"&gt;Admin Dashboards&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.creative-tim.com/product/soft-ui-dashboard"&gt;Soft UI Dashboard&lt;/a&gt; - Bootstrap 5 Design from Creative-Tim&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://themesberg.com/product/admin-dashboard/volt-bootstrap-5-dashboard"&gt;Volt Dashboard&lt;/a&gt; - Bootstrap 5 design crafted by Themesberg&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://berrydashboard.io/"&gt;Berry Dashboard&lt;/a&gt; - open-source Material-UI React dashboard&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.bootstrapdash.com/product/star-admin-free/"&gt;Star Admin&lt;/a&gt; - Bootstrap 5 template (updated recently)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://coreui.io/"&gt;CoreUI&lt;/a&gt; - Pixel-perfect Material-based design&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#soft-ui-dashboard"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.creative-tim.com/product/soft-ui-dashboard"&gt;Soft UI Dashboard&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The product comes on top of Soft UI Design System, the latest design crafted by Creative-Tim. Designed for those who like bold elements and beautiful websites Soft UI Dashboard is made of hundreds of elements, designed blocks, and fully coded pages - Dashboard Features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MIT License, 12k downloads (5 months release)&lt;/li&gt;
&lt;li&gt;70 UI Components, 7 Sample pages&lt;/li&gt;
&lt;li&gt;Bootstrap 5, Gulp Tooling&lt;/li&gt;
&lt;li&gt;Futuristic design, pixel-perfect layout on all devices.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Fully Coded Elements&lt;/strong&gt; - Soft UI Dashboard is built with over 70 frontend individual elements, like buttons, inputs, navbars, nav tabs, cards, or alerts, giving you the freedom of choosing and combining. All components can take variations in color, that you can easily modify using SASS files and classes.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.creative-tim.com/product/soft-ui-dashboard"&gt;Soft UI Dashboard&lt;/a&gt; - product page&lt;/strong&gt; (contains DEMO and sources)&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lboFblNs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q25qgv753yjcrqx1ex57.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lboFblNs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q25qgv753yjcrqx1ex57.png" alt="Free Dashboard - Soft UI Dashboard"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#volt-dashboard-bs5"&gt;
  &lt;/a&gt;
  &lt;a href="https://themesberg.com/product/admin-dashboard/volt-bootstrap-5-dashboard"&gt;Volt Dashboard BS5&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Volt is a free and open-source Bootstrap 5 Admin Dashboard featuring over 100 components, 11 example pages, and 3 plugins with Vanilla JS.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MIT License, 4k downloads (1-year release)&lt;/li&gt;
&lt;li&gt;100+ Components, 11 Sample pages&lt;/li&gt;
&lt;li&gt;Bootstrap 5, Gulp Tooling&lt;/li&gt;
&lt;li&gt;Distinct UI&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;100+ Components - There is more than 100 free Bootstrap 5 components included some of them being buttons, alerts, modals, date pickers, and so on.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://themesberg.com/product/admin-dashboard/volt-bootstrap-5-dashboard"&gt;Volt Dashboard&lt;/a&gt; - product page&lt;/strong&gt; (contains DEMO and sources)&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--99E6Nh8W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kt48nni2nznd0qs07fav.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--99E6Nh8W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kt48nni2nznd0qs07fav.png" alt="Free Dashboard - Volt Bootstrap 5."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#berry-dashboard"&gt;
  &lt;/a&gt;
  &lt;a href="https://berrydashboard.io/"&gt;Berry Dashboard&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Berry is a beautiful React Admin Template that comes with many ready-to-use blended Material-UI components. Berry helps you to create your backend application even faster than before. You can build anything you want like the User Management app, SaaS-based interface, and many more with high-performance code &amp;amp; fully responsive design.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MIT License&lt;/li&gt;
&lt;li&gt;Material-UI Design, React&lt;/li&gt;
&lt;li&gt;Distinct UI, blazing-fast&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Berry is a creative free react admin template build using the Material-UI. It is meant to be the best User Experience with highly customizable feature-riched pages. It is a complete game-changer React Dashboard Template with an easy and intuitive responsive design as on retina screens or laptops.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://berrydashboard.io/"&gt;Berry React Dashboard&lt;/a&gt; - product page&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/codedthemes/berry-free-react-admin-template"&gt;Berry React Dashboard&lt;/a&gt; - Source code (Github)&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9f4_WARc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d8654dfwu21aonk19xou.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9f4_WARc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d8654dfwu21aonk19xou.png" alt="Free Dashboard - Berry React Dashboard."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#star-admin"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.bootstrapdash.com/product/star-admin-free"&gt;Star Admin&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Beautifully designed and well-coded admin template, that comes with excellent support from experts. Built using the latest technologies and up to date with the latest trends and tools.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MIT License&lt;/li&gt;
&lt;li&gt;Bootstrap 5 Design, Gulp Tooling&lt;/li&gt;
&lt;li&gt;Pre-built pages, lightweight design&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The template is well crafted, with all the components neatly and carefully designed and arranged within the template. Star Admin 2 Free comes with a clean and well-commented code that makes it easy to work with the template. Thus making it an ideal pick for jump-starting your project.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.bootstrapdash.com/product/star-admin-free"&gt;Star Admin&lt;/a&gt; - product page&lt;/strong&gt; (contains DEMO and sources)&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--anF3u7zv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pz50qk93mvb22oc7b02k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--anF3u7zv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pz50qk93mvb22oc7b02k.png" alt="Free Dashboard - Star Admin"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#coreui"&gt;
  &lt;/a&gt;
  &lt;a href="https://coreui.io/"&gt;CoreUI&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;CoreUI is an Open Source Bootstrap Admin Template. But CoreUI is not just another Admin Template. It goes way beyond hitherto admin templates thanks to transparent code and file structure. And if that's not enough, let’s just add that CoreUI consists bunch of unique features and over 1000 high-quality icons.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MIT License&lt;/li&gt;
&lt;li&gt;Bootstrap  4, Webpack tooling&lt;/li&gt;
&lt;li&gt;Material-based design&lt;/li&gt;
&lt;li&gt;Complete set of pages and UI Kit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CoreUI is meant to be the UX game changer. Pure &amp;amp; transparent code is devoid of redundant components, so the app is light enough to offer the ultimate user experience. This means mobile devices also, where the navigation is just as easy and intuitive as on a desktop or laptop.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://coreui.io/"&gt;CoreUI&lt;/a&gt; - product page&lt;/strong&gt; (contains DEMO and sources)&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uzwS9ETn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/irme3wil9ju1d3bgvmqk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uzwS9ETn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/irme3wil9ju1d3bgvmqk.png" alt="Free Dashboard - CoreUI"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For more resources please access:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/admin-dashboards/open-source"&gt;Open-Source Admin Dashboards&lt;/a&gt; - index provided by AppSeed&lt;/li&gt;
&lt;li&gt;Free &lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;React Dashboards&lt;/a&gt; - a curated list published on Dev.to
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>dashboards</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Valuable functional programming basics every developer should know</title>
      <author>Dylan Maccora</author>
      <pubDate>Sun, 05 Sep 2021 15:44:38 +0000</pubDate>
      <link>https://dev.to/maccoda/valuable-functional-programming-basics-every-developer-should-know-2a3e</link>
      <guid>https://dev.to/maccoda/valuable-functional-programming-basics-every-developer-should-know-2a3e</guid>
      <description>&lt;p&gt;For a long time there was an idealistic divide between functional and object oriented programming and this was manifested in the languages that came through. In the current landscape however you are spoilt for choice with languages and this divide is closing with a lot of the most popular languages available taking the best aspects of both paradigms. Kotlin is a great example of this where it is initially based on the JVM and follows OO principles with classes, etc but also introduces a lot of functional principles such as first class functions and the scary monad (I am no expert in this but there are a lot of easy to understand properties that you can make use of). Another example is Rust where it cannot easily be classified as either paradigm but uses functional elements such as using the &lt;code&gt;Result&lt;/code&gt; type to promote functions always return a result, as well as object oriented notions such as the dot notation of functions on a type.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#monad-concepts"&gt;
  &lt;/a&gt;
  Monad Concepts
&lt;/h2&gt;

&lt;p&gt;Monad is a term used a lot in functional programming and especially in the vast theory behind it. I did not wish to delve into such theory here but rather the useful functions that become available because we can treat some objects as a monad. Of particular interest is working with collections or streams of elements. The main reason I personally find these incredibly powerful is that they provide a common language for which we can describe the intention of common functions that can be combined together to achieve our end result. A lot of these functions you can use in place of a &lt;code&gt;for&lt;/code&gt; loop so next time you are looking at iterating over a collection with a &lt;code&gt;for&lt;/code&gt; loop consider if one of the following constructs are what you need.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-map-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;map&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;map&lt;/code&gt; function is a transformation of each element from type X to type Y. Depending on the language you are using this may modify the elements in place or create a new collection of the mapped values (in true functional style).&lt;/p&gt;

&lt;p&gt;An easy example is say I have a collection of blog posts and I want to obtain the titles of all these, we can achieve this by:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;blogPosts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BlogPost&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;BlogPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"post 1"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                             &lt;span class="nc"&gt;BlogPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"post 2"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;blogPostTitles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;blogPosts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// ["post 1", "post 2"]&lt;/span&gt;
&lt;span class="c1"&gt;// Without the syntactic sugar&lt;/span&gt;
&lt;span class="c1"&gt;// val blogPostTitles: Collection&amp;lt;String&amp;gt; = blogPosts.map { post -&amp;gt; post.title }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's break this example down a bit to what is happening here. The &lt;code&gt;map&lt;/code&gt;&lt;br&gt;
function takes a function as a parameter which we will call our &lt;strong&gt;transform&lt;br&gt;
function&lt;/strong&gt;. This function maps the input type to some other type (this can the&lt;br&gt;
same as the input type). The &lt;code&gt;map&lt;/code&gt; function then iterates through the input list&lt;br&gt;
and creates a new list applying this function to each element.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#-raw-flatmap-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;flatMap&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;flatMap&lt;/code&gt; function is actually a combination of the above &lt;code&gt;map&lt;/code&gt; function and the &lt;code&gt;flatten&lt;/code&gt; function (not covered in this post). The &lt;code&gt;flatten&lt;/code&gt; function takes a container of containers type and &lt;strong&gt;flattens&lt;/strong&gt; it to just a container type.&lt;br&gt;
This is quite abstract so lets take a simple example. Say you have a &lt;code&gt;List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt; and you want a &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt;, this in the broad sense what the &lt;code&gt;flatten&lt;/code&gt; function does. In this example the container is the &lt;code&gt;List&lt;/code&gt; type.&lt;/p&gt;

&lt;p&gt;Knowing this it is quite simple to describe the &lt;code&gt;flatMap&lt;/code&gt; function although it may still be difficult to wrap your head around in actual applications. The &lt;code&gt;flatMap&lt;/code&gt; function will apply the transformation specified to the element in the&lt;br&gt;
container and then flatten it. This is typically required when the transformation function returns the same type as the initial type.&lt;/p&gt;

&lt;p&gt;As an example say we have a type that represents the books a customer has read and we want to print all of the books a group of customers have read (we are not concerned about duplicates). Such data may be present as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;data class&lt;/span&gt; &lt;span class="nc"&gt;BookCustomer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;booksRead&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;bookCustomers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BookCustomer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The end type we are wanting is a &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; containing all the book titles. Let us first try this without &lt;code&gt;flatMap&lt;/code&gt;  to aide in seeing when to consider using it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;bookCustomers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BookCustomer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;booksRead&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;MutableList&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;mutableListOf&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;BookCustomer&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bookCustomers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;booksTitles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;booksRead&lt;/span&gt;
  &lt;span class="n"&gt;booksRead&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;booksTitles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The key thing that using these functional paradigms provides is built in immutability. In the above example we are needing to create a mutable list to get the result. We will see in the below version this is not required.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;bookCustomers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;BookCustomer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;bookRead&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bookCustomers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;flatMap&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;booksRead&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The transformation we are performing is mapping the &lt;code&gt;BookCustomer&lt;/code&gt; to the list of book titles they have read, then the flatten part of &lt;code&gt;flatMap&lt;/code&gt; handles to reduction of the list of lists into a single list. This leads us into the next section on &lt;code&gt;reduce&lt;/code&gt; which is the general pattern of &lt;code&gt;flatten&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-reduce-endraw-or-raw-fold-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;reduce&lt;/code&gt; or &lt;code&gt;fold&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;reduce&lt;/code&gt; and &lt;code&gt;fold&lt;/code&gt; functions are more general functions to reduce a container, typically a collection, to a singular value. A simple example we can explore is reducing a collection of integers to their sum.&lt;/p&gt;

&lt;p&gt;Firstly, the difference between the two functions is primarily in the arguments that the functions take. The function signatures are below to make it simple to reference.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Iterable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;.&lt;/span&gt;&lt;span class="nf"&gt;fold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;R&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;R&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Iterable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;.&lt;/span&gt;&lt;span class="nf"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;R&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;R&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The primary difference between the two functions is that one takes the &lt;code&gt;initial&lt;/code&gt; value of the resulting type and one does not. It instead uses the first value as the initial value. This subtle difference results in the &lt;code&gt;reduce&lt;/code&gt; function requiring a non-empty collection to work on whereas &lt;code&gt;fold&lt;/code&gt; can work on an empty list and just return the &lt;code&gt;initial&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;A simple example to show how these functions work is by implementing a summation function that operates on a collection of integers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;sumReduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Iterable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;):&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reduce&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;sumFold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Iterable&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;):&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The interesting element of these is the closure passed of the form &lt;code&gt;(acc: R, cur: T) -&amp;gt; R&lt;/code&gt;. This function is essentially and accumulation function that combines the elements of the collection to the final result. It takes two arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;acc&lt;/code&gt; which is the current accumulated result up to the current element&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cur&lt;/code&gt; which is the current element&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Putting this in action:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;numbers&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;sumFold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The accumulation function is applied to each element and then the accumulated value is updated and passed along. Stepping through the above example would look like this:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note this is for fold, if using reduce the first row would be omitted as there is no initial value&lt;/em&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;acc&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;cur&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;Accumulation function result&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#more-use-cases"&gt;
  &lt;/a&gt;
  More use cases
&lt;/h4&gt;

&lt;p&gt;The power of these functions is how flexible they are, any accumulator function can be provided allowing you to work with any type. If you were inclined you could spend more time studying functional programming and see how this is the basis of a lot of incredibly power combinator functions. For  example we can create &lt;code&gt;flatMap&lt;/code&gt; using &lt;code&gt;reduce&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt;. Since this is typically handled in the standard library we will look at a more likely scenario to find in a project.&lt;/p&gt;

&lt;p&gt;The example we will go through is that of some validation framework which leverages the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Validation&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;ValidationResult&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ValidationResult&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;VALID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;INVALID&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Imagine we have a collection of validators and we wish to implement some functionality that requires that all validators to run on the &lt;code&gt;Input&lt;/code&gt; object and it returns &lt;code&gt;VALID&lt;/code&gt; if &lt;strong&gt;all&lt;/strong&gt; validators return &lt;code&gt;VALID&lt;/code&gt; otherwise if even one returns &lt;code&gt;INVALID&lt;/code&gt; it returns &lt;code&gt;INVALID&lt;/code&gt;. The &lt;code&gt;reduce&lt;/code&gt; function can do exactly this as we can evaluate all the validators and then &lt;em&gt;reduce&lt;/em&gt; them to a single result.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;validators&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Validation&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Input&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ValidationResult&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;validators&lt;/span&gt;
                                  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reduce&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="nc"&gt;ValidationResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;VALID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nc"&gt;ValidationResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;INVALID&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-filter-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;filter&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;filter&lt;/code&gt; function is another helpful function to work with collections which filters the collection based on a provided predicate. If the term predicate is new, it is simply a function that takes an input object and returns a boolean.&lt;/p&gt;

&lt;p&gt;Using another book example let's assume we have the below data type for a book and we want to obtain the list of all books we read, this can be done as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;data class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;read&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;books&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;booksRead&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;filter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#not-quite-must-knows"&gt;
  &lt;/a&gt;
  Not quite must knows
&lt;/h2&gt;

&lt;p&gt;The above functions and types are extremely valuable in most modern languages. The below types are useful to know but depending on your language choice you may not actually use it but understanding the concept is valuable regardless as it can still have a positive impact on the way you write your code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optionmaybe-type"&gt;
  &lt;/a&gt;
  Option/Maybe Type
&lt;/h3&gt;

&lt;p&gt;It is common to have to represent the possibility of some data not being present. Commonly in languages this is represented by some null value but in pure functional programming this is actually represented by a type possibly&lt;br&gt;
called &lt;code&gt;Option&lt;/code&gt; (such as in Rust) or &lt;code&gt;Maybe&lt;/code&gt; (such as in Haskell). The core of this type is to be able to reflect the absence of a value in the type system. This can also be achieved with languages still supporting null such as Kotlin as it surfaces the nullability to the type level.&lt;/p&gt;

&lt;p&gt;Having a container type to represent the absence of a value allows the client of the data to act on it safely without needing to check whether the data is present or not, which is something unable to be achieved with a basic null value alone.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;no_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;None&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;result_some&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="nf"&gt;.map&lt;/span&gt;&lt;span class="p"&gt;(|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// Some(5)&lt;/span&gt;
&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;result_none&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;no_data&lt;/span&gt;&lt;span class="nf"&gt;.map&lt;/span&gt;&lt;span class="p"&gt;(|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;// None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#resulteither-type"&gt;
  &lt;/a&gt;
  Result/Either Type
&lt;/h3&gt;

&lt;p&gt;In an OO landscape it is typical to handle errors through exception handling. Pure functional languages require this to be represented in the type system, which is quite a powerful model. This is again named differently depending on the language but it is a container type that has two possible representations. If it is called &lt;code&gt;Either&lt;/code&gt; then this will have a &lt;code&gt;Left&lt;/code&gt; and &lt;code&gt;Right&lt;/code&gt; type, this is more generic than the &lt;code&gt;Result&lt;/code&gt; type as you are able to represent any arbitrary&lt;br&gt;
type that is a union of two possible types. A more focused point is the &lt;code&gt;Result&lt;/code&gt; type used in Rust to represent explicitly an error as it does not have exceptions. The two types of this union are &lt;code&gt;Ok&lt;/code&gt; and &lt;code&gt;Err&lt;/code&gt; (for error).&lt;/p&gt;

&lt;p&gt;Again this notion of a type may not be largely applicable in the OO domain but it does promote you to think of handling errors and state in a different manner and representing this in the type system. This concept can easily be implemented&lt;br&gt;
in Kotlin using sealed classes and does not need to just be used for error handling but can be used to create any container class that a client can act on. Again the goal here is having the container class allows the client to work with&lt;br&gt;
the data irrespective of the underlying state.&lt;/p&gt;

</description>
      <category>functional</category>
    </item>
    <item>
      <title>How to create a smart contract to receive donations using Solidity
</title>
      <author>Emanuel Ferreira</author>
      <pubDate>Sun, 05 Sep 2021 15:42:45 +0000</pubDate>
      <link>https://dev.to/emanuelferreira/how-to-create-a-smart-contract-to-receive-donations-using-solidity-4k8</link>
      <guid>https://dev.to/emanuelferreira/how-to-create-a-smart-contract-to-receive-donations-using-solidity-4k8</guid>
      <description>&lt;p&gt;With the ascendancy of blockchains and cryptocurrencies you do not want to be left out of this right?&lt;/p&gt;

&lt;p&gt;In this article i will teach to you how to create a smart contract to receive donations using solidity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-solidity"&gt;
  &lt;/a&gt;
  What is Solidity?
&lt;/h2&gt;

&lt;p&gt;Solidity is an object-oriented programming language for writing smart contracts. It is used for implementing smart contracts on various blockchain platforms, most notably, Ethereum. &lt;a href="https://en.wikipedia.org/wiki/Solidity"&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pragma-version"&gt;
  &lt;/a&gt;
  Pragma Version
&lt;/h2&gt;

&lt;p&gt;First thing we will do after creating a .sol file(solidity extension) is define a pragma version, this is for solidity to understand which version our contract is in and to compile it correctly.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;DonateContract.sol&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;pragma&lt;/span&gt; &lt;span class="nx"&gt;solidity&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#starting-the-contract"&gt;
  &lt;/a&gt;
  Starting the contract
&lt;/h2&gt;

&lt;p&gt;Now we are going to start our contract, for this we need to call contract + ContractName for solidity to understand where our contract code will be.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;DonateContract.sol&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;pragma&lt;/span&gt; &lt;span class="nx"&gt;solidity&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;contract&lt;/span&gt; &lt;span class="nx"&gt;DonateContract&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="c1"&gt;//the code will stay here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h2&gt;

&lt;p&gt;Solidity supports three types of variables:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;State variables&lt;/strong&gt;: variables whose values are permanently stored in a contract storage.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Local variables&lt;/strong&gt;: variables whose values are present till function is executing.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Global variables&lt;/strong&gt;: special variables exists in the global namespace used to get information about the blockchain.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#we-are-going-to-create-two-types-of-state-variables"&gt;
  &lt;/a&gt;
  We are going to create two types of state variables:
&lt;/h3&gt;

&lt;p&gt;The variables are written as follows: &lt;code&gt;type + variableName&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;totalDonations&lt;/strong&gt;: totalDonations is a uint that stores the amount of donations that have already been made.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;owner&lt;/strong&gt;: owner is of the payable address type that will be the creator of the contract that will receive the donations.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Obs: all addresses that will accept payment or make payment must be of the payable type.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;DonateContract.sol&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;pragma&lt;/span&gt; &lt;span class="nx"&gt;solidity&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;contract&lt;/span&gt; &lt;span class="nx"&gt;DonateContract&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;uint&lt;/span&gt; &lt;span class="nx"&gt;totalDonations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// the amount of donations&lt;/span&gt;
  &lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="nx"&gt;payable&lt;/span&gt; &lt;span class="nx"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// contract creator's address&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-the-constructor"&gt;
  &lt;/a&gt;
  Using the constructor
&lt;/h2&gt;

&lt;p&gt;In our solidity contract we have a constructor to set up our contract and set some standards.&lt;/p&gt;

&lt;p&gt;We will define who will be the owner of our contract and that it will be of the payable type, in this case the creator of the contract.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;DonateContract.sol&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;pragma&lt;/span&gt; &lt;span class="nx"&gt;solidity&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;contract&lt;/span&gt; &lt;span class="nx"&gt;DonateContract&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;uint&lt;/span&gt; &lt;span class="nx"&gt;totalDonations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// the amount of donations&lt;/span&gt;
  &lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="nx"&gt;payable&lt;/span&gt; &lt;span class="nx"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// contract creator's address&lt;/span&gt;

  &lt;span class="c1"&gt;//contract settings&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;payable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// setting the contract creator&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-our-first-function"&gt;
  &lt;/a&gt;
  Creating our first function
&lt;/h2&gt;

&lt;p&gt;Now we are going to create a simple function to return the amount of donations.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;DonateContract.sol&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;pragma&lt;/span&gt; &lt;span class="nx"&gt;solidity&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;contract&lt;/span&gt; &lt;span class="nx"&gt;DonateContract&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;uint&lt;/span&gt; &lt;span class="nx"&gt;totalDonations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// the amount of donations&lt;/span&gt;
  &lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="nx"&gt;payable&lt;/span&gt; &lt;span class="nx"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// contract creator's address&lt;/span&gt;

  &lt;span class="c1"&gt;//contract settings&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;payable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// setting the contract creator&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// public function to return the amount of donations&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getTotalDonations&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;view&lt;/span&gt; &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;returns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;totalDonations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our function takes three parameters:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;public&lt;/strong&gt;: This function is of the public type and can be called by anyone.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;view&lt;/strong&gt;: It means that this function is a view-only function and does not do any transactions and you don't need to pay gas to use it.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;returns(uint)&lt;/strong&gt;: Here we are saying that the function will return something of type uint.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#creating-function-to-make-donation"&gt;
  &lt;/a&gt;
  Creating function to make donation
&lt;/h2&gt;

&lt;p&gt;Now we are going to make a function to make the donation, we need say that it is public and payable.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;DonateContract.sol&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;pragma&lt;/span&gt; &lt;span class="nx"&gt;solidity&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;contract&lt;/span&gt; &lt;span class="nx"&gt;DonateContract&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="nx"&gt;uint&lt;/span&gt; &lt;span class="nx"&gt;totalDonations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// the amount of donations&lt;/span&gt;
  &lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="nx"&gt;payable&lt;/span&gt; &lt;span class="nx"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// contract creator's address&lt;/span&gt;

  &lt;span class="c1"&gt;//contract settings&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;owner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;payable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// setting the contract creator&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;//public function to make donate&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;donate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;payable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;payable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;transfer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// public function to return total of donations&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getTotalDonations&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;view&lt;/span&gt; &lt;span class="kr"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;returns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;totalDonations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Obs: you can use &lt;a href="https://docs.openzeppelin.com/contracts/2.x/api/utils"&gt;nonReentrant&lt;/a&gt; to give more secure to your contract.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In our function we define that the &lt;code&gt;owner&lt;/code&gt; is &lt;code&gt;payable&lt;/code&gt; and that we are going to &lt;code&gt;transfer&lt;/code&gt; to it &lt;code&gt;msg.value&lt;/code&gt;, which is the amount of crypto that is informed by the donor.&lt;/p&gt;

&lt;p&gt;Ready!! we have our first contract ready 😁🥳&lt;/p&gt;

&lt;p&gt;For more content you can follow me here and on my twitter:&lt;br&gt;
&lt;a href="https://twitter.com/manelferreira_"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>solidity</category>
      <category>ethereum</category>
      <category>blockchain</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Upgrading the CSS only Multi-line Typewriter effect</title>
      <author>Temani Afif</author>
      <pubDate>Sun, 05 Sep 2021 15:31:31 +0000</pubDate>
      <link>https://dev.to/afif/upgrading-the-css-only-multi-line-typewriter-effect-2269</link>
      <guid>https://dev.to/afif/upgrading-the-css-only-multi-line-typewriter-effect-2269</guid>
      <description>&lt;p&gt;In this post, I will enhance &lt;a href="https://dev.to/afif/a-multi-line-css-only-typewriter-effect-3op3"&gt;The Multi-line Typewriter&lt;/a&gt; to create more fancy variation of "writer effect" using only CSS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt;: click the "rerun" button at the bottom right of each embedded Pen to run the animation again.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#the-filling"&gt;
  &lt;/a&gt;
  The Filling
&lt;/h3&gt;

&lt;p&gt;Let's update the color of an existing text letter by letter. &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/VwWKMeQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-sliding"&gt;
  &lt;/a&gt;
  The Sliding
&lt;/h3&gt;

&lt;p&gt;A sliding cursor to reveal the text, why not!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/bGRwYrg?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-one-shot"&gt;
  &lt;/a&gt;
  The One Shot
&lt;/h3&gt;

&lt;p&gt;A letter by letter animation you said? nah! let's show everything at once!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/RwgGjVw?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-random"&gt;
  &lt;/a&gt;
  The Random
&lt;/h3&gt;

&lt;p&gt;Not that random but it looks like&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/XWgjyjE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-fragmentation"&gt;
  &lt;/a&gt;
  The Fragmentation
&lt;/h3&gt;

&lt;p&gt;A last one from the future where I will consider the &lt;a href="https://dev.to/this-is-learning/exploring-the-css-paint-api-image-fragmentation-effect-3ekl"&gt;Fragmentation effect I built with the CSS Paint API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Only Chrome and Edge support this for now. It should work with a multi-line text but Chrome its a bit buggy with mask when it comes to multi-line.&lt;/p&gt;

&lt;p&gt;Get back to this in 2 years to have a full support everywhere with 0 bugs.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/MWojOQG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h3&gt;

&lt;p&gt;Now you have a plenty of CSS-only typewriter effect. Enjoy 👍&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4u35fIGq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/VHrFbmOtBwysbsYnka/giphy.gif%3Fcid%3Decf05e47y9xawp3rscaqcnyycar4v8ngdvb8vkm8wvgs864p%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4u35fIGq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/VHrFbmOtBwysbsYnka/giphy.gif%3Fcid%3Decf05e47y9xawp3rscaqcnyycar4v8ngdvb8vkm8wvgs864p%26rid%3Dgiphy.gif%26ct%3Dg" alt="The End"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>MutationObserver Web API</title>
      <author>Mikkel</author>
      <pubDate>Sun, 05 Sep 2021 15:10:22 +0000</pubDate>
      <link>https://dev.to/mikkelmbk/mutationobserver-web-api-1779</link>
      <guid>https://dev.to/mikkelmbk/mutationobserver-web-api-1779</guid>
      <description>&lt;h3&gt;
  &lt;a href="#mutationobserver-web-api-what-is-it"&gt;
  &lt;/a&gt;
  MutationObserver Web API, what is it?
&lt;/h3&gt;

&lt;p&gt;The MutationObserver Web API is, according to MDN, an interface which provides the ability to watch for changes being made to the DOM tree. An example of a change made to the DOM tree could be something like a class, id, or any other attribute being added or removed to or from an element. Another example could be something like an element being removed from the DOM, or an element being added to the DOM.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-to-know-the-mutationobserver"&gt;
  &lt;/a&gt;
  Getting to know the MutationObserver
&lt;/h3&gt;

&lt;p&gt;We start by defining a new instance of the MutationObserver as &lt;strong&gt;observer&lt;/strong&gt;. The callback function in our instance of the MutationObserver is where we can start reacting to events.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const observer = new MutationObserver(function(mutationsList, observer) {

}); 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We want to loop through the &lt;strong&gt;mutationsList&lt;/strong&gt; which we receive in said callback as it is an array. Within our loop we can now react to individual events through &lt;strong&gt;mutation&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const observer = new MutationObserver(function(mutationsList, observer) {
  for(const mutation of mutationsList) {
     console.log("a single mutation: ", mutation);
    }
}); 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Every &lt;strong&gt;mutation&lt;/strong&gt; that our callback provides us with has a mutation type letting us know which sort of mutation we are looking at.&lt;/p&gt;

&lt;p&gt;There are three different mutation types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;childList&lt;/li&gt;
&lt;li&gt;attributes&lt;/li&gt;
&lt;li&gt;characterData
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const observer = new MutationObserver(function(mutationsList, observer) {
    for(const mutation of mutationsList) {
        if (mutation.type === 'childList') {
            console.log('A child node has been added or removed.');
        }
        else if (mutation.type === 'attributes') {
            console.log('The ' + mutation.attributeName + ' attribute was modified.');
        }
        else if(mutation.type === 'characterData'){
            console.log(mutation);
        }
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have our instance of the MutationObserver stored in our variable &lt;strong&gt;observer&lt;/strong&gt;, we can provide it with a reference to an element it should listen to for mutations, as well as a configuration object telling it which mutation types it should let our callback know about.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// the observer instance is up here

observer.observe(document.querySelector("#some-id"), { attributes: false, childList: true });

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-mutationobserver-in-action"&gt;
  &lt;/a&gt;
  The MutationObserver in action
&lt;/h3&gt;

&lt;p&gt;Using the example that we have been building through this guide, we can see exactly how the MutationObserver behaves.&lt;/p&gt;

&lt;p&gt;Here we are before any changes to the element we are listening to for mutations, have happened. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kG34qBfr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d05ggtjbzfgj0jquz7oo.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kG34qBfr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d05ggtjbzfgj0jquz7oo.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we are after having clicked the button to change the title.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Yi7gsnh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2he2l9ty3wvpexwfe4p.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Yi7gsnh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2he2l9ty3wvpexwfe4p.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here we can see the mutation in details. At the top we can see that a node was added, specifically a text node. This node is the text that our title was changed to. &lt;/p&gt;

&lt;p&gt;Further down we can see that a node was also removed, also a text node. This node is the text that our title contained before it was changed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hGfAQMnH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdhn5df3w94t9c16l1e3.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hGfAQMnH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdhn5df3w94t9c16l1e3.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Taking a closer look at the addedNodes, we can see that the &lt;strong&gt;data&lt;/strong&gt; property indeed contains the text which now resides in our title.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eN4JF5pS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9lif5sbvshu1q0q0blsq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eN4JF5pS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9lif5sbvshu1q0q0blsq.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Depending on your situation, the MutationObserver can be immensely useful. &lt;/p&gt;

&lt;p&gt;The MutationObserver can do way more than what I covered in this guide, and I have used it to great length and even built a small framework around it to help my coworkers who aren't as strong in JavaScript utilize it.&lt;/p&gt;

&lt;p&gt;If any interest is shown, I might make a guide going through the framework I made and show how you can use the MutationObserver without fully understanding how it works.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt; I am by no means an expert and I do not claim that everything I have said is correct, if you find any misinformation or otherwise misleading or wrong explanations, please reach out to me so I can correct it.&lt;/p&gt;

</description>
      <category>mutationobserver</category>
      <category>javascript</category>
      <category>webapi</category>
      <category>juniordev</category>
    </item>
    <item>
      <title>React useUndo hook</title>
      <author>Bhavesh Mishra</author>
      <pubDate>Sun, 05 Sep 2021 14:19:43 +0000</pubDate>
      <link>https://dev.to/mishrabhavesh/react-useundo-hook-4h34</link>
      <guid>https://dev.to/mishrabhavesh/react-useundo-hook-4h34</guid>
      <description>&lt;p&gt;I am totally new in web development and this is my first blog, any sorts of suggestion or comments is welcome and that will help me to learn and grow.&lt;br&gt;
So lets start with the &lt;code&gt;useUndo&lt;/code&gt; hook.&lt;br&gt;
Last week in our organization came like we need to have a card that will have two options &lt;code&gt;Accept&lt;/code&gt; and &lt;code&gt;Decline&lt;/code&gt;, and after selecting any one of the option we will be giving the user a time period of let say 10 sec and with in this period they can undo their action.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;eg ---&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rOMWe84j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h23st6a3nyzmyjsofsjq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rOMWe84j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h23st6a3nyzmyjsofsjq.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If they accept/ decline&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fi6KS83v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q1qhuf2xfakq6llgde0z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fi6KS83v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q1qhuf2xfakq6llgde0z.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So what i thought is to make a undo function which can help me with with this and also if i would like to use this undo function anywhere anywhere i will use it. So i came up with an &lt;code&gt;useUndo&lt;/code&gt; hook, which was possible with &lt;code&gt;React lifecycle&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;so lets discuss with the code and how i had implemented it.&lt;/p&gt;

&lt;p&gt;First i will show the full code and then i will break it in different part and discuss about each of them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NGgbSs2k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7xqo4bml7pliglsnca59.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NGgbSs2k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7xqo4bml7pliglsnca59.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First i have used &lt;code&gt;useState&lt;/code&gt; react hook to&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Invoke the undo function&lt;/li&gt;
&lt;li&gt;store the timeout id&lt;/li&gt;
&lt;li&gt;to check if the method execution is finished or not.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LiiaQZqq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z22w4uxatnfrui19yxfw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LiiaQZqq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z22w4uxatnfrui19yxfw.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next is the &lt;code&gt;onUnload&lt;/code&gt; event-lisitener function&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SIxr4Q9M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kyet2f90rib2mhjbo8cx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SIxr4Q9M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kyet2f90rib2mhjbo8cx.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;what this will do is it will throw and alert if you are trying to close the tab or window. We are doing this because as we are using setTimeout and clearTimeout so these are window scoped and each time we close or open a new tab a new scope is created so if we close the tab the the setTimeout which are web-api will be cleared from the call back queue and will not enter in the execution stack even after the time interval is over.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PDAuCA7G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iypumlj4oszbwkusmsbx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PDAuCA7G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iypumlj4oszbwkusmsbx.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hence we will listen for an &lt;code&gt;event-listener&lt;/code&gt; i.e &lt;code&gt;beforeunload&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next the most important part according to me in this code is the &lt;code&gt;useEffect&lt;/code&gt; part i.e&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_pOLa-J2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qatiwjpqt4rxralvgbk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_pOLa-J2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qatiwjpqt4rxralvgbk.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So what we are doing here is &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First we check if &lt;code&gt;invokeUndo&lt;/code&gt; is true or not and if so we add an event listener &lt;code&gt;beforeunload&lt;/code&gt; on window.
then we put our function inside the timeout which will be executed after 10000ms i.e 10s. Now the &lt;code&gt;setTimeout&lt;/code&gt; web-api return a uniq number everytime you run it, which will be used to clear the timeout fucnction.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Inside the setTimeout we call the function which is &lt;code&gt;resolveMethod()&lt;/code&gt; set the &lt;code&gt;undoTimerId&lt;/code&gt; to null as the function  execution is finished, &lt;code&gt;setMethodExecuted&lt;/code&gt; to true which will be returned value and while using the hook if we have any action to perform after execution can be done, &amp;amp;         &lt;code&gt;setInvokeUndo(false)&lt;/code&gt; as the execution is finished.&lt;/p&gt;

&lt;p&gt;Now the important part we need to do some clean-up on component-unmount so we will have a return statement in useEffect which will clear eventListener.&lt;/p&gt;

&lt;p&gt;Now to invoke the undo we have invokeUndoMethod which will be a returned value and while using this hook we can use this.&lt;/p&gt;

&lt;p&gt;we have an &lt;code&gt;undoMethod&lt;/code&gt; which will perform the undo method i.e &lt;code&gt;clearTimeout&lt;/code&gt;, setInvokeUndo to false.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T1XezKCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g5y896e3ak629skiblcd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T1XezKCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g5y896e3ak629skiblcd.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we will have a final return statement&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tc_cVKiD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lk4mbrvicy0do4v172e1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tc_cVKiD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lk4mbrvicy0do4v172e1.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;undoMethod&lt;/code&gt; to perform the undo action&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;invokeUndoMethod&lt;/code&gt; to invoke the undo or start undo method&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;isMethodExecuted&lt;/code&gt; this will tell if the method execution     is completed or not.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now while using it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KTaFjhD3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogujqi9mdqtdxer6e12i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KTaFjhD3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ogujqi9mdqtdxer6e12i.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;we can import this useUndo hook and pass inside the &lt;code&gt;onAcceptance&lt;/code&gt; method we need to be executed after 10s.&lt;/p&gt;

&lt;p&gt;That's All folks 😃&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Cleaner models with Laravel Eloquent Builders</title>
      <author>Marinus van Velzen</author>
      <pubDate>Sun, 05 Sep 2021 14:02:44 +0000</pubDate>
      <link>https://dev.to/rocksheep/cleaner-models-with-laravel-eloquent-builders-12h4</link>
      <guid>https://dev.to/rocksheep/cleaner-models-with-laravel-eloquent-builders-12h4</guid>
      <description>&lt;p&gt;Over the past few years I have created tons and tons of models in Laravel. These models have always blown up in size with tons of accessors and added scopes. For the unintroduced, model scopes are methods containing queries that can be chained while retrieving data from the database. In example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Models/Article.php&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Model&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;scopePublished&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Builder&lt;/span&gt; &lt;span class="nv"&gt;$builder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$builder&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;whereNotNull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'published_at'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// usage of the scope&lt;/span&gt;
&lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;published&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you might imagine it these methods will add up after a while resulting in bloated models, but what if I tell you that you can clean this up easily?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-your-own-eloquent-builder"&gt;
  &lt;/a&gt;
  Writing your own Eloquent Builder
&lt;/h2&gt;

&lt;p&gt;It's possible to create your own Eloquent Builder and bind it to your models. This can be done by creating a class which extends the Eloquent Builder. I'll use the example above for the model that we will clean up. So let's start by creating a ArticleBuilder. It doesn't really matter where you place it, but I tend to create a directory for it in the App namespace.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strict_types&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\EloquentBuilders&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Eloquent\Builder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticleBuilder&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Builder&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;published&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;self&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;whereNotNull&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'published_at'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see it uses the same methods of before, because the scope uses a query builder in the background! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#registering-your-brand-new-eloquent-builder"&gt;
  &lt;/a&gt;
  Registering your brand new Eloquent Builder
&lt;/h2&gt;

&lt;p&gt;Now all that's left is to bind our custom query builder to the Article Model. This can be done by overriding the newEloquentBuilder method. After overriding it you can remove any of the old scopes. Your end result will look something like this!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strict_types&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Models&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\EloquentBuilders\ArticleEloquentBuilder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Eloquent\Builder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Eloquent\Factories\HasFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Eloquent\Model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Model&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;HasFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;newEloquentBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;Builder&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ArticleEloquentBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$query&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-our-new-builder"&gt;
  &lt;/a&gt;
  Using our new builder
&lt;/h2&gt;

&lt;p&gt;Using your brand new query builder is just the same as with the scopes. All you need to do is chain it on your query like you usually do.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;published&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the end nothing changed functionality wise, but your model just became a lot cleaner. &lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
    </item>
    <item>
      <title>Typescript Record utility</title>
      <author>es404020</author>
      <pubDate>Sun, 05 Sep 2021 13:59:48 +0000</pubDate>
      <link>https://dev.to/es404020/typescript-record-utility-4mc2</link>
      <guid>https://dev.to/es404020/typescript-record-utility-4mc2</guid>
      <description>&lt;p&gt;Record&lt;/p&gt;

&lt;p&gt;Constructs an object type whose property keys are Keys and whose property values are Type. This utility can be used to map the properties of a type to another type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Example
interface CatInfo {
  age: number;
  breed: string;
}

type CatName = "miffy" | "boris" | "mordred";

const cats: Record&amp;lt;CatName, CatInfo&amp;gt; = {
  miffy: { age: 10, breed: "Persian" },
  boris: { age: 5, breed: "Maine Coon" },
  mordred: { age: 16, breed: "British Shorthair" },
};

cats.boris;

const cats: Record&amp;lt;CatName, CatInfo&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Released:&lt;br&gt;
typescript 2.1&lt;/p&gt;

&lt;p&gt;reference :Typescript offical documentation.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>angular</category>
      <category>react</category>
    </item>
    <item>
      <title>Complete guides to React useReducer() Hook </title>
      <author>Ahmed Mkahal</author>
      <pubDate>Sun, 05 Sep 2021 13:51:44 +0000</pubDate>
      <link>https://dev.to/ahmedm1999/complete-guides-to-react-usereducer-hook-5j7</link>
      <guid>https://dev.to/ahmedm1999/complete-guides-to-react-usereducer-hook-5j7</guid>
      <description>&lt;p&gt;&lt;code&gt;useReducer()&lt;/code&gt; is a React.js Hook which manage complex state in your application and update it based on the 'action' you send to.&lt;br&gt;
It's used as an alternative for &lt;code&gt;useState&lt;/code&gt; if you have a complex states or can be used both together according to your application requirements.&lt;br&gt;
It's very similar to &lt;code&gt;Redux&lt;/code&gt; if you want to not use a 3rd-party library.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;First&lt;/h2&gt;

&lt;p&gt;You should import &lt;code&gt;useReducer&lt;/code&gt; from react js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useReducer } from 'react';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;Second :&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;useReducer&lt;/code&gt; Hook accepts a reducer function, and an initial state.&lt;br&gt;
It's returns an array with 2 values:&lt;br&gt;
The first one is the &lt;code&gt;state&lt;/code&gt; value, and the second value is the &lt;code&gt;dispatch&lt;/code&gt; function which is used to trigger an action with the help of ES6 destructuring.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [state, dispatch] = useReducer(reducer, initialState);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;initialState :&lt;/h5&gt;

&lt;p&gt;The initial state that we want to start working on it&lt;/p&gt;

&lt;h5&gt;reducer :&lt;/h5&gt;

&lt;p&gt;Which we'll use to manipulate our state.&lt;/p&gt;

&lt;h1&gt;Let's go with simple example&lt;/h1&gt;

&lt;p&gt;Let's say you're displaying some products in your app, and you want to :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add a product to the cart when user click on &lt;code&gt;add to cart&lt;/code&gt; button and list it in cart page.&lt;/li&gt;
&lt;li&gt;Remove the product from cart list if the user click on &lt;code&gt;remove from cart&lt;/code&gt; button.&lt;/li&gt;
&lt;li&gt;User can switch the application (dark/light mode)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Create &lt;code&gt;Reducer.js&lt;/code&gt; component to add our reducer in it.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;How to use it ?&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Firstly, we will define the reducer function that will manipulate our state:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Reducer.js
const reducer = (state, action) =&amp;gt; {
  // reducer function accepts two arguments 
  /* 
   the first one is `state` which is going to be the state 
   before the update.
  */ 
  /* 
   the second one is `action` which is what are we trying to do.
  */ 
}

export default reducer;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Second step, we will define the initial state object which contains our initial values :
&lt;p&gt;1- &lt;code&gt;cart&lt;/code&gt; array property which holds products user added to his/her cart.&lt;/p&gt;
&lt;p&gt;2- &lt;code&gt;mode&lt;/code&gt; property which holds the app mode and it's by default will be &lt;code&gt;light&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We'll put those in our file, but outside of the component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Reducer.js
export const initialState = {
    cart: [],
    mode: 'light'
};

const reducer = (state, action) =&amp;gt; {
    switch (action.type) {
        case 'ADD_TO_CART':
            return {
                ...state,
                cart: [...state.cart, action.item]
            };

        case 'REMOVE_FROM_CART':
            const index = state.cart.findIndex(item =&amp;gt; action.id === item.id);
            let newCart = [...state.cart];
            if (index &amp;gt;= 0) {
                newCart.splice(index, 1);
            }

            if (newCart.length === 0) {
                return {
                    ...state,
                    cart: newCart,
                }
            } else {
                return {
                    ...state,
                    cart: newCart,
                }
            };
        case 'CHANGE_MODE':
            return {
                ...state,
                mode: action.mode
            }
        default: return state
    }

}

export default reducer;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's imagine we have a &lt;code&gt;Product.js&lt;/code&gt; component that return a products to be displayed in your app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Product.js
import React from 'react'

function Product({ name, image }) {
    const addToCart= () =&amp;gt; {
        // some code
    }
    return (
        &amp;lt;div className="product"&amp;gt;
            &amp;lt;img src={`${image}`} /&amp;gt;
            &amp;lt;p&amp;gt;{name}&amp;lt;/p&amp;gt;
            &amp;lt;button onClick={addToCart}&amp;gt;add to cart&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    )
}

export default Product

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The fourth step, our reducer is all setup, now let's define then use it.
To be able to use the reducer function you must define it in everywhere you need like so:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, {useReducer} from 'react'
import reducer, {initialState} from './Reducer';

function Product({ name, image }) {
    const [state, dispatch] = useReducer(reducer, initialState) ;
    .
    .
    .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Firstly you need to import &lt;code&gt;useReducer&lt;/code&gt; from React, then import the &lt;code&gt;reducer&lt;/code&gt; and &lt;code&gt;initialState&lt;/code&gt; to be used.&lt;br&gt;
Now we will define our reducer using &lt;code&gt;useReducer()&lt;/code&gt; hook&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [state, dispatch] = useReducer(reducer, initialState) ;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The useReducer hook will return two things in an array: the state, and a dispatcher to update the state.&lt;/p&gt;

&lt;p&gt;We will grab those with array destructuring, similar to state and setState with the useState.&lt;/p&gt;

&lt;h2&gt;Dispatch actions :&lt;/h2&gt;

&lt;p&gt;Every time the user clicks on &lt;code&gt;add to cart&lt;/code&gt; button, &lt;code&gt;addToCart&lt;/code&gt; function will be called to &lt;strong&gt;dispatch&lt;/strong&gt; the action to the reducer function to do some changes in that state.&lt;br&gt;
So, the &lt;code&gt;addToCart&lt;/code&gt; function will contains the following code :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const addToCart= () =&amp;gt; {
        dispatch({
            type: 'ADD_TO_CART',
            item: {
                image,
                name
            }
        })
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We sent the action name to the reducer function to know what kind of changes will be happened, in this case the action is &lt;code&gt;ADD_TO_CART&lt;/code&gt; action. Also we sent the item or the product which user need to add to the card to be added to the &lt;code&gt;state.cart&lt;/code&gt; array.&lt;/p&gt;

&lt;p&gt;So, the &lt;code&gt;Product.js&lt;/code&gt; component will be :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, {useReducer} from 'react'
import reducer, {initialState} from './Reducer';

function Product({ name, image }) {
    const [state, dispatch] = useReducer(reducer, initialState) ;
    const addToCart= () =&amp;gt; {
        dispatch({
            type: 'ADD_TO_CART',
            item: {
                image,
                name
            }
        })
    }
    return (
        &amp;lt;div className="product"&amp;gt;
            &amp;lt;img src={`${image}`} /&amp;gt;
            &amp;lt;p&amp;gt;{name}&amp;lt;/p&amp;gt;
            &amp;lt;button onClick={addToCart}&amp;gt;add to cart&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    )
}

export default Product

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;We will be satisfied with ADD_TO_CART, others actions will be the same but with deferent functionality&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Accessing state&lt;/h2&gt;

&lt;p&gt;Now you can accessing the state and make on it anything you want like mapping cart array and so on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;useReducer Hook is extremely useful when working on complex and different states depend on each other.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;useReducer is very similar to Redux if you want to not use a 3rd-party library or if it's only for a component or two.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope this article helped you to understand useReducer hook what is exactly.&lt;/p&gt;

&lt;p&gt;Thanks for reading 🙌&lt;br&gt;
-Ahmad Mukahal&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>redux</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The future is JAMstack</title>
      <author>Tabassum Khanum</author>
      <pubDate>Sun, 05 Sep 2021 13:02:40 +0000</pubDate>
      <link>https://dev.to/codewithtee/the-future-is-jamstack-2ld</link>
      <guid>https://dev.to/codewithtee/the-future-is-jamstack-2ld</guid>
      <description>&lt;p&gt;JAMstack is a revolutionary new architecture introduced by Mathias Biilman, CEO at Netlify. Designed to make the web faster, to support the new tools and workflows used in modern development. JAMstack implies the combination of three basic elements: &lt;strong&gt;JavaScript, API &amp;amp; Markup&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FNOSLWU6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.freecodecamp.org/news/content/images/2020/02/jamstack-breakdown-3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FNOSLWU6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.freecodecamp.org/news/content/images/2020/02/jamstack-breakdown-3.jpg" alt="jamstack full form"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;br&gt;
Dynamic functionalities are handled by JavaScript. There is no restriction on which framework or library you must use.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;APIs&lt;/em&gt;&lt;br&gt;
Server side operations are abstracted into reusable APIs and accessed over HTTPS with JavaScript. These can be third party services or your custom function.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Markup&lt;/em&gt;&lt;br&gt;
Websites are served as static HTML files. These can be generated from source files, such as Markdown, using a Static Site Generator.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The problem with the legacy web&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LrW4nuFY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d33wubrfki0l68.cloudfront.net/b7d16f7f3654fb8572360301e60d76df254a323e/385ec/img/svg/architecture.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LrW4nuFY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d33wubrfki0l68.cloudfront.net/b7d16f7f3654fb8572360301e60d76df254a323e/385ec/img/svg/architecture.svg" alt="old architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A traditional website is actually a program that has to run on a web server at all times.&lt;/p&gt;

&lt;p&gt;Running sites this way needlessly slows things down, provides way too many opportunities for attack, and is expensive to scale.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefits of JAMstack&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Faster performance&lt;/em&gt;&lt;br&gt;
Serve pre-built markup and assets over a CDN.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;More secure&lt;/em&gt;&lt;br&gt;
No need to worry about server or database vulnerabilities.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Less expensive&lt;/em&gt;&lt;br&gt;
Hosting of static files is cheap or even free.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Better developer experience&lt;/em&gt;&lt;br&gt;
Front end developers can focus on the front end, without being tied to a monolithic architecture. This usually means quicker and more focused development.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Scalability&lt;/em&gt;&lt;br&gt;
If your product suddenly goes viral and has many active users, the CDN seamlessly compensates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Workflow&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Write code and push it to a source repository&lt;/li&gt;
&lt;li&gt;Design prebuilt content&lt;/li&gt;
&lt;li&gt;Ship built files to CDN (Content Delivery Network).&lt;/li&gt;
&lt;li&gt;A user requests a page (there is no need to interact with the origin server because the prebuilt content is available from CDN)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zi68mran--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mobidev.biz/wp-content/uploads/2021/07/jamstack-workflow.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zi68mran--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mobidev.biz/wp-content/uploads/2021/07/jamstack-workflow.jpg" alt="overflow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As regards core updates, they are pushed through Git. This allows re-building the site via up-to-date tools. Static site generators like Gatsby or Hugo are good examples of such tools because they form an integral part of the JAMstack approach.&lt;br&gt;
World-renowned companies like Mozilla, Nike, Smashing Magazine are using JAMstack. A reason why they’re choosing this solution differs. The primary factor is to reduce reliance on a server by means of solving tasks on the client-side, accelerating load and improving performance.&lt;/p&gt;

&lt;p&gt;According to Netlify’s survey, typical business use cases for Jamstack include consumer software – 45%, internal tooling – 36%, and enterprise software – 35% (the total volume is higher than 100% because respondents could select multiple options).&lt;/p&gt;

&lt;p&gt;JAMstack is great for providing high availability for large sites serving millions of users yearly. But it’s not suitable for web application development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JAMstack Projects&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.nexxus.com/us/en/"&gt;Nexxus&lt;/a&gt;&lt;br&gt;
&lt;a href="//www.panmacmillan.com"&gt;Pan Macmillian&lt;/a&gt;&lt;br&gt;
&lt;a href="//covidtracking.com"&gt;Covid Tracking Project&lt;/a&gt;&lt;br&gt;
&lt;a href="//docs.citrix.com"&gt;Citrix product documentation&lt;/a&gt; &lt;br&gt;
&lt;a href="//www.butcherbox.com"&gt;Butcher Box&lt;/a&gt;&lt;br&gt;
&lt;a href="//www.victoriabeckhambeauty.com"&gt;Victoria Beckham Beauty&lt;/a&gt;&lt;br&gt;
&lt;a href="https://jamstack.org/examples/"&gt;more...&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"A modern web development architecture based on client-side JavaScript, reusable APIs, and prebuilt Markup"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;— &lt;a href="https://www.netlify.com/jamstack/"&gt;Mathias Biilmann (CEO &amp;amp; Co-founder of Netlify).&lt;/a&gt;&lt;/p&gt;

</description>
      <category>jamstack</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Vue: When a computed property can be the wrong tool</title>
      <author>Thorsten Lünborg</author>
      <pubDate>Sun, 05 Sep 2021 12:57:45 +0000</pubDate>
      <link>https://dev.to/linusborg/vue-when-a-computed-property-can-be-the-wrong-tool-195j</link>
      <guid>https://dev.to/linusborg/vue-when-a-computed-property-can-be-the-wrong-tool-195j</guid>
      <description>&lt;p&gt;If you're a Vue user, you likely know computed properties, and if you are like me, you probably think they are awesome - rightfully so!&lt;/p&gt;

&lt;p&gt;To me, computed properties are a very ergonomic and elegant way to deal with derived state - that is: state which is made up from other state (its &lt;em&gt;dependencies&lt;/em&gt;). But in some scenarios, they can also have a &lt;em&gt;degrading&lt;/em&gt; effect on your performance, and I realized that many people are unaware of that, so this is what this article will attempt to explain.&lt;/p&gt;

&lt;p&gt;To make clear what we are talking about when we say "computed properties" in Vue, here's a quick example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Wahs Dishes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Throw out trash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;openTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hasOpenTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;openTodos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;code&gt;openTodos&lt;/code&gt; is derived from &lt;code&gt;todos&lt;/code&gt;, and &lt;code&gt;hasOpenTodos&lt;/code&gt; is derived from &lt;code&gt;openTodos&lt;/code&gt;. This is nice because now we have reactive objects that we can pass around and use, and they will automatically update whenever the state that they depend on, changes.&lt;/p&gt;

&lt;p&gt;If we use these reactive objects in a reactive context, such as a Vue template, a render function or a &lt;code&gt;watch()&lt;/code&gt;,  these will also react to the changes of our computed property and update - that's the magic at the core of Vue that we value so much, after all.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I'm using composition API because that's what I like to use these days. The behaviors describes in this article apply to computed properties in the normal Options API just as much, though. Both use the same reactivity system, after all.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-special-about-computed-properties"&gt;
  &lt;/a&gt;
  What is special about computed properties
&lt;/h2&gt;

&lt;p&gt;There's two things about computed properties that make them special and they are relevant to the point of this article:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Their results are cached and only need to be re-evaluated once one of its reactive dependencies changes.&lt;/li&gt;
&lt;li&gt;They are evaluated lazily on access.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#caching"&gt;
  &lt;/a&gt;
  Caching
&lt;/h3&gt;

&lt;p&gt;A computed property's result is cached. In our example above, that means that as long as the length of &lt;code&gt;todos&lt;/code&gt; doesn't change, calling &lt;code&gt;openTodos.value&lt;/code&gt; will return the same value &lt;em&gt;without re-running the filter method&lt;/em&gt;. This is especially great for expensive tasks, as this ensures that the task is only ever re-run when it has to – namely when one of its reactive dependencies has changed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lazy-evaluation"&gt;
  &lt;/a&gt;
  Lazy Evaluation
&lt;/h3&gt;

&lt;p&gt;Computed properties are also evaluated &lt;em&gt;lazily&lt;/em&gt; – but what does that mean, exactly? &lt;/p&gt;

&lt;p&gt;It means that the callback function of the computed property will only be run once the computed's value is being read (initially or after it was marked for an update because one of its dependencies changed). &lt;/p&gt;

&lt;p&gt;So if a computed property with an expensive computation isn't used by anything, that expensive operation won't even be done in the first place - another performance benefit when doing heavy lifting on a lot of data. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-lazy-evaluation-can-improve-performance"&gt;
  &lt;/a&gt;
  When lazy evaluation can &lt;em&gt;improve&lt;/em&gt; performance
&lt;/h2&gt;

&lt;p&gt;As explained in the previous paragraph, lazy evaluation of computed properties is a usually a good thing, especially for expensive operations: It ensures that the evaluation is only ever done when the result is actually needed.&lt;/p&gt;

&lt;p&gt;This means that things like filtering a big list will simply be skipped if that filtered result won't be read and used by any part of your code at that moment. Here's a quick example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;v-model=&lt;/span&gt;&lt;span class="s"&gt;"newTodo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;v-on:click=&lt;/span&gt;&lt;span class="s"&gt;"addTodo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Save&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;template&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"showListView"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;{{ openTodos.length }}&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt; Todos:
      &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"todo in openTodos"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          {{ todo.title }}
        &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;setup&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;showListView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Wahs Dishes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Throw out trash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;openTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;done&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hasOpenTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;openTodos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addTodo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;See This code running on the &lt;a href="https://sfc.vuejs.org/#eyJBcHAudnVlIjoiPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlYWN0aXZlLCByZWYsIGNvbXB1dGVkIH0gZnJvbSAndnVlJ1xuXG5jb25zdCBzaG93TGlzdCA9IHJlZihmYWxzZSlcbiAgXG5jb25zdCB0b2RvcyA9IHJlYWN0aXZlKFtcbiAgeyB0aXRsZTogJ1dhaHMgRGlzaGVzJywgZG9uZTogdHJ1ZX0sXG4gIHsgdGl0bGU6ICdUaHJvdyBvdXQgdHJhc2gnLCBkb25lOiBmYWxzZSB9XG5dKVxuXG5jb25zdCBvcGVuVG9kb3MgPSBjb21wdXRlZCgoKSA9PiB0b2Rvcy5maWx0ZXIodG9kbyA9PiAhdG9kby5kb25lKSlcbmNvbnN0IGhhc09wZW5Ub2RvcyA9IGNvbXB1dGVkKCgpID0+ICEhb3BlblRvZG9zLnZhbHVlLmxlbmd0aClcblxuY29uc3QgbmV3VG9kbyA9IHJlZignJylcbmZ1bmN0aW9uIGFkZFRvZG8oKSB7XG4gIHRvZG9zLnB1c2goe1xuICAgIHRpdGxlOiBuZXdUb2RvLnZhbHVlLFxuICAgIGRvbmU6IGZhbHNlXG4gIH0pXG4gIGNvbnNvbGUubG9nKHRvZG9zKVxufVxuXG48L3NjcmlwdD5cblxuPHRlbXBsYXRlPlxuICA8aW5wdXQgdHlwZT1cInRleHRcIiB2LW1vZGVsPVwibmV3VG9kb1wiPlxuXHQ8YnV0dG9uIHR5cGU9XCJidXR0b25cIiB2LW9uOmNsaWNrPVwiYWRkVG9kb1wiPlNhdmU8L2J1dHRvbj5cbiAgPGJ1dHRvbiBAY2xpY2s9XCJzaG93TGlzdCA9ICFzaG93TGlzdFwiPlxuICAgIFRvZ2dsZSBMaXN0Vmlld1xuICA8L2J1dHRvbj5cbiAgPHRlbXBsYXRlIHYtaWY9XCJzaG93TGlzdFwiPlxuICBcdDx0ZW1wbGF0ZSB2LWlmPVwiaGFzT3BlblRvZG9zXCI+XG4gICAgICA8aDI+e3sgb3BlblRvZG9zLmxlbmd0aCB9fSBUb2Rvczo8L2gyPiBcbiAgICAgIDx1bD5cbiAgICAgICAgPGxpIHYtZm9yPVwidG9kbyBpbiBvcGVuVG9kb3NcIj5cbiAgICAgICAgICB7eyB0b2RvLnRpdGxlIH19XG4gICAgICAgIDwvbGk+XG4gICAgICA8L3VsPlxuICAgIDwvdGVtcGxhdGU+XG4gICAgPHNwYW4gdi1lbHNlPk5vIHRvZG9zIHlldC4gQWRkIG9uZSE8L3NwYW4+XG4gIDwvdGVtcGxhdGU+XG4gIFxuPC90ZW1wbGF0ZT4ifQ=="&gt;SFC Playground&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;showList&lt;/code&gt; is initially &lt;code&gt;false&lt;/code&gt;, the template/render function will not read &lt;code&gt;openTodos&lt;/code&gt;, and consequently, the filtering would not even happen, neither initially nor after a new todo has been added and &lt;code&gt;todos.length&lt;/code&gt; has changed. Only after &lt;code&gt;showList&lt;/code&gt; has been set to &lt;code&gt;true&lt;/code&gt;, these computed properties would be read and that would trigger their evaluation.&lt;/p&gt;

&lt;p&gt;Of course in this small example, the amount of work for filtering is minimal, but you can imagine that for more expensive operations, this can be a huge benefit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-lazy-evaluation-can-degrade-performance"&gt;
  &lt;/a&gt;
  When lazy evaluation can &lt;em&gt;degrade&lt;/em&gt; performance
&lt;/h2&gt;

&lt;p&gt;There is a downside to this: If the result returned by a computed property can only be known after your code makes use of it somewhere, that also means that Vue's Reactivity system can't know this return value beforehand.&lt;/p&gt;

&lt;p&gt;Put another way, Vue can realize that one or more of the computed property's dependencies have changed and so it should be re-evaluated the next time it is being read, but Vue can't know, at that moment, wether the &lt;em&gt;result&lt;/em&gt; returned by the computed property would actually be different.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why can this be a problem?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Other parts of your code may depend on that computed property – could be another computed property, could be a &lt;code&gt;watch()&lt;/code&gt;, could be the template/render function. &lt;/p&gt;

&lt;p&gt;So Vue has no choice but to mark these dependents for an update as well – "just in case" the return value will be different. &lt;/p&gt;

&lt;p&gt;If those are expensive operations, you might have triggered an expensive re-evaluation even though your computed property returns the same value as before, and so the re-evaluation would have been unnecessary.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#demonstrating-the-issue"&gt;
  &lt;/a&gt;
  Demonstrating the issue
&lt;/h3&gt;

&lt;p&gt;Here's a quick example: Imagine we have a list of items, and a button to increase a counter. Once the counter reaches 100, we want to show the list in reverse order (yes, this example is silly. Deal with it).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(You can play with this example on this &lt;a href="https://sfc.vuejs.org/#eyJBcHAudnVlIjoiPHNjcmlwdCBzZXR1cD5cbiAgaW1wb3J0IHsgcmVmLCByZWFjdGl2ZSwgY29tcHV0ZWQsIG9uVXBkYXRlZCB9IGZyb20gJ3Z1ZSdcblxuICBjb25zdCBsaXN0ID0gcmVhY3RpdmUoWzEsMiwzLDQsNV0pXG4gIFxuICBjb25zdCBjb3VudCA9IHJlZigwKVxuICBmdW5jdGlvbiBpbmNyZWFzZSgpIHtcbiAgICBjb3VudC52YWx1ZSsrXG4gIH1cbiAgXG4gIGNvbnN0IGlzT3ZlcjEwMCA9IGNvbXB1dGVkKCgpID0+IGNvdW50LnZhbHVlID4gMTAwKVxuICBcbiAgY29uc3Qgc29ydGVkTGlzdCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAvLyBpbWFnaW5lIHRoaXMgdG8gYmUgZXhwZW5zaXZlXG4gICAgcmV0dXJuIGlzT3ZlcjEwMC52YWx1ZSA/IFsuLi5saXN0XS5yZXZlcnNlKCkgOiBbLi4ubGlzdF1cbiAgfSlcbiAgXG4gIG9uVXBkYXRlZCgoKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ2NvbXBvbmVudCByZS1yZW5kZXJlZCEnKVxuICB9KVxuICBcbjwvc2NyaXB0PlxuXG48dGVtcGxhdGU+XG4gIDxidXR0b24gQGNsaWNrPVwiaW5jcmVhc2VcIj5cbiAgICBDbGljayBtZVxuICA8L2J1dHRvbj5cbiAgPGJyPlxuICA8aDM+XG4gICAgTGlzdFxuICA8L2gzPlxuICA8dWw+XG4gICAgPGxpIHYtZm9yPVwiaXRlbSBpbiBzb3J0ZWRMaXN0XCI+XG4gICAgICB7eyBpdGVtIH19XG4gICAgPC9saT5cbiAgPC91bD5cbjwvdGVtcGxhdGU+In0="&gt;SFC playground&lt;/a&gt;)&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"increase"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Click me
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;
    List
  &lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"item in sortedList"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      {{ item }}
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;setup&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onUpdated&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;increase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isOver100&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sortedList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// imagine this to be expensive&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;isOver100&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;onUpdated&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// this eill log whenever the component re-renders&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;component re-rendered!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Question&lt;/strong&gt;: You click the button 101 times. How often does our component re-render?&lt;/p&gt;

&lt;p&gt;Got your answer? You sure?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; It will re-render &lt;strong&gt;101 times*.&lt;/strong&gt;*&lt;/p&gt;

&lt;p&gt;I suspect some of you might have expected a different answer, something like: "once, on the 101st click". But that's wrong, and the reason for this is the lazy evaluation of computed properties.&lt;/p&gt;

&lt;p&gt;Confused? We'll walk through what's happening step by step:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;When we click the button, the &lt;code&gt;count&lt;/code&gt; is increased. The component would not re-render, because we don't use the counter in the template.&lt;/li&gt;
&lt;li&gt;But since &lt;code&gt;count&lt;/code&gt; changed, our computed property &lt;code&gt;isOver100&lt;/code&gt;is marked as "dirty" - a reactive dependency changed, and so its return value has to be re-evaluated.&lt;/li&gt;
&lt;li&gt;But due to lazy evaluation, that will only happen once something else reads &lt;code&gt;isOver100.value&lt;/code&gt; - before that happens, we (and Vue) don't know if this computed property will still return &lt;code&gt;false&lt;/code&gt; or will change to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sortedList&lt;/code&gt;depends on &lt;code&gt;isOver100&lt;/code&gt; though - so it also has to be marked dirty. And likewise, it won't yet be re-evaluated because that only happens when it's being read.&lt;/li&gt;
&lt;li&gt;Since our template depends on &lt;code&gt;sortedList&lt;/code&gt;, and it's marked as "dirty" (potentially changed, needs re-evaluation), the component re-renders.&lt;/li&gt;
&lt;li&gt;During rendering, it reads &lt;code&gt;sortedList.value&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sortedList&lt;/code&gt; now re-evaluates, and reads &lt;code&gt;isOver100.value&lt;/code&gt; – which now re-evaluates, but still returns &lt;code&gt;false&lt;/code&gt; again.&lt;/li&gt;
&lt;li&gt;So now we have re-rendered the component &lt;em&gt;and&lt;/em&gt; re-run the "expensive" &lt;code&gt;sorteList&lt;/code&gt;computed even though all of that was unnecessary - the resulting new virtual DOM / template will look exactly the same.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The real culprit is &lt;code&gt;isOver100&lt;/code&gt; – it is a computed that often updates, but usually returns the same value as before, and on top of that, it's a cheap operation that doesn't really profit from a the caching computed properties provide. We just used a computed because it feels ergonomic, it's "nice".&lt;/p&gt;

&lt;p&gt;When used in another, expensive computed (which &lt;em&gt;does&lt;/em&gt; profit from caching) or the template, it will trigger unnecessary updates that can seriously degrade your code's performance depending on the scenario.&lt;/p&gt;

&lt;p&gt;It's essentially this combination:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;An expensive computed property, watcher or the template depends on&lt;/li&gt;
&lt;li&gt;another computed property that often re-evaluates to the same value.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#how-to-solve-this-problem-when-you-come-across-it"&gt;
  &lt;/a&gt;
  How to solve this problem when you come across it.
&lt;/h2&gt;

&lt;p&gt;By now you might have two questions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Wow! Is this a bad problem?&lt;/li&gt;
&lt;li&gt;How do I get rid of it?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So first off: Chill. Usually, this is not a big problem. Vue's Reactivity System is generally very efficient, and re-renders are as well, especially now in Vue 3. usually, a couple unnecessary updates here and there will still perform much better than a React counterpart that by default, re-renders on &lt;em&gt;any state change whatsoever&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So the problem only applies to specific scenarios where you have a mix of frequent state updates in one place, that trigger frequent unnecessary updates in another place that is expensive (very large component, computationally heavy computed property etc).&lt;/p&gt;

&lt;p&gt;If you encounter such a situation, luckily you have different ways of solving it:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Using plain functions instead of standalone computed properties&lt;/li&gt;
&lt;li&gt;Using Getters instead of computed properties on objects&lt;/li&gt;
&lt;li&gt;Using a custom "eagerly computed" property&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#plain-functions"&gt;
  &lt;/a&gt;
  Plain functions
&lt;/h3&gt;

&lt;p&gt;If the operation of our computed property is a cheap one-liner, we can use a function instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// computed property&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hasOpenTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// usage&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hasOpenTodos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// list open todos&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Simple function&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hasOpenTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;
&lt;span class="c1"&gt;// Usage&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hasOpenTodos&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// list open todos&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Both ways offer a descriptive naming, but the second one is likely a bit better for overall performance, as a simple function is lighter on memory and CPU usage that a computed property, and its operation – reading the length of an array – is so cheap that the computed's cache behavior won't offer any benefit over this.&lt;/p&gt;

&lt;p&gt;And a simple function won't have lazy evaluation, so we don't risk triggering unnecessary effect runs of the template/render function, watcher or another computed property.&lt;/p&gt;

&lt;p&gt;Now, in most circumstances, this might not have a big impact, but in certain scenarios, it might have. Just imagine a component that uses several of this kind of computed property &lt;em&gt;and&lt;/em&gt; is being render many times in a big list – here, using functions instead of a computed property can save you some memory for sure.&lt;/p&gt;

&lt;p&gt;I'd say that using a computed property is still fine in close to all cases on its own. If you prefer the style of a computed property over the simple function, by all means just do what you prefer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getters"&gt;
  &lt;/a&gt;
  Getters
&lt;/h3&gt;

&lt;p&gt;I have also seen a pattern like this one being used in the wild:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Linusborg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;bigName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This can be handy if you want to have an object where some properties are derived from others.&lt;/p&gt;

&lt;p&gt;But actually, a computed property would be overkill in this example. Javascript has its own way of deriving state for an object property – called &lt;a href="https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Functions/get"&gt;Getters&lt;/a&gt;. It doesn't have caching or lazy evaluation, but that's fine here, we don't really profit much from those in such a scenario anyway.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Linusborg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;bigName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Problem solved. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#custom-raw-eagercomputed-endraw-helper"&gt;
  &lt;/a&gt;
  Custom &lt;code&gt;eagerComputed&lt;/code&gt; helper
&lt;/h3&gt;

&lt;p&gt;Functions and getters are fine, but for those of us who are used to Vue's way of doing things, a computed property may just feel nicer. Luckily, Vue's Reactivity System gives us all of the required tools to build our own version of a &lt;code&gt;computed()&lt;/code&gt;, one that evaluates &lt;em&gt;eagerly&lt;/em&gt;, not &lt;em&gt;lazily.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;Let's call it &lt;code&gt;eagerComputed()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;watchEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;shallowRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;readonly&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;eagerComputed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;shallowRef&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;watchEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; 
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sync&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// needed so updates are immediate.&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;readonly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can then use this like we would use a computed property, but the difference in behavior is that the update will be eager, not lazy, getting rid of unnecessary updates.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hasOpenTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;eagerComputed&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;todos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When would you use &lt;code&gt;computed()&lt;/code&gt; and when &lt;code&gt;eagerComputed()&lt;/code&gt;?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;computed()&lt;/code&gt;when you have a complex calculation going on, which can actually profit from caching and lazy evaluation and should only be (re-)calculated if really necessary.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;eagerComputed()&lt;/code&gt; when you have a simple operation, with a rarely changing return value – often a boolean.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Keep in mind that this will still add a bit of an overhead as it makes use of a bunch of reactivity APIs - a simple function would usually be more efficient in &lt;em&gt;very&lt;/em&gt; sensitive scenarios.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finishing-up"&gt;
  &lt;/a&gt;
  Finishing up
&lt;/h2&gt;

&lt;p&gt;So this is it. We dove deeper into how computed properties actually work. We learned when they are beneficial for your app's performance, and when they can degrade it. Concerning the latter scenario, we covered 3 different ways to solve the performance problem by avoiding unnecessary reactive updates.&lt;/p&gt;

&lt;p&gt;I hope this was helpful. Let me know if you have questions, and tell me other topics you may want me to cover.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>frontend</category>
      <category>performance</category>
    </item>
    <item>
      <title>Rest Assured E2E Testing - Part 2</title>
      <author>TaheraFirdose</author>
      <pubDate>Sun, 05 Sep 2021 12:56:14 +0000</pubDate>
      <link>https://dev.to/taherafirdose/rest-assured-e2e-testing-part-2-1a8j</link>
      <guid>https://dev.to/taherafirdose/rest-assured-e2e-testing-part-2-1a8j</guid>
      <description>&lt;h1&gt;
  &lt;a href="#how-to-create-a-fake-rest-api-with-jsonserver"&gt;
  &lt;/a&gt;
  How to create a Fake REST API with JSON-Server
&lt;/h1&gt;

&lt;p&gt;We currently do not have any real business exposed APIs with us for testing, so we will be creating dummy APIs (which will be provided by the developers in the real time scenario) using NodeJS. The npm package in Node JS will help us even more by installing JSON Server, which will allow us to create dummy APIs for practise.&lt;br&gt;
To install Json server, first install nodejs and npm (npm is installed automatically when we install nodejs).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#installation-and-configuration-of-nodejs"&gt;
  &lt;/a&gt;
  Installation and Configuration of NodeJS:
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Go to google.com and search “download Node JS&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ITXAnls7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l08kg5tyemsyswwu6j59.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ITXAnls7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l08kg5tyemsyswwu6j59.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Download Node.js from the link &lt;a href="https://nodejs.org/en/download/"&gt;https://nodejs.org/en/download/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select the installer based on your system, I am downloading &lt;br&gt;
windows installer &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V8e32KtZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/584nqonofs7usqdsumjr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V8e32KtZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/584nqonofs7usqdsumjr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After successfully downloading, install by clicking next -&amp;gt; next -&amp;gt; next till finish&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The nodejs setup can be found in the nodejs folder, which is usually created by default at C:\Program Files\nodejs. Start the setup. Copy the path C:\Program Files\nodejs from the nodejs folder.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A8Ea18sA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a35tghezl4d43fh9phvr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A8Ea18sA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a35tghezl4d43fh9phvr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Now set up the path variables as shown below&lt;br&gt;
In the search bar, enter sys and select Edit the system environment variables.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JVnQ10sC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bemkkw2j6fbw4qd9qlp4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JVnQ10sC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bemkkw2j6fbw4qd9qlp4.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on Advanced tab and Environment variables&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kQYPdnVg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ros47dl0dfcluqte3q0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kQYPdnVg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ros47dl0dfcluqte3q0.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Under system Variables, click on new and add as below&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9Edg3nRX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sxz5h3ke0yrsjnvnustu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Edg3nRX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sxz5h3ke0yrsjnvnustu.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select Path Variable under the System variables and click on Edit Button&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iHgEe4CV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxpbptcgv9jcf0crigt0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iHgEe4CV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxpbptcgv9jcf0crigt0.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on New and Paste the path that was copied earlier in step 5 C:\Program Files\nodejs and click Ok…Ok and Ok.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZogZhmbq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/408xq5u846njbvjpf6g4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZogZhmbq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/408xq5u846njbvjpf6g4.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Verify the installation in command prompt by entering node -v&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9NatxjFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e5yegef4x5uxaoeo7ixo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9NatxjFo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e5yegef4x5uxaoeo7ixo.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Please note that after installing nodejs, another file named npm (node package manager) is installed under the nodejs folder, and this npm facilitates the installation of various nodejs packages.&lt;br&gt;
verify npm installation by typing the following command: C:&amp;gt;npm - -version&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SisxUa3V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pc3bl5547tm4mb2a3774.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SisxUa3V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pc3bl5547tm4mb2a3774.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-json-server"&gt;
  &lt;/a&gt;
  Installing Json Server
&lt;/h2&gt;

&lt;p&gt;JSON Server is available as a NPM package. The installation can be done by using the Node.js package manager:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-npm-install-g-jsonserver"&gt;
  &lt;/a&gt;
  $ npm install -g json-server
&lt;/h4&gt;

&lt;p&gt;By adding the -g option we make sure that the package is installed globally on your system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#json-file"&gt;
  &lt;/a&gt;
  JSON File
&lt;/h2&gt;

&lt;p&gt;Let's make a new JSON file called db.json. This file contains the data that the REST API should expose. CRUD entpoints are automatically created for objects contained in the JSON structure. Take a look at the sample db.json file below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yyy0E7UQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/49u3eh4jcocgl9pmgtvz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yyy0E7UQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/49u3eh4jcocgl9pmgtvz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#running-the-server"&gt;
  &lt;/a&gt;
  Running The Server
&lt;/h2&gt;

&lt;p&gt;Let’s start JSON server by executing the following command:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-jsonserver-watch-dbjson"&gt;
  &lt;/a&gt;
  $ json-server --watch db.json
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a7pKCyZ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79fgrlagvwsavtxuq3zf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a7pKCyZ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79fgrlagvwsavtxuq3zf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a parameter, we must supply the file containing our JSON structure (db.json). In addition, we're employing the — watch parameter. By using this parameter, we ensure that the server is started in watch mode, which means that it monitors for file changes and updates the exposed API as needed.&lt;/p&gt;

&lt;p&gt;The json server is up and it has created four dumpy API’s for us as per the json data present in file:&lt;br&gt;
 • &lt;a href="http://localhost:3000/employees"&gt;http://localhost:3000/employees&lt;/a&gt; &lt;br&gt;
• &lt;a href="http://localhost:3000/posts"&gt;http://localhost:3000/posts&lt;/a&gt;&lt;br&gt;
 • &lt;a href="http://localhost:3000/comments"&gt;http://localhost:3000/comments&lt;/a&gt;&lt;br&gt;
 • &lt;a href="http://localhost:3000/profile"&gt;http://localhost:3000/profile&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can open URL &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; in the browser and we’ll get to see below result.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qkJEsMS3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/blleud7s8j2e8jogk2u1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qkJEsMS3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/blleud7s8j2e8jogk2u1.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To terminate the server we have to type Ctrl+C command and then press Y as per confirmation message prompted below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eIogT74j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqpc4h753w6y2ttp3zdn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eIogT74j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqpc4h753w6y2ttp3zdn.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>restapi</category>
      <category>automationtesting</category>
      <category>restassured</category>
    </item>
  </channel>
</rss>
