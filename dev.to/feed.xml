<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Hey Android, Where's my Process?</title>
      <author>Nikhil Thakkar</author>
      <pubDate>Thu, 29 Jul 2021 19:13:30 +0000</pubDate>
      <link>https://dev.to/_nikhi1/hey-android-where-s-my-process-4f0e</link>
      <guid>https://dev.to/_nikhi1/hey-android-where-s-my-process-4f0e</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Sometimes good guys gotta do bad things to make the bad guys pay. &lt;br&gt;
&lt;br&gt;- &lt;em&gt;Harvey Specter&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This article is a followup on this &lt;a href="https://medium.com/mindorks/hey-android-please-keep-my-activities-7bf96ccc0a38"&gt;medium article&lt;/a&gt; written by my friend Calvin. I would highly recommend you to go through it as it lays the foundation for this article.&lt;/p&gt;

&lt;p&gt;We would be particularly dealing with process kill scenarios and explore potential solutions to mitigate.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#android-app-lifecycle"&gt;
  &lt;/a&gt;
  Android App Lifecycle
&lt;/h2&gt;

&lt;p&gt;Every app runs in its own sandbox environment i.e its own process. Every process is allotted some amount of RAM from the existing available RAM by the OS.&lt;/p&gt;

&lt;p&gt;Nowadays, Android is becoming more and more battery-friendly and it's doing that, partly, by aggressively killing background apps that are not in the foreground after a relatively small amount of time. This, of course, depends on various other factors happening on the device like available RAM, etc. Check out this &lt;a href="https://dontkillmyapp.com/"&gt;site&lt;/a&gt; for more information about how different manufacturers deal with background apps restrictions.&lt;/p&gt;

&lt;p&gt;So it's the developer's responsibility to test his/her app for such scenarios for optimal user experience. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-simulate-a-process-kill-wink"&gt;
  &lt;/a&gt;
  How to simulate a process kill üòâ?
&lt;/h2&gt;

&lt;p&gt;Now that we have established the reason to test these edge cases, its time to simulate a process kill scenario.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cAYrn_UE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://giphygifs.s3.amazonaws.com/media/8oPkn7Hl79J6g/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cAYrn_UE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://giphygifs.s3.amazonaws.com/media/8oPkn7Hl79J6g/giphy.gif" alt="Harvey"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-naive-way"&gt;
  &lt;/a&gt;
  The Naive way
&lt;/h3&gt;

&lt;p&gt;The camera app on your phone is resource-intensive and requires a lot of RAM to run. Once you start the app, this results in the systematic killing of your background apps almost instantly. Mind well this might not be true for every scenario. Only opt for this approach if you are lazy üòÅ.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-nerdy-way"&gt;
  &lt;/a&gt;
  The Nerdy way üòé
&lt;/h3&gt;

&lt;p&gt;Let's get our hands dirty and run some terminal commands. Assuming an Android emulator is available and you have the sample project running with applicationId &lt;strong&gt;com.processkill.example&lt;/strong&gt;, go to terminal and type this command (these commands have been tested on Android emulator running P)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;adb shell pidof com.processkill.example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should output the ProcessID in which the app is running. Now go ahead and minimize the app by pressing the HOME button. This is needed to be done as Android would not kill a user-focused activity/app/process.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;adb shell am kill com.processkill.example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By running this command we have in principle simulated a process kill scenario. If you run the earlier command again you should see an empty string being printed on console meaning the process has been actually terminated.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#time-for-retrospective"&gt;
  &lt;/a&gt;
  Time for retrospective
&lt;/h3&gt;

&lt;p&gt;Go ahead and test your app by running the above commands and see how it behaves in different scenarios.&lt;br&gt;
If you have a well-crafted app and it works well in the above scenario then you should be proud of yourself achieving such a feat üçª. &lt;/p&gt;

&lt;p&gt;If you are facing some issues then read on.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#whos-the-culprit-and-i-dont-mean-its-you-joy"&gt;
  &lt;/a&gt;
  Who's the culprit? And I don't mean it's you üòÇ
&lt;/h3&gt;

&lt;p&gt;There could be a number of reasons for this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Maybe the way you have implemented the app architecture without giving 
careful thought about the state of the app in such scenarios.&lt;/li&gt;
&lt;li&gt;You were short on time, which is mostly the case, in fast pace driven development.&lt;/li&gt;
&lt;li&gt;Android itself üòè&lt;/li&gt;
&lt;li&gt;Add your own reason üòÅ&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;The issue/feature about &lt;strong&gt;Android&lt;/strong&gt; is that it will automagically re-create the last Activity and also re-attach the Fragments, if any, from your Task Stack if the user resumes the app after it has been killed by OS. This is different from &lt;strong&gt;iOS&lt;/strong&gt; behaviour wherein the OS doesn't restore the last ViewController automatically.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Though the intention from Android seem correct resulting in better UX, it throws a challenge for us, developers, to handle these scenarios and think of it while designing apps.&lt;/p&gt;

&lt;p&gt;Let's see what we can do here and strike a balance between UX and state of the app.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#but-first-repeat-after-me"&gt;
  &lt;/a&gt;
  But first, repeat after me:
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Static and/or member variables defined in the &lt;strong&gt;Application&lt;/strong&gt; or any &lt;strong&gt;Singleton&lt;/strong&gt; class won't survive the &lt;strong&gt;process kill&lt;/strong&gt; and will reset to their default values which could be &lt;strong&gt;null&lt;/strong&gt;. Remember &lt;code&gt;NullPointerException&lt;/code&gt; üò±.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;
  &lt;a href="#scenario-1"&gt;
  &lt;/a&gt;
  Scenario: 1
&lt;/h4&gt;

&lt;p&gt;You don't have any caching/persistence strategy implemented for your app.&lt;/p&gt;

&lt;p&gt;In such scenarios, the easiest way out would be to start from a clean slate. Here is the code that can potentially go inside the BaseActivity class.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developer Warning&lt;/strong&gt;‚ö†Ô∏è  Use this solution only as a last resort.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;currentProcessId&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;myPid&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentProcessId&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;PID_KEY&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;intent&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;applicationContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;SplashActivity&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flags&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FLAG_ACTIVITY_NEW_TASK&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="nc"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FLAG_ACTIVITY_CLEAR_TASK&lt;/span&gt;
                &lt;span class="nf"&gt;startActivity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nf"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onSaveInstanceState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onSaveInstanceState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;outState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;putString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;PID_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;myPid&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What this piece of code is doing is that if we detect our app has been recreated because of the process kill then we re-direct the app to the launcher activity which in this case is the SplashActvity.&lt;/p&gt;

&lt;p&gt;At first, you would be tempted to use this solution in every app you have built. But this would be bad for UX as the user expects to start off from where he/she left your application.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#scenario-2"&gt;
  &lt;/a&gt;
  Scenario: 2
&lt;/h4&gt;

&lt;p&gt;Let's try to put everything in &lt;code&gt;Bundle&lt;/code&gt; -&amp;gt; objects that are intended to be used across process boundaries such as with IPC/Binder transactions, between activities with intents, and to store transient state across configuration changes. &lt;/p&gt;

&lt;p&gt;Please refer to &lt;a href="https://github.com/nikhil-thakkar/process-kill-example"&gt;this&lt;/a&gt; github repo for a sample project. Checkout the master branch for the project if you want to follow along.&lt;br&gt;
The code is very simple to understand and is pretty much a boilerplate with classical MVC üòã.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I'm using sample json files packed inside &lt;code&gt;assets&lt;/code&gt; folder to keep things simple and readable.&lt;br&gt;
The json file holds some randomly generated data to be consumed by the app. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The main components of the app are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DataProvider&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a simple interface to abstract the source from where the data is coming from. In our case it's a file read from &lt;code&gt;assets&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MainFragment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Listing page of all the users.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DetailFragment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Detail page about a particular user.&lt;/p&gt;

&lt;p&gt;Now if you place around with the app, it should work fine in every scenario including process death. Do verify it by running the terminal commands to simulate a process death scenario we discussed above.&lt;/p&gt;

&lt;p&gt;Now follow these steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Checkout branch &lt;strong&gt;scenario-2&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Run the app&lt;/li&gt;
&lt;li&gt;Minimize it&lt;/li&gt;
&lt;li&gt;Look at logcat for some suprises üí©
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;2019-11-13 21:40:10.542 24962-24962/com.processkill.example E/AndroidRuntime: FATAL EXCEPTION: main
    Process: com.processkill.example, PID: 24962
    java.lang.RuntimeException: android.os.TransactionTooLargeException: data parcel size 1253524 bytes
        at android.app.servertransaction.PendingTransactionActions&lt;span class="nv"&gt;$StopInfo&lt;/span&gt;.run&lt;span class="o"&gt;(&lt;/span&gt;PendingTransactionActions.java:161&lt;span class="o"&gt;)&lt;/span&gt;
        at android.os.Handler.handleCallback&lt;span class="o"&gt;(&lt;/span&gt;Handler.java:883&lt;span class="o"&gt;)&lt;/span&gt;
        at android.os.Handler.dispatchMessage&lt;span class="o"&gt;(&lt;/span&gt;Handler.java:100&lt;span class="o"&gt;)&lt;/span&gt;
        at android.os.Looper.loop&lt;span class="o"&gt;(&lt;/span&gt;Looper.java:214&lt;span class="o"&gt;)&lt;/span&gt;
        at android.app.ActivityThread.main&lt;span class="o"&gt;(&lt;/span&gt;ActivityThread.java:7319&lt;span class="o"&gt;)&lt;/span&gt;
        at java.lang.reflect.Method.invoke&lt;span class="o"&gt;(&lt;/span&gt;Native Method&lt;span class="o"&gt;)&lt;/span&gt;
        at com.android.internal.os.RuntimeInit&lt;span class="nv"&gt;$MethodAndArgsCaller&lt;/span&gt;.run&lt;span class="o"&gt;(&lt;/span&gt;RuntimeInit.java:492&lt;span class="o"&gt;)&lt;/span&gt;
        at com.android.internal.os.ZygoteInit.main&lt;span class="o"&gt;(&lt;/span&gt;ZygoteInit.java:934&lt;span class="o"&gt;)&lt;/span&gt;
     Caused by: android.os.TransactionTooLargeException: data parcel size 1253524 bytes
        at android.os.BinderProxy.transactNative&lt;span class="o"&gt;(&lt;/span&gt;Native Method&lt;span class="o"&gt;)&lt;/span&gt;
        at android.os.BinderProxy.transact&lt;span class="o"&gt;(&lt;/span&gt;BinderProxy.java:510&lt;span class="o"&gt;)&lt;/span&gt;
        at android.app.IActivityTaskManager&lt;span class="nv"&gt;$Stub$Proxy&lt;/span&gt;.activityStopped&lt;span class="o"&gt;(&lt;/span&gt;IActivityTaskManager.java:4500&lt;span class="o"&gt;)&lt;/span&gt;
        at android.app.servertransaction.PendingTransactionActions&lt;span class="nv"&gt;$StopInfo&lt;/span&gt;.run&lt;span class="o"&gt;(&lt;/span&gt;PendingTransactionActions.java:145&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is because when we communicate across different process boundaries there is limit on the data we can share with the other process wiz. &lt;strong&gt;1MB&lt;/strong&gt;. In our case it's a bit over 1MB and hence the exception, &lt;code&gt;TransactionTooLargeException&lt;/code&gt;, which results in process being killed when in background.&lt;/p&gt;

&lt;p&gt;Therefore always carefully examine what you are going to put in &lt;code&gt;Bundle&lt;/code&gt; and size implications.&lt;br&gt;
Save the smallest amount of data possible which could be one of the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;primary column id when reading from database or &lt;/li&gt;
&lt;li&gt;file path when reading from disk or &lt;/li&gt;
&lt;li&gt;some other souce from where you can reliably re-create app state somehow or&lt;/li&gt;
&lt;li&gt;try try try or&lt;/li&gt;
&lt;li&gt;fallback to &lt;strong&gt;Scenario: 1&lt;/strong&gt; üíØ &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#side-note-on-flutter"&gt;
  &lt;/a&gt;
  Side note on Flutter
&lt;/h3&gt;

&lt;p&gt;Flutter apps run inside a single activity. These apps would, by default, start from the &lt;strong&gt;first widget&lt;/strong&gt; defined in case of &lt;code&gt;Don't keep activities/process death&lt;/code&gt; scenarios unless explicitly handled. This first widget would be the one defined by &lt;em&gt;home&lt;/em&gt; property inside &lt;strong&gt;MaterialApp&lt;/strong&gt; widget.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thats-it-for-this-time"&gt;
  &lt;/a&gt;
  That's It for this time!
&lt;/h3&gt;

&lt;p&gt;Thank you for hanging around. Hope you learned something new üòÉ. Feel free to reach out on twitter - &lt;a href="https://twitter.com/_nikhi1"&gt;&lt;strong&gt;@_nikhi1&lt;/strong&gt;&lt;/a&gt; - for any questions/feedback you have.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/TW6HfTEHrAPv2/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/TW6HfTEHrAPv2/giphy.gif" alt="Harvey"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.android.com/guide/components/processes-and-threads"&gt;Processes and Threads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.android.com/guide/components/activities/parcelables-and-bundles"&gt;Parcels and Bundles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/JoseAlcerreca/android-lifecycles"&gt;Android Lifecycle Cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.android.com/reference/android/os/TransactionTooLargeException"&gt;Transactions Too Large Expection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.android.com/topic/libraries/architecture/viewmodel-savedstate"&gt;Save State Module for ViewModel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pub.dev/packages/native_state"&gt;Flutter Native State Plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>android</category>
      <category>processkill</category>
      <category>background</category>
    </item>
    <item>
      <title>7 CSS Tricks you should now as a Developer!</title>
      <author>SAIFULLAHüáÆüá≥</author>
      <pubDate>Thu, 29 Jul 2021 18:25:42 +0000</pubDate>
      <link>https://dev.to/saifullah/7-css-tricks-you-should-now-as-a-developer-5bmb</link>
      <guid>https://dev.to/saifullah/7-css-tricks-you-should-now-as-a-developer-5bmb</guid>
      <description>&lt;p&gt;As I am learning Development, I would like to share this &lt;strong&gt;7 &lt;em&gt;CSS&lt;/em&gt; tricks that you should know as a Developer for better results.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you know this before hit heart below!&lt;/p&gt;

&lt;p&gt;So let's begin...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-disable-a-link"&gt;
  &lt;/a&gt;
  1. Disable a link
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eZ0r5uDw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ql5cpnisgsmoq1riyg25.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eZ0r5uDw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ql5cpnisgsmoq1riyg25.jpg" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;~You can disable any link using css and no action will take place while you click on the link.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-disable-text-selection"&gt;
  &lt;/a&gt;
  2. Disable Text Selection
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8f_uV7YS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqdnhztg5ev2opr4z68o.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8f_uV7YS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqdnhztg5ev2opr4z68o.jpg" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;~The property user-select says whether the use can select the element or not.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-resize-images-to-fit"&gt;
  &lt;/a&gt;
  3. Resize images to fit
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AcNl-6CO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ructscyg34tb5w2q92s6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AcNl-6CO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ructscyg34tb5w2q92s6.jpg" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;~when you get in a pinch where images need to fit a certain width, while scaling proportionally. An easy way to do this is to use max width to handle this.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-custom-caret-color"&gt;
  &lt;/a&gt;
  4. Custom caret color
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BYo3iD-q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sk5q1efgwzkjh3hp0wex.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BYo3iD-q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sk5q1efgwzkjh3hp0wex.jpg" alt="Images"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;~The caret-color property sets the color of the insertion carpet, the visible marker where the next character types will be inserted.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-disable-text-area-resize"&gt;
  &lt;/a&gt;
  5. Disable Text Area resize
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0mHyqvJ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yjp9xu1444frcqkbfii8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0mHyqvJ8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yjp9xu1444frcqkbfii8.jpg" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;~Resize property will resize the textarea, inorder to disable textarea you should give none value.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-making-image-fit"&gt;
  &lt;/a&gt;
  6. Making image fit
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kryl_USC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6q82jigsytp6h2c3pwd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kryl_USC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b6q82jigsytp6h2c3pwd.jpg" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;~This object-fit property sets how the content of a replaced element, such as an img or video, should be resized to fit its container.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-placeholders-color"&gt;
  &lt;/a&gt;
  7. Placeholder's color
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JFWuMgVG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atp7ffu0mxd313hnhxdq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JFWuMgVG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atp7ffu0mxd313hnhxdq.jpg" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;~The ::placeholder selector selects fork elements with placeholder text. This will let you style the placeholder text.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;br&gt;
Do read my previous posts you will love it.&lt;/p&gt;

&lt;p&gt;Do follow me on Twitter for moreü§ó&lt;br&gt;
&lt;a href="https://twitter.com/sa_ifullah?s=09"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>css</category>
      <category>html</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Understanding reduce in javascript</title>
      <author>Shaurya Vardhan Singh</author>
      <pubDate>Thu, 29 Jul 2021 17:43:08 +0000</pubDate>
      <link>https://dev.to/wulforr/understanding-reduce-in-javascript-4hgh</link>
      <guid>https://dev.to/wulforr/understanding-reduce-in-javascript-4hgh</guid>
      <description>&lt;p&gt;Reduce is an array method that was introduced in javaScript in ES5 along with map and filter. Map and filter are pretty straightforward to understand but I had difficulty understanding reduce so in this blog we are going to understand reduce with the help of some examples.&lt;/p&gt;

&lt;p&gt;As the name suggests reduce method is used to reduce the array to a single value.&lt;br&gt;
According to MDN - &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The reduce() method executes a reducer function (that you provide) on each element of the array, resulting in a single output value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, this single output value could be anything, it could be a number, an object, or even an array.&lt;/p&gt;

&lt;p&gt;Let's take an example - you have an array of numbers and you would want to calculate the sum of it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;so we can use reduce here as we want a single output, reduce method takes 2 parameters one is a callback function and the other is the initial value. The initial value is optional and if we don't provide it then it takes the first value of the array as an initial value and starts from 2nd value of an array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callbackFunction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you don't provide the initial value there is a chance to get a type error if the array is empty, so it's a good practice to always include the initial value.&lt;/p&gt;

&lt;p&gt;The callback function can have 4 arguments - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;accumulator&lt;/strong&gt; : it is the return value of the callbackFunction for the next iteration and for the first time it is initialValue. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;currentValue&lt;/strong&gt; : the current array item&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;index&lt;/strong&gt; : index of the currentValue&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;wholeArray&lt;/strong&gt; : the complete array on which we are applying reduce
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callbackFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;wholeArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// doSomethingHere&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;index and wholeArray arguments are optional and can be omitted. In 99% of cases, only the first two arguments are needed&lt;/p&gt;

&lt;p&gt;In this example, while looping through the array in each iteration we add the currentValue to the accumulator and return it this return becomes the accumulator for the next iteration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callbackFunction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;accumulator&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can write this in one line using arrow function as well -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arrayOfNumbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;accumulator&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;currentValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This would have ran the loop 5 times - &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Iteration number ---&amp;gt; accumulator ---&amp;gt; currentValue&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1 ---&amp;gt;0(initialValue) ---&amp;gt; 9&lt;/p&gt;

&lt;p&gt;2 ---&amp;gt; 9(0 + 9) ---&amp;gt; 8&lt;/p&gt;

&lt;p&gt;3 ---&amp;gt;17(9 + 8) ---&amp;gt; 7&lt;/p&gt;

&lt;p&gt;4 ---&amp;gt;24(17 + 7) ---&amp;gt; 6&lt;/p&gt;

&lt;p&gt;5 ---&amp;gt;30(24 + 5) ---&amp;gt; 5&lt;/p&gt;

&lt;p&gt;and then it returns 35&lt;/p&gt;

&lt;p&gt;This was a straightforward example now lets take a complex example.&lt;br&gt;
We are given an array of students data and we need to group students with their favourite fruit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;studentsData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Shaurya&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;favouriteFood&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mango&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Priya&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;favouriteFood&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Rishabh&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;favouriteFood&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mango&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Shubham&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;favouriteFood&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Grapes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ashish&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;favouriteFood&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Strawberry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to return an object with fruits as keys and students as array values.&lt;br&gt;
So we take initialValue as an empty object and will iterate through the array and check for each student if fruit is present in accumulator then push the student to its array else add the fruit as key and push the student as its value in array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;groupByFavouriteFruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;studentsData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentStudent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentStudent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;favouriteFood&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentStudent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;   
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{})&lt;/span&gt;

&lt;span class="c1"&gt;//  so groupByFavouriteFruits becomes &lt;/span&gt;
&lt;span class="c1"&gt;// {&lt;/span&gt;
&lt;span class="c1"&gt;//     Mango : [ 'Shaurya', 'Rishbah' ],&lt;/span&gt;
&lt;span class="c1"&gt;//     Apple : [ 'Priya' ],&lt;/span&gt;
&lt;span class="c1"&gt;//     Grapes : [ 'Shubham' ],&lt;/span&gt;
&lt;span class="c1"&gt;//     Strawberry : [ 'Ashish' ]&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Reduce is a very powerful array method, although it is a bit harder a understand but it has various use cases. The Map and Filter Array methods can also be written through Reduce but that will be a topic for another blog.&lt;/p&gt;

&lt;p&gt;If you want to read more about reduce MDN has a very detailed doc on it - &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce"&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Quirky tip - There is a reduceRight method as well, which works same as reduce but the array is traversed right to left.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Kadane's Algorithm (Maximum Sum Subarray Problem)</title>
      <author>Clean Code Studio</author>
      <pubDate>Thu, 29 Jul 2021 17:36:57 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/kadane-s-algorithm-maximum-sum-subarray-problem-2nhp</link>
      <guid>https://dev.to/cleancodestudio/kadane-s-algorithm-maximum-sum-subarray-problem-2nhp</guid>
      <description>&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code StudioClean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
 

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Today we're going to discuss the optimal solution to the maximum sum subarray problem.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;What's the maximum subarray problem?&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uRGzh8g5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jn6ueykz5befrpv49n15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uRGzh8g5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jn6ueykz5befrpv49n15.png" alt="Maximum Sum Sub-array example"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Let's say we have an array that looks like this: &lt;br&gt;
&lt;code&gt;[1, -3, 2, 1, -1]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Sub-arrays are defined as continuous elements. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: The entire array is considered a sub-array since all elements are continuous.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;[1]&lt;/code&gt; = &lt;code&gt;1&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1, -3]&lt;/code&gt; = &lt;code&gt;-2&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1, -3, 2]&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[-3, 2, 1]&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1, -3, 2, 1]&lt;/code&gt; = &lt;code&gt;1&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1, -3, 2, 1, -1]&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[-3, 2, 1, -1]&lt;/code&gt; = &lt;code&gt;-1&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[-3, 2, 1]&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[2, 1, -1]&lt;/code&gt; = &lt;code&gt;2&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1, -1]&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[2, 1]&lt;/code&gt; = &lt;code&gt;3&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1]&lt;/code&gt; = &lt;code&gt;1&lt;/code&gt;&lt;br&gt;
etc...&lt;/p&gt;

&lt;p&gt;Our maximum sub-array is &lt;code&gt;[2, 1]&lt;/code&gt; which sums to &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt;



&lt;p&gt;So, how do we programmatically solve this coding challenge?&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#brute-force-solution"&gt;
  &lt;/a&gt;
  Brute Force Solution
&lt;/h3&gt;



&lt;p&gt;Basically, we check all of the possible arrays and pick the one with the maximum some. &lt;/p&gt;

&lt;p&gt;We'd start at the first index and then move on to the second index and so on - we kinda did that above when we did this.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[1]&lt;/code&gt; = &lt;code&gt;1&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1, -3]&lt;/code&gt; = &lt;code&gt;-2&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1, -3, 2]&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[-3, 2, 1]&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1, -3, 2, 1]&lt;/code&gt; = &lt;code&gt;1&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1, -3, 2, 1, -1]&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[-3, 2, 1, -1]&lt;/code&gt; = &lt;code&gt;-1&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[-3, 2, 1]&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[2, 1, -1]&lt;/code&gt; = &lt;code&gt;2&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1, -1]&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[2, 1]&lt;/code&gt; = &lt;code&gt;3&lt;/code&gt;&lt;br&gt;
&lt;code&gt;[1]&lt;/code&gt; = &lt;code&gt;1&lt;/code&gt;&lt;br&gt;
etc...&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#kadanes-algorithm-the-optimal-solution"&gt;
  &lt;/a&gt;
  Kadane's Algorithm (The Optimal Solution)
&lt;/h3&gt;



&lt;p&gt;The idea is very simple. We're going to look at each index and ask ourselves - what's the maximum sub-array ending at &lt;em&gt;this&lt;/em&gt; index? &lt;/p&gt;

&lt;p&gt;&lt;code&gt;[1, -3, 2, 1, -1]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Starting at index 0, we have [1]. &lt;/p&gt;

&lt;p&gt;What's the maximum subarray ending at this index (this currently being 0)? &lt;/p&gt;

&lt;p&gt;It's obviously just 1.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Index 0: [1]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;p&gt;For the second index, we're going to ask what the maximum sub-array ending at this index.&lt;/p&gt;

&lt;p&gt;At this index, the maximum sum can be &lt;code&gt;[1, -3]&lt;/code&gt; or just &lt;code&gt;[-3]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The maximum one of those is &lt;code&gt;[1, -3]&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Index 0: [1]
Index 1: [1, -3]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;p&gt;For the third index we'll do the same thing. &lt;/p&gt;

&lt;p&gt;The subarray with the maximum sum ending at this index could be.&lt;/p&gt;

&lt;p&gt;[2]&lt;br&gt;
[-3, 2]&lt;br&gt;
[1, -3, 2]&lt;/p&gt;

&lt;p&gt;The answer is &lt;code&gt;[2]&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Index 0: [1]
Index 1: [1, -3]
Index 2: [2]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;p&gt;We just continue using this pattern all the way through, and then compare the remaining subarrays that we have gotten by getting the maximum subarray at each index. &lt;/p&gt;

&lt;p&gt;Index 3 has the following subarrays. &lt;/p&gt;

&lt;p&gt;We choose &lt;code&gt;[1]&lt;/code&gt; or &lt;code&gt;[1, 2]&lt;/code&gt; or &lt;code&gt;[1, 2, -3]&lt;/code&gt; or &lt;code&gt;[1, 2 -3, 1]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;1 + 2&lt;/code&gt; is the highest sum out of all of index three's subarrays we'll use that for index 3. &lt;/p&gt;

&lt;p&gt;Index 4 has the following subarrays &lt;br&gt;
&lt;code&gt;[-1]&lt;/code&gt; or &lt;code&gt;[-1, 1]&lt;/code&gt; or &lt;code&gt;[-1, 1, 2]&lt;/code&gt; or &lt;code&gt;[-1, 1, 2, -3]&lt;/code&gt; or &lt;code&gt;[1, -3, 2, 1, -1]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;[-1, 1, 2]&lt;/code&gt; has the highest sum index 4 will use that subarray. &lt;/p&gt;

&lt;p&gt;The max sub-array at each index.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Index 0: [1]
Index 1: [1, -3]
Index 2: [2]
Index 3: [1, 2]
Index 4: [-1, 1, 2]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Finally, we simply compare the sub-arrays that we have collected at each index and return the one with the highest sum.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[1]&lt;/code&gt; or &lt;code&gt;[1, -3]&lt;/code&gt; or &lt;code&gt;[2]&lt;/code&gt; or &lt;code&gt;[1, 2]&lt;/code&gt; or &lt;code&gt;[-1, 1, 2]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;[1, 2]&lt;/code&gt; sums up to 3 and is the highest sum we return &lt;code&gt;[1, 2]&lt;/code&gt; as our final value.&lt;/p&gt;



&lt;p&gt;As you can see, the idea here is simple - but it's not very efficient. It's going to take &lt;code&gt;O(n^2)&lt;/code&gt; time complexity (AKA quadratic time).&lt;/p&gt;

&lt;p&gt;But, the interesting idea from Kadane's algorithm is we can do much better than that. We can run it in O(n) time complexity (AKA linear time).&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#so-lets-see-how-we-can-do-this"&gt;
  &lt;/a&gt;
  So let's see how we can do this.
&lt;/h2&gt;

&lt;p&gt;Let's say we're using the same strategy here. We begin by finding the max sub-array at each given index.&lt;/p&gt;

&lt;p&gt;Now, let's assume we've already resolved the max sub-arrays from our first and second index. We're on index three.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Max sum sub-arrays from index one and two&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Index 0: [1]
Index 1: [1, -3]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Original Array:&lt;/strong&gt; &lt;code&gt;[1, -3, 2, 1, -1]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The next element we have is &lt;code&gt;2&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Kadane's algorithm states that the maximum sub-array for this index will either be the current element (in this case &lt;code&gt;2&lt;/code&gt;) OR the current element + the previous maximum sub-array.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
To determine the local maximum subarray we were doing the following.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[2]&lt;/code&gt; or &lt;code&gt;[2, -3]&lt;/code&gt; or &lt;code&gt;[2, -3, 1]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;BUT kardane's algorithm states that our local maximum subarray is either the current element OR the current element + the previous maximum sub-array.&lt;/p&gt;

&lt;p&gt;Following this principle we can simplify &lt;/p&gt;

&lt;p&gt;&lt;code&gt;[2]&lt;/code&gt; or &lt;code&gt;[2, -3]&lt;/code&gt; or &lt;code&gt;[2, -3, 1]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[2]&lt;/code&gt; or &lt;code&gt;[2, 1, -3]&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#we-can-just-compare-these-and-ignore-all-other-local-subarrays-and-this-will-give-us-our-local-maximum-subarray"&gt;
  &lt;/a&gt;
  We can just compare these, and ignore all other local sub-arrays and this will give us our local maximum sub-array.
&lt;/h2&gt;

&lt;p&gt;This solution is much faster than the brute force algorithm and runs in linear time [aka O(n)]. &lt;/p&gt;




&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code StudioClean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://www.cleancode.studio/notes/faang-interview-notes"&gt;My personal FAANG interview Notes&lt;/a&gt;&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>code</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Journey from Mongoose to Prisma ORM for MongoDB!</title>
      <author>Somsubhra Das</author>
      <pubDate>Thu, 29 Jul 2021 16:51:25 +0000</pubDate>
      <link>https://dev.to/somsubhra1/journey-from-mongoose-to-prisma-orm-for-mongodb-3j21</link>
      <guid>https://dev.to/somsubhra1/journey-from-mongoose-to-prisma-orm-for-mongodb-3j21</guid>
      <description>&lt;p&gt;&lt;a href="https://www.prisma.io/?utm_source=Prisma%20Ambassador&amp;amp;utm_medium=Blog%20post&amp;amp;utm_campaign=Prisma%20AP%20Somsubhra%20Dass"&gt;Prisma&lt;/a&gt; is a next Generation ORM for NodeJS &amp;amp; TypeScript Environments. It has multiple databases support such as MySQL, SQLite, PostgreSQL, MSSQL and also MongoDB.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--03TVNXC_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6asm3c1uhmis3ktx9sih.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--03TVNXC_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6asm3c1uhmis3ktx9sih.png" alt="Prisma Application Lifecycle"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://prisma.io"&gt;Source: Prisma&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So in this post let's talk about the all new Prisma MongoDB Connector, it's operations and what made me switch from Mongoose to Prisma for MongoDB.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#connection"&gt;
  &lt;/a&gt;
  Connection
&lt;/h2&gt;

&lt;p&gt;Let's start by establishing the connection to our MongoDB Server. In your &lt;strong&gt;Prisma schema&lt;/strong&gt; file we need to change the &lt;code&gt;provider&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;datasource&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mongodb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;url&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;prisma.schema&lt;/code&gt; file allows us to specify how we want Prisma to connect to our database. We need to tell it what kind of provider we would like to use - in this case &lt;code&gt;mongodb&lt;/code&gt; - and a &lt;code&gt;url&lt;/code&gt; to connect to - this is pointing to an environment variable as we want to keep it secret. We will use a MongoDB connection string as the &lt;code&gt;DATABASE_URL&lt;/code&gt; which can be found in the &lt;code&gt;/prisma/.env&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Next we need to setup the generator block like below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;generator&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;provider&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prisma-client-js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;previewFeatures&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mongoDb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Since Prisma MongoDB Connector is still in preview we need to explicitly specify the &lt;code&gt;previewFeatures&lt;/code&gt; key.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defining-models"&gt;
  &lt;/a&gt;
  Defining Models
&lt;/h2&gt;

&lt;p&gt;So now that connection has been successfully established to MongoDB Server, let's now create models for our database collection.&lt;/p&gt;

&lt;p&gt;A typical MongoDB document looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$oid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;60d599cb001ef98000f2cad2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;somsubhra@email.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Somsubhra&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So now how to define a model like this in Prisma? Inside &lt;strong&gt;Prisma schema&lt;/strong&gt; file, we can define our models.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;id&lt;/span&gt;  &lt;span class="nb"&gt;String&lt;/span&gt;  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;id&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dbgenerated&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectId&lt;/span&gt;
  &lt;span class="nx"&gt;email&lt;/span&gt;     &lt;span class="nb"&gt;String&lt;/span&gt;   &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;unique&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;      &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Comparing it with mongoose models, in Mongoose ODM we would have written something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mongoose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;UserSchema&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;a href="https://www.prisma.io/?utm_source=Prisma%20Ambassador&amp;amp;utm_medium=Blog%20post&amp;amp;utm_campaign=Prisma%20AP%20Somsubhra%20Dass"&gt;Prisma&lt;/a&gt; we may also generate ObjectIds manually by using the &lt;code&gt;bson&lt;/code&gt; package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ObjectId&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bson&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ObjectId&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#queries-amp-database-operations"&gt;
  &lt;/a&gt;
  Queries &amp;amp; Database Operations
&lt;/h2&gt;

&lt;p&gt;Now let's understand how to write queries and operations to MongoDB using Prisma in comparison to Mongoose.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fetching-single-record"&gt;
  &lt;/a&gt;
  Fetching Single record
&lt;/h3&gt;

&lt;p&gt;Fetching a single record in prisma is done using the &lt;code&gt;where&lt;/code&gt; property but in mongoose it has &lt;code&gt;findById&lt;/code&gt; method.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#prisma"&gt;
  &lt;/a&gt;
  Prisma
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findUnique&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mongoose"&gt;
  &lt;/a&gt;
  Mongoose
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5eb9354624286a04e42401d8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fetching-selected-values-for-single-record"&gt;
  &lt;/a&gt;
  Fetching selected values for single record
&lt;/h3&gt;

&lt;p&gt;Fetching selected values for single record is easier than ever in Prisma ORM by using just a single query function to do the select operation whereas in Mongoose after finding the record we need to chain the output with &lt;code&gt;select()&lt;/code&gt;. This increases the time complexity and also slows down the process.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#prisma"&gt;
  &lt;/a&gt;
  Prisma
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findUnique&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mongoose"&gt;
  &lt;/a&gt;
  Mongoose
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;5eb9354624286a04e42401d8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fetching-relations"&gt;
  &lt;/a&gt;
  Fetching relations
&lt;/h3&gt;

&lt;p&gt;In Prisma, we use the &lt;code&gt;include&lt;/code&gt; property but in Mongoose we would have to use the &lt;code&gt;populate()&lt;/code&gt; method.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#prisma"&gt;
  &lt;/a&gt;
  Prisma
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findUnique&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;include&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;post&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mongoose"&gt;
  &lt;/a&gt;
  Mongoose
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;userWithPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;populate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;posts&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#filtering-with-values"&gt;
  &lt;/a&gt;
  Filtering with values
&lt;/h3&gt;

&lt;p&gt;In Prisma we filter records using the &lt;code&gt;where&lt;/code&gt; property whereas in Mongoose we use the &lt;code&gt;find()&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#prisma"&gt;
  &lt;/a&gt;
  Prisma
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMany&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mongoose"&gt;
  &lt;/a&gt;
  Mongoose
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#relation-filtering"&gt;
  &lt;/a&gt;
  Relation Filtering
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#prisma"&gt;
  &lt;/a&gt;
  Prisma
&lt;/h4&gt;

&lt;p&gt;Prisma can filter a list based on a criteria that applies not only to the models of the list being retrieved, but to a relation of that model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMany&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;some&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mongoose"&gt;
  &lt;/a&gt;
  Mongoose
&lt;/h4&gt;

&lt;p&gt;Mongoose doesn't offer this feature for relation filters. We may achieve similar functionality by adding an additional step to filter the results returned by the query but that would result in increased query times and load for large databases.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pagination"&gt;
  &lt;/a&gt;
  Pagination
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#prisma"&gt;
  &lt;/a&gt;
  Prisma
&lt;/h4&gt;

&lt;p&gt;Cursor-style pagination:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMany&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;before&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;242&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Offset pagination:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMany&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;skip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mongoose"&gt;
  &lt;/a&gt;
  Mongoose
&lt;/h4&gt;

&lt;p&gt;Mongoose also has similar implementation for pagination.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;skip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-records"&gt;
  &lt;/a&gt;
  Creating Records
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#prisma"&gt;
  &lt;/a&gt;
  Prisma
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user@email.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mongoose"&gt;
  &lt;/a&gt;
  Mongoose
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user@email.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#updating-records"&gt;
  &lt;/a&gt;
  Updating Records
&lt;/h3&gt;

&lt;p&gt;Prisma updates the record directly with the values passed in data property in comparison with mongoose where we need to use &lt;code&gt;$set&lt;/code&gt; operator.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#prisma"&gt;
  &lt;/a&gt;
  Prisma
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mongoose"&gt;
  &lt;/a&gt;
  Mongoose
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updatedUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findOneAndUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;$set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#deleting-single-record"&gt;
  &lt;/a&gt;
  Deleting Single Record
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#prisma"&gt;
  &lt;/a&gt;
  Prisma
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mongoose"&gt;
  &lt;/a&gt;
  Mongoose
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByIdAndDelete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#deleting-multiple-records"&gt;
  &lt;/a&gt;
  Deleting Multiple Records
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#prisma"&gt;
  &lt;/a&gt;
  Prisma
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteMany&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#mongoose"&gt;
  &lt;/a&gt;
  Mongoose
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deleteMany&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;$in&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#advantages-of-prisma-over-mongoose"&gt;
  &lt;/a&gt;
  Advantages of Prisma over Mongoose
&lt;/h2&gt;

&lt;p&gt;So now that we know the differences in operations between Prisma &amp;amp; Mongoose, let's now focus on the advantages Prisma provides over Mongoose.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prisma allows TypeSafe Database access.&lt;/li&gt;
&lt;li&gt;Prisma has an auto generated query builder&lt;/li&gt;
&lt;li&gt;Support for multiple databases. This is a huge advantage to developers when moving between SQL and NoSQL Databases, since only the Schema file needs to be changed. All other operations/queries remain same.&lt;/li&gt;
&lt;li&gt;Supports multiple RDBMS&lt;/li&gt;
&lt;li&gt;Robust migration capabilities&lt;/li&gt;
&lt;li&gt;Prisma lets you filter a list based on a criteria that applies not only to the models of the list being retrieved, but to a relation of that model. Mongoose doesn't offer a dedicated API for relation filters. You can get similar functionality by adding an additional step to filter the results returned by the query.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.prisma.io/studio"&gt;Prisma Studio&lt;/a&gt; tool that helps to manage data easily.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages-of-prisma"&gt;
  &lt;/a&gt;
  Disadvantages of Prisma
&lt;/h2&gt;

&lt;p&gt;On the other side, Prisma has a few disadvantages over Mongoose as well.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support for multiple model files not available. All models need to be written in &lt;code&gt;schema.prisma&lt;/code&gt; file which makes the file cluttered and hard to debug and read.&lt;/li&gt;
&lt;li&gt;Prisma MongoDB support is currently in preview&lt;/li&gt;
&lt;li&gt;Currently no embedded collection support.&lt;/li&gt;
&lt;li&gt;Error handling is incomplete.&lt;/li&gt;
&lt;li&gt;The Migrate and Introspection workflows are currently not supported.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;@@id&lt;/code&gt; and auto-increment are not currently supported.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#should-you-be-using-prisma-over-mongoose"&gt;
  &lt;/a&gt;
  Should you be using Prisma over Mongoose?
&lt;/h2&gt;

&lt;p&gt;Prisma is a modern ORM which has its own tradeoffs. If you are building a server side application with REST APIs and GraphQL, Prisma would be a great choice. It also makes lives of developers easier. Prisma gives a significant productivity boost for the most common database workflows.&lt;/p&gt;

&lt;p&gt;If these factors don't matter much to you and you want to have more control over database operations then my suggestion will be to go with Mongoose "for the time being".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contribute-to-prisma"&gt;
  &lt;/a&gt;
  Contribute to Prisma
&lt;/h2&gt;

&lt;p&gt;Prisma MongoDB Connector is still in preview and development. If you want to contribute to the Prisma check out their GitHub Repository by clicking &lt;a href="https://github.com/prisma/prisma"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>prisma</category>
      <category>database</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How Unix commands works</title>
      <author>Marcell Cruz</author>
      <pubDate>Thu, 29 Jul 2021 16:39:09 +0000</pubDate>
      <link>https://dev.to/____marcell/how-unix-commands-works-4jic</link>
      <guid>https://dev.to/____marcell/how-unix-commands-works-4jic</guid>
      <description>&lt;p&gt;If after using these commands for years you ever wondered how they work, this is a high level exploration of someone who just had the some thoughts some days ago, this is the result of my exploration, I hope you learn something from it and get more interested in OS development in general, first of all, a little bit of history, all theses programs are originally part of the &lt;a href="https://www.gnu.org/home.en.html"&gt;gnu os&lt;/a&gt;, the first atempt to create a free os, they were written in the mid eighties and are older than Linux itself, they were developed for unix than ported to Linux and are &lt;a href="https://en.wikipedia.org/wiki/POSIX"&gt;posix compliant&lt;/a&gt;, &lt;strong&gt;ls&lt;/strong&gt; in particular is part of coreutils, a separate module of the gnu os, you can see coreutils source code &lt;a href="https://github.com/coreutils/coreutils/tree/master/src"&gt;here&lt;/a&gt;, Most of gnu os was developed by Richard Stallman, the original neckbeard&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--keLhDWHw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uco6haju98ftno3dqwa6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--keLhDWHw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uco6haju98ftno3dqwa6.jpg" alt="neckbeard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GNU/Coreutils is used by most Linux distribution, and you can even use it on Mac OS and Windows, in Mac Os you can even &lt;a href="https://apple.stackexchange.com/questions/69223/how-to-replace-mac-os-x-utilities-with-gnu-core-utilities"&gt;replace the propietary coreutils&lt;/a&gt;. As you might know, Linux is not a OS, Linux is just a &lt;a href="https://en.wikipedia.org/wiki/Kernel_(operating_system)"&gt;kernel&lt;/a&gt;, you need higher level programs to use your system, that's why people sometimes refer to Linux as GNU/Linux, because it's the kernel with the other utilities necessary to realistically use the system in your day to day activities, otherwise you would have to implement everything yourself. I'm gonna focus on how &lt;strong&gt;ls&lt;/strong&gt; is implemented on top of the kernel, if you wanna know what happens right after you type &lt;strong&gt;ls &lt;/strong&gt; in your terminal you should read &lt;a href="https://gist.github.com/amitsaha/8169242#how-does-ls-do-what-it-does"&gt;this&lt;/a&gt; amazing explanation.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-ls-works"&gt;
  &lt;/a&gt;
  How ls works
&lt;/h1&gt;

&lt;p&gt;You can see ls source code &lt;a href="https://github.com/coreutils/coreutils"&gt;here&lt;/a&gt;, &lt;br&gt;
this blog posts focuses on explaining &lt;strong&gt;ls&lt;/strong&gt;, but all other core utilities work in a similar fashion, let's get to it. &lt;/p&gt;

&lt;p&gt;the core functionality of &lt;strong&gt;ls&lt;/strong&gt; are actived using two lower level functions &lt;strong&gt;opendir&lt;/strong&gt; and &lt;strong&gt;readdir&lt;/strong&gt;, &lt;strong&gt;opendir&lt;/strong&gt; &lt;em&gt;opens&lt;/em&gt; a directory, which is really just a file in Linux like &lt;a href="https://en.wikipedia.org/wiki/Everything_is_a_file"&gt;everything else&lt;/a&gt; and &lt;strong&gt;readdir&lt;/strong&gt; reads this file line by line, each line as you might have guessed is the directory contents, plus &lt;strong&gt;.&lt;/strong&gt; and &lt;strong&gt;..&lt;/strong&gt; which is used by the system to reference &lt;strong&gt;this&lt;/strong&gt; directory and &lt;strong&gt;where&lt;/strong&gt; this directory is, if you search for these functions in src/ls.c you would find this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="kt"&gt;DIR&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dirp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;dirent&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;dirp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opendir&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// line 2918&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;for opendir&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;

      &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;readdir&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dirp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// line 2988&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;for readdir&lt;/p&gt;

&lt;p&gt;As you might have guessed this while loop is ls's core functionality, it's the part that reads the file entries in the dir and prints them out, or do whatever it needs to do depending on the options that you pass to ls, all other stuff in the source code is error handling, parsing and applying options, ls has a ton a options that accumulated over the years, if we remove all these options we could implement &lt;strong&gt;ls&lt;/strong&gt; with just a few lines of code, so let's do that&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;dirent.h&amp;gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;DIR&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;folder&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;dirent&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;folder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opendir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;folder&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;readdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;folder&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;d_name&lt;/span&gt;
              &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;closedir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;folder&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if we compile and run our ls version, we get this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qHwzaMLQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uocrm3ktzhmz6qq22vtp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qHwzaMLQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uocrm3ktzhmz6qq22vtp.jpg" alt="my_ls"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;as you can see the output it's pretty similar to gnu ls already, the only difference in this case is that &lt;strong&gt;ls&lt;/strong&gt; is color coding different file types in my system and ls by default don't display &lt;strong&gt;.&lt;/strong&gt; and &lt;strong&gt;..&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ok, now we have a pretty good understanding of how &lt;strong&gt;ls&lt;/strong&gt; is implemented and the main libraries that it uses("stdio.h" and "dirent.h"), but where does these libraries come from? we need to dig deeper.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8YOXsAv3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4bg7vnbak2vc76725fzx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YOXsAv3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4bg7vnbak2vc76725fzx.jpg" alt="deeper"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#glibc-and-system-calls"&gt;
  &lt;/a&gt;
  glibc and system calls
&lt;/h1&gt;

&lt;p&gt;stdio.h and dirent.h and pretty much anyother c library installed in your system lives in /usr/include, stdio and dirent in particular are installed when you install &lt;a href="https://www.gnu.org/software/libc/"&gt;glibc&lt;/a&gt;, yet another gnu project, &lt;strong&gt;printf&lt;/strong&gt; comes from stdio, &lt;strong&gt;opendir&lt;/strong&gt; and &lt;strong&gt;readdir&lt;/strong&gt; comes from dirent, just like &lt;strong&gt;ls&lt;/strong&gt; these functions are abstraction to make it easier to do the things that you want to do in your system, actually everything is a &lt;a href="https://en.wikipedia.org/wiki/Abstraction"&gt;abstraction&lt;/a&gt; all the way down &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gVOKdOHo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ra3ppoidmuqphm81khut.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gVOKdOHo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ra3ppoidmuqphm81khut.jpeg" alt="images"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ls is a application that uses glibc, glibc itself make some system calls  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t6vtxFrY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0iz4lnahma3s57dz8ggb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t6vtxFrY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0iz4lnahma3s57dz8ggb.png" alt="glibc"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;as you can see in the graph we don't necessarily &lt;strong&gt;need&lt;/strong&gt; to use glibc to implement &lt;strong&gt;ls&lt;/strong&gt; we could make the system calls ourselves, let's do that!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;linux/fs.h&amp;gt;
&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
 &lt;span class="n"&gt;u8&lt;/span&gt; &lt;span class="n"&gt;Buff&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
 &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="n"&gt;memset&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Buff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Buff&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
 &lt;span class="n"&gt;mm_segment_t&lt;/span&gt; &lt;span class="n"&gt;old_fs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_fs&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="n"&gt;set_fs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KERNEL_DS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys_open&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/etc/Info"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O_RDONLY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;sys_read&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Buff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;printk&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"string:% s/n"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Buff&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;sys_close&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="n"&gt;set_fs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_fs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#kernel-level-and-user-level"&gt;
  &lt;/a&gt;
  Kernel level and User level
&lt;/h1&gt;

&lt;p&gt;The ls clone that we wrote is running on user level, all the functions that we used, opendir, readdir and printf are user level functions, a lot of things are restricted at user level, functions at user level call other functions at kernel level, this is what we call a &lt;a href="https://elixir.bootlin.com/linux/latest/source/include/linux/syscalls.h#L1074"&gt;"system call"&lt;/a&gt; so the function opendir for example eventually will call sys_open, which is a system call that it self calls do_sys_open which is a kernel level function, the kernel is actually what comunicates with devices and the cpu&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4izvcyh1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/thumb/8/8f/Kernel_Layout.svg/1200px-Kernel_Layout.svg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4izvcyh1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://upload.wikimedia.org/wikipedia/commons/thumb/8/8f/Kernel_Layout.svg/1200px-Kernel_Layout.svg.png" alt="kernel_layout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The kernel is a program that is always in memory and facilitates the comunication between the hardware and applications, one of these utilities is the functions that we just used, we could go deeper and explore how do_sys_open is implemented at kernel level, but that's propably another post &lt;/p&gt;

&lt;p&gt;As you can see it's a lot harder to understand the sys_call version and you do very little with a lot of code, as you get closer to the kernel you have to deal with internal calls of the system, that's the reason why the kernel exists, it's a abstraction on top of the machine so you don't have to deal with all this low level stuff, you can see in the code that we have to make a lot of different system calls just to read a directory, if you wanna go deeper and learn even more about how linux works I recommend this book &lt;a href="https://www.goodreads.com/book/show/7672214-the-linux-programming-interface"&gt;this book&lt;/a&gt; I'm reading it and it's pretty good&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to stay focused üîç as a self taught Frontend Web Developer üíª</title>
      <author>Chris Hansen </author>
      <pubDate>Thu, 29 Jul 2021 16:29:49 +0000</pubDate>
      <link>https://dev.to/hyggedev/how-to-stay-focused-as-a-self-taught-frontend-web-developer-7gp</link>
      <guid>https://dev.to/hyggedev/how-to-stay-focused-as-a-self-taught-frontend-web-developer-7gp</guid>
      <description>&lt;p&gt;Staying &lt;strong&gt;focused&lt;/strong&gt; is one of the hardest tasks when perusing a new &lt;strong&gt;hobby&lt;/strong&gt;, &lt;strong&gt;goal&lt;/strong&gt; or &lt;strong&gt;project&lt;/strong&gt;. Trying to break a bad habit? I'm sure you've been there. Trying to get healthy, maybe shed a few pounds, or even add some? That requires 100% focus. A momentary lapse can spell trouble for a solid weeks worth of good choices. How about I throw &lt;strong&gt;Web&lt;/strong&gt; &lt;strong&gt;Development&lt;/strong&gt; into the mix? üòÖ  One of the fastest moving and dynamic fields in Tech.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hopefully&lt;/em&gt;, with these few tips, I can help you either stay on track, or prevent you from listening to that doubtful little voice in the back of your head telling you to quit. &lt;strong&gt;Everyone&lt;/strong&gt; has experienced these hurdles. &lt;strong&gt;You're not alone&lt;/strong&gt;,  so let's get into it D:&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#dont-let-which-framework-is-the-best-take-up-your-time"&gt;
  &lt;/a&gt;
  Don't Let "which framework is the best" Take Up Your Time üïî
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gqwdVlrR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ye821j91lcotab30lr1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gqwdVlrR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ye821j91lcotab30lr1.png" alt="Image banner showcasing top web development frameworks battling eachother"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's unfortunate how often I see this question being asked on all platforms of social media. On Twitter, Instagram, Youtube... people love seeking this answer! I'm sure developers much more experience than myself, will agree, you should just focus on the basics ! I remember quite vividly, during my HTML and CSS learning journey, I told myself, "this process could be quicker." That's when I did my first Google search, "How to speed up web development," or something along those lines. It's when I first discovered and learned of &lt;strong&gt;Angular&lt;/strong&gt;, and other frameworks. As I dived into tutorial after tutorial after tutorial,  I wasn't making any traction. Because not only do frameworks expect you to have a solid grasp of the &lt;strong&gt;fundamentals&lt;/strong&gt;, they essentially have their own language too. At the very least, a set of ground rules and specific syntax that you must adhere too. Specific file structures,  design patterns, etc.  All this does is SLOW down your process of getting really good at HTML, CSS, and Javascript, the only languages you need for a &lt;strong&gt;strong foundation&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;So, what can you take away from this tip? If you're not asking yourself, "I need to speed up my projects development process," a framework is just not necessary. Don't worry about, &lt;em&gt;React vs Vue vs Angular&lt;/em&gt;. They'll come to you when you need 'em. &lt;/p&gt;

&lt;p&gt;PS + I have seen a trend of great developers dodging frameworks all together, and pride themselves at making beautiful websites with HTML, CSS, and Javascript. And trust me, they perform! üëç&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#escape-tutorial-hell"&gt;
  &lt;/a&gt;
  Escape Tutorial Hell ‚úåÔ∏è
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Fdjr43A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvw2obcbvnmtcl4hgcyu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Fdjr43A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cvw2obcbvnmtcl4hgcyu.png" alt="Banner showcasing a bunch of youtube tutorials in big letters "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Developers getting stuck in &lt;strong&gt;tutorial hell&lt;/strong&gt; is very real and very time consuming. I myself have found myself stuck in a loop of never ending tutorials. But just like you, I had good intentions going into it. I'm gonna learn this, then that, then I'm going to build something great! Right? If you got a big brain and the IQ of Stephen Hawking, then sure, you just might build the &lt;em&gt;next great weather app&lt;/em&gt;. But for us normies, applying what we just learned or "watched" is next to impossible. As we code along with the tutorial, we're not learning and applying. We're mindlessly trying to jot down everything we see on the screen. It's no different than being in an auditorium in college amongst 200 students, just trying to catch every word on the projector before the professor changes pages, yet alone actually listening to what the professor is saying. But, if you can grasp key points in the notes, and immediately after class, skim over important concepts for just 15 minutes, you'll retain much more of what you learned, and can be that much more prepared for your next session. As opposed to not reading your notes immediately after class, majority people will lose about 70% of what they just listened to or wrote down just minutes ago.&lt;/p&gt;

&lt;p&gt;The same applies for web dev tutorials on the web. If you find an interesting project, be sure to &lt;strong&gt;understand the code&lt;/strong&gt; after you have completed the project. Refactor it. Change the UI, colors, the entire theme. Create a clone of the project you just did, but do it from scratch. This is how you can retain the information you were given and actually learn. If you are not already doing this, I promise you will gain some serious traction. And before you know it, you're not only going to build the same project from that tutorial, you're going to build it better. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#take-breaks"&gt;
  &lt;/a&gt;
  Take Breaks üßò
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TIG_1iLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/maczl3pt5k6ugtso76uj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TIG_1iLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/maczl3pt5k6ugtso76uj.png" alt="A banner showcasing an the word relax in big letters and a person walking their dog"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"The moment you start to slide, you're shoveling against the tide,"  Marty Lobdell at Pierce College, Washington State. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Taking breaks&lt;/strong&gt; while studying in crucial for effective learning and time management. You may not think hitting the pause button is efficient time management, but hear me out. For the average person, even trying to study for any amount of time over 1 hour, is not ideal. &lt;strong&gt;There are studies that prove the most retention in adults is within a sweet spot of 30 minutes&lt;/strong&gt;. So, if you have 3 hours worth of studying, it's worth it for your to take &lt;strong&gt;3 breaks&lt;/strong&gt; in that time. Breaks can be short, and should be. Take &lt;strong&gt;5 minutes&lt;/strong&gt; doing anything that you enjoy. That can be yoga, reading a book, video games, walking the dog, anything that clears your mind and you have fun doing. After your 5 minutes, you'll be next to &lt;strong&gt;maximum efficiency&lt;/strong&gt; during your next 30 minutes of studying. So rather than a non efficient 3 straight hours of studying, you can break the session down into 30 minute increments, which also sounds more approachable and doable, especially if you're continuing this study cycle for a long period of time. So to circle back to time management, I'd say 2 hours and 45 minutes of efficient learning is a better use of time than 3 straight hours of sluggish studying. And of course this can be &lt;strong&gt;directly applied&lt;/strong&gt; to coding as well. Whether you're studying web development concepts, or coding a project, taking breaks is key to enjoying the process and making it a smoother one. &lt;/p&gt;

&lt;p&gt;To get a better understanding of this concept, heres a clip of Marty Lobdell explaining this study technique. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/S6BvM6y0ke4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-pomodoro-technique"&gt;
  &lt;/a&gt;
  The Pomodoro Technique üçÖ
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LpgRvJtf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ivcnwz1xs7gs1fjn8xs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LpgRvJtf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ivcnwz1xs7gs1fjn8xs.png" alt="A banner showcasing the world pomodoro with a tomato and an alarm clock"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;&lt;em&gt;Pomodoro Technique&lt;/em&gt;&lt;/strong&gt; is global phenomenon and theres a good reason for it. Every illustration of the Pomodoro technique uses Tomatoes üçÖ  Just kidding.. but not really. The technique was invented by Francesco Cirillo during his time as a University student in Italy, and Pomodoro is basically tomato in Italian. Now ya know D: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This study method essentially further empowers our previous tip. It maximizes efficient studying or work, by **incorporating breaks&lt;/strong&gt;, but takes it even further. So how does it work?** &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Set your goal or task at hand &lt;/li&gt;
&lt;li&gt;Set your timer for 20-25 minutes&lt;/li&gt;
&lt;li&gt;Study or work until your timer goes off &lt;/li&gt;
&lt;li&gt;Take a 5 minute break doing something you enjoy &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Steps 1 - 4 is &lt;strong&gt;one&lt;/strong&gt; Pomodoro. On your &lt;strong&gt;fifth&lt;/strong&gt; Pomodoro, you increase your break to 15-30 minutes. You then repeat this cycle until you are done. The longer hours you work or study, the more efficient you &lt;strong&gt;can&lt;/strong&gt; become. &lt;/p&gt;

&lt;p&gt;This technique has been widely adopted by companies and organizations all across the world. Especially used by software companies for maximizing coding efficiency, especially popular for pair programming. If you haven't already, I say give it a shot. üëç&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pomofocus.io/"&gt;https://pomofocus.io/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#build-the-right-projects"&gt;
  &lt;/a&gt;
  Build The Right Projects üíª
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FNo1KrGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yshcmtsfhscrk78n8hdz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FNo1KrGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yshcmtsfhscrk78n8hdz.png" alt="A banner showcasing a person desk with thought bubbles on relevant project ideas"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you're starting out, there are a lot of projects that tossed in your direction. Especially if you frequent Youtube as a learning resource. &lt;strong&gt;&lt;em&gt;"The top projects for beginners,"&lt;/em&gt;&lt;/strong&gt; or &lt;em&gt;"&lt;/em&gt;&lt;em&gt;The best Projects to get a job.&lt;/em&gt;&lt;em&gt;"&lt;/em&gt; Some of these may have some truth to them. However, it's all about &lt;strong&gt;focus and efficiency&lt;/strong&gt;. Build a project you are interested in. Do you have a hobby other than coding? Maybe it's music, photography, skateboarding..?  If it's music, build a website that allows users to upload tracks or clips of their work. If you enjoy photography, go crazy and build a beautiful, big and &lt;strong&gt;bold&lt;/strong&gt; photo gallery showcasing all your artwork. Take it a step further, and add a database. Or even authentication to allow others to use the site too. Building a project you are interested in, from scratch, is simply enjoyable. Every aspect of it is &lt;strong&gt;yours&lt;/strong&gt;. Even if you are inspired by something done already. You'll learn so much along the way as well. Should I use Bootstrap, Foundation, or SCSS? Should I use this package, or this animation library. You'll dive into documentation, you'll learn about the software at a &lt;strong&gt;deeper level&lt;/strong&gt;, and will learn to grow an appreciation for great documentation. You'll start to favor some technologies over others because you now understand them more. The whole process of building something from scratch that's your idea, sort of turns into &lt;strong&gt;self-discovery&lt;/strong&gt;. You'll learn a ton about yourself. Before you know it, you'll have an entire tech stack in your go to toolbox, and your ability to focus on meaningful projects will catapult you into being a more &lt;strong&gt;confident developer&lt;/strong&gt; and that's just the beginning of what's to come. üî• &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion üëè
&lt;/h2&gt;

&lt;p&gt;That's it for my top tips on &lt;strong&gt;&lt;em&gt;how to stay focused as a self taught Frontend Web Developer.&lt;/em&gt;&lt;/strong&gt; Wherever you are in your web dev journey, I hope these tips can aide you to stay focused, and ignore the doubts and any hurdles you may face along the way. I'm also along for the ride, and as many hardships as a rich and dynamic field in tech can bring about, Web Development has such a great community, and it's the very reason why I'm attempting my first blog post. I have seen so many helping hands, and I want to be a part of it. I have all the confidence in the world, if you ask a fellow developer for assistance, you shall get it. &lt;/p&gt;

&lt;p&gt;Stay focused, I hear the reward is worth it ü§ò&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#wanna-say-hi"&gt;
  &lt;/a&gt;
  Wanna say üëã  Hi!?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#find-me-on-twitter"&gt;
  &lt;/a&gt;
  Find me on &lt;a href="https://www.twitter.com/hyggedev"&gt;twitter&lt;/a&gt;
&lt;/h3&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>I built a crypto monitoring app with serverless - this is how</title>
      <author>Taavi Rehem√§gi</author>
      <pubDate>Thu, 29 Jul 2021 16:27:25 +0000</pubDate>
      <link>https://dev.to/dashbird/i-built-a-crypto-monitoring-app-with-serverless-this-is-how-4041</link>
      <guid>https://dev.to/dashbird/i-built-a-crypto-monitoring-app-with-serverless-this-is-how-4041</guid>
      <description>&lt;p&gt;In this article, I will explain how I built COINDATAX, a cryptocurrency analytics platform to help investors analyze the market, and explain why we choose to go serverless. I will also explain our biggest pain points with AWS Lambda, and how¬†&lt;a href="https://dashbird.io/"&gt;Dashbird&lt;/a&gt; helped us with &lt;a href="https://dashbird.io/blog/how-to-save-hundreds-hours-debugging-lambda/"&gt;Lambda performance monitoring&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-serverless"&gt;
  &lt;/a&gt;
  Why serverless?
&lt;/h2&gt;

&lt;p&gt;When my co-founder and I decided to build a cryptocurrency web application, we immediately thought about using AWS Lambda for our integrations. After all, since we were a small team trying to create a new product,¬†&lt;strong&gt;we didn't want to spend too much time managing AWS servers.&lt;/strong&gt; Having to select the ideal instance type, configure auto-scaling policies, and creating a deployment pipeline takes a significant amount of work, which we simply could not afford.&lt;/p&gt;

&lt;p&gt;In addition, since we would like to add as many integrations as possible to our dashboards, &lt;strong&gt;we wanted our application to scale linearly with product usage.&lt;/strong&gt;¬†With traditional server-based architectures, your environment scales more like a "step" function --- if, say, each instance can handle 100 clients, when you reach 101 visitors you need to spawn a new machine that will be idle most of the time. With serverless architecture, your application scales, up or down, according to each request.&lt;/p&gt;

&lt;p&gt;Another benefit of Lambda, or more specifically of the¬†&lt;a href="https://serverless.com/"&gt;Serverless framework&lt;/a&gt;, is infrastructure as code. With serverless, you know exactly what is going on with your infrastructure simply by looking at a configuration file. Although you can do this for regular server-based architectures, using tools such as¬†&lt;a href="https://www.terraform.io/"&gt;Terraform&lt;/a&gt;, you usually need to think of it as something extra to your infrastructure design, while most AWS applications built on top of Lambda will use serverless from the beginning.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#now-speaking-about-some-of-the-drawbacks"&gt;
  &lt;/a&gt;
  Now speaking about some of the drawbacks:
&lt;/h4&gt;

&lt;p&gt;First of all, AWS Lambda has some inherent limitations. You can't have, for example, a long-running or expensive process. &lt;strong&gt;If your functions last longer than 5 minutes or if they need more than 1 MB of RAM, you need to rework your architecture&lt;/strong&gt; in order to use serverless. It might be necessary to use &lt;a href="https://dashbird.io/blog/ultimate-guide-aws-step-functions/"&gt;Step Functions&lt;/a&gt; or to break your lambdas into smaller functions so that you can pass the processed output from one to the other.&lt;/p&gt;

&lt;p&gt;Secondly,¬†&lt;strong&gt;Lambda functions are indisputably harder to debug.&lt;/strong&gt;¬†Since you don't have direct access to the instance where your code is running and since AWS CloudWatch is somewhat limited in its monitoring capabilities, sometimes things break and you have no idea of what happened. This is where¬†&lt;a href="https://dashbird.io/docs"&gt;Dashbird&lt;/a&gt;¬†comes into play, but I'll talk more about that in a moment.&lt;/p&gt;

&lt;p&gt;Taking all that into consideration, we decided to move forward with serverless, as we believed these¬†&lt;strong&gt;limitations could be managed.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#architecture"&gt;
  &lt;/a&gt;
  Architecture
&lt;/h2&gt;

&lt;p&gt;The architecture behind COINDATAX is pretty straightforward. We pull data from a number of external APIs, then we do some cleaning and processing to be sure that all data is consistent and reliable, and finally, we store the events in our databases. These &lt;strong&gt;data extractors are triggered via CloudWatch events at fixed intervals&lt;/strong&gt;¬†so that we have up to date crypto information in our system.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Bgcvwq8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dashbird.io/wp-content/uploads/2018/05/cryptocurrency-monitoring-architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Bgcvwq8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dashbird.io/wp-content/uploads/2018/05/cryptocurrency-monitoring-architecture.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article, I will explain how to create a monitoring platform that implements the first step of our product, the &lt;strong&gt;data gathering of one of an external API.&lt;/strong&gt;¬†More specifically, we will go through the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;em&gt;Setup of the development environment (Node.js, serverless)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt; &lt;em&gt;Development of the API integration&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt; &lt;em&gt;Deployment of the application&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt; &lt;em&gt;Monitoring of the Lambda functions with Dashbird&lt;/em&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#1-setup-of-the-development-environment"&gt;
  &lt;/a&gt;
  1. Setup of the development environment
&lt;/h4&gt;

&lt;p&gt;Install serverless&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  $ npm i -g serverless

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Configure the¬†&lt;code&gt;serverless.yml&lt;/code&gt;¬†file. In this example we are using Node.js 6 and we have only one function that is triggered every 5 minutes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;service: coindatax-dashbird-demo

provider:
  name: aws
  runtime: nodejs6.10

functions:
  coinmarketcap:
    handler: functions/coinmarketcap.handler
    events:
      - schedule: rate(5 minutes)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#2-development-of-the-api-integration"&gt;
  &lt;/a&gt;
  2. Development of the API integration
&lt;/h4&gt;

&lt;p&gt;Our Lambda function is also simple, as the first step of a monitoring platform is to extract data from external APIs. Here we connect our function to CoinMarketCap's API and get the ticker information of the top coins for that period.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// functions/coinmarketcap.js

const request = require('request-promise');
const uri = 'https://api.coinmarketcap.com/v1/ticker/'

function handler(event, context, callback) {
  const options = {
    uri,
    json: true
  }
  request(options)
    .then(data =&amp;gt; callback(null, data)) // insert into database
    .catch(err =&amp;gt; callback(err))
}

module.exports = {
  handler
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#3-deployment-of-the-application"&gt;
  &lt;/a&gt;
  3. Deployment of the application
&lt;/h4&gt;

&lt;p&gt;To deploy a serverless application, simply run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  $ serverless deploy -v

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And check out the output logs&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Serverless: Packaging service...
Serverless: Creating Stack...
Serverless: Checking Stack create progress...
CloudFormation - CREATE_IN_PROGRESS - AWS::CloudFormation::Stack - CoindataxDashDashbirdDashDemo-dev
CloudFormation - CREATE_IN_PROGRESS - AWS::S3::Bucket - ServerlessDeploymentBucket
CloudFormation - CREATE_IN_PROGRESS - AWS::S3::Bucket - ServerlessDeploymentBucket
CloudFormation - CREATE_COMPLETE - AWS::S3::Bucket - ServerlessDeploymentBucket
CloudFormation - CREATE_COMPLETE - AWS::CloudFormation::Stack - CoindataxDashDashbirdDashDemo-dev
Serverless: Stack create finished...
Serverless: Uploading CloudFormation file to S3...
Serverless: Uploading artifacts...
Serverless: Uploading service .zip file to S3 (17.23 MB)...
Serverless: Validating template...
Serverless: Updating Stack...
Serverless: Checking Stack update progress...
CloudFormation - UPDATE_IN_PROGRESS - AWS::CloudFormation::Stack - CoindataxDashDashbirdDashDemo-dev
CloudFormation - CREATE_IN_PROGRESS - AWS::IAM::Role - IamRoleLambdaExecution
CloudFormation - CREATE_IN_PROGRESS - AWS::Logs::LogGroup - CoinmarketcapLogGroup
CloudFormation - CREATE_IN_PROGRESS - AWS::IAM::Role - IamRoleLambdaExecution
CloudFormation - CREATE_IN_PROGRESS - AWS::Logs::LogGroup - CoinmarketcapLogGroup
CloudFormation - CREATE_COMPLETE - AWS::Logs::LogGroup - CoinmarketcapLogGroup
CloudFormation - CREATE_COMPLETE - AWS::IAM::Role - IamRoleLambdaExecution
CloudFormation - CREATE_IN_PROGRESS - AWS::Lambda::Function - CoinmarketcapLambdaFunction
CloudFormation - CREATE_IN_PROGRESS - AWS::Lambda::Function - CoinmarketcapLambdaFunction
CloudFormation - CREATE_COMPLETE - AWS::Lambda::Function - CoinmarketcapLambdaFunction
CloudFormation - UPDATE_COMPLETE_CLEANUP_IN_PROGRESS - AWS::CloudFormation::Stack - CoindataxDashDashbirdDashDemo-dev
CloudFormation - UPDATE_COMPLETE - AWS::CloudFormation::Stack - CoindataxDashDashbirdDashDemo-dev
Serverless: Stack update finished...
Service Information
service: CoindataxDashDashbirdDashDemo
stage: dev
region: us-east-1
api keys:
  None
endpoints:
  None
functions:
  coinmarketcap: CoindataxDashDashbirdDashDemo-dev-coinmarketcap

Stack Outputs
CoinmarketcapLambdaFunctionQualifiedArn: arn:aws:lambda:us-east-1:123456789012:function:CoindataxDashDashbirdDashDemo-dev-coinmarketcap:1
ServerlessDeploymentBucketName: coindataxdashdashbirddashdemo-dev-serverlessdeploymentbucket-abcdefgh1234

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#4-monitoring-of-the-lambda-functions-with-dashbird"&gt;
  &lt;/a&gt;
  4. Monitoring of the Lambda functions with Dashbird
&lt;/h4&gt;

&lt;p&gt;After you have successfully deployed your Lambda function,¬†&lt;strong&gt;you quickly realize that AWS CloudWatch does not offer that many monitoring features for you to be in full control of your application.&lt;/strong&gt;¬†Dashbird tries to fill that gap, with a dashboard that groups all your lambdas in a single place, a live tailing of your application logs and more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8qBRcuM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dashbird.io/wp-content/uploads/2020/12/New-dashboard-Dashbird-1-min.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y8qBRcuM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dashbird.io/wp-content/uploads/2020/12/New-dashboard-Dashbird-1-min.gif" alt="Prevent serverless errors with AI-driven insights"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What I love the most about Dashbird is that it was super easy to &lt;a href="https://dashbird.io/docs/quickstart/setting-up-dashbird/"&gt;set it up&lt;/a&gt;, and at the same time, it provided very useful insights to our team. I literally spent less than 5 minutes configuring it, and we were able to have a much better understanding of our architecture immediately.&lt;/p&gt;

&lt;p&gt;When it comes to Lambda functions, Dashbird provided us an aggregated performance and resource usage metrics for easy analysis, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Invocations - total count of:

&lt;ul&gt;
&lt;li&gt;  Successful requests&lt;/li&gt;
&lt;li&gt;  Errors&lt;/li&gt;
&lt;li&gt;  Cold starts&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;  Memory usage

&lt;ul&gt;
&lt;li&gt;  Average&lt;/li&gt;
&lt;li&gt;  Maximum&lt;/li&gt;
&lt;li&gt;  Minimum&lt;/li&gt;
&lt;li&gt;  99th percentile&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;  Duration

&lt;ul&gt;
&lt;li&gt;  Average&lt;/li&gt;
&lt;li&gt;  Maximum&lt;/li&gt;
&lt;li&gt;  Minimum&lt;/li&gt;
&lt;li&gt;  99th percentile&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;  Cost

&lt;ul&gt;
&lt;li&gt;  Aggregated billed execution time&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#learning-outcome-amp-saving-money"&gt;
  &lt;/a&gt;
  Learning outcome &amp;amp; saving money
&lt;/h2&gt;

&lt;p&gt;Because of Dashbird, we noticed that¬†&lt;strong&gt;all our lambdas were running with a third of the allocated memory size and that we could confidently reduce that threshold in order to reduce costs.&lt;/strong&gt;¬†The change was very simple to implement, as all we did was to update the¬†&lt;code&gt;memorySize&lt;/code&gt;¬†default parameter of serverless:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;provider:
  name: aws
  runtime: nodejs6.10
  memorySize: 512 # default is 1024

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With one line of code, we &lt;strong&gt;reduced our billing by 50%&lt;/strong&gt;, and we are constantly monitoring our application to see if we can reduce it even further.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Serverless architecture has undoubtedly many &lt;a href="https://dashbird.io/knowledge-base/basic-concepts/serverless-advantages-and-use-cases/"&gt;advantages&lt;/a&gt;¬†to both small and big companies. Nevertheless, you should always take into account the unexpected debugging/monitoring time that you wouldn't have with traditional server-based systems. By using¬†&lt;a href="https://dashbird.io/"&gt;Dashbird&lt;/a&gt;, some of that hurdle can be reduced and maybe even eliminated, so that you end up with only the¬†&lt;a href="https://dashbird.io/knowledge-base/basic-concepts/serverless-advantages-and-use-cases/"&gt;benefits of serverless&lt;/a&gt;¬†and AWS Lambda.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
      <category>programming</category>
      <category>devops</category>
    </item>
    <item>
      <title>Realtime Rails with websockets</title>
      <author>NDREAN</author>
      <pubDate>Thu, 29 Jul 2021 16:12:20 +0000</pubDate>
      <link>https://dev.to/ndrean/realtime-rails-with-websockets-1jk3</link>
      <guid>https://dev.to/ndrean/realtime-rails-with-websockets-1jk3</guid>
      <description>&lt;p&gt;Yet another tuto on Rails' framework &lt;strong&gt;ActionCable&lt;/strong&gt;. I focus on going quickly to the relevant paths to achieve running a rails app with a realtime feature packaged as a standalone process.&lt;/p&gt;

&lt;p&gt;Instead of a traditional chat app, this one simulates managing realtime inventories. It has a button that on-click increments a counter and broadcasts the decremented total; this simulates a customer fulling his basket and decreasing accordingly the visible stock to any other connected customer.&lt;/p&gt;

&lt;p&gt;We will setup the backend and the frontend. The frontend requires the installation of the npm package &lt;strong&gt;actioncable&lt;/strong&gt;, and the backend to enable the middleware &lt;strong&gt;action_cable/engine&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/actioncable"&gt;npm actioncable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://guides.rubyonrails.org/action_cable_overview.html"&gt;Rails guides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The frontend is managed by &lt;strong&gt;React&lt;/strong&gt;, and the Websockets are managed by the integrated framework &lt;strong&gt;ActionCable&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The process is the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;on the frontend, implement a component with a button that triggers a POST request to a Rails backend endpoint,&lt;/li&gt;
&lt;li&gt;a Rails controller method responds to this route. It should:

&lt;ul&gt;
&lt;li&gt;save the new value/customer to the database,&lt;/li&gt;
&lt;li&gt;calculate the new stock&lt;/li&gt;
&lt;li&gt;broadcast the total to a dedicated websocket channel&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;in the frontend React component, we update the state of the stock :

&lt;ul&gt;
&lt;li&gt; on each page refresh (a GET request to the database)&lt;/li&gt;
&lt;li&gt; when receiving data through the dedicated websocket channel.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The frontend component "Button.jsx" looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//#Button.jsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;csrfToken&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@rails/ujs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;other&lt;/span&gt; &lt;span class="nx"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;..]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt; 
  &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;...]&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
     &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/incrmyprod&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt; 
       &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;Accept&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;X-CSRF-Token&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;csrfToken&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
         &lt;span class="p"&gt;},&lt;/span&gt;
       &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Click&lt;/span&gt; &lt;span class="nx"&gt;me&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;counters&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;PG&lt;/span&gt; &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;counters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;        &lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-backend"&gt;
  &lt;/a&gt;
  The backend
&lt;/h3&gt;

&lt;p&gt;We run &lt;code&gt;$&amp;gt; rails g channel counter&lt;/code&gt; and have a "counter" model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;/app/channels
  |_ /application_cable
  |_ counter_channel.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our routes, we link the frontend URI to an action:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;#app/config/routes.rb&lt;/span&gt;
&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s1"&gt;'/incrmyprod'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="s1"&gt;'counters#set_counters'&lt;/span&gt;
&lt;span class="n"&gt;mount&lt;/span&gt; &lt;span class="no"&gt;ActionCable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'/cable'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the controller's "counters" method "set_counters", we will broadcast the new data to the dedicated websocket channel:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;#app/controllers/counters_controller.rb&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_counters&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'counter'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:counter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="no"&gt;ActionCable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;broadcast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'counters_channel'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;as_json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the dedicated channel, we broadcast this data when received to all subscribed consummers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;#app/channels/counter_channel.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CounterChannel&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationCable&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Channel&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;subscribed&lt;/span&gt;
    &lt;span class="n"&gt;stream_from&lt;/span&gt; &lt;span class="s2"&gt;"counters_channel"&lt;/span&gt; 
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# rebroadcasting the received message to any other connected client&lt;/span&gt;
    &lt;span class="no"&gt;ActionCable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;broadcast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'counters_channel'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;unsubscribed&lt;/span&gt;
    &lt;span class="c1"&gt;# Any cleanup needed when channel is unsubscribed&lt;/span&gt;
    &lt;span class="n"&gt;stop_all_streams&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the layouts, add &lt;code&gt;&amp;lt;%= action_cable_meta_tag %&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-frontend"&gt;
  &lt;/a&gt;
  The frontend:
&lt;/h3&gt;

&lt;p&gt;We installed &lt;code&gt;npm i -g actioncable&lt;/code&gt;. Since we ran &lt;code&gt;rails g channel counter&lt;/code&gt;, we have the files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;/javascript/channels
    |_ consumer.js
    |_ index.js
    |_ counter_channels.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;javascript&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;channels&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;counter_channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;consumer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./consumer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CounterChannel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;consumer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscriptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CounterChannel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;connected&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;disconnected&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;received&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Called when there's incoming data on the websocket for this channel&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;CounterChannel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;strong&gt;Button&lt;/strong&gt; component, we will mutate the state of the counter. On page refresh, we fetch from the database and mutate the state for rendering, and when we receive data on the websocket channel, we also mutate the state for rendering. To do this, we pass a function to the &lt;strong&gt;CounterChannel.received&lt;/strong&gt; that mutates the state. If we don't have any data, then we mutate the state with a GET request. This is done wition a &lt;code&gt;useEffect&lt;/code&gt; hook. We can complet the &lt;strong&gt;Button&lt;/strong&gt; component with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;CounterChannel&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../channels/counter_channel.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;[...]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCounters&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;initCounter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;CounterChannel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;received&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;setCounters&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/getCounters&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;no-store&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
          &lt;span class="nx"&gt;setCounters&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;countPG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;countPG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;initCounter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
  &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;rest&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt; &lt;span class="nx"&gt;above&lt;/span&gt; &lt;span class="p"&gt;...]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#standalone-setup"&gt;
  &lt;/a&gt;
  Standalone setup
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://guides.rubyonrails.org/action_cable_overview.html#running-standalone-cable-servers"&gt;Rails guide standalone&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the frontend, run &lt;code&gt;npm i -g actioncable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For the backend, enable the middleware and config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;#/config/application.rb&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"action_cable/engine"&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;myapp&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Application&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Application&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;action_cable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'CABLE_FRONT_URL'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'ws://localhost:28080'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;origins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'CABLE_ALLOWED_REQUEST_ORIGINS'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"http:&lt;/span&gt;&lt;span class="se"&gt;\/\/&lt;/span&gt;&lt;span class="s2"&gt;localhost*"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;","&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;origins&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map!&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;action_cable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;allowed_request_origins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;origins&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Redis instance has (or not) a "config" file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;#config/cable&lt;/span&gt;
&lt;span class="na"&gt;development&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;adapter&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;redis&lt;/span&gt;
  &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;%= ENV.fetch("REDIS_CABLE", "redis://:secretpwd@localhost:6379/3" ) %&amp;gt;&lt;/span&gt;
  &lt;span class="na"&gt;channel_prefix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cable_dev&lt;/span&gt;

&lt;span class="na"&gt;production&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;adapter&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;redis&lt;/span&gt;
  &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;%= ENV.fetch("REDIS_CABLE", "redis://redis:6379/3" ) %&amp;gt;&lt;/span&gt;
  &lt;span class="na"&gt;channel_prefix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cable_prod&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;#/cable/config.ru&lt;/span&gt;
&lt;span class="nb"&gt;require_relative&lt;/span&gt; &lt;span class="s2"&gt;"../config/environment"&lt;/span&gt;
&lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;eager_load!&lt;/span&gt;

&lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="no"&gt;ActionCable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;server&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run for example with &lt;a href="https://github.com/DarthSim/overmind"&gt;overmind&lt;/a&gt; the &lt;strong&gt;Procfile&lt;/strong&gt;, with &lt;code&gt;overmind start&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#Procfile
assets:  ./bin/webpack-dev-server
web:     bundle exec rails server
redis-server:   redis-server redis/redis.conf
worker:  bundle exec sidekiq -C config/sidekiq.yml
cable: bundle exec puma -p 28080 cable/config.ru
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>rails</category>
      <category>websockets</category>
      <category>actioncable</category>
    </item>
    <item>
      <title>Introduction To Cloud Native Chaos Engineering</title>
      <author>Lakshya Gupta</author>
      <pubDate>Thu, 29 Jul 2021 16:00:25 +0000</pubDate>
      <link>https://dev.to/lakshya806/introduction-to-cloud-native-chaos-engineering-28d6</link>
      <guid>https://dev.to/lakshya806/introduction-to-cloud-native-chaos-engineering-28d6</guid>
      <description>&lt;p&gt;In this blog, I will be sharing my learning from a Live stream about chaos engineering. the link to which can be found [here]. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=LK0oDLQE4S8"&gt;https://www.youtube.com/watch?v=LK0oDLQE4S8&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problems-before-chaos-engineering"&gt;
  &lt;/a&gt;
  The problems before Chaos Engineering
&lt;/h2&gt;

&lt;p&gt;Before Chaos Engineering was adopted there was no way to tackle problems that were unpredictable. For example, high traffic on the app would cause a system outage. This outage, even for a small time would cost millions to companies and their reputation as well. This is where we felt that normal streamlined testing is not enough.&lt;/p&gt;

&lt;p&gt;There are many services running in the system and the interaction between them can be unpredictable. These interactions often result in downtime of the system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-chaos-engineering"&gt;
  &lt;/a&gt;
  What is Chaos Engineering?
&lt;/h2&gt;

&lt;p&gt;Chaos engineering can be thought of as a mechanism of running experiments on the system by exposing it to real-life scenarios to see whether the system can withstand unexpected disruptions. These include scenarios of high traffic on the system or when the system faces any sort of outage. By running these experiments on the system we try to find out its weakness and makes the system more resilient. Any event capable of disrupting steady state is a potential variable in a Chaos experiment&lt;/p&gt;

&lt;p&gt;There are four steps in Chaos Engineering:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Steady-state&lt;/li&gt;
&lt;li&gt;Hypothesis&lt;/li&gt;
&lt;li&gt;Experiment&lt;/li&gt;
&lt;li&gt;Adapt&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More details on these can be found on &lt;a href="https://principlesofchaos.org/"&gt;https://principlesofchaos.org/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-resilience"&gt;
  &lt;/a&gt;
  What is resilience
&lt;/h2&gt;

&lt;p&gt;Resilience is a system's ability to stay working even when a fault is occurred. Resilience of a system can be challenged in many ways such as when the services become unhealthy or when a node in a Kubernetes cluster goes to not-ready state or when there is a memory leak in the system. Chaos engineering caters to these problems of not maintaining a resilient system.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-build-resilience"&gt;
  &lt;/a&gt;
  How to build resilience
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Identify steady state conditions i.e. the state that we want the system to be in ideally.&lt;/li&gt;
&lt;li&gt;Introduce a fault related to what you want to test&lt;/li&gt;
&lt;li&gt;Did the system regain its steady state after introducing a fault?&lt;/li&gt;
&lt;li&gt;If yes then the system is resilient&lt;/li&gt;
&lt;li&gt;If no then work on this weakness and again introduce a fault&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#how-litmus-and-chaos-engineering-is-introduced-in-devops-space"&gt;
  &lt;/a&gt;
  How Litmus and Chaos Engineering is introduced in DevOps space?
&lt;/h2&gt;

&lt;p&gt;The general idea is that we should also focus on operations and not just the development side. Instead of writing tests for all the microservices individually, we can automate the entire process using Litmus. This make everything very smooth.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-kubernetes"&gt;
  &lt;/a&gt;
  Why Kubernetes?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Kubernetes is the de facto standard in the industry.&lt;/li&gt;
&lt;li&gt;Kubernetes is highly scalable.&lt;/li&gt;
&lt;li&gt;High availability&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cloud-native-chaos-engineering"&gt;
  &lt;/a&gt;
  Cloud Native Chaos Engineering
&lt;/h2&gt;

&lt;p&gt;Cloud Native leverages the idea of using cloud storage to run microservices on the system. Some principles of Cloud Native Chaos Engineering are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Projects are mainly open source&lt;/li&gt;
&lt;li&gt;Community support&lt;/li&gt;
&lt;li&gt;Open observability&lt;/li&gt;
&lt;li&gt;Open API&lt;/li&gt;
&lt;li&gt;GitOps&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#benefits"&gt;
  &lt;/a&gt;
  Benefits:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Run services without an outage&lt;/li&gt;
&lt;li&gt;Run services to meet the business SLAs and SLOs&lt;/li&gt;
&lt;li&gt;Scale your services on demand&lt;/li&gt;
&lt;li&gt;Upgrade you services without an outage&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#some-advantages-of-using-litmus"&gt;
  &lt;/a&gt;
  Some advantages of using Litmus:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Litmus is cross-cloud&lt;/li&gt;
&lt;li&gt;It takes a cloud-native approach to create, manage and monitor chaos&lt;/li&gt;
&lt;li&gt;It is a complete framework to implement Chaos Engineering within a cloud-native ecosystem&lt;/li&gt;
&lt;li&gt;It helps both developers and SREs to automate the chaos experiment.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#useful-resources"&gt;
  &lt;/a&gt;
  Useful Resources
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#beginner-friendly-issues-to-contribute"&gt;
  &lt;/a&gt;
  Beginner friendly issues to contribute:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/redirect?event=video_description&amp;amp;redir_token=QUFFLUhqbWYwZVYxMGxPMnZza3Z1RmdocXdpcm9lMW9pZ3xBQ3Jtc0tsU0pGTEdTY1BlMjI3NzhRN0MtOVFfVER3aXJPZGh3UVBrTkxXbmtfa1p3SURjLTdGUGFfZjkyc0d3cTI3NGxzb0c2TkpDbUptTjNlbjY3RTlzUlZaQmdpd0E3c2Y4ZjFvaWsxeVMxcWkwQjA3WXZXWQ&amp;amp;q=https%3A%2F%2Fgithub.com%2Flitmuschaos%2Flitmus"&gt;https://github.com/litmuschaos/litmus&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/redirect?event=video_description&amp;amp;redir_token=QUFFLUhqa0FPMVJ5ZWVRb1hCQjFpRkpWcWxfMXBoV1pNUXxBQ3Jtc0trc2lfZ0Y1V1lleHI5SHdOaDZlWC0zbzctS3haUXduM0NueWZnZG90aW9SWmlwZEw0V25iT2t5aUZFVS12Y3hGSm53Mkp5WmRQZ0tVT2UyNmpza19CdzFCWW95eDNGNFpyTXF2Q1dXd1J6STNPbTZmbw&amp;amp;q=https%3A%2F%2Fgithub.com%2Flitmuschaos%2Ftest-tools"&gt;https://github.com/litmuschaos/test-t...&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/redirect?event=video_description&amp;amp;redir_token=QUFFLUhqbnNrMXdtYV9lQmhKYWxyZ2V2eHNHZEtvY0k5Z3xBQ3Jtc0trMGlQWERyM3dlYl9Wa0ZYU0ZCTDN6aEdKRjh4X2daaGpZNXJoNE1abGR4SDlQQllRRjgtTEVJOV9Tc2lNd3hENmZyU2ZaaThyc1VJWjhTb1V2cVB5R3FEZTZPYmo1V1NUdE1KaDlONDJwZGxIUklJdw&amp;amp;q=https%3A%2F%2Fgithub.com%2Flitmuschaos%2Fwebsite-litmuschaos"&gt;https://github.com/litmuschaos/websit...&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#blogs-and-videos-to-learn-more-about-litmus"&gt;
  &lt;/a&gt;
  Blogs and videos to learn more about Litmus:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/redirect?event=video_description&amp;amp;redir_token=QUFFLUhqbl9USS04ck1qZ2RIY0l5UmZsZGZIWXl5T3plQXxBQ3Jtc0tuY2I5czFsLUVwMGFDT1MzeGFwbm80LV9abl9ZSVVnMTRrMlllVmdnNV9ldW1JakVzREdsRHkybnZuaFJRYTVWMnRKSjU2Z0ppaXh0WmNCemdXZ0VOYWwwRXhTaHBhQmZtWS1lQkJwVXp4aUNEeUVZMA&amp;amp;q=https%3A%2F%2Fdev.to%2Flitmus-chaos"&gt;https://dev.to/litmus-chaos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/redirect?event=video_description&amp;amp;redir_token=QUFFLUhqbHF0U2ozMXNRdUtqV1lPVzlwcDJtS0RXTlFmUXxBQ3Jtc0trWkpDYkwtcUhiVmpGMlFFXzdqZFJCTUM4THBBSzFFY05ZZjdlcE15dHBEUWFxWURDVk0zTXFCN2xtUDFHRUx5eG9LcGhaamFrbVZfbDBwbzV1QzF2UjF3QWE0eHN2X2hNU2NuQUE3ZXJCcFQ4ek1xOA&amp;amp;q=https%3A%2F%2Fmedium.com%2Flitmus-chaos"&gt;https://medium.com/litmus-chaos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCa57PMqmz_j0wnteRa9nCaw/videos"&gt;https://www.youtube.com/channel/UCa57...&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/redirect?event=video_description&amp;amp;redir_token=QUFFLUhqbmR6UVh2Z0VqTUxFSUN5dkV5Z1pKRkFhVFNqUXxBQ3Jtc0tsdEp4QnIxS3VpMjZVTHlMRF83OXM3VHptdjl1VERyTVg4X0tKWVFhRDlaZTI2WWlUUmNCTkNzQnJqanBaZ2k4Z2Q4RkNiOWpfb2FIMmFvT1AxZHpXTXg1NG10U254RmRLdXNVakFJNjB6Yk0takFWNA&amp;amp;q=https%3A%2F%2Fgithub.com%2Flitmusbot%2Fkatacoda-scenarios"&gt;https://github.com/litmusbot/katacoda...&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can join the slack community too! That is where you can ask your queries and get to learn more about chaos &amp;amp; contributing to Litmus! To join the slack please follow the following steps!&lt;br&gt;
Step 1: Join the Kubernetes slack using the following link: &lt;a href="https://www.youtube.com/redirect?event=video_description&amp;amp;redir_token=QUFFLUhqbUpyY0ZFYmFvS2ZqQjVkNXAzY0ZsTkpubHc1Z3xBQ3Jtc0tsdVFZYXVxTGFOTHNKNzE5TGw2ME51dUVOR25paTFsWDlGMzR6MVFuQWRBVnV2ZGdFSnF3Q3lDVFVhakEybF83dGtYWVZfZXJZYnUwaHgtMFpoWnlzWGpYOGtEeVNvbEdOd1V6bm53Yjl1NmdjcWxaSQ&amp;amp;q=https%3A%2F%2Fslack.k8s.io%2F"&gt;https://slack.k8s.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 2: Join the &lt;a href="https://www.youtube.com/hashtag/litmus"&gt;#litmus&lt;/a&gt; channel on the Kubernetes slack or use this link after joining the Kubernetes slack: &lt;a href="https://www.youtube.com/redirect?event=video_description&amp;amp;redir_token=QUFFLUhqbkhBMEttVHo0SVk0dHkzUk1iYlNQSHZFUTVyQXxBQ3Jtc0tsUWhRRzFEYnBZN1lfWXNjZG5ORW5nMGMxbnh0Y3Y2U0l2eUhIeU9RenQ3cHZCOFV5Y0s3Vlg1eHlSVVhSb2E4S2EweEhSSFU4cU9OMGFzZkNaWkszVjdidTNNaUZUblpXa1JmTjFpdHNEY3U1Y1Vudw&amp;amp;q=https%3A%2F%2Fslack.litmuschaos.io%2F"&gt;https://slack.litmuschaos.io/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-"&gt;
  &lt;/a&gt;
  Thank you! :)
&lt;/h3&gt;

</description>
      <category>kubernetes</category>
      <category>cloudnative</category>
      <category>litmus</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Activision Blizzard Discrimination and Harassment Suit, the Incredible Gail.com &amp; more on DevNews!</title>
      <author>dev.to staff</author>
      <pubDate>Thu, 29 Jul 2021 15:58:40 +0000</pubDate>
      <link>https://dev.to/devteam/activision-blizzard-discrimination-and-harassment-suit-the-incredible-gail-com-more-on-devnews-53j0</link>
      <guid>https://dev.to/devteam/activision-blizzard-discrimination-and-harassment-suit-the-incredible-gail-com-more-on-devnews-53j0</guid>
      <description>&lt;p&gt;Listen to S5E2 of the DevNews podcast today!&lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devnews/s5-e2-activision-blizzard-discrimination-and-harassment-suit-security-issues-with-some-independent-phone-producers-and-the-incredible-gail-com"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S5:E2 - Activision Blizzard Discrimination and Harassment Suit, Security Issues With Some Independent Phone Producers, and the Incredible Gail.com&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devnews"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevNews ¬†

      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s5-e2-activision-blizzard-discrimination-and-harassment-suit-security-issues-with-some-independent-phone-producers-and-the-incredible-gail-com" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s5-e2-activision-blizzard-discrimination-and-harassment-suit-security-issues-with-some-independent-phone-producers-and-the-incredible-gail-com" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s5-e2-activision-blizzard-discrimination-and-harassment-suit-security-issues-with-some-independent-phone-producers-and-the-incredible-gail-com" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s5-e2-activision-blizzard-discrimination-and-harassment-suit-security-issues-with-some-independent-phone-producers-and-the-incredible-gail-com" alt="DevNews" src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJPvwj98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XOSCOlKI--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s5-e2-activision-blizzard-discrimination-and-harassment-suit-security-issues-with-some-independent-phone-producers-and-the-incredible-gail-com"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devnews/s5-e2-activision-blizzard-discrimination-and-harassment-suit-security-issues-with-some-independent-phone-producers-and-the-incredible-gail-com"&gt;
      &lt;img id="episode-profile-image" alt="S5:E2 - Activision Blizzard Discrimination and Harassment Suit, Security Issues With Some Independent Phone Producers, and the Incredible Gail.com" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--84VpOv6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3GWkSFQs--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;√ó&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Hosts:&lt;/strong&gt; &lt;a class="mentioned-user" href="https://dev.to/saronyitbarek"&gt;@saronyitbarek&lt;/a&gt;
 &amp;amp; &lt;a class="mentioned-user" href="https://dev.to/joshpuetz"&gt;@joshpuetz&lt;/a&gt;
 &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Guest:&lt;/strong&gt; &lt;a href="https://twitter.com/kylerankin"&gt;Kyle Rankin&lt;/a&gt;, Chief Security Officer at Purism, SPC and the author of a number of books on security and infrastructure, most recently Linux Hardening in Hostile Networks for Pearson. &lt;/p&gt;




&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devnews"&gt;follow DevNews&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; &lt;em&gt;‚Äî or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Quick Listening Links&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/s5-e2-activision-blizzard-discrimination-harassment/id1525581923?i=1000530367033"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/1cUPPfVV5Zq5Vou66vUItb"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cDovL2ZlZWRzLmNvZGVuZXdiaWUub3JnL2Rldm5ld3NfcG9kY2FzdC54bWw/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZuZXdzLzM0?sa=X&amp;amp;ved=0CAQQkfYCahcKEwjwrq200ojyAhUAAAAAHQAAAAAQCA"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.stitcher.com/show/devnews/episode/s5-e2-activision-blizzard-discrimination-and-harassment-suit-security-issues-with-some-independent-phone-producers-and-the-incredible-gail-com-85747955"&gt;Stitcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devnews/s5e2-activision-blizzard-SA8ukmYJFUZ/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevNews-p1352512/?topicId=164783628"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devpods.herokuapp.com/podcasts/devnews/episodes/175"&gt;DEV Pods website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#acknowledgements"&gt;
  &lt;/a&gt;
  &lt;em&gt;Acknowledgements&lt;/em&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Our season five sponsor, &lt;a href="https://scoutapm.com/devnews"&gt;Scout APM&lt;/a&gt; ‚ù§Ô∏è &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We hope you enjoy the season premiere of DevNews!&lt;/p&gt;

</description>
      <category>news</category>
      <category>podcast</category>
    </item>
    <item>
      <title>A Sneak Peek of Ruby's New Debugger!</title>
      <author>Stan Lo</author>
      <pubDate>Thu, 29 Jul 2021 15:22:16 +0000</pubDate>
      <link>https://dev.to/st0012/a-sneak-peek-of-ruby-s-new-debugger-5caa</link>
      <guid>https://dev.to/st0012/a-sneak-peek-of-ruby-s-new-debugger-5caa</guid>
      <description>&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ruby"&gt;
        ruby
      &lt;/a&gt; / &lt;a href="https://github.com/ruby/debug"&gt;
        debug
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Debugging functionality for Ruby
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/ruby/debug"&gt;&lt;code&gt;debug&lt;/code&gt;&lt;/a&gt; is Ruby's new debugger and will be included in Ruby 3.1. Since I've been both contributing to and using it for a while, I feel it's time to give you guys a sneak peek before its &lt;code&gt;1.0&lt;/code&gt; release üôÇ&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;Since it's not officially released yet, any feature mentioned in this article could still be modified/removed in the released version&lt;/em&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;As I have mentioned, it's planned to be a standard library of Ruby 3.1. And currently, you can install it as a gem, like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ gem install debug --pre
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Gemfile&lt;/span&gt;
&lt;span class="c1"&gt;# it's under active development, so I suggest using GitHub as source when possible&lt;/span&gt;
&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s2"&gt;"debug"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;github: &lt;/span&gt;&lt;span class="s2"&gt;"ruby/debug"&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Functionality-wise, &lt;code&gt;debug&lt;/code&gt; is similar to the famous &lt;code&gt;GDB&lt;/code&gt; debugger and Ruby's &lt;code&gt;byebug&lt;/code&gt; gem. It provides a rich set of &lt;a href="https://github.com/ruby/debug#debug-command-on-the-debug-console"&gt;debug commands&lt;/a&gt; and has some unique features. &lt;/p&gt;

&lt;p&gt;Quoted from its README:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;New debug.rb has several advantages:

-   Fast: No performance penalty on non-stepping mode and non-breakpoints.
-   Remote debugging: Support remote debugging natively.
    -   UNIX domain socket
    -   TCP/IP
    -   VSCode/DAP integration (VSCode rdbg Ruby Debugger - Visual Studio Marketplace)
-   Extensible: application can introduce debugging support with several ways:
    -   By `rdbg` command
    -   By loading libraries with `-r` command line option
    -   By calling Ruby's method explicitly
-   Misc
    -   Support threads (almost done) and ractors (TODO).
    -   Support suspending and entering to the console debugging with `Ctrl-C` at most of timing.
    -   Show parameters on backtrace command.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And these are my favorite features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It's colorized.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vGihzjlm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxc3ylweoqelut9rddsi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vGihzjlm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxc3ylweoqelut9rddsi.png" alt="Colorize Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When showing backtrace with the &lt;code&gt;backtrace&lt;/code&gt; command, it also shows method arguments, block arguments, and the return value.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;=&amp;gt;#0    Foo#forth_call(num1=20, num2=10) at target.rb:20 #=&amp;gt; 30
  #1    block {|ten=10|} in second_call at target.rb:8
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;It's possible to script your debug commands with &lt;code&gt;binding.break&lt;/code&gt; and reduce manual operations. (See the combinations section for examples)&lt;/li&gt;
&lt;li&gt;There are several commands to set breakpoints that trigger under different conditions, like &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt;, and &lt;code&gt;watch&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#-raw-bindingbreak-endraw-alias-raw-bindingb-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;binding.break&lt;/code&gt; (alias: &lt;code&gt;binding.b&lt;/code&gt;)
&lt;/h2&gt;

&lt;p&gt;If you're a heavy &lt;code&gt;pry&lt;/code&gt; user like me, you can use a familiar &lt;code&gt;binding.break&lt;/code&gt; (or just &lt;code&gt;binding.b&lt;/code&gt;) to kick off the debug session as usual.&lt;/p&gt;

&lt;p&gt;But &lt;code&gt;binding.break&lt;/code&gt; is actually more powerful than &lt;code&gt;binding.pry&lt;/code&gt;, because it can take commands! &lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;binding.b(do: "catch CustomException")&lt;/code&gt; - debugger will execute the command (&lt;code&gt;catch customExeption&lt;/code&gt;) and continue the program.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;binding.b(pre: "catch CustomException")&lt;/code&gt; - debugger will execute the command (&lt;code&gt;catch customExeption&lt;/code&gt;) and stop at the line.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(To execute multiple commands, use &lt;code&gt;;;&lt;/code&gt; as the separator: &lt;code&gt;"cmd1 ;; cmd2 ;; cmd3"&lt;/code&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fequently-used-commands"&gt;
  &lt;/a&gt;
  Fequently Used Commands
&lt;/h2&gt;

&lt;p&gt;The new debugger has many powerful commands. And here are the ones I use the most:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-break-endraw-alias-raw-b-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;break&lt;/code&gt; (alias: &lt;code&gt;b&lt;/code&gt;)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;A&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bar&lt;/span&gt;
&lt;span class="no"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bar&lt;/span&gt;

&lt;span class="n"&gt;b1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
&lt;span class="n"&gt;b2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;B&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;

&lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;
&lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#basic-usages"&gt;
  &lt;/a&gt;
  Basic Usages
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;b A#foo&lt;/code&gt; - stops when &lt;code&gt;b1.foo&lt;/code&gt;, &lt;code&gt;b2.foo&lt;/code&gt;, and &lt;code&gt;c.foo&lt;/code&gt; is called&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;b A.bar&lt;/code&gt; - stops when &lt;code&gt;B.bar&lt;/code&gt; and &lt;code&gt;C.bar&lt;/code&gt; is called&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;b B#foo&lt;/code&gt; - stops when &lt;code&gt;b1.foo&lt;/code&gt; and &lt;code&gt;b2.foo&lt;/code&gt; is called&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;b B.bar&lt;/code&gt; - stops when &lt;code&gt;B.bar&lt;/code&gt; is called&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;b b1.foo&lt;/code&gt; - stops when &lt;code&gt;b1.foo&lt;/code&gt; is called&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#commands"&gt;
  &lt;/a&gt;
  Commands
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;b b1.foo do: cmd&lt;/code&gt; - executes &lt;code&gt;cmd&lt;/code&gt; when &lt;code&gt;b1.foo&lt;/code&gt; is called but doesn't stop&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;b b1.foo pre: cmd&lt;/code&gt; - executes &lt;code&gt;cmd&lt;/code&gt; when &lt;code&gt;b1.foo&lt;/code&gt; is called and stops&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#-raw-catch-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;catch&lt;/code&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FooException&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;StandardError&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BarException&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;StandardError&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;raise_foo&lt;/span&gt;
  &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="no"&gt;FooException&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;raise_bar&lt;/span&gt;
  &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="no"&gt;BarException&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;


&lt;span class="n"&gt;raise_foo&lt;/span&gt;
&lt;span class="n"&gt;raise_bar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;catch StandardError&lt;/code&gt; - stops when any instance of &lt;code&gt;StandardError&lt;/code&gt; is raised, including &lt;code&gt;FooException&lt;/code&gt; and &lt;code&gt;BarException&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;catch FooException&lt;/code&gt; - stops when &lt;code&gt;FooException&lt;/code&gt; is raised&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#-raw-backtrace-endraw-alias-raw-bt-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;backtrace&lt;/code&gt; (alias &lt;code&gt;bt&lt;/code&gt;)
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Example Output&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;=&amp;gt;#0    Foo#forth_call(num1=20, num2=10) at target.rb:20 #=&amp;gt; 30
  #1    block {|ten=10|} in second_call at target.rb:8
  #2    Foo#third_call_with_block(block=#&amp;lt;Proc:0x00007f9283101568 target.rb:7&amp;gt;) at target.rb:15
  #3    Foo#second_call(num=20) at target.rb:7
  #4    Foo#first_call at target.rb:3
  #5    &amp;lt;main&amp;gt; at target.rb:23
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;bt&lt;/code&gt; - shows all frames on the stack&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;bt 10&lt;/code&gt; - only shows the first 10 frames&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;bt /my_lib/&lt;/code&gt; - only shows the frames with path that matches &lt;code&gt;my_lib&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#-raw-outline-endraw-alias-raw-ls-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;outline&lt;/code&gt; (alias &lt;code&gt;ls&lt;/code&gt;)
&lt;/h3&gt;

&lt;p&gt;Similar to the &lt;code&gt;ls&lt;/code&gt; command in &lt;code&gt;irb&lt;/code&gt; or &lt;code&gt;pry&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-bindingb-endraw-command-combinations"&gt;
  &lt;/a&gt;
  &lt;code&gt;binding.b&lt;/code&gt; + Command Combinations
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-raw-bindingbdo-b-foobar-do-bt-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;binding.b(do: "b Foo#bar do: bt")&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;It allows you to inspect a method call's backtrace without touching the method definition or typing commands manually.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Script&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;do: &lt;/span&gt;&lt;span class="s2"&gt;"b Foo#bar do: bt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_method&lt;/span&gt;
  &lt;span class="no"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bar&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;some_method&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DEBUGGER: Session start (pid: 75555)
[1, 10] in target.rb
=&amp;gt;    1| binding.b(do: "b Foo#bar do: bt")
      2|
      3| class Foo
      4|   def bar
      5|   end
      6| end
      7|
      8| def some_method
      9|   Foo.new.bar
     10| end
=&amp;gt;#0    &amp;lt;main&amp;gt; at target.rb:1
(rdbg:binding.break) b Foo#bar do: bt
uninitialized constant Foo
#0  BP - Method (pending)  Foo#bar do: bt
DEBUGGER:  BP - Method  Foo#bar at target.rb:4 do: bt is activated.
[1, 10] in target.rb
      1| binding.b(do: "b Foo#bar do: bt")
      2|
      3| class Foo
=&amp;gt;    4|   def bar
      5|   end
      6| end
      7|
      8| def some_method
      9|   Foo.new.bar
     10| end
=&amp;gt;#0    Foo#bar at target.rb:4
  #1    Object#some_method at target.rb:9
  # and 1 frames (use `bt' command for all frames)

Stop by #0  BP - Method  Foo#bar at target.rb:4 do: bt
(rdbg:break) bt
=&amp;gt;#0    Foo#bar at target.rb:4
  #1    Object#some_method at target.rb:9
  #2    &amp;lt;main&amp;gt; at target.rb:12
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-bindingbdo-b-foobar-do-info-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;binding.b(do: "b Foo#bar do: info")&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;It allows you to inspect a method's environment (e.g. argument) when called:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Script&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;do: &lt;/span&gt;&lt;span class="s2"&gt;"b Foo#bar do: info"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; 
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_method&lt;/span&gt;
  &lt;span class="no"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;some_method&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DEBUGGER: Session start (pid: 75924)
[1, 10] in target.rb
=&amp;gt;    1| binding.b(do: "b Foo#bar do: info")
      2|
      3| class Foo
      4|   def bar(a)
      5|     a
      6|   end
      7| end
      8|
      9| def some_method
     10|   Foo.new.bar(10)
=&amp;gt;#0    &amp;lt;main&amp;gt; at target.rb:1
(rdbg:binding.break) b Foo#bar do: info
uninitialized constant Foo
#0  BP - Method (pending)  Foo#bar do: info
DEBUGGER:  BP - Method  Foo#bar at target.rb:4 do: info is activated.
[1, 10] in target.rb
      1| binding.b(do: "b Foo#bar do: info")
      2|
      3| class Foo
      4|   def bar(a)
=&amp;gt;    5|     a
      6|   end
      7| end
      8|
      9| def some_method
     10|   Foo.new.bar(10)
=&amp;gt;#0    Foo#bar(a=10) at target.rb:5
  #1    Object#some_method at target.rb:10
  # and 1 frames (use `bt' command for all frames)

Stop by #0  BP - Method  Foo#bar at target.rb:4 do: info
(rdbg:break) info
%self = #&amp;lt;Foo:0x00007fdac491c200&amp;gt;
a = 10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm a Rails developer, so I usually put the combination code at the beginning of a controller action, like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SomeController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationController&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;
    &lt;span class="nb"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;pre: &lt;/span&gt;&lt;span class="s2"&gt;"b User#buggy_method do: info"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# other code&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then the debugger would execute the command and/or stops at the method I expected. &lt;br&gt;
I don't need to jump between multiple files for adding &lt;code&gt;binding.pry&lt;/code&gt; or &lt;code&gt;puts&lt;/code&gt; anymore üòé&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#a-small-drawback"&gt;
  &lt;/a&gt;
  A Small Drawback
&lt;/h3&gt;

&lt;p&gt;However, the new debugger isn't all perfect (yet). Unlike in &lt;code&gt;byebug&lt;/code&gt; or &lt;code&gt;pry&lt;/code&gt;, you can't directly evaluate a Ruby expression in the debug session:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(rdbg) 1 + 1
unknown command: 1 + 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To evaluate an expression, you need to use &lt;code&gt;p&lt;/code&gt; or &lt;code&gt;pp&lt;/code&gt; command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(rdbg) p 1 + 1
=&amp;gt; 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But according to the project's maintainer &lt;a href="https://github.com/ko1"&gt;@ko1&lt;/a&gt;'s '&lt;a href="https://github.com/ruby/debug/issues/148#issuecomment-887687532"&gt;comment&lt;/a&gt;, expression evaluation may be supported before the official &lt;code&gt;1.0&lt;/code&gt; release.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h3&gt;

&lt;p&gt;Although it's not officially released yet, I've started using it at work daily. And I believe it'll soon become an must-have tool in every Rubyists' toolbox. So if you're curious about its capability, I encourage to give it a try üòâ&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>debug</category>
      <category>rails</category>
      <category>showdev</category>
    </item>
  </channel>
</rss>
