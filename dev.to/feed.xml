<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Server Management using Ansible Tool</title>
      <author>Daniel Pepuho</author>
      <pubDate>Fri, 12 Nov 2021 03:28:25 +0000</pubDate>
      <link>https://dev.to/danielcristho/server-management-using-ansible-tool-4dl1</link>
      <guid>https://dev.to/danielcristho/server-management-using-ansible-tool-4dl1</guid>
      <description>&lt;p&gt;Server management using Ansible tool&lt;/p&gt;

&lt;h1&gt; What is Ansible? &lt;/h1&gt;

&lt;p&gt;Ansible is an open source tool that is most used by a SysAdmin in the process of automating.&lt;/p&gt;

&lt;h1&gt; Why you should use Ansible? &lt;/h1&gt;

&lt;p&gt;Ansible is a powerful tool that you can use in the &lt;strong&gt;process of server management, configuration task, and other tasks&lt;/strong&gt;. So when you use Ansible, many process such as &lt;strong&gt;configuration or deployment an application in server will be simple and quickly&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt; Let's start!!&lt;/h3&gt;

&lt;h4&gt; install &lt;/h4&gt;

&lt;p&gt;Linux:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo apt install software-properties-common
$ sudo add-apt-repository --yes --update  ppa:ansible/ansible
$ sudo apt install ansible
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;coming soon&lt;/p&gt;

</description>
      <category>linux</category>
      <category>ansible</category>
      <category>devops</category>
    </item>
    <item>
      <title>100 días de código: 9, repaso de comandos y git</title>
      <author>Daro</author>
      <pubDate>Fri, 12 Nov 2021 01:15:15 +0000</pubDate>
      <link>https://dev.to/darito/100-dias-de-codigo-9-repaso-de-comandos-y-git-3h6d</link>
      <guid>https://dev.to/darito/100-dias-de-codigo-9-repaso-de-comandos-y-git-3h6d</guid>
      <description>&lt;p&gt;¡Hey hey hey!&lt;/p&gt;

&lt;p&gt;Hoy es un nuevo día y con ello comienzan nuevos retos, esta vez realizare esto rápido ya que a pesar de que avance bastante en mis proyectos no me di cuenta del tiempo que paso. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ayer"&gt;
  &lt;/a&gt;
  Ayer:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Avance un poco en la guia &lt;a href="https://www.theodinproject.com/"&gt;The odin Project&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Instale linux Ubuntu y configure varias particiones necesarias para el curso mencionado arriba.&lt;/li&gt;
&lt;li&gt;Aprendí sobre la diferencia de particiones GPT y MBR asi como que son Bios y UEFI.&lt;/li&gt;
&lt;li&gt;Domine la herramienta rufus (algo mas para añadir al curriculum).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#hoy"&gt;
  &lt;/a&gt;
  Hoy:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Avance hasta la sección de Fundamentos de HTML en &lt;a href="https://www.theodinproject.com/"&gt;The odin Project&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Aprendí a agregar una clave ssh a mi cuenta de github.&lt;/li&gt;
&lt;li&gt;Realice una instalación y configuracion de git en linux.&lt;/li&gt;
&lt;li&gt;Cree un proyecto de ejemplo en github y realice cambios.&lt;/li&gt;
&lt;li&gt;Aprendí que la mejor forma de hacer una explicación de los cambios en una confirmación (commit) es escribirlo de forma imperativa.&lt;/li&gt;
&lt;li&gt;Volví a aprender los comandos basicos de linux como &lt;code&gt;pwd&lt;/code&gt;, &lt;code&gt;touch&lt;/code&gt;, &lt;code&gt;cat&lt;/code&gt;, &lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;cd&lt;/code&gt; entre otros.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Y eso es todo por hoy.&lt;br&gt;
Espero que les vaya super bien y que tengan éxito con sus proyectos. &lt;br&gt;
Chao mundo!&lt;/p&gt;

</description>
      <category>spanish</category>
      <category>100daysofcode</category>
      <category>git</category>
      <category>linux</category>
    </item>
    <item>
      <title>Day 6 of #100daysofcode: Styling and styling</title>
      <author>Ryan Whelchel</author>
      <pubDate>Fri, 12 Nov 2021 00:51:45 +0000</pubDate>
      <link>https://dev.to/rydwhelchel/day-6-of-100daysofcode-styling-and-styling-64i</link>
      <guid>https://dev.to/rydwhelchel/day-6-of-100daysofcode-styling-and-styling-64i</guid>
      <description>&lt;p&gt;Nothing exciting today. I did not have much time to really work today between meetings, tutoring and assignments. There will be better updates in a few days. I plan on starting my &lt;a href="https://dev.to/rydwhelchel/discussion-on-learning-memorization-reviewing-and-an-app-to-tie-it-all-together-1e3g"&gt;real project&lt;/a&gt; in around a week, so the restructuring and styling of the song app will be finished by then.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;As I said yesterday, I decided to walk through a video tutorial on grid and it helped much more than trying to fumble around with cheatsheet. With front-end development, I'm finding more and more that I need to see things getting created with React and CSS to really understand it. With other concepts, it's easier to apply book knowledge. Going forward I think I will spend more time on videos and viewing other's projects and less on trying to learn via APIs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tomorrow"&gt;
  &lt;/a&gt;
  Tomorrow
&lt;/h2&gt;

&lt;p&gt;Tomorrow I will start the &lt;em&gt;finishing&lt;/em&gt; process of restructuring my song app. I'll review the styling specs of the assignment and start fitting what I've learned into it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-im-struggling-on"&gt;
  &lt;/a&gt;
  What I'm Struggling on
&lt;/h2&gt;

&lt;p&gt;I talked about it yesterday as well, but I really feel that front-end design (or even design in general) is a weakness of mine. Given that personal projects tend to be full-stack, I think it is great that I'm tackling it now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=RhUuMl3R1PE"&gt;CSS Grid Tutorial - Dev Dreamer&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>react</category>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Async/await inside loops in JavaScript</title>
      <author>Shadid Haque</author>
      <pubDate>Fri, 12 Nov 2021 00:47:03 +0000</pubDate>
      <link>https://dev.to/shadid12/asyncawait-inside-loops-in-javascript-1kfo</link>
      <guid>https://dev.to/shadid12/asyncawait-inside-loops-in-javascript-1kfo</guid>
      <description>&lt;p&gt;This is a video tutorial based on my earlier post in Dev.to. You can find written tutorial in the link below. Enjoy the video and let me know if you have any feedback.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/_OhjzMzyMiI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Written tutorial &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/shadid12" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VgM3ZmaS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--YRXTO7Pl--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/200458/efccb0e4-6c4d-4dd3-ba13-12e7a7302c5a.jpg" alt="shadid12"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/shadid12/how-to-use-async-await-inside-loops-in-javascript-4dlg" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to use async/await inside loops in JavaScript&lt;/h2&gt;
      &lt;h3&gt;Shadid Haque ・ Oct 2 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Research study: How C# developers adopt new language features?</title>
      <author>volodymyr-havryliuk</author>
      <pubDate>Fri, 12 Nov 2021 00:30:31 +0000</pubDate>
      <link>https://dev.to/volodymyrhavryliuk/research-study-how-c-developers-adopt-new-language-features-2onl</link>
      <guid>https://dev.to/volodymyrhavryliuk/research-study-how-c-developers-adopt-new-language-features-2onl</guid>
      <description>&lt;p&gt;Are you a C# programmer? Do you improve the way you code? Regardless if you feel comfortable with trying new things or you rather prefer to work what you already know and have mastered, it is you we are lookng for!&lt;/p&gt;

&lt;p&gt;C# is one of the fastest developing mainstream programming languages. Its new revisions deliver new features that help programmers in writing more concise and more expressive code. However, we see that not all new features are used in the same way. We want to understand how these features are adopted by developers in practice, what are the drivers that motivate them to do so, and which personal or professional traits could be associated with it. &lt;/p&gt;

&lt;p&gt;Our research project comprises three steps:&lt;br&gt;
(i) automated analysis of several github repositories, to retrieve instances of the new features and provide quantitative data about their adoption&lt;br&gt;
(ii) survey aimed at C# developers, to understand who they are and  their motivations for adopting new features in their professional activities&lt;br&gt;
(iii) in-depth interviews (30 mins) with some of the survey respondents, to discuss some specific apsects of their decisions&lt;/p&gt;

&lt;p&gt;We invite you to fill the survey; if you would like to participate in the interview, please leave your email address in the survey form.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://forms.gle/Tw4dbNWDQSqodTfN9"&gt;https://forms.gle/Tw4dbNWDQSqodTfN9&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Many thanks in advance for your help and contribution!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>P-PL.com - Python Multiple Choice Quiz: Just how Well Do YOU Know Python?</title>
      <author>Lambda Technology Inc</author>
      <pubDate>Thu, 11 Nov 2021 22:43:16 +0000</pubDate>
      <link>https://dev.to/tgrimes/p-plcom-python-multiple-choice-quiz-just-how-well-do-you-know-python-1ph1</link>
      <guid>https://dev.to/tgrimes/p-plcom-python-multiple-choice-quiz-just-how-well-do-you-know-python-1ph1</guid>
      <description>&lt;p&gt;P-PL is a place where teachers and students, experts and beginners, freelancers and customers can come together to collaborate on software development.&lt;/p&gt;

&lt;p&gt;Currently, were are seeking experts in the languages of Python and JavaScript.&lt;/p&gt;

&lt;p&gt;Just how well do YOU know Python? Take our little 5 question quiz to find out… &lt;a href="https://bit.ly/31J77X4"&gt;https://bit.ly/31J77X4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At its core, p-pl.com is a network of experts willing to connect over video chat.&lt;/p&gt;

&lt;p&gt;As a user, you have access to video chat anyone at anytime given their schedule and expertise you are looking for.&lt;/p&gt;

&lt;p&gt;Whether you are a software engineer looking for help on a bug or a life coach advising clients on their next big move, p-pl.com is the solution for convenient quality information.&lt;/p&gt;

&lt;p&gt;As an expert and consultant, you have the option to bill for your time and expertise for every call you accept. It is YOUR time, why not get paid?&lt;/p&gt;

</description>
      <category>python</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Adding dark mode to the personal website template</title>
      <author>Simon MacDonald</author>
      <pubDate>Thu, 11 Nov 2021 22:30:35 +0000</pubDate>
      <link>https://dev.to/begin/adding-dark-mode-to-the-personal-website-template-3848</link>
      <guid>https://dev.to/begin/adding-dark-mode-to-the-personal-website-template-3848</guid>
      <description>&lt;p&gt;Dark Mode is a popular feature of many websites. It helps to reduce eye strain by adjusting the brightness of the screen according to current lighting conditions.&lt;/p&gt;

&lt;p&gt;In this post, we will progressively enhance our personal website template to add dark mode functionality. If you don't already have a website deployed via &lt;a href="https://begin.com"&gt;Begin&lt;/a&gt; follow our &lt;a href="https://docs.begin.com/en/guides/personal-website"&gt;personal website tutorial&lt;/a&gt; to deploy the template in 5 minutes, then come back here and get ready to enhance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N0oLYSe8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/srb3ja7ll938amw0ttie.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N0oLYSe8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/srb3ja7ll938amw0ttie.png" alt="Enhance" width="580" height="326"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#detecting-dark-mode-using-media-query"&gt;
  &lt;/a&gt;
  Detecting dark mode using media query
&lt;/h2&gt;

&lt;p&gt;Luckily CSS has a &lt;code&gt;prefers-color-scheme&lt;/code&gt; media query that can detect user’s system color scheme preferences without using JavaScript. The property can have a return value of light, dark or, no preference.&lt;/p&gt;

&lt;p&gt;Let's add some CSS to adjust the background and text colors to match the user’s preference. Open up the &lt;code&gt;src/views/styles.js&lt;/code&gt; file and add the following code above the body selector.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* src/views/styles.js */&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prefers&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;scheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;light&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;FFFFFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prefers&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;scheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run &lt;code&gt;npm start&lt;/code&gt; from your command line and visit &lt;code&gt;https://localhost:3333&lt;/code&gt; in your browser. The background color will change to match the preferred color scheme. To test light and dark modes without modifying system preferences, you can use the &lt;em&gt;emulate CSS media feature&lt;/em&gt; in popular browsers like &lt;a href="https://developer.chrome.com/blog/new-in-devtools-79/"&gt;Chrome&lt;/a&gt; or &lt;a href="https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Examine_and_edit_CSS#view_media_rules_for_prefers-color-scheme"&gt;Firefox&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d5dIIbsc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2zs2vcoxahfk494aq9z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d5dIIbsc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v2zs2vcoxahfk494aq9z.png" alt="Light and Dark Modes" width="880" height="355"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#allowing-users-to-toggle-dark-mode"&gt;
  &lt;/a&gt;
  Allowing users to toggle dark mode
&lt;/h2&gt;

&lt;p&gt;The above solution is satisfactory if all we want to do is swap modes based on the OS preference, but we want to allow users to select which mode the site will use. To add this interactivity, we will need to modify the CSS we just added to remove the media query and instead key off of the &lt;code&gt;data-theme&lt;/code&gt; attribute of the HTML tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* src/views/styles.js */&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;FFFFFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;background&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to add interactivity we'll add new component called &lt;code&gt;toggle-button.js&lt;/code&gt; in &lt;code&gt;src/views&lt;/code&gt; to represent the toggle button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/views/toggle-button.js&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ToggleButton&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`
&amp;lt;button
  class="
    display-inline-flex
    align-items-center
    padding-top-16
    padding-right-32
    padding-bottom-16
    padding-left-32
    margin-right-18
    margin-bottom-16
    font-size-18
    font-weight-300
    text-decoration-none
    color-FFFFFF
    border-radius-pill
    background-color-045C9C
    background-color-hover-058AEA
    transition-background-color
  "
  id="toggle-button"
&amp;gt;

  Toggle Light/Dark mode!
&amp;lt;/button&amp;gt;
  `&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll add the toggle button to our layout by modifying the &lt;code&gt;src/views/content.js&lt;/code&gt; file. First require the toggle button component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/views/content.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ToggleButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./toggle-button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add the toggle button to the layout. For the example, I've added it between the &lt;code&gt;MailLink&lt;/code&gt; and &lt;code&gt;SocialMedia&lt;/code&gt; components around line 81 to have it front and center for this demo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/views/content.js&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;MailLink&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;email&lt;/span&gt;
&lt;span class="p"&gt;})}&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;ToggleButton&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;SocialMedia&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;twitter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;linkedin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;instagram&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;facebook&lt;/span&gt;
&lt;span class="p"&gt;})}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we'll need to add some client side JavaScript to handle the toggling of light and dark modes. So, we'll need to create a new file in &lt;code&gt;public&lt;/code&gt; called &lt;code&gt;index.js&lt;/code&gt; with the contents below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// public/index.js&lt;/span&gt;
&lt;span class="cm"&gt;/* eslint-env browser */&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;themeButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;toggle-button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentTheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(prefers-color-scheme: dark)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data-theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentTheme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;themeButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onclick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;toggleTheme&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentTheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data-theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;targetTheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;currentTheme&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data-theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;targetTheme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;targetTheme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's explain what's going on in the code above.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We're using the &lt;code&gt;document.getElementById&lt;/code&gt; method to get a reference to the toggle button.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;localStorage.getItem&lt;/code&gt; method is used to get the current theme from the local storage. If there is no theme in the local storage, we’ll set the current theme to &lt;code&gt;light&lt;/code&gt; or &lt;code&gt;dark&lt;/code&gt;, depending on the user’s preference.&lt;/li&gt;
&lt;li&gt;Then we'll set the &lt;code&gt;data-theme&lt;/code&gt; attribute of the HTML tag to the current theme using the &lt;code&gt;document.documentElement.setAttribute&lt;/code&gt; method.&lt;/li&gt;
&lt;li&gt;Finally, we register an event handler for our toggle button which will toggle the theme when clicked and update local storage.&lt;/li&gt;
&lt;li&gt;All of this is wrapped in an &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/IIFE"&gt;Immediately Invoked Function Expression (IIFE)&lt;/a&gt; to prevent a flash of color when the page loads with the incorrect theme.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then we need to load our new JS file when the page loads. We can do this by adding the following code to the &lt;code&gt;src/views/main.js&lt;/code&gt; file. First, require the &lt;code&gt;@architect/functions&lt;/code&gt; module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/views/main.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@architect/functions&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Second, add a script tag just above the body tag. We'll use &lt;code&gt;arc.static&lt;/code&gt; method to get the correct path to the &lt;code&gt;public&lt;/code&gt; directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/views/main.js&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;${arc.static('index.js', {stagePath: false})}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;module&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;crossorigin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can reload the page and the toggle button will be active.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N5XjZeUi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.begin.com/_static/post-assets/toggle-light-dark-0bc1d9f85c.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N5XjZeUi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.begin.com/_static/post-assets/toggle-light-dark-0bc1d9f85c.webp" alt="Toggle Light and Dark Modes" width="880" height="707"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h2&gt;

&lt;p&gt;I'm sure you noticed that we only changed the site's background color when we toggle between light and dark mode. The next step would be to extract all of the colors used on the site into CSS variables. Then when we toggle between color modes, the entire site updates accordingly. We'll leave that up to you to figure out, but if you want a hint, check out what we did over on the &lt;a href="https://github.com/architect/arc.codes/commit/92fc9687ea28f602df2210ed106b3982f8482a3f"&gt;arc.codes website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to pull down a working example of the above code, you can check out the &lt;a href="https://github.com/macdonst/simons-personal-website/tree/dark"&gt;dark branch&lt;/a&gt; of this &lt;a href="https://github.com/macdonst/simons-personal-website"&gt;repository&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Favor values over variables</title>
      <author>Ayron Wohletz</author>
      <pubDate>Thu, 11 Nov 2021 22:26:41 +0000</pubDate>
      <link>https://dev.to/awohletz/favor-values-over-variables-4m74</link>
      <guid>https://dev.to/awohletz/favor-values-over-variables-4m74</guid>
      <description>&lt;p&gt;Favoring values over variables makes code easier to read, write, and maintain. &lt;/p&gt;

&lt;p&gt;A variable is a container for a value. Over time, you put new values in the container, overwriting the old. For example in TypeScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;importance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getRankedIncompleteTodos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;allTodos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;pinnedTodos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt; &lt;span class="c1"&gt;// 1. result = Empty array&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;allTodos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// 2. result = An array of incomplete todos&lt;/span&gt;

    &lt;span class="c1"&gt;// sort by importance&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;importance&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;importance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;importance&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;importance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="c1"&gt;// 3. result = A sorted array of incomplete todos&lt;/span&gt;

    &lt;span class="c1"&gt;// pinned TODOs always at top&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;pinnedTodos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unshift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// 4. result = An array of pinned todos followed by sorted incomplete todos&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here &lt;code&gt;result&lt;/code&gt; contains different values at different points in time. The sequence of values goes like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Empty array&lt;/li&gt;
&lt;li&gt;An array of incomplete todos&lt;/li&gt;
&lt;li&gt;A sorted array of incomplete todos&lt;/li&gt;
&lt;li&gt;An array of pinned todos followed by sorted incomplete todos&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For this sequence of values we have given a single label, &lt;code&gt;result&lt;/code&gt;. To understand what &lt;code&gt;result&lt;/code&gt; contains at a line of code, we have to trace through the code up to that point. In other words, we have to include the dimension of &lt;em&gt;time&lt;/em&gt; in our understanding. &lt;/p&gt;

&lt;p&gt;A variable acts like a sequence of values through time. That sequence can get complex and hard to predict, modulated by conditionals, loops, side effects, and other nested contexts.&lt;/p&gt;

&lt;p&gt;Here's the code refactored to favor values over variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;orderBy&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lodash&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getRankedIncompleteTodos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;allTodos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;pinnedTodos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;incompleteMatchingTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;allTodos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sortedTodos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;orderBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;incompleteMatchingTodos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;importance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;desc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;pinnedTodos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;sortedTodos&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this code, I've given intermediate values their own descriptive labels. Each label stands for a single value and doesn't change. So to understand what &lt;code&gt;incompleteMatchingTodos&lt;/code&gt; or &lt;code&gt;sortedTodos&lt;/code&gt; contains at a line, we need only look at their declarations. We don't need to take time into account. It reduces cognitive burden. &lt;/p&gt;

&lt;p&gt;Which would you rather read, write, and maintain? Take some code written with variables and convert it to values. See the difference for yourself. Then multiply the difference over a whole codebase. &lt;/p&gt;

&lt;p&gt;This rule of thumb applies across many (imperative) programming languages. And some languages have ways of (partially) enforcing it. In JavaScript we would say "favor const over let." In Java, "use &lt;code&gt;final&lt;/code&gt; for local variables and parameters". In functional languages, immutability is enforced by default 😎. &lt;/p&gt;

&lt;p&gt;As usual, a rule of thumb has exceptions. In my experience, the majority of code in mainstream, high-level languages benefits from favoring values over variables. But I don't argue for trying to shoehorn it. Sometimes performance-sensitive/low-level/library code fits variables better, or if you're writing some unusual imperative algorithm. Most of the time though, especially in web apps and CRUD, we're just taking some data, map/filter/reducing it in some way, and shuffling it on to the next step. &lt;/p&gt;

</description>
      <category>programming</category>
      <category>codequality</category>
      <category>productivity</category>
      <category>functional</category>
    </item>
    <item>
      <title>Svelthursday: SVGs</title>
      <author>a Mediocre Dev</author>
      <pubDate>Thu, 11 Nov 2021 22:26:12 +0000</pubDate>
      <link>https://dev.to/amediocredev/svelthursday-svgs-2k50</link>
      <guid>https://dev.to/amediocredev/svelthursday-svgs-2k50</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-this"&gt;
  &lt;/a&gt;
  What is this?
&lt;/h2&gt;

&lt;p&gt;Having recently fallen in love with Svelte, I have dove into it on the deep end. And let me tell you, it is awesome! With these short posts, I aim to explore some of the less covered topics that I encounter as I write stuff in Svelte.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Example repository can be found &lt;a href="https://github.com/aMediocreDad/svelthursdays/tree/main/svg-1"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Alright, it's time to dig in... Thirty seconds, go!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#svg-components"&gt;
  &lt;/a&gt;
  SVG Components
&lt;/h2&gt;

&lt;p&gt;Rich Harris, the creator of Svelte, &lt;del&gt;is&lt;/del&gt; &lt;a href="https://twitter.com/Rich_Harris/status/1458822051263823875"&gt;was a graphics editor&lt;/a&gt; at the New York Times, and so you'd be excused for thinking that Svelte would make SVGs easy. The truth is, that's not always the case (as is true for other libraries and frameworks). However, Svelte does provide some powerful tools for working with SVGs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-basics"&gt;
  &lt;/a&gt;
  The Basics
&lt;/h2&gt;

&lt;p&gt;A common usecase is to import svgs from a static file wrapped in an &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; tag, using the &lt;code&gt;&amp;lt;use&amp;gt;&lt;/code&gt; tag with the &lt;code&gt;href="/some-svg.svg"&lt;/code&gt;-attribute. This does not work with Svelte, at least not as it is. This would require a few extra steps involving a &lt;code&gt;&amp;lt;symbol&amp;gt;&lt;/code&gt; tag and an &lt;code&gt;id&lt;/code&gt; attribute in the original SVG, and ultimately it is not a very flexible.&lt;/p&gt;

&lt;p&gt;Importing the SVG-file in the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag is also a common way to attempt to do this, but this solution also requires some extra steps.&lt;/p&gt;

&lt;p&gt;In fact Googling this issue will yield a number of solutions. One solution, however, I would propose is superior to the others (and it is an easy one to implement).&lt;/p&gt;

&lt;p&gt;Simply renaming your SVG file from a &lt;code&gt;.svg&lt;/code&gt; to a &lt;code&gt;.svelte&lt;/code&gt; and importing it as a component is pretty much all you need to do. I have to admit I balked at this solution at first as I prefer to keep my SVGs as &lt;code&gt;.svg&lt;/code&gt; files. Yet, this opens a world of possibilities, most notably enabling dynamic SVGs.&lt;/p&gt;

&lt;p&gt;Let's start with a simple example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- line-chart.svelte --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt;
    &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;"1.2"&lt;/span&gt;
    &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt;
    &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"100%"&lt;/span&gt;
    &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"100%"&lt;/span&gt;
    &lt;span class="na"&gt;viewbox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 1000 1000"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M1 0v300"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid x-grid"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"#111"&lt;/span&gt; &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M1 299h600"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid y-grid"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"#111"&lt;/span&gt; &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;g&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"black"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;line&lt;/span&gt; &lt;span class="na"&gt;x1=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;"170"&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;"190"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;line&lt;/span&gt; &lt;span class="na"&gt;x1=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;"190"&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"200"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;"120"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;line&lt;/span&gt; &lt;span class="na"&gt;x1=&lt;/span&gt;&lt;span class="s"&gt;"200"&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;"120"&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"300"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;"180"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;line&lt;/span&gt; &lt;span class="na"&gt;x1=&lt;/span&gt;&lt;span class="s"&gt;"300"&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;"180"&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"400"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;"200"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;line&lt;/span&gt; &lt;span class="na"&gt;x1=&lt;/span&gt;&lt;span class="s"&gt;"400"&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;"200"&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"500"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/g&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This produces a rather crude line chart like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IFQO_bN8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1tkr8oncln14t1t9wk3q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IFQO_bN8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1tkr8oncln14t1t9wk3q.png" alt="Line Chart Example" width="880" height="445"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And we import it simply as a component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- index.svelte --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;LineChart&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path/to/line-chart.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;LineChart&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Easy!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-have-the-power"&gt;
  &lt;/a&gt;
  I Have the Power!
&lt;/h2&gt;

&lt;p&gt;You might be seeing where this is going. Since the SVG is now a Svelte component, this means we can treat it like any other svelte component and it will still produce an actual SVG.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Taking programmatically generating SVGs to the next level!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;How about:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- line-chart.svelte --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt;
    &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;"1.2"&lt;/span&gt;
    &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt;
    &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"100%"&lt;/span&gt;
    &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"100%"&lt;/span&gt;
    &lt;span class="na"&gt;viewbox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 1000 1000"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;g&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"labels"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;text&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;"50"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"320"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;2008&lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;text&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;"150"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"320"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;2009&lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;text&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;"250"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"320"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;2010&lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;text&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;"350"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"320"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;2011&lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;text&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;"450"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"320"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;2012&lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;text&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;"250"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"340"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Year&lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/g&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;g&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"labels y-labels"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;text&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;"40"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"10"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;300'&lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;text&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;"40"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;200'&lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;text&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;"40"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"200"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;100'&lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;text&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;"40"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"300"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;text&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;"20"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"150"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"y-label-title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Price&lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/g&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M50 0v300"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M50 299h500"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;g&lt;/span&gt; &lt;span class="na"&gt;stroke-dasharray=&lt;/span&gt;&lt;span class="s"&gt;"0 4 0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;line&lt;/span&gt; &lt;span class="na"&gt;x1=&lt;/span&gt;&lt;span class="s"&gt;"50"&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;"170"&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"150"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;"190"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;line&lt;/span&gt; &lt;span class="na"&gt;x1=&lt;/span&gt;&lt;span class="s"&gt;"150"&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;"190"&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"250"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;"120"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;line&lt;/span&gt; &lt;span class="na"&gt;x1=&lt;/span&gt;&lt;span class="s"&gt;"250"&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;"120"&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"350"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;"180"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;line&lt;/span&gt; &lt;span class="na"&gt;x1=&lt;/span&gt;&lt;span class="s"&gt;"350"&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;"180"&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"450"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;"200"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;line&lt;/span&gt; &lt;span class="na"&gt;x1=&lt;/span&gt;&lt;span class="s"&gt;"450"&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;"200"&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"550"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/g&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="py"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#111&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nt"&gt;line&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="py"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.labels&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="py"&gt;text-anchor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nc"&gt;.y-labels&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="py"&gt;text-anchor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.y-label-title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="py"&gt;text-anchor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;90deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2%&lt;/span&gt; &lt;span class="m"&gt;14%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now our SVG looks more like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zjgqiBOi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/96b6dymkaqf46nwdluzd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zjgqiBOi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/96b6dymkaqf46nwdluzd.png" alt="Line Chart Example 2" width="880" height="555"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-driven-svgs"&gt;
  &lt;/a&gt;
  Data Driven SVGs
&lt;/h2&gt;

&lt;p&gt;Taking the previous example, let's look at how we can dynamically generate the SVG. This is where the magic happens. What if we want to dynamically generate the y-axis data of each data point based on actual data passed into the component? Let's say we have a dataset of prices for each year. We can then use this data to dynamically generate the y-axis data like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- line-chart.svelte --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;prices_by_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;y2008&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;170&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;y2009&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;y2010&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;160&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;y2011&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;y2012&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;130&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;y2013&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y2008&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y2009&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y2010&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y2011&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y2012&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y2013&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;$&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;y2008&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y2009&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y2010&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y2011&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y2012&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y2013&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;prices_by_date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt;
    &lt;span class="na"&gt;version=&lt;/span&gt;&lt;span class="s"&gt;"1.2"&lt;/span&gt;
    &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt;
    &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"100%"&lt;/span&gt;
    &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"100%"&lt;/span&gt;
    &lt;span class="na"&gt;viewbox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 1000 1000"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;g&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"labels"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;text&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;"50"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"320"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;2008&lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;text&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;"150"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"320"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;2009&lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;text&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;"250"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"320"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;2010&lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;text&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;"350"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"320"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;2011&lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;text&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;"450"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"320"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;2012&lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;text&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;"250"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"340"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Year&lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/g&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;g&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"labels y-labels"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;text&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;"40"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"10"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;300'&lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;text&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;"40"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;200'&lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;text&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;"40"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"200"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;100'&lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;text&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;"40"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"300"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;text&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;"20"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"150"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"y-label-title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Price&lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/g&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M50 0v300"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M50 299h500"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;g&lt;/span&gt; &lt;span class="na"&gt;stroke-dasharray=&lt;/span&gt;&lt;span class="s"&gt;"0 4 0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;line&lt;/span&gt; &lt;span class="na"&gt;x1=&lt;/span&gt;&lt;span class="s"&gt;"50"&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;{300&lt;/span&gt; &lt;span class="na"&gt;-&lt;/span&gt; &lt;span class="na"&gt;y2008&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"150"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;{300&lt;/span&gt; &lt;span class="na"&gt;-&lt;/span&gt; &lt;span class="na"&gt;y2009&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;line&lt;/span&gt; &lt;span class="na"&gt;x1=&lt;/span&gt;&lt;span class="s"&gt;"150"&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;{300&lt;/span&gt; &lt;span class="na"&gt;-&lt;/span&gt; &lt;span class="na"&gt;y2009&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"250"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;{300&lt;/span&gt; &lt;span class="na"&gt;-&lt;/span&gt; &lt;span class="na"&gt;y2010&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;line&lt;/span&gt; &lt;span class="na"&gt;x1=&lt;/span&gt;&lt;span class="s"&gt;"250"&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;{300&lt;/span&gt; &lt;span class="na"&gt;-&lt;/span&gt; &lt;span class="na"&gt;y2010&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"350"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;{300&lt;/span&gt; &lt;span class="na"&gt;-&lt;/span&gt; &lt;span class="na"&gt;y2011&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;line&lt;/span&gt; &lt;span class="na"&gt;x1=&lt;/span&gt;&lt;span class="s"&gt;"350"&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;{300&lt;/span&gt; &lt;span class="na"&gt;-&lt;/span&gt; &lt;span class="na"&gt;y2011&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"450"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;{300&lt;/span&gt; &lt;span class="na"&gt;-&lt;/span&gt; &lt;span class="na"&gt;y2012&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;line&lt;/span&gt; &lt;span class="na"&gt;x1=&lt;/span&gt;&lt;span class="s"&gt;"450"&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;{300&lt;/span&gt; &lt;span class="na"&gt;-&lt;/span&gt; &lt;span class="na"&gt;y2012&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"550"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;{300&lt;/span&gt; &lt;span class="na"&gt;-&lt;/span&gt; &lt;span class="na"&gt;y2013&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/g&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;svg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="py"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#111&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nt"&gt;path&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="py"&gt;stroke&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.labels&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="py"&gt;text-anchor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nc"&gt;.y-labels&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="py"&gt;text-anchor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.y-label-title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="py"&gt;text-anchor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;90deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nl"&gt;transform-origin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2%&lt;/span&gt; &lt;span class="m"&gt;14%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is but one simple example of how we can dynamically generate SVGs. And much is still hardcoded. A recent &lt;a href="https://twitter.com/joshnuss/status/1458443829749637130"&gt;tweet by @joshnuss&lt;/a&gt; displays a much more sophisticated example of this same idea. I recently published &lt;a href="https://github.com/aMediocreDad/svercle"&gt;a component&lt;/a&gt; that builds on the same principles to produce Squircle-type shapes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hope this was a bit insightful. If you have any questions or comments, please let me know!&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus!
&lt;/h3&gt;

&lt;p&gt;Svelte has a curious feature called &lt;code&gt;&amp;lt;svelte:options namespace="svg"&amp;gt;&lt;/code&gt;, and it is not well documented (beyond indicating that you force a namespace).&lt;/p&gt;

&lt;p&gt;What it does and what it is intended for is to force the compiler to use the SVG namespace when generating the component, regardless of what tags you are using in the component. For example should you use a &lt;code&gt;div&lt;/code&gt; in your svg component the compiler will create it using the &lt;code&gt;document.createElementNS&lt;/code&gt; method as opposed to just &lt;code&gt;document.createElement&lt;/code&gt;. This might be helpful in instances where you are using non-standard tags in your SVG, and there are issues with your SVG, or you are seeing unexpected behavior. Beyond that, you do not need to declare this namespace in your component as Sveltes compiler is smart enough to figure out what namespace to use in most instances.&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>inthirtyseconds</category>
    </item>
    <item>
      <title>I spoke at vim conf</title>
      <author>Waylon Walker</author>
      <pubDate>Thu, 11 Nov 2021 21:55:52 +0000</pubDate>
      <link>https://dev.to/waylonwalker/i-spoke-at-vim-conf-25lj</link>
      <guid>https://dev.to/waylonwalker/i-spoke-at-vim-conf-25lj</guid>
      <description>&lt;p&gt;I gave a talk about my workflow at vim conf and how vim works into my workflow as a team lead for an analytics team.  Nerves were high, palms were sweaty, I spoke way too fast, wasn't sure what to do with myself when the talk was done, but overall it was well recieved.  It's now live on youtube, you can see it here.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/E18m4KkJUnI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>vim</category>
      <category>nvim</category>
      <category>bash</category>
    </item>
    <item>
      <title>API Framework, the moving parts</title>
      <author>raisr</author>
      <pubDate>Thu, 11 Nov 2021 21:55:19 +0000</pubDate>
      <link>https://dev.to/raisr/api-framework-the-moving-parts-4p56</link>
      <guid>https://dev.to/raisr/api-framework-the-moving-parts-4p56</guid>
      <description>&lt;p&gt;In my last post "&lt;a href="https://dev.to/raisr/starting-my-api-journey-32an"&gt;Starting my API journey...&lt;/a&gt;" i wrote about my plans to create a framework that eases the development of web APIs.&lt;/p&gt;

&lt;p&gt;In this post i'm going to outline my current ideas about the parts the framework should include and how they relate to each other. &lt;/p&gt;

&lt;p&gt;So what parts should an API framework include? Of course, my ideas are very opinionated. But this are the parts that always made my life as a developer hard.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gateway"&gt;
  &lt;/a&gt;
  Gateway
&lt;/h2&gt;

&lt;p&gt;The gateway acts as a reverse proxy that builds the boundary between the clients and our services. When a client calls an endpoint the gateway redirects the call to an internal service and returns the response. If desired it can provide additional features that so that we don't need to implement them in our services.&lt;/p&gt;

&lt;p&gt;Possible additional features are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Throttling&lt;/li&gt;
&lt;li&gt;Authentication / Authorization (using an identity provider)&lt;/li&gt;
&lt;li&gt;SSL Termination&lt;/li&gt;
&lt;li&gt;Analytics (using a telemetry service) &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In my framework i will use &lt;a href="https://github.com/microsoft/reverse-proxy"&gt;YARP&lt;/a&gt;. Yarp is an open source reverse proxy built by microsoft. You can read a short summary about YARP in the &lt;a href="https://devblogs.microsoft.com/dotnet/announcing-yarp-1-0-release/"&gt;announcement post&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#logging-telemetry"&gt;
  &lt;/a&gt;
  Logging / Telemetry
&lt;/h2&gt;

&lt;p&gt;Logging, telemetry and analytics are an important part for every API. Identifying problems and bottlenecks early is important to keep our customers happy and the system healthy. The telemetry service should handle task like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Storing and analyzing logs / errors&lt;/li&gt;
&lt;li&gt;Provide usage statistics, execution times, etc. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the logging part i will use &lt;a href="https://serilog.net/"&gt;serilog&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#identity-provider"&gt;
  &lt;/a&gt;
  Identity Provider
&lt;/h2&gt;

&lt;p&gt;The most APIs need some kind of authentication / authorization. Unfortunately this is one of the hardest parts. There are a lot of libraries / frameworks out there to do this. But either they are not able to handle multi tenancy or they are very complex. And mostly you need to have more security know how than you want. I want to provide a security solution that is easy to use and provides a lot of features. I think this will be the hardest part in my framework. &lt;/p&gt;

&lt;p&gt;I want this part to provide the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OAuth2 / OpenID Connect workflows&lt;/li&gt;
&lt;li&gt;API Key Authentication&lt;/li&gt;
&lt;li&gt;Session based authentication (so that we can use it for simple websites)&lt;/li&gt;
&lt;li&gt;Multi tenancy support (one user can have different credentials for different APIs)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The biggest problem here is that there is no real open source solution that could provide this features. Microsoft does not provide something good. There is ASP.Net Identity with no support for OAuth and multi tenancy. So i guess i will go for &lt;a href="https://duendesoftware.com/products/identityserver"&gt;Duende Identity Server&lt;/a&gt;. It's not really free, but open source projects und small companies will not have to pay for it. It is really sad that there is no really open source alternative in the .Net world like &lt;a href="https://www.keycloak.org/"&gt;Keycloak&lt;/a&gt; in the java world. If you know an alternative just leave me a comment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#task-scheduling"&gt;
  &lt;/a&gt;
  Task Scheduling
&lt;/h2&gt;

&lt;p&gt;Task scheduling isn't really a crucial part of an API framework but it can make your life very convenient. Often you need to run tasks on a regular basis. Then you start creating shell scripts, batch files, etc. that you trigger by the windows task scheduler or linux cron jobs. It is far more convenient to trigger an API endpoint on a schedule. &lt;/p&gt;

&lt;p&gt;For this part i will use &lt;a href="https://www.hangfire.io/"&gt;hangfire&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuration"&gt;
  &lt;/a&gt;
  Configuration
&lt;/h2&gt;

&lt;p&gt;We have to deal with a lot of configuration settings in our projects. Usually we store stuff in the configuration files of our APIs (web.config, appsettings.json, etc.) or in some database tables. Using config files has the disadvantage of redeploying our services when settings change. Storing the stuff in the database of our services clutters everything. The goal is to provide a central configuration system that you can use. Currently i have no idea which library i can use. Maybe you have some ideas. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#common-ui"&gt;
  &lt;/a&gt;
  Common UI
&lt;/h2&gt;

&lt;p&gt;All the features are very nice. But we want to view logs and telemetry data. We want to configure the gateway, identity provider and all the other parts. Of course we can do this by editing database tables or config files by hand. Ok, no! There should be a UI where we can do all this stuff. For this i want to create a Blazor SPA that provides a UI to do all this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-stop"&gt;
  &lt;/a&gt;
  Next stop
&lt;/h2&gt;

&lt;p&gt;So whats next? Until now i didn't talk about naming. One of the hardest parts in software development :). I will think about some name and then create an initial github or gitlab repo. &lt;/p&gt;

&lt;p&gt;After that the first thing i will implement will be a simple gateway and telemetry (logging first) solution.&lt;/p&gt;




&lt;p&gt;&lt;sup&gt;Photo by &lt;a href="https://www.flickr.com/photos/thomashawk/"&gt;Thomas Hawk&lt;/a&gt;. License &lt;a href="https://creativecommons.org/licenses/by-nc/2.0/"&gt;CC BY-NC 2.0&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>webapi</category>
      <category>microservices</category>
      <category>csharp</category>
    </item>
    <item>
      <title>How to Improve Code Quality on a Ruby on Rails Application</title>
      <author>Stefanni Brasil</author>
      <pubDate>Thu, 11 Nov 2021 21:45:59 +0000</pubDate>
      <link>https://dev.to/hexdevs/how-to-improve-code-quality-on-a-ruby-on-rails-application-2on</link>
      <guid>https://dev.to/hexdevs/how-to-improve-code-quality-on-a-ruby-on-rails-application-2on</guid>
      <description>&lt;p&gt;Does it take forever to ship even small features on the codebase you're working on? Is the code hard to understand and maintain? &lt;br&gt;
Are projects always running over budget? Are you constantly sacrificing code quality and not paying down technical debt?&lt;/p&gt;

&lt;p&gt;When you change one feature, does another completely unrelated part of your app stop working? New bugs appear, even though tests never break? 🥵&lt;/p&gt;

&lt;p&gt;Those are signs that you are suffering from working on a codebase with low code quality.&lt;/p&gt;

&lt;p&gt;How can you get out of this mess? Is it possible to avoid getting into this situation in the first place? Yes, it is!&lt;/p&gt;

&lt;p&gt;By the end of this post, you'll know exactly:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to improve Code Quality on a Ruby on Rails application&lt;/li&gt;
&lt;li&gt;Which Code Quality tools to use&lt;/li&gt;
&lt;li&gt;How to use the &lt;a href="#rails-code-quality-checklist"&gt;Ruby Code Quality Checklist&lt;/a&gt; to get out of the tar pit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This post is based on a talk from Ernesto Tagwerker's talk entitled &lt;a href="https://www.youtube.com/watch?v=ZyU6K6eR-_A"&gt;Escaping The Tar Pit&lt;/a&gt; at RubyConf 2019. Ernesto is the Founder &amp;amp; CTO at &lt;a href="https://www.fastruby.io/"&gt;FastRuby.io&lt;/a&gt; &amp;amp; &lt;a href="https://www.ombulabs.com/"&gt;Ombu Labs&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-code-quality"&gt;
  &lt;/a&gt;
  What is Code Quality?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;"Software Code Quality means it works as expected AND it isn't a PITA to maintain it" -- Ernesto Tagwerker&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The simplest way to know if your codebase has enough Code Quality is if your team can easily add or change features without breaking &lt;br&gt;
unrelated features.&lt;/p&gt;

&lt;p&gt;And when the features do break, the test suite easily detects the problem before you even push the code to production.&lt;/p&gt;

&lt;p&gt;In summary, a quality codebase is &lt;strong&gt;easy to read, change, and maintain&lt;/strong&gt;. It also has good code coverage, and the test suite helps you improve and refactor the code, or change features with confidence.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-improve-code-quality-on-a-ruby-on-rails-application"&gt;
  &lt;/a&gt;
  How To Improve Code Quality on a Ruby on Rails application
&lt;/h2&gt;

&lt;p&gt;There are four steps you need to follow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#how-to-measure-code-quality-on-a-ruby-on-rails-application"&gt;Measure and Assess Code Quality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-calculate-code-coverage-with-simplecov"&gt;Measure Code Coverage with SimpleCov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-measure-code-quality-with-rubycritic"&gt;Calculate Churn and Complexity with RubyCritic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-find-code-smells-and-calculate-stink-score-with-skunk"&gt;Use Skunk to identify which files need urgent care&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-measure-code-quality-on-a-ruby-on-rails-application"&gt;
  &lt;/a&gt;
  How to Measure Code Quality on a Ruby on Rails Application
&lt;/h2&gt;

&lt;p&gt;You don't necessarily need a tool to assess Code Quality, and there is no silver bullet. You'll always need to evaluate what the data means. The tools help guide you so you can make the best decisions by yourself 💫&lt;/p&gt;

&lt;p&gt;Below are some tools and services to quickly assess code quality. You can use paid services such as CodeClimate, Codacy, and CodeScene to give you some measurements and reports.&lt;/p&gt;

&lt;p&gt;Or, use open sources tools to help you perform static code analysis, calculate code coverage and point out code smells and refactoring opportunities.&lt;/p&gt;

&lt;p&gt;Here's a list of tools you can use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://ruby-doc.org/stdlib-3.0.2/libdoc/coverage/rdoc/Coverage.html"&gt;Coverage&lt;/a&gt;: Ruby's built-in tool that provides coverage measurements for Ruby.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/simplecov-ruby/simplecov"&gt;SimpleCov&lt;/a&gt;: a code coverage analysis tool for Ruby.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/whitesmith/rubycritic"&gt;RubyCritic&lt;/a&gt;: a gem that wraps around static analysis gems such as Reek, Flay, and Flog to provide a quality report of your Ruby code.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/fastruby/skunk"&gt;Skunk&lt;/a&gt;: a tool that helps you find the most complicated parts of your application that also have low code coverage.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rubocop/rubocop"&gt;Rubocop&lt;/a&gt;: a Ruby static code analyzer and formatter, based on the community Ruby style guide. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-calculate-code-coverage-with-simplecov"&gt;
  &lt;/a&gt;
  How to Calculate Code Coverage With SimpleCov
&lt;/h2&gt;

&lt;p&gt;Use &lt;a href="https://github.com/simplecov-ruby/simplecov"&gt;SimpleCov&lt;/a&gt; to generate a report of how many statements are covered by your test suite. It won't assess the test suite quality, though.&lt;/p&gt;

&lt;p&gt;It will affect your test suite performance, so make sure to only run it when necessary.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-measure-code-quality-with-rubycritic"&gt;
  &lt;/a&gt;
  How to Measure Code Quality With RubyCritic
&lt;/h2&gt;

&lt;p&gt;Ernesto recommends &lt;a href="https://github.com/whitesmith/rubycritic"&gt;RubyCritic&lt;/a&gt; because it's a gem for assessing code quality that it's still actively maintained.&lt;/p&gt;

&lt;p&gt;RubyCritic provides a score based on churn and complexity. These metrics help you identify files that are great candidates for refactoring.&lt;/p&gt;

&lt;p&gt;Check out the talk at the minute &lt;a href="https://youtu.be/ZyU6K6eR-_A?t=1067"&gt;17:47&lt;/a&gt; to see how Ernesto analyzes the report generated by RubyCritic:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-find-code-smells-and-calculate-skunkscore-with-skunk"&gt;
  &lt;/a&gt;
  How to Find Code Smells and Calculate SkunkScore with Skunk 🦨
&lt;/h2&gt;

&lt;p&gt;A SkunkScore is an assessment combining code smells, code complexity, and code coverage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/fastruby/skunk"&gt;Skunk&lt;/a&gt;'s main goal is to serve as a compass for the first steps in your refactoring adventure. Focus on the files with a high skunk_score with a decent code_coverage score. That means you can get started with files that have code quality problems but also have tests, which makes this step easier.&lt;/p&gt;

&lt;p&gt;Make sure to add a reminder to add more tests to the other files with high skunk_score and low code_coverage 📌&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: When working on new features, run &lt;code&gt;$ skunk -b main&lt;/code&gt; against your feature branch to give you an idea of the features you're adding are improving or decreasing the code quality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ruby-on-rails-code-quality-checklist"&gt;
  &lt;/a&gt;
  Ruby on Rails Code Quality Checklist
&lt;/h2&gt;

&lt;p&gt;Now that you have gathered the code quality data, use this checklist to start moving out of the tar pit 🏊‍♀️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-delete-unused-files-with-coverband"&gt;
  &lt;/a&gt;
  1. Delete unused files with Coverband 🪦
&lt;/h3&gt;

&lt;p&gt;The best code is no code, right? Dead code is code that is never executed and is just filling up space. In larger or older applications, dead code can be a very common thing.&lt;/p&gt;

&lt;p&gt;Find dead code with &lt;a href="https://github.com/danmayer/coverband"&gt;Coverband&lt;/a&gt;, which can be run in production.&lt;/p&gt;

&lt;p&gt;Or add a &lt;a href="https://www.youtube.com/watch?v=29UXzfQWOhQ"&gt;"tombstone"&lt;/a&gt; inside a method you want to remove, push it to production and wait. Check again in a few weeks or months, and if the code is never executed, you can safely remove it.&lt;/p&gt;

&lt;p&gt;Here are some other libraries to detect dead code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/lewispb/tombstone/"&gt;Tombstone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/michaelfeathers/scythe"&gt;Scythe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/seattlerb/debride"&gt;Debride&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-refactor-the-complex-files-with-better-code-coverage-first"&gt;
  &lt;/a&gt;
  2. Refactor the complex files with better code coverage first 💇‍♀️
&lt;/h3&gt;

&lt;p&gt;Refactor complex files that have at least 60% or more code coverage.&lt;/p&gt;

&lt;p&gt;Sandi Metz's &lt;a href="https://www.youtube.com/watch?v=YtROlyWWhV0"&gt;"Polly Want a Message"&lt;/a&gt; talk has an approach for refactoring classes with lots of responsibilities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: Compare code quality improvements by running &lt;code&gt;$ skunk -b main&lt;/code&gt;. It will show you how much it improved. Such a great metric to share with your team! 🎊&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-write-tests-for-the-files-with-high-skunkcore-and-low-code-coverage"&gt;
  &lt;/a&gt;
  3. Write tests for the files with high skunk_core and low code coverage 🧹
&lt;/h3&gt;

&lt;p&gt;Writing tests will decrease a file's skunk_score. Skunk gives you a list of good candidates for your next test-writing efforts.&lt;/p&gt;

&lt;p&gt;Keep track of Code Quality by analyzing the SkunkScore Average. It's recommended to run the report every 3 weeks to evaluate the team's engineering practices and if the project is moving in the right direction.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-celebrate-tiny-wins-often"&gt;
  &lt;/a&gt;
  4. Celebrate tiny wins often 🥳
&lt;/h3&gt;

&lt;p&gt;Improving code quality is a hard task! Make sure to celebrate every tiny improvement along the way with your team. Enjoy the relief of working on a great Ruby codebase.&lt;/p&gt;




&lt;p&gt;We highly recommend you watch the talk. The best part of this talk is to feel like there's hope and that getting out of a tar pit is possible.&lt;/p&gt;

&lt;p&gt;The questions he asked such as "What is code quality anyway?" are helpful to change the perspective on how to approach technical debt more humanely.&lt;/p&gt;

&lt;p&gt;After all, technical debt has the name technical in it but it's more a result of social/cultural problems in a team.&lt;/p&gt;

&lt;p&gt;Judging past decisions is easy and unhelpful. That's our default. Embracing the challenge and being open to the opportunities for improvement is the real challenge.&lt;/p&gt;

&lt;p&gt;Now, go follow the checklist to assess your Ruby Code Quality and create a livable environment for your code.&lt;/p&gt;




&lt;p&gt;We watched Ernesto's talk at a previous &lt;a href="https://dev.to/watch-party"&gt;Watch Party&lt;/a&gt;. We host tech talks watch parties every 4 weeks, on a Saturday morning 📺&lt;/p&gt;

&lt;p&gt;Sign up for our &lt;a href="https://www.hexdevs.com/newsletter/"&gt;newsletter&lt;/a&gt; to get an invitation for when we host our next one:Saturday morning 📺&lt;/p&gt;




&lt;p&gt;Copyright 2021 hexdevs&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
    </item>
  </channel>
</rss>
