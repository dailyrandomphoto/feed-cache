<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>一秒拳王▷線上看完整版(2021)电影在线[HD]观看和下载</title>
      <author>你好，李焕英 2021 完整電影版</author>
      <pubDate>Sun, 11 Apr 2021 12:09:51 +0000</pubDate>
      <link>https://dev.to/hi_mom/2021-hd-3aeb</link>
      <guid>https://dev.to/hi_mom/2021-hd-3aeb</guid>
      <description>&lt;p&gt;一秒拳王 完整版, 一秒拳王 线上, 一秒拳王 下载, 一秒拳王 One Second Champion (2021) 电影完整版, 一秒拳王 线上看完整版, 一秒拳王 免费下载, 一秒拳王 (2021) 上映时间完整版, 一秒拳王 下载完整版, 一秒拳王 在线完整版, 一秒拳王 One Second Champion (2021) 完整版, 一秒拳王 在线观看完整版本。&lt;/p&gt;

&lt;p&gt;================================================&lt;/p&gt;

&lt;p&gt;&lt;b&gt;◉立即观看 ⇨ &lt;a href="https://v.ht/one_second_champion"&gt;&lt;/a&gt;&lt;a href="https://v.ht/one_second_champion"&gt;https://v.ht/one_second_champion&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;◉立即下载 ⇨ &lt;a href="https://is.gd/one_second_champion"&gt;&lt;/a&gt;&lt;a href="https://is.gd/one_second_champion"&gt;https://is.gd/one_second_champion&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;================================================&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--es7bJ8NE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/df6zwhyleda9apoxr9rh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--es7bJ8NE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/df6zwhyleda9apoxr9rh.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;一秒拳王 One Second Champion 2021&lt;br&gt;
导演: 赵善恒&lt;br&gt;
编剧: 章彥琦 / 何肇康 / 李浩田 / 凌伟骏&lt;br&gt;
主演: 周国贤 / 林明祯 / 赵善恒 / 张建声 / 熊偉樂 / 更多...&lt;br&gt;
类型: 剧情&lt;br&gt;
制片国家/地区: 中国香港&lt;br&gt;
语言: 粤语&lt;br&gt;
上映日期: 2020-12-03(中国香港) / 2020-11-22(香港亞洲電影節)&lt;br&gt;
片长: 90分钟&lt;br&gt;
又名: One Second Champion&lt;/p&gt;

&lt;p&gt;一秒拳王的剧情简介 · · · · · ·&lt;br&gt;
廢中周天仁（周國賢）終日在酒吧渾噩，兒子（熊倬樂）對他毫無寄望，為了躲避債主，天仁運用一秒預知超能力成功逃脫，意外被屢戰屢敗的拳擊教練阿信（趙善恆）發現，拉攏他合作挑戰秒殺拳王Joe（查朗桑提納托古），堂妹小瑤（林明禎）多番阻撓也無補於事。一秒雖然很短，卻能創出宇宙；從未認真看待自己的天仁，決定藉此難得機會，運用這個超能力，在擂台上尋回失落已久的人生初衷，為了自己，為了兒子，好好活一次！其實輸怎會一世，贏又真的只在一秒？&lt;/p&gt;

&lt;p&gt;一秒拳王的标签电影 · · · · · ·&lt;br&gt;
一秒拳王 澳門上映&lt;br&gt;
一秒拳王 2021 上映&lt;br&gt;
一秒拳王 HD-線上看&lt;br&gt;
一秒拳王 線上看小鴨&lt;br&gt;
一秒拳王 电影完整版&lt;br&gt;
一秒拳王 線上看下載&lt;br&gt;
一秒拳王 2021 下载&lt;br&gt;
一秒拳王 線上看完整版&lt;br&gt;
一秒拳王 線上看完整版小鴨&lt;br&gt;
一秒拳王 (2021) 完整版本&lt;br&gt;
一秒拳王 1080P|完整版本&lt;br&gt;
一秒拳王 (2021) 在线观看完整版&lt;br&gt;
一秒拳王 線上看(2021)完整版&lt;br&gt;
《一秒拳王》線上看電影(2021)&lt;br&gt;
一秒拳王 (電影)2021年 再次觀看電影&lt;br&gt;
一秒拳王 線上看|2021上映|完整版小鴨|線上看小鴨&lt;br&gt;
一秒拳王 线上看&lt;br&gt;
一秒拳王 主題曲&lt;br&gt;
一秒拳王 小鴨影音&lt;br&gt;
一秒拳王 線上小鴨&lt;br&gt;
一秒拳王 完整版本&lt;br&gt;
一秒拳王 香港上映&lt;br&gt;
一秒拳王 線上看小鴨影音&lt;br&gt;
一秒拳王 2021 線上看&lt;br&gt;
《一秒拳王》2021 电影在线&lt;br&gt;
一秒拳王 1080P 下載&lt;br&gt;
一秒拳王 免費線上看電影&lt;br&gt;
一秒拳王 电影在线 2021年&lt;br&gt;
一秒拳王 (2021) 在线观看&lt;br&gt;
一秒拳王 [2021] 观看和下载&lt;br&gt;
一秒拳王 [2021-HD] 观看和下载&lt;br&gt;
一秒拳王 Singapora (2021) 完整版&lt;br&gt;
一秒拳王 線上看|2021最新電影|小鴨影音&lt;br&gt;
一秒拳王 免費下載&lt;br&gt;
一秒拳王 下載 百度&lt;br&gt;
一秒拳王 2021 上看&lt;br&gt;
一秒拳王 免費線上看電影&lt;br&gt;
一秒拳王 完整版小鴨 HD&lt;br&gt;
一秒拳王 線上看 2021&lt;br&gt;
一秒拳王 台灣上映 2021&lt;br&gt;
一秒拳王 (2021) 線上看&lt;br&gt;
一秒拳王 線上(2021-HD)&lt;br&gt;
一秒拳王 2021 電影完整版&lt;br&gt;
一秒拳王 2021 線上 完整版&lt;br&gt;
一秒拳王 完整版小鴨 2021&lt;br&gt;
一秒拳王 免費在線觀看 2021&lt;br&gt;
一秒拳王 [2021] 線上完整版&lt;br&gt;
一秒拳王 线上看(2021)完整版&lt;br&gt;
一秒拳王 線上 [2021] 完整版&lt;br&gt;
一秒拳王 (2021) 免費線上看電影&lt;br&gt;
一秒拳王 線上看(2021)完整版&lt;br&gt;
一秒拳王 One Second Champion (2021) Trailer&lt;br&gt;
一秒拳王 One Second Champion (2021) Facebook&lt;br&gt;
一秒拳王 One Second Champion (2021) Instagram&lt;br&gt;
一秒拳王 One Second Champion (2021) Twitter&lt;br&gt;
一秒拳王 One Second Champion (2021) Youtube&lt;br&gt;
一秒拳王 (2021-HD) 完整版小鴨&lt;br&gt;
一秒拳王 線上看2021 HD.BD.1080p&lt;br&gt;
一秒拳王 HD|1080p|4K|香港流媒體&lt;br&gt;
一秒拳王 2021 完整版小鴨 (HD.BLURAY)&lt;br&gt;
一秒拳王 2021 線上看電影粵語-流-下載完整版本&lt;/p&gt;

</description>
      <category>news</category>
      <category>ios</category>
      <category>vue</category>
      <category>techtalks</category>
    </item>
    <item>
      <title>你好，李焕英▷線上看完整版(2021)电影在线[HD]观看和下载</title>
      <author>你好，李焕英 2021 完整電影版</author>
      <pubDate>Sun, 11 Apr 2021 11:01:25 +0000</pubDate>
      <link>https://dev.to/hi_mom/2021-hd-4f4d</link>
      <guid>https://dev.to/hi_mom/2021-hd-4f4d</guid>
      <description>&lt;p&gt;你好，李焕英 完整版, 你好，李焕英 线上, 你好，李焕英 下载, 你好，李焕英 Hi Mom (2021) 电影完整版, 你好，李焕英 线上看完整版, 你好，李焕英 免费下载, 你好，李焕英 (2021) 上映时间完整版, 你好，李焕英 下载完整版, 你好，李焕英 在线完整版, 你好，李焕英 Hi Mom (2021) 完整版, 你好，李焕英 在线观看完整版本。&lt;/p&gt;

&lt;p&gt;================================================&lt;/p&gt;

&lt;p&gt;&lt;b&gt;◉立即观看 ⇨ &lt;a href="https://v.ht/hi_mom_zh"&gt;&lt;/a&gt;&lt;a href="https://v.ht/hi_mom_zh"&gt;https://v.ht/hi_mom_zh&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;◉立即下载 ⇨ &lt;a href="https://is.gd/hi_mom_hd"&gt;&lt;/a&gt;&lt;a href="https://is.gd/hi_mom_hd"&gt;https://is.gd/hi_mom_hd&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;================================================&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lZuDsFan--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1rl7ub3jqdhl9c7sywrr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lZuDsFan--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1rl7ub3jqdhl9c7sywrr.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;你好，李焕英 Hi Mom 2021&lt;br&gt;
导演: 贾玲&lt;br&gt;
编剧: 贾玲 / 孙集斌 / 王宇 / 刘宏禄 / 卜钰 / 郭宇鹏&lt;br&gt;
主演: 贾玲 / 张小斐 / 沈腾 / 陈赫 / 刘佳 / 更多...&lt;br&gt;
类型: 剧情 / 喜剧 / 奇幻&lt;br&gt;
制片国家/地区: 中国大陆&lt;br&gt;
语言: 汉语普通话&lt;br&gt;
上映日期: 2021-02-12(中国大陆)&lt;br&gt;
片长: 128分钟&lt;br&gt;
又名: Hi, Mom&lt;br&gt;
IMDb链接: tt13364790&lt;/p&gt;

&lt;p&gt;你好，李焕英的剧情简介 · · · · · ·&lt;br&gt;
2001年的某一天，刚刚考上大学的贾晓玲（贾玲 饰）经历了人生中的一次大起大落。一心想要成为母亲骄傲的她却因母亲突遭严重意外，而悲痛万分。在贾晓玲情绪崩溃的状态下，竟意外的回到了1981年，并与年轻的母亲李焕英（张小斐 饰）相遇，二人形影不离，宛如闺蜜。与此同时，也结识了一群天真善良的好朋友。晓玲以为来到了这片“广阔天地”，她可以凭借自己超前的思维，让母亲“大有作为”，但结果却让晓玲感到意外......&lt;/p&gt;

&lt;p&gt;你好，李焕英的标签电影 · · · · · ·&lt;br&gt;
你好，李焕英 澳門上映&lt;br&gt;
你好，李焕英 2021 上映&lt;br&gt;
你好，李焕英 HD-線上看&lt;br&gt;
你好，李焕英 線上看小鴨&lt;br&gt;
你好，李焕英 电影完整版&lt;br&gt;
你好，李焕英 線上看下載&lt;br&gt;
你好，李焕英 2021 下载&lt;br&gt;
你好，李焕英 線上看完整版&lt;br&gt;
你好，李焕英 線上看完整版小鴨&lt;br&gt;
你好，李焕英 (2021) 完整版本&lt;br&gt;
你好，李焕英 1080P|完整版本&lt;br&gt;
你好，李焕英 (2021) 在线观看完整版&lt;br&gt;
你好，李焕英 線上看(2021)完整版&lt;br&gt;
《你好，李焕英》線上看電影(2021)&lt;br&gt;
你好，李焕英 (電影)2021年 再次觀看電影&lt;br&gt;
你好，李焕英 線上看|2021上映|完整版小鴨|線上看小鴨&lt;br&gt;
你好，李焕英 线上看&lt;br&gt;
你好，李焕英 主題曲&lt;br&gt;
你好，李焕英 小鴨影音&lt;br&gt;
你好，李焕英 線上小鴨&lt;br&gt;
你好，李焕英 完整版本&lt;br&gt;
你好，李焕英 香港上映&lt;br&gt;
你好，李焕英 線上看小鴨影音&lt;br&gt;
你好，李焕英 2021 線上看&lt;br&gt;
《你好，李焕英》2021 电影在线&lt;br&gt;
你好，李焕英 1080P 下載&lt;br&gt;
你好，李焕英 免費線上看電影&lt;br&gt;
你好，李焕英 电影在线 2021年&lt;br&gt;
你好，李焕英 (2021) 在线观看&lt;br&gt;
你好，李焕英 [2021] 观看和下载&lt;br&gt;
你好，李焕英 [2021-HD] 观看和下载&lt;br&gt;
你好，李焕英 Singapora (2021) 完整版&lt;br&gt;
你好，李焕英 線上看|2021最新電影|小鴨影音&lt;br&gt;
你好，李焕英 免費下載&lt;br&gt;
你好，李焕英 下載 百度&lt;br&gt;
你好，李焕英 2021 上看&lt;br&gt;
你好，李焕英 免費線上看電影&lt;br&gt;
你好，李焕英 完整版小鴨 HD&lt;br&gt;
你好，李焕英 線上看 2021&lt;br&gt;
你好，李焕英 台灣上映 2021&lt;br&gt;
你好，李焕英 (2021) 線上看&lt;br&gt;
你好，李焕英 線上(2021-HD)&lt;br&gt;
你好，李焕英 2021 電影完整版&lt;br&gt;
你好，李焕英 2021 線上 完整版&lt;br&gt;
你好，李焕英 完整版小鴨 2021&lt;br&gt;
你好，李焕英 免費在線觀看 2021&lt;br&gt;
你好，李焕英 [2021] 線上完整版&lt;br&gt;
你好，李焕英 线上看(2021)完整版&lt;br&gt;
你好，李焕英 線上 [2021] 完整版&lt;br&gt;
你好，李焕英 (2021) 免費線上看電影&lt;br&gt;
你好，李焕英 線上看(2021)完整版&lt;br&gt;
你好，李焕英 Hi Mom (2021) Trailer&lt;br&gt;
你好，李焕英 Hi Mom (2021) Facebook&lt;br&gt;
你好，李焕英 Hi Mom (2021) Instagram&lt;br&gt;
你好，李焕英 Hi Mom (2021) Twitter&lt;br&gt;
你好，李焕英 Hi Mom (2021) Youtube&lt;br&gt;
你好，李焕英 (2021-HD) 完整版小鴨&lt;br&gt;
你好，李焕英 線上看2021 HD.BD.1080p&lt;br&gt;
你好，李焕英 HD|1080p|4K|香港流媒體&lt;br&gt;
你好，李焕英 2021 完整版小鴨 (HD.BLURAY)&lt;br&gt;
你好，李焕英 2021 線上看電影粵語-流-下載完整版本&lt;/p&gt;

</description>
      <category>news</category>
      <category>ios</category>
      <category>vue</category>
      <category>techtalks</category>
    </item>
    <item>
      <title>Understanding how to retrieve joined data with ActiveRecord</title>
      <author>Ana Nunes da Silva</author>
      <pubDate>Sun, 11 Apr 2021 10:55:32 +0000</pubDate>
      <link>https://dev.to/anakbns/understanding-how-to-retrieve-joined-data-1f3b</link>
      <guid>https://dev.to/anakbns/understanding-how-to-retrieve-joined-data-1f3b</guid>
      <description>&lt;p&gt;So far we've been using joins to support filtering based on related associations. But what if we not only want to filter but also retrieve and use data from those associations?&lt;/p&gt;

&lt;p&gt;Let's bring back the domain models we've been using during this series. This time &lt;code&gt;Booking&lt;/code&gt; and &lt;code&gt;Rating&lt;/code&gt; will be enough to illustrate some examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Booking&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;has_many&lt;/span&gt; &lt;span class="ss"&gt;:ratings&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Rating&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="n"&gt;belongs_to&lt;/span&gt; &lt;span class="ss"&gt;:booking&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Booking&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Id&lt;/th&gt;
&lt;th&gt;Check In&lt;/th&gt;
&lt;th&gt;Check Out&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;62&lt;/td&gt;
&lt;td&gt;20 Jun 2020&lt;/td&gt;
&lt;td&gt;23 Jun 2020&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;63&lt;/td&gt;
&lt;td&gt;07 Aug 2021&lt;/td&gt;
&lt;td&gt;08 Aug 2021&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;22 May 2021&lt;/td&gt;
&lt;td&gt;28 May 2021&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;65&lt;/td&gt;
&lt;td&gt;01 Apr 2021&lt;/td&gt;
&lt;td&gt;02 Apr 2021&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Rating&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Id&lt;/th&gt;
&lt;th&gt;Rate&lt;/th&gt;
&lt;th&gt;Comments&lt;/th&gt;
&lt;th&gt;Booking Id&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;'Amazing'&lt;/td&gt;
&lt;td&gt;62&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;'Coming back soon'&lt;/td&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;'friendly staff'&lt;/td&gt;
&lt;td&gt;63&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#-raw-pluck-endraw-vs-raw-select-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;pluck&lt;/code&gt; vs &lt;code&gt;select&lt;/code&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#get-a-list-of-bookings-that-have-been-rated-with-raw-ids-endraw-with-their-corresponding-rates"&gt;
  &lt;/a&gt;
  Get a list of bookings that have been rated with &lt;code&gt;ids&lt;/code&gt; with their corresponding rates
&lt;/h3&gt;

&lt;p&gt;A simple way to return this list could be to join ratings to bookings and &lt;code&gt;pluck&lt;/code&gt; the &lt;code&gt;id&lt;/code&gt; values from &lt;code&gt;bookings&lt;/code&gt; and the corresponding  &lt;code&gt;comments&lt;/code&gt; values from&lt;code&gt;ratings&lt;/code&gt;. Remember that we can pass an &lt;code&gt;SQL&lt;/code&gt; string to explicitly say which &lt;code&gt;&amp;lt;table&amp;gt;.&amp;lt;column&amp;gt;&lt;/code&gt; we'd like to pluck:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Booking&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;joins&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:ratings&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;pluck&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'bookings.id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'ratings.comments'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In SQL terms, this means that we're &lt;strong&gt;inner joining&lt;/strong&gt; ratings and &lt;strong&gt;selecting&lt;/strong&gt; only the two columns that we need, &lt;code&gt;id&lt;/code&gt; from &lt;code&gt;bookings&lt;/code&gt; table and the &lt;code&gt;comments&lt;/code&gt; from the &lt;code&gt;ratings&lt;/code&gt; table.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="nv"&gt;"bookings"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;"ratings"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;"comments"&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="nv"&gt;"bookings"&lt;/span&gt; &lt;span class="k"&gt;INNER&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="nv"&gt;"ratings"&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="nv"&gt;"ratings"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;"booking_id"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;"bookings"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;"id"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we're using &lt;code&gt;pluck, the output is an array of arrays with the&lt;/code&gt;id, comments` combinations:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;ruby&lt;br&gt;
[[62, 'amazing'], [63, 'friendly staff'], [64,  'Coming back soon']]&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If we'd like to transform this into an index/dictionary structure that is easier to read and consult we can use the &lt;code&gt;.to_h&lt;/code&gt; method:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;ruby&lt;br&gt;
Booking.joins(:ratings).pluck('bookings.id', 'ratings.comments').to_h&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There, much better:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;ruby&lt;br&gt;
{ 62 =&amp;gt; 'Amazing',&lt;br&gt;
  63 =&amp;gt; 'friendly staff',&lt;br&gt;
  64 =&amp;gt; 'Coming back soon' }&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So &lt;code&gt;pluck&lt;/code&gt; returns the data prepared for us in a ruby array object. If we'd rather return an ActiveRecord collection, we can solve this exercise in a similar way using &lt;code&gt;select&lt;/code&gt; instead:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;ruby&lt;br&gt;
Booking.joins(:ratings).select('bookings.id', 'ratings.comments')&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will translate in exactly the same SQL as before:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;sql&lt;br&gt;
SELECT "bookings"."id", "ratings"."comments" FROM "bookings" INNER JOIN "ratings" ON "ratings"."booking_id" = "bookings"."id"&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;But now, instead of an array we're returning ActiveRecord objects:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;ruby&lt;br&gt;
 [#&amp;lt;Booking:0x00007f86084a4530 id: 62&amp;gt;,&lt;br&gt;
 #&amp;lt;Booking:0x00007f86084a4418 id: 63&amp;gt;,&lt;br&gt;
 #&amp;lt;Booking:0x00007f86084a4288 id: 64&amp;gt;]&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Looking at this output, it looks like we've lost the &lt;code&gt;comments&lt;/code&gt; data. But notice what happens when we ask one of these objects what attributes they have: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`ruby&lt;br&gt;
bookings = Booking.joins(:ratings).select('bookings.id', 'ratings.comments')&lt;/p&gt;

&lt;p&gt;bookings.first.attributes&lt;/p&gt;

&lt;p&gt;=&amp;gt; {"id"=&amp;gt;62, "comments"=&amp;gt;"Amazing"}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;What's going on here? Activerecord's &lt;code&gt;select&lt;/code&gt; is basically making all attributes that we've selected into ActiveRecord instance methods.&lt;/p&gt;

&lt;p&gt;So if we do:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`ruby&lt;br&gt;
bookings = Booking.joins(:ratings).select('bookings.id', 'ratings.comments')&lt;/p&gt;

&lt;p&gt;bookings.first.comments&lt;/p&gt;

&lt;p&gt;=&amp;gt; "Amazing"&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;All this without triggering any extra queries.&lt;/p&gt;

&lt;p&gt;So to get the list that we want, we can now iterate on each booking and print the available attributes:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;ruby&lt;br&gt;
Booking.joins(:ratings).select('bookings.id', 'ratings.comments').each do |booking|&lt;br&gt;
   puts booking.id&lt;br&gt;
   puts booking.comments&lt;br&gt;
end&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Which will print:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
62&lt;br&gt;
"Amazing"&lt;br&gt;
63&lt;br&gt;
"friendly staff"&lt;br&gt;
64&lt;br&gt;
"Coming back soon"&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#be-aware-of-n-1-queries"&gt;
  &lt;/a&gt;
  Be aware of n + 1 queries
&lt;/h3&gt;

&lt;p&gt;It's important to mention that &lt;code&gt;joins&lt;/code&gt; per se does not avoid &lt;code&gt;n + 1&lt;/code&gt; queries. We've been managing to avoid them so far because we're asking SQL to join and select the data we need &lt;strong&gt;in a single query&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Watch what happens if you don't use the &lt;code&gt;select&lt;/code&gt; method:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;ruby&lt;br&gt;
Booking.joins(:ratings).each do |booking|&lt;br&gt;
   puts booking.id&lt;br&gt;
   puts booking.ratings.map(&amp;amp;:comments)&lt;br&gt;
end&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
Note that now comments is no longer a booking instance method. That means that for each booking we'll have to get its ratings and from there add another iteration to get each rating's comments.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;sql&lt;br&gt;
  Booking Load (3.0ms)  SELECT "bookings".* FROM "bookings" INNER JOIN "ratings" ON "ratings"."booking_id" = "bookings"."id"                                                                                      &lt;br&gt;
  🤯 Rating Load (29.8ms)  SELECT "ratings".* FROM "ratings" WHERE "ratings"."booking_id" = $1  [["booking_id", 63]]                                                                                       &lt;br&gt;
  🤯 Rating Load (0.3ms)  SELECT "ratings".* FROM "ratings" WHERE "ratings"."booking_id" = $1  [["booking_id", 64]]                  &lt;br&gt;
  🤯 Rating Load (2.0ms)  SELECT "ratings".* FROM "ratings" WHERE "ratings"."booking_id" = $1  [["booking_id", 65]]                                                                                    &lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-endraw-eagerload-raw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;eager_load&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;If you don't want to &lt;code&gt;select&lt;/code&gt; attributes prior to the iteration, you can &lt;code&gt;eager_load&lt;/code&gt; the &lt;code&gt;ratings&lt;/code&gt; data. What this will &lt;strong&gt;not&lt;/strong&gt; do, however, is to make &lt;code&gt;comments&lt;/code&gt; available as a booking instance method. So we'll have to get comments through the ratings:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;ruby&lt;br&gt;
Booking.joins(:ratings).eager_load(:ratings).each do |booking|&lt;br&gt;
   puts booking.id&lt;br&gt;
   puts booking.ratings.map(&amp;amp;:comments)&lt;br&gt;
end&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In SQL this will be: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;sql&lt;br&gt;
 SELECT "bookings"."id" AS t0_r0, "bookings"."guest_id" AS t0_r1, "bookings"."accommodation_id" AS t0_r2, "bookings"."check_in" AS t0_r3, "bookings"."check_out" AS t0_r4, "bookings"."status" AS t0_r5, "bookings"."total_guests" AS t0_r6, "bookings"."created_at" AS t0_r7, "bookings"."updated_at" AS t0_r8, "ratings"."id" AS t1_r0, "ratings"."rate" AS t1_r1, "ratings"."comments" AS t1_r2, "ratings"."booking_id" AS t1_r3, "ratings"."created_at" AS t1_r4, "ratings"."updated_at" AS t1_r5 FROM "bookings" INNER JOIN "ratings" ON "ratings"."booking_id" = "bookings"."id"&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note that now you'll have all &lt;code&gt;booking&lt;/code&gt; and all &lt;code&gt;rating&lt;/code&gt; attributes available which can make the query heavier in some cases. &lt;/p&gt;

&lt;p&gt;You can also use &lt;code&gt;eager_load&lt;/code&gt; without the &lt;code&gt;joins&lt;/code&gt; which will default into a &lt;code&gt;left outer join&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;ruby&lt;br&gt;
Booking.eager_load(:ratings).each do |booking|&lt;br&gt;
   puts booking.id&lt;br&gt;
   puts booking.ratings.map(&amp;amp;:comments) if booking.ratings.present?&lt;br&gt;
end&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here's the SQL:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;sql&lt;br&gt;
SELECT "bookings"."id" AS t0_r0, "bookings"."guest_id" AS t0_r1, "bookings"."accommodation_id" AS t0_r2, "bookings"."check_in" AS t0_r3, "bookings"."check_out" AS &lt;br&gt;
t0_r4, "bookings"."status" AS t0_r5, "bookings"."total_guests" AS t0_r6, "bookings"."created_at" AS t0_r7, "bookings"."updated_at" AS t0_r8, "ratings"."id" AS t1_r0, "ratings"."r&lt;br&gt;
ate" AS t1_r1, "ratings"."comments" AS t1_r2, "ratings"."booking_id" AS t1_r3, "ratings"."created_at" AS t1_r4, "ratings"."updated_at" AS t1_r5 FROM "bookings" LEFT OUTER JOIN "r&lt;br&gt;
atings" ON "ratings"."booking_id" = "bookings"."id"&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conlusion"&gt;
  &lt;/a&gt;
  Conlusion
&lt;/h2&gt;

&lt;p&gt;There are several ways you can access data from joined associations: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can use &lt;code&gt;pluck&lt;/code&gt; if returning a simple ruby object is enough for you&lt;/li&gt;
&lt;li&gt;If you'd like to get the benefits of returning an ActiveRecord collection use &lt;code&gt;select&lt;/code&gt; instead&lt;/li&gt;
&lt;li&gt;If you want to work with all the model and the joined association(s) attributes, you can use &lt;code&gt;eager_load&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Don't forget to keep a close eye on performance. While &lt;code&gt;pluck&lt;/code&gt; and &lt;code&gt;select&lt;/code&gt; can reduce the load time of your queries, combining multiple &lt;code&gt;joins&lt;/code&gt; in a single query and making all the attributes accessible with &lt;code&gt;eager_load&lt;/code&gt; can easily bloat them. In that case, consider breaking up your queries either using a &lt;code&gt;preload&lt;/code&gt; strategy or writing separate queries that support each other. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's it! Hope this 4 part series on understanding ActiveRecord joins was useful! Feel free to write me if you have any doubts or suggestions. You can also subscribe to my newsletter below to be updated on new posts.&lt;/p&gt;

</description>
      <category>activerecord</category>
      <category>rails</category>
      <category>sql</category>
    </item>
    <item>
      <title>Read data from Gmail using Node JS</title>
      <author>Unnati Bamania</author>
      <pubDate>Sun, 11 Apr 2021 10:41:35 +0000</pubDate>
      <link>https://dev.to/commentme/read-data-from-gmail-using-node-js-1nke</link>
      <guid>https://dev.to/commentme/read-data-from-gmail-using-node-js-1nke</guid>
      <description>&lt;p&gt;I've struggled a lot with this topic. Finally, after a lot of searches and referring documentation, I'm finally writing this article. I hope it helps everyone. In this article, the code will be written in NodeJS. This app will include 2 parts, the first is creating and setting up a project on google console and the next is the coding part.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-creating-a-project-on-google-console"&gt;
  &lt;/a&gt;
  1) Creating a project on Google Console
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P2Giqq6n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7fpkslwr3fn40ibyyxyh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P2Giqq6n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7fpkslwr3fn40ibyyxyh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Open &lt;a href="https://console.developers.google.com/"&gt;https://console.developers.google.com/&lt;/a&gt; website and you need to create a project. On the top left corner, there will be a list of your previous projects or option &lt;strong&gt;select a project&lt;/strong&gt;. &lt;br&gt;
A modal will pop up. Select on the option &lt;strong&gt;NEW PROJECT&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;select -&amp;gt; NEW PROJECT&lt;/strong&gt;
Enter a project name and create the project
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PuCuCLna--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ya8ehrvc4yuosfschls0.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#2-enable-gmail-api"&gt;
  &lt;/a&gt;
  2) Enable Gmail API
&lt;/h2&gt;

&lt;p&gt;Ensure that you've selected that project, then in the search box search Gmail API. Enable Gmail API.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H8LmUao8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tpgvh8lqfeu0eldgcqve.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H8LmUao8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tpgvh8lqfeu0eldgcqve.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-configure-project"&gt;
  &lt;/a&gt;
  3) Configure Project
&lt;/h2&gt;

&lt;p&gt;You need credentials but before creating credentials you need to configure credentials. On the left-hand side, you'll find OAuth consent Screen. Click on it. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;User Type -&amp;gt; External&lt;/strong&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kq4f3rU4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p75cbdhv49hexby5pldd.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Enter app information ie, app name, supporting email, developer contact information.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6rQi1rVG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oyqauv7o3enn7mggn9b2.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Scope page &lt;strong&gt;save and continue&lt;/strong&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z_CwRgE2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zud98qzfjizmbpqykvkm.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Test User Tab: Click on add user and you can add up to 100 emails. Add your email for testing. Save and continue.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DHbj-O0---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ifh4658cph2rrsybtxhm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DHbj-O0---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ifh4658cph2rrsybtxhm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6JgT2J2U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7x3nnhkvaw9wy93n6gy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6JgT2J2U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n7x3nnhkvaw9wy93n6gy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, after setting up, click on Credentials.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#4-create-credentials"&gt;
  &lt;/a&gt;
  4) Create Credentials
&lt;/h2&gt;

&lt;p&gt;After landing on Credentials, on the top click on &lt;strong&gt;CREATE CREDENTIALS&lt;/strong&gt;. Click on OAuth client ID. Select your application type. As we're using NodeJS, it is a web application. Add URI's as&lt;br&gt;
&lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;. Create and you'll get your credentials.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GU60F9EZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nd0ph24wfrp8wqoecitd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GU60F9EZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nd0ph24wfrp8wqoecitd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--00_trvuS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1lt42zg4enr91vyki5n3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--00_trvuS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1lt42zg4enr91vyki5n3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PdQgUcGD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ih3284g7mbo692o84nl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PdQgUcGD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ih3284g7mbo692o84nl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now comes part two, the coding part&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#5-code-set-up"&gt;
  &lt;/a&gt;
  5) Code set up:
&lt;/h2&gt;

&lt;p&gt;Go to this page, &lt;a href="https://developers.google.com/gmail/api/quickstart/nodejs"&gt;Node JS quickstart&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Copy Paste the sample code and then copy-paste in a file named index.js. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5FVTH-Dd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ti4ty3pvm2vww9yjqdmb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5FVTH-Dd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ti4ty3pvm2vww9yjqdmb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the folder, where you created this file, the terminal add the command&lt;br&gt;
&lt;br&gt;
&lt;code&gt;npm init&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
and initializes&lt;br&gt;
&lt;br&gt;
&lt;code&gt;package.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You need to install some dependencies with the command&lt;br&gt;
&lt;br&gt;
&lt;code&gt;npm i googleapis cheerio mailparser js-base64 open&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go to google developers console in your project. Navigate to the credentials part. In OAuth 2.0 Client IDs, you'll find a small download icon, download your credentials file from there and add to your folder where you've created this project. Name this file as&lt;br&gt;
&lt;br&gt;
&lt;code&gt;credentials.json&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run your code in your terminal. When you run for the first time, you'll get something like this&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Authorize this app by visiting this url: https://accounts.google.com/o/oauth2/v2/auth?access_type=offline&amp;amp;scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fgmail.readonly&amp;amp;response_type=code&amp;amp;client_id=479559853488-050lms0ffusprdhh938s954q0s36kg4i.apps.googleusercontent.com&amp;amp;redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob
‍Enter the code from that page here:
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Click on that URL and enter the code. &lt;br&gt;
Now, in order to be able to manage the labels of the messages, you need to change the initial scope from &lt;em&gt;gmail.readonly&lt;/em&gt; to &lt;em&gt;gmail.modify&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const SCOPES = ['https://www.googleapis.com/auth/gmail.modify'];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Delete &lt;strong&gt;token.json&lt;/strong&gt; from your working directory.&lt;/p&gt;

&lt;p&gt;One error that some of you might get. The reference code has &lt;em&gt;credentials.installed&lt;/em&gt; but it should be &lt;em&gt;credentials.web&lt;/em&gt;. When you check the file, &lt;em&gt;credentials.json&lt;/em&gt; you'll find everything is inside &lt;em&gt;web&lt;/em&gt; object. So, if you get that error just check your &lt;em&gt;creddentials.json&lt;/em&gt; file once and replace &lt;em&gt;installed&lt;/em&gt; accordingly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function authorize(credentials, callback) {
  const {client_secret, client_id, redirect_uris} = credentials.installed;
...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;If you're facing any other issue regarding app verification then navigate to &lt;a href="https://dev.toverification%20process"&gt;verification process&lt;/a&gt; and follow them.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#6final-output"&gt;
  &lt;/a&gt;
  6)Final Output:
&lt;/h2&gt;

&lt;p&gt;Then, go to the &lt;em&gt;listLabels&lt;/em&gt; function and add the label id in the console log.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;functionlistLabels(auth) {  
  ...      
    labels.forEach((label) =&amp;gt; {        
      console.log(`- ${label.name} : ${label.id}`);      
    });  
  ...}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, run the application by using the command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
 to authorize the app again and update the access permissions. You should be able to see the label list but now each label with its corresponding id.&lt;/p&gt;

&lt;p&gt;Now, to read mail box,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function listMessages(auth, query){
  query = 'unnatibamania8@gmail.com';
  return new Promise((resolve, reject) =&amp;gt; {    
    const gmail = google.gmail({version: 'v1', auth});
    gmail.users.messages.list(      
      {        
        userId: 'me',  
        q:query,      
        maxResults:5     
      },            (err, res) =&amp;gt; {        
        if (err) {                    reject(err);          
          return;        
        }        
        if (!res.data.messages) {                    resolve([]);          
          return;        
        }                resolve(res.data);  

                         getMail(res.data.messages[0].id, auth);
      }    
    );  
  })
}


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, the function &lt;em&gt;listMessages&lt;/em&gt; takes 2 parameters auth and query, you can call this function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fs.readFile('credentials.json', (err, content) =&amp;gt; {
  if (err) return console.log('Error loading client secret file:', err);
  // Authorize a client with credentials, then call the Gmail API.
  authorize(JSON.parse(content), listMessages);

});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;after console logging &lt;em&gt;res.data.messages&lt;/em&gt;, you'll get threadId and id. Pass the id into &lt;em&gt;getMail&lt;/em&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function getMail(msgId, auth){
  console.log(msgId)
  const gmail = google.gmail({version: 'v1', auth});
  //This api call will fetch the mailbody.
  gmail.users.messages.get({
      userId:'me',
      id: msgId ,
  }, (err, res) =&amp;gt; {
    console.log(res.data.labelIds.INBOX)
      if(!err){
        console.log("no error")
          var body = res.data.payload.parts[0].body.data;

          var htmlBody = base64.decode(body.replace(/-/g, '+').replace(/_/g, '/'));
          console.log(htmlBody)
          var mailparser = new Mailparser();

          mailparser.on("end", (err,res) =&amp;gt; {
              console.log("res",res);
          })

          mailparser.on('data', (dat) =&amp;gt; {
              if(dat.type === 'text'){
                  const $ = cheerio.load(dat.textAsHtml);
                  var links = [];
                  var modLinks = [];
                  $('a').each(function(i) {
                      links[i] = $(this).attr('href');
                  });

                  //Regular Expression to filter out an array of urls.
                  var pat = /------[0-9]-[0-9][0-9]/;

                  //A new array modLinks is created which stores the urls.
                  modLinks = links.filter(li =&amp;gt; {
                      if(li.match(pat) !== null){
                          return true;
                      }
                      else{
                          return false;
                      }
                  });
                  console.log(modLinks);

                  //This function is called to open all links in the array.

              }
          })

          mailparser.write(htmlBody);
          mailparser.end();

      }
  });
}


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#final-output"&gt;
  &lt;/a&gt;
  Final Output
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ACAYZ4wc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uq72d5x0sdnuhndzblav.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ACAYZ4wc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uq72d5x0sdnuhndzblav.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Don't read all the messages all together it might crash the application. Hence, I've read only 1 mail at a time. You can just play around with the code and find a lot of other stuff!&lt;br&gt;
I hope this article helps. &lt;/p&gt;

</description>
      <category>node</category>
      <category>webdev</category>
      <category>devops</category>
      <category>javascript</category>
    </item>
    <item>
      <title>PHP 8 Is here! A step in the right direction?</title>
      <author>Paul Isaris</author>
      <pubDate>Sun, 11 Apr 2021 10:15:00 +0000</pubDate>
      <link>https://dev.to/pavlosisaris/php-8-is-here-a-step-in-the-right-direction-41ad</link>
      <guid>https://dev.to/pavlosisaris/php-8-is-here-a-step-in-the-right-direction-41ad</guid>
      <description>&lt;p&gt;post photo by &lt;a href="https://www.pexels.com/"&gt;pexels&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;PHP 8 is finally here!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PHP 8.0 is a major update of the PHP language.&lt;br&gt;
It contains many new features and optimizations including &lt;strong&gt;named arguments&lt;/strong&gt;, &lt;strong&gt;union types&lt;/strong&gt;, &lt;strong&gt;attributes&lt;/strong&gt;, &lt;strong&gt;constructor property promotion&lt;/strong&gt;, &lt;strong&gt;match expression&lt;/strong&gt;, &lt;strong&gt;nullsafe operator&lt;/strong&gt;, &lt;strong&gt;JIT&lt;/strong&gt;, and improvements in the &lt;strong&gt;type system&lt;/strong&gt;, &lt;strong&gt;error handling&lt;/strong&gt;, and &lt;strong&gt;consistency&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this article, we will review all the new features and changes, and share some thoughts about each of the changes, as well as on the roadmap that PHP seems to be carving ahead.&lt;/p&gt;

&lt;p&gt;You can read all about these in the &lt;a href="https://www.php.net/releases/8.0/en.php"&gt;official release announcement&lt;/a&gt; as well.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#new-features"&gt;
  &lt;/a&gt;
  New features
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#named-arguments"&gt;
  &lt;/a&gt;
  Named arguments
&lt;/h2&gt;

&lt;p&gt;In PHP 8, when calling a function, you can omit the non-required arguments, and pass only what is desired.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#named-parameters-example"&gt;
  &lt;/a&gt;
  Named Parameters example
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;my_awesome_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$expires&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mf"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's say now that we want to call this function, but only specify the &lt;code&gt;$name&lt;/code&gt; and &lt;code&gt;$expires&lt;/code&gt; attributes.&lt;/p&gt;

&lt;p&gt;In PHP 7:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// calling the function. but we only want to specify $name and $expires&lt;/span&gt;
&lt;span class="nf"&gt;my_awesome_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In PHP 8:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// calling the function. but we only want to specify $name and $expires&lt;/span&gt;
&lt;span class="nf"&gt;my_awesome_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expires&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#my-thoughts-on-named-parameters"&gt;
  &lt;/a&gt;
  My thoughts on named parameters
&lt;/h3&gt;

&lt;p&gt;This is a nice and handy touch. Many languages nowadays support this kind of method calling.&lt;br&gt;&lt;br&gt;
However, this design can lead to functions that break the &lt;a href="https://en.wikipedia.org/wiki/Single-responsibility_principle"&gt;Single-responsibility_principle&lt;/a&gt;, by resulting in methods that "do too much" by having many parameters. So, as always, use with caution ;-)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#attributes"&gt;
  &lt;/a&gt;
  Attributes
&lt;/h2&gt;

&lt;p&gt;Attributes are the new kid in the block. It is essentially a configuration language embedded directly into code.&lt;br&gt;&lt;br&gt;
Attributes is a &lt;strong&gt;native PHP syntax&lt;/strong&gt; that offers the ability to add structured, machine-readable metadata information on declarations in code: Classes, methods, functions, parameters, properties, etc.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#attributes-example"&gt;
  &lt;/a&gt;
  Attributes Example
&lt;/h3&gt;

&lt;p&gt;In PHP 7 (With PHPDocs):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BookController&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cd"&gt;/**
     * @Route("/api/books/{id}", methods={"GET"})
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* ... */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In PHP 8:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BookController&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;#[Route("/api/books/{id}", methods: ["GET"])]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* ... */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#constructor-property-promotion"&gt;
  &lt;/a&gt;
  Constructor property promotion
&lt;/h2&gt;

&lt;p&gt;The basic idea is simple: ditch all the class properties and the variable assignments, and prefix the constructor parameters with &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, or &lt;code&gt;private&lt;/code&gt;. PHP will take that new syntax, and transform it to normal syntax under the hood, before actually executing the code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#constructor-properties-example"&gt;
  &lt;/a&gt;
  Constructor properties example
&lt;/h3&gt;

&lt;p&gt;In PHP 7:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nv"&gt;$y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nv"&gt;$z&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nv"&gt;$y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nv"&gt;$z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$z&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In PHP 8:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kt"&gt;public&lt;/span&gt; &lt;span class="n"&gt;float&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kt"&gt;public&lt;/span&gt; &lt;span class="n"&gt;float&lt;/span&gt; &lt;span class="nv"&gt;$y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kt"&gt;public&lt;/span&gt; &lt;span class="n"&gt;float&lt;/span&gt; &lt;span class="nv"&gt;$z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#my-thoughts-on-constructor-property-promotion"&gt;
  &lt;/a&gt;
  My thoughts on Constructor property promotion
&lt;/h3&gt;

&lt;p&gt;Constructor property promotion reduces the amount of code that is required, leading to smaller and cleaner classes.&lt;br&gt;&lt;br&gt;
If you still want to have class properties that are not part of the constructor parameters, you can declare them in the old way, and instantiate them (or nor), inside the constructor.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#union-types"&gt;
  &lt;/a&gt;
  Union types
&lt;/h2&gt;

&lt;p&gt;Union types are a way of declaring &lt;strong&gt;multiple types&lt;/strong&gt; for a property/variable.&lt;br&gt;
So if a function parameter can take either &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;int&lt;/code&gt; values, you can now declare it as &lt;code&gt;string|int&lt;/code&gt;.&lt;br&gt;&lt;br&gt;
This is something that you could not do in PHP 7, only using PHPDocs (so it was not part of the PHP core libraries, but existed in the PHPDocs).&lt;br&gt;&lt;br&gt;
Instead of PHPDoc annotations for a combination of types, you can use native union type declarations that are validated at &lt;strong&gt;runtime&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#union-types-example"&gt;
  &lt;/a&gt;
  Union types example
&lt;/h3&gt;

&lt;p&gt;In PHP 7:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cd"&gt;/** @var int|float */&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;$price&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="cd"&gt;/**
   * @param float|int $price
   */&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$price&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// OK at runtime&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In PHP 8, since Union types are part of the PHP runtime library and compiler, this will throw an error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kt"&gt;private&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;float&lt;/span&gt; &lt;span class="nv"&gt;$price&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'test'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// TypeError&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#my-thoughts-on-union-types"&gt;
  &lt;/a&gt;
  My thoughts on Union types
&lt;/h3&gt;

&lt;p&gt;As a &lt;a href="https://en.wikipedia.org/wiki/SOLID"&gt;SOLID Principles&lt;/a&gt; advocate, I am not a big fan of this change.&lt;br&gt;&lt;br&gt;
I can understand that it can help speed things up and adds a level of control over my code, but I believe that if your code gets &lt;strong&gt;often&lt;/strong&gt; to the point that you need to use union type for a property, then there is definitely something you need to think about.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#match-expression"&gt;
  &lt;/a&gt;
  Match expression
&lt;/h2&gt;

&lt;p&gt;Match expression syntax is one of the nicest features in PHP 8 that improves the &lt;code&gt;switch&lt;/code&gt; syntax in multiple ways.&lt;/p&gt;

&lt;p&gt;Let's start by comparing the two. Here's a classic &lt;code&gt;switch&lt;/code&gt; example (example from &lt;a href="https://stitcher.io/blog/php-8-match-or-switch"&gt;this&lt;/a&gt; article):&lt;/p&gt;

&lt;p&gt;In PHP 7 (using &lt;code&gt;switch&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$statusCode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nv"&gt;$message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nv"&gt;$message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'not found'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nv"&gt;$message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'server error'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nv"&gt;$message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'unknown status code'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In PHP 8 (using &lt;code&gt;match&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;match&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$statusCode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;400&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'not found'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;500&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'server error'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'unknown status code'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#my-thoughts-on-the-match-expression-feature"&gt;
  &lt;/a&gt;
  My thoughts on the match expression feature
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;match&lt;/code&gt; will do &lt;strong&gt;strict&lt;/strong&gt; type checks instead of &lt;strong&gt;loose&lt;/strong&gt; ones. It's like using &lt;code&gt;===&lt;/code&gt; instead of &lt;code&gt;==&lt;/code&gt;.&lt;br&gt;
In my opinion, this is a good chance, since it makes the code stricter and more expressive.&lt;br&gt;&lt;br&gt;
Also, If you forget to check for a value, and when there's no default arm specified, PHP will throw an &lt;code&gt;UnhandledMatchError&lt;/code&gt; exception.&lt;br&gt;&lt;br&gt;
Again more strictness, but it will prevent subtle bugs from going unnoticed.&lt;br&gt;&lt;br&gt;
To fix this, you should wrap the &lt;code&gt;match&lt;/code&gt; expression inside a separate method, and deal with the &lt;code&gt;UnhandledMatchError&lt;/code&gt; exception there, by returning a default value.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#nullsafe-operator"&gt;
  &lt;/a&gt;
  Nullsafe operator
&lt;/h2&gt;

&lt;p&gt;Instead of null check conditions, you can now use a chain of calls with the new nullsafe operator.&lt;br&gt;&lt;br&gt;
When the evaluation of one element in the chain fails, the execution of the entire chain aborts, and the entire chain evaluates to null.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#example-of-nullsafe-operator"&gt;
  &lt;/a&gt;
  Example of nullsafe operator
&lt;/h3&gt;

&lt;p&gt;In PHP 7:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$country&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$book&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;$author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$book&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$author&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$author&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getAddress&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$address&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nv"&gt;$country&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$address&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In PHP 8:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$country&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$book&lt;/span&gt;&lt;span class="o"&gt;?-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;?-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getAddress&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;?-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#my-thoughts-on-nullsafe-operator"&gt;
  &lt;/a&gt;
  My thoughts on nullsafe operator
&lt;/h3&gt;

&lt;p&gt;I have mixed feelings about this.&lt;br&gt;&lt;br&gt;
Of course, it is a handy touch since it leads to less and definitely more readable code.&lt;br&gt;&lt;br&gt;
But again, by looking at the big picture, why would our code even &lt;strong&gt;&lt;em&gt;need to check so deeply and greedily?&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Should our code have Business rules that restrain such behavior?&lt;br&gt;
So, again a handy new feature, but use with caution...&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#saner-string-to-number-comparisons"&gt;
  &lt;/a&gt;
  Saner string to number comparisons
&lt;/h2&gt;

&lt;p&gt;When comparing to a numeric string, PHP 8 uses a number comparison. Otherwise, it converts the number to a string and uses a string comparison.&lt;/p&gt;

&lt;p&gt;In PHP 7:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'foobar'&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In PHP 8:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'foobar'&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is definitely a step in the right direction, but only given that PHP is trying to be a stricter language.&lt;br&gt;&lt;br&gt;
When we say equals, we should mean &lt;strong&gt;equals&lt;/strong&gt;!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-overall-thoughts-on-php-8"&gt;
  &lt;/a&gt;
  My overall thoughts on PHP 8
&lt;/h2&gt;

&lt;p&gt;PHP is undoubtedly trying to become a stricter, more "serious" language.&lt;br&gt;&lt;br&gt;
As a big fan of &lt;a href="https://en.wikipedia.org/wiki/Object-oriented_programming"&gt;OOP&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/SOLID"&gt;SOLID Principles&lt;/a&gt; principles, I am totally happy and on board with this direction.&lt;br&gt;&lt;br&gt;
Also, as you will see in the upgrade guide, PHP 8 is generally backwards-friendly, since it does not break a lot of functionality from the previous major releases. Cool!  &lt;/p&gt;

&lt;p&gt;So let's try to use all the new features of PHP as consciously as possible, and build awesome things!&lt;/p&gt;

&lt;p&gt;If you are content with the new PHP version, take a look at the &lt;a href="https://www.php.net/manual/en/migration80.php"&gt;migration guide&lt;/a&gt;.&lt;br&gt;&lt;br&gt;
What are your thoughts on PHP 8?&lt;/p&gt;

</description>
      <category>php</category>
      <category>webdev</category>
      <category>discuss</category>
      <category>programming</category>
    </item>
    <item>
      <title>Simple Static site/blog search in 14 Lines of JavaScript</title>
      <author>Christian</author>
      <pubDate>Sun, 11 Apr 2021 10:11:08 +0000</pubDate>
      <link>https://dev.to/christianfei/simple-static-site-blog-search-in-14-lines-of-javascript-1nhl</link>
      <guid>https://dev.to/christianfei/simple-static-site-blog-search-in-14-lines-of-javascript-1nhl</guid>
      <description>&lt;p&gt;&lt;strong&gt;Originally posted on &lt;a href="https://cri.dev/posts/2021-04-06-simple-static-site-blog-search-javascript-client/"&gt;cri.dev&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is my approach to a purely client side search feature for static blogs and sites.&lt;/p&gt;

&lt;p&gt;I am currently using this under &lt;a href="https://cri.dev/posts"&gt;/posts&lt;/a&gt; to let readers search through my blog posts.&lt;/p&gt;

&lt;p&gt;Read more below about how to integrate it in your site.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#backstory"&gt;
  &lt;/a&gt;
  Backstory
&lt;/h2&gt;

&lt;p&gt;In 2015 I did a similar thing for Jekyll sites, namely &lt;a href="https://github.com/christian-fei/Simple-Jekyll-Search"&gt;Simple-Jekyll-Search&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's gotten quite a bit of attention and merged various Pull-Requests (64!) from others.&lt;/p&gt;

&lt;p&gt;I ditched Jekyll a few years ago, to use a JavaScript based static site generator:&lt;/p&gt;

&lt;p&gt;My home-made static site generator &lt;a href="https://github.com/christian-fei/devblog"&gt;devblog&lt;/a&gt;, and settled with &lt;a href="https://www.11ty.dev/"&gt;Eleventy&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h2&gt;

&lt;p&gt;Under &lt;a href="https://cri.dev/posts"&gt;/posts&lt;/a&gt; I render the full list of blog posts.&lt;/p&gt;

&lt;p&gt;(Not with the full content but with an &lt;em&gt;excerpt/description&lt;/em&gt;.)&lt;/p&gt;

&lt;p&gt;In my Nunjucks template I render the posts like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"searchable"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;autofocus&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"🔍 Search posts"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  {% set postslist = collections.post | reverse %}
  {% for post in postslist %}
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"searchable-item"&lt;/span&gt; &lt;span class="na"&gt;data-search=&lt;/span&gt;&lt;span class="s"&gt;"{{ post.data.title | escape }} {{ post.data.tags | json | escape }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ...
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  {% endfor %}
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The idea is the following:&lt;/p&gt;

&lt;p&gt;Within a &lt;code&gt;.searchable&lt;/code&gt; element&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;look for a &lt;code&gt;input&lt;/code&gt; element and attach an event listener to it (&lt;code&gt;keyup&lt;/code&gt; event)&lt;/li&gt;
&lt;li&gt;when searching, parse all &lt;code&gt;.searchable-item&lt;/code&gt;s &lt;code&gt;data-search&lt;/code&gt; attribute and test a RegExp on it&lt;/li&gt;
&lt;li&gt;make items that match visible, and make others disappear&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h2&gt;

&lt;p&gt;This is the full code for the search functionality on this blog:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;;[...&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.searchable&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)].&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;makeSearchable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;makeSearchable&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$searchable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;$searchableItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;$searchable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.searchable-item&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;$search&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$searchable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;$search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;keyup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;$searchableItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data-search&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;show&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;i&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;$el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;show&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-integrate-it-on-your-site"&gt;
  &lt;/a&gt;
  How to integrate it on your site
&lt;/h2&gt;

&lt;p&gt;Grabbed the JavaScript above and put it in a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;Define a minimal markup to enable the search functionality:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"searchable"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;autofocus&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"🔍 Search posts"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- Loop through your blog posts --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"searchable-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  ...
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure you have the wrapper element &lt;code&gt;.searchable&lt;/code&gt;, containing an input field and your post items with the &lt;code&gt;.searchable-item&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;By default the search function will match the blog posts to filter with the element's &lt;code&gt;innerText&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Optionally, apply a &lt;code&gt;data-search&lt;/code&gt; attribute to each &lt;code&gt;.searchable-item&lt;/code&gt; and set the value of your blog post title, tags, short description etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#full-example"&gt;
  &lt;/a&gt;
  Full example
&lt;/h2&gt;

&lt;p&gt;Check out a &lt;a href="https://codepen.io/christian-fei/pen/abpyERy"&gt;full example on CodePen&lt;/a&gt; if you need to better understand how to structure your markup.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Originally posted on &lt;a href="https://cri.dev/posts/2021-04-06-simple-static-site-blog-search-javascript-client/"&gt;cri.dev&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>blogging</category>
      <category>search</category>
    </item>
    <item>
      <title>Steps 🏃‍♀️ To Km + Calories burned CONVERTER APP</title>
      <author>Bek Brace</author>
      <pubDate>Sun, 11 Apr 2021 09:41:54 +0000</pubDate>
      <link>https://dev.to/bekbrace/steps-to-km-calories-burned-converter-app-4lk</link>
      <guid>https://dev.to/bekbrace/steps-to-km-calories-burned-converter-app-4lk</guid>
      <description>&lt;p&gt;My girlfriend and I walk each Saturday from 11 AM till 7 PM and sometimes 8 PM; this also includes shopping and going back home arranging products then getting out again to continue our walk.&lt;/p&gt;

&lt;p&gt;By the end of the day, I ask her "How many KM have we walked, today?", so she looks to her iPhone app and answers me by stating a figure in "Steps" (22,234 steps), a measurement which I have never understood, and this was so frustrating because I wanted to know the actual number of Kilometers I have walked during the day, a proper metric measurement.&lt;/p&gt;

&lt;p&gt;So I decided to solve this problem, the first thing I did is that I  looked up the average rate of conversion between steps/KM and even calories burned per KM and decided to design a simple application with just HTML, CSS and JavaScript : &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/zhfjbJv42xA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;With this simple app, I can get the proper number of KM we have walked and how much calories we've burned in that day 🙂&lt;/p&gt;

&lt;p&gt;If you would like to use the application, I've deployed it and here's the link: &lt;br&gt;
&lt;a href="https://svetka.netlify.app"&gt;https://svetka.netlify.app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the source code:&lt;br&gt;
&lt;a href="https://github.com/BekBrace/steps_km_calorie_Converter"&gt;https://github.com/BekBrace/steps_km_calorie_Converter&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Stay safe everyone.&lt;br&gt;
Cheers,&lt;br&gt;
Bek&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Awesome 404 Page Templates for your Websites </title>
      <author>Rithik Samanthula</author>
      <pubDate>Sun, 11 Apr 2021 08:48:42 +0000</pubDate>
      <link>https://dev.to/code2rithik/awesome-404-page-templates-for-your-websites-33jc</link>
      <guid>https://dev.to/code2rithik/awesome-404-page-templates-for-your-websites-33jc</guid>
      <description>&lt;p&gt;There are different HTTP response status codes.&lt;/p&gt;

&lt;p&gt;Especially, the 404 one.&lt;/p&gt;

&lt;p&gt;Now, we wouldn't want our 404 pages to look dull right?&lt;/p&gt;

&lt;p&gt;So, here are some cool 404-page templates for your website:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-neon-404-page"&gt;
  &lt;/a&gt;
  1. Neon 404 Page
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/code2rithik/embed/XWpVvYL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Compatible browsers: Chrome, Edge, Firefox, Opera, Safari&lt;/p&gt;

&lt;p&gt;Responsive: Yes&lt;/p&gt;

&lt;p&gt;Dependencies: None&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-flashlight-404-page"&gt;
  &lt;/a&gt;
  2. Flashlight 404 Page
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/code2rithik/embed/wvgpVQm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Compatible browsers: Chrome, Edge, Firefox, Opera, Safari&lt;/p&gt;

&lt;p&gt;Responsive: Yes&lt;/p&gt;

&lt;p&gt;Dependencies: jQuery.js&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-space-404-page"&gt;
  &lt;/a&gt;
  3. Space 404 Page
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/code2rithik/embed/LYxewMN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Compatible browsers: Chrome, Edge, Firefox, Opera, Safari&lt;/p&gt;

&lt;p&gt;Responsive: Yes&lt;/p&gt;

&lt;p&gt;Dependencies: jQuery.js&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-console-style-404-page"&gt;
  &lt;/a&gt;
  4. Console Style 404 Page
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/code2rithik/embed/PoWQYGa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Compatible browsers: Chrome, Edge, Firefox, Opera, Safari&lt;/p&gt;

&lt;p&gt;Dependencies: None&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-sassy-404-ui-study"&gt;
  &lt;/a&gt;
  5. Sassy 404 UI Study
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/code2rithik/embed/MWJQgwN?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Compatible browsers: Chrome, Edge, Firefox, Opera, Safari&lt;/p&gt;

&lt;p&gt;Responsive: Yes&lt;/p&gt;

&lt;p&gt;Dependencies: None&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-404-makes-bear-sad"&gt;
  &lt;/a&gt;
  6. 404 Makes Bear Sad
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/code2rithik/embed/BapYBoP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Compatible browsers: Chrome, Edge, Firefox, Opera, Safari&lt;/p&gt;

&lt;p&gt;Responsive: Yes&lt;/p&gt;

&lt;p&gt;Dependencies: React.JS, React-dom.JS&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-space-404-page-2"&gt;
  &lt;/a&gt;
  7. Space 404 Page 2
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/code2rithik/embed/vYgdBLe?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Compatible browsers: Chrome, Edge, Firefox, Opera, Safari&lt;/p&gt;

&lt;p&gt;Responsive: Yes&lt;/p&gt;

&lt;p&gt;Dependencies: bootstrap.css, gsap.js&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#8-404-scary-investigation"&gt;
  &lt;/a&gt;
  8. 404 Scary Investigation
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/code2rithik/embed/NWdyKNE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Compatible browsers: Chrome, Edge, Firefox, Opera, Safari&lt;/p&gt;

&lt;p&gt;Responsive: Yes&lt;/p&gt;

&lt;p&gt;Dependencies: anime.js&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#9-monument-valley-inspiration-404-page"&gt;
  &lt;/a&gt;
  9. Monument Valley Inspiration 404 Page
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/code2rithik/embed/YzNeKWr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Compatible browsers: Chrome, Edge, Firefox, Opera, Safari&lt;/p&gt;

&lt;p&gt;Dependencies: None&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#10-maze-404-page"&gt;
  &lt;/a&gt;
  10. Maze 404 Page
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/code2rithik/embed/PoWQYoR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Compatible browsers: Chrome, Edge, Firefox, Opera, Safari&lt;/p&gt;

&lt;p&gt;Dependencies: jQuery.js&lt;/p&gt;

&lt;p&gt;------------------------------x----------------------------&lt;/p&gt;

&lt;p&gt;Thank You for Reading this Blog,&lt;/p&gt;

&lt;p&gt;If you liked it, do share it with your friends and remember...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#keep-coding-yall"&gt;
  &lt;/a&gt;
  Keep Coding Y'All 👨🏻‍💻
&lt;/h1&gt;

</description>
      <category>404</category>
      <category>html</category>
      <category>scss</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Recently I decided to become a freelancer</title>
      <author>Stefan Ionel</author>
      <pubDate>Sun, 11 Apr 2021 08:37:52 +0000</pubDate>
      <link>https://dev.to/istef94/recently-i-decided-to-become-a-freelancer-2bhi</link>
      <guid>https://dev.to/istef94/recently-i-decided-to-become-a-freelancer-2bhi</guid>
      <description>&lt;p&gt;I started my software developer career in 2016 as an employee in corporations. I learned a lot and I had very cool colleagues. I started working as a game developer in Unity3D.&lt;/p&gt;

&lt;p&gt;After a year and 3 months I decided to change the corporation and started working for a bank in Italy, Milan. I worked in this bank for almost 1 year and a few months. The experience was very beautiful because I was working in a foreign country and I was starting to travel.&lt;/p&gt;

&lt;p&gt;After this experience I changed the corporation again and started working in the financial field. I work with Microsoft .net technologies on the backend and API integration side. &lt;/p&gt;

&lt;p&gt;The financial project was very complex. It was a web application from which I learned a lot. I had almost 5 years of experience in the field, but I didn't seem to be fully satisfied.&lt;/p&gt;

&lt;p&gt;Something was missing, but I didn't know what. I lacked freedom and independence.&lt;/p&gt;

&lt;p&gt;In 2021 I decided to try to find clients and become a freelancer.&lt;br&gt;
I started looking for projects on linkedin, upwork, everywhere. Finding clients becomes a real challenge for me.&lt;/p&gt;

&lt;p&gt;In the end, I found my first clients with the help of closed freelancing platforms like: &lt;a href="https://www.wearehiring.top/"&gt;We are hiring&lt;/a&gt; and &lt;a href="https://www.toptal.com/"&gt;TopTal&lt;/a&gt;    &lt;/p&gt;

&lt;p&gt;At this moment I benefit from all the advantages of this lifestyle and my income has tripled.&lt;/p&gt;

&lt;p&gt;How did you manage to find your first clients as a freelancer?&lt;/p&gt;

</description>
      <category>career</category>
      <category>csharp</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to setup Vim for Go Development</title>
      <author>Preslav Mihaylov</author>
      <pubDate>Sun, 11 Apr 2021 08:35:41 +0000</pubDate>
      <link>https://dev.to/pmihaylov/how-to-setup-vim-for-go-development-14e7</link>
      <guid>https://dev.to/pmihaylov/how-to-setup-vim-for-go-development-14e7</guid>
      <description>&lt;p&gt;One of the major reasons I love programming in Go is that I can do it in any IDE or editor I want, including my favourite &lt;a href="https://pmihaylov.com/category/boost-your-vim/" rel="noreferrer noopener"&gt;Vim editor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unlike Java, for example, which is highly coupled to IntelliJ or Eclipse, Go is much more lightweight and the tools you use with it can be integrated with any editor.&lt;/p&gt;

&lt;p&gt;In this guide, I will help you setup your Vim as a fully-fledged Go IDE, including the plugins you need to install but also setting up the important options &amp;amp; mappings which you'll use daily.&lt;/p&gt;

&lt;h2&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;You'll need to have &lt;a href="https://golang.org/doc/install"&gt;Go installed&lt;/a&gt; &amp;amp; your Go environment setup, namely your &lt;strong&gt;$GOPATH&lt;/strong&gt; and related subdirectories - &lt;strong&gt;/bin /pkg /src&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You'll also need to use &lt;a href="https://github.com/neovim/neovim"&gt;nvim&lt;/a&gt; instead of vim or have your vim updated to version 8+.&lt;/p&gt;

&lt;h2&gt;The Main Vim plugin for Go&lt;/h2&gt;

&lt;p&gt;One of the only plugins you need for Go is called &lt;a href="https://github.com/fatih/vim-go"&gt;vim-go&lt;/a&gt;. It aggregates all the tools you need to get started with Go development.&lt;/p&gt;

&lt;p&gt;To install it via &lt;a href="https://github.com/tpope/vim-pathogen"&gt;pathogen&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/tpope/vim-pathogen ~/.vim/bundle&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="https://github.com/fatih/vim-go#install"&gt;Other installation options&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After you've installed it, you can customise it using these options which are highly opinionated, but work best for me:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;" disable all linters as that is taken care of by coc.nvim
let g:go_diagnostics_enabled = 0
let g:go_metalinter_enabled = []

" don't jump to errors after metalinter is invoked
let g:go_jump_to_error = 0

" run go imports on file save
let g:go_fmt_command = "goimports"

" automatically highlight variable your cursor is on
let g:go_auto_sameids = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For syntax highlighting, use these options:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_generate_tags = 1&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, install all the required go tools by opening vim and running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:GoInstallBinaries&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;coc.nvim - Autocompletion &amp;amp; linting&lt;/h2&gt;

&lt;p&gt;In the past, I've relied on &lt;a href="https://github.com/ycm-core/YouCompleteMe" rel="noreferrer noopener"&gt;YouCompleteMe&lt;/a&gt; for auto-completion or &lt;a href="https://github.com/fatih/vim-go"&gt;vim-go&lt;/a&gt;'s native integration with vim for auto-completion &amp;amp; &lt;a href="https://github.com/dense-analysis/ale" rel="noreferrer noopener"&gt;ALE&lt;/a&gt; for linting/static code analysis.&lt;/p&gt;

&lt;p&gt;Nowadays, I prefer using &lt;a href="https://github.com/neoclide/coc.nvim" rel="noreferrer noopener"&gt;coc.nvim&lt;/a&gt; and its plugins to do all that as I've found it to be more reliable than all of those tools.&lt;/p&gt;

&lt;p&gt;For installation instructions, follow the &lt;a href="https://github.com/neoclide/coc.nvim#quick-start" rel="noreferrer noopener"&gt;Quick Start&lt;/a&gt; guide.&lt;/p&gt;

&lt;p&gt;After you've installed it, run this command to install the necessary coc extension for Go:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vim -c 'CocInstall -sync coc-go coc-html coc-css coc-json|q'&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The html/css/json extensions are optional but who doesn't deal with those nowadays. You'd probably need them at some point.&lt;/p&gt;

&lt;p&gt;Afterwards, open vim &amp;amp; type &lt;strong&gt;:CocConfig&lt;/strong&gt; to open coc's configuration file. These are my opinionated settings, stripped from the non-go related settings:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  "suggest.noselect": false,
  "diagnostic.errorSign": "✘",
  "diagnostic.warningSign": "!",
  "diagnostic.infoSign": "?",
  "diagnostic.checkCurrentLine": true,
  "coc.preferences.formatOnSaveFiletypes": [
    "javascript",
    "html",
    "json",
    "css",
    "scss",
    "go"
  ],
  "coc.preferences.hoverTarget": "float",
  "languageserver": {
    "golang": {
      "command": "gopls",
      "rootPatterns": ["go.mod"],
      "filetypes": ["go"]
    }
  },
  "go.goplsOptions": {
    "staticcheck": true
  }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For all auxiliary coc settings, add &lt;a href="https://github.com/preslavmihaylov/dotfiles/blob/master/vim/coc.vim"&gt;these settings&lt;/a&gt; to your .vimrc.&lt;/p&gt;

&lt;h2&gt;Mappings For The Most Useful Commands&lt;/h2&gt;

&lt;p&gt;Having great tools is not enough. You need to know how to use them. Hence, it is best to customize some of the mappings which vim-go and coc provide you so that you're more effective when dealing with Go code.&lt;/p&gt;

&lt;p&gt;Here are the mappings I use most often and the way I've configured them:&lt;/p&gt;

&lt;h3&gt;Manage unit tests in the current file&lt;/h3&gt;

&lt;p&gt;I've mapped running all the tests in the current file to &amp;lt;leader&amp;gt;-t which translates to \ + t on my Mac &amp;amp; Linux.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;autocmd BufEnter *.go nmap &amp;lt;leader&amp;gt;t  &amp;lt;Plug&amp;gt;(go-test)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I've also mapped \ + tt to run the current test function only, instead of running all of them:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;autocmd BufEnter *.go nmap &amp;lt;leader&amp;gt;tt &amp;lt;Plug&amp;gt;(go-test-func)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, I use \ + c to toggle the coverage profile for the current file I'm in:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;autocmd BufEnter *.go nmap &amp;lt;leader&amp;gt;c  &amp;lt;Plug&amp;gt;(go-coverage-toggle)&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Inspect a Go Codebase&lt;/h3&gt;

&lt;p&gt;Show the function signature for a given routine with \ + i:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;autocmd BufEnter *.go nmap &amp;lt;leader&amp;gt;i  &amp;lt;Plug&amp;gt;(go-info)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Show the interfaces a type implements with \ + ii:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;autocmd BufEnter *.go nmap &amp;lt;leader&amp;gt;ii  &amp;lt;Plug&amp;gt;(go-implements)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Describe the definition of a given type with \ + ci:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;autocmd BufEnter *.go nmap &amp;lt;leader&amp;gt;ci  &amp;lt;Plug&amp;gt;(go-describe)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See the callers of a given function with \ + cc:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;autocmd BufEnter *.go nmap &amp;lt;leader&amp;gt;cc  &amp;lt;Plug&amp;gt;(go-callers)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Find all references of a given type/function in the codebase with \ + cr:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nmap &amp;lt;leader&amp;gt;cr &amp;lt;Plug&amp;gt;(coc-references)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go to definition/Go back with Ctrl+d and Ctrl+a:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nmap &amp;lt;C-a&amp;gt; &amp;lt;C-o&amp;gt;
nmap &amp;lt;C-d&amp;gt; &amp;lt;Plug&amp;gt;(coc-definition)&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Refactor Go Code&lt;/h3&gt;

&lt;p&gt;Not many options here, but there's renaming the symbol your cursor is on with \ + r:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nmap &amp;lt;leader&amp;gt;r &amp;lt;Plug&amp;gt;(coc-rename)&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Occasional Maintenance of Tooling&lt;/h2&gt;

&lt;p&gt;To update all Go tools, run this from vim:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:GoUpdateBinaries&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And updating all coc plugins:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:CocUpdate&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To upgrade vim-go or coc.nvim, delete the folders from &lt;strong&gt;~/.vim/bundle&lt;/strong&gt; and git clone the repos again.&lt;/p&gt;

&lt;h2&gt;Setup The Cool gruvbox Theme (Optional)&lt;/h2&gt;

&lt;p&gt;Install &lt;a href="https://github.com/morhetz/gruvbox" rel="noreferrer noopener"&gt;gruvbox&lt;/a&gt; using pathogen:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/morhetz/gruvbox ~/.vim/bundle&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enable it in your &lt;strong&gt;.vimrc&lt;/strong&gt; with some opinionated extra options:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;colorscheme gruvbox
autocmd ColorScheme * highlight CocErrorFloat guifg=#ffffff
autocmd ColorScheme * highlight CocInfoFloat guifg=#ffffff
autocmd ColorScheme * highlight CocWarningFloat guifg=#ffffff
autocmd ColorScheme * highlight SignColumn guibg=#adadad&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Want to see how it looks?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ifVWyHx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pmihaylov.com/wp-content/uploads/2021/03/gruvbox-1024x492.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ifVWyHx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pmihaylov.com/wp-content/uploads/2021/03/gruvbox-1024x492.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Setup tmux For Terminal Multiplexing (Optional)&lt;/h2&gt;

&lt;p&gt;If you want to manage multiple terminal tabs in the same window, use &lt;a href="https://github.com/tmux/tmux/wiki"&gt;tmux&lt;/a&gt; (See my &lt;a href="https://pmihaylov.com/tmux-terminal-multiplexer/"&gt;how to guide&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VDoRrGkk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://pmihaylov.com/wp-content/uploads/2018/05/Selection_018-1024x576.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VDoRrGkk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://pmihaylov.com/wp-content/uploads/2018/05/Selection_018-1024x576.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is one of the most useful tools I have setup because it allows me to do my code editing in vim and manage all sorts of other terminal-related tasks in separate tabs all inside the same window.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;And that's everything I use for my daily Go programming. &lt;/p&gt;

&lt;p&gt;This setup has worked extremely well for me and have in mind that I'm also dealing with &lt;a href="https://eng.uber.com/go-monorepo-bazel/"&gt;Uber's huge Go Monorepo&lt;/a&gt;, where I've been able to integrate my vim environment seamlessly (with some extra settings which you probably won't need.&lt;/p&gt;

&lt;p&gt;If you want to see my entire vim development environment, check out all my &lt;a href="https://github.com/preslavmihaylov/dotfiles" rel="noreferrer noopener"&gt;dotfiles&lt;/a&gt; and &lt;a href="https://github.com/preslavmihaylov/default-setups" rel="noreferrer noopener"&gt;default-setups&lt;/a&gt; repos, which include my full setup, including external programs, the terminal, vim, tmux, colorschemes, etc.&lt;/p&gt;

&lt;p&gt;Happy Gophing!&lt;/p&gt;

&lt;p&gt;Check out some of my other Go series:&lt;br&gt;&lt;a href="https://pmihaylov.com/series-integrating-go-with-elk/" rel="noreferrer noopener"&gt;Integrating your Go Service with ELK&lt;/a&gt;&lt;br&gt;&lt;a href="https://pmihaylov.com/grpc-with-go-crash-course/" rel="noreferrer noopener"&gt;gRPC With Go Crash Course&lt;/a&gt;&lt;/p&gt;

</description>
      <category>go</category>
      <category>vim</category>
      <category>ide</category>
    </item>
    <item>
      <title>Conditional logic with CSS – The CSS custom property trick.</title>
      <author>Siddharth</author>
      <pubDate>Sun, 11 Apr 2021 08:31:25 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/conditional-logic-with-css-the-css-custom-property-trick-44hb</link>
      <guid>https://dev.to/siddharthshyniben/conditional-logic-with-css-the-css-custom-property-trick-44hb</guid>
      <description>&lt;p&gt;The whole world of conditional logic and bulk toggling in CSS only exists because of one tiny footnote in the CSS spec. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.w3.org/TR/css-variables-1/#syntax:~:text=Note%3A%20While%20%3Cdeclaration%2Dvalue%3E%20must%20represent%20at,one%20token%20may%20be%20whitespace."&gt;That line&lt;/a&gt; is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: While  must represent at least one token, that one token may be whitespace.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That means &lt;code&gt;--foo: ;&lt;/code&gt; is valid.&lt;/p&gt;

&lt;p&gt;Now, this doesn’t read as some massive revelation that unlocks huge doors, but it is! Now we have the capability to make conditional statements all in CSS!&lt;/p&gt;

&lt;p&gt;Here's a demo:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/SiddharthShyniben/embed/QWdaevQ?height=600&amp;amp;default-tab=css,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;&lt;small&gt;&lt;em&gt;(Open the pen in a new tab and resize to see the full effect)&lt;/em&gt;&lt;/small&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Let me explain: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There is a breakpoint setup here at 350px. This is where the variable &lt;code&gt;--color&lt;/code&gt; changes from &lt;code&gt;initial&lt;/code&gt; to an empty space&lt;/li&gt;
&lt;li&gt;When the browser window is wider than 350px, the value of &lt;code&gt;--color&lt;/code&gt; is &lt;code&gt;initial&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;That makes the variable &lt;code&gt;--color-when-small&lt;/code&gt; contain two values: &lt;code&gt;initial&lt;/code&gt; and &lt;code&gt;red&lt;/code&gt; which is &lt;strong&gt;invalid&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;So when we actually set the color and call that variable like &lt;code&gt;background-color: var(--color-when-small, var(--color-when-big));&lt;/code&gt;, the &lt;strong&gt;second&lt;/strong&gt; value (the fallback) is used because the first is invalid.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;When the browser window is narrower than 350px, the value of &lt;code&gt;--color&lt;/code&gt; is a space.

&lt;ul&gt;
&lt;li&gt;That makes the variable &lt;code&gt;--color-when-small&lt;/code&gt; contain the value &lt;code&gt;"(space)red"&lt;/code&gt;, which is &lt;strong&gt;valid&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;So when we actually set the color and call that variable like &lt;code&gt;background-color: var(--color-when-small, var(--color-when-big));&lt;/code&gt;, the &lt;strong&gt;first&lt;/strong&gt; value is used&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, now we can flip the color between two values by changing a placeholder variable. I hope that clicks for you.&lt;/p&gt;

&lt;p&gt;When we see this as simply changing a single value, it’s almost like &lt;em&gt;ok, you’ve found a really complex way to change some padding, but you could have just changed the padding in the media query.&lt;/em&gt; But the trick is that now we have this placeholder variable that has changed and we can key into that to change unlimited other values.&lt;/p&gt;

&lt;p&gt;We could have a single media query (or set of media queries) in our CSS that only toggles these placeholder variables and we use elsewhere to toggle values. That could be nice and clean compared to sprinkling media queries all over the CSS. It’s a proper toggle in CSS, like a form of IF/THEN logic that we haven’t quite had before.&lt;/p&gt;

&lt;p&gt;For example, imagine we had a border for our earlier coloured div. Instead of changing the border directly in the media query, we can use the custom property again to change the border. &lt;/p&gt;

&lt;p&gt;Here is an example: &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/SiddharthShyniben/embed/yLgvBOd?height=600&amp;amp;default-tab=css,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;sup&gt;&lt;small&gt;&lt;em&gt;(Open the pen in a new tab and resize to see the full effect)&lt;/em&gt;&lt;/small&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;If we were creating a complex card, this could come in handy.&lt;/p&gt;

&lt;p&gt;This is not just for media queries. CSS trickery master Lea Verou has &lt;a href="https://lea.verou.me/2020/10/the-var-space-hack-to-toggle-multiple-values-with-one-custom-property/?"&gt;set her sights&lt;/a&gt; on this too:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What if I told you you could use a single property value to turn multiple different values on and off across multiple different properties and even across multiple CSS rules?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s the same trick!&lt;/p&gt;

&lt;p&gt;This opens up a lot of possibilities in CSS. We could do AND, OR, XOR, NOR etc. with this trick. But I'm leaving that for you to find. &lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>css</category>
      <category>logic</category>
    </item>
    <item>
      <title>Are you procrastinating?</title>
      <author>Aahnik Daw</author>
      <pubDate>Sun, 11 Apr 2021 08:31:17 +0000</pubDate>
      <link>https://dev.to/aahnik/are-you-procrastinating-236e</link>
      <guid>https://dev.to/aahnik/are-you-procrastinating-236e</guid>
      <description>&lt;p&gt;Are you procrastinating? This playlist gives you the ultimate tools to take control of your life.&lt;/p&gt;

&lt;p&gt;Watch the videos. Rewatch. Implement. Think. Reflect. Watch again. Iterate.&lt;/p&gt;

&lt;p&gt;Be patient, and you will be able to kill the monster.&lt;/p&gt;




&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/arj7oStGLkU"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/GTQ2xDNlLf8"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/km4pOGd_lHw"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1-VAGGCkoAM"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/irp5ghCVNAM"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/yBP1VjO9RSE"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/cRpQOXV2cFg"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/WAe-giSW3Zw"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/bLp9EimaEQI"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4x7MkLDGnu8"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/pKyHX0zqynk"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Y82KNevhkkg"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ilwork_mktE"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/jAS5zsi7zck"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/sBfng6Jd4Cc"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/o7w5r5PfBKo"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1KDB42qGT-8"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ii86yxzeDyk"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/iDbdXTMnOmE"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/T79nFQlDXXk"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/tReHWgBup40"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1xoCARmG7AM"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/RLylcMjvmpE"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Hu4Yvq-g7_Y"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/52lZmIafep4"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/PFo9-7VX2K8"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Lp7E973zozc"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/pXEl0R1BX-g"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/pWlOyuPPGiw"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/jW0JtF7ZcMw"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Y-iUOgQdA3Y"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ireD2dDk7_c"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ireD2dDk7_c"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/uRKeeelqWxw"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xguo_tvEoJs"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/5J6jAC6XxAI"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/HbxTkvfIOIg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLSTrsq_DvEghR5B_JwY3rUyEX1FhKXT2A"&gt;Link to the playlist&lt;/a&gt; on YouTube.&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>discuss</category>
    </item>
  </channel>
</rss>
