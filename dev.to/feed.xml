<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Object Oriented PHP (Lesson 1: Classes)</title>
      <author>Clean Code Studio</author>
      <pubDate>Sun, 22 Aug 2021 22:24:17 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/object-oriented-php-lesson-1-classes-23fk</link>
      <guid>https://dev.to/cleancodestudio/object-oriented-php-lesson-1-classes-23fk</guid>
      <description>&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #343c35 !important;
      color: #f5f5f5 !important;
      border-color: #343c35 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YeAAvjHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GeGRizPU--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/4f170830-7e2c-4f3e-81fe-b666a90b7e3f.gif" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
 

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;In &lt;a href="https://www.cleancode.studio/series/object-oriented-php/episodes/1"&gt;object-oriented programming&lt;/a&gt;, a &lt;a href="https://www.cleancode.studio/series/object-oriented-php/episodes/1"&gt;class is a blueprint for creating objects&lt;/a&gt; (a particular data structure), providing initial values for state (member variables or attributes), and implementations of behavior (member functions or methods). The class is a blueprint that defines a nature of a future object.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;...HUH??!?!&lt;/p&gt;

&lt;p&gt;Let's simplify!&lt;/p&gt;



&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kwVLTxl1iZI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Within &lt;a href="https://www.cleancode.studio/series/object-oriented-php"&gt;Object Oriented PHP&lt;/a&gt;, &lt;a href="https://www.cleancode.studio/series/object-oriented-php/episodes/1"&gt;classes are generally understood as blue prints, structures, or templates&lt;/a&gt; used to model either the real world or software specific concepts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What makes &lt;a href="https://www.cleancode.studio/series/object-oriented-php/episodes/1"&gt;object oriented PHP classes&lt;/a&gt; similar to blueprints?

&lt;ul&gt;
&lt;li&gt;How does finding nouns help us make &lt;a href="https://www.cleancode.studio/series/object-oriented-php/episodes/1"&gt;PHP classes&lt;/a&gt;?&lt;/li&gt;
&lt;li&gt;What are PHP class properties?&lt;/li&gt;
&lt;li&gt;How do you define PHP class properties?&lt;/li&gt;
&lt;li&gt;What is PHP class behavior?&lt;/li&gt;
&lt;li&gt;How do you define PHP class behavior? &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;


&lt;center&gt;


&lt;h3&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The End
&lt;/h3&gt;




&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #343c35 !important;
      color: #f5f5f5 !important;
      border-color: #343c35 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YeAAvjHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GeGRizPU--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/4f170830-7e2c-4f3e-81fe-b666a90b7e3f.gif" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://cleancode.studio/clean-code"&gt;Clean Code&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cleancode.studio/design-patterns"&gt;Java Script Design Patterns&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cleancode.studio/series/object-oriented-php/"&gt;Object Oriented Programming&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cleancode.studio/algorithms"&gt;JavaScript Algorithm Examples&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://cleancode.studio"&gt;Clean Code Studio&lt;/a&gt;&lt;br&gt;
‚òïÔ∏è Code Tips&lt;br&gt;
‚òïÔ∏è Career Advice&lt;br&gt;
‚òïÔ∏è Developer Memes&lt;br&gt;
&lt;small&gt;Shiny button, Fancy ùó°ùó≤ùòÑùòÄùóπùó≤ùòÅùòÅùó≤ùóø üëá, Juicy Dev Tips...wanna join?&lt;/small&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://cleancodestudio.paperform.co/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dgj1OcQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f7hwc3k4pzedr59fnr9r.png" alt="Yes, I want in! Button to go sign up for clean code studio newsletter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;(Discover [50+ pages] of my personal FAANG interview notes!)&lt;/small&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://twitter.com/cleancodestudio"&gt;Follow @cleancodestudio on Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtube.com/c/cleancodestudio"&gt;Follow @cleancodestudio on YouTube&lt;/a&gt;&lt;br&gt;
&lt;a href="https://tiktok.com/@cleancodestudio"&gt;Follow @cleancodestudio on TikTok&lt;/a&gt;&lt;br&gt;
&lt;a href="https://facebook.com/cleancodestudio"&gt;Follow @cleancodestudio on Facebook&lt;/a&gt;&lt;br&gt;
&lt;a href="https://instagram.com/cleancodestudio"&gt;Follow @cleancodestudio on Instagram&lt;/a&gt;&lt;br&gt;
&lt;a href="https://linkedin.com/company/cleancodestudio"&gt;Follow @cleancodestudio on LinkedIn&lt;/a&gt;&lt;br&gt;
&lt;a href="https://reddit.com/r/cleancodestudio"&gt;Follow @cleancodestudio on Reddit&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/cleancodestudio"&gt;Follow @cleancodestudio on Dev.to&lt;/a&gt;&lt;br&gt;
&lt;a href="https://stackoverflow.com/users/8541350/clean-code-studio"&gt;Follow @cleancodestudio on Stack Overflow&lt;/a&gt;&lt;br&gt;
&lt;a href="https://npmjs.com/~zhorton999"&gt;Follow @cleancodestudio packages on npm&lt;/a&gt;&lt;br&gt;
&lt;a href="https://packagist.org/packages/clean-code-studio"&gt;Follow @cleancodestudio packages on packagist&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/zhorton34"&gt;Star @cleancodestudio on Github&lt;/a&gt;&lt;/p&gt;




&lt;/center&gt;

</description>
      <category>php</category>
      <category>codenewbie</category>
      <category>oop</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Encryption is important</title>
      <author>William</author>
      <pubDate>Sun, 22 Aug 2021 22:09:33 +0000</pubDate>
      <link>https://dev.to/willkenzie/encryption-is-important-36cb</link>
      <guid>https://dev.to/willkenzie/encryption-is-important-36cb</guid>
      <description>&lt;p&gt;Encryption is crucial to everyone, whether it's the average user or enterprise deployment. Everyone has information they'd rather hide. It may not be much; you may be the kind of person that doesn't save embarrassing photos or cringy search histories. But what about private conversations between you and your friends? &lt;/p&gt;

&lt;p&gt;You don't have to be a criminal to enjoy encryption, simply stopping random people from reading texts you sent to your friend and texts they sent back is most likely something you'd be interested in. After all, you don't send them texts publically - it's a private conversation!&lt;/p&gt;

&lt;p&gt;This is where encryption comes into play. It may not be much - it can easily be automatic encryption like what's found in Signal or iMessage, but it's important nonetheless. Unless you trust iMessage, in which case you don't care about privacy and should &lt;em&gt;really&lt;/em&gt; take my advice and &lt;strong&gt;use Signal so Jared can quit reading your fantasy texts&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I have seen encryption that can be broken in seconds - a good example of this is poorly encrypted AES128 where the key can be extracted. For good encryption, you should use more layers, more random passwords, and smarter encryption.&lt;br&gt;
Let's assume you have a laptop with private communications between you and a friend. You don't need to be privacy paranoid to not want some random stranger reading these texts. &lt;/p&gt;

&lt;p&gt;The first step is adding a password to your account. This way, someone can't just click "Sign in" and log into your computer. But, if they have long-term access to your device, they can boot into a different OS or unplug your hard drive and read the texts through a file browser. This is fairly basic and if you aren't doing this, Joe is going to love reading your search history.&lt;/p&gt;

&lt;p&gt;The next layer is enabling user account encryption, like with NTFS's "Encrypt contents to secure data" option in Windows or Linux's EncryptFS. Now, if you have a weak password like your birthdate or your crush's name because &lt;strong&gt;we all know you have one Jared&lt;/strong&gt;, then you should reconsider what kinds of passwords you use. Try to avoid using words or w0rd$ in your password because that can be just as bad as setting your password to "password,"&lt;/p&gt;

&lt;p&gt;The next layer is whole disk encryption, which can be done with LUKS on Linux and, I believe, MacOS as well. Feel free to set this to an actual phrase with numbers, letters, and special characters in it, as long as it is as long as possible. Doing this can prevent most attacks that don't have a lot of time, like a random stranger in the library. Joe is watching.&lt;/p&gt;

&lt;p&gt;Your final step should be encrypting sensitive files and folders themselves with whatever your system can use. Avoid using programs like 7Zip and instead, use things like OpenSSL or dedicated tools that are well-vetted in the encryption community. Use PGP encryption to communicate via email and use Signal to prevent someone from reading the message logs. &lt;/p&gt;

&lt;p&gt;My next chunk of advice is to encrypt a flash drive with sensitive data and carry it on you at all times, maybe put it on your keychain. This makes it much more difficult for someone to decrypt your data because they won't likely have physical access to it. The creepy stalker behind you Chrome tried to warn you about won't be able to see your private messages.&lt;/p&gt;

&lt;p&gt;While you're at it, create a profile in your web browser and store it on that flash drive. Save your passwords in your browser with that profile and it will protect your browser sessions from attack.&lt;/p&gt;

&lt;p&gt;If anyone has any tips they'd like to contribute, feel free to share them below in the comments, I'll be replying to any advice and I may add it to this article if it's really good advice.&lt;/p&gt;

</description>
      <category>encryption</category>
      <category>privacy</category>
      <category>security</category>
    </item>
    <item>
      <title>JS13K: A journey through music (Day 10 üòä)</title>
      <author>Michael Primo</author>
      <pubDate>Sun, 22 Aug 2021 21:59:43 +0000</pubDate>
      <link>https://dev.to/michaelprimo/js13k-a-journey-through-music-day-10-3338</link>
      <guid>https://dev.to/michaelprimo/js13k-a-journey-through-music-day-10-3338</guid>
      <description>&lt;p&gt;Today I changed ways for proceeding the game.&lt;br&gt;
I need to make music for it and looking for a solution for making soundtracks for a 13KB game (Is this possible? If yes, will that be good?), so I am reading a book about that.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8_vZtKyR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z0dbqebczt3mhzkunxzm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8_vZtKyR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z0dbqebczt3mhzkunxzm.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
 This one. 



&lt;p&gt;I hope to learn how to process, play and visualize music throughly once of all this way :)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>devjournal</category>
      <category>challenge</category>
      <category>gamedev</category>
    </item>
    <item>
      <title>Why care about Immutability ?</title>
      <author>mayankav</author>
      <pubDate>Sun, 22 Aug 2021 20:37:23 +0000</pubDate>
      <link>https://dev.to/mayankav/why-care-about-immutability-119g</link>
      <guid>https://dev.to/mayankav/why-care-about-immutability-119g</guid>
      <description>&lt;p&gt;We unavoidingly tap into function purity, point free syle, recursion, immutability etc.. when discussing functional programming. You may not necessarily practice all aspects of functional programming in your run-of-the-mill job but if you're someone who works extensively with JavaScript libraries like RxJs, Cycle or state management tools like Flux (Redux, Vuex), I am sure you'd come across immutable objects more often than anything else functional. Immutability infact is so crucial to the reactive world of programming that you can count it into the basics of it. We are not going to talk about strings and other primitives in JavaScript which by design are always immutable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yEELsO3t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a28oi7iikkisuhqn6xhp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yEELsO3t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a28oi7iikkisuhqn6xhp.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;


&lt;p&gt;For a library that's reactive, it needs to &lt;strong&gt;&lt;em&gt;preserve the state&lt;/em&gt;&lt;/strong&gt; throughout the execution of the program, why? How else would you detect change in the state? Think of it like this, given that JS objects are &lt;strong&gt;&lt;em&gt;ephemeral&lt;/em&gt;&lt;/strong&gt; (non persistent), once you modify some property its value gets changed, &lt;strong&gt;&lt;em&gt;the object being the same&lt;/em&gt;&lt;/strong&gt;. If you compare the object before modifcation to the one after modification, well they are the same. Obviously you know why, modifying a property wont generate a new object! To understand this I expect you know that &lt;strong&gt;&lt;em&gt;a variable holding an object in JavaScript actually holds the reference to the memory block where the object's properties are stored as key value pairs&lt;/em&gt;&lt;/strong&gt;. Now you may say that you can detect a change by employing a recursive comparison on the data ? Not a performant idea when your state keeps changing every now and then! Immutability suggests &lt;strong&gt;&lt;em&gt;shallow copying&lt;/em&gt;&lt;/strong&gt; the object and making new modifications on the new copy of the object. Thinking of the copying step as a &lt;strong&gt;&lt;em&gt;signal&lt;/em&gt;&lt;/strong&gt; that something changed in the state, wont be wrong. Now that's a much faster and performance compliant way to tell whether or not the state changed. That may also trigger another doubt, how do you believe that making copies of your state is more performant than a recursive check on the property which changed? Well, that's a good question. I will try to catch up with this towards the end of this post, for now I'd say that there's something called &lt;strong&gt;&lt;em&gt;structural sharing&lt;/em&gt;&lt;/strong&gt; that makes this possible. &lt;/p&gt;


&lt;div class="runkit-element"&gt;
  &lt;code&gt;
    
// hidden setup JavaScript code goes in this preamble area

  &lt;/code&gt;
  &lt;code&gt;
    
const obj = {
    x: 1,
    y: 2
}

const copiedObj = obj;
copiedObj.x = 10;

console.log(obj.x); // 10
console.log(copiedObj.x); // 10 
// Referential equality check doesn't care about the contents, only the reference
console.log(obj === copiedObj); // true

const immutablyCopiedObj = {...obj};
console.log(obj === immutablyCopiedObj); //false

  &lt;/code&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;center&gt;&lt;h6&gt;
&lt;a href="https://codepen.io/mayankav/pen/xxrKggJ"&gt;Try on Codepen&lt;/a&gt;&lt;h6&gt;&lt;/h6&gt;
&lt;/h6&gt;&lt;/center&gt;
&lt;br&gt;



&lt;h2&gt;
  &lt;a href="#in-essence-immutability-has-the-following-benefits"&gt;
  &lt;/a&gt;
  In essence immutability has the following benefits
&lt;/h2&gt;

&lt;p&gt;1- &lt;strong&gt;&lt;em&gt;&lt;u&gt;Reactivity through change tracking&lt;/u&gt;&lt;/em&gt;&lt;/strong&gt; - We already discussed this. Using immutable state can make identifying changes quick and effortless both for the machine and us developers. This is what tools like redux, vuex or even parts of react and vue themselves build their reactivity upon. As soon as something in the state changes, be it based on some asynchronous background activity or a result of user interaction with the UI, a reference equality check instantly signals that it may be the correct time to rerender.&lt;/p&gt;

&lt;p&gt;2- &lt;strong&gt;&lt;em&gt;&lt;u&gt;Predictability and better debugging&lt;/u&gt;&lt;/em&gt;&lt;/strong&gt; - Predictability is very frequently linked with function purity. Given a function which does not cause any &lt;a href="https://subscription.packtpub.com/book/application-development/9781789800104/5/ch05lvl1sec38/side-effects"&gt;side effect&lt;/a&gt; within itself, the ouput will always be the same for the same set of inputs no matter how many times you call the function. With this restriction that no function can modify the shared state, we now have tools like Vuex and Redux that let you modify the state but in a way that fulfils their criteria. For example, you can only make changes to the Vuex store through functions listed as &lt;strong&gt;&lt;em&gt;mutations&lt;/em&gt;&lt;/strong&gt; in the store. You also have access to methods like &lt;strong&gt;&lt;em&gt;Vue.set()&lt;/em&gt;&lt;/strong&gt; &amp;amp; &lt;strong&gt;&lt;em&gt;Vue.delete()&lt;/em&gt;&lt;/strong&gt; to register your changes immutably. This makes debugging more easy and outputs/errors more predictable.&lt;/p&gt;

&lt;p&gt;3- &lt;strong&gt;&lt;em&gt;&lt;u&gt;Versioning&lt;/u&gt;&lt;/em&gt;&lt;/strong&gt; - Isn't it obvious that if you can preserve states you can go back and look at the old ones whenever needed? Quite similar to how you still have access to your old piece of code in Git even after merging several times on top of that. Redux implements a feature they call "&lt;a href="https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/Features/Trace.md"&gt;action replay&lt;/a&gt;", wherein you can see the state change and the user interaction side by side in the browser. You think its helpful? Ofcourse! cool and helpful. Now you know how important it is to preserve the state.&lt;/p&gt;

&lt;p&gt;4- &lt;strong&gt;&lt;em&gt;&lt;u&gt;Performance&lt;/u&gt;&lt;/em&gt;&lt;/strong&gt; - I took this as the last thing only because I did not talk about &lt;strong&gt;&lt;em&gt;structural sharing&lt;/em&gt;&lt;/strong&gt; when we were discussing performance. You may still be wondering how would creating new objects for every simple change be more performance complaiant than a &lt;a href="https://www.npmjs.com/package/deep-equal"&gt;deep equality check&lt;/a&gt; on the objects. While talking about immutability I also used the term &lt;strong&gt;&lt;em&gt;shallow copy&lt;/em&gt;&lt;/strong&gt;, that should have given out some hint. If not, its still nothing to worry about. As easy as it is, when making copies its important to be aware that the object you're copying may have nested objects as values to its properties. We &lt;strong&gt;&lt;em&gt;shallow copy&lt;/em&gt;&lt;/strong&gt; (just copy the reference without creating a new object) those objects which are not to be changed and only &lt;strong&gt;&lt;em&gt;deep clone&lt;/em&gt;&lt;/strong&gt; the nested object that actually needs to be changed. That's what we call structure sharing between 2 objects. You share the entire structure by internal references and only re create the node that needs modification. This may take an example for you to wrap your head around it.&lt;br&gt;&lt;/p&gt;


&lt;div class="runkit-element"&gt;
  &lt;code&gt;
    
// hidden setup JavaScript code goes in this preamble area

  &lt;/code&gt;
  &lt;code&gt;
    
const tea = {
  tbspSugar: 1,
  type: 'beverage',
  manufacturer: {
    name: 'Assam Tea Company',
    licensed: true
  }
}

// making a copy of tea but with an extra tbsp of sugar
const sweetestTea = {
  ...tea,
  tbspSugar: 2
}

// making a copy of tea but with another manufacturer name
const chineseTea = {
  ...tea,
  manufacturer: {
   ...tea.manufacturer,
    name: 'Chinese Tea Company'
  }
}

console.log(sweetestTea);
console.log(chineseTea);

  &lt;/code&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;center&gt;&lt;h6&gt;
&lt;a href="https://codepen.io/mayankav/pen/powzeGY"&gt;Try on Codepen&lt;/a&gt;&lt;h6&gt;&lt;/h6&gt;
&lt;/h6&gt;&lt;/center&gt;
&lt;br&gt;




&lt;p&gt;You see its not that difficult but only until it reaches like thousands of properties in an object and then when you need to modify some very very deeply nested object, it sure will break your fingers. If that wasn't enough trouble, a thought of mistakenly altering some other nested object may start bothering you. To avoid hassle when dealing with large chunks of objects, you may opt for libraries like &lt;a href="https://www.npmjs.com/package/immutable"&gt;immutable.js&lt;/a&gt; or &lt;a href="https://github.com/immerjs/immer"&gt;immer&lt;/a&gt;. I would highly recommed &lt;a href="https://dev.to/viebel/structural-sharing-with-7-lines-of-javascript-2dnh"&gt;this article by Yehonathan&lt;/a&gt; if you'd like to learn more about structural sharing. If you'd like to explore more on functional programming, &lt;a href="https://dev.to/mayankav/think-recursive-272h"&gt;give this a read&lt;/a&gt; to understand recursion from my point of view.‚Äç&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#originally-posted-here-"&gt;
  &lt;/a&gt;
  Originally Posted Here -
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://mayankav.webflow.io/blog/why-immutability"&gt;https://mayankav.webflow.io/blog/why-immutability&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>vue</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Flatten a nested array. Algorithms and Scripting</title>
      <author>Randy Rivera</author>
      <pubDate>Sun, 22 Aug 2021 20:35:29 +0000</pubDate>
      <link>https://dev.to/rthefounding/flatten-a-nested-array-algorithms-and-scripting-528j</link>
      <guid>https://dev.to/rthefounding/flatten-a-nested-array-algorithms-and-scripting-528j</guid>
      <description>&lt;ul&gt;
&lt;li&gt;I've been saving these posts for a while now. I would always want to post something that I myself understand as well. Well Today we have a problem that needs us to flatten a nested array. We should also account for different levels of nesting.&lt;/li&gt;
&lt;li&gt;Code:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function checkForArrayApproval(arr) {
  return arr;
}

checkForArrayApproval([1, [2], [3, [[4]]]]);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Answer:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function steamrollArray(arr) {
  let newArr = []
  // Loop over array contents
  for (let i = 0; i &amp;lt; arr.length; i++) {
    if (Array.isArray(arr[i])) {
      // Recursively flatten entries that are arrays
      //  and push into the newArr
      newArr.push(...steamrollArray(arr[i]));
    } else {
       // Copy contents that are not arrays
      newArr.push(arr[i]);
    }
  }
  return newArr;
}

// we could also do it this way:
//    while (arr.some(function(num) {
//      return Array.isArray(num)
//    })) {
//      let i = 0

//   arr = arr.flat()
//   i += 1
// }

//   return arr;
// }

console.log(steamrollArray([1, [2], [3, [[4]]]])); // will display [1, 2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#binary-code"&gt;
  &lt;/a&gt;
  Binary Code
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;In this following post we must return an English translated sentence of the passed binary string.&lt;/li&gt;
&lt;li&gt;Code:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function binaryCode(str) {
  return str;
}

binaryCode("01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Answer:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function binaryCode(str) {
  return str.split(" ").map(dataPoint =&amp;gt; {
    let characterPoint = parseInt(dataPoint, 2);
    let decipheredLetter = String.fromCharCode(characterPoint);
    return decipheredLetter;
  }).join("")
}

console.log(binaryCode("01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111")); will display Aren't bonfires fun!?

// 2    Binary numeral system   Used internally by nearly all computers, is base 2. The two digits are "0" and "1", expressed from switches displaying OFF and ON, respectively.

// The map() method creates a new array populated with the results of calling a provided function on every element in the calling array.

// Ex: 
// const array1 = [1, 4, 9, 16];

// // pass a function to map
// const map1 = array1.map(x =&amp;gt; x * 2);

// console.log(map1);
// // expected output: Array [2, 8, 18, 32];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#it-is-a-sunday-currently-415-in-the-afternoon-today-were-going-to-flatten-a-nested-array"&gt;
  &lt;/a&gt;
  It is a sunday, currently 4:15 in the afternoon, today we're going to flatten a nested array.
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Also don't forget that you must consider for different levels of nesting.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Code:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function nestedArr(arr) {
  return arr;
}

nestedArr([1, [2], [3, [[4]]]]);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Answer:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function nestedArr(arr) {
  let newArr = []
  for (let i = 0; i &amp;lt; arr.length; i++) {
    if (Array.isArray(arr[i])) { // wants to check each element if it is an Array or not.
      newArr = newArr.concat(nestedArr(arr[i])) // we're using recursion because we don't know how many levels it will be so we want it to call itself whenever it is needed. call for each array, if it is we go deeper in the nested levels
    } else {
    newArr.push(arr[i]) // if it is not an array (base case)
    }
  }
  return newArr;
}
console.log(nestedArr([1, [2], [3, [[4]]]])); will display [1, 2, 3, 4] 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>devops</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Google dorks for WordPress</title>
      <author>Julien Maury</author>
      <pubDate>Sun, 22 Aug 2021 20:21:38 +0000</pubDate>
      <link>https://dev.to/jmau111/google-dorks-for-wordpress-2mi8</link>
      <guid>https://dev.to/jmau111/google-dorks-for-wordpress-2mi8</guid>
      <description>&lt;p&gt;Google is a gigantic word wild database. Finding a vulnerable WordPress website in a few seconds can be as simple as a Google search.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h2&gt;

&lt;p&gt;As usual with ethical hacking in general and depending on your country, using Google dorks to find vulnerable websites can lead to lawsuits!&lt;/p&gt;

&lt;p&gt;On no account should you use Google dorks to download logs, databases, and other resources you are not supposed to access, even in a &lt;em&gt;white hat perspective&lt;/em&gt; or for test purposes.&lt;/p&gt;

&lt;p&gt;I know that's lame, and most people do it with the best intentions, but remember that can be illegal, and don't believe all vulnerable companies and organizations will treat you well if they know you have access to their credentials.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#google-dorks-in-short"&gt;
  &lt;/a&gt;
  Google dorks in short
&lt;/h2&gt;

&lt;p&gt;It's called &lt;em&gt;Google dorking&lt;/em&gt; and it consists of &lt;strong&gt;advanced Google search queries with unique keywords and operators&lt;/strong&gt; to find sensitive information and security breaches.&lt;/p&gt;

&lt;p&gt;For example, if you want websites that use the Woocommerce plugin, you may &lt;em&gt;google&lt;/em&gt; the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;inurl:"/wp-content/plugins/woocommerce"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's pretty helpful when known vulnerabilities are revealed for specific plugins.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#read-my-logs"&gt;
  &lt;/a&gt;
  Read my logs üòì
&lt;/h2&gt;

&lt;p&gt;Google this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;inurl:wp-content/debug.log 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll see WordPress websites that have logs enabled in production in a publically accessible directory!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#please-download-my-sql-dumps"&gt;
  &lt;/a&gt;
  Please, download my SQL dumps üò±
&lt;/h2&gt;

&lt;p&gt;You can even find SQL dumps with Google Dorks. Of course, not all WordPress installations have such a big security hole, but it happens:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;filetype:sql intext:wp_users
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you have the database, you do pretty much everything you want, including finding user passwords by decrypting MD5 strings.&lt;/p&gt;

&lt;p&gt;Note that it can be slightly more subtle:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;filetype:tar.gz site:mywebsite.com
filetype:sql site:mywebsite.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above dork query looks for publically accessible backup files in mywebsite.com. If you accidentally saved a backup in a public directory and forgot to remove it, that can turn nasty.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-database-for-google-dorks"&gt;
  &lt;/a&gt;
  A database for Google dorks ü§òüèª
&lt;/h2&gt;

&lt;p&gt;Instead of listing all kinds of Google dorks here, I prefer you go to &lt;a href="https://www.exploit-db.com/google-hacking-database"&gt;exploit-db.com&lt;/a&gt; to see it by yourself. Just type "wordpress" in the search form, and you'll get tones of Google dorks!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-fix-it-%EF%B8%8F"&gt;
  &lt;/a&gt;
  How to fix it ‚ö°Ô∏è
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#test-your-website"&gt;
  &lt;/a&gt;
  Test your website
&lt;/h3&gt;

&lt;p&gt;Run dork queries against your website, and you'll see if there's something wrong.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#request-removal"&gt;
  &lt;/a&gt;
  Request removal
&lt;/h3&gt;

&lt;p&gt;You can request removal with the Removals Tool, which enables you to temporarily block pages from Google Search results on sites that you own.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://support.google.com/webmasters/answer/1663419?hl=en"&gt;Source: Google support&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disable-directory-browsing"&gt;
  &lt;/a&gt;
  Disable directory browsing
&lt;/h3&gt;

&lt;p&gt;Most of the time, those websites are misconfigured so that you can browse the &lt;code&gt;wp-content&lt;/code&gt; directory. Any website should disable directory browsing with, for example, this line in the &lt;code&gt;.htaccess&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Options -Indexes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#forget-the-raw-robotstxt-endraw-file"&gt;
  &lt;/a&gt;
  Forget the &lt;code&gt;robots.txt&lt;/code&gt; file
&lt;/h3&gt;

&lt;p&gt;While the &lt;code&gt;robots.txt&lt;/code&gt; file is meant for search engines, it's publically accessible, so it's easy for hackers to use this file to discover directories and files.&lt;/p&gt;

&lt;p&gt;You might end up giving them sensitive information!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disable-logs-and-debugging"&gt;
  &lt;/a&gt;
  Disable logs and debugging
&lt;/h3&gt;

&lt;p&gt;The production environment is not meant for logging errors and debugging. You can add the following code in your &lt;code&gt;wp-config.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nb"&gt;ini_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'display_errors'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'Off'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;ini_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'error_reporting'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;E_ALL&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'WP_DEBUG'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'WP_DEBUG_DISPLAY'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#install-a-security-plugin"&gt;
  &lt;/a&gt;
  Install a security plugin
&lt;/h3&gt;

&lt;p&gt;Most security plugins ensure your installation is safer, making all the quick fixes we just saw for you, protecting sensitive directories, and scanning your website regularly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap up
&lt;/h2&gt;

&lt;p&gt;Fortunately, many web hosting providers have robust default configurations and pre-built CMS integrations to prevent harmful situations.&lt;/p&gt;

&lt;p&gt;However, Google dorks for WordPress are still a common concern in 2021. You'd be surprised how many &lt;code&gt;.env&lt;/code&gt; files and credentials you can access with a simple search.&lt;/p&gt;

</description>
      <category>wordpress</category>
      <category>cybersecurity</category>
    </item>
    <item>
      <title>Code your own vue</title>
      <author>Gil Rudolf H√§rdi</author>
      <pubDate>Sun, 22 Aug 2021 19:46:28 +0000</pubDate>
      <link>https://dev.to/ghaerdi/code-your-own-vue-50mg</link>
      <guid>https://dev.to/ghaerdi/code-your-own-vue-50mg</guid>
      <description>&lt;p&gt;Code your own vue is a series of post that is going to show you how create your own vue for learning purposes, the implementation of functionalities try to be most simple as can be.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-ideas-of-this-title-are"&gt;
  &lt;/a&gt;
  The ideas of this title are:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Get a &lt;strong&gt;better&lt;/strong&gt; understanding of the main concepts of popular frameworks or libraries like vue, react, angular and so on.&lt;/li&gt;
&lt;li&gt;Be a cool coder that has did your own vue... a simple one like a cheap toy, but is your own vue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider that I can be wrong or vue possibly handle some concepts in other ways, you can use the comments section if you think I'm wrong.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-you-need-to-know"&gt;
  &lt;/a&gt;
  What you need to know:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Javascript&lt;/li&gt;
&lt;li&gt;DOM&lt;/li&gt;
&lt;li&gt;Vue v2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I want to be concise, but also I will add some references links to documentation if I use something that someone who start learning javascript may don't know.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#posts"&gt;
  &lt;/a&gt;
  Posts
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/ghaerdi/make-your-own-vue-rendering-and-states-jb6"&gt;Rendering and states&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#repository"&gt;
  &lt;/a&gt;
  Repository
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/ghaerdi/petite-vue"&gt;code your own vue repo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>vue</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>El mundo de las Funciones en JavaScript </title>
      <author>Alejandra Melendez</author>
      <pubDate>Sun, 22 Aug 2021 19:18:29 +0000</pubDate>
      <link>https://dev.to/alecodesdancer/el-mundo-de-las-funciones-en-javascript-16n</link>
      <guid>https://dev.to/alecodesdancer/el-mundo-de-las-funciones-en-javascript-16n</guid>
      <description>&lt;p&gt;Si pudiera definir "JavaScript" con una sola palabra ser√≠a "&lt;strong&gt;versatilidad&lt;/strong&gt;". Nosotros podemos crear c√≥digo de maneras diferentes usando los recursos que este lenguaje nos ofrece. Un claro ejemplo son las diferentes maneras de declarar una funci√≥n. Esto puede ser confuso cuando comienzas a programar en JavaScript, as√≠ que es hoy vamos a analizar algunas formas de declarar funciones y en qu√© casos es mejor usarlas.&lt;br&gt;
Me tom√© la libertad de no traducir ciertos conceptos y nombres porque sent√≠ que ser√≠a m√°s confuso, as√≠ que sorry por mi spanglishüòã.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#qu%C3%A9-es-una-funci%C3%B3n"&gt;
  &lt;/a&gt;
  ¬øQu√© es una funci√≥n?ü§î
&lt;/h1&gt;

&lt;p&gt;Comenzamos con lo m√°s importante, una funci√≥n es un sub-programa que realiza una tarea espec√≠fica, puede tomar una &lt;em&gt;entrada&lt;/em&gt;, la cual llamamos par√°metros y retornar una &lt;em&gt;salida&lt;/em&gt;. En JavaScript, las funciones son objetos de primera clase (&lt;em&gt;first-class objects&lt;/em&gt;). Estas pueden ser manipuladas y asignadas as√≠ como cualquier otro objeto. Por default, si tu no agregas un &lt;strong&gt;return&lt;/strong&gt;, el cual es usado si quieres regresar algo, las funciones regresan el valor de "&lt;strong&gt;undefined&lt;/strong&gt;".&lt;/p&gt;

&lt;p&gt;Existen diferentes formas de declarar una funci√≥n, en este caso, nosotros vamos a enfocar en 6 maneras, las cuales explicar√© a continuaci√≥nüëá.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-function-declaration"&gt;
  &lt;/a&gt;
  1. Function Declaration
&lt;/h2&gt;

&lt;p&gt;La manera m√°s com√∫n de definir una funci√≥n es usando la palabra clave &lt;strong&gt;function&lt;/strong&gt; seguida del nombre, los par√°metros de entrada -los cuales son opcionales- entre par√©ntesis y separados por comas, as√≠ como las instrucciones encerradas en llaves &lt;em&gt;{}&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Un punto importante de las &lt;em&gt;Function Declaration&lt;/em&gt; es que se cargan antes de que se ejecute cualquier c√≥digo, por lo que se pueden llamar incluso antes de su declaraci√≥nüò±. Este comportamiento es conocido como &lt;strong&gt;Hoisting&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tF6koAa2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqyrkv7c2psfow5dgik1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tF6koAa2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqyrkv7c2psfow5dgik1.png" alt="01"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cu%C3%A1ndo-podemos-usarlas"&gt;
  &lt;/a&gt;
  ¬øCu√°ndo podemos usarlas?
&lt;/h3&gt;

&lt;p&gt;Al ser la forma m√°s f√°cil y com√∫n, es mi primer opci√≥n cuando quiero crear una funci√≥n normal que necesita ser llamada una o m√°s veces üòå.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-function-expression"&gt;
  &lt;/a&gt;
  2. Function Expression
&lt;/h2&gt;

&lt;p&gt;La diferencia entre la forma anterior y √©sta es que las &lt;em&gt;function expression&lt;/em&gt; pueden ser asignadas a una variable y el nombre es opcional. Funciones que no tienen nombre son llamadas &lt;em&gt;anonymous functions&lt;/em&gt;. Existe m√°s de una forma de declararlas y esta es una de ellas.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7G2jx_ma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ji8i59rr6fzm8bui7p04.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7G2jx_ma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ji8i59rr6fzm8bui7p04.png" alt="02"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cu%C3%A1ndo-podemos-usarlas"&gt;
  &lt;/a&gt;
  ¬øCu√°ndo podemos usarlas?
&lt;/h3&gt;

&lt;p&gt;Las &lt;em&gt;function expressions&lt;/em&gt; son comunes cuando necesitamos pasar dicha funci√≥n como un par√°metro a otra funci√≥n. Esto com√∫nmente se llama &lt;strong&gt;callback&lt;/strong&gt; en JavaScript. Tambi√©n es com√∫n usarlas como &lt;em&gt;closure&lt;/em&gt;, es decir, anidamiento de funciones que les da acceso a las definiciones dentro de la funci√≥n externa. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-funciones-de-flecha-arrow-function"&gt;
  &lt;/a&gt;
  3. Funciones de Flecha (Arrow Function)
&lt;/h2&gt;

&lt;p&gt;Una de las nuevas caracter√≠sticas que nos trajo &lt;em&gt;ES6&lt;/em&gt; fueron las &lt;strong&gt;Arrow function&lt;/strong&gt;. Al igual que las function expressions, √©stas son funciones an√≥nimas que pueden ser asignadas a una variable, la diferencia es que en las arrow functions, omitimos la palabra clave "function", por lo que lo primero que agregamos es la lista de par√°metros, si no hay ninguno se indica con &lt;em&gt;( )&lt;/em&gt;. En caso de que solo haya un par√°metro, los par√©ntesis no son necesarios. Luego ponemos el s√≠mbolo &lt;em&gt;=&amp;gt;&lt;/em&gt; y las llaves &lt;em&gt;{}&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A diferencia de los casos anteriores, las arrow functions no crean su propio &lt;em&gt;scope&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_YOGkp6C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yhll63qlbfn4l22i7ipn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_YOGkp6C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yhll63qlbfn4l22i7ipn.png" alt="arrowFunctions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cu%C3%A1ndo-podemos-usarlas"&gt;
  &lt;/a&gt;
  ¬øCu√°ndo podemos usarlas?
&lt;/h3&gt;

&lt;p&gt;Puedes sacar el mejor provecho de las Arrow function cuando necesites crear funciones simples que devuelvan algo concreto, ya que ahorrar√≠as l√≠neas de c√≥digo üí™. Del mismo modo, si requieres que tu funci√≥n est√© ligada al scope global y no necesitas que tenga su propio scope, las arrow function ser√°n tus mejores amigas‚ù§Ô∏è.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-iife-immediately-invoked-function-expression"&gt;
  &lt;/a&gt;
  4. IIFE (Immediately Invoked Function Expression)
&lt;/h2&gt;

&lt;p&gt;Como su nombre lo indica, las funciones IIFE se ejecutan inmediatamente despu√©s de su declaraci√≥n. Como son &lt;em&gt;funciones an√≥nimas&lt;/em&gt; sin estar asignadas a nada, no son accesibles para ser llamadas posteriormente. Para declararlas solo debemos crear una funci√≥n an√≥nima entre par√©ntesis &lt;em&gt;()&lt;/em&gt; y seguida de &lt;em&gt;()&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hl7naDmH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y92c9hc8q5u5jpmg8e30.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hl7naDmH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y92c9hc8q5u5jpmg8e30.png" alt="IIFE"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cu%C3%A1ndo-podemos-usarlas"&gt;
  &lt;/a&gt;
  ¬øCu√°ndo podemos usarlas?
&lt;/h3&gt;

&lt;p&gt;Si necesitas crear una funci√≥n que no se usar√° en el futuro, para evitar contaminar tu scope global, puedes usar una IIFE. Al permanecer en el anonimato, √©stas se usan y se olvidan. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-shorthand-method-definition"&gt;
  &lt;/a&gt;
  5. Shorthand method definition
&lt;/h2&gt;

&lt;p&gt;Nuestra siguiente forma es tambi√©n una nueva caracter√≠stica de &lt;em&gt;ES6&lt;/em&gt; donde declaramos la funci√≥n dentro de un objeto. No es necesario agregar la palabra clave de &lt;em&gt;function&lt;/em&gt;, por lo que solo se requieren el nombre de la funci√≥n, los par√°metros y las llaves.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S3--UJry--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nw6rwq5alfiv859odnej.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S3--UJry--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nw6rwq5alfiv859odnej.png" alt="ES6"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cu%C3%A1ndo-podemos-usarlas"&gt;
  &lt;/a&gt;
  ¬øCu√°ndo podemos usarlas?
&lt;/h3&gt;

&lt;p&gt;Este m√©todo es una manera f√°cil de agregar una funci√≥n como propiedad de un objeto y, honestamente, se ve bastante bien, porque es ordenado y limpio üíÅ‚Äç‚ôÄÔ∏è.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-function-constructor"&gt;
  &lt;/a&gt;
  6. Function constructor
&lt;/h2&gt;

&lt;p&gt;Debido a que las funciones son objetos &lt;em&gt;Function&lt;/em&gt;, podemos crearlas usando el operador &lt;strong&gt;new&lt;/strong&gt;. Para declararlas debemos pasar nuestros par√°metros como argumentos y nuestro c√≥digo ser√° el √∫ltimo argumento que reciba, todo en formato &lt;strong&gt;string&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lpFsZ2yO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5saaqq5erfnlvdun46hy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lpFsZ2yO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5saaqq5erfnlvdun46hy.png" alt="6"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cu%C3%A1ndo-podemos-usarlas-o-no"&gt;
  &lt;/a&gt;
  ¬øCu√°ndo podemos usarlas? ¬øO no? üò∞
&lt;/h3&gt;

&lt;p&gt;Honestamente, no recomiendo utilizar este m√©todo, ya que, al requerir que el cuerpo de la funci√≥n sea de tipo &lt;em&gt;string&lt;/em&gt;, puede causar problemas de optimizaci√≥n y una mayor probabilidad de errores ‚ùåüêû.&lt;/p&gt;

&lt;p&gt;Como vimos, existen diferentes formas de declarar funciones en JavaScript, cada una con sus ventajas üëç y desventajas üëé, por lo que depende de nosotros analizar el prop√≥sito de nuestra funci√≥n antes de crearla y as√≠ tomar la mejor decisi√≥n. Te invito a que te diviertas prob√°ndolas y espero esta informaci√≥n te sea de ayuda üåü.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#referencias"&gt;
  &lt;/a&gt;
  Referencias
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Functions"&gt;Funciones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/es/docs/Web/JavaScript/Guide/Functions"&gt;Definici√≥n de  funciones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/es/docs/Web/JavaScript/Closures"&gt;Closures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/es/docs/Glossary/Hoisting"&gt;Hoisting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gracias por leer ‚ù§Ô∏è!&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://twitter.com/alecodesdancer"&gt;Twitterüåü&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://alecodesdancer.medium.com"&gt;Mediumüìñ&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://github.com/alecodesdancer/"&gt;Githubüíª&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://www.instagram.com/alecodesdancer/"&gt;Instagramüíú&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>spanish</category>
    </item>
    <item>
      <title>React-query series Part 3: Data fetching with the useQuery hook.</title>
      <author>Emmanuel Chinonye Nnajiofor</author>
      <pubDate>Sun, 22 Aug 2021 19:07:05 +0000</pubDate>
      <link>https://dev.to/nnajiforemma10/react-query-series-part-3-data-fetching-with-the-usequery-hook-4n22</link>
      <guid>https://dev.to/nnajiforemma10/react-query-series-part-3-data-fetching-with-the-usequery-hook-4n22</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Cover image by &lt;a href="https://blog.logrocket.com/author/lawrenceoputa/"&gt;&lt;strong&gt;Lawrence Eagles&lt;/strong&gt;&lt;/a&gt; in the article: &lt;a href="https://blog.logrocket.com/whats-new-in-react-query-3/"&gt;&lt;strong&gt;What‚Äôs new in React Query 3&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hey everyone !&lt;/p&gt;

&lt;p&gt;I'm back again. I am always grateful for the encouragement. Thank you for the üíñ, for taking the time to read the lengthy &lt;a href="https://dev.to/nnajiforemma10/react-query-series-part-2-queryclient-configuration-18g6"&gt;&lt;strong&gt;Part Two: QueryClient configuration&lt;/strong&gt;&lt;/a&gt; of this series. To my new followers; Thank you! I'll do my best not to disappoint you.&lt;/p&gt;

&lt;p&gt;In part two, we talked about overriding some of the defaults that come with &lt;code&gt;react-query&lt;/code&gt; by setting our custom defaults for both &lt;code&gt;queries&lt;/code&gt; and &lt;code&gt;mutations&lt;/code&gt;. We set our custom defaults on such options like &lt;code&gt;retry&lt;/code&gt; , &lt;code&gt;staleTime&lt;/code&gt;, &lt;code&gt;cacheTime&lt;/code&gt;, &lt;code&gt;refecthOnMount&lt;/code&gt; and a couple of others for our &lt;code&gt;queries&lt;/code&gt; and &lt;code&gt;retry&lt;/code&gt; for &lt;code&gt;mutations&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#point-0"&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#point-1"&gt;The useQuery hook&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#point-1a"&gt;Fetching data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#point-1b"&gt;Passing variables to query functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#point-1c"&gt;Overriding query defaults&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#point-2"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In this part, we will be learning how to fetch data from an API using the &lt;code&gt;useQuery&lt;/code&gt; hook. I promised to show you how we can override the defaults we set earlier, so we will have a look at that too. Always remember to use the table of contents above to jump to sections relevant to you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-usequery-hook"&gt;
  &lt;/a&gt;
  The useQuery hook &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;We start by installing &lt;a href="https://www.npmjs.com/package/axios"&gt;axios&lt;/a&gt; and refactoring a bit.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i axios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our &lt;code&gt;QueryClient&lt;/code&gt; goes to a new file &lt;code&gt;./src/util/queryClient.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClientConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;defaultOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;queries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;staleTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="c1"&gt;// 30 seconds&lt;/span&gt;
        &lt;span class="na"&gt;cacheTime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//30 seconds&lt;/span&gt;
        &lt;span class="na"&gt;refetchOnMount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;always&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;refetchOnWindowFocus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;always&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;refetchOnReconnect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;always&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;refetchInterval&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//30 seconds&lt;/span&gt;
        &lt;span class="na"&gt;refetchIntervalInBackground&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;suspense&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

 &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;QueryClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queryClientConfig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you just got here, we explained this snippet &lt;a href="https://dev.to/nnajiforemma10/react-query-series-part-2-queryclient-configuration-18g6"&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We clean our &lt;code&gt;App.js&lt;/code&gt; thus&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ReactQueryDevtools&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-query/devtools&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;queryClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./util/queryClient&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


 &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;
           &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
             &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* The rest of your application */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
             &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ReactQueryDevtools&lt;/span&gt; &lt;span class="nx"&gt;initialIsOpen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;           &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/QueryClientProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will also create a &lt;code&gt;queryKeys.js&lt;/code&gt; file at &lt;code&gt;./src/util/queryKeys.js&lt;/code&gt;.&lt;br&gt;
This file will host all the query keys for our application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchPostsKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FETCH_POSTS&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a &lt;code&gt;fetchPosts.service.js&lt;/code&gt; file at &lt;code&gt;./src/services/fetchPosts.service.js&lt;/code&gt; and create your simple async function to fetch a list of posts.&lt;br&gt;
We will be using the &lt;a href="https://jsonplaceholder.typicode.com"&gt;JSONPlaceholder&lt;/a&gt; REST API for this demo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * @desc fetch a list of posts
 */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://jsonplaceholder.typicode.com/posts`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#fetching-data"&gt;
  &lt;/a&gt;
  Fetching data &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Create a &lt;code&gt;Posts.js&lt;/code&gt; component at &lt;code&gt;./src/components/Posts.js&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Remember to import your &lt;code&gt;Posts.js&lt;/code&gt; component to your &lt;code&gt;App.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;

 &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Posts&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ReactQueryDevtools&lt;/span&gt; &lt;span class="nx"&gt;initialIsOpen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/QueryClientProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Posts.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fetchPosts&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../services/fetchPosts.service&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fetchPostsKey&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../util/queryKeys&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;refetch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fetchPostsKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fetchPosts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Loading&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isError&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;An&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;fetching&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Posts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;useQuery&lt;/code&gt; hook accepts a query key as its first argument and the query function as its's second argument.&lt;br&gt;
The query key is required, the query function also is required as there was not default query function defined for our &lt;code&gt;queries&lt;/code&gt; in &lt;code&gt;QueryClient&lt;/code&gt;. Let's take a quick brush at the items in the destructured object &lt;code&gt;useQuery&lt;/code&gt; returns to us.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;isLoading&lt;/code&gt;: It is a &lt;code&gt;boolean&lt;/code&gt; value that returns &lt;code&gt;true&lt;/code&gt; when the query has no data and is currently fetching and &lt;code&gt;false&lt;/code&gt; when not. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;isError&lt;/code&gt;: Also a &lt;code&gt;boolean&lt;/code&gt; value. It return &lt;code&gt;true&lt;/code&gt; when the query attempt results in an error.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;isSuccess&lt;/code&gt;: Returns &lt;code&gt;true&lt;/code&gt; if the query has received a response with no errors and is ready to display its data. &lt;code&gt;isSuccess&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; when query is not yet resolved or results in an error.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;refetch&lt;/code&gt; : This is a function that manually refetches the query.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;remove&lt;/code&gt; : This function is used to manually remove the query from cache.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;data&lt;/code&gt; :  It is the response from the last successful query. &lt;code&gt;data&lt;/code&gt; will be &lt;code&gt;undefined&lt;/code&gt; if query fails for the first time.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;error&lt;/code&gt; :  It is the error response from your query. It is defined when your query is in an &lt;code&gt;isError&lt;/code&gt; state.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;useQuery&lt;/code&gt; hook returns more values in the destructured object than described here, but this few I chose for the scope of this article. You can read more about the &lt;code&gt;useQuery&lt;/code&gt; hook &lt;a href="https://react-query.tanstack.com/reference/useQuery"&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#passing-variables-to-a-query-function"&gt;
  &lt;/a&gt;
  Passing variable(s) to a query function &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;So, what if you want to pass a variable or variables to your query function? E.g. you have a function that fetches a single post and it requires you to pass in a post &lt;code&gt;id&lt;/code&gt;; What do you do?&lt;br&gt;
Let's see how it is done.&lt;/p&gt;

&lt;p&gt;We will a new key entry in a &lt;code&gt;queryKeys.js&lt;/code&gt; file at &lt;code&gt;./src/util/queryKeys.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchSinglePostKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FETCH_SINGLE_POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create also a &lt;code&gt;fetchSinglePost.service.js&lt;/code&gt; file at &lt;code&gt;./src/services/fetchSinglePost.service.js&lt;/code&gt; and create your simple async function to fetch a single post by &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fetchSinglePost.service.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * @desc fetches a single post
 */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchSinglePost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;queryKey&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;queryKey&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://jsonplaceholder.typicode.com/posts/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Post.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fetchSinglePost&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../services/fetchSinglePost .service&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fetchSinglePostKey&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../util/queryKeys&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="c1"&gt;// fetching the post with the id of 1&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;refetch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;fetchSinglePostKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;fetchSinglePost&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;


  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Loading&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isError&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;An&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;fetching&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we are no more using a &lt;code&gt;string&lt;/code&gt; value for our query key but an &lt;code&gt;array&lt;/code&gt;, passing in the query string first and the post &lt;code&gt;id&lt;/code&gt; as required by our query function &lt;code&gt;fetchSinglePost.service.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;fetchSinglePost&lt;/code&gt; function declared in &lt;code&gt;useQuery&lt;/code&gt; hook is passed in a context, this context has &lt;code&gt;queryKey&lt;/code&gt; &lt;code&gt;array&lt;/code&gt; nested in it. This &lt;code&gt;queryKey&lt;/code&gt; array contains your query string as the first item in the array and your &lt;code&gt;id&lt;/code&gt; variable for fetching our single post.&lt;/p&gt;

&lt;p&gt;Remember to import your &lt;code&gt;Post.js&lt;/code&gt; component to your &lt;code&gt;App.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;

 &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;QueryClientProvider&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;queryClient&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
               &lt;span class="p"&gt;...&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ReactQueryDevtools&lt;/span&gt; &lt;span class="nx"&gt;initialIsOpen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/QueryClientProvider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#overriding-query-defaults"&gt;
  &lt;/a&gt;
  Overriding query defaults &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;We have seen two demonstrations using &lt;code&gt;useQuery&lt;/code&gt; but don't forget that they all are operating within the &lt;code&gt;queries&lt;/code&gt; default we set earlier. To override some of the global configurations, we pass an object as a third argument to the &lt;code&gt;useQuery&lt;/code&gt; hook. Every option you declare a new value, that option is overridden for that &lt;code&gt;useQuery&lt;/code&gt; instance only.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isSuccess&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;refetch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;fetchSinglePostKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;fetchSinglePost&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;refetchInterval&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="c1"&gt;//3 seconds&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What this snippet above implies is that, although we configured &lt;code&gt;react-query&lt;/code&gt; globally to refetch queries every 30 seconds, This particular query will refetch every 3 seconds; breaking away from the global configurations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The returned data from our queries are stored in a cache. In the next part, we will discuss how the to interact with this cache.&lt;br&gt;
Thank you all for your support. If you are beginner and haven't written something, do that today! Please give me a üíñ if this post or part of it has helped you. Comments are welcomed too.&lt;br&gt;
Follow me on &lt;a href="https://twitter.com/NnajioforEmma10"&gt;twitter @NnajioforEmma10&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#point-0"&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#point-1"&gt;The useQuery hook&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#point-1a"&gt;Fetching data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#point-1b"&gt;Passing variables to query functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#point-1c"&gt;Overriding query defaults&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#point-2"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>hooks</category>
    </item>
    <item>
      <title>Do not expose database ids in your URLs</title>
      <author>Khalyomede</author>
      <pubDate>Sun, 22 Aug 2021 18:36:45 +0000</pubDate>
      <link>https://dev.to/khalyomede/do-not-expose-database-ids-in-your-urls-567</link>
      <guid>https://dev.to/khalyomede/do-not-expose-database-ids-in-your-urls-567</guid>
      <description>&lt;p&gt;When developing web apps, we often rely on fetching informations from the database. Frameworks offer a way to make this easy thanks to &lt;a href="https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping"&gt;ORMs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Most of the time, the ORM will find your model using the primary key as a reliable identifier. On the vast majority, primary keys are auto incremented integers.&lt;/p&gt;

&lt;p&gt;Your URLs then look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://example.com/cart/12
https://example.com/user/15/post/41
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Providing an incorrect or faulty authorization layer can create data leaks: users become able to navigate from data to data, which is something we would not want to allow if it is about sensitive data like users personal info.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#obfuscating-the-identifier"&gt;
  &lt;/a&gt;
  Obfuscating the identifier
&lt;/h2&gt;

&lt;p&gt;An easy way to mitigate this security breach is to use a key that is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hard to predict&lt;/li&gt;
&lt;li&gt;Random enough to be able to create a lot of items while keeping the unicity between them&lt;/li&gt;
&lt;li&gt;Easy to generate from your code and the database&lt;/li&gt;
&lt;li&gt;Checkable (we can know by analyzing its integrity if it is valid or not)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for us, &lt;a href="https://en.wikipedia.org/wiki/Universally_unique_identifier"&gt;UUIDs&lt;/a&gt; are a very good candidate for it. It checks all the points above, and are very easy to use thanks to a wide range of package ready for use.&lt;/p&gt;

&lt;p&gt;Your URLS now become harder to predict, which mitigate any developers mistake regarding authorization policies in your app:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://example.com/cart/f6e4208f-5df4-466e-9225-01f296e2a09c
https://example.com/user/b1b44b12-34bc-4ed7-a666-9657b8b8c31b/post/e530d034-42f7-467b-91e3-1cc9313312eb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#example-on-a-laravel-app"&gt;
  &lt;/a&gt;
  Example on a Laravel app
&lt;/h2&gt;

&lt;p&gt;In order to practice developing a &lt;a href="https://laravel.com/"&gt;Laravel&lt;/a&gt; package, and using my first ever &lt;a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions"&gt;Github Workflow&lt;/a&gt;, I created a package to make this job a breeze.&lt;/p&gt;

&lt;p&gt;Here is how you can use &lt;a href="https://github.com/khalyomede/laravel-eloquent-uuid-slug#compatibility-table"&gt;khalyomede/laravel-eloquent-uuid-slug&lt;/a&gt; in your app now.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#install-the-package"&gt;
  &lt;/a&gt;
  Install the package
&lt;/h3&gt;

&lt;p&gt;First, head in your console, and type this command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require khalyomede/laravel-eloquent-uuid-slug
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#add-your-slug-column-to-your-migration"&gt;
  &lt;/a&gt;
  Add your slug column to your migration
&lt;/h3&gt;

&lt;p&gt;Then, go to the &lt;a href="https://laravel.com/docs/8.x/migrations"&gt;migration&lt;/a&gt; of the &lt;a href="https://laravel.com/docs/8.x/eloquent"&gt;model&lt;/a&gt; of your choice, or create a new one if it has already been installed, and add the slug column.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Database\Migrations&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Models\Cart&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Migrations\Migration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Schema\Blueprint&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Support\Facades\Schema&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AddSlugColumnToCartTable&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Migration&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'carts'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Blueprint&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nc"&gt;Cart&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;addSlugColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;down&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'carts'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Blueprint&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nc"&gt;Cart&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;dropSlugColumn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// available soon in v0.2.0&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#add-the-trait-to-your-model"&gt;
  &lt;/a&gt;
  Add the trait to your model
&lt;/h3&gt;

&lt;p&gt;This is the last step, which will help configure how your model is retreived in your routes using &lt;a href="https://laravel.com/docs/8.x/routing#route-model-binding"&gt;Route model binding&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Models&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Eloquent\Model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Khalyomede\EloquentUuidSlug\Sluggable&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cart&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Model&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Sluggable&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#use-it-in-your-controller"&gt;
  &lt;/a&gt;
  Use it in your controller
&lt;/h3&gt;

&lt;p&gt;Now you are ready to take advantage of the package. The great thing with it is that your code does not change! You can keep using the &lt;code&gt;route()&lt;/code&gt; method like you are used to.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// routes/web.php&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Models\Cart&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Http\RedirectResponse&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Http\Request&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Support\Facades\Route&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\View\View&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"cart/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;cart&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Cart&lt;/span&gt; &lt;span class="nv"&gt;$cart&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"cart.show"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;"cart"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$cart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"saveCartRoute"&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"cart.store"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$cart&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"cart.show"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"cart/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;cart&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Request&lt;/span&gt; &lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Cart&lt;/span&gt; &lt;span class="nv"&gt;$cart&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;RedirectResponse&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nv"&gt;$cart&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$request&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;only&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"cart.show"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$cart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"cart.store"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And voil√†! This package will no interfer with your existing logic as you can see. The only thing that changes is now your routes are not exposed.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nf"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"cart.show"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$cart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// https://example.com/cart/398e76a7-7c16-467c-93a8-04c06c6df703&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;While this solution is not a magic way to resolve the initial problem of data leak, I find it is a very easy actionable mecanism to reduce the possibilities for malicious users to trick your system.&lt;/p&gt;

&lt;p&gt;This does not prevent you to add an authorization or guard mecanism, like &lt;a href="https://laravel.com/docs/8.x/authorization#creating-policies"&gt;Laravel Policies&lt;/a&gt; for example. For example, if a user navigates to a cart that have not been created by him/her, should not be able to view it.&lt;/p&gt;

&lt;p&gt;Other folks here already talked about this subject, so make sure to give it a go if you want to read more about using UUIDs:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/rahulbanerjee99" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VIpJH_Yn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--gKAChxw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/519143/04968747-ae72-43c8-bb92-ec8f0698f035.png" alt="rahulbanerjee99"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/rahulbanerjee99/4-packages-to-generate-uuids-in-javascript-lc1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;4 packages to generate UUIDs in JavaScript&lt;/h2&gt;
      &lt;h3&gt;Rahul Banerjee „Éª Aug 16 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;




&lt;div class="ltag__link"&gt;
  &lt;a href="/jeroenvanrensen" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--miAH6eSG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--0VTCOz8j--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/569791/63e6de00-55cf-4847-8046-c930bcd085f3.jpeg" alt="jeroenvanrensen"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jeroenvanrensen/why-you-shouldn-t-expose-your-incrementing-ids-57lc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Why you shouldn't expose your incrementing IDs&lt;/h2&gt;
      &lt;h3&gt;Jeroen van Rensen „Éª Mar 7 „Éª 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#laravel&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#security&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/jeroenvanrensen" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--miAH6eSG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--0VTCOz8j--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/569791/63e6de00-55cf-4847-8046-c930bcd085f3.jpeg" alt="jeroenvanrensen"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jeroenvanrensen/how-to-use-uuids-in-urls-in-laravel-1ja7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to use UUIDs in URLs in Laravel&lt;/h2&gt;
      &lt;h3&gt;Jeroen van Rensen „Éª Mar 10 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#laravel&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#security&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#uuid&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Happy URL hardening!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>security</category>
      <category>php</category>
    </item>
    <item>
      <title>How to Develop, Build &amp; Deploy a REACT app with Authentication using AWS Amplify</title>
      <author>amlan</author>
      <pubDate>Sun, 22 Aug 2021 18:35:12 +0000</pubDate>
      <link>https://dev.to/amlana24/how-to-develop-build-deploy-a-react-app-with-authentication-using-aws-amplify-3k43</link>
      <guid>https://dev.to/amlana24/how-to-develop-build-deploy-a-react-app-with-authentication-using-aws-amplify-3k43</guid>
      <description>&lt;p&gt;Recently I started reading about AWS Amplify and found it very interesting. I was very impressed to see how easily one can deploy a full stack React app (supports more frameworks) using the Amplify framework. So I started learning about it more and how it can be leveraged in real life scenarios.&lt;/p&gt;

&lt;p&gt;This post is from my initial learning of the basic framework. The framework itself is vast and lots of options to explore. I took a part of the framework which will enable you to quickly stand up a React app if you want to use Amplify.  &lt;/p&gt;

&lt;p&gt;For more details visit: &lt;a href="https://amlanscloud.com/amplifyreact/"&gt;https://amlanscloud.com/amplifyreact/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>react</category>
      <category>devops</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Blitz.js: The Fullstack React Framework Part 2</title>
      <author>Ashik Chapagain</author>
      <pubDate>Sun, 22 Aug 2021 18:16:14 +0000</pubDate>
      <link>https://dev.to/chapagainashik/blitz-js-the-fullstack-react-framework-part-2-4697</link>
      <guid>https://dev.to/chapagainashik/blitz-js-the-fullstack-react-framework-part-2-4697</guid>
      <description>&lt;h1&gt;
  &lt;a href="#welcome-back"&gt;
  &lt;/a&gt;
  Welcome Back  üëã
&lt;/h1&gt;

&lt;p&gt;Hey, Developers, welcome back to the second part of the  &lt;a href="https://dev.to/chapagainashik/series/14193"&gt;&lt;code&gt;Blitz.js: The Fullstack React Framework&lt;/code&gt;&lt;/a&gt;  series.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Check part one if you haven't already:   &lt;a href="https://dev.to/chapagainashik/blitz-js-the-fullstack-react-framework-2kag"&gt;https://dev.to/chapagainashik/blitz-js-the-fullstack-react-framework-2kag&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the previous part, we have completed setting up a fresh blitz.js project, added Tailwind CSS to it using a recipe, created a database model, and generated the files required for this project.&lt;/p&gt;

&lt;p&gt;Today, we'll start by updating the schema file.&lt;/p&gt;

&lt;p&gt;So, let's start.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#index"&gt;
  &lt;/a&gt;
  Index
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#update-database-schema"&gt;Update Database Schema&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#understanding-and-updating-logics"&gt;Understanding and updating Logics&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#logics-for-project"&gt;Logics for Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#logics-for-tasks"&gt;Logics for Tasks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#building-ui"&gt;Building UI&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#signup-page-component"&gt;SignUp Page Component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#login-page"&gt;Login Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#forgot-password-page"&gt;Forgot Password page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#reset-password-page"&gt;Reset Password page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#recap"&gt;Recap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#update-database-schema"&gt;
  &lt;/a&gt;
  Update Database Schema
&lt;/h1&gt;

&lt;p&gt;In the previous article, we finished up creating the relationship between project and tasks table, but there we haven't created the field for storing task name and task description. So, first, let's update the scheme.prisma file with required fields.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// file: db/schema.prisma
...

model Project {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String
  tasks       Task[]
}

model Task {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   Int
  // Add the following new fields
  name        String
  description String?
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you haven't noticed what we have changed, check the &lt;code&gt;Task&lt;/code&gt; model, where we have added the &lt;code&gt;name&lt;/code&gt; field of &lt;code&gt;String&lt;/code&gt; type and &lt;code&gt;description&lt;/code&gt; of &lt;code&gt;String&lt;/code&gt; with nullable &lt;code&gt;?&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That's it for the &lt;code&gt;schema&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now run the command &lt;code&gt;blitz prisma migrate dev&lt;/code&gt;. And give any name for migration, but since we have updated the tasks table by adding two new fields so, I'll name it &lt;code&gt;update_tasks_table&lt;/code&gt;. If you open the Prisma studio using &lt;code&gt;blitz prisma studio&lt;/code&gt;, you will see two new fields in the tasks table.&lt;/p&gt;

&lt;p&gt;Let's build the logic.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#understanding-and-updating-logics"&gt;
  &lt;/a&gt;
  Understanding and updating Logics
&lt;/h1&gt;

&lt;p&gt;We'll understand mutations and queries to alter the data in the database and fetch the data from the database which are generated by code scaffolding from our previous part but since we have added the new field we have to update mutations and logics too. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#logics-for-project"&gt;
  &lt;/a&gt;
  Logics for Project
&lt;/h2&gt;

&lt;p&gt;First, let's create the CRUD operation for the project.&lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;app/projects/mutations/createProject.ts&lt;/code&gt; and add the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// app/projects/mutations/createProject.ts
import { resolver } from "blitz"
import db from "db"
import { z } from "zod"

const CreateProject = z.object({
  name: z.string(),
  description: z.string(),
})

export default resolver.pipe(
  resolver.zod(CreateProject), // This is a handly utility for using Zod, an awesome input validation library. It takes a zod schema and runs schema.parse on the input data.
  resolver.authorize(), // Require Authentication
  async (input) =&amp;gt; {
    // Create the project
    const project = await db.project.create({ data: input })
    // Return created project
    return project
  }
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's split the code and understand each line.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;import { resolver } from "blitz"&lt;/code&gt;:  Blitz exports a resolver object which contains a few utilities. "Resolver" as used here and for queries and mutations refers to a function that takes some input and "resolves" that into some output or side effect. &lt;a href="https://blitzjs.com/docs/resolver-server-utilities"&gt;Click here to know more&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;import db from "db"&lt;/code&gt;: Here &lt;code&gt;db&lt;/code&gt; is a Prisma client enhanced by &lt;code&gt;blitz&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;import { z } from "zod"&lt;/code&gt;: Zod is a TypeScript-first schema declaration and validation library. I'm using the term "schema" to broadly refer to any data type, from a simple string to a complex nested object.  &lt;a href="https://github.com/colinhacks/zod#what-is-zod"&gt;Click here to know more&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;const CreateProject&lt;/code&gt;: &lt;code&gt;CreateProject&lt;/code&gt; is an object schema that validates if the given input contains the &lt;code&gt;name&lt;/code&gt; field of &lt;code&gt;string&lt;/code&gt; type and &lt;code&gt;description&lt;/code&gt; field of 'string' type.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;resolver.pipe&lt;/code&gt;: This is a functional pipe that makes it easier and cleaner to write complex resolvers. A pipe automatically pipes the output of one function into the next function. ( &lt;a href="https://blitzjs.com/docs/resolver-server-utilities#resolver-pipe"&gt;Blitz.js Docs&lt;/a&gt; )&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;resolver.zod(CreateProject)&lt;/code&gt;: This is a handy utility for using Zod, an awesome input validation library. It takes a zod schema and runs schema.parse on the input data. ( &lt;a href="https://blitzjs.com/docs/resolver-server-utilities#resolver-zod"&gt;Blitz.js Docs&lt;/a&gt; )&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;resolver.authorize()&lt;/code&gt;: Using resolver.authorize in resolver.pipe is a simple way to check whether the user has the authorization to call the query or mutation or not. ( &lt;a href="https://blitzjs.com/docs/resolver-server-utilities#resolver-authorize"&gt;Blitz.js Docs&lt;/a&gt; )&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;async (input) =&amp;gt; {}&lt;/code&gt;: This async function is a callback.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;db.project.create&lt;/code&gt;: Create a new project in the database.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;return project&lt;/code&gt;: Returns the created data.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, we have built the logic to create a project.&lt;/p&gt;

&lt;p&gt;Let's build the logic to get projects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// file: app/projects/queries/getProjects.ts
import { paginate, resolver } from "blitz"
import db, { Prisma } from "db"

interface GetProjectsInput
  extends Pick&amp;lt;Prisma.ProjectFindManyArgs, "where" | "orderBy" | "skip" | "take"&amp;gt; {}

export default resolver.pipe(
  resolver.authorize(),
  async ({ where, orderBy, skip = 0, take = 100 }: GetProjectsInput) =&amp;gt; {
    // TODO: in multi-tenant app, you must add validation to ensure correct tenant
    const {
      items: projects,
      hasMore,
      nextPage,
      count,
    } = await paginate({
      skip,
      take,
      count: () =&amp;gt; db.project.count({ where }),
      query: (paginateArgs) =&amp;gt;
        db.project.findMany({ ...paginateArgs, where, orderBy, include: { tasks: true } }),
    })

    return {
      projects,
      nextPage,
      hasMore,
      count,
    }
  }
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this file, made a single change and that is I have added the &lt;code&gt;include&lt;/code&gt; option in &lt;code&gt;db.project.findMany()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What this will do is, includes all the tasks that belong to the respective project.&lt;/p&gt;

&lt;p&gt;Now let's understand each line of this code. I'll not repeat the one that I have already written while building the &lt;code&gt;create project&lt;/code&gt; logic. I'll also skip the imports.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;interface GetProjectsInput&lt;br&gt;
extends Pick&amp;lt;Prisma.ProjectFindManyArgs, "where" | "orderBy" | "skip" | "take"&amp;gt; {}&lt;/code&gt;: What this will do is, create a interface by picking the set of properties (where, orderBy, skip, take) from &lt;code&gt;Prisma.ProjectFindManyArgs&lt;/code&gt;. ( &lt;a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#picktype-keys"&gt;TS Docs&lt;/a&gt; )&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Prisma.ProjectFindManyArgs&lt;/code&gt;: Prisma generates the types for the model and the arguments. Here we are using ProjectFindManyArgs` which was generated by Prisma. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;paginate&lt;/code&gt;: This is a handy utility for query pagination. ( &lt;a href="https://blitzjs.com/docs/resolver-server-utilities#paginate"&gt;Blitz.js Docs&lt;/a&gt; ).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;db.project.count({where})&lt;/code&gt;: Returns the number of data from the database that follows the conditions we passed in where argument.( &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-client/aggregation-grouping-summarizing#count"&gt;Prisma Docs&lt;/a&gt; )&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;db.project.findMany()&lt;/code&gt;: Get all the data from the projects table. If you compare this with the originally generated one, then we'll know that we have added the &lt;code&gt;include&lt;/code&gt; option in this. From with we will get all the tasks that belong to this table.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let's look at how to get a single project.&lt;br&gt;
&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// app/projects/queries/getProject.ts&lt;br&gt;
import { resolver, NotFoundError } from "blitz"&lt;br&gt;
import db from "db"&lt;br&gt;
import { z } from "zod"&lt;/p&gt;

&lt;p&gt;const GetProject = z.object({&lt;br&gt;
  // This accepts type of undefined, but is required at runtime&lt;br&gt;
  id: z.number().optional().refine(Boolean, "Required"),&lt;br&gt;
})&lt;/p&gt;

&lt;p&gt;export default resolver.pipe(resolver.zod(GetProject), resolver.authorize(), async ({ id }) =&amp;gt; {&lt;br&gt;
  // TODO: in multi-tenant app, you must add validation to ensure correct tenant&lt;br&gt;
  const project = await db.project.findFirst({ where: { id }, include: { tasks: true } })&lt;/p&gt;

&lt;p&gt;if (!project) throw new NotFoundError()&lt;/p&gt;

&lt;p&gt;return project&lt;br&gt;
})&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.refine()&lt;/code&gt;: (&lt;a href="https://github.com/colinhacks/zod#refine"&gt;ZOD Docs&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;db.project.findFirst()&lt;/code&gt;: Return the first data that satisfies the given condition. (&lt;a href="https://www.prisma.io/docs/reference/api-reference/prisma-client-reference#findfirst"&gt;Prisma Docs&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;throw new NotFoundError()&lt;/code&gt;: Throw 404 error.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, let's see the logic to update the project.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// app/projects/mutations/updateProject.ts&lt;br&gt;
import { resolver } from "blitz"&lt;br&gt;
import db from "db"&lt;br&gt;
import { z } from "zod"&lt;/p&gt;

&lt;p&gt;const UpdateProject = z.object({&lt;br&gt;
  id: z.number(),&lt;br&gt;
  name: z.string(),&lt;br&gt;
  description: z.string(),&lt;br&gt;
})&lt;/p&gt;

&lt;p&gt;export default resolver.pipe(&lt;br&gt;
  resolver.zod(UpdateProject),&lt;br&gt;
  resolver.authorize(),&lt;br&gt;
  async ({ id, ...data }) =&amp;gt; {&lt;br&gt;
    // TODO: in multi-tenant app, you must add validation to ensure correct tenant&lt;br&gt;
    const project = await db.project.update({ where: { id }, data })&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return project
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;}&lt;br&gt;
)&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;db.project.update()&lt;/code&gt;: Update the data with the given data in the project row with the given id. (&lt;a href="https://www.prisma.io/docs/reference/api-reference/prisma-client-reference#update"&gt;Prisma Docs&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, it's time for the logic to delete the project.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// app/projects/mutations/deleteProject.ts&lt;/p&gt;

&lt;p&gt;import { resolver } from "blitz"&lt;br&gt;
import db from "db"&lt;br&gt;
import { z } from "zod"&lt;/p&gt;

&lt;p&gt;const DeleteProject = z.object({&lt;br&gt;
  id: z.number(),&lt;br&gt;
})&lt;/p&gt;

&lt;p&gt;export default resolver.pipe(resolver.zod(DeleteProject), resolver.authorize(), async ({ id }) =&amp;gt; {&lt;br&gt;
  // TODO: in multi-tenant app, you must add validation to ensure correct tenant&lt;br&gt;
  const tasks = await db.task.deleteMany({ where: { projectId: id } })&lt;br&gt;
  const project = await db.project.deleteMany({ where: { id } })&lt;/p&gt;

&lt;p&gt;return project&lt;br&gt;
})&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;br&gt;
If you look there, I have added a new line &lt;code&gt;const tasks = = await db.task.deleteMany({ where: { projectId: id } })&lt;/code&gt;. This will first delete all the tasks that belong to that project and only then the actual project got removed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;db.project.deleteMany&lt;/code&gt;: This will delete the rows from the table which satisfy the given criteria.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, The CRUD for the project has been completed, now it's time for CRUD operation of tasks.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#logics-for-tasks"&gt;
  &lt;/a&gt;
  Logics for Tasks
&lt;/h2&gt;

&lt;p&gt;Let's update the tasks logic for creating a new task.&lt;br&gt;
&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// app/tasks/mutations/createTask.ts&lt;/p&gt;

&lt;p&gt;import { resolver } from "blitz"&lt;br&gt;
import db from "db"&lt;br&gt;
import { z } from "zod"&lt;/p&gt;

&lt;p&gt;const CreateTask = z.object({&lt;br&gt;
  name: z.string(),&lt;br&gt;
  projectId: z.number(),&lt;br&gt;
  // This is what we have added&lt;br&gt;
  description: z.string().optional(),&lt;br&gt;
})&lt;/p&gt;

&lt;p&gt;export default resolver.pipe(resolver.zod(CreateTask), resolver.authorize(), async (input) =&amp;gt; {&lt;br&gt;
  // TODO: in multi-tenant app, you must add validation to ensure correct tenant&lt;br&gt;
  const task = await db.task.create({ data: input })&lt;/p&gt;

&lt;p&gt;return task&lt;br&gt;
})&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Everything looks familiar, Nah. We have already discussed the syntax used up here before.&lt;/p&gt;

&lt;p&gt;After we created tasks, we need to retrieve the tasks, so let getAll the tasks.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// app/tasks/queries/getTasks.ts&lt;/p&gt;

&lt;p&gt;import { paginate, resolver } from "blitz"&lt;br&gt;
import db, { Prisma } from "db"&lt;/p&gt;

&lt;p&gt;interface GetTasksInput&lt;br&gt;
  extends Pick {}&lt;/p&gt;

&lt;p&gt;export default resolver.pipe(&lt;br&gt;
  resolver.authorize(),&lt;br&gt;
  async ({ where, orderBy, skip = 0, take = 100 }: GetTasksInput) =&amp;gt; {&lt;br&gt;
    // TODO: in multi-tenant app, you must add validation to ensure correct tenant&lt;br&gt;
    const {&lt;br&gt;
      items: tasks,&lt;br&gt;
      hasMore,&lt;br&gt;
      nextPage,&lt;br&gt;
      count,&lt;br&gt;
    } = await paginate({&lt;br&gt;
      skip,&lt;br&gt;
      take,&lt;br&gt;
      count: () =&amp;gt; db.task.count({ where }),&lt;br&gt;
      query: (paginateArgs) =&amp;gt; db.task.findMany({ ...paginateArgs, where, orderBy }),&lt;br&gt;
    })&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return {
  tasks,
  nextPage,
  hasMore,
  count,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;}&lt;br&gt;
)&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Everything is the same up here as generated.&lt;/p&gt;

&lt;p&gt;Let's see the mutation to update the task.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`js&lt;br&gt;
// app/tasks/mutations/updateTask.ts&lt;/p&gt;

&lt;p&gt;import { resolver } from "blitz"&lt;br&gt;
import db from "db"&lt;br&gt;
import { z } from "zod"&lt;/p&gt;

&lt;p&gt;const UpdateTask = z.object({&lt;br&gt;
  id: z.number(),&lt;br&gt;
  name: z.string(),&lt;br&gt;
  // The only thing we have added&lt;br&gt;
  description: z.string().optional(),&lt;br&gt;
})&lt;/p&gt;

&lt;p&gt;export default resolver.pipe(&lt;br&gt;
  resolver.zod(UpdateTask),&lt;br&gt;
  resolver.authorize(),&lt;br&gt;
  async ({ id, ...data }) =&amp;gt; {&lt;br&gt;
    // TODO: in multi-tenant app, you must add validation to ensure correct tenant&lt;br&gt;
    const task = await db.task.update({ where: { id }, data })&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return task
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;}&lt;br&gt;
)&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For the &lt;code&gt;getTask&lt;/code&gt; query and &lt;code&gt;delete&lt;/code&gt; mutation, leave it as it is.&lt;/p&gt;

&lt;p&gt;Now we're done for Logics.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#building-ui"&gt;
  &lt;/a&gt;
  Building UI
&lt;/h1&gt;

&lt;p&gt;We have already installed &lt;code&gt; Tailwind CSS&lt;/code&gt; with the blitz recipe in the previous part. ( &lt;a href="https://cb-ashik.hashnode.dev/blitzjs-the-fullstack-react-framework#tailwind-css"&gt;Read it here&lt;/a&gt; ). So, we'll be using the Tailwind CSS library for this project. And we'll create a simple UI using TailwindCSS.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#signup-page-component"&gt;
  &lt;/a&gt;
  SignUp Page Component
&lt;/h2&gt;

&lt;p&gt;Link: &lt;code&gt;/signup&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;app/auth/pages/signup.tsx&lt;/code&gt;. There you will see that they are using the custom component &lt;code&gt;SignupForm&lt;/code&gt; for the form. So, open it from &lt;code&gt;app/auth/components/SignupForm.tsx&lt;/code&gt;. Then there you will see that they are using the custom &lt;code&gt;Form Component&lt;/code&gt; and &lt;code&gt;LabeledTextField&lt;/code&gt; components.&lt;/p&gt;

&lt;p&gt;So our first work will be to customize &lt;code&gt;Form&lt;/code&gt; and &lt;code&gt;LabeledTextFieldComponent&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;app/core/Form.tsx&lt;/code&gt; and add &lt;code&gt;p-5 border rounded&lt;/code&gt; classes in the &lt;code&gt;form&lt;/code&gt; tag and add &lt;code&gt;text-sm&lt;/code&gt; class in &lt;code&gt;alert&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`jsx&lt;br&gt;
// app/core/components/Form.tsx&lt;/p&gt;


&lt;br&gt;
         {submitError &amp;amp;&amp;amp; (&lt;br&gt;
            &lt;br&gt;
              {submitError}&lt;br&gt;
            &lt;br&gt;
          )}&lt;br&gt;
         ...&lt;br&gt;
&lt;br&gt;
...&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;

&lt;p&gt;Now, let's customize &lt;code&gt;LabeledTextFieldComponent&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For this, first, we will create a custom component for input with tailwind style classes.&lt;/p&gt;

&lt;p&gt;Go to &lt;code&gt;app/core/components&lt;/code&gt; and open a file &lt;code&gt;LabeledTextField.tsx&lt;/code&gt; and update it with the following code.&lt;br&gt;
&lt;code&gt;&lt;/code&gt;`jsx&lt;br&gt;
// app/core/components/LabeledTextField.tsx&lt;/p&gt;

&lt;p&gt;import { forwardRef, PropsWithoutRef } from "react"&lt;br&gt;
import { useField } from "react-final-form"&lt;/p&gt;

&lt;p&gt;export interface LabeledTextFieldProps extends PropsWithoutRef {&lt;br&gt;
  /** Field name. &lt;em&gt;/&lt;br&gt;
  name: string&lt;br&gt;
  /&lt;/em&gt;* Field label. &lt;em&gt;/&lt;br&gt;
  label: string&lt;br&gt;
  /&lt;/em&gt;* Field type. Doesn't include radio buttons and checkboxes */&lt;br&gt;
  type?: "text" | "password" | "email" | "number"&lt;br&gt;
  outerProps?: PropsWithoutRef&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;export const LabeledTextField = forwardRef(&lt;br&gt;
  ({ name, label, outerProps, ...props }, ref) =&amp;gt; {&lt;br&gt;
    const {&lt;br&gt;
      input,&lt;br&gt;
      meta: { touched, error, submitError, submitting },&lt;br&gt;
    } = useField(name, {&lt;br&gt;
      parse: props.type === "number" ? Number : undefined,&lt;br&gt;
    })&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const normalizedError = Array.isArray(error) ? error.join(", ") : error || submitError

return (
  &amp;lt;div {...outerProps}&amp;gt;
    &amp;lt;label className="flex flex-col items-start"&amp;gt;
      {label}
      &amp;lt;input
        {...input}
        className="px-1 py-2 border rounded focus:ring focus:outline-none ring-purple-200 block w-full my-2"
        disabled={submitting}
        {...props}
        ref={ref}
      /&amp;gt;
    &amp;lt;/label&amp;gt;

    {touched &amp;amp;&amp;amp; normalizedError &amp;amp;&amp;amp; (
      &amp;lt;div role="alert" className="text-sm" style={{ color: "red" }}&amp;gt;
        {normalizedError}
      &amp;lt;/div&amp;gt;
    )}
  &amp;lt;/div&amp;gt;
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;}&lt;br&gt;
)&lt;/p&gt;

&lt;p&gt;export default LabeledTextField&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Always remember that the components that are required for a specific model, we have to create that inside the components folder in that model, for example. if we want a form to create a project then we add that form component inside &lt;code&gt;app/project/components&lt;/code&gt;. But if that component is not model specific, then we create those components inside &lt;code&gt;app/core/components&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let's create a new core &lt;code&gt;Button&lt;/code&gt; component to use everywhere on the site.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`jsx&lt;br&gt;
// app/core/components/Button.tsx&lt;/p&gt;

&lt;p&gt;export const Button = ({ children, ...props }) =&amp;gt; {&lt;br&gt;
  return (&lt;br&gt;
    &lt;br&gt;
      {children}&lt;br&gt;
    &lt;br&gt;
  )&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;br&gt;
Now let's use this new &lt;code&gt;Button&lt;/code&gt; component in &lt;code&gt;Form.tsx&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;app/core/components/Form.tsx&lt;/code&gt; replace&lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
{submitText &amp;amp;&amp;amp; (&lt;br&gt;
     &amp;lt;button type="submit" disabled={submitting}&amp;gt;&lt;br&gt;
          {submitText}&lt;br&gt;
     &amp;lt;/button&amp;gt;&lt;br&gt;
)}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
with &lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
{submitText &amp;amp;&amp;amp; (&lt;br&gt;
     &amp;lt;Button type="submit" disabled={submitting}&amp;gt;&lt;br&gt;
          {submitText}&lt;br&gt;
     &amp;lt;/Button&amp;gt;&lt;br&gt;
)}&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
And don't forget to import the &lt;code&gt;Button&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
import { Button } from "./Button"&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
Now, you should have something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sBFVar_g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629651145054/3wOHhG5gL.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sBFVar_g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629651145054/3wOHhG5gL.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's customize this page more.&lt;/p&gt;

&lt;p&gt;We'll use a separate layout for the authentication pages. So, go to &lt;code&gt;app/core/layouts&lt;/code&gt; and create a new file named &lt;code&gt;AuthLayout.tsx&lt;/code&gt; and add the following contents.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// app/core/layouts/AuthLayout.tsx&lt;/p&gt;

&lt;p&gt;import { ReactNode } from "react"&lt;br&gt;
import { Head } from "blitz"&lt;/p&gt;

&lt;p&gt;type LayoutProps = {&lt;br&gt;
  title?: string&lt;br&gt;
  heading: string&lt;br&gt;
  children: ReactNode&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;const AuthLayout = ({ title, heading, children }: LayoutProps) =&amp;gt; {&lt;br&gt;
  return (&lt;br&gt;
    &amp;lt;&amp;gt;&lt;br&gt;
      &lt;/p&gt;
&lt;br&gt;
        {title || "ProjectManagement"}&lt;br&gt;
        &lt;br&gt;
      
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;div className="flex justify-center"&amp;gt;
    &amp;lt;div className="w-full md:w-2/3 lg:max-w-2xl mt-5"&amp;gt;
      &amp;lt;h2 className="text-xl mb-2"&amp;gt;{heading}&amp;lt;/h2&amp;gt;
      &amp;lt;div&amp;gt;{children}&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;)&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;export default AuthLayout&lt;/p&gt;

&lt;p&gt;`&lt;code&gt;&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Now go to the &lt;code&gt;SignupForm&lt;/code&gt; component and remove the &lt;code&gt;h1&lt;/code&gt; tag. After removing &lt;code&gt;&lt;br&gt;
      &amp;lt;h1&amp;gt;Create an Account&amp;lt;/h1&amp;gt;&lt;/code&gt; the file should look like.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
import { useMutation } from "blitz"&lt;br&gt;
import { LabeledTextField } from "app/core/components/LabeledTextField"&lt;br&gt;
import { Form, FORM_ERROR } from "app/core/components/Form"&lt;br&gt;
import signup from "app/auth/mutations/signup"&lt;br&gt;
import { Signup } from "app/auth/validations"&lt;/p&gt;

&lt;p&gt;type SignupFormProps = {&lt;br&gt;
  onSuccess?: () =&amp;gt; void&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;export const SignupForm = (props: SignupFormProps) =&amp;gt; {&lt;br&gt;
  const [signupMutation] = useMutation(signup)&lt;/p&gt;

&lt;p&gt;return (&lt;br&gt;
    &lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;Form
    submitText="Create Account"
    schema={Signup}
    initialValues={{ email: "", password: "" }}
    onSubmit={async (values) =&amp;gt; {
      try {
        await signupMutation(values)
        props.onSuccess?.()
      } catch (error) {
        if (error.code === "P2002" &amp;amp;&amp;amp; error.meta?.target?.includes("email")) {
          // This error comes from Prisma
          return { email: "This email is already being used" }
        } else {
          return { [FORM_ERROR]: error.toString() }
        }
      }
    }}
  &amp;gt;
    &amp;lt;LabeledTextField name="email" label="Email" placeholder="Email" /&amp;gt;
    &amp;lt;LabeledTextField name="password" label="Password" placeholder="Password" type="password" /&amp;gt;
  &amp;lt;/Form&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;)&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;export default SignupForm&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, we have to tell &lt;code&gt;signup&lt;/code&gt; page to use &lt;code&gt;AuthLayout&lt;/code&gt; as layout.&lt;/p&gt;

&lt;p&gt;For that, go to &lt;code&gt;app/auth/pages/signup.tsx&lt;/code&gt; and change the folowing line:&lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
SignupPage.getLayout = (page) =&amp;gt; &amp;lt;Layout title="Sign Up"&amp;gt;{page}&amp;lt;/Layout&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
to&lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
SignupPage.getLayout = (page) =&amp;gt; &amp;lt;AuthLayout heading="Create an account" title="Sign Up"&amp;gt;{page}&amp;lt;/AuthLayout&amp;gt;&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
and import &lt;code&gt;AuthLayout&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
import AuthLayout from "app/core/layouts/AuthLayout"&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
Now, your signup page should look like this.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I_o6Ot0g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629652975243/WyzbxyBQd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I_o6Ot0g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629652975243/WyzbxyBQd.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚ö†Ô∏è Ignore that LastPass sign in the input field.&lt;/p&gt;

&lt;p&gt;Let's include a link to go to the login page in the signup page.&lt;/p&gt;

&lt;p&gt;For this, we'll create our own custom Link component with tailwind style.&lt;/p&gt;

&lt;p&gt;Go to &lt;code&gt;/app/core/components&lt;/code&gt; and create a new file &lt;code&gt;CustomLink.tsx&lt;/code&gt; and add the following.&lt;br&gt;
&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// app/core/components/CustomLink.tsx&lt;/p&gt;

&lt;p&gt;import { Link } from "blitz"&lt;/p&gt;

&lt;p&gt;export const CustomLink = ({ children, href }: any) =&amp;gt; {&lt;br&gt;
  return (&lt;br&gt;
    &lt;br&gt;
      &lt;a&gt;{children}&lt;/a&gt;&lt;br&gt;
    &lt;br&gt;
  )&lt;br&gt;
}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, to include the go-to login link you have to add the following line after the &lt;code&gt;Form&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
...&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; Already have account? Login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After all this, your signup page should look like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3RTEFRX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629653774837/63Z1m40xy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3RTEFRX1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629653774837/63Z1m40xy.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, since we have already styled many components in the &lt;code&gt;SignUp UI&lt;/code&gt; section now, for other pages we won't have to do too much work for other pages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#login-page"&gt;
  &lt;/a&gt;
  Login Page
&lt;/h2&gt;

&lt;p&gt;Link : '/login'&lt;/p&gt;

&lt;p&gt;For the login page customization replace the following line in &lt;code&gt;login.tsx&lt;/code&gt;:&lt;br&gt;
&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// app/auth/pages/login&lt;/p&gt;

&lt;p&gt;LoginPage.getLayout = (page) =&amp;gt; {page}&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
LoginPage.getLayout = (page) =&amp;gt; (&lt;br&gt;
  &amp;lt;AuthLayout heading="Welcome back, login here" title="Log In"&amp;gt;&lt;br&gt;
    {page}&lt;br&gt;
  &amp;lt;/AuthLayout&amp;gt;&lt;br&gt;
)&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
and import &lt;code&gt;AuthLayout&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;br&gt;
import AuthLayout from "app/core/layouts/AuthLayout"&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;br&gt;
After doing this, your login page should look like this.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yVUIyi6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629654113338/YIGIyuGYS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yVUIyi6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629654113338/YIGIyuGYS.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, remove &lt;code&gt;&amp;lt;h1&amp;gt;Login&amp;lt;/h1&amp;gt;&lt;/code&gt; from &lt;code&gt;app/auth/components/LoginForm.tsx&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;and also replace the following lines from &lt;code&gt;LoginForm.tsx&lt;/code&gt;:&lt;br&gt;
&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// from&lt;br&gt;
&lt;br&gt;
       &lt;a&gt;Forgot your password?&lt;/a&gt;&lt;br&gt;
 &lt;/p&gt;

&lt;p&gt;// to&lt;br&gt;
 &lt;br&gt;
     Forgot your password?&lt;br&gt;
 &lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and &lt;br&gt;
&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// from&lt;br&gt;
Sign Up&lt;/p&gt;

&lt;p&gt;// to&lt;br&gt;
 Sign Up&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After getting up to this, your login page should look like.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XzX1z1Lm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629654412059/qC8931iCy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XzX1z1Lm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629654412059/qC8931iCy.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#forgot-password-page"&gt;
  &lt;/a&gt;
  Forgot Password page
&lt;/h2&gt;

&lt;p&gt;Link : '/forgot-password'&lt;/p&gt;

&lt;p&gt;As before, change the layout to &lt;code&gt;AuthLayout&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// app/auth/pages/forgot-password.tsx&lt;/p&gt;

&lt;p&gt;import AuthLayout from "app/core/layouts/AuthLayout"&lt;br&gt;
...&lt;/p&gt;

&lt;p&gt;ForgotPasswordPage.getLayout = (page) =&amp;gt; (&lt;br&gt;
  &lt;br&gt;
    {page}&lt;br&gt;
  &lt;br&gt;
)&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and remove &lt;code&gt;&amp;lt;h1&amp;gt;Forgot your password?&amp;lt;/h1&amp;gt;&lt;/code&gt; from &lt;code&gt;app/auth/pages/forgot-password.tsx&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, the forgot password page is done and it should look like.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oc4FbUJv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629655296285/U0RQPU67A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oc4FbUJv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629655296285/U0RQPU67A.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, Finally the final page of authentication. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reset-password-page"&gt;
  &lt;/a&gt;
  Reset Password page
&lt;/h2&gt;

&lt;p&gt;Link: '/reset-password'&lt;/p&gt;

&lt;p&gt;As before, change the layout to &lt;code&gt;AuthLayout&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`&lt;br&gt;
// app/auth/pages/reset-password.tsx&lt;/p&gt;

&lt;p&gt;import AuthLayout from "app/core/layouts/AuthLayout"&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;ResetPasswordPage.getLayout = (page) =&amp;gt; (&lt;br&gt;
  &lt;br&gt;
    {page}&lt;br&gt;
  &lt;br&gt;
)&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and remove &lt;code&gt;&amp;lt;h1&amp;gt;Set a New Password&amp;lt;/h1&amp;gt;&lt;/code&gt; and it should look like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z-28zv4m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629655367725/-SXFw8ZAN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z-28zv4m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629655367725/-SXFw8ZAN.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This much for today guys.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Updated the schema&lt;/li&gt;
&lt;li&gt;Edited UI for authentication pages using Tailwindcss&lt;/li&gt;
&lt;li&gt;Created custom components&lt;/li&gt;
&lt;li&gt;Created AuthLayout and used it&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>blitzjs</category>
      <category>nextjs</category>
      <category>react</category>
      <category>fullstack</category>
    </item>
  </channel>
</rss>
