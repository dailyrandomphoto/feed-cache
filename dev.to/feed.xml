<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Tìm hiểu địa chỉ cung cấp bộ bàn ăn cao cấp, chất lượng!</title>
      <author>Showroom Hùng Tuý</author>
      <pubDate>Fri, 16 Jul 2021 04:35:55 +0000</pubDate>
      <link>https://dev.to/showroomhungtuy/tim-hieu-dia-chi-cung-cap-bo-ban-an-cao-cap-chat-luong-760</link>
      <guid>https://dev.to/showroomhungtuy/tim-hieu-dia-chi-cung-cap-bo-ban-an-cao-cap-chat-luong-760</guid>
      <description>&lt;p&gt;&lt;em&gt;Cũng giống như những không gian nội thất khác, việc chọn các sản phẩm nội chất cho phòng bếp đặc biệt là bàn ăn cũng cần được lựa chọn một cách kỹ lưỡng, muốn được như vậy chúng ta cần tìm được một địa chỉ cung cấp uy tín .Vậy hiện nay đâu là địa chỉ cung cấp &lt;/em&gt;&lt;em&gt;bộ bàn ăn cao cấp, chất lượng, vừa đẹp lại có được độ bền tốt trong quá trình sử dụng lâu dài? Hãy cùng &lt;/em&gt;&lt;strong&gt;&lt;a href="https://hungtuy.com.vn/noi-that-pc35500.html"&gt;nội thất cao cấp&lt;/a&gt;&lt;/strong&gt;&lt;em&gt; Hùng Tuý tìm hiểu ngay trong bài viết sau đây.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Một số cách lựa chọn bàn ăn phù hợp với căn bếp&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;Khi mua bàn ăn, rất nhiều người thường lựa chọn theo cảm tính. Nhưng đây là cách lựa chọn hoàn toàn sai lầm. Chúng ta nên mua bộ &lt;/span&gt;&lt;strong&gt;&lt;a href="https://hungtuy.com.vn/ban-an-pc20281.html"&gt;bàn ăn cao cấp&lt;/a&gt;&lt;/strong&gt;&lt;span&gt; dựa vào kích thước của không gian nhà bếp. Với những không gian không quá rộng chúng ta không nên chọn những mẫu bàn ăn có kích thước lớn. Bởi như vậy sẽ khiến cho căn bếp trở nên chật chội, làm ảnh hưởng đến quá trình nấu nướng, di chuyển.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--snrgDMSn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hungtuy.com.vn/mediacenter/media/images/1498/category/ava/s1000_1000/noi-that-phong-an-cao-cap-01-1590638094.jpg" class="article-body-image-wrapper"&gt;&lt;img alt="Nội thất phòng ăn cao cấp nhập khẩu châu âu chính hãng tại Hà Nội" src="https://res.cloudinary.com/practicaldev/image/fetch/s--snrgDMSn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://hungtuy.com.vn/mediacenter/media/images/1498/category/ava/s1000_1000/noi-that-phong-an-cao-cap-01-1590638094.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nên lựa chọn bàn ăn sao cho phù hợp với không gian&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Tốt nhất, các bạn nên lựa chọn những bộ bàn ăn có kích thước vừa tầm sao cho thừa ra khoảng 1 mét phía sau các ghế ngồi để việc di chuyển, sinh hoạt nấu nướng trở nên dễ dàng hơn.&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Địa chỉ cung cấp bộ bàn ăn cao cấp, chất lượng&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;Hiện nay trên thị trường có rất nhiều địa chỉ cung cấp những bộ bàn ăn với nhiều kiểu dáng, mẫu mã khác nhau. Tuy nhiên để tìm được một địa chỉ uy tín thì không phải ai cũng biết. Thực tế cho thấy, hiện nay hàng giả hàng nhái đang được trà trộn rất nhiều trên thị trường. Bởi vậy mà làm sao có thể được bộ bàn ăn cao cấp chất lượng tốt đang là câu hỏi của rất nhiều người.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---T1LVYxV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://photo-cms-viettimes.zadn.vn/c720x480/Uploaded/2021/obbcpuo/2019_06_11/vt_hung_tuy2678004_1162019.jpg" class="article-body-image-wrapper"&gt;&lt;img alt="Đại gia&amp;amp;quot; Hùng Túy có đứng sau An Quý Hưng trong game Vinaconex?" src="https://res.cloudinary.com/practicaldev/image/fetch/s---T1LVYxV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://photo-cms-viettimes.zadn.vn/c720x480/Uploaded/2021/obbcpuo/2019_06_11/vt_hung_tuy2678004_1162019.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hùng Túy hiện đang là địa chỉ được nhiều người lựa chọn&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Gợi ý cho bạn, hiện nay Hùng Túy đang là địa chỉ cung cấp bộ bàn ăn uy tín, được rất nhiều khách hàng đánh giá cao. Mỗi một sản phẩm tại Hùng Tuý đều được đảm bảo 100% về chất lượng. Với nhiều năm trong nghề, Hùng Tuý luôn đem đến cho người tiêu dùng những sản phẩm có chất lượng tốt nhất. Cùng với đó, khi mua hàng khách hàng sẽ được thỏa sức lựa chọn những mẫu sản phẩm khác nhau, được mua hàng với giá cạnh tranh cùng đội ngũ nhân viên tư vấn nhiệt tình. Chính vì vậy mà Hùng Tuý luôn là sự lựa chọn hàng đầu của đông đảo người dùng.&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Lời kết&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span&gt;Chắc hẳn, thông qua bài viết này các bạn cũng đã tìm được cho mình một địa chỉ cung cấp &lt;/span&gt;&lt;strong&gt;&lt;a href="https://www.dailymotion.com/noithatcaocaphungtuy"&gt;bàn ăn cao cấp nhập khẩu&lt;/a&gt; &lt;/strong&gt;&lt;span&gt;chất lượng. Hy vọng những thông tin trên hữu ích cho bạn, hãy trở thành người tiêu dùng thông thái để có thể chọn cho gia đình mình bộ bàn ăn đẹp có chất lượng tốt nhất nhé&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>LinkedList Questions: Middle Element of Linked List - Optimal Approach</title>
      <author>Kathan Vakharia</author>
      <pubDate>Fri, 16 Jul 2021 04:34:43 +0000</pubDate>
      <link>https://dev.to/kathanvakharia/linkedlist-questions-middle-element-of-linked-list-optimal-approach-3h6d</link>
      <guid>https://dev.to/kathanvakharia/linkedlist-questions-middle-element-of-linked-list-optimal-approach-3h6d</guid>
      <description>&lt;p&gt;In this series of posts, I will discuss coding questions on the &lt;code&gt;LinkedList&lt;/code&gt; Data structure.&lt;br&gt;
The posts in this series will be organized in the following way,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Question Link ❓&lt;/li&gt;
&lt;li&gt;Possible Explanation 📝&lt;/li&gt;
&lt;li&gt;Documented C++ Code 🧹&lt;/li&gt;
&lt;li&gt;Time and Space Complexity Analysis ⌛🌌&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#the-question"&gt;
  &lt;/a&gt;
  The Question
&lt;/h2&gt;

&lt;p&gt;Given a non-empty, singly linked list with head node &lt;code&gt;head&lt;/code&gt;, return a middle node of the linked list.&lt;/p&gt;

&lt;p&gt;If there are two middle nodes, return the second middle node.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://leetcode.com/problems/middle-of-the-linked-list/"&gt;https://leetcode.com/problems/middle-of-the-linked-list/&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 Give yourself at least 15-20 mins to figure out the solution :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h2&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kathanvakharia" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kuqECyTw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--bhbJL83l--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/458861/ab6297f8-b3bc-440d-bcba-e002322f382a.jpg" alt="kathanvakharia"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kathanvakharia/middle-element-of-linked-list-naive-approach-2589" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;LinkedList Questions: Middle Element of Linked List - Naive Approach&lt;/h2&gt;
      &lt;h3&gt;Kathan Vakharia ・ Jul 11 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#algorithms&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cpp&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#linkedlist&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;I hope you have read the previous article because I want to relate the ideas of both approaches rather than making you feel, an optimal solution is a completely new thing! &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;👀 Observation: If you recall from the last post, we can reach the middle node after &lt;code&gt;floor(L/2)&lt;/code&gt; iterations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Remember the above point, I'll come to this point after we see the algorithm. &lt;/p&gt;

&lt;p&gt;Here's the algorithm.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Initialize two pointers, &lt;code&gt;fast&lt;/code&gt; and &lt;code&gt;slow&lt;/code&gt; both pointing to &lt;code&gt;head&lt;/code&gt; initially.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Move &lt;code&gt;fast&lt;/code&gt; double the speed than &lt;code&gt;slow&lt;/code&gt; untill &lt;code&gt;fast&lt;/code&gt; becomes &lt;strong&gt;NULL&lt;/strong&gt; or it has reached the last node.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//pseudo code
while fast!=NULL and fast-&amp;gt;next != NULL
        fast = fast-&amp;gt;next-&amp;gt;next
        slow = slow-&amp;gt;next
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;return &lt;code&gt;slow&lt;/code&gt; .&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#why-does-this-work"&gt;
  &lt;/a&gt;
  Why does this work?
&lt;/h3&gt;

&lt;p&gt;First of all, we can either have an &lt;em&gt;odd&lt;/em&gt; length linkedlist or an &lt;em&gt;even&lt;/em&gt; length LinkedList.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Case 1: Odd length

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;fast&lt;/code&gt; will point to the last node after &lt;code&gt;floor(L/2)&lt;/code&gt; iterations.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Case 2: Even Length

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;fast&lt;/code&gt; will become &lt;strong&gt;NULL&lt;/strong&gt; after traversing the entire list in &lt;code&gt;floor(L/2)&lt;/code&gt; iterations.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So no matter what the type of LinkedList, one of the loop termination conditions will hit after &lt;code&gt;floor(L/2)&lt;/code&gt; iterations, and by that time &lt;code&gt;slow&lt;/code&gt; would be pointing to the required middle node.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J6tHKS87--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrolp7s3urc0wq43q7io.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J6tHKS87--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xrolp7s3urc0wq43q7io.jpg" alt="Image for explanation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  C++ Code
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#definition-of-linked-list"&gt;
  &lt;/a&gt;
  Definition of Linked List
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Definition for singly-linked list.&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;ListNode&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;  &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;middleNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="c1"&gt;//make fast reach the end of the list by moving it double time the slow&lt;/span&gt;
      &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="n"&gt;slow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="c1"&gt;//* now slow will point to the required node&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#complexity-analysis"&gt;
  &lt;/a&gt;
  Complexity Analysis
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;N&lt;/code&gt;: Length of Linked List.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#time-complexity-on"&gt;
  &lt;/a&gt;
  Time Complexity: O(N)
&lt;/h3&gt;

&lt;p&gt;We are doing O(N/2) iterations which asymptotically is the same as O(N)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#space-complexity-o1"&gt;
  &lt;/a&gt;
  Space Complexity: O(1)
&lt;/h3&gt;

&lt;p&gt;We didn't use any extra space.&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>cpp</category>
      <category>codenewbie</category>
      <category>linkedlist</category>
    </item>
    <item>
      <title>Updates on dev-to clone in Angular</title>
      <author>Ajit Singh</author>
      <pubDate>Fri, 16 Jul 2021 03:52:45 +0000</pubDate>
      <link>https://dev.to/this-is-angular/updates-on-dev-to-clone-in-angular-2gmi</link>
      <guid>https://dev.to/this-is-angular/updates-on-dev-to-clone-in-angular-2gmi</guid>
      <description>&lt;p&gt;Last week I created a header component. It was just HTML and it was in the following position.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--koLSdOr5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6cickk8uxz6u2gxdi9q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--koLSdOr5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6cickk8uxz6u2gxdi9q.png" alt="Dev.to clone Header"&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This week I stated adding the body of the dev.to website I used a component to handle all the margins and padding on the body of the dev.to website. And created all body sub-elements as the the children of this Component in routing.&lt;/p&gt;

&lt;p&gt;To start with body sub-components I created a home module I created a new module for homepage because people may open other pages before visit our home page so putting our homepage in a different module other than app.module made sense for lazy loading. If your has to be visited before visiting any other pages use home module in app module.&lt;/p&gt;

&lt;p&gt;I divided home page into three parts sidebar, articles, extra-info. On careful examination of the dev.to sidebar I divided it into 4 components sidebar-primary, sidebar-social-links, sidebar-tags, sidebar-advertisement. The sidebar-primary will contain all the default options in the sidebar. sidebar-social-links contains all the social links that open in dev.to when clicked on more option in sidebar. Sidebar tags contains tags on dev.to and sidebar-advertisement contain the ad at the bottom of dev.to sidebar.&lt;/p&gt;

&lt;p&gt;After building the Basic HTML structure of dev.to sidebar I moved onto the articles section. It is also divided into 3 component featured article, article list, header. &lt;/p&gt;

&lt;p&gt;Here we start the use of the &lt;a href="https://docs.forem.com/api/"&gt;dev.to API&lt;/a&gt;. This API is divided into 2 parts one which requires a key one which are open so first I will build everything possible to build with the open API and after that we will build a login where you have to put your key and the key will be stored in localStorage and we will run API requiring API token from there. The first question that should come to your mind is shouldn't that be done first. Later on it will require a lot of refactoring. My answer is I want to do refactoring basically in most test projects lot of refactoring is done so we will intentionally make some mistakes along the way to see how we handle refactoring and updating features. I think half of the work done in software is refactoring or updating old features.&lt;/p&gt;

&lt;p&gt;We used the articles open API(&lt;a href="https://dev.to/api/articles"&gt;https://dev.to/api/articles&lt;/a&gt;) to get the list of articles. We created an articles-api service which will fetch the data and a article-store service which uses component store for managing the state of the articles. We will use Michael Hadly &lt;a href="https://rx-angular.io/"&gt;rx-angular&lt;/a&gt; push pipe as it is more performant and does not return null when used. I will go into details of async pipe and push pipe some other time.&lt;/p&gt;

&lt;p&gt;After doing all this I reached at the following state.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4CqIaOuu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oxpiqtm0e39df9rmu8ve.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4CqIaOuu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oxpiqtm0e39df9rmu8ve.png" alt="Dev.to Sidebar and article data"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next week I will add the article section HTML, CSS and add a tag store, tags API for the tags section we created in the sidebar. If you want to know any details regarding anything comment below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#honourable-mention-and-regarding-contributions"&gt;
  &lt;/a&gt;
  Honourable Mention and regarding contributions:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://twitter.com/VakilSunny"&gt;Sunny Vakil&lt;/a&gt; wanted to contribute to this project. Thanks Sunny for your proposal but I work on this on Thursday's only. I don't have much time to manage the project. I proposed if anyone wants to contribute add a feature request in the issues. I will comment I accept on it and then you can build the feature I won't build it but you will have to release an article on how you build that feature.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#commits-done-with-this-update"&gt;
  &lt;/a&gt;
  Commits done with this update
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/commit/f548d6b7a027920dabf09fc56d732d307ba62e53"&gt;dev.to sidebar styling and html done&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/commit/20e44dd9a0b045064d738ff9ad51d315db25ec64"&gt;readme changed&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/commit/9fcf4f65429158929176443d9da715b19ad47282"&gt;fixed styling and folder structure&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/commit/564c152de18a97223098e43f13157da8988c0423"&gt;Getting articles data from dev.to api&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>angular</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Node v16.5.0 is out!</title>
      <author>Siddharth</author>
      <pubDate>Fri, 16 Jul 2021 03:23:34 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/node-v16-5-0-is-out-d9a</link>
      <guid>https://dev.to/siddharthshyniben/node-v16-5-0-is-out-d9a</guid>
      <description>&lt;p&gt;&lt;a href="https://nodejs.org/en/blog/release/v16.5.0/"&gt;Node v16.5.0 (Current)&lt;/a&gt; released a few days ago – the main change is &lt;em&gt;experimental&lt;/em&gt; support for the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API"&gt;Web Streams API&lt;/a&gt;. You need to import from &lt;code&gt;'stream/web'&lt;/code&gt; to use it, and it will give you a warning when it's used. &lt;code&gt;npm&lt;/code&gt; also has released a new version – v7.19.1 – and there's a lot of tweaks and fixes in there.&lt;/p&gt;

</description>
      <category>news</category>
      <category>node</category>
      <category>npm</category>
    </item>
    <item>
      <title>Um pouco do que aprendi como Dev em 3 anos</title>
      <author>Victor</author>
      <pubDate>Fri, 16 Jul 2021 02:35:19 +0000</pubDate>
      <link>https://dev.to/victorvhoc/um-pouco-do-que-aprendi-como-dev-em-3-anos-dfo</link>
      <guid>https://dev.to/victorvhoc/um-pouco-do-que-aprendi-como-dev-em-3-anos-dfo</guid>
      <description>&lt;h2&gt;
  &lt;a href="#quem-sou-eu"&gt;
  &lt;/a&gt;
  Quem sou eu
&lt;/h2&gt;

&lt;p&gt;Prazer meu nome é Victor, sou desenvolvedor Front-End e tenho 24 anos, e como o titulo sugere esse post contém algumas dicas de coisas que aprendi ao longo de 3 anos como Front-End.&lt;br&gt;
Inspirado no &lt;a href="https://twitter.com/Willian_justen?s=20"&gt;@Willian_justen&lt;/a&gt; enquanto escrevo esse post estou ouvindo o álbum &lt;a href="https://open.spotify.com/album/56zNLfYYAv67MYDjTWsZ7w?si=TBg6GnJLSnGuGUEM2gmEZA"&gt;III&lt;/a&gt; da &lt;a href="https://twitter.com/bandatopaz?s=20"&gt;@bandatopaz&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pe%C3%A7a-ajuda"&gt;
  &lt;/a&gt;
  Peça ajuda
&lt;/h3&gt;

&lt;p&gt;Independente de quanto tempo de carreira você tem, sempre vai existir algo que você não sabe, e tá tudo bem com isso, é pra isso que você tem times, comunidades e tanta gente compartilhando conhecimento, se não sabe como faz algo pergunte a alguém que sabe ou que você acha que sabe, o importante é não ficar travado por não saber e ter medo de pedir ajuda.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#saiba-pesquisar"&gt;
  &lt;/a&gt;
  Saiba pesquisar
&lt;/h3&gt;

&lt;p&gt;Um ponto importante é saber como e onde pesquisar, é algo que você vai precisar fazer com alguma frequência, seja para estudar algo novo, para entender como resolver um bug, a pesquisa é frequente e por isso é importante saber como e onde pesquisar.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#saiba-ler-mensagens-de-erro"&gt;
  &lt;/a&gt;
  Saiba ler mensagens de erro.
&lt;/h3&gt;

&lt;p&gt;Uma das coisas que mais me deixavam perdido no começo eram mensagens de erro, pareciam não fazer muito sentido, e as vezes realmente não estavam tão claras, mas a medida que fui evoluindo eu acabei aprendendo a ler as mensagens e identificar o que era importante na mensagem para que eu pudesse identificar o problema, e quando era necessário pesquisar soluções ou explicar para outros membros do time o problema que eu estava tendo.&lt;br&gt;
E saber ler mensagens de erro também é importante caso você queira abrir uma pergunta no &lt;a href="https://pt.stackoverflow.com"&gt;Stack Overflow&lt;/a&gt; ou uma issue no repositório da lib/framework que você está usando.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aprenda-a-aprender"&gt;
  &lt;/a&gt;
  Aprenda a aprender
&lt;/h3&gt;

&lt;p&gt;Existem várias formas de aprender, e cada pessoa aprende melhor de uma forma, teste as diferentes maneiras e veja aquela que mais se adequa a você, não tem problemas se você não sentir que aprendeu tão bem com livros por exemplo.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#se-desafie"&gt;
  &lt;/a&gt;
  Se desafie
&lt;/h3&gt;

&lt;p&gt;Não fique na sua zona de conforto, busque fazer e praticar coisas diferentes daquelas que você já se sente confortável e está acostumado a fazer, e nem fique só nos exemplos que tirou do curso/livro que estava estudando, aprendeu a fazer um CRUD? Pense em como fazer validações, em como deixar mais interessante ou prático de se usar, etc.&lt;br&gt;
E caso ainda não se sinta confiante em fazer algo mais avançado, procure replicar e entender como foram feitos sites que você costuma usar, qual o processo que levou as decisões que foram tomadas e que tente encontrar outras formas de alcançar aquele mesmo resultado.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#procure-aprender-as-regras-do-neg%C3%B3cio"&gt;
  &lt;/a&gt;
  Procure aprender as regras do negócio.
&lt;/h3&gt;

&lt;p&gt;Saber como o sistema funciona, que problemas ele resolve ou deveria resolver, te ajuda a ver onde aquilo vai gerar valor, saber como testar, e quais perguntas fazer quando pegar uma tarefa ou durante o refinamento de uma tarefa por exemplo.&lt;br&gt;
Tenha em mente que ninguém gasta dinheiro para fazer um software "só porquê sim", e sim para resolver algum problema e que os profissionais que se destacam no mercado entendem que não basta saber bem a parte de tecnologia, também é preciso ter uma boa visão de negócios.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nem-tudo-%C3%A9-sobre-c%C3%B3digo"&gt;
  &lt;/a&gt;
  Nem tudo é sobre código
&lt;/h3&gt;

&lt;p&gt;Em alguns casos, você precisa sim de ferramentas especificas, como por exemplo Python para trabalhar com ciência de dados, porém em outros casos a ferramenta não importa, o que importa mesmo é o conhecimento do time e resolver o problema do cliente/usuário, então não fique preso a linguagem &lt;strong&gt;X&lt;/strong&gt; ou framework &lt;strong&gt;Y&lt;/strong&gt;, afinal são somente ferramentas que vão te permitir resolver um problema.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#siga-pessoas-interaja"&gt;
  &lt;/a&gt;
  Siga pessoas, interaja
&lt;/h3&gt;

&lt;p&gt;Network é importante, isso pode te ajudar a conseguir o primeiro ou um novo emprego na área, vai te fazer conhecer coisas novas, ajudar a evitar que você caia em armadilhas, te mostrar outros pontos de vista sobre várias questões e muitas vezes te fazer lembrar que é sobre pessoas e entrega de valor não sobre guerra de linguagem.&lt;br&gt;
Ps: Sim, em alguns momentos você vai ver e talvez até entrar em discussões "bestas" sobre uma tecnologia ou um grupo especifico de tecnologias (stack), entre outras coisas, mas lembre que aquilo que é realmente importante é resolver os problemas do cliente, e entregar valor.&lt;br&gt;
Mas claro que isso não é desculpa para fazer código confuso e cheio de gambiarra.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tenha-foco"&gt;
  &lt;/a&gt;
  Tenha foco
&lt;/h3&gt;

&lt;p&gt;Você não precisa ficar preso a uma stack pelo resto da vida e defender ela como se fosse parte da sua família, mas principalmente no começo é importante ter objetivos fixos e não perder o foco, quer ser Front? &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Aprenda, e aprenda muito bem, a base, a famosa tríade HTML, CSS e JS.&lt;/li&gt;
&lt;li&gt;Depois escolha um framework "da moda" e foque nele, quando estiver confortável tudo bem estudar novas coisas, e até brincar com outras áreas como back ou mobile, mas se você ficar trocando a cada duas semanas de stack dificilmente vai evoluir e isso provavelmente vai te frustrar e fazer você pensar em desistir por achar que "desenvolvimento não é pra você" ou que você não é bom o suficiente, quando na verdade só estava te faltando foco.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#descanse"&gt;
  &lt;/a&gt;
  Descanse
&lt;/h3&gt;

&lt;p&gt;Estudar e se manter atualizado é importante, mas tão importante quanto, para não dizer mais, é descansar, fazer coisas que não sejam ligadas a TI, e cuidar de si mesmo, sua saúde mental agradece.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#considera%C3%A7%C3%B5es-finais"&gt;
  &lt;/a&gt;
  Considerações finais.
&lt;/h2&gt;

&lt;p&gt;Esse post é inspirado em três posts de três pessoas fodas, sendo eles (os posts) &lt;a href="https://willianjusten.com.br/o-que-ninguem-diz-para-iniciantes/"&gt;O que ninguém diz para iniciantes&lt;/a&gt; do Willian Justen, o &lt;a href="https://woliveiras.com.br/posts/Devolva-para-as-comunidades/"&gt;Devolva para as comunidades&lt;/a&gt; do &lt;a href="https://twitter.com/_malabarizando"&gt;William Oliveira&lt;/a&gt; e &lt;a href="https://dev.to/lys/como-consegui-meu-primeiro-estagio-e-dicas-para-lhe-ajudar-a-conseguir-o-seu-5e7o"&gt;Como consegui meu primeiro estagio e dicas para lhe ajudar a conseguir o seu&lt;/a&gt; da &lt;a href="https://twitter.com/techlys"&gt;Amaryllis&lt;/a&gt;&lt;/p&gt;

</description>
      <category>iniciante</category>
      <category>aprendizado</category>
      <category>dev</category>
    </item>
    <item>
      <title>Million.js - The Future of Virtual DOM</title>
      <author>Aiden Bai</author>
      <pubDate>Fri, 16 Jul 2021 01:29:35 +0000</pubDate>
      <link>https://dev.to/aidenybai/million-js-the-future-of-virtual-dom-1e6d</link>
      <guid>https://dev.to/aidenybai/million-js-the-future-of-virtual-dom-1e6d</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Plug: &lt;em&gt;I work on &lt;a href="https://github.com/aidenybai/million"&gt;&lt;strong&gt;Million.js&lt;/strong&gt;&lt;/a&gt;: &amp;lt;1kb virtual DOM - it's fast!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;Virtual DOM needs to leverage the compiler, so that unnecessary diffing is not incurred. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Recently, I published &lt;a href="https://dev.to/aidenybai/why-is-the-virtual-dom-necesssary-59l2"&gt;some&lt;/a&gt; &lt;a href="https://dev.to/aidenybai/how-does-virtual-dom-work-b74"&gt;articles&lt;/a&gt; detailing the Virtual DOM paradigm, implementation, and the benefits and flaws using it. These articles received mixed reception, with some developers agreeing with the points in the article, while others disagreed. They argued that compilation based frameworks that do some level of static analysis (notably &lt;a href="https://sveltejs.dev"&gt;Svelte&lt;/a&gt;) compile to imperative DOM operations and therefore &lt;strong&gt;bypass the overhead of a Virtual DOM engine.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;You may be wondering: What's the point of using Virtual DOM, if you can just use a compiler-based framework like Svelte? While static analysis and &lt;a href="https://tomdale.net/2017/09/compilers-are-the-new-frameworks/"&gt;compilation is the future&lt;/a&gt;, Virtual DOM should not be completely ruled out as an obselete technology. Svelte only is possible if API conditions are constrained, so that the code is predictive and therefore &lt;strong&gt;analyzable&lt;/strong&gt;&lt;em&gt;.&lt;/em&gt; For libraries that need more flexibility, such as React or Vue, conditions cannot be constrained easily and therefore a variant of the Virtual DOM is necessary for those libraries.&lt;/p&gt;

&lt;p&gt;This is why &lt;a href="https://github.com/aidenybai/million"&gt;Million.js&lt;/a&gt; exists—to bring the Virtual DOM into the future by leveraging the compiler for static analysis and optimizations &lt;strong&gt;that makes DOM manipulation be performant and flexible.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#virtual-dom-optimizations"&gt;
  &lt;/a&gt;
  Virtual DOM Optimizations
&lt;/h2&gt;

&lt;p&gt;Traditionally, Virtual DOM engines do a significant amount of computation during the diffing process. For example, when diffing children, the Virtual DOM engine not only linearly calculates which nodes need to be updated, but also determines the possible swaps/moves that can be done. Although this incurrs the least amount of DOM modifications, the computational cost can be great. Even with extremely efficient list diffing algorithms (like &lt;code&gt;list-diff2&lt;/code&gt;), the time complexity is &lt;code&gt;O(n)&lt;/code&gt; in the best case (not including the &lt;code&gt;O(n^3&lt;/code&gt; time complexity baseline for diffing). Repeat this for all the children in a vnode tree and you can &lt;strong&gt;just imagine how inefficient this can be&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;This is why one of the major concepts to create a future oriented Virtual DOM is to be aware and construct the architecture based on the compiler. This not only increases performance by allowing for straight &lt;code&gt;O(1)&lt;/code&gt; operations, but also gracefully falls back to normal diffing when necessary. Additionally, &lt;strong&gt;bundle sizes decrease significantly&lt;/strong&gt;, reducing the amount of code that needs to be executed at runtime.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/aidenybai/million"&gt;Million.js&lt;/a&gt; attempts to implement this with three major "lines of defense":&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Keys:&lt;/strong&gt; Specify the identity of a vnode&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Keys are useful when you know that a certain vnode's position, data, and children will not change between two states. Keys can be provided by the user manually, or generated by the compiler. This allows for the vnode to be skipped entirely, avoiding unnecessary diffing (&lt;code&gt;O(1)&lt;/code&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Flags&lt;/strong&gt;: Specify the type of content of a vnode's children.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Flags allow for diffing to skip certain computationally expensive condition branches. For example, if the vnode's children only contains text nodes, then just setting the &lt;code&gt;textContent&lt;/code&gt; of the element would be significantly faster than constructing and replacing a text node. &lt;a href="https://github.com/aidenybai/million"&gt;Million.js&lt;/a&gt; currently only supports 3 flags: &lt;code&gt;NO_CHILDREN&lt;/code&gt; (&lt;code&gt;O(1)&lt;/code&gt;), &lt;code&gt;ONLY_TEXT_CHILDREN&lt;/code&gt; (&lt;code&gt;O(n)&lt;/code&gt;), and &lt;code&gt;ANY_CHILDREN&lt;/code&gt; (&lt;code&gt;O(n^3)&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Deltas&lt;/strong&gt;: Specify predictive and consistent modifications of a vnode's children.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Deltas can be utilized when simple, imperative micro-actions can be predicted through static analysis. Deltas by default are a series of imperative operations, but leverage the internal diffing algorithm to reduce DOM manipulations. &lt;a href="https://github.com/aidenybai/million"&gt;Million.js&lt;/a&gt; currently supports 3 fundemental Delta operations: &lt;code&gt;INSERT&lt;/code&gt; (&lt;code&gt;O(1)&lt;/code&gt;), &lt;code&gt;UPDATE&lt;/code&gt; (&lt;code&gt;O(1) to O(n^3)&lt;/code&gt;), &lt;code&gt;DELETE&lt;/code&gt; (&lt;code&gt;O(1)&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#compiler-optimizations"&gt;
  &lt;/a&gt;
  Compiler Optimizations
&lt;/h2&gt;

&lt;p&gt;First off, most—if not all of the implementation complexity will be with the compiler. This is because static analysis is really hard to pull in a way so that it operates &lt;a href="https://hackernoon.com/why-using-static-analysis-is-hard-n02m3vt0"&gt;as intended&lt;/a&gt;. Below is a list of possible optimizations, and is by no means "real static analysis."&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Leveraging &lt;a href="https://github.com/aidenybai/million"&gt;Million.js&lt;/a&gt; features:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The primary way to optimize for &lt;a href="https://github.com/aidenybai/million"&gt;Million.js&lt;/a&gt; is just leverage the compiler-focused features that it provides. This is the only way to reduce diffing assuming that the patch scope remains constant.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prerendering + reducing dynamic content&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Another way of making performance better is to not even consider static content by reducing the patching scope—especially if your application is only interactive in certain areas. This is even more efficient than generating imperative DOM operations, as DOM manipulation won't even be needed! Additionally, the initial vnode should be prerendered the page, so that the page doesn't need to be fully initialized at runtime.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;Bad:
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt; inject &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;Click Me!&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

Good:
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&amp;lt;button&amp;gt;&lt;/span&gt;Click Me!&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Static vnode + props hoisting:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A standard optimization to hoist vnodes and props that are static, allowing them to be cached and incurr no generation computational cost. This is best illustrated with a code sample:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Without static VNode hoist&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`My favorite number: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Static VNode needs to be constructed twice&lt;/span&gt;

&lt;span class="c1"&gt;// With static VNode hoist&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;_s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello World!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Static VNode is used twice and cached&lt;/span&gt;

&lt;span class="c1"&gt;// Without static props hoist&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`app&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Static props need to be constructed twice&lt;/span&gt;

&lt;span class="c1"&gt;// With static props hoist&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;_s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`app&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;m&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;_s&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Static props are used twice and cached&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Note: If you feel that this sort of paradigm has a future and are willing to meet those ends—I highly recommend you check out &lt;a href="https://github.com/aidenybai/million"&gt;Million.js&lt;/a&gt; and try working on an implementation of a compiler yourself.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/aidenybai/million"&gt;Million.js&lt;/a&gt; is far from being done, and there is a lot of work that needs to be done. I hope that this article has brought about a new perspective to think of the Virtual DOM as it progresses into the future. Feel free to comment any suggestions or lingering questions you may have!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Install (Flutter + VSCode) on Linux successfully!</title>
      <author>KaySoohyun</author>
      <pubDate>Fri, 16 Jul 2021 01:15:14 +0000</pubDate>
      <link>https://dev.to/kaysoohyun/install-flutter-vscode-on-linux-successfully-2hpg</link>
      <guid>https://dev.to/kaysoohyun/install-flutter-vscode-on-linux-successfully-2hpg</guid>
      <description>&lt;h6&gt;
  &lt;a href="#hi-everyone-this-is-my-first-post-i-really-dont-like-do-this-but-i-like-to-help-so-here-i-am"&gt;
  &lt;/a&gt;
  Hi everyone! This is my first post! I really don't like do this but i like to help so here i am.
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#i-dont-know-how-is-in-other-distros-or-with-android-studio-i-just-tell-my-case-i-have-installed-it-five-times-the-first-two-were-very-difficult-and-i-did-not-understand-anything-but-the-third-time-i-understood-and-wrote-a-guide-on-paper-the-fourth-time-i-followed-the-guide-and-it-was-super-easy-the-fifth-times-i-tried-to-improve-the-guide-and-failed-hahaha-but-i-read-a-lot-on-the-web-for-the-first-few-times-and-didnt-find-the-answer-so-this-post-is-for-people-like-me-who-couldnt-solve-their-problems-here-is-the-solution-i-really-hope-this-helps-someone"&gt;
  &lt;/a&gt;
  I don't know how is in other distros or with android studio, i just tell my case. I have installed it five times, the first two were very difficult and I did not understand anything. But the third time I understood and wrote a guide on paper. The fourth time I followed the guide and it was super easy. The fifth times I tried to improve the guide and failed hahaha. But I read a lot on the web for the first few times and didn't find the answer, so this post is for people like me who couldn't solve their problems: "Here is the solution" (I really hope this helps someone).
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#ps-if-you-ask-me-why-i-installed-five-times-well-i-really-like-to-format-my-computer-and-the-second-and-fourth-times-were-on-my-sisters-computer-she-also-formatted-her-computer"&gt;
  &lt;/a&gt;
  PS: If you ask me why I installed five times ... well ... I really like to format my computer and the second and fourth times were on my sister's computer. She also formatted her computer.
&lt;/h6&gt;

&lt;h6&gt;
  &lt;a href="#here-we-go-the-goal-is-install-flutter-and-run-with-vscode-on-linux-so-you-need-a-computer-with-internet-and-a-linux-distro-im-a-arch-linux-user-but-i-dont-gonna-put-exclusive-commands"&gt;
  &lt;/a&gt;
  Here we go, the goal is install flutter and run with vscode on linux so you need a computer with internet and a linux distro. I'm a arch linux user but i don't gonna put exclusive commands.
&lt;/h6&gt;




&lt;h2&gt;
  &lt;a href="#the-happiness-recipe"&gt;
  &lt;/a&gt;
  The happiness recipe:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#installing-flutter"&gt;
  &lt;/a&gt;
  Installing flutter
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; Install the &lt;code&gt;flutter&lt;/code&gt; package.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;I did &lt;code&gt;yay -S flutter&lt;/code&gt; and ask me what java want to install. If your package manager don't installs you a java version you must do it by your own.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Select or install &lt;code&gt;jdk8-openjdk&lt;/code&gt;. &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;I recommend version 8, first I tried with 14 but some errors appear, and I read on stackoverflow that with 8 everything works fine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Run &lt;code&gt;flutter doctor&lt;/code&gt;. It will tell you that you don't have permission to create a directory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run &lt;code&gt;sudo chown -R user /opt/flutter&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;This is gonna change the owner of the directory where flutter is installed and now the directory will be yours, not of root, so you can make things inside. I tried change only the permissions of the directory and failed, it still told me that I had no permissions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Run again &lt;code&gt;flutter doctor&lt;/code&gt; and now is gonna to download the dart sdk and a few more dependencies. After finish it show you whats need flutter to run. Is there three points: Check [✓], Warm [!] and Wrong [✗]. If something is wrong flutter don't run so we have to fix it. (Like bob the builder says, Yes we can!). After every install step run flutter doctor, i added a table with the result so you can compare.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#current-state"&gt;
  &lt;/a&gt;
  Current state
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;Flutter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;✗&lt;/td&gt;
&lt;td&gt;Android toolchain&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;✗&lt;/td&gt;
&lt;td&gt;Chrome&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;Android Studio&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;Connected device&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#installing-android-sdk"&gt;
  &lt;/a&gt;
  Installing Android SDK
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Install &lt;code&gt;Android SDK&lt;/code&gt;. The must packages are:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;android-sdk-build-tools
android-sdk-platform-tools
android-platform
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;After that, if you run flutter doctor it says &lt;strong&gt;&lt;em&gt;Android licenses not accepted&lt;/em&gt;&lt;/strong&gt; .&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;sudo chown -R user /opt/android-sdk/&lt;/code&gt; and change the owner of the android-sdk directory.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;If you try to accept the licences before, even if you say yes, the value don't save because you aren't the owner or you don't have permission to do things on that directory. So, you change the owner and then accept the licenses.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;flutter doctor --android-licenses&lt;/code&gt; and say yes to all question to accept them.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#current-state"&gt;
  &lt;/a&gt;
  Current state
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;Flutter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;Android toolchain&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;✗&lt;/td&gt;
&lt;td&gt;Chrome&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;Android Studio&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;Connected device&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Maybe you have Chrome checked, if is that case, you can ignore the next tip.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-google-chrome"&gt;
  &lt;/a&gt;
  Installing Google Chrome
&lt;/h3&gt;

&lt;p&gt;You must have some browser on your computer. I tried with Google Chrome and Chromium and works good, but i don't know if works with others. I write this using Google Chrome.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First, install the browser if you don't have it yet.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Find the path where is installed with &lt;code&gt;which google-chrome-stable&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Edit the file &lt;code&gt;.bashrc&lt;/code&gt; with &lt;code&gt;nano&lt;/code&gt; or with your favorite text editor. The file is hidden on your home directory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add this lines replacing with the correct path:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export ANDROID_SDK_ROOT=/opt/android-sdk
export CHROME_EXECUTABLE=/usr/bin/google-chrome-stable
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Save the file and run &lt;code&gt;source ~.bashrc&lt;/code&gt; to reload the terminal and load the changes (or simple close and open again).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run &lt;code&gt;flutter doctor&lt;/code&gt; and the third item is checked now.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#current-state"&gt;
  &lt;/a&gt;
  Current state
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;Flutter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;Android toolchain&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;Chrome&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;td&gt;Android Studio&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;Connected device&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;The four and five items don't been necessary now. Let's go with vscode things now.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-visual-studio-code"&gt;
  &lt;/a&gt;
  Installing Visual Studio Code
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Install &lt;code&gt;vscode&lt;/code&gt; if you don't have it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go to Extensions, search &lt;code&gt;flutter&lt;/code&gt; and install it. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open the integrate terminal and run &lt;code&gt;flutter doctor&lt;/code&gt;:&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Everything is fine and works good! Yey!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;WTF is flutter?&lt;/code&gt; well.. if you have this error, you have to go to &lt;code&gt;File &amp;gt; Preferences &amp;gt; Settings&lt;/code&gt;, type &lt;code&gt;terminal&lt;/code&gt; and change the default for &lt;code&gt;xterm&lt;/code&gt;. This is because your flutter is configurated to use other shell. Reload vscode and try again.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don't find the google path again.. Open with the text editor &lt;code&gt;.config/Code - OSS/User/settings.json&lt;/code&gt; and add the following line with the correct path:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"dart.env":
  {
    "CHROME_EXECUTABLE": "/usr/bin/google-chrome-stable"
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Reload the vscode and run again flutter doctor, this should works now.&lt;/p&gt;

&lt;p&gt;And done! Yey!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extras"&gt;
  &lt;/a&gt;
  Extras:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you failed installing google chrome is because maybe you don't have bash! Don't panic, you just have to find the equivalent for your shell. You just need to know where is the config file (always is hidden on home directory but the name change according the shell). And if you have another shell when you install vscode and get some error you have to set your shell, not mine.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you use your cellphone like emulator, when you connect it to the computer select the option "transfer photos" if vscode don't recognize.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Maybe you wanna try vscodium, is just like vscode but without the telemetry, i find it recently.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All comments and suggestion are welcome! And if you have some question tell me and i gonna try to answer it.&lt;br&gt;
Lastly, I speak spanish so, maybe i have some errors on redaction, please help me if you can! And if you find a better way to do something, tell me too! Everything is welcome :D You can send me a message on social medias or telegram, find me &lt;a class="mentioned-user" href="https://dev.to/kaysoohyun"&gt;@kaysoohyun&lt;/a&gt;
 &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope this help somebody! Thanks for reading!&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>vscode</category>
      <category>linux</category>
      <category>install</category>
    </item>
    <item>
      <title>How to Handle Time Zones using DateTime and Luxon</title>
      <author>Luis Aviles</author>
      <pubDate>Fri, 16 Jul 2021 00:53:18 +0000</pubDate>
      <link>https://dev.to/thisdotmedia/how-to-handle-time-zones-using-datetime-and-luxon-2mib</link>
      <guid>https://dev.to/thisdotmedia/how-to-handle-time-zones-using-datetime-and-luxon-2mib</guid>
      <description>&lt;p&gt;Raise your hand if you've ever had issues dealing with time zones, or even if you've asked, "How do I convert a Date object to another time zone in JavaScript?"&lt;/p&gt;

&lt;p&gt;In my personal experience, this kind of requirement can become a big problem for developers if the date-handling-related concepts are not clearly understood, or the right tools are not used.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-dates-and-time-zones-in-javascript"&gt;
  &lt;/a&gt;
  Using Dates and Time Zones in JavaScript
&lt;/h2&gt;

&lt;p&gt;Let's suppose you have a date representation from an external API, and you need to convert the date to any desired time zone.&lt;/p&gt;

&lt;p&gt;The best option for this is using a representation that meets the &lt;a href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO 8601&lt;/a&gt; standard. As an example of this, we can set a date like &lt;code&gt;2021/06/10 02:20:50&lt;/code&gt; in UTC. Then, the standard notation for this date will be &lt;code&gt;2021-06-10T02:20:50+00:00&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;On other hand, the JavaScript language provides a &lt;code&gt;Date&lt;/code&gt; object that represents a single moment in time. You can create a Date object in different ways:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Get the current date&lt;/span&gt;

&lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2021-06-10T02:20:50+00:00&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// An object representation of given string date&lt;/span&gt;

&lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// Creates an object representation from another one&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, we can set a time zone value to any given &lt;code&gt;Date&lt;/code&gt; object as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;stringInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2021-06-10T02:20:50+00:00&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;timeZone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;America/Los_Angeles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dateObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stringInput&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toLocaleString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;en-US&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;timeZone&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dateObject&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Prints: 6/9/2021, 7:20:50 PM&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;toLocaleString&lt;/code&gt; method returns a string with a language-sensitive representation of the &lt;code&gt;Date&lt;/code&gt; object. At the same time, this method supports optional arguments where you can configure the time zone. Find more information about this method &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As you can see, the output date matches the configured time zone (GMT-7). However, we have a string representation of the date, and it would be much better if we work with a JavaScript object instead.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#luxon"&gt;
  &lt;/a&gt;
  Luxon
&lt;/h2&gt;

&lt;p&gt;Luxon is considered an evolution of &lt;a href="https://momentjs.com/docs/#/-project-status/"&gt;Moment.js&lt;/a&gt;- a very popular library for date handling in the JavaScript ecosystem.&lt;/p&gt;

&lt;p&gt;As the &lt;a href="https://moment.github.io/luxon/"&gt;Luxon project&lt;/a&gt; says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Luxon is a powerful, modern, and friendly wrapper for JavaScript dates and times.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Indeed, this library solves most of the common problems related to Date handling:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Date internationalization&lt;/li&gt;
&lt;li&gt;Time zones and Offsets&lt;/li&gt;
&lt;li&gt;Calendars support&lt;/li&gt;
&lt;li&gt;Dates Formatting&lt;/li&gt;
&lt;li&gt;Dates Parsing&lt;/li&gt;
&lt;li&gt;Dates Math (Add/Subtract days, months, etc)&lt;/li&gt;
&lt;li&gt;Dates Validation&lt;/li&gt;
&lt;li&gt;and More...&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#the-datetime-object"&gt;
  &lt;/a&gt;
  The DateTime Object
&lt;/h3&gt;

&lt;p&gt;The most important part of the Luxon library is the &lt;code&gt;DateTime&lt;/code&gt; object. It can be considered a wrapper of the native &lt;code&gt;Date&lt;/code&gt; object along with a timezone, and a local configuration.&lt;/p&gt;

&lt;p&gt;The simplest way of creating a &lt;code&gt;DateTime&lt;/code&gt; object is as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;DateTime&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;luxon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dateTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;local&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Current Date&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toISO&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// 2021-06-22T21:11:45.638-04:00&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The method &lt;code&gt;toISO()&lt;/code&gt; will return an ISO 8601-compliant string representation of the &lt;code&gt;DateTime&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;Also, you can create a &lt;code&gt;DateTime&lt;/code&gt; in a specific time zone.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create a DateTime in a Specific Timezone&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;zone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;America/Denver&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dateTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromObject&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="nx"&gt;zone&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Current Date&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toISO&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// 2021-06-22T19:11:45.640-06:00&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can compare with the previous example, the time output is different because of the use of &lt;code&gt;America/Denver&lt;/code&gt; as the time zone.&lt;/p&gt;

&lt;p&gt;Of course, there is a way to create a custom date in a specific time zone:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dateTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromObject&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;America/Denver&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;day&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;month&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Custom date&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toISO&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;//2021-05-01T19:11:45.641-06:00&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;set&lt;/code&gt; method allows overriding specific properties such as &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt;, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#converting-a-datetime-to-a-different-time-zone"&gt;
  &lt;/a&gt;
  Converting a DateTime to a different Time Zone
&lt;/h3&gt;

&lt;p&gt;Now let's suppose we have a &lt;code&gt;DateTime&lt;/code&gt; object, and we need to convert it to a different time zone.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dateTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fromObject&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;America/Denver&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;day&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;month&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// Convert existing date to another Timezone&lt;/span&gt;
&lt;span class="nx"&gt;dateTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setZone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;America/La_Paz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Custom date, America/La_Paz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toISO&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;//2021-05-01T21:11:45.641-04:00&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#configuring-the-default-time-zone"&gt;
  &lt;/a&gt;
  Configuring the Default Time Zone
&lt;/h3&gt;

&lt;p&gt;What happens when the whole application needs to run every date in a specific time zone? Just suppose you have defined a configuration within your app to allow the selection of a time zone at any time.&lt;/p&gt;

&lt;p&gt;To solve this problem, you don't need to use the time zone string here and there. The &lt;code&gt;Settings&lt;/code&gt; class, instead, comes to the rescue:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Settings&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;luxon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Configure the time zone&lt;/span&gt;
&lt;span class="nx"&gt;Settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaultZoneName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;America/Denver&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defaultZoneName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Reading the configured time zone.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;defaultZoneName&lt;/code&gt; can be used as a &lt;code&gt;set&lt;/code&gt; or &lt;code&gt;get&lt;/code&gt; method for the default time zone when you're working with the library.&lt;/p&gt;

&lt;p&gt;In the same way, the &lt;code&gt;Settings&lt;/code&gt; class contains other &lt;a href="https://moment.github.io/luxon/docs/class/src/settings.js~Settings.html"&gt;methods&lt;/a&gt; to configure Luxon's behavior.&lt;/p&gt;

&lt;p&gt;Then, when you're creating a new &lt;code&gt;DateTime&lt;/code&gt; object again, it will take the configured time zone by default.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;dateTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;local&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Configured defaultZoneName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toISO&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;//2021-06-22T19:21:54.362-06:00&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pay attention to the offset value, which corresponds now with &lt;code&gt;America/Denver&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#validate-a-time-zone"&gt;
  &lt;/a&gt;
  Validate a Time Zone
&lt;/h3&gt;

&lt;p&gt;In case you define a user entry point to configure the time zone globally, it is important to validate the text before causing problems with the &lt;code&gt;DateTime&lt;/code&gt; objects.&lt;/p&gt;

&lt;p&gt;A useful way to do it is through, again, a &lt;code&gt;DateTime&lt;/code&gt; object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;timeZone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;America/Not_Defined_TZ&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myDateTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;local&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;setZone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timeZone&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;timeZone valid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;myDateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isValid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Prints 'false'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now try again with a valid time zone, for example, &lt;code&gt;America/Los_Angeles&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#live-demo"&gt;
  &lt;/a&gt;
  Live Demo
&lt;/h2&gt;

&lt;p&gt;Wanna play around with this code? Just open the embedded &lt;a href="https://codesandbox.io/s/typescript-luxon-9tq27?file=/src/index.ts"&gt;CodeSandbox&lt;/a&gt; editor:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/typescript-luxon-9tq27"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, I described a couple of useful methods for using Luxon for Time Zone handling using either JavaScript or TypeScript. Personally, I consider it a very useful library, and it also avoids rewriting and testing your own code for handling dates and time zones, which could save you a lot of time.&lt;/p&gt;

&lt;p&gt;Feel free to reach out on &lt;a href="https://twitter.com/luixaviles"&gt;Twitter&lt;/a&gt; if you have any questions. Follow me on &lt;a href="https://github.com/luixaviles"&gt;GitHub&lt;/a&gt; to see more about my work.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;This Dot Labs is a modern web consultancy focused on helping companies realize their digital transformation efforts. For expert architectural guidance, training, or consulting in React, Angular, Vue, Web Components, GraphQL, Node, Bazel, or Polymer, visit &lt;a href="https://www.thisdotlabs.com"&gt;thisdotlabs.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This Dot Media is focused on creating an inclusive and educational web for all. We keep you up to date with advancements in the modern web through events, podcasts, and free content. To learn, visit &lt;a href="https://www.thisdot.co"&gt;thisdot.co&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 useful Input Attributes</title>
      <author>Aya Bouchiha</author>
      <pubDate>Fri, 16 Jul 2021 00:39:05 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/5-useful-input-attributes-1b64</link>
      <guid>https://dev.to/ayabouchiha/5-useful-input-attributes-1b64</guid>
      <description>&lt;p&gt;Hi,  this #day-33,  we are going to discuss 5 useful input attributes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pattern"&gt;
  &lt;/a&gt;
  pattern
&lt;/h2&gt;

&lt;p&gt;this attribute is almost used with a title attribute that describes the input's pattern, its role is to specify a valid JavaScript regular expression that the input field's value is checked against when the form is submitted. It works with the following input types: (&lt;em&gt;text, email, tel, password, search, url, date&lt;/em&gt;).&lt;br&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern"&gt;more details&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
        &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
        &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"full name..."&lt;/span&gt;
        &lt;span class="na"&gt;pattern=&lt;/span&gt;&lt;span class="s"&gt;"[A-z]{8,16}"&lt;/span&gt;
        &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"the full name should be between 4 and 15 letters"&lt;/span&gt;
    &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gS48gvN7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/umipwumqnmpo5ij7a5s1.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gS48gvN7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/umipwumqnmpo5ij7a5s1.PNG" alt="input attributes Aya Bouchiha"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#maxlength"&gt;
  &lt;/a&gt;
  maxlength
&lt;/h2&gt;

&lt;p&gt;maxlength is an input attribute that specifies the maximum length of characters allowed in an input field. And when the length of the input's value is equal to the maxlength, the input field will not accept more characters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"phone password..."&lt;/span&gt; &lt;span class="na"&gt;maxlength=&lt;/span&gt;&lt;span class="s"&gt;"4"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
After reaching 4 characters, the input field doesn't accept more characters.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E3opn0jw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1l1pu4og444gcxh73no0.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E3opn0jw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1l1pu4og444gcxh73no0.PNG" alt="input attributes Aya Bouchiha"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#autocomplete"&gt;
  &lt;/a&gt;
  autocomplete
&lt;/h2&gt;

&lt;p&gt;this attribute specifies whether the browser can predict the input's value and displays options to fill in the field when a user starts typing or not. This attribute works with the following input type (text, tel, email, password, search, url, date pickers, color, range) &lt;strong&gt;&amp;lt;input&amp;gt;&lt;/strong&gt; and &lt;strong&gt;&amp;lt;form&amp;gt;&lt;/strong&gt; as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
        &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
        &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"first name"&lt;/span&gt;
        &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"f-name"&lt;/span&gt;
        &lt;span class="na"&gt;autocomplete=&lt;/span&gt;&lt;span class="s"&gt;"on"&lt;/span&gt;
    &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;autocomplete=&lt;/span&gt;&lt;span class="s"&gt;"off"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y-MoyZGx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1aiqc74cx3l8j2xpknr.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y-MoyZGx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d1aiqc74cx3l8j2xpknr.PNG" alt="input attributes Aya Bouchiha"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#autofocus"&gt;
  &lt;/a&gt;
  autofocus
&lt;/h2&gt;

&lt;p&gt;autofocus is an attribute that specifies that an input field should automatically get focus when the page loads or not.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"your name..."&lt;/span&gt; &lt;span class="na"&gt;autofocus&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DT_co4dR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yb77btzec07xdjbinz15.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DT_co4dR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yb77btzec07xdjbinz15.PNG" alt="input attributes Aya Bouchiha"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#list"&gt;
  &lt;/a&gt;
  list
&lt;/h2&gt;

&lt;p&gt;This attribute refers to a &lt;strong&gt;&amp;lt;datalist&amp;gt;&lt;/strong&gt; element that contains pre-defined options for an &lt;strong&gt;&amp;lt;input&amp;gt;&lt;/strong&gt; element.&lt;br&gt;
&lt;a href="https://www.geeksforgeeks.org/html-list-attribute/#:~:text=The%20list%20attribute%20in%20HTML,by%20the%20element.&amp;amp;text=Where%2C%20name%20is%20a%20string,with%20the%20element."&gt;more details&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;  &lt;span class="na"&gt;list=&lt;/span&gt;&lt;span class="s"&gt;"programming-languages"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;datalist&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"programming-languages"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"java"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"javascript"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"C#"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;option&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"python"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/datalist&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CNLlb9Vp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8xkadols3rxr63y1vq0x.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CNLlb9Vp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8xkadols3rxr63y1vq0x.PNG" alt="input attributes Aya Bouchiha"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;pattern&lt;/strong&gt;: specifies a valid JavaScript regular expression that the input field's value is checked against.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;maxlength&lt;/strong&gt;: specifies the maximum length of characters allowed in an input field.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;autocomplete&lt;/strong&gt;: specifies that the browser can display options to fill in the field when a user starts typing or not.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;autofocus&lt;/strong&gt;: specifies that an input field should automatically get focus when the page loads or not&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;list&lt;/strong&gt;: used to display a list of pre-defined options for an element to suggest the user.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/html/html_form_attributes.asp"&gt;https://www.w3schools.com/html/html_form_attributes.asp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://t.me/AyaBouchiha"&gt;for contacting me&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy codding!&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Kotlin Tutorial - 3 Control Flow (Iteration)</title>
      <author>nadirbasalamah</author>
      <pubDate>Fri, 16 Jul 2021 00:07:18 +0000</pubDate>
      <link>https://dev.to/nadirbasalamah/kotlin-tutorial-3-control-flow-iteration-44m3</link>
      <guid>https://dev.to/nadirbasalamah/kotlin-tutorial-3-control-flow-iteration-44m3</guid>
      <description>&lt;p&gt;In Kotlin, there are two main types to create an iteration or loop by using &lt;code&gt;while&lt;/code&gt; and &lt;code&gt;for&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#while-loop"&gt;
  &lt;/a&gt;
  While loop
&lt;/h2&gt;

&lt;p&gt;In &lt;code&gt;while&lt;/code&gt; loop, the condition is checked first before the code inside &lt;code&gt;while&lt;/code&gt; block is executed. This is the basic syntax of &lt;code&gt;while&lt;/code&gt; loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;while(condition) {
    // code..
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, the &lt;code&gt;while&lt;/code&gt; loop is used to prints out the number from &lt;code&gt;1&lt;/code&gt; until &lt;code&gt;4&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;num&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;++&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1
2
3
4

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Based on the code above, the &lt;code&gt;while&lt;/code&gt; loop has a flow like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Check the condition.&lt;/li&gt;
&lt;li&gt;If the condition is true, execute the codes inside &lt;code&gt;while&lt;/code&gt; block.&lt;/li&gt;
&lt;li&gt;If the condition is false, stop the execution.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Notice that inside &lt;code&gt;while&lt;/code&gt; block, there is a code that used to increase the &lt;code&gt;num&lt;/code&gt; value by 1 with &lt;code&gt;++&lt;/code&gt; operator. The &lt;code&gt;num++&lt;/code&gt; equals to &lt;code&gt;num = num + 1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here it is another similiar operator that usually used together with loop mechanism.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operator&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;+=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;a += b&lt;/code&gt; equals to &lt;code&gt;a = a + b&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;a -= b&lt;/code&gt; equals to &lt;code&gt;a = a - b&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;*=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;a *= b&lt;/code&gt; equals to &lt;code&gt;a = a * b&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;a /= b&lt;/code&gt; equals to &lt;code&gt;a = a / b&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;a %= b&lt;/code&gt; equals to &lt;code&gt;a = a % b&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;++&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;a++&lt;/code&gt; equals to &lt;code&gt;a = a + 1&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;a--&lt;/code&gt; equals to &lt;code&gt;a = a - 1&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;There is another type of &lt;code&gt;while&lt;/code&gt; loop called &lt;code&gt;do while&lt;/code&gt; loop. The &lt;code&gt;do while&lt;/code&gt; loop executes the code inside &lt;code&gt;do while&lt;/code&gt; block then check the condition. This is the basic syntax of &lt;code&gt;do while&lt;/code&gt; loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;do {
    // code..
} while(condition)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, the &lt;code&gt;do while&lt;/code&gt; loop is used.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// create variable called num&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;num&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="c1"&gt;// use do while loop&lt;/span&gt;
    &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// prints out the num's value&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;// increase the num's value by 1&lt;/span&gt;
        &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;++&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Based on the code above, the code inside &lt;code&gt;do while&lt;/code&gt; block is executed first then the condition of &lt;code&gt;num&lt;/code&gt; value is checked.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#for-loop"&gt;
  &lt;/a&gt;
  For loop
&lt;/h2&gt;

&lt;p&gt;For loop is a loop mechanism that suitable for range condition. This is the basic syntax of using &lt;code&gt;for&lt;/code&gt; loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for(range_condition) {
    // code..
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, the &lt;code&gt;for&lt;/code&gt; loop is used to prints out number from 1 until 4.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1
2
3
4

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Based on the code above, the range condition is specified using &lt;code&gt;in&lt;/code&gt; keyword followed with specified range.&lt;/p&gt;

&lt;p&gt;Another way to create range condition is using &lt;code&gt;until&lt;/code&gt; keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var_name in initial_value until limit_value
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the example of using &lt;code&gt;until&lt;/code&gt; keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;until&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1
2

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Based on the code above, the &lt;code&gt;num&lt;/code&gt; value that printed out is &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; because the &lt;code&gt;3&lt;/code&gt; acts as a limit value only. If the &lt;code&gt;num&lt;/code&gt; value equals with the limit value (in this case is &lt;code&gt;3&lt;/code&gt;), the code execution inside &lt;code&gt;for&lt;/code&gt; block is stopped.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;for&lt;/code&gt; loop is suitable for iterating through collection like &lt;code&gt;List&lt;/code&gt;. In this example, the &lt;code&gt;for&lt;/code&gt; loop is used to iterate through &lt;code&gt;list&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// create a list of integers&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;list&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// using for loop&lt;/span&gt;
    &lt;span class="c1"&gt;// to iterate through every list items&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1
2
3
4

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Based on the code above, the specified range is &lt;code&gt;item in list&lt;/code&gt; which means every item exists in &lt;code&gt;list&lt;/code&gt;, execute the code inside &lt;code&gt;for&lt;/code&gt; block. The code inside &lt;code&gt;for&lt;/code&gt; block is executed to prints out the value from &lt;code&gt;item&lt;/code&gt; temporary variable.&lt;/p&gt;

&lt;p&gt;The nested &lt;code&gt;for&lt;/code&gt; loop is also available. In this example, the nested &lt;code&gt;for&lt;/code&gt; loop is used to iterate through list of collections.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// create a list of collections&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;database&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Docker"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Git"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Ansible"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Kotlin"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Java"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Golang"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;// using nested for loop&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;database&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Docker
Git
Ansible
Kotlin
Java
Golang

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Based on the code above, the inner loop is executed first then the outer loop is executed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#break-and-continue-keyword"&gt;
  &lt;/a&gt;
  break and continue keyword
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; keyword usually used together with loop mechanism. The &lt;code&gt;continue&lt;/code&gt; keyword means continue the execution of code whilst &lt;code&gt;break&lt;/code&gt; keyword means stop the code execution.&lt;/p&gt;

&lt;p&gt;In this example, the &lt;code&gt;continue&lt;/code&gt; keyword is used to print out only odd values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1
3
5
7
9

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Based on the code above, the &lt;code&gt;continue&lt;/code&gt; keyword is used to execute into the next loop which means if &lt;code&gt;num % 2 == 0&lt;/code&gt; condition is true, the &lt;code&gt;num&lt;/code&gt; value is skipped then the next loop is executed.&lt;/p&gt;

&lt;p&gt;In this example, the &lt;code&gt;break&lt;/code&gt; keyword is used to stop the execution inside &lt;code&gt;while&lt;/code&gt; loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;num&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;++&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1
2

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Based on the code above, the &lt;code&gt;break&lt;/code&gt; keyword is used to stop the execution if the value from &lt;code&gt;num&lt;/code&gt; variable is equals &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;While loop is suitable for unexact condition.&lt;/li&gt;
&lt;li&gt;For loop is suitable for range or exact condition.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#sources"&gt;
  &lt;/a&gt;
  Sources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Learn more about iteration or loop in Kotlin by visiting this &lt;a href="https://kotlinlang.org/docs/control-flow.html#for-loops"&gt;link&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope this article is helpful for learning the Kotlin programming language. If you have any thoughts or comments you can write in the discussion section below.&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>🎉 Introducing Spottr - Your Spotify Stats Year-Round</title>
      <author>Stanley Lim</author>
      <pubDate>Thu, 15 Jul 2021 21:57:53 +0000</pubDate>
      <link>https://dev.to/spiderpig86/introducing-spottr-your-spotify-stats-year-round-o6k</link>
      <guid>https://dev.to/spiderpig86/introducing-spottr-your-spotify-stats-year-round-o6k</guid>
      <description>&lt;p&gt;As a long-time Spotify user, I love the end-of-year stats that Spotify surfaces each year. If you’re like me, you probably hate waiting till the end of each year just to see your top songs, artists, and genres.&lt;/p&gt;

&lt;p&gt;This is why I developed &lt;strong&gt;&lt;a href="https://spottr.vercel.app"&gt;Spottr&lt;/a&gt;&lt;/strong&gt;, a progressive web app that satisfies that curiosity!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mV-SzE0u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Spiderpig86/spottr/master/src/assets/images/preview.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mV-SzE0u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Spiderpig86/spottr/master/src/assets/images/preview.png" alt="Spottr Preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Spottr is a PWA developed to surface your Spotify listening habits year-round rather than at the end of each year.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why
&lt;/h2&gt;

&lt;p&gt;The first main reason as stated above was the burning desire I had to know about how my listening habits have changed over time.&lt;/p&gt;

&lt;p&gt;The second reason was to rewrite this project again from scratch using Angular 10, Tailwind CSS, and push my design and front-end development skills. My first iteration was started back in 2018 with Angular 6, but I scrapped that since the project was not planned out properly. I am by no means an expert front-end developer (I mainly do back-end), but I wanted to see if I can produce a significantly better application just with more careful planning and research. &lt;/p&gt;

&lt;p&gt;One of the more interesting pieces of the app is the &lt;code&gt;CachedHttpService&lt;/code&gt;. This TTL cache was developed out of a need to keep the PWA snappy and keep data consumption low. If you think about the usage patterns of someone using Spotify, people may sometimes spend lots of time browsing different artists, albums, tracks, etc. which could result in a lot of extra round trips between the client and Spotify servers. This service was developed to provide a centralized mechanism to cache all HTTP requests. This allows for any other service to leverage the same caching strategy, resulting in faster development times.&lt;/p&gt;

&lt;p&gt;The library also allows for a custom time limit to be set for the cached entries (the duration is known as TTL or time-to-live). Each request can have a unique TTL if you so desire.&lt;/p&gt;

&lt;p&gt;As a result, all other Angular services developed such as &lt;code&gt;ArtistService&lt;/code&gt;, &lt;code&gt;TrackService&lt;/code&gt;, etc. all follow a repeatable and consistent pattern which reduces the chances for any silly bugs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Inject the service here&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CachedHttpService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="nx"&gt;getSomeData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;GetSomeDataResponse&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ENDPOINTS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`get_some_data`&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="na"&gt;cacheMins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DEFAULT_CACHE_MINS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;putSomeData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Bar&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PutSomeDataResponse&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ENDPOINTS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`post_some_data`&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PutSomeDataRequest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is just a brief overview of how it works, but I may write a more in-depth post on this in the future.&lt;/p&gt;

&lt;p&gt;On the UI side, this is my first project experimenting with Tailwind CSS which ended up being quite pleasant to use. A good chunk of the interface was built using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout"&gt;CSS Grid&lt;/a&gt;. As a long-time Flexbox user, CSS Grid has proven to be an even more flexible way to lay out your components.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Short self plug: If you’re looking for an extensive yet simple-to-learn SCSS framework, check out my project &lt;a href="https://cirrus-ui.netlify.app/"&gt;Cirrus&lt;/a&gt;!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use"&gt;
  &lt;/a&gt;
  How to Use
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Head over to &lt;a href="https://spottr.vercel.app/login"&gt;spottr.vercel.app&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Log in using your Spotify credentials.&lt;/li&gt;
&lt;li&gt;Browse Spottr!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#current-features"&gt;
  &lt;/a&gt;
  Current Features
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;📈 Top Stats&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;View details for your top:

&lt;ul&gt;
&lt;li&gt;Artists&lt;/li&gt;
&lt;li&gt;Tracks&lt;/li&gt;
&lt;li&gt;Genres&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Get data broken down for:

&lt;ul&gt;
&lt;li&gt;Last 4 Weeks&lt;/li&gt;
&lt;li&gt;Last 6 Months&lt;/li&gt;
&lt;li&gt;All Time&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;🎶 Playlist&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Browse the playlists you follow or created.&lt;/li&gt;
&lt;li&gt;Get similar tracks for a given playlist.&lt;/li&gt;
&lt;li&gt;Export similar playlist to your Spotify account.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;🎸 Track&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;View track details including musical and audio features.&lt;/li&gt;
&lt;li&gt;Discover related tracks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;🎤 Artist&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;View artist genres, follower count, and popularity.&lt;/li&gt;
&lt;li&gt;View artist's top tracks.&lt;/li&gt;
&lt;li&gt;Discover similar artists.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#preview"&gt;
  &lt;/a&gt;
  Preview
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RwUVuheV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/Spiderpig86/spottr/master/images/demo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RwUVuheV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/Spiderpig86/spottr/master/images/demo.gif" alt="Preview Gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tech-stack"&gt;
  &lt;/a&gt;
  Tech Stack
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;⚡ &lt;a href="https://angular.io/"&gt;Angular&lt;/a&gt; - a platform for building mobile and desktop web applications.&lt;/li&gt;
&lt;li&gt;🎨 &lt;a href="https://tailwindcss.com/"&gt;Tailwind&lt;/a&gt; - Rapidly build modern websites without ever leaving your HTML.&lt;/li&gt;
&lt;li&gt;🎵 &lt;a href="https://developer.spotify.com/documentation/web-api/"&gt;Spotify API&lt;/a&gt; - for fetching Spotify data.&lt;/li&gt;
&lt;li&gt;📊 &lt;a href="https://www.chartjs.org/"&gt;Chart.js&lt;/a&gt; - Simple, clean and engaging HTML5 based JavaScript charts.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#planned-updates"&gt;
  &lt;/a&gt;
  Planned Updates
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;View recently played tracks.&lt;/li&gt;
&lt;li&gt;View top albums.&lt;/li&gt;
&lt;li&gt;Detailed beat analysis graph.&lt;/li&gt;
&lt;li&gt;Informational cards for each track and artist.&lt;/li&gt;
&lt;li&gt;Song lyrics.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h2&gt;

&lt;p&gt;💎 Thank you for taking the time to check out this post. For more content like this, head over to my actual &lt;a href="https://blog.stanleylim.me/"&gt;blog&lt;/a&gt;. Feel free to reach out to me on &lt;a href="https://www.linkedin.com/in/serbis/"&gt;LinkedIn&lt;/a&gt; and follow me on &lt;a href="https://github.com/Spiderpig86"&gt;Github&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>showdev</category>
      <category>javascript</category>
      <category>angular</category>
    </item>
    <item>
      <title>How I wrote a Brain-Computer Interface Game with 0 knowledge - PsyBreaker</title>
      <author>Alex Batrinu</author>
      <pubDate>Thu, 15 Jul 2021 21:53:34 +0000</pubDate>
      <link>https://dev.to/oldmane13/how-i-wrote-a-brain-computer-interface-game-with-0-knowledge-psybreaker-5f3c</link>
      <guid>https://dev.to/oldmane13/how-i-wrote-a-brain-computer-interface-game-with-0-knowledge-psybreaker-5f3c</guid>
      <description>&lt;p&gt;I've been wondering for a while about how to start this article, but I think I'll just jump into it.&lt;br&gt;
In 2018 I made a Brain-Computer Interface (BCI) game called PsyBreaker and I think that this might be the project that I'm most proud of, so naturally I decided to write about it.&lt;br&gt;
Let's start with the tools I've used:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Unity - the budding game developer's favorite tool&lt;/li&gt;
&lt;li&gt;Muse Headband 2014 - a headband that people normally use to meditate, together with the Muse App&lt;/li&gt;
&lt;li&gt;MuseLab - software that acted as a data middleman between the headband and unity&lt;/li&gt;
&lt;li&gt;Terminal of choice - I used iTerm. I like iTerm.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, I'll let you in on something, I had no clue how I was gonna pull this off. I initially wanted to just make a simple game, but my tutor said &lt;br&gt;
"Nah, that's boring. I've got this headband, can you do something with that?" and of course I went "Yeah, ez m8".&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It was not.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Muse had very little support (at the time) for connecting the headband to neither PC or Mac. The only thing that Muse offered me was their API (MuseLab) that helps you visualise your brainwaves and send the data further on to a set IP through UDP packets, which, fair enough, helped me quite a lot later on. So not the best start to my project, so I decided to put the whole "How the hell am I gonna connect this headband to my game and actually use it" problem on the backburner and focus on making the game first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#design-and-game-creation"&gt;
  &lt;/a&gt;
  Design and game creation
&lt;/h2&gt;

&lt;p&gt;The game had to be something simple. Something that at the most had only two inputs. I initially thought of using Pong, but I just couldn't be bothered to create an AI to play against, so I went to another paddle-type classic.&lt;/p&gt;

&lt;p&gt;That's right, I'm talking about &lt;em&gt;Atari's Breakout&lt;/em&gt;, baby. Everyone knows and has played this game in some form or another. Hell, I even had it on one of my old Nokia phones in the early 2000's. It was perfect, the player had to just move left and right and that's it. &lt;/p&gt;

&lt;p&gt;So once I had the game in mind, I went to sketching, because umm... one of the requirements of my dissertation was to provide low fidelity prototypes. Usually I'd just go and do it straight into Unity, but I can see the benefits of sketching your ideas first. However, in this case it didn't really help me, I mean, look at these: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FZlTwgjc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.alexbatrinu.dev/static/5c1d1339e4dcc5c43767cd9c454241d9/332ff/prototype1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FZlTwgjc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.alexbatrinu.dev/static/5c1d1339e4dcc5c43767cd9c454241d9/332ff/prototype1.png" alt="Prototype 1"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g9WxnOA1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.alexbatrinu.dev/static/677c7a056cfdfb83594d6ba7a9869366/332ff/prototype2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g9WxnOA1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.alexbatrinu.dev/static/677c7a056cfdfb83594d6ba7a9869366/332ff/prototype2.png" alt="Prototype 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yeah. Not my best art, I give you that. But, redemption strikes, as this is how it actually looked like in Unity:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GNTUg-3p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/keep-bbsk/AGk0z-NZJSGxcp0QOVyt-OCUABO3UZ0I_BFunYq5XCa7Jb1NRX1uUgQtcaeKxtmO-RPQEwPpZR7h_Q8i0glLt4g5c-SS5_S350FbFAhYF-M" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GNTUg-3p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/keep-bbsk/AGk0z-NZJSGxcp0QOVyt-OCUABO3UZ0I_BFunYq5XCa7Jb1NRX1uUgQtcaeKxtmO-RPQEwPpZR7h_Q8i0glLt4g5c-SS5_S350FbFAhYF-M" alt="Ahhh, much better!"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Design has been based around the original colours and layout of Atari’s Breakout, bringing a tiny homage to the ole' timer and also keeping it simple. I have taken a more minimalistic approach to my design however so the player has some breathing space. Less is more as some designers say! Afterwards, I’ve implemented the core movement mechanics and tested them by using normal arrow key inputs, to see if the colliders worked fine and nothing clipped through the game. After several tests I’ve tweaked the speed of both paddle and ball found a nice sweet spot that won’t be too fast or slow. If need be, I’ve made the variables dynamic so I can change the values on the go, anytime.&lt;/p&gt;

&lt;p&gt;Now that the easy bit was done, it was time to face the moment I've been dreading. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connecting-the-headband"&gt;
  &lt;/a&gt;
  Connecting the headband
&lt;/h2&gt;

&lt;p&gt;I actually got a bit lucky here. I went through the Muse docs on their website and on forums and found out that Unity uses something called OSC (Open Sound Control) signals to transmit data through TCP packets.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T51mmjj_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.alexbatrinu.dev/static/04323b9b152c5d6b33598bdb7aa57463/4efcb/interesting.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T51mmjj_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.alexbatrinu.dev/static/04323b9b152c5d6b33598bdb7aa57463/4efcb/interesting.png" alt="Mfw"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You know what else uses OSC to send inputs through? &lt;strong&gt;A Nintendo WiiMote!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Finally, the gears started to move and I could see the light at the end of the tunnel. A flicker of hope. &lt;/p&gt;

&lt;p&gt;So what I did next of course might shock you... I typed into google "how to use unity with wiimote". From there on, it was smooth sailing. I gotta thank &lt;a href="https://github.com/heaversm/unity-osc-receiver"&gt;heaversm&lt;/a&gt; for the tutorial on setting up the OSC plugin for Unity.&lt;/p&gt;

&lt;p&gt;Now this is where MuseLab comes into play. The data that I was getting into Unity through OSC was all over the place. I couldn't properly read it, or break it into paths. Also for some reason, on Windows, the headband would refuse to stay connected to my PC. It was all a bit annoying. So I swapped to my Mac and I got MuseLab to be the middleman here, by flexing some of my computer networking skills (that was a pun on networking a.k.a. socialising and networking in computers, thank you for coming, I'll be here every Tuesday). &lt;/p&gt;

&lt;p&gt;Right, so it was time to bring it all home. To connect the headband and open a default port, I installed something called muse-io in my terminal and just had to type in “muse-io” and the headband connects and opens a connection on the machine's local IP (usually 127.0.0.1) and port 5000.&lt;br&gt;
Now, if one desires to open the connection on a specific port they need to specify it in the command i.e. “muse-io –osc osc.tcp://127.0.0.1:5001”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aOCpZ7MT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/20691329/37237964-e67e5b78-2413-11e8-97cf-5114236b88f2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aOCpZ7MT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/20691329/37237964-e67e5b78-2413-11e8-97cf-5114236b88f2.gif" alt="Muse in terminal"&gt;&lt;/a&gt; (Image courtesy of &lt;a href="http://developer.choosemuse.com/tools/museio"&gt;MuseIO&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Once the port is opened, the data is received in MuseLab by opening the TCP port displayed on the terminal and the array of OSC messages is displayed again. When that is achieved, one must open an outgoing port to send the data further on, in an UDP format. In the case of this project, it is necessary to open two ports, one with the address “127.0.0.1:5005” and another “127.0.0.1:5006” since the headband is used to control both paddle and other functions of the game like screen navigation. In MuseLab we can select exactly which OSC messages to send, and in this case, Unity accepts the data and can use it without any problems. And the cool thing is, it's that it sent it through as simple endpoints with values attached to the body (e.g. /muse/concentration with body of 200 or something like that, I don't remember, it's been 3 years, ok?). To get a visual, MuseLab looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wvy8Z31s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.alexbatrinu.dev/static/acaffdd066473098b72e86522736f2ea/332ff/muselab.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wvy8Z31s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.alexbatrinu.dev/static/acaffdd066473098b72e86522736f2ea/332ff/muselab.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And bam! Unity can now read your brainwaves. This was, honestly, the hardest thing in this whole project and took me a hell of a long time to pull off.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gameplay"&gt;
  &lt;/a&gt;
  Gameplay
&lt;/h2&gt;

&lt;p&gt;Now, the initial plan was to use something like the player's concentration value to control the paddle in the game. However that proved a little...unreliable. Getting the player to reach a specific concentration value, let alone maintain it is not as easy as it sounds. Not to mention, tiring. &lt;/p&gt;

&lt;p&gt;So, I've hit yet another wall. What to do to prove that you can play a game with just your mind?&lt;/p&gt;

&lt;p&gt;Luckily, while I was looking through the API, exploring different endpoints that I could hit, I found something called "jawClench". And it clicked! When I was trying to achieve those concentration values I was talking about, I tended to clench my jaw quite a bit or make a tense face. So I tried to search for some link between jaw clenching and concentration, and I found a paper/article/i don't remember what it was but I'll link it if I find it again, that claimed that by clenching your jaw, it functions kinda like a trigger for the brain to go from a relaxed state to an alert state. With that information in mind, I implemented some basic commands, the paddle will go to the left by itself, and if the player clenches their jaw, thus triggering an alert state, the headband will move to the right.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And it worked like a charm.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I've added some extra flair, like a main menu and a tutorial where I used the headband's accelerometer to navigate through. Then some basic game stuff, like lives (the player would have 5 tries to clear the screen), a timer for those who wanted to brag with their time, and of course, score, each brick having a different value if broken. And wouldn't you know it, I had myself a BCI game on my hands. Once everything was done, I done went ahead and got myself around 30 people or so to test it out.&lt;/p&gt;

&lt;p&gt;Reviews were better than I actually expected! A lot of people enjoyed it and most of the complaints were about their jaws getting tired and their teeth hurting, which, fair enough. It may not be perfect, but I feel like it's a good first step.&lt;/p&gt;

&lt;p&gt;Aaand that's pretty much it. I hope you've enjoyed this little brain dump of mine. Maybe one day I'll make the game public, or open-source it, but I feel that first I'd have to properly refine it and fix some bugs (yeah, got some of those too sadly). But till then, I'll leave you with some images and this story.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;PS: Please check out my &lt;a href="https://alexbatrinu.dev"&gt;personal website&lt;/a&gt;, I write all of my posts there first!&lt;/p&gt;

</description>
      <category>unity3d</category>
      <category>csharp</category>
      <category>gamedev</category>
      <category>bci</category>
    </item>
  </channel>
</rss>
