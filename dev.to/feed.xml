<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>GitHub Pull Requests with Screenshots Tip</title>
      <author>Matthew McGarvey</author>
      <pubDate>Tue, 29 Jun 2021 18:51:10 +0000</pubDate>
      <link>https://dev.to/matthewmcgarvey/github-pull-requests-with-screenshots-tip-1cbb</link>
      <guid>https://dev.to/matthewmcgarvey/github-pull-requests-with-screenshots-tip-1cbb</guid>
      <description>&lt;p&gt;When you're making a pull request in GitHub and want to include screenshots in the description, you might be tempted to just throw the screenshots in with headings. I urge you, though, not to do that! Those screenshots take up a lot of room and there is a better way!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dropdowns"&gt;
  &lt;/a&gt;
  Dropdowns
&lt;/h2&gt;

&lt;p&gt;Dropdowns are truly the better way to add images to pull requests. By default they can be ignored and can be expanded if you want to look at them.&lt;/p&gt;

&lt;p&gt;Here's a picture of a pull request description without using dropdowns. Notice how much room is taken up. I had to zoom out to 60% just to get it all on my screen!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WFRw2O1V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tyh8l0td0anndd1hgjl2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WFRw2O1V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tyh8l0td0anndd1hgjl2.png" alt="PR description without dropdowns"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now here's a picture using dropdowns. It's so much simpler.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TRoaSe11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gfrkc4s7zsrqy05436ff.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TRoaSe11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gfrkc4s7zsrqy05436ff.png" alt="PR description with dropdowns"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;

&lt;p&gt;I used to always google "github markdown dropdown" and used &lt;a href="https://gist.github.com/citrusui/07978f14b11adada364ff901e27c7f61"&gt;this link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;They are created using markdown like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;details&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;How do I dropdown?&lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
This is how you dropdown.
&lt;span class="nt"&gt;&amp;lt;/details&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#saved-replies"&gt;
  &lt;/a&gt;
  Saved Replies
&lt;/h2&gt;

&lt;p&gt;Just so that you and I don't have to remember this article or that GitHub gist in the future, you can make it easy by creating a saved reply. Those are accessed in the bar above the text area when creating a pull request description.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u3FAbZiR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdjvrhjze1dhng5hyl2c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u3FAbZiR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jdjvrhjze1dhng5hyl2c.png" alt="saved replies button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can create a new saved reply through that button and make a dropdown saved reply. That's going to save me a bunch of time!&lt;/p&gt;

</description>
      <category>github</category>
    </item>
    <item>
      <title>Automate server intrusion detection and banning with Fail2ban</title>
      <author>Waqar Ahmed</author>
      <pubDate>Tue, 29 Jun 2021 18:23:31 +0000</pubDate>
      <link>https://dev.to/waqar/automate-server-intrusion-detection-and-banning-with-fail2ban-4pgk</link>
      <guid>https://dev.to/waqar/automate-server-intrusion-detection-and-banning-with-fail2ban-4pgk</guid>
      <description>&lt;p&gt;A Fail2Ban installation monitors server access logs and automatically bans IP addresses of bots and attacking users in iptables. Fail2Ban analyses server logs and identifies a pattern where a suspicious user or bot is trying to access restricted areas on the server. Brute force attacks repeatedly fail and use combinations of login credentials on after another. Fail to ban can detect failed login attempts on SSH and Apache webserver.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fail2ban-installation"&gt;
  &lt;/a&gt;
  Fail2Ban Installation
&lt;/h2&gt;

&lt;p&gt;Installation is straight forward update &lt;code&gt;apt-get&lt;/code&gt; and run instal fail2ban as a root user. Theses are Debian/Ubuntu commands for CentOS &lt;code&gt;yum&lt;/code&gt; would replace &lt;code&gt;apt-get&lt;/code&gt; and paths/locations might differ for configuration files. Check &lt;a href="https://www.linode.com/docs/security/using-fail2ban-to-secure-your-server-a-tutorial/"&gt;this&lt;/a&gt; tutorial for non-Debian operating systems.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get update
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;fail2ban
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#fail2ban-configuration"&gt;
  &lt;/a&gt;
  Fail2Ban Configuration
&lt;/h2&gt;

&lt;p&gt;Fail2Ban can keep server admin updated with emails but to keep it simple, let’s not configure this additional feature. The configuration file /etc/fail2ban/fail2ban.conf is superseded by fail2ban.local file. So this local config file needs to be created to keep additional settings. Here is part of the default installation config file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="nn"&gt;[Definition]&lt;/span&gt;
&lt;span class="c"&gt;# Option: loglevel
# Notes.: Set the log level output.
#         CRITICAL
#         ERROR
#         WARNING
#         NOTICE
#         INFO
#         DEBUG
# Values: [ LEVEL ]  Default: ERROR
#
&lt;/span&gt;&lt;span class="py"&gt;loglevel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;INFO&lt;/span&gt;
&lt;span class="py"&gt;logtarget&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/var/log/fail2ban.log&lt;/span&gt;
&lt;span class="c"&gt;# Options: dbfile
# Notes.: Set the file for the fail2ban persistent data to be stored.
#         A value of ":memory:" means database is only stored in memory 
#         and data is lost when fail2ban is stopped.
#         A value of "None" disables the database.
# Values: [ None :memory: FILE ] Default: /var/lib/fail2ban/fail2ban.sqlite3
&lt;/span&gt;&lt;span class="py"&gt;dbfile&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/var/lib/fail2ban/fail2ban.sqlite3&lt;/span&gt;
&lt;span class="c"&gt;# Options: dbpurgeage
# Notes.: Sets age at which bans should be purged from the database
# Values: [ SECONDS ] Default: 86400 (24hours)
&lt;/span&gt;&lt;span class="py"&gt;dbpurgeage&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;86400&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fail2ban focuses on failed SSH login attempts by default. Using custom config file jails for HTTP web server like Apache, FTP and mail server can be enabled.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fail2ban-apache-jail-configuration"&gt;
  &lt;/a&gt;
  Fail2Ban Apache Jail Configuration
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="nn"&gt;[apache-auth]&lt;/span&gt;
&lt;span class="py"&gt;enabled&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="py"&gt;port&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http,https&lt;/span&gt;
&lt;span class="py"&gt;logpath&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/var/log/apache2/error.log&lt;/span&gt;
&lt;span class="py"&gt;maxretry&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;3&lt;/span&gt;
&lt;span class="py"&gt;findtime&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;600&lt;/span&gt;
&lt;span class="py"&gt;bantime&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So here we have set up fail2ban to look apache2 error logs for brute force attack using one password after another. Three failed login attempts within 600 seconds would lead to an IP address ban for an hour. Restart fail2ban for the changes to take effect sudo systemctl restart fail2ban. To enable fail2ban service to start with boot use sudo systemctl enable fail2ban.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-apache-error-log-jails"&gt;
  &lt;/a&gt;
  Other Apache error log jails
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#apache-no-script"&gt;
  &lt;/a&gt;
  Apache no script
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="nn"&gt;[apache-noscript]&lt;/span&gt;
&lt;span class="py"&gt;port&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http,https&lt;/span&gt;
&lt;span class="py"&gt;logpath&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(apache_error_log)s&lt;/span&gt;
&lt;span class="py"&gt;ignoreip&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;localhost or an IP&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fail2ban analyses errors of not found .php, .asp, .pl scripts. Client attempting to exploit known scripts are banned.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apache-overflows"&gt;
  &lt;/a&gt;
  Apache overflows
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="nn"&gt;[apache-overflows]&lt;/span&gt;
&lt;span class="py"&gt;logpath&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(apache_error_log)s&lt;/span&gt;
&lt;span class="py"&gt;maxretry&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Detects apache buffer overflow attempts by the client using long suspicious URLs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apache-no-home"&gt;
  &lt;/a&gt;
  Apache no home
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="nn"&gt;[apache-nohome]&lt;/span&gt;
&lt;span class="py"&gt;port&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http,https&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Detects failures to find a home directory on a server.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apache-bot-search"&gt;
  &lt;/a&gt;
  Apache bot search
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="nn"&gt;[apache-botsearch]&lt;/span&gt;
&lt;span class="py"&gt;enabled&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="py"&gt;port&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http,https&lt;/span&gt;
&lt;span class="py"&gt;maxretry&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alternative to apache-noscript filter this filter aims at blocking specific URLs, script or webservices.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apache-access-log-jails"&gt;
  &lt;/a&gt;
  Apache access log jails
&lt;/h3&gt;

&lt;p&gt;Beware, access logs of busy websites can be huge. Setting Fail2ban to monitor access log can have a negative impact on server performance. So think about costs and benefits of access log jails before enabling them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#apache-bad-bots"&gt;
  &lt;/a&gt;
  Apache bad bots
&lt;/h3&gt;

&lt;p&gt;Bans bots identified as spammer robots crawling the web for email addresses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="nn"&gt;[apache-badbots]&lt;/span&gt;
&lt;span class="py"&gt;port&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http,https&lt;/span&gt;
&lt;span class="py"&gt;logpath&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(apache_access_log)s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#php-url-fopen"&gt;
  &lt;/a&gt;
  PHP URL fopen
&lt;/h3&gt;

&lt;p&gt;Matches and blocks fopen URL PHP injection attacks&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="nn"&gt;[php-url-fopen]&lt;/span&gt; 
&lt;span class="py"&gt;port&lt;/span&gt;    &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http,https&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#webmail-jails"&gt;
  &lt;/a&gt;
  Webmail jails
&lt;/h3&gt;

&lt;p&gt;Jails for roundcude, openwebmail and horde are available, just add the location of log file in these jails.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="nn"&gt;[roundcube-auth]&lt;/span&gt;
&lt;span class="py"&gt;port&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http,https&lt;/span&gt;
&lt;span class="py"&gt;logpath&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(roundcube_errors_log)s&lt;/span&gt;
&lt;span class="c"&gt;#if roundcube logs to journal then use following.
#backend = %(syslog_backend)s
&lt;/span&gt;&lt;span class="nn"&gt;[openwebmail]&lt;/span&gt;
&lt;span class="py"&gt;port&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http,https&lt;/span&gt;
&lt;span class="py"&gt;logpath&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/var/log/openwebmail.log&lt;/span&gt;
&lt;span class="nn"&gt;[horde]&lt;/span&gt;
&lt;span class="py"&gt;port&lt;/span&gt;     &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http,https&lt;/span&gt;
&lt;span class="py"&gt;logpath&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/var/log/horde/horde.log&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#fail2ban-custom-filters-and-jail-for-wordpress"&gt;
  &lt;/a&gt;
  Fail2ban custom filters and jail for WordPress
&lt;/h2&gt;

&lt;p&gt;Error logs have multiple failed requests to WordPress login URLs or files like wp_login.php. This blog post creates a custom regular expression to scan failed WordPress logins in the error log. Using this RegEx a new filter file is created in Fail2ban directory. Once the filter is in place a [wordpress] jail can be added in jail.local. You can easily create your own filters with custom RegEx. Try online regular expression services like regex101.com with your error log to create a regular expression.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fail2ban-client-and-commands"&gt;
  &lt;/a&gt;
  Fail2ban client and commands
&lt;/h2&gt;

&lt;p&gt;Use Fail2ban client to setup configuration or check status of jail and banned IP addresses.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check status of Fail2ban
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo fail2ban-client status
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Check status of Apache jail
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo fail2ban-client status apache
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Ban an IP address directly with client
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo fail2ban-client set apache banip x.x.x.x
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Similarly unban an IP address
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo fail2ban-client set apache unbanip x.x.x.x
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Restart after editing jail configuration for changes to take effect
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl restart fail2ban
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Check firewall rules added to iptables
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo iptables -L
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Start fail2ban on boot
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl enable fail2ban
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;How To Protect an Apache Server with Fail2Ban on Ubuntu 14.04 — By &lt;a href="https://www.digitalocean.com/community/users/jellingwood"&gt;Justin Ellingwood&lt;/a&gt;, &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-protect-an-apache-server-with-fail2ban-on-ubuntu-14-04"&gt;Digitalocean.com/community&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Fail2ban jail configuration — &lt;a href="https://github.com/fail2ban/fail2ban/blob/master/config/jail.conf"&gt;Github.com/fail2ban&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Set Up Fail2ban To Protect An Apache Web Server — &lt;a href="https://devops.ionos.com/users/profile/hitjethva"&gt;hitjethva&lt;/a&gt;, &lt;a href="https://devops.ionos.com/tutorials/set-up-fail2ban-to-protect-an-apache-web-server/"&gt;devops.ionos.com/tutorials&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;A Tutorial for Using Fail2ban to Secure Your Server — &lt;a href="https://www.linode.com/docs/security/using-fail2ban-to-secure-your-server-a-tutorial/"&gt;Linode.com&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>linux</category>
      <category>security</category>
      <category>laravel</category>
      <category>php</category>
    </item>
    <item>
      <title>How to create beautiful and realistic confetti animation with tsParticles</title>
      <author>Matteo Bruni</author>
      <pubDate>Tue, 29 Jun 2021 17:50:07 +0000</pubDate>
      <link>https://dev.to/matteobruni/how-to-create-beautiful-and-realistic-confetti-animation-with-tsparticles-1lkm</link>
      <guid>https://dev.to/matteobruni/how-to-create-beautiful-and-realistic-confetti-animation-with-tsparticles-1lkm</guid>
      <description>&lt;p&gt;Starting from version 1.30.0 tsParticles has new options to create beautiful and realistic confetti animations with every supported particle shape.&lt;/p&gt;

&lt;p&gt;Every parameter of the animation can be configured so you can choose which configuration will suit you better.&lt;/p&gt;

&lt;p&gt;Let's build this sample configuration:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/matteobruni/embed/KKmKaVb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;background: {
  color: {
    value: "#000000"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This sets the black background to the canvas, this is optional, you can have a transparent background omitting this section.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#full-screen"&gt;
  &lt;/a&gt;
  Full Screen
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fullScreen: {
  enable: true,
  zIndex: -1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This sets the canvas to full screen with a zIndex of -1, be careful with &lt;code&gt;zIndex&lt;/code&gt; set to -1, this will be below every page element, you can set it to an higher value but the &lt;code&gt;interactivity.detectsOn&lt;/code&gt; should be &lt;code&gt;"window"&lt;/code&gt; to have particles on top without losing the website interactivity.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#interactivity"&gt;
  &lt;/a&gt;
  Interactivity
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;interactivity: {
  detectsOn: "window"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This was explained above, the &lt;code&gt;detectsOn&lt;/code&gt; property set to &lt;code&gt;"window"&lt;/code&gt; disabled canvas pointer events, so you can interact with any elements below the canvas &lt;code&gt;zIndex&lt;/code&gt;. This should be set like with an high &lt;code&gt;zIndex&lt;/code&gt;, with a &lt;code&gt;-1&lt;/code&gt; value it's not necessary.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#emitter"&gt;
  &lt;/a&gt;
  Emitter
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;emitters: {
  position: {
    x: 50,
    y: 100
  },
  rate: {
    quantity: 10,
    delay: 0.25
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Everyone loves particles cannons, here you are, you have a bottom centered cannon that shoots &lt;code&gt;10&lt;/code&gt; particles every &lt;code&gt;0.25&lt;/code&gt; seconds.&lt;/p&gt;

&lt;p&gt;The position is specified in percent values, not in pixels, so &lt;code&gt;100&lt;/code&gt; set to &lt;code&gt;y&lt;/code&gt; is the bottom of the page, while &lt;code&gt;50&lt;/code&gt; to &lt;code&gt;x&lt;/code&gt; is the horizontal center.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#particles-configuration"&gt;
  &lt;/a&gt;
  Particles configuration
&lt;/h2&gt;

&lt;p&gt;This is the biggest part, where you can configure every aspect of your particles, or confetti if preferred.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;particles: {
  /* ... */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#color"&gt;
  &lt;/a&gt;
  Color
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;color: {
  value: ["#1E00FF", "#FF0061", "#E1FF00", "#00FF9E"]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can set here a single value, or an array of string (or more complex object, but let's keep things &lt;em&gt;simple&lt;/em&gt; for now).&lt;/p&gt;

&lt;p&gt;This value is not applied to emojis and images (they are already colored).&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#number"&gt;
  &lt;/a&gt;
  Number
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;number: {
  value: 0
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The particles number is set to &lt;code&gt;0&lt;/code&gt; because the particles are shot from the emitter and only those should be used.&lt;/p&gt;

&lt;p&gt;If this values is set to any positive value will load random particles in the canvas.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#move"&gt;
  &lt;/a&gt;
  Move
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;move: {
  decay: 0.05,
  direction: "top",
  enable: true,
  speed: {
    min: 50,
    max: 75
  },
  /* ... */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This section will configure particles movements inside the canvas, you can apply gravity, speed, directions and other properties.&lt;/p&gt;

&lt;p&gt;Some values can be seen above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;decay: it's a value used to slow down particles&lt;/li&gt;
&lt;li&gt;direction: it's the particles direction, you can set a value like &lt;code&gt;"top"&lt;/code&gt;, &lt;code&gt;"top-right"&lt;/code&gt;, &lt;code&gt;"right"&lt;/code&gt; or an angle in degrees.&lt;/li&gt;
&lt;li&gt;enable: this value must be &lt;code&gt;true&lt;/code&gt; if you want particles to move, otherwise they will be static&lt;/li&gt;
&lt;li&gt;speed: this value can be a single numeric value or an object like the one above with &lt;code&gt;min&lt;/code&gt;/&lt;code&gt;max&lt;/code&gt; properties and each particle will pick one value in that range randomically&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#gravity"&gt;
  &lt;/a&gt;
  Gravity
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;gravity: {
  enable: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This section part of the &lt;code&gt;move&lt;/code&gt; options will configure particles gravity, you can just enable it with a default earth gravity (&lt;code&gt;9.81&lt;/code&gt;) and a max speed of &lt;code&gt;50&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#out-modes"&gt;
  &lt;/a&gt;
  Out Modes
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;outModes: {
  top: "none",
  default: "destroy"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This section sets the action to do when particles will go off canvas, you can specify this for every border (&lt;code&gt;top&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;bottom&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;) or a &lt;code&gt;default&lt;/code&gt; that will be overridden by specific values like in this case, the particle will not be destroyed only if it goes outside the top edge.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#opacity"&gt;
  &lt;/a&gt;
  Opacity
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;opacity: {
  value: 1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This value sets the particles (ops, confetti) opacity value. This can be also a range value like the previous seen &lt;code&gt;move.speed&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#size"&gt;
  &lt;/a&gt;
  Size
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;size: {
  value: 8
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This value sets the particles (ops, confetti) radius value. This can be also a range value like the previous seen &lt;code&gt;move.speed&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#rotate"&gt;
  &lt;/a&gt;
  Rotate
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rotate: {
  value: {
    min: 0,
    max: 360
  },
  direction: "random",
  animation: {
    enable: true,
    speed: 60
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This section sets the particles rotation around its center. You can specify a degree angle to &lt;code&gt;value&lt;/code&gt; or a range of angles like the &lt;code&gt;move.speed&lt;/code&gt; above. In this case any angle will be picked randomly by each particle.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;direction&lt;/code&gt; property sets the rotation direction, this property can have 3 values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;"clockwise"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;"counter-clockwise"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;"random"&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first two are clear, the third value (&lt;code&gt;"random"&lt;/code&gt;) make every particle choose one of the two previous values randomically, so you can see particles rotates clockwise and counter clockwise.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;animation&lt;/code&gt; property make the particle rotation animated, otherwise the particle will only have the initial angle. The rotation speed can be set and the animation can be enabled, by default is not.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#tilt"&gt;
  &lt;/a&gt;
  Tilt
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tilt: {
  direction: "random",
  enable: true,
  value: {
    min: 0,
    max: 360
  },
  animation: {
    enable: true,
    speed: 30
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is the first of the new three particles options, &lt;code&gt;tilt&lt;/code&gt; will deform the particles like they are seen from another perspective spinning around its center.&lt;/p&gt;

&lt;p&gt;The properties of this property are the same seen in the &lt;code&gt;rotate&lt;/code&gt; section above and it works exactly the same.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#roll"&gt;
  &lt;/a&gt;
  Roll
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;roll: {
  darken: {
    enable: true,
    value: 25
  },
  enable: true,
  speed: {
    min: 5,
    max: 15
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is the second new property of particles options, &lt;code&gt;roll&lt;/code&gt; will deform the particles like they are seen rolling around its center making a natural falling effect.&lt;/p&gt;

&lt;p&gt;The properties of this section are really simple, enable will activate this effect, speed sets the fall effect speed.&lt;/p&gt;

&lt;p&gt;What about &lt;code&gt;darken&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;There are 3 more options after &lt;code&gt;speed&lt;/code&gt; and &lt;code&gt;enable&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;backColor&lt;/code&gt;: This sets the back color of the particles when their &lt;em&gt;back&lt;/em&gt; is visible&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;darken&lt;/code&gt;: This is the first alternative when &lt;code&gt;backColor&lt;/code&gt; is not set, this will darken by the specified value the particles color create a nice simple shadow&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;enlighten&lt;/code&gt;: This is the latest alternative if none of the above are set or enabled, this will enlighten by the specified value the particles color create a nice simple light effect&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this case the particles (only the one that can be colored) will have a nice shadow while rolling down.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#wobble"&gt;
  &lt;/a&gt;
  Wobble
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wobble: {
  distance: 30,
  enable: true,
  speed: {
    min: -15,
    max: 15
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is the latest (but not least) new effect introduced in &lt;code&gt;1.30&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This effects makes the particles bouncing from left to right simulating air resistance with a really nice effect.&lt;/p&gt;

&lt;p&gt;The properties are really simple, enable for activating this, the distance used for enlarging the angle and the wobbling speed.&lt;/p&gt;

&lt;p&gt;About the speed I recommend a range with a &lt;code&gt;min&lt;/code&gt; and a &lt;code&gt;max&lt;/code&gt; opposite values instead of a single value since the effect is nicer. If only a positive or negative value is set the particles will only wobble right or left.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#shape"&gt;
  &lt;/a&gt;
  Shape
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;shape: {
  type: /* ... */
  /* ... */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Why &lt;code&gt;shape&lt;/code&gt; is the latest section explained? Because in this case it's really huge because I want to show all possibilities in the sample but you can choose from:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;circle&lt;/li&gt;
&lt;li&gt;square&lt;/li&gt;
&lt;li&gt;polygon&lt;/li&gt;
&lt;li&gt;line (be careful, this will only works with the stroke color since it's not fillable)&lt;/li&gt;
&lt;li&gt;character (also emojis are accepted or any font like FontAwesome if correctly installed)&lt;/li&gt;
&lt;li&gt;image&lt;/li&gt;
&lt;li&gt;triangle&lt;/li&gt;
&lt;li&gt;star&lt;/li&gt;
&lt;li&gt;bubble (external plugin)&lt;/li&gt;
&lt;li&gt;heart (external plugin)&lt;/li&gt;
&lt;li&gt;multiline text (external plugin)&lt;/li&gt;
&lt;li&gt;rounded rect (external plugin)&lt;/li&gt;
&lt;li&gt;spiral (external plugin, this will be better with stroke color since filled it's kinda ugly)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For each shape you can specify additional options like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;shape: {
  type: "circle",
  options: {
    circle: {
      particles: {
        size: {
          value: 10
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The code below is the sample used in the codepen shown at the beginning.&lt;/p&gt;

&lt;p&gt;The polygon options are an array and are randomly picked by each particles creating a pentagon or an hexagon.&lt;/p&gt;

&lt;p&gt;The character options specifies the font used by the specified character, the weight, an additional style, and the text to be used for each particle, in this case one emoji per particle randomly picked.&lt;/p&gt;

&lt;p&gt;The images are a lot and random picked, they have a bigger size value since they have some padding inside.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;shape: {
    type: [
        "circle",
        "square",
        "polygon",
        "character",
        "character",
        "character",
        "image",
        "image",
        "image"
    ],
    options: {
        polygon: [
            {
                sides: 5
            },
            {
                sides: 6
            }
        ],
        character: [
            {
                font: "Verdana",
                value: ["💩", "🤡", "🍀", "🍙", "🦄", "⭐️"],
                style: "",
                weight: 400
            }
        ],
        image: [
            {
                src: "https://particles.js.org/images/fruits/apple.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/avocado.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/banana.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/berries.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/cherry.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/grapes.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/lemon.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/orange.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/peach.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/pear.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/pepper.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/plum.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/star.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/strawberry.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/watermelon.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            },
            {
                src: "https://particles.js.org/images/fruits/watermelon_slice.png",
                width: 32,
                height: 32,
                particles: {
                    size: {
                        value: 16
                    }
                }
            }
        ]
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Hope you'll have a lot of fun with tsParticles and the new animations to make beautiful confetti&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/matteobruni"&gt;
        matteobruni
      &lt;/a&gt; / &lt;a href="https://github.com/matteobruni/tsparticles"&gt;
        tsparticles
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      tsParticles - Easily create highly customizable particles animations and use them as animated backgrounds for your website. Ready to use components available for React, Vue.js (2.x and 3.x), Angular, Svelte, jQuery, Preact, Inferno.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://particles.js.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/58f22f0a546d5d7f34b4668dc842ac91b3a4cf9a5de72346559b7d15b13e587e/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f62616e6e6572322e706e67" alt="banner"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
tsParticles - TypeScript Particles&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;A lightweight TypeScript library for creating particles. Dependency free (*), browser ready and compatible with React, Vue, Angular, Svelte, jQuery, Preact, Inferno&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://openbase.com/js/tsparticles?utm_source=embedded&amp;amp;utm_medium=badge&amp;amp;utm_campaign=rate-badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/303db015a31c411aee869f57d55a44a53cd2f5380d0de5ee8abecb337a9452a6/68747470733a2f2f6261646765732e6f70656e626173652e636f6d2f6a732f726174696e672f74737061727469636c65732e737667" alt="Rate on Openbase"&gt;&lt;/a&gt; &lt;a href="https://www.jsdelivr.com/package/npm/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8c64088d02effc095dd7386325d216ce6d6bd46513a88ed2274e0ec4e6d876cf/68747470733a2f2f646174612e6a7364656c6976722e636f6d2f76312f7061636b6167652f6e706d2f74737061727469636c65732f62616467653f7374796c653d726f756e646564" alt="jsDelivr"&gt;&lt;/a&gt; &lt;a href="https://cdnjs.com/libraries/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e9e5a7a72f7cbc65eedd0e4d7431e4d4762c472ad4a66b6648a8e74c2b6be331/68747470733a2f2f696d672e736869656c64732e696f2f63646e6a732f762f74737061727469636c6573" alt="Cdnjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e18baafcedd7efbbd13d6e2b1cf738c07ea898383c946e6e7b16400f813d70cb/68747470733a2f2f62616467652e667572792e696f2f6a732f74737061727469636c65732e737667" alt="npmjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bc16ec38506bbab6f6b729850ad28fd94a5643f1633b4356647033c3aa3fe102/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f74737061727469636c6573" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://lerna.js.org/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3bc63f921dd60bac6d91aa900ef570c928b2aa4c2124ed23647e8fe9d2232853/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6d61696e7461696e6564253230776974682d6c65726e612d6363303066662e737667" alt="lerna"&gt;&lt;/a&gt; &lt;a href="https://www.codefactor.io/repository/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ce969771f1502f57861fe8ce7c787c209c50ef17c2e19f35cb1de0c960eba94a/68747470733a2f2f7777772e636f6465666163746f722e696f2f7265706f7369746f72792f6769746875622f6d617474656f6272756e692f74737061727469636c65732f6261646765" alt="CodeFactor"&gt;&lt;/a&gt; &lt;a href="https://www.codacy.com/manual/ar3s/tsparticles?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=matteobruni/tsparticles&amp;amp;utm_campaign=Badge_Grade" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8f96d4d0dccc9c7491f3ed07af70a808b0fd4d2e4d863a1f7bb9e51e10ae526e/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6239383361616633343631613463343862316532656563636531666631643734" alt="Codacy Badge"&gt;&lt;/a&gt; &lt;a href="https://gitpod.io/#https://github.com/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/daadb4894128d1e19b72d80236f5959f1f2b47f9fe081373f3246131f0189f6c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f476974706f642d72656164792d2d746f2d2d636f64652d626c75653f6c6f676f3d676974706f64" alt="Gitpod Ready-to-Code"&gt;&lt;/a&gt; &lt;a href="https://repl.it/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/64adf1bd83058aa64f848245f74bef77cd7cc2a3f36343ac44d6d0c39cc41bc3/68747470733a2f2f7265706c2e69742f62616467652f6769746875622f6d617474656f6272756e692f74737061727469636c6573" alt="Run on Repl.it"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Do you want to use it on your website?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;This library is available on the two most popular CDNs and it's easy and ready to use, if you were using particles.js it's even easier&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You'll find the instructions &lt;a href="https://github.com/matteobruni/tsparticles/blob/main/README.md#library-installation"&gt;below&lt;/a&gt;, with all the links you need, and &lt;em&gt;don't be scared by &lt;strong&gt;TypeScript&lt;/strong&gt;, it's just the source language&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The output files are just JavaScript&lt;/strong&gt;. 🤩&lt;/p&gt;
&lt;p&gt;CDNs and &lt;code&gt;npm&lt;/code&gt; have all the sources you need in &lt;strong&gt;Javascript&lt;/strong&gt;, a bundle browser ready (tsparticles.min.js) and all files splitted for &lt;code&gt;import&lt;/code&gt; syntax.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you are still interested&lt;/strong&gt; some lines below there are some instructions for migrating from the old particles.js library.&lt;/p&gt;
&lt;h2&gt;
&lt;strong&gt;&lt;em&gt;Library installation&lt;/em&gt;&lt;/strong&gt;
&lt;/h2&gt;
&lt;h3&gt;
&lt;strong&gt;&lt;em&gt;Hosting / CDN&lt;/em&gt;&lt;/strong&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Please use this hosts or your own to&lt;/em&gt;&lt;/strong&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/matteobruni/tsparticles"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The 7 Most Popular DEV Posts from the Past Week</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Tue, 29 Jun 2021 17:34:18 +0000</pubDate>
      <link>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-ai9</link>
      <guid>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-ai9</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week.&lt;/em&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-typescript-with-react-a-crashcourse"&gt;
  &lt;/a&gt;
  Using TypeScript with React: A Crash-Course
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/riyanegi"&gt;@riyanegi&lt;/a&gt;
 is here to help developers use existing React and JavaScript knowledge to learn TypeScript. Great stuff!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/riyanegi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0B3FiH6F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--k6XJNghO--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/600728/a408c935-e9b2-452e-84cb-70f36aad9aa9.jpeg" alt="riyanegi"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/riyanegi/getting-started-with-typescript-with-react-hooks-2021-5cfd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Getting started with Typescript with React Hooks [2021]&lt;/h2&gt;
      &lt;h3&gt;RiyaNegi ・ Jun 23 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#typescript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#confessions-of-a-recovering-tech-hipster"&gt;
  &lt;/a&gt;
  Confessions of a recovering "Tech Hipster"
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/knajjars"&gt;@knajjars&lt;/a&gt;
 used to spend a lot of time researching, consuming, and learning about the latest and buzziest trends in tech. It's awesome to be curious about the latest technology, but not when it burns you out. Thanks for sharing these valuable insights, Khalil!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/knajjars" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XONcH7CN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--CiAKgGzD--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/630369/aa2aed39-3da1-4a89-b4af-64a00e574237.jpeg" alt="knajjars"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/knajjars/learnings-after-5-years-of-being-a-hipster-in-tech-1b0n" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;I Regret Being a Hipster in Tech&lt;/h2&gt;
      &lt;h3&gt;Khalil Najjar ・ Jun 27 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#rails&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#django&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#making-react-apps-more-accessible"&gt;
  &lt;/a&gt;
  Making React Apps More Accessible
&lt;/h2&gt;

&lt;p&gt;React fully supports building accessible websites, often via standard HTML techniques. In this article, &lt;a class="mentioned-user" href="https://dev.to/sreashi"&gt;@sreashi&lt;/a&gt;
 shares how you can make your React apps more accessible — today.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/sreashi" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SS1cq94Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--M1zDu0KT--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/635065/7e5df417-5e86-4737-906c-a325869246c6.jpeg" alt="sreashi"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/sreashi/accessibility-in-react-2m2n" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Accessibility in React&lt;/h2&gt;
      &lt;h3&gt;Sreashi Saha ・ Jun 23 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#take-a-deep-breath"&gt;
  &lt;/a&gt;
  Take a deep breath...
&lt;/h2&gt;

&lt;p&gt;... it's just one of the many ways you can undo some of the stress that coding can bring. Thanks for this fantastic list of stress-reduction tips, @chetan_atrawalka. Such an important topic.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/chetan_atrawalkar" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yhrzVZep--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--xRKSv-Yz--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/655054/eab1b96a-fcd5-459c-81a6-8bc334e62b19.gif" alt="chetan_atrawalkar"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/chetan_atrawalkar/how-to-avoid-stress-during-coding-56f1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;🤔How to avoid stress during coding? &lt;/h2&gt;
      &lt;h3&gt;Chetan Atrawalkar👉CA. ・ Jun 26 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#there-is-no-objectively-correct-structure-for-a-scalable-app"&gt;
  &lt;/a&gt;
  There is no objectively correct structure for a scalable app
&lt;/h2&gt;

&lt;p&gt;However, there are some principles that can help guide you in your quest to building an app that scales. Thanks for walking us through this, &lt;a class="mentioned-user" href="https://dev.to/pietmichal_67"&gt;@pietmichal_67&lt;/a&gt;
. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/pietmichal" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2G6OIrb7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--tqvQtqk9--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/51140/d5f329ef-1f63-4eb0-9765-f6887959b39c.jpg" alt="pietmichal"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pietmichal/how-to-structure-your-app-in-a-way-that-scales-bkf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How To Structure Your App In a Way That Scales.&lt;/h2&gt;
      &lt;h3&gt;Michał Pietraszko ・ Jun 27 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#architecture&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#a-dev-history-lesson"&gt;
  &lt;/a&gt;
  A DEV history lesson
&lt;/h2&gt;

&lt;p&gt;The DEV team loves historical tech deep dives, essays, and research projects. This one by &lt;a class="mentioned-user" href="https://dev.to/mr_victor"&gt;@mr_victor&lt;/a&gt;
 about the history of JS does not disappoint!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mr_victor" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PwhHFxsP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--1QkH4dly--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/600265/d7f31d15-9f0e-4c4a-b8b7-a3c521ba2b98.jpg" alt="mr_victor"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mr_victor/the-history-of-javascript-1fp3" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The History Of JavaScript ⌛&lt;/h2&gt;
      &lt;h3&gt;Victor Ikechukwu ・ Jun 22 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#developers&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#set-up-build-and-run-your-own-chrome-extension"&gt;
  &lt;/a&gt;
  Set up, build and run your own Chrome extension.
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/venkyakshaya"&gt;@venkyakshaya&lt;/a&gt;
 shared this handy guide to building your very own Chrome extension ✨  In this example, you'll be making a count-down timer. What date are you looking forward to the most? &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/venkyakshaya" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I0wKm-ZC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--4JcU8Qjn--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/435398/f6296f27-45da-4425-a7a2-6a505ab16d38.jpg" alt="venkyakshaya"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/venkyakshaya/chrome-extensions-101-3dif" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Chrome Extensions 101&lt;/h2&gt;
      &lt;h3&gt;Akshaya Venkatesh ・ Jun 27 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>Boy or Girl Paradox... What the heck is it??? 🤯🤷</title>
      <author>Aashish Chaubey 💥⚡️</author>
      <pubDate>Tue, 29 Jun 2021 17:25:52 +0000</pubDate>
      <link>https://dev.to/aashish/boy-or-girl-paradox-what-the-heck-is-it-1m0j</link>
      <guid>https://dev.to/aashish/boy-or-girl-paradox-what-the-heck-is-it-1m0j</guid>
      <description>&lt;p&gt;Hi friends,&lt;/p&gt;

&lt;p&gt;I am a machine learning and data science enthusiast. I love playing with numbers and finding insights. I know many of you are, at least to some level. Even if you are not but you have some level of interest in mathematics, there is a great chance you will find this post interesting. &lt;/p&gt;

&lt;p&gt;Please let me know if you guys already knew this and if there are many more which I should check out, please let me know in the comments belows. I encourage all my fellow reader to read them too.&lt;/p&gt;




&lt;p&gt;I like solving problems, sometimes I find it on renowned platforms like Kaggle and hackerearth. Randomly I came across this seemingly easy question but which blew my mind off [partly because I feel this problem is not articulated well!]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g_pm0Hru--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1at8e0m7pyr8kosn4ag.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g_pm0Hru--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1at8e0m7pyr8kosn4ag.png" alt="Hackerrank Problem"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I thought I didn't have to think much about it. Because it is just so straight forward. I mean it is given that one child is a boy, only probability of the other child being a boy is &lt;code&gt;1/2&lt;/code&gt; [unless otherwise stated].&lt;/p&gt;

&lt;p&gt;I selected the 1/2 answer from the answer, it was a wrong one. Okay, it needed a little more thinking. I wrote down all the possibilities at least one of the child is a boy [we are already given this information].&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[BB, BG, GB]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Therefore, another answer which is also equally likely according to the question is &lt;code&gt;1/3&lt;/code&gt;. And as it turns out, this indeed is a correct answer. &lt;/p&gt;

&lt;p&gt;But how can we have two equally correct answers for this. In my view, both the answers, as per the problem statement is correct. &lt;/p&gt;

&lt;p&gt;I took to Google for adjudication, and again, Google didn't disappoint. Look what I found:&lt;/p&gt;


&lt;div class="ltag__wikipedia--container"&gt;
  &lt;div class="ltag__wikipedia--header"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sew3uq9H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/wikipedia-logo-0a3e76624c7b1c3ccdeb9493ea4add6ef5bd82d7e88d102d5ddfd7c981efa2e7.svg" class="ltag__wikipedia--logo" alt="Wikipedia Logo"&gt;
    &lt;a href="https://en.wikipedia.org/wiki/Boy_or_Girl_paradox" rel="noopener noreferrer"&gt;Boy or Girl paradox&lt;/a&gt;
  &lt;/div&gt;
  &lt;div class="ltag__wikipedia--extract"&gt;
&lt;p&gt;The &lt;b&gt;Boy or Girl paradox&lt;/b&gt; surrounds a set of questions in probability theory, which are also known as &lt;b&gt;The Two Child Problem&lt;/b&gt;, &lt;b&gt;Mr. Smith's Children&lt;/b&gt; and the &lt;b&gt;Mrs. Smith Problem&lt;/b&gt;. The initial formulation of the question dates back to at least 1959, when Martin Gardner featured it in his October 1959 "Mathematical Games column" in &lt;i&gt;Scientific American&lt;/i&gt;. He titled it &lt;b&gt;The Two Children Problem&lt;/b&gt;, and phrased the paradox as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mr. Jones has two children. The older child is a girl. What is the probability that both children are girls?&lt;/li&gt;
&lt;li&gt;Mr. Smith has two children. At least one of them is a boy. What is the probability that both children are boys?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;div class="ltag__wikipedia--btn--container"&gt;
    
      &lt;a href="https://en.wikipedia.org/wiki/Boy_or_Girl_paradox" rel="noopener noreferrer"&gt;View on Wikipedia&lt;/a&gt;
    
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;I think it is a good read. I suggest you all to go through it (if you already haven't). &lt;/p&gt;




&lt;p&gt;Just wanted to share this information to this erudite community. Please feel free to reach out to me on:&lt;/p&gt;

&lt;p&gt;Twitter: &lt;a href="https://twitter.com/AashishLChaubey"&gt;https://twitter.com/AashishLChaubey&lt;/a&gt;&lt;br&gt;
LinkedIn: &lt;a href="https://www.linkedin.com/in/chaubey-aashish"&gt;https://www.linkedin.com/in/chaubey-aashish&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please checkout my &lt;a href="https://github.com/aashish-chaubey"&gt;Github&lt;/a&gt;&lt;/p&gt;

</description>
      <category>probability</category>
      <category>maths</category>
      <category>statistics</category>
    </item>
    <item>
      <title>Pure Function In JavaScript</title>
      <author>Prosen Ghosh</author>
      <pubDate>Tue, 29 Jun 2021 17:18:44 +0000</pubDate>
      <link>https://dev.to/_prosen/pure-function-in-javascript-c2n</link>
      <guid>https://dev.to/_prosen/pure-function-in-javascript-c2n</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-pure-function"&gt;
  &lt;/a&gt;
  What is Pure Function?
&lt;/h2&gt;

&lt;p&gt;There are 2 simple rules for a function to be a Pure Function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;1. There will be always the same output &lt;span class="k"&gt;for &lt;/span&gt;the same input.
2. There will be no side effects.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see a code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the add function is a pure function.&lt;br&gt;
Because this function will take any 2 arguments &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; and it will give the same result for that argument which is always &lt;code&gt;a + b&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's see another code,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Michael&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jackson&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Michael Jackson &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code snippet &lt;code&gt;getFullName&lt;/code&gt; is a pure function, because &lt;code&gt;getFullName&lt;/code&gt; is not mutating the state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-impure-function"&gt;
  &lt;/a&gt;
  what is Impure Function?
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;1. Create/update database.
2. http/s call.
3. Change the file system.
4. Mutate the state.
etc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Math.random()&lt;/code&gt; is an impure function because it always returns a different output.&lt;/p&gt;

&lt;p&gt;So is the &lt;code&gt;console.log&lt;/code&gt; is a pure function, it returns undefined for any input.&lt;/p&gt;

&lt;p&gt;No. &lt;code&gt;console.log&lt;/code&gt; is not a pure function because it has side effects, &lt;code&gt;console.log&lt;/code&gt; is using another share environment to log into the console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;added&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see from the above code snippet, we are getting the same output for the same input, and &lt;code&gt;console.log&lt;/code&gt; is not effecting our output, then it is not a pure function. Because the &lt;code&gt;add&lt;/code&gt; function has a side effect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Michael&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Jackson&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`Mr. &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Mrs. &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getFullName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Mr. Michael Jackson &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here in the code snippet &lt;code&gt;getFullName&lt;/code&gt; is an impure function, because &lt;code&gt;getFullName&lt;/code&gt; is mutating the state. Inside the function definition we are assigning a value to the object property.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pure-vs-impure"&gt;
  &lt;/a&gt;
  Pure vs Impure
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Impure function mutates the external state.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;cart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;X&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newCart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;newCart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Y&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newCart&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// {items: Array(1)}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newCart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// changing state&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// {items: Array(2)}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newCart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// {items: Array(2)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pure function does not mutate external state. We can make the above function pure by making a little change.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;cart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;X&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;deepClone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// for example purpose&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newCart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;deepClone&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;newCart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Y&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;quantity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;newCart&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// {items: Array(1)}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;newCart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// changing state&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// {items: Array(1)}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newCart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// {items: Array(2)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the snippet we can see, the pure function does not change the cart, instead it is making a copy of the cart and sending as a return value. Due to this the original card is not being changed.&lt;/p&gt;

&lt;p&gt;If you are using react, redux then you will see the use of pure function.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pure function can be easily predicted, it is convenient to test. Pure function makes state management easier.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>functional</category>
    </item>
    <item>
      <title>Loopple for AdminKit - Free Drag and Drop Dashboard Builder for Bootstrap 5</title>
      <author>rarestoma</author>
      <pubDate>Tue, 29 Jun 2021 17:18:34 +0000</pubDate>
      <link>https://dev.to/rarestoma/loopple-for-adminkit-free-drag-and-drop-dashboard-builder-for-bootstrap-5-2hp9</link>
      <guid>https://dev.to/rarestoma/loopple-for-adminkit-free-drag-and-drop-dashboard-builder-for-bootstrap-5-2hp9</guid>
      <description>&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;I recently launched a new theme to &lt;strong&gt;Loopple&lt;/strong&gt;, a &lt;strong&gt;Free Low Code Dashboard Builder&lt;/strong&gt; that aims to help developers to speed up their development process.&lt;/p&gt;

&lt;p&gt;This new theme is built on top of &lt;strong&gt;AdminKit&lt;/strong&gt;, an &lt;strong&gt;Open Source Bootstrap 5 Dashboard&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Any feedback would be gratefully received!&lt;/p&gt;

&lt;p&gt;Links:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.loopple.com/theme/adminkit"&gt;AdminKit Builder&lt;/a&gt;&lt;br&gt;
&lt;a href="https://adminkit.io/"&gt;AdminKit Dashboard&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.loopple.com/"&gt;Loopple Website&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/Loopple/loopple"&gt;Loopple Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>TIL: Learning Go</title>
      <author>jonasbn</author>
      <pubDate>Tue, 29 Jun 2021 17:18:33 +0000</pubDate>
      <link>https://dev.to/jonasbn/til-learning-go-29b8</link>
      <guid>https://dev.to/jonasbn/til-learning-go-29b8</guid>
      <description>&lt;p&gt;This is my initial TIL on learning Go, it provides some basic notes and a lot of links to great Go resources to get your started, so if you are past the "Hello World" introduction, just skip to the end of not please read the through the implementation, where I will cover some basic Go details.&lt;/p&gt;

&lt;p&gt;Let's &lt;em&gt;go&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can try this out at the &lt;a href="https://play.golang.org/"&gt;Go playground&lt;/a&gt; or install the Go compiler on your local machine, I assume and prefer the latter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// helloworld.go&lt;/span&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"fmt"&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can run our go program:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;go run helloworld.go
Hello, World!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or we can build with an explicit build step, providing us with an executable, which can then be run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;go build helloworld.go
&lt;span class="nv"&gt;$ &lt;/span&gt;./helloworld
Hello, World!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A variation of this implementation of &lt;a href="https://en.wikipedia.org/wiki/%22Hello%2C_World!%22_program"&gt;hello world&lt;/a&gt;, can be found at &lt;a href="https://golang.org/"&gt;the official Go website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I can recommend taking &lt;a href="https://tour.golang.org/welcome/1"&gt;the tour of Go&lt;/a&gt;, which gives a brief overview of the Go language and this brief introduction on &lt;a href="https://golang.org/doc/code.html"&gt;how to write Go code&lt;/a&gt; will really get you going.&lt;/p&gt;

&lt;p&gt;Anyway lets break down our example and process for the above example.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 1&lt;/strong&gt;: is a comment, I have just put the suggested file name for later use&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 2&lt;/strong&gt;: a Go file should always contain a package&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 3&lt;/strong&gt;: Whitespace is insignificant, but improves readability if used widely, this is however not Go specific&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 4&lt;/strong&gt;: We import &lt;a href="https://golang.org/pkg/fmt/"&gt;the package &lt;code&gt;fmt&lt;/code&gt;&lt;/a&gt;, pronounced &lt;em&gt;fumpt&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We can import all the packages we need, the recommendation for importing several packages is the following construct:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"math"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Actually tools like &lt;code&gt;golint&lt;/code&gt; will help you out with this automatically, but let us save that for later.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 6&lt;/strong&gt;: This is function declaration&lt;/p&gt;

&lt;p&gt;Just like in C, the &lt;code&gt;main&lt;/code&gt; function is special it acts as the entry point to our executable.&lt;/p&gt;

&lt;p&gt;In general functions can take input (parameters) and return values. &lt;code&gt;main&lt;/code&gt; is special and does not take any parameters and does as default not return anything, which makes it &lt;em&gt;really hard&lt;/em&gt; to test (do read &lt;a href="https://mj-go.in/golang/test-the-main-function-in-go"&gt;this post&lt;/a&gt; on the topic), that aside, lets have a look at go functions in general.&lt;/p&gt;

&lt;p&gt;A function with no parameters and no return values (just like &lt;code&gt;main&lt;/code&gt;), would have the following signature:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A function with a single parameter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Two parameters and a return value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operand1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;operand2&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Two parameters and a two return values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;fun&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operand1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;operand2&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are more variations to function declarations, do checkout the documentation or a cheatsheet.&lt;/p&gt;

&lt;p&gt;Anyway to set us back a bit, some would say that we did this the wrong way around, we &lt;em&gt;should&lt;/em&gt; have written tests first.&lt;/p&gt;

&lt;p&gt;So lets add some tests, so make sure our "hello world" implementation in Go works as expected.&lt;/p&gt;

&lt;p&gt;This requires that we dwelve into Go modules and Go testing and as stated earlier testing &lt;code&gt;main&lt;/code&gt; is &lt;em&gt;hard&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;So lets structure our code so we can test it more easily.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HelloWorld&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// HelloWorld returns universal programming language greeting in english&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;HelloWorld&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we implement a test suite in a file: &lt;code&gt;main_test.go&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"testing"&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;TestHelloWorld&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;observed&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;HelloWorld&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;observed&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatalf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"HelloWorld() = %v, want %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;observed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now lets go over the test &lt;em&gt;suite&lt;/em&gt; in this file.&lt;/p&gt;

&lt;p&gt;Line 1: defines the same package as our &lt;code&gt;helloworld.go&lt;/code&gt; (above)&lt;/p&gt;

&lt;p&gt;Line 3: imports the package &lt;a href="https://golang.org/pkg/testing/"&gt;&lt;code&gt;testing&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Line 5-10: implements a test function, just as the function I described and implemented for the main body of our program.&lt;/p&gt;

&lt;p&gt;The function is named &lt;code&gt;TestHelloWord&lt;/code&gt; and it takes the following arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;t&lt;/code&gt;. which is a pointer of the type: &lt;code&gt;testing.T&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next line sets up our expected result, the string: &lt;code&gt;Hello, World!&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The following line executes our &lt;code&gt;HelloWorld&lt;/code&gt; function and tests if we our return value is not matching our expected result from the previous line.&lt;/p&gt;

&lt;p&gt;If it does not match we fail the test using &lt;code&gt;t.Fatalf&lt;/code&gt; and output some diagnostics, to help us address potential issues in our implementation.&lt;/p&gt;

&lt;p&gt;This is not the case of this vary basic test.&lt;/p&gt;

&lt;p&gt;When doing &lt;code&gt;go test&lt;/code&gt; we are however met with and error &lt;code&gt;cannot import "main&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So we can tell our go toolchain that we are working on a module&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go mod init helloworld
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a file: &lt;code&gt;go.mod&lt;/code&gt;, with the following contents:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;helloworld&lt;/span&gt;

&lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="m"&gt;1.16&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now we can run out test&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;go &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;go.mod&lt;/code&gt; file, is for our Go toolchain.&lt;/p&gt;

&lt;p&gt;Line 1: tells us the name of our module&lt;/p&gt;

&lt;p&gt;Line 3: specifies the version of our Go use for our module&lt;/p&gt;

&lt;p&gt;There are plenty of awesome resources to get you started with Go, I can really recommend the following articles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://quii.gitbook.io/learn-go-with-tests/"&gt;Learn Go with Tests&lt;/a&gt;, which outlines how to structure you Go projects, so you get a sane foundation supporting automated testing, even if you are not into test-driven development (&lt;a href="https://en.wikipedia.org/wiki/Test-driven_development"&gt;TDD&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check out a proposal for a &lt;a href="https://github.com/Alikhll/golang-developer-roadmap"&gt;Go Developer Roadmap&lt;/a&gt; for learning Go in 2020&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Or you could learn fundamental &lt;a href="https://algorithmswithgo.com/"&gt;Algorithms with Go&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;IF you like me is a complete &lt;em&gt;n00b&lt;/em&gt; consider following the &lt;a href="https://exercism.io/tracks/go"&gt;Go track on Exercism.io&lt;/a&gt; or &lt;a href="https://www.codewars.com/?language=go"&gt;the Go katas on Codewars.com&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will continue my journey and added more TILs on different aspects of Go programming and learning Go - good luck and have fun...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources-and-references"&gt;
  &lt;/a&gt;
  Resources and References
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://tour.golang.org/welcome/1"&gt;A tour of Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://golang.org/doc/code.html"&gt;How to write Go code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://quii.gitbook.io/learn-go-with-tests/"&gt;Learn Go with Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://golang.org/doc/code.html"&gt;Effective Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://yourbasic.org/golang/"&gt;Go go-to guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://golang.org/"&gt;Official Go Website&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.togodevroadmap2020"&gt;Go Developer Roadmap 2020&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://algorithmswithgo.com/"&gt;Algorithms with Go&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://golang.org/pkg/"&gt;Go Standard Packages&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/23597165/go-meaning-of-the-fmt-package-acronym"&gt;StackOverflow: "Go: Meaning of the 'fmt' package acronym"&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This article was lifted from &lt;a href="http://jonasbn.github.io/til/"&gt;my TIL collection&lt;/a&gt;&lt;/p&gt;

</description>
      <category>go</category>
      <category>learning</category>
      <category>helloworld</category>
    </item>
    <item>
      <title>How to disable Resilience4J?</title>
      <author>Maxime Guilbert</author>
      <pubDate>Tue, 29 Jun 2021 17:03:44 +0000</pubDate>
      <link>https://dev.to/adaendra/how-to-disable-resilience4j-2egi</link>
      <guid>https://dev.to/adaendra/how-to-disable-resilience4j-2egi</guid>
      <description>&lt;p&gt;During some tests, we found some errors related to our implementation of the Circuit Breaker with Resilience4J. So we wanted to disable it and continue our tests.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But we never found a property in the Resilience4J documentation which allow it!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Maybe we missed something, so do you know if there is a property to do it?&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#alternate-solution"&gt;
  &lt;/a&gt;
  Alternate solution
&lt;/h1&gt;

&lt;p&gt;But when we red the documentation, we saw some properties which can help to reduce the Circuit Breaker activation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="na"&gt;failureRateThreshold&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;
      &lt;span class="na"&gt;minimumNumberOfCalls&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;
      &lt;span class="na"&gt;slidingWindowSize&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;
      &lt;span class="na"&gt;waitDurationInOpenState&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;failureRateThreshold&lt;/strong&gt; : The minimum rate of failures to activate the Circuit Breaker&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;minimumNumberOfCalls&lt;/strong&gt; : The minimum number of calls before starting calculating the rate&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;slidingWindowSize&lt;/strong&gt; : The number of last calls used to calculate the failure rate&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;waitDurationInOpenState&lt;/strong&gt; : In milliseconds, the duration of the Circuit Breaker activation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By taking a high number of calls and a high rate, the Circuit Breaker will less be activated. And with a small duration of the Circuit Breaker, normally any transactions should be stopped.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Be careful, this solution is just to reduce the activation of the Circuit Breaker, it won't disable it. So if you have a huge number of transactions per second, may be it won't be enough.&lt;/p&gt;

&lt;p&gt;Also, I never tested to have a high number for &lt;strong&gt;slidingWindowSize&lt;/strong&gt;, so maybe it can have an impact on your transaction duration. The value 100 is the default value and it can be enough in a lot of cases.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h1&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Resilience4J documentation : &lt;a href="https://resilience4j.readme.io/docs/circuitbreaker"&gt;https://resilience4j.readme.io/docs/circuitbreaker&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;I hope it will help you!&lt;/p&gt;

</description>
      <category>java</category>
      <category>todayisearched</category>
    </item>
    <item>
      <title>Keep Notes Clone</title>
      <author>Murlidhar Bhardwaj</author>
      <pubDate>Tue, 29 Jun 2021 17:03:39 +0000</pubDate>
      <link>https://dev.to/lord483/keep-notes-clone-55hk</link>
      <guid>https://dev.to/lord483/keep-notes-clone-55hk</guid>
      <description>&lt;p&gt;Hello everyone. Actually this post is not to tell anything to you, but more for some suggestions and ideas. I am trying to make Keep Clone Web App, with my own api. But there's one thing I am stuck on, and that is search functionality. I want this functionality at api level and not on client side for obvious reasons. Can anyone help me out? I know this is not a perfect place to ask questions but I also wanted to share this with you.&lt;/p&gt;

&lt;p&gt;Here's the link to the hosted app. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://keep-clone-api.herokuapp.com/"&gt;https://keep-clone-api.herokuapp.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It uses MongoDB linked to my own account. Up untill now there's no user authentication, but I am planning on doing this later once basic functionality is completed. &lt;/p&gt;

&lt;p&gt;And if you need github repo of the same, please ask me. I will share that as well. Any suggestions are welcome, but main topic is that how can I implement search feature on api side. &lt;br&gt;
Thank you. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>node</category>
    </item>
    <item>
      <title>How to create Beautiful ❤️ Dynamic Login Screen</title>
      <author>manish srivastava</author>
      <pubDate>Tue, 29 Jun 2021 17:01:28 +0000</pubDate>
      <link>https://dev.to/manishfoodtechs/how-to-create-beautiful-dynamic-login-screen-5be4</link>
      <guid>https://dev.to/manishfoodtechs/how-to-create-beautiful-dynamic-login-screen-5be4</guid>
      <description>&lt;p&gt;What I learnt in making login screen of Habit-O-Circle. &lt;/p&gt;

&lt;p&gt;Below are some dynamically created login screens. &lt;br&gt;
Everytime you try to login or refresh page:-&lt;br&gt;
(1)Background picture is changed . There are more than 1000+ pics to come randomly and not a single picture is stored in the app. &lt;/p&gt;

&lt;p&gt;(2) Doodles are changed dynamically and adjust itself according to screen size.&lt;/p&gt;

&lt;p&gt;(3) Login div is glassmorphic.&lt;/p&gt;

&lt;p&gt;(4) Responsive Topography in login div.&lt;/p&gt;

&lt;p&gt;(5) Exact center alignment of login div: H &amp;amp; V&lt;/p&gt;

&lt;p&gt;None of the pictures are stored by app.&lt;/p&gt;

&lt;p&gt;Let's see some login screen shots:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dk2vhxZ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/teutvhxxefe8c4dpnuvo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dk2vhxZ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/teutvhxxefe8c4dpnuvo.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vUeNzeVt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s2r8ap38la6h2hhb2wg7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vUeNzeVt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s2r8ap38la6h2hhb2wg7.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D9soif8Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o011wmkseph2lh093kf4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D9soif8Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o011wmkseph2lh093kf4.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VIp7VYqU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/95wmwhhiy63tg1hob0xv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VIp7VYqU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/95wmwhhiy63tg1hob0xv.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nqKpZmq---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptiq8ew89n1sak0t62e5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nqKpZmq---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ptiq8ew89n1sak0t62e5.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LPp6xMid--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u7wvj5nlj0owx4u1foe2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LPp6xMid--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u7wvj5nlj0owx4u1foe2.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-i-achieved-this"&gt;
  &lt;/a&gt;
  How I achieved this:
&lt;/h2&gt;

&lt;p&gt;(1)Background picture is changed : &lt;br&gt;
Answer: look at my post &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/manishfoodtechs" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AyoLr6Eq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--nGkJnCB3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/221659/353cc208-374e-4d32-8304-bf9aba600a40.jpg" alt="manishfoodtechs"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/manishfoodtechs/wow-the-lorem-ipsum-for-photos-lorem-picsum-4dbj" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt; WOW!!! The Lorem Ipsum for photos :Lorem Picsum&lt;/h2&gt;
      &lt;h3&gt;manish srivastava ・ Sep 10 '20 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;(2) Doodles are changed dynamically and adjust itself according to screen size.&lt;/p&gt;

&lt;p&gt;Answer: Created an array of Doodles url. Then, randomly selected one from array.&lt;/p&gt;

&lt;p&gt;(3) Login div is glassmorphic.&lt;br&gt;
Answer:&lt;br&gt;
&lt;a href="https://glassmorphism.com/"&gt;https://glassmorphism.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(4) Responsive Topography in login div.&lt;br&gt;
Answer:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/manishfoodtechs" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AyoLr6Eq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--nGkJnCB3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/221659/353cc208-374e-4d32-8304-bf9aba600a40.jpg" alt="manishfoodtechs"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/manishfoodtechs/introducing-xtra-power-css-device-size-no-more-a-challenge-1cp1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Introducing Xtra-Power CSS: Device Size No more a Challenge!!!&lt;/h2&gt;
      &lt;h3&gt;manish srivastava ・ Nov 11 '20 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;(5) Exact center alignment of login div: H &amp;amp; V&lt;br&gt;
Answer&lt;br&gt;
&lt;a href="https://www.w3schools.com/css/css_align.asp"&gt;https://www.w3schools.com/css/css_align.asp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find all codes mentioned in link below.&lt;br&gt;
I am not a professional programmer. I just do all this in my free time. In case you are good in UI , please contact me.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/manishfoodtechs" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AyoLr6Eq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--nGkJnCB3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/221659/353cc208-374e-4d32-8304-bf9aba600a40.jpg" alt="manishfoodtechs"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/manishfoodtechs/presenting-habit-o-circle-app-coded-by-code-generator-that-was-coded-by-me-20fo" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt; PRESENTING HABIT-O-CIRCLE APP: CODED BY CODE GENERATOR: THAT WAS CODED BY ME!&lt;/h2&gt;
      &lt;h3&gt;manish srivastava ・ Jun 28 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#php&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#watercooler&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>beginners</category>
      <category>showdev</category>
      <category>css</category>
      <category>php</category>
    </item>
    <item>
      <title>Testing input and output in Rust command line applications</title>
      <author>Jeff Kreeftmeijer</author>
      <pubDate>Tue, 29 Jun 2021 17:01:08 +0000</pubDate>
      <link>https://dev.to/jkreeftmeijer/testing-input-and-output-in-rust-command-line-applications-56p5</link>
      <guid>https://dev.to/jkreeftmeijer/testing-input-and-output-in-rust-command-line-applications-56p5</guid>
      <description>&lt;p&gt;Working with complex input and output can make command line applications challenging to test, as it is inconvenient to capture the output stream to test if the program returns the correct output. Using abstraction through Rust's &lt;code&gt;Read&lt;/code&gt; and &lt;code&gt;Write&lt;/code&gt; traits, we can swap the input and output for byte arrays and vectors during testing instead.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#standard-streams"&gt;
  &lt;/a&gt;
  Standard Streams
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Standard streams&lt;/em&gt; are abstractions used to handle data input and output to an operating system process.&lt;br&gt;
Each program has access to an input stream (&lt;em&gt;standard input&lt;/em&gt;, or &lt;em&gt;stdin&lt;/em&gt;), an output stream (&lt;em&gt;standard output&lt;/em&gt;, or &lt;em&gt;stdout&lt;/em&gt;), and an error stream (&lt;em&gt;standard error&lt;/em&gt;, or &lt;em&gt;stderr&lt;/em&gt;) inherited from the parent process.&lt;/p&gt;

&lt;p&gt;Example 1. &lt;code&gt;grep(1)&lt;/code&gt; filters lines read from stdin with a search pattern ("three" in this case) and prints the matching lines to stdout. After starting, &lt;code&gt;grep&lt;/code&gt; halts to wait for input from stdin. By typing this input into the terminal, we can see that &lt;code&gt;grep&lt;/code&gt; prints any line that matches the pattern back to stdout, which the terminal displays. Then, the program returns to waiting for input until it receives an &lt;em&gt;EOF&lt;/em&gt; (&lt;em&gt;end-of-file&lt;/em&gt;), which we pass by pressing kbd:[ctrl]+kbd:[D] in the terminal.&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ grep three
one
two
three
three
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Because of this abstraction, programs can use &lt;em&gt;pipelines&lt;/em&gt; to pass the output from one program as the input to another by piping stdout from one process to stdin for another.&lt;/p&gt;

&lt;p&gt;Example 2. &lt;code&gt;ls(1)&lt;/code&gt; prints the current directory's contents to stdout. This example uses a &lt;em&gt;pipe&lt;/em&gt; (&lt;code&gt;|&lt;/code&gt;) to create a pipeline, to pass the output from &lt;code&gt;ls&lt;/code&gt; as input to &lt;code&gt;grep&lt;/code&gt;. &lt;code&gt;grep&lt;/code&gt; then filters to only print lines matching the passed pattern ("Cargo").&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ls -l ~/pager | grep Cargo
Cargo.lock
Cargo.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#-raw-stdin-endraw-raw-stdout-endraw-and-raw-stderr-endraw-in-rust"&gt;
  &lt;/a&gt;
  &lt;code&gt;Stdin&lt;/code&gt;, &lt;code&gt;Stdout&lt;/code&gt; and &lt;code&gt;Stderr&lt;/code&gt; in Rust
&lt;/h2&gt;

&lt;p&gt;Rust provides handles to the standard streams through the &lt;a href="https://doc.rust-lang.org/std/io/struct.Stdin.html"&gt;&lt;code&gt;Stdin&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://doc.rust-lang.org/std/io/struct.Stdout.html"&gt;&lt;code&gt;Stdout&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://doc.rust-lang.org/std/io/struct.Stderr.html"&gt;&lt;code&gt;Stderr&lt;/code&gt;&lt;/a&gt; structs, which are created with the &lt;a href="https://doc.rust-lang.org/std/io/fn.stdin.html"&gt;&lt;code&gt;io::stdin()&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://doc.rust-lang.org/std/io/fn.stdout.html"&gt;&lt;code&gt;io::stdout()&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://doc.rust-lang.org/std/io/fn.stderr.html"&gt;&lt;code&gt;io::stderr()&lt;/code&gt;&lt;/a&gt; functions respectively.&lt;/p&gt;

&lt;p&gt;Example 3. This program takes input through stdin, converts the received string to uppercase and prints it back out to the terminal through stdout.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;src/main.rs&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::{&lt;/span&gt;&lt;span class="n"&gt;Read&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.read_to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.write_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="nf"&gt;.to_uppercase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.as_bytes&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The stream handlers implement the &lt;a href="https://doc.rust-lang.org/std/io/trait.Read.html"&gt;&lt;code&gt;Read&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://doc.rust-lang.org/std/io/trait.Write.html"&gt;&lt;code&gt;Write&lt;/code&gt;&lt;/a&gt; traits to read from and write to the streams. Because of that, they share part of their implementation with other "Readers" and "Writers", like &lt;a href="https://doc.rust-lang.org/std/fs/struct.File.html"&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#abstraction-using-the-raw-read-endraw-and-raw-write-endraw-traits"&gt;
  &lt;/a&gt;
  Abstraction using the &lt;code&gt;Read&lt;/code&gt; and &lt;code&gt;Write&lt;/code&gt; traits
&lt;/h2&gt;

&lt;p&gt;One of the issues&lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt; in the &lt;a href="#upcase"&gt;example&lt;/a&gt; above is that it uses the &lt;code&gt;Stdout&lt;/code&gt; and &lt;code&gt;Stdin&lt;/code&gt; structs directly, making our program challenging to test because it is inconvenient to pass input through stdin and capture stdout to assert that the program produces the correct results.&lt;/p&gt;

&lt;p&gt;To make our program more modular, we will decouple it from the &lt;code&gt;Stdin&lt;/code&gt; and &lt;code&gt;Stdout&lt;/code&gt; structs and pass the input and output as arguments to a more abstract, separate function.&lt;/p&gt;

&lt;p&gt;Example 4. In the test for the extracted function, we swap &lt;code&gt;Stdin&lt;/code&gt; and &lt;code&gt;Stdout&lt;/code&gt; out for other implementors of the &lt;code&gt;Read&lt;/code&gt; and &lt;code&gt;Write&lt;/code&gt; traits: a byte array for input and a vector for output.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;src/lib.rs&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[cfg(test)]&lt;/span&gt;
&lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="n"&gt;tests&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;super&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;#[test]&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;writes_upcased_input_to_output&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;u8&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Vec&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="nf"&gt;upcase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="s"&gt;"Hello, world!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nf"&gt;.as_bytes&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="s"&gt;"HELLO, WORLD!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example 5. The implementation that satisfies the test looks like the &lt;a href="#upcase"&gt;original example&lt;/a&gt;, with one significant difference. Because the test passes the input and output as arguments, we can use trait objects to allow any type as long as it implements the &lt;code&gt;Read&lt;/code&gt; and &lt;code&gt;Write&lt;/code&gt; traits:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;src/lib.rs&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;upcase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;dyn&lt;/span&gt; &lt;span class="n"&gt;Read&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;dyn&lt;/span&gt; &lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="nf"&gt;.read_to_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="nf"&gt;.write_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="nf"&gt;.to_uppercase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.as_bytes&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example 6. Finally, we replace the prototype in &lt;code&gt;src/main.rs&lt;/code&gt; with a call to our new implementation with a &lt;code&gt;Stdin&lt;/code&gt; and &lt;code&gt;Stdout&lt;/code&gt; struct for the input and output:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;src/main.rs&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nn"&gt;upcase&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;upcase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By abstracting &lt;code&gt;Stdin&lt;/code&gt; and &lt;code&gt;Stdout&lt;/code&gt; out of the implementation, we made our program more modular, allowing us to test the code without resorting to capturing stdout to assert that the printed result matched our expectations.&lt;/p&gt;

&lt;p&gt;Aside from better testability, making our implementation more modular will allow us to work with other data types in the future.&lt;br&gt;
For example, we might add a command-line option that takes a filename and pass a &lt;code&gt;File&lt;/code&gt; to &lt;code&gt;upcase()&lt;/code&gt;.&lt;br&gt;
Since &lt;code&gt;File&lt;/code&gt; also implements the &lt;code&gt;Read&lt;/code&gt; trait, that would work without further modifications in our implementation.&lt;/p&gt;




&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;Another issue with this example is that it uses &lt;a href="https://doc.rust-lang.org/std/io/trait.Read.html#method.read_to_string"&gt;&lt;code&gt;Read::read_to_string()&lt;/code&gt;&lt;/a&gt;, which will read the contents of the whole stream from the input before writing everything to stdout at once, which is inefficient, especially for larger inputs. A more efficient implementation could use buffered reading through the &lt;code&gt;BufRead&lt;/code&gt; trait to read and write the input stream line by line. &lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;

</description>
      <category>rust</category>
      <category>programming</category>
      <category>testing</category>
      <category>tdd</category>
    </item>
  </channel>
</rss>
